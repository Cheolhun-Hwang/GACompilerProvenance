.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000
.text:00401000 sub_401000      proc near               ; DATA XREF: .rdata:00403464↓o
.text:00401000                 mov     dword ptr [ecx], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:00401006                 jmp     ds:??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text:00401006 sub_401000      endp
.text:00401006
.text:00401006 ; ---------------------------------------------------------------------------
.text:0040100C                 align 10h
.text:00401010
.text:00401010 ; =============== S U B R O U T I N E =======================================
.text:00401010
.text:00401010 ; Attributes: bp-based frame
.text:00401010
.text:00401010 sub_401010      proc near               ; DATA XREF: .rdata:const std::bad_alloc::`vftable'↓o
.text:00401010
.text:00401010 arg_0           = byte ptr  8
.text:00401010
.text:00401010                 push    ebp
.text:00401011                 mov     ebp, esp
.text:00401013                 push    esi
.text:00401014                 mov     esi, ecx
.text:00401016                 mov     dword ptr [esi], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:0040101C                 call    ds:??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text:00401022                 test    [ebp+arg_0], 1
.text:00401026                 jz      short loc_401032
.text:00401028                 push    esi
.text:00401029                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040102F                 add     esp, 4
.text:00401032
.text:00401032 loc_401032:                             ; CODE XREF: sub_401010+16↑j
.text:00401032                 mov     eax, esi
.text:00401034                 pop     esi
.text:00401035                 pop     ebp
.text:00401036                 retn    4
.text:00401036 sub_401010      endp
.text:00401036
.text:00401036 ; ---------------------------------------------------------------------------
.text:00401039                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401040+9F↓p
.text:00401040                                         ; _main+247↓p
.text:00401040
.text:00401040 var_4           = dword ptr -4
.text:00401040 arg_0           = dword ptr  8
.text:00401040 arg_4           = dword ptr  0Ch
.text:00401040 arg_8           = dword ptr  10h
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 push    ebx
.text:00401047                 mov     ebx, [ebp+arg_0]
.text:0040104A                 shl     ebx, 4
.text:0040104D                 mov     eax, dword_408254[ebx]
.text:00401053                 sub     eax, dword_408250[ebx]
.text:00401059                 push    esi
.text:0040105A                 push    edi
.text:0040105B                 test    eax, 0FFFFFFFCh
.text:00401060                 jz      loc_401114
.text:00401066                 mov     eax, dword_408254[ebx]
.text:0040106C                 mov     ecx, dword_408250[ebx]
.text:00401072                 mov     edx, eax
.text:00401074                 sub     edx, ecx
.text:00401076                 sar     edx, 2
.text:00401079                 push    edx
.text:0040107A                 push    eax
.text:0040107B                 push    ecx
.text:0040107C                 call    sub_401950
.text:00401081                 mov     eax, dword_408254[ebx]
.text:00401087                 sub     eax, dword_408250[ebx]
.text:0040108D                 add     esp, 0Ch
.text:00401090                 mov     [ebp+var_4], 0
.text:00401097                 test    eax, 0FFFFFFFCh
.text:0040109C                 jle     short loc_401114
.text:0040109E                 mov     edx, [ebp+arg_8]
.text:004010A1                 mov     ecx, [ebp+arg_4]
.text:004010A4
.text:004010A4 loc_4010A4:                             ; CODE XREF: sub_401040+D2↓j
.text:004010A4                 mov     eax, dword_408250[ebx]
.text:004010AA                 mov     esi, [ebp+var_4]
.text:004010AD                 mov     esi, [eax+esi*4]
.text:004010B0                 mov     edi, [ebp+arg_0]
.text:004010B3                 sub     edi, esi
.text:004010B5                 mov     eax, edi
.text:004010B7                 imul    eax, edx
.text:004010BA                 cdq
.text:004010BB                 idiv    ecx
.text:004010BD                 mov     ecx, [ebp+arg_0]
.text:004010C0                 mov     edx, dword_4043C8[ecx*4]
.text:004010C7                 sub     edx, eax
.text:004010C9                 lea     eax, [edx-1]
.text:004010CC                 mov     dword_4043C8[esi*4], eax
.text:004010D3                 mov     ecx, dword_4043C8[ecx*4]
.text:004010DA                 sub     ecx, eax
.text:004010DC                 push    ecx
.text:004010DD                 push    edi
.text:004010DE                 push    esi
.text:004010DF                 call    sub_401040
.text:004010E4                 mov     edx, [ebp+arg_0]
.text:004010E7                 mov     edx, dword_4043C8[edx*4]
.text:004010EE                 sub     edx, dword_4043C8[esi*4]
.text:004010F5                 mov     esi, dword_408254[ebx]
.text:004010FB                 sub     esi, dword_408250[ebx]
.text:00401101                 mov     eax, [ebp+var_4]
.text:00401104                 inc     eax
.text:00401105                 sar     esi, 2
.text:00401108                 add     esp, 0Ch
.text:0040110B                 mov     ecx, edi
.text:0040110D                 mov     [ebp+var_4], eax
.text:00401110                 cmp     eax, esi
.text:00401112                 jl      short loc_4010A4
.text:00401114
.text:00401114 loc_401114:                             ; CODE XREF: sub_401040+20↑j
.text:00401114                                         ; sub_401040+5C↑j
.text:00401114                 pop     edi
.text:00401115                 pop     esi
.text:00401116                 xor     eax, eax
.text:00401118                 pop     ebx
.text:00401119                 mov     esp, ebp
.text:0040111B                 pop     ebp
.text:0040111C                 retn
.text:0040111C sub_401040      endp
.text:0040111C
.text:0040111C ; ---------------------------------------------------------------------------
.text:0040111D                 align 10h
.text:00401120
.text:00401120 ; =============== S U B R O U T I N E =======================================
.text:00401120
.text:00401120 ; Attributes: bp-based frame fuzzy-sp
.text:00401120
.text:00401120 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00401120 _main           proc near               ; CODE XREF: ___tmainCRTStartup+11D↓p
.text:00401120
.text:00401120 var_20          = dword ptr -20h
.text:00401120 var_1C          = dword ptr -1Ch
.text:00401120 var_18          = dword ptr -18h
.text:00401120 var_14          = dword ptr -14h
.text:00401120 var_10          = dword ptr -10h
.text:00401120 var_C           = dword ptr -0Ch
.text:00401120 var_8           = dword ptr -8
.text:00401120 var_4           = dword ptr -4
.text:00401120 argc            = dword ptr  8
.text:00401120 argv            = dword ptr  0Ch
.text:00401120 envp            = dword ptr  10h
.text:00401120
.text:00401120                 push    ebp
.text:00401121                 mov     ebp, esp
.text:00401123                 and     esp, 0FFFFFFF8h
.text:00401126                 sub     esp, 24h
.text:00401129                 mov     ecx, ds:?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A ; std::basic_istream<char,std::char_traits<char>> std::cin
.text:0040112F                 push    ebx
.text:00401130                 push    esi
.text:00401131                 push    edi
.text:00401132                 lea     eax, [esp+30h+var_C]
.text:00401136                 push    eax
.text:00401137                 call    ds:??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z ; std::basic_istream<char,std::char_traits<char>>::operator>>(int &)
.text:0040113D                 mov     eax, 1
.text:00401142                 mov     [esp+30h+var_1C], eax
.text:00401146                 cmp     [esp+30h+var_C], eax
.text:0040114A                 jl      loc_40151A
.text:00401150
.text:00401150 loc_401150:                             ; CODE XREF: _main+3F4↓j
.text:00401150                 push    offset dword_406308
.text:00401155                 push    offset Format   ; "%d"
.text:0040115A                 call    ds:scanf
.text:00401160                 mov     esi, dword_406308
.text:00401166                 add     esp, 8
.text:00401169                 mov     [esp+30h+var_14], 0
.text:00401171                 test    esi, esi
.text:00401173                 jle     short loc_4011BD
.text:00401175                 mov     ebx, offset dword_408254
.text:0040117A                 lea     ebx, [ebx+0]
.text:00401180
.text:00401180 loc_401180:                             ; CODE XREF: _main+9B↓j
.text:00401180                 mov     ecx, [ebx]
.text:00401182                 mov     edi, [ebx-4]
.text:00401185                 cmp     edi, ecx
.text:00401187                 jz      short loc_4011AD
.text:00401189                 mov     eax, ecx
.text:0040118B                 sub     eax, ecx
.text:0040118D                 sar     eax, 2
.text:00401190                 lea     esi, ds:0[eax*4]
.text:00401197                 push    esi             ; Size
.text:00401198                 push    ecx             ; Src
.text:00401199                 push    edi             ; Dst
.text:0040119A                 call    ds:memmove
.text:004011A0                 add     esp, 0Ch
.text:004011A3                 add     esi, edi
.text:004011A5                 mov     [ebx], esi
.text:004011A7                 mov     esi, dword_406308
.text:004011AD
.text:004011AD loc_4011AD:                             ; CODE XREF: _main+67↑j
.text:004011AD                 mov     eax, [esp+30h+var_14]
.text:004011B1                 inc     eax
.text:004011B2                 add     ebx, 10h
.text:004011B5                 mov     [esp+30h+var_14], eax
.text:004011B9                 cmp     eax, esi
.text:004011BB                 jl      short loc_401180
.text:004011BD
.text:004011BD loc_4011BD:                             ; CODE XREF: _main+53↑j
.text:004011BD                 xor     ebx, ebx
.text:004011BF                 mov     [esp+30h+var_20], ebx
.text:004011C3                 cmp     esi, 1
.text:004011C6                 jle     loc_4012C8
.text:004011CC                 lea     esp, [esp+0]
.text:004011D0
.text:004011D0 loc_4011D0:                             ; CODE XREF: _main+1A2↓j
.text:004011D0                 lea     esi, dword_406310[ebx*4]
.text:004011D7                 push    esi
.text:004011D8                 push    offset Format   ; "%d"
.text:004011DD                 call    ds:scanf
.text:004011E3                 dec     dword ptr [esi]
.text:004011E5                 mov     esi, [esi]
.text:004011E7                 shl     esi, 4
.text:004011EA                 add     esi, offset dword_408250
.text:004011F0                 mov     eax, [esi+4]
.text:004011F3                 lea     ecx, [esp+38h+var_20]
.text:004011F7                 add     esp, 8
.text:004011FA                 cmp     ecx, eax
.text:004011FC                 jnb     short loc_401261
.text:004011FE                 mov     edx, [esi]
.text:00401200                 cmp     edx, ecx
.text:00401202                 ja      short loc_401261
.text:00401204                 mov     edi, ecx
.text:00401206                 mov     ecx, [esi+8]
.text:00401209                 sub     edi, edx
.text:0040120B                 sar     edi, 2
.text:0040120E                 cmp     eax, ecx
.text:00401210                 jnz     short loc_401251
.text:00401212                 sub     eax, edx
.text:00401214                 sar     eax, 2
.text:00401217                 cmp     eax, 3FFFFFFEh
.text:0040121C                 ja      loc_401523
.text:00401222                 sub     ecx, edx
.text:00401224                 inc     eax
.text:00401225                 sar     ecx, 2
.text:00401228                 cmp     eax, ecx
.text:0040122A                 jbe     short loc_401251
.text:0040122C                 mov     edx, ecx
.text:0040122E                 shr     edx, 1
.text:00401230                 mov     ebx, 3FFFFFFFh
.text:00401235                 sub     ebx, edx
.text:00401237                 cmp     ebx, ecx
.text:00401239                 jnb     short loc_40123F
.text:0040123B                 xor     ecx, ecx
.text:0040123D                 jmp     short loc_401241
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: _main+119↑j
.text:0040123F                 add     ecx, edx
.text:00401241
.text:00401241 loc_401241:                             ; CODE XREF: _main+11D↑j
.text:00401241                 cmp     ecx, eax
.text:00401243                 jnb     short loc_401247
.text:00401245                 mov     ecx, eax
.text:00401247
.text:00401247 loc_401247:                             ; CODE XREF: _main+123↑j
.text:00401247                 push    ecx
.text:00401248                 call    sub_4015E0
.text:0040124D                 mov     ebx, [esp+30h+var_20]
.text:00401251
.text:00401251 loc_401251:                             ; CODE XREF: _main+F0↑j
.text:00401251                                         ; _main+10A↑j
.text:00401251                 mov     eax, [esi+4]
.text:00401254                 test    eax, eax
.text:00401256                 jz      short loc_4012AE
.text:00401258                 mov     edx, [esi]
.text:0040125A                 mov     ecx, [edx+edi*4]
.text:0040125D                 mov     [eax], ecx
.text:0040125F                 jmp     short loc_4012AE
.text:00401261 ; ---------------------------------------------------------------------------
.text:00401261
.text:00401261 loc_401261:                             ; CODE XREF: _main+DC↑j
.text:00401261                                         ; _main+E2↑j
.text:00401261                 mov     ecx, [esi+8]
.text:00401264                 cmp     eax, ecx
.text:00401266                 jnz     short loc_4012A5
.text:00401268                 mov     edx, [esi]
.text:0040126A                 sub     eax, edx
.text:0040126C                 sar     eax, 2
.text:0040126F                 cmp     eax, 3FFFFFFEh
.text:00401274                 ja      loc_401523
.text:0040127A                 sub     ecx, edx
.text:0040127C                 inc     eax
.text:0040127D                 sar     ecx, 2
.text:00401280                 cmp     eax, ecx
.text:00401282                 jbe     short loc_4012A5
.text:00401284                 mov     edx, ecx
.text:00401286                 shr     edx, 1
.text:00401288                 mov     edi, 3FFFFFFFh
.text:0040128D                 sub     edi, edx
.text:0040128F                 cmp     edi, ecx
.text:00401291                 jnb     short loc_401297
.text:00401293                 xor     ecx, ecx
.text:00401295                 jmp     short loc_401299
.text:00401297 ; ---------------------------------------------------------------------------
.text:00401297
.text:00401297 loc_401297:                             ; CODE XREF: _main+171↑j
.text:00401297                 add     ecx, edx
.text:00401299
.text:00401299 loc_401299:                             ; CODE XREF: _main+175↑j
.text:00401299                 cmp     ecx, eax
.text:0040129B                 jnb     short loc_40129F
.text:0040129D                 mov     ecx, eax
.text:0040129F
.text:0040129F loc_40129F:                             ; CODE XREF: _main+17B↑j
.text:0040129F                 push    ecx
.text:004012A0                 call    sub_4015E0
.text:004012A5
.text:004012A5 loc_4012A5:                             ; CODE XREF: _main+146↑j
.text:004012A5                                         ; _main+162↑j
.text:004012A5                 mov     eax, [esi+4]
.text:004012A8                 test    eax, eax
.text:004012AA                 jz      short loc_4012AE
.text:004012AC                 mov     [eax], ebx
.text:004012AE
.text:004012AE loc_4012AE:                             ; CODE XREF: _main+136↑j
.text:004012AE                                         ; _main+13F↑j ...
.text:004012AE                 add     dword ptr [esi+4], 4
.text:004012B2                 mov     esi, dword_406308
.text:004012B8                 inc     ebx
.text:004012B9                 lea     edx, [ebx+1]
.text:004012BC                 mov     [esp+30h+var_20], ebx
.text:004012C0                 cmp     edx, esi
.text:004012C2                 jl      loc_4011D0
.text:004012C8
.text:004012C8 loc_4012C8:                             ; CODE XREF: _main+A6↑j
.text:004012C8                 mov     ebx, 1
.text:004012CD                 cmp     esi, ebx
.text:004012CF                 jle     short loc_40130E
.text:004012D1                 mov     edx, ebx
.text:004012D3                 mov     edi, offset dword_406310
.text:004012D8
.text:004012D8 loc_4012D8:                             ; CODE XREF: _main+1E8↓j
.text:004012D8                 test    ebx, ebx
.text:004012DA                 jz      short loc_40130E
.text:004012DC                 mov     ecx, [edi]
.text:004012DE                 lea     eax, [edx-1]
.text:004012E1                 cmp     ecx, eax
.text:004012E3                 jle     short loc_40130C
.text:004012E5                 mov     eax, edx
.text:004012E7                 cmp     edx, ecx
.text:004012E9                 jge     short loc_401302
.text:004012EB                 jmp     short loc_4012F0
.text:004012EB ; ---------------------------------------------------------------------------
.text:004012ED                 align 10h
.text:004012F0
.text:004012F0 loc_4012F0:                             ; CODE XREF: _main+1CB↑j
.text:004012F0                                         ; _main+1DC↓j
.text:004012F0                 cmp     dword_406310[eax*4], ecx
.text:004012F7                 jg      short loc_401300
.text:004012F9                 inc     eax
.text:004012FA                 cmp     eax, ecx
.text:004012FC                 jl      short loc_4012F0
.text:004012FE                 jmp     short loc_401302
.text:00401300 ; ---------------------------------------------------------------------------
.text:00401300
.text:00401300 loc_401300:                             ; CODE XREF: _main+1D7↑j
.text:00401300                 xor     ebx, ebx
.text:00401302
.text:00401302 loc_401302:                             ; CODE XREF: _main+1C9↑j
.text:00401302                                         ; _main+1DE↑j
.text:00401302                 inc     edx
.text:00401303                 add     edi, 4
.text:00401306                 cmp     edx, esi
.text:00401308                 jl      short loc_4012D8
.text:0040130A                 jmp     short loc_40130E
.text:0040130C ; ---------------------------------------------------------------------------
.text:0040130C
.text:0040130C loc_40130C:                             ; CODE XREF: _main+1C3↑j
.text:0040130C                 xor     ebx, ebx
.text:0040130E
.text:0040130E loc_40130E:                             ; CODE XREF: _main+1AF↑j
.text:0040130E                                         ; _main+1BA↑j ...
.text:0040130E                 mov     ecx, [esp+30h+var_1C]
.text:00401312                 mov     edx, ds:?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cout
.text:00401318                 push    offset asc_403160 ; ": "
.text:0040131D                 push    ecx
.text:0040131E                 push    offset aCase    ; "Case #"
.text:00401323                 push    edx
.text:00401324                 call    sub_4016E0
.text:00401329                 add     esp, 8
.text:0040132C                 mov     ecx, eax
.text:0040132E                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
.text:00401334                 push    eax
.text:00401335                 call    sub_4016E0
.text:0040133A                 xor     esi, esi
.text:0040133C                 add     esp, 8
.text:0040133F                 cmp     ebx, esi
.text:00401341                 jnz     short loc_401356
.text:00401343                 push    offset aImpossible ; "Impossible"
.text:00401348                 call    ds:printf
.text:0040134E                 add     esp, 4
.text:00401351                 jmp     loc_4014F4
.text:00401356 ; ---------------------------------------------------------------------------
.text:00401356
.text:00401356 loc_401356:                             ; CODE XREF: _main+221↑j
.text:00401356                 mov     eax, dword_406308
.text:0040135B                 push    esi
.text:0040135C                 mov     dword_4043C4[eax*4], esi
.text:00401363                 dec     eax
.text:00401364                 push    1
.text:00401366                 push    eax
.text:00401367                 call    sub_401040
.text:0040136C                 mov     eax, dword_406308
.text:00401371                 xor     edi, edi
.text:00401373                 add     esp, 0Ch
.text:00401376                 xor     ecx, ecx
.text:00401378                 mov     [esp+30h+var_14], edi
.text:0040137C                 cmp     eax, esi
.text:0040137E                 jle     short loc_4013A4
.text:00401380
.text:00401380 loc_401380:                             ; CODE XREF: _main+282↓j
.text:00401380                 mov     edx, dword_4043C8[ecx*4]
.text:00401387                 neg     edx
.text:00401389                 mov     [esp+30h+var_10], edx
.text:0040138D                 cmp     edi, edx
.text:0040138F                 lea     edx, [esp+30h+var_10]
.text:00401393                 jl      short loc_401399
.text:00401395                 lea     edx, [esp+30h+var_14]
.text:00401399
.text:00401399 loc_401399:                             ; CODE XREF: _main+273↑j
.text:00401399                 mov     edi, [edx]
.text:0040139B                 inc     ecx
.text:0040139C                 mov     [esp+30h+var_14], edi
.text:004013A0                 cmp     ecx, eax
.text:004013A2                 jl      short loc_401380
.text:004013A4
.text:004013A4 loc_4013A4:                             ; CODE XREF: _main+25E↑j
.text:004013A4                 test    eax, eax
.text:004013A6                 jle     short loc_4013D2
.text:004013A8                 jmp     short loc_4013B0
.text:004013A8 ; ---------------------------------------------------------------------------
.text:004013AA                 align 10h
.text:004013B0
.text:004013B0 loc_4013B0:                             ; CODE XREF: _main+288↑j
.text:004013B0                                         ; _main+2B0↓j
.text:004013B0                 mov     eax, dword_4043C8[esi*4]
.text:004013B7                 add     eax, edi
.text:004013B9                 push    eax
.text:004013BA                 push    offset aD       ; "%d "
.text:004013BF                 call    ds:printf
.text:004013C5                 mov     eax, dword_406308
.text:004013CA                 inc     esi
.text:004013CB                 add     esp, 8
.text:004013CE                 cmp     esi, eax
.text:004013D0                 jl      short loc_4013B0
.text:004013D2
.text:004013D2 loc_4013D2:                             ; CODE XREF: _main+286↑j
.text:004013D2                 mov     esi, 1
.text:004013D7                 xor     ecx, ecx
.text:004013D9                 mov     [esp+30h+var_18], esi
.text:004013DD                 test    eax, eax
.text:004013DF                 jle     short loc_4013FD
.text:004013E1
.text:004013E1 loc_4013E1:                             ; CODE XREF: _main+2D7↓j
.text:004013E1                 mov     edx, dword_4043C8[ecx*4]
.text:004013E8                 add     edx, edi
.text:004013EA                 cmp     edx, 3B9ACA00h
.text:004013F0                 jle     short loc_4013F4
.text:004013F2                 xor     esi, esi
.text:004013F4
.text:004013F4 loc_4013F4:                             ; CODE XREF: _main+2D0↑j
.text:004013F4                 inc     ecx
.text:004013F5                 cmp     ecx, eax
.text:004013F7                 jl      short loc_4013E1
.text:004013F9                 mov     [esp+30h+var_18], esi
.text:004013FD
.text:004013FD loc_4013FD:                             ; CODE XREF: _main+2BF↑j
.text:004013FD                 cmp     eax, 1
.text:00401400                 jle     loc_4014C1
.text:00401406                 mov     edx, 2
.text:0040140B                 xor     edi, edi
.text:0040140D                 mov     [esp+30h+var_14], edx
.text:00401411                 mov     [esp+30h+var_10], edi
.text:00401415
.text:00401415 loc_401415:                             ; CODE XREF: _main+39B↓j
.text:00401415                 lea     ebx, [edx-1]
.text:00401418                 mov     [esp+30h+var_20], ebx
.text:0040141C                 mov     ecx, edx
.text:0040141E                 cmp     edx, eax
.text:00401420                 jge     short loc_40149C
.text:00401422                 mov     edi, dword_4043C8[edi]
.text:00401428                 lea     eax, [edx-2]
.text:0040142B                 mov     esi, edx
.text:0040142D                 mov     [esp+30h+var_8], edi
.text:00401431                 sub     esi, eax
.text:00401433                 jmp     short loc_401444
.text:00401435 ; ---------------------------------------------------------------------------
.text:00401435                 jmp     short loc_401440
.text:00401435 ; ---------------------------------------------------------------------------
.text:00401437                 align 10h
.text:00401440
.text:00401440 loc_401440:                             ; CODE XREF: _main+315↑j
.text:00401440                                         ; _main+372↓j
.text:00401440                 mov     edi, [esp+30h+var_8]
.text:00401444
.text:00401444 loc_401444:                             ; CODE XREF: _main+313↑j
.text:00401444                 mov     eax, dword_4043C8[ecx*4]
.text:0040144B                 add     edx, 0FFFFFFFEh
.text:0040144E                 sub     ebx, edx
.text:00401450                 sub     eax, edi
.text:00401452                 imul    ebx
.text:00401454                 mov     [esp+30h+var_4], edx
.text:00401458                 mov     edx, [esp+30h+var_20]
.text:0040145C                 mov     ebx, eax
.text:0040145E                 mov     eax, dword_4043C8[edx*4]
.text:00401465                 sub     eax, edi
.text:00401467                 imul    esi
.text:00401469                 sub     eax, ebx
.text:0040146B                 sbb     edx, [esp+30h+var_4]
.text:0040146F                 test    edx, edx
.text:00401471                 jg      short loc_401481
.text:00401473                 jl      short loc_401479
.text:00401475                 test    eax, eax
.text:00401477                 jnb     short loc_401481
.text:00401479
.text:00401479 loc_401479:                             ; CODE XREF: _main+353↑j
.text:00401479                 mov     ebx, ecx
.text:0040147B                 mov     [esp+30h+var_20], ebx
.text:0040147F                 jmp     short loc_401485
.text:00401481 ; ---------------------------------------------------------------------------
.text:00401481
.text:00401481 loc_401481:                             ; CODE XREF: _main+351↑j
.text:00401481                                         ; _main+357↑j
.text:00401481                 mov     ebx, [esp+30h+var_20]
.text:00401485
.text:00401485 loc_401485:                             ; CODE XREF: _main+35F↑j
.text:00401485                 mov     eax, dword_406308
.text:0040148A                 mov     edx, [esp+30h+var_14]
.text:0040148E                 inc     ecx
.text:0040148F                 inc     esi
.text:00401490                 cmp     ecx, eax
.text:00401492                 jl      short loc_401440
.text:00401494                 mov     esi, [esp+30h+var_18]
.text:00401498                 mov     edi, [esp+30h+var_10]
.text:0040149C
.text:0040149C loc_40149C:                             ; CODE XREF: _main+300↑j
.text:0040149C                 cmp     dword_406310[edi], ebx
.text:004014A2                 jz      short loc_4014AA
.text:004014A4                 xor     esi, esi
.text:004014A6                 mov     [esp+30h+var_18], esi
.text:004014AA
.text:004014AA loc_4014AA:                             ; CODE XREF: _main+382↑j
.text:004014AA                 inc     edx
.text:004014AB                 add     edi, 4
.text:004014AE                 lea     ecx, [edx-1]
.text:004014B1                 mov     [esp+30h+var_14], edx
.text:004014B5                 mov     [esp+30h+var_10], edi
.text:004014B9                 cmp     ecx, eax
.text:004014BB                 jl      loc_401415
.text:004014C1
.text:004014C1 loc_4014C1:                             ; CODE XREF: _main+2E0↑j
.text:004014C1                 test    esi, esi
.text:004014C3                 jnz     short loc_4014F4
.text:004014C5                 mov     edx, ds:?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl(std::basic_ostream<char,std::char_traits<char>> &)
.text:004014CB                 mov     eax, [esp+30h+var_1C]
.text:004014CF                 push    edx
.text:004014D0                 push    ecx
.text:004014D1                 mov     ecx, ds:?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cerr
.text:004014D7                 push    offset aBad     ; " bad"
.text:004014DC                 push    eax
.text:004014DD                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
.text:004014E3                 push    eax
.text:004014E4                 call    sub_4016E0
.text:004014E9                 add     esp, 0Ch
.text:004014EC                 mov     ecx, eax
.text:004014EE                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(std::basic_ostream<char,std::char_traits<char>> & (*)(std::basic_ostream<char,std::char_traits<char>> &))
.text:004014F4
.text:004014F4 loc_4014F4:                             ; CODE XREF: _main+231↑j
.text:004014F4                                         ; _main+3A3↑j
.text:004014F4                 mov     ecx, ds:?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl(std::basic_ostream<char,std::char_traits<char>> &)
.text:004014FA                 push    ecx
.text:004014FB                 mov     ecx, ds:?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cout
.text:00401501                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(std::basic_ostream<char,std::char_traits<char>> & (*)(std::basic_ostream<char,std::char_traits<char>> &))
.text:00401507                 mov     eax, [esp+30h+var_1C]
.text:0040150B                 inc     eax
.text:0040150C                 mov     [esp+30h+var_1C], eax
.text:00401510                 cmp     eax, [esp+30h+var_C]
.text:00401514                 jle     loc_401150
.text:0040151A
.text:0040151A loc_40151A:                             ; CODE XREF: _main+2A↑j
.text:0040151A                 pop     edi
.text:0040151B                 pop     esi
.text:0040151C                 xor     eax, eax
.text:0040151E                 pop     ebx
.text:0040151F                 mov     esp, ebp
.text:00401521                 pop     ebp
.text:00401522                 retn
.text:00401523 ; ---------------------------------------------------------------------------
.text:00401523
.text:00401523 loc_401523:                             ; CODE XREF: _main+FC↑j
.text:00401523                                         ; _main+154↑j
.text:00401523                 push    offset aVectorTTooLong ; "vector<T> too long"
.text:00401528                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:00401528 _main           endp
.text:00401528
.text:00401528 ; ---------------------------------------------------------------------------
.text:0040152E                 align 10h
.text:00401530 ; [0000000D BYTES: COLLAPSED FUNCTION unknown_libname_1. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040153D                 align 10h
.text:00401540
.text:00401540 ; =============== S U B R O U T I N E =======================================
.text:00401540
.text:00401540
.text:00401540 ; void __thiscall sub_401540(void *)
.text:00401540 sub_401540      proc near               ; DATA XREF: sub_402880↓o
.text:00401540                                         ; sub_4028B0↓o
.text:00401540                 push    esi
.text:00401541                 mov     esi, ecx
.text:00401543                 mov     eax, [esi]
.text:00401545                 test    eax, eax
.text:00401547                 jz      short loc_401553
.text:00401549                 push    eax
.text:0040154A                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00401550                 add     esp, 4
.text:00401553
.text:00401553 loc_401553:                             ; CODE XREF: sub_401540+7↑j
.text:00401553                 mov     dword ptr [esi], 0
.text:00401559                 mov     dword ptr [esi+4], 0
.text:00401560                 mov     dword ptr [esi+8], 0
.text:00401567                 pop     esi
.text:00401568                 retn
.text:00401568 sub_401540      endp
.text:00401568
.text:00401568 ; ---------------------------------------------------------------------------
.text:00401569                 align 10h
.text:00401570
.text:00401570 ; =============== S U B R O U T I N E =======================================
.text:00401570
.text:00401570 ; Attributes: bp-based frame
.text:00401570
.text:00401570 sub_401570      proc near               ; CODE XREF: sub_4016E0+116C↓p
.text:00401570
.text:00401570 var_C           = dword ptr -0Ch
.text:00401570 var_4           = dword ptr -4
.text:00401570 arg_0           = dword ptr  8
.text:00401570 arg_4           = dword ptr  0Ch
.text:00401570
.text:00401570 ; FUNCTION CHUNK AT .text:00401660 SIZE 00000019 BYTES
.text:00401570 ; FUNCTION CHUNK AT .text:00402810 SIZE 00000023 BYTES
.text:00401570
.text:00401570 ; __unwind { // SEH_401570
.text:00401570                 push    ebp
.text:00401571                 mov     ebp, esp
.text:00401573                 push    0FFFFFFFFh
.text:00401575                 push    offset SEH_401570
.text:0040157A                 mov     eax, large fs:0
.text:00401580                 push    eax
.text:00401581                 push    esi
.text:00401582                 mov     eax, ___security_cookie
.text:00401587                 xor     eax, ebp
.text:00401589                 push    eax
.text:0040158A                 lea     eax, [ebp+var_C]
.text:0040158D                 mov     large fs:0, eax
.text:00401593                 mov     esi, [ebp+arg_0]
.text:00401596 ;   try {
.text:00401596                 mov     [ebp+var_4], 0
.text:0040159D                 call    ds:?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
.text:004015A3                 test    al, al
.text:004015A5                 jnz     short loc_4015AF
.text:004015A7                 mov     ecx, [esi]
.text:004015A9                 call    ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
.text:004015A9 ;   } // starts at 401596
.text:004015AF
.text:004015AF loc_4015AF:                             ; CODE XREF: sub_401570+35↑j
.text:004015AF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:004015B6                 mov     eax, [esi]
.text:004015B8                 mov     ecx, [eax]
.text:004015BA                 mov     edx, [ecx+4]
.text:004015BD                 mov     eax, [edx+eax+38h]
.text:004015C1                 test    eax, eax
.text:004015C3                 jz      short loc_4015CE
.text:004015C5                 mov     edx, [eax]
.text:004015C7                 mov     ecx, eax
.text:004015C9                 mov     eax, [edx+8]
.text:004015CC                 call    eax
.text:004015CE
.text:004015CE loc_4015CE:                             ; CODE XREF: sub_401570+53↑j
.text:004015CE                 mov     ecx, [ebp+var_C]
.text:004015D1                 mov     large fs:0, ecx
.text:004015D8                 pop     ecx
.text:004015D9                 pop     esi
.text:004015DA                 mov     esp, ebp
.text:004015DC                 pop     ebp
.text:004015DD                 retn    4
.text:004015DD ; } // starts at 401570
.text:004015DD sub_401570      endp
.text:004015DD
.text:004015E0
.text:004015E0 ; =============== S U B R O U T I N E =======================================
.text:004015E0
.text:004015E0 ; Attributes: bp-based frame
.text:004015E0
.text:004015E0 sub_4015E0      proc near               ; CODE XREF: _main+128↑p
.text:004015E0                                         ; _main+180↑p
.text:004015E0
.text:004015E0 arg_0           = dword ptr  8
.text:004015E0
.text:004015E0                 push    ebp
.text:004015E1                 mov     ebp, esp
.text:004015E3                 mov     ecx, [ebp+arg_0]
.text:004015E6                 cmp     ecx, 3FFFFFFFh
.text:004015EC                 jbe     short loc_4015F9
.text:004015EE                 push    offset aVectorTTooLong ; "vector<T> too long"
.text:004015F3                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:004015F9
.text:004015F9 loc_4015F9:                             ; CODE XREF: sub_4015E0+C↑j
.text:004015F9                 mov     eax, [esi+8]
.text:004015FC                 sub     eax, [esi]
.text:004015FE                 sar     eax, 2
.text:00401601                 cmp     eax, ecx
.text:00401603                 jnb     short loc_401653
.text:00401605                 push    ebx
.text:00401606                 push    edi
.text:00401607                 call    sub_401680
.text:0040160C                 mov     ecx, [esi+4]
.text:0040160F                 mov     ebx, eax
.text:00401611                 mov     eax, [esi]
.text:00401613                 sub     ecx, eax
.text:00401615                 sar     ecx, 2
.text:00401618                 add     ecx, ecx
.text:0040161A                 add     ecx, ecx
.text:0040161C                 push    ecx             ; Size
.text:0040161D                 push    eax             ; Src
.text:0040161E                 push    ebx             ; Dst
.text:0040161F                 call    ds:memmove
.text:00401625                 mov     eax, [esi]
.text:00401627                 mov     edi, [esi+4]
.text:0040162A                 sub     edi, eax
.text:0040162C                 add     esp, 0Ch
.text:0040162F                 sar     edi, 2
.text:00401632                 test    eax, eax
.text:00401634                 jz      short loc_401640
.text:00401636                 push    eax
.text:00401637                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040163D                 add     esp, 4
.text:00401640
.text:00401640 loc_401640:                             ; CODE XREF: sub_4015E0+54↑j
.text:00401640                 mov     edx, [ebp+arg_0]
.text:00401643                 lea     ecx, [ebx+edi*4]
.text:00401646                 lea     eax, [ebx+edx*4]
.text:00401649                 pop     edi
.text:0040164A                 mov     [esi], ebx
.text:0040164C                 mov     [esi+8], eax
.text:0040164F                 mov     [esi+4], ecx
.text:00401652                 pop     ebx
.text:00401653
.text:00401653 loc_401653:                             ; CODE XREF: sub_4015E0+23↑j
.text:00401653                 pop     ebp
.text:00401654                 retn    4
.text:00401654 sub_4015E0      endp
.text:00401654
.text:00401654 ; ---------------------------------------------------------------------------
.text:00401657                 align 10h
.text:00401660 ; START OF FUNCTION CHUNK FOR sub_4016E0
.text:00401660 ;   ADDITIONAL PARENT FUNCTION sub_401570
.text:00401660
.text:00401660 loc_401660:                             ; CODE XREF: sub_401570+12A3↓j
.text:00401660                                         ; sub_4016E0+1163↓j ...
.text:00401660 ; __unwind { // SEH_4016E0
.text:00401660                 mov     eax, [eax]
.text:00401662                 mov     ecx, [eax]
.text:00401664                 mov     edx, [ecx+4]
.text:00401667                 mov     eax, [edx+eax+38h]
.text:0040166B                 test    eax, eax
.text:0040166D                 jz      short locret_401678
.text:0040166F                 mov     edx, [eax]
.text:00401671                 mov     ecx, eax
.text:00401673                 mov     eax, [edx+8]
.text:00401676                 jmp     eax
.text:00401678 ; ---------------------------------------------------------------------------
.text:00401678
.text:00401678 locret_401678:                          ; CODE XREF: sub_4016E0-73↑j
.text:00401678                 retn
.text:00401678 ; } // starts at 401660
.text:00401678 ; END OF FUNCTION CHUNK FOR sub_4016E0
.text:00401678 ; ---------------------------------------------------------------------------
.text:00401679                 align 10h
.text:00401680
.text:00401680 ; =============== S U B R O U T I N E =======================================
.text:00401680
.text:00401680 ; Attributes: bp-based frame
.text:00401680
.text:00401680 sub_401680      proc near               ; CODE XREF: sub_4015E0+27↑p
.text:00401680
.text:00401680 var_10          = dword ptr -10h
.text:00401680 var_4           = dword ptr -4
.text:00401680
.text:00401680                 push    ebp
.text:00401681                 mov     ebp, esp
.text:00401683                 sub     esp, 10h
.text:00401686                 xor     eax, eax
.text:00401688                 test    ecx, ecx
.text:0040168A                 jz      short loc_4016D2
.text:0040168C                 cmp     ecx, 3FFFFFFFh
.text:00401692                 ja      short loc_4016A9
.text:00401694                 lea     eax, ds:0[ecx*4]
.text:0040169B                 push    eax
.text:0040169C                 call    ds:??2@YAPAXI@Z ; operator new(uint)
.text:004016A2                 add     esp, 4
.text:004016A5                 test    eax, eax
.text:004016A7                 jnz     short loc_4016D2
.text:004016A9
.text:004016A9 loc_4016A9:                             ; CODE XREF: sub_401680+12↑j
.text:004016A9                 lea     ecx, [ebp+var_4]
.text:004016AC                 push    ecx
.text:004016AD                 lea     ecx, [ebp+var_10]
.text:004016B0                 mov     [ebp+var_4], 0
.text:004016B7                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:004016BD                 push    offset __TI2?AVbad_alloc@std@@ ; throw info for 'class std::bad_alloc'
.text:004016C2                 lea     edx, [ebp+var_10]
.text:004016C5                 push    edx
.text:004016C6                 mov     [ebp+var_10], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:004016CD                 call    _CxxThrowException
.text:004016D2 ; ---------------------------------------------------------------------------
.text:004016D2
.text:004016D2 loc_4016D2:                             ; CODE XREF: sub_401680+A↑j
.text:004016D2                                         ; sub_401680+27↑j
.text:004016D2                 mov     esp, ebp
.text:004016D4                 pop     ebp
.text:004016D5                 retn
.text:004016D5 sub_401680      endp
.text:004016D5
.text:004016D5 ; ---------------------------------------------------------------------------
.text:004016D6                 align 10h
.text:004016E0
.text:004016E0 ; =============== S U B R O U T I N E =======================================
.text:004016E0
.text:004016E0 ; Attributes: bp-based frame
.text:004016E0
.text:004016E0 sub_4016E0      proc near               ; CODE XREF: _main+204↑p
.text:004016E0                                         ; _main+215↑p ...
.text:004016E0
.text:004016E0 var_30          = dword ptr -30h
.text:004016E0 var_2C          = byte ptr -2Ch
.text:004016E0 var_24          = dword ptr -24h
.text:004016E0 var_1C          = dword ptr -1Ch
.text:004016E0 var_18          = dword ptr -18h
.text:004016E0 var_14          = dword ptr -14h
.text:004016E0 var_10          = dword ptr -10h
.text:004016E0 var_C           = dword ptr -0Ch
.text:004016E0 var_4           = dword ptr -4
.text:004016E0 arg_0           = dword ptr  8
.text:004016E0 arg_4           = dword ptr  0Ch
.text:004016E0
.text:004016E0 ; FUNCTION CHUNK AT .text:00401660 SIZE 00000019 BYTES
.text:004016E0 ; FUNCTION CHUNK AT .text:00402840 SIZE 00000035 BYTES
.text:004016E0
.text:004016E0 ; __unwind { // SEH_4016E0
.text:004016E0                 push    ebp
.text:004016E1                 mov     ebp, esp
.text:004016E3                 push    0FFFFFFFFh
.text:004016E5                 push    offset SEH_4016E0
.text:004016EA                 mov     eax, large fs:0
.text:004016F0                 push    eax
.text:004016F1                 sub     esp, 24h
.text:004016F4                 push    ebx
.text:004016F5                 push    esi
.text:004016F6                 push    edi
.text:004016F7                 mov     eax, ___security_cookie
.text:004016FC                 xor     eax, ebp
.text:004016FE                 push    eax
.text:004016FF                 lea     eax, [ebp+var_C]
.text:00401702                 mov     large fs:0, eax
.text:00401708                 mov     [ebp+var_10], esp
.text:0040170B                 mov     esi, [ebp+arg_0]
.text:0040170E                 mov     eax, [ebp+arg_4]
.text:00401711                 mov     [ebp+var_14], 0
.text:00401718                 lea     ecx, [eax+1]
.text:0040171B                 jmp     short loc_401720
.text:0040171B ; ---------------------------------------------------------------------------
.text:0040171D                 align 10h
.text:00401720
.text:00401720 loc_401720:                             ; CODE XREF: sub_4016E0+3B↑j
.text:00401720                                         ; sub_4016E0+45↓j
.text:00401720                 mov     dl, [eax]
.text:00401722                 inc     eax
.text:00401723                 test    dl, dl
.text:00401725                 jnz     short loc_401720
.text:00401727                 sub     eax, ecx
.text:00401729                 mov     [ebp+var_18], eax
.text:0040172C                 mov     eax, [esi]
.text:0040172E                 mov     edx, [eax+4]
.text:00401731                 mov     ecx, [edx+esi+24h]
.text:00401735                 mov     eax, [edx+esi+20h]
.text:00401739                 xor     edi, edi
.text:0040173B                 test    ecx, ecx
.text:0040173D                 jl      short loc_40175E
.text:0040173F                 jg      short loc_401745
.text:00401741                 test    eax, eax
.text:00401743                 jz      short loc_40175E
.text:00401745
.text:00401745 loc_401745:                             ; CODE XREF: sub_4016E0+5F↑j
.text:00401745                 cmp     ecx, edi
.text:00401747                 jl      short loc_40175E
.text:00401749                 jg      short loc_401750
.text:0040174B                 cmp     eax, [ebp+var_18]
.text:0040174E                 jbe     short loc_40175E
.text:00401750
.text:00401750 loc_401750:                             ; CODE XREF: sub_4016E0+69↑j
.text:00401750                 sub     eax, [ebp+var_18]
.text:00401753                 sbb     ecx, edi
.text:00401755                 mov     edi, ecx
.text:00401757                 mov     ebx, eax
.text:00401759                 mov     [ebp+var_24], edi
.text:0040175C                 jmp     short loc_401765
.text:0040175E ; ---------------------------------------------------------------------------
.text:0040175E
.text:0040175E loc_40175E:                             ; CODE XREF: sub_4016E0+5D↑j
.text:0040175E                                         ; sub_4016E0+63↑j ...
.text:0040175E                 xor     ebx, ebx
.text:00401760                 mov     [ebp+var_24], ebx
.text:00401763                 mov     edi, ebx
.text:00401765
.text:00401765 loc_401765:                             ; CODE XREF: sub_4016E0+7C↑j
.text:00401765                 mov     edx, [edx+esi+38h]
.text:00401769                 mov     [ebp+var_30], esi
.text:0040176C                 test    edx, edx
.text:0040176E                 jz      short loc_401779
.text:00401770                 mov     eax, [edx]
.text:00401772                 mov     ecx, edx
.text:00401774                 mov     edx, [eax+4]
.text:00401777                 call    edx
.text:00401779
.text:00401779 loc_401779:                             ; CODE XREF: sub_4016E0+8E↑j
.text:00401779 ;   try {
.text:00401779                 mov     [ebp+var_4], 0
.text:00401780                 mov     eax, [esi]
.text:00401782                 mov     eax, [eax+4]
.text:00401785                 cmp     dword ptr [eax+esi+0Ch], 0
.text:0040178A                 jnz     short loc_40179C
.text:0040178C                 mov     eax, [eax+esi+3Ch]
.text:00401790                 test    eax, eax
.text:00401792                 jz      short loc_40179C
.text:00401794                 mov     ecx, eax
.text:00401796                 call    ds:?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char>>::flush(void)
.text:0040179C
.text:0040179C loc_40179C:                             ; CODE XREF: sub_4016E0+AA↑j
.text:0040179C                                         ; sub_4016E0+B2↑j
.text:0040179C                 mov     edx, [esi]
.text:0040179E                 mov     eax, [edx+4]
.text:004017A1                 cmp     dword ptr [eax+esi+0Ch], 0
.text:004017A6                 setz    cl
.text:004017A9                 mov     [ebp+var_2C], cl
.text:004017A9 ;   } // starts at 401779
.text:004017AC ;   try {
.text:004017AC                 mov     [ebp+var_4], 1
.text:004017B3                 test    cl, cl
.text:004017B5                 jnz     short loc_4017C3
.text:004017B7                 mov     [ebp+var_14], 4
.text:004017BE                 jmp     loc_401850
.text:004017BE ;   } // starts at 4017AC
.text:004017C3 ; ---------------------------------------------------------------------------
.text:004017C3
.text:004017C3 loc_4017C3:                             ; CODE XREF: sub_4016E0+D5↑j
.text:004017C3 ;   try {
.text:004017C3                 mov     byte ptr [ebp+var_4], 2
.text:004017C7                 mov     eax, [eax+esi+14h]
.text:004017CB                 and     eax, 1C0h
.text:004017D0                 cmp     eax, 40h ; '@'
.text:004017D3                 jz      short loc_40180C
.text:004017D5
.text:004017D5 loc_4017D5:                             ; CODE XREF: sub_4016E0+1D7↓j
.text:004017D5                 test    edi, edi
.text:004017D7                 jl      short loc_401806
.text:004017D9                 jg      short loc_4017DF
.text:004017DB                 test    ebx, ebx
.text:004017DD                 jz      short loc_401806
.text:004017DF
.text:004017DF loc_4017DF:                             ; CODE XREF: sub_4016E0+F9↑j
.text:004017DF                 mov     ecx, [esi]
.text:004017E1                 mov     eax, [ecx+4]
.text:004017E4                 mov     cl, [eax+esi+40h]
.text:004017E8                 mov     byte ptr [ebp+var_1C], cl
.text:004017EB                 mov     edx, [ebp+var_1C]
.text:004017EE                 mov     ecx, [eax+esi+38h]
.text:004017F2                 push    edx
.text:004017F3                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:004017F9                 cmp     eax, 0FFFFFFFFh
.text:004017FC                 jnz     loc_4018AE
.text:00401802                 or      [ebp+var_14], 4
.text:00401806
.text:00401806 loc_401806:                             ; CODE XREF: sub_4016E0+F7↑j
.text:00401806                                         ; sub_4016E0+FD↑j
.text:00401806                 cmp     [ebp+var_14], 0
.text:0040180A                 jnz     short loc_40183A
.text:0040180C
.text:0040180C loc_40180C:                             ; CODE XREF: sub_4016E0+F3↑j
.text:0040180C                 mov     eax, [esi]
.text:0040180E                 mov     ecx, [eax+4]
.text:00401811                 mov     edx, [ebp+var_18]
.text:00401814                 mov     eax, [ebp+arg_4]
.text:00401817                 mov     ecx, [ecx+esi+38h]
.text:0040181B                 xor     edi, edi
.text:0040181D                 push    edi
.text:0040181E                 push    edx
.text:0040181F                 push    eax
.text:00401820                 call    ds:?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputn(char const *,__int64)
.text:00401826                 cmp     eax, [ebp+var_18]
.text:00401829                 jnz     short loc_401833
.text:0040182B                 cmp     edx, edi
.text:0040182D                 jz      loc_4018C0
.text:00401833
.text:00401833 loc_401833:                             ; CODE XREF: sub_4016E0+149↑j
.text:00401833                 mov     [ebp+var_14], 4
.text:0040183A
.text:0040183A loc_40183A:                             ; CODE XREF: sub_4016E0+12A↑j
.text:0040183A                                         ; sub_4016E0+1E3↓j ...
.text:0040183A                 mov     edx, [esi]
.text:0040183C                 mov     eax, [edx+4]
.text:0040183F                 xor     ecx, ecx
.text:00401841                 mov     [eax+esi+20h], ecx
.text:00401845                 mov     [eax+esi+24h], ecx
.text:00401845 ;   } // starts at 4017C3
.text:00401849 ;   try {
.text:00401849                 mov     [ebp+var_4], 1
.text:00401850
.text:00401850 loc_401850:                             ; CODE XREF: sub_4016E0+DE↑j
.text:00401850                                         ; sub_4016E0+248↓j
.text:00401850                 mov     ecx, [esi]
.text:00401852                 mov     eax, [ebp+var_14]
.text:00401855                 mov     ecx, [ecx+4]
.text:00401858                 push    0
.text:0040185A                 push    eax
.text:0040185B                 add     ecx, esi
.text:0040185D                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:0040185D ;   } // starts at 401849
.text:00401863 ;   try {
.text:00401863                 mov     [ebp+var_4], 4
.text:0040186A                 call    ds:?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
.text:00401870                 mov     edi, [ebp+var_30]
.text:00401873                 test    al, al
.text:00401875                 jnz     short loc_40187F
.text:00401877                 mov     ecx, edi
.text:00401879                 call    ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
.text:00401879 ;   } // starts at 401863
.text:0040187F
.text:0040187F loc_40187F:                             ; CODE XREF: sub_4016E0+195↑j
.text:0040187F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00401886                 mov     edx, [edi]
.text:00401888                 mov     eax, [edx+4]
.text:0040188B                 mov     ecx, [eax+edi+38h]
.text:0040188F                 test    ecx, ecx
.text:00401891                 jz      short loc_40189A
.text:00401893                 mov     edx, [ecx]
.text:00401895                 mov     eax, [edx+8]
.text:00401898                 call    eax
.text:0040189A
.text:0040189A loc_40189A:                             ; CODE XREF: sub_4016E0+1B1↑j
.text:0040189A                 mov     eax, esi
.text:0040189C                 mov     ecx, [ebp+var_C]
.text:0040189F                 mov     large fs:0, ecx
.text:004018A6                 pop     ecx
.text:004018A7                 pop     edi
.text:004018A8                 pop     esi
.text:004018A9                 pop     ebx
.text:004018AA                 mov     esp, ebp
.text:004018AC                 pop     ebp
.text:004018AD                 retn
.text:004018AE ; ---------------------------------------------------------------------------
.text:004018AE
.text:004018AE loc_4018AE:                             ; CODE XREF: sub_4016E0+11C↑j
.text:004018AE                 add     ebx, 0FFFFFFFFh
.text:004018B1                 adc     edi, 0FFFFFFFFh
.text:004018B4                 mov     [ebp+var_24], edi
.text:004018B7                 jmp     loc_4017D5
.text:004018B7 ; ---------------------------------------------------------------------------
.text:004018BC                 align 10h
.text:004018C0
.text:004018C0 loc_4018C0:                             ; CODE XREF: sub_4016E0+14D↑j
.text:004018C0                                         ; sub_4016E0+222↓j
.text:004018C0                 cmp     [ebp+var_24], edi
.text:004018C3                 jl      loc_40183A
.text:004018C9                 jg      short loc_4018D3
.text:004018CB                 test    ebx, ebx
.text:004018CD                 jz      loc_40183A
.text:004018D3
.text:004018D3 loc_4018D3:                             ; CODE XREF: sub_4016E0+1E9↑j
.text:004018D3                 mov     ecx, [esi]
.text:004018D5                 mov     eax, [ecx+4]
.text:004018D8                 mov     cl, [eax+esi+40h]
.text:004018DC                 mov     byte ptr [ebp+var_1C], cl
.text:004018DF                 mov     edx, [ebp+var_1C]
.text:004018E2                 mov     ecx, [eax+esi+38h]
.text:004018E6                 push    edx
.text:004018E7                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:004018ED                 cmp     eax, 0FFFFFFFFh
.text:004018F0                 jnz     short loc_4018FB
.text:004018F2                 or      [ebp+var_14], 4
.text:004018F6                 jmp     loc_40183A
.text:004018FB ; ---------------------------------------------------------------------------
.text:004018FB
.text:004018FB loc_4018FB:                             ; CODE XREF: sub_4016E0+210↑j
.text:004018FB                 add     ebx, 0FFFFFFFFh
.text:004018FE                 adc     [ebp+var_24], 0FFFFFFFFh
.text:00401902                 jmp     short loc_4018C0
.text:00401904 ; ---------------------------------------------------------------------------
.text:00401904
.text:00401904 loc_401904:                             ; DATA XREF: .rdata:stru_4034C4↓o
.text:00401904 ;   catch(...) // owned by 4017C3
.text:00401904                 mov     eax, [ebp+arg_0]
.text:00401907                 mov     ecx, [eax]
.text:00401909                 mov     ecx, [ecx+4]
.text:0040190C                 push    1
.text:0040190E                 push    4
.text:00401910                 add     ecx, eax
.text:00401912                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:00401918 ;   try {
.text:00401918                 mov     [ebp+var_4], 1
.text:0040191F                 mov     eax, offset loc_401925
.text:00401924                 retn
.text:00401925 ; ---------------------------------------------------------------------------
.text:00401925
.text:00401925 loc_401925:                             ; CODE XREF: sub_4016E0+244↑j
.text:00401925                                         ; DATA XREF: sub_4016E0+23F↑o
.text:00401925                 mov     esi, [ebp+arg_0]
.text:00401928                 jmp     loc_401850
.text:00401928 ;   } // starts at 401918
.text:00401928 ; } // starts at 4016E0
.text:00401928 sub_4016E0      endp
.text:00401928
.text:00401928 ; ---------------------------------------------------------------------------
.text:0040192D                 align 10h
.text:00401930
.text:00401930 ; =============== S U B R O U T I N E =======================================
.text:00401930
.text:00401930 ; Attributes: bp-based frame
.text:00401930
.text:00401930 sub_401930      proc near               ; DATA XREF: .rdata:00403450↓o
.text:00401930
.text:00401930 arg_0           = dword ptr  8
.text:00401930
.text:00401930                 push    ebp
.text:00401931                 mov     ebp, esp
.text:00401933                 mov     eax, [ebp+arg_0]
.text:00401936                 push    esi
.text:00401937                 push    eax
.text:00401938                 mov     esi, ecx
.text:0040193A                 call    ds:__imp_??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.text:00401940                 mov     dword ptr [esi], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:00401946                 mov     eax, esi
.text:00401948                 pop     esi
.text:00401949                 pop     ebp
.text:0040194A                 retn    4
.text:0040194A sub_401930      endp
.text:0040194A
.text:0040194A ; ---------------------------------------------------------------------------
.text:0040194D                 align 10h
.text:00401950
.text:00401950 ; =============== S U B R O U T I N E =======================================
.text:00401950
.text:00401950 ; Attributes: bp-based frame
.text:00401950
.text:00401950 sub_401950      proc near               ; CODE XREF: sub_401040+3C↑p
.text:00401950                                         ; sub_401950+5C↓p ...
.text:00401950
.text:00401950 var_C           = dword ptr -0Ch
.text:00401950 var_8           = dword ptr -8
.text:00401950 arg_0           = dword ptr  8
.text:00401950 arg_4           = dword ptr  0Ch
.text:00401950 arg_8           = dword ptr  10h
.text:00401950
.text:00401950                 push    ebp
.text:00401951                 mov     ebp, esp
.text:00401953                 sub     esp, 10h
.text:00401956                 push    ebx
.text:00401957                 mov     ebx, [ebp+arg_0]
.text:0040195A                 push    esi
.text:0040195B                 push    edi
.text:0040195C                 mov     edi, [ebp+arg_4]
.text:0040195F                 mov     eax, edi
.text:00401961                 sub     eax, ebx
.text:00401963                 sar     eax, 2
.text:00401966                 cmp     eax, 20h ; ' '
.text:00401969                 jle     short loc_4019CF
.text:0040196B                 mov     esi, [ebp+arg_8]
.text:0040196E
.text:0040196E loc_40196E:                             ; CODE XREF: sub_401950+7D↓j
.text:0040196E                 test    esi, esi
.text:00401970                 jle     short loc_4019E8
.text:00401972                 push    edi
.text:00401973                 lea     eax, [ebp+var_C]
.text:00401976                 push    ebx
.text:00401977                 push    eax
.text:00401978                 call    sub_401A20
.text:0040197D                 mov     eax, esi
.text:0040197F                 cdq
.text:00401980                 sub     eax, edx
.text:00401982                 sar     eax, 1
.text:00401984                 mov     esi, eax
.text:00401986                 cdq
.text:00401987                 sub     eax, edx
.text:00401989                 mov     edx, [ebp+var_C]
.text:0040198C                 sar     eax, 1
.text:0040198E                 add     esi, eax
.text:00401990                 mov     eax, [ebp+var_8]
.text:00401993                 mov     ecx, edi
.text:00401995                 sub     ecx, eax
.text:00401997                 sub     edx, ebx
.text:00401999                 add     esp, 0Ch
.text:0040199C                 and     ecx, 0FFFFFFFCh
.text:0040199F                 and     edx, 0FFFFFFFCh
.text:004019A2                 push    esi
.text:004019A3                 cmp     edx, ecx
.text:004019A5                 jge     short loc_4019B6
.text:004019A7                 mov     eax, [ebp+var_C]
.text:004019AA                 push    eax
.text:004019AB                 push    ebx
.text:004019AC                 call    sub_401950
.text:004019B1                 mov     ebx, [ebp+var_8]
.text:004019B4                 jmp     short loc_4019C0
.text:004019B6 ; ---------------------------------------------------------------------------
.text:004019B6
.text:004019B6 loc_4019B6:                             ; CODE XREF: sub_401950+55↑j
.text:004019B6                 push    edi
.text:004019B7                 push    eax
.text:004019B8                 call    sub_401950
.text:004019BD                 mov     edi, [ebp+var_C]
.text:004019C0
.text:004019C0 loc_4019C0:                             ; CODE XREF: sub_401950+64↑j
.text:004019C0                 mov     eax, edi
.text:004019C2                 sub     eax, ebx
.text:004019C4                 sar     eax, 2
.text:004019C7                 add     esp, 0Ch
.text:004019CA                 cmp     eax, 20h ; ' '
.text:004019CD                 jg      short loc_40196E
.text:004019CF
.text:004019CF loc_4019CF:                             ; CODE XREF: sub_401950+19↑j
.text:004019CF                                         ; sub_401950+9B↓j
.text:004019CF                 cmp     eax, 1
.text:004019D2                 jle     short loc_4019E1
.text:004019D4                 cmp     ebx, edi
.text:004019D6                 jz      short loc_4019E1
.text:004019D8                 push    edi
.text:004019D9                 call    sub_401DD0
.text:004019DE                 add     esp, 4
.text:004019E1
.text:004019E1 loc_4019E1:                             ; CODE XREF: sub_401950+82↑j
.text:004019E1                                         ; sub_401950+86↑j
.text:004019E1                 pop     edi
.text:004019E2                 pop     esi
.text:004019E3                 pop     ebx
.text:004019E4                 mov     esp, ebp
.text:004019E6                 pop     ebp
.text:004019E7                 retn
.text:004019E8 ; ---------------------------------------------------------------------------
.text:004019E8
.text:004019E8 loc_4019E8:                             ; CODE XREF: sub_401950+20↑j
.text:004019E8                 cmp     eax, 20h ; ' '
.text:004019EB                 jle     short loc_4019CF
.text:004019ED                 mov     ecx, edi
.text:004019EF                 sub     ecx, ebx
.text:004019F1                 and     ecx, 0FFFFFFFCh
.text:004019F4                 cmp     ecx, 4
.text:004019F7                 jle     short loc_401A02
.text:004019F9                 mov     eax, edi
.text:004019FB                 mov     ecx, ebx
.text:004019FD                 call    sub_401C90
.text:00401A02
.text:00401A02 loc_401A02:                             ; CODE XREF: sub_401950+A7↑j
.text:00401A02                 mov     eax, edi
.text:00401A04                 mov     ecx, ebx
.text:00401A06                 call    sub_401D30
.text:00401A0B                 pop     edi
.text:00401A0C                 pop     esi
.text:00401A0D                 pop     ebx
.text:00401A0E                 mov     esp, ebp
.text:00401A10                 pop     ebp
.text:00401A11                 retn
.text:00401A11 sub_401950      endp
.text:00401A11
.text:00401A11 ; ---------------------------------------------------------------------------
.text:00401A12                 align 10h
.text:00401A20
.text:00401A20 ; =============== S U B R O U T I N E =======================================
.text:00401A20
.text:00401A20 ; Attributes: bp-based frame
.text:00401A20
.text:00401A20 sub_401A20      proc near               ; CODE XREF: sub_401950+28↑p
.text:00401A20
.text:00401A20 var_8           = dword ptr -8
.text:00401A20 var_4           = dword ptr -4
.text:00401A20 arg_0           = dword ptr  8
.text:00401A20 arg_4           = dword ptr  0Ch
.text:00401A20 arg_8           = dword ptr  10h
.text:00401A20
.text:00401A20                 push    ebp
.text:00401A21                 mov     ebp, esp
.text:00401A23                 mov     ecx, [ebp+arg_8]
.text:00401A26                 sub     esp, 8
.text:00401A29                 push    ebx
.text:00401A2A                 mov     ebx, [ebp+arg_4]
.text:00401A2D                 mov     eax, ecx
.text:00401A2F                 sub     eax, ebx
.text:00401A31                 sar     eax, 2
.text:00401A34                 cdq
.text:00401A35                 push    esi
.text:00401A36                 sub     eax, edx
.text:00401A38                 add     ecx, 0FFFFFFFCh
.text:00401A3B                 push    edi
.text:00401A3C                 sar     eax, 1
.text:00401A3E                 push    ecx
.text:00401A3F                 lea     esi, [ebx+eax*4]
.text:00401A42                 mov     ecx, ebx
.text:00401A44                 call    sub_401B60
.text:00401A49                 add     esp, 4
.text:00401A4C                 mov     eax, esi
.text:00401A4E                 lea     edi, [esi+4]
.text:00401A51                 cmp     ebx, esi
.text:00401A53                 jnb     short loc_401A67
.text:00401A55
.text:00401A55 loc_401A55:                             ; CODE XREF: sub_401A20+45↓j
.text:00401A55                 mov     ecx, [eax-4]
.text:00401A58                 mov     edx, [eax]
.text:00401A5A                 cmp     edx, ecx
.text:00401A5C                 jg      short loc_401A67
.text:00401A5E                 jl      short loc_401A67
.text:00401A60                 add     eax, 0FFFFFFFCh
.text:00401A63                 cmp     ebx, eax
.text:00401A65                 jb      short loc_401A55
.text:00401A67
.text:00401A67 loc_401A67:                             ; CODE XREF: sub_401A20+33↑j
.text:00401A67                                         ; sub_401A20+3C↑j ...
.text:00401A67                 mov     esi, [ebp+arg_8]
.text:00401A6A                 cmp     edi, esi
.text:00401A6C                 jnb     short loc_401A7F
.text:00401A6E                 mov     edx, [eax]
.text:00401A70
.text:00401A70 loc_401A70:                             ; CODE XREF: sub_401A20+5D↓j
.text:00401A70                 mov     ecx, [edi]
.text:00401A72                 cmp     edx, ecx
.text:00401A74                 jg      short loc_401A7F
.text:00401A76                 jl      short loc_401A7F
.text:00401A78                 add     edi, 4
.text:00401A7B                 cmp     edi, esi
.text:00401A7D                 jb      short loc_401A70
.text:00401A7F
.text:00401A7F loc_401A7F:                             ; CODE XREF: sub_401A20+4C↑j
.text:00401A7F                                         ; sub_401A20+54↑j ...
.text:00401A7F                 mov     ecx, edi
.text:00401A81                 mov     edx, eax
.text:00401A83
.text:00401A83 loc_401A83:                             ; CODE XREF: sub_401A20+EB↓j
.text:00401A83                                         ; sub_401A20+113↓j ...
.text:00401A83                 cmp     ecx, [ebp+arg_8]
.text:00401A86                 jnb     short loc_401AAD
.text:00401A88
.text:00401A88 loc_401A88:                             ; CODE XREF: sub_401A20+8B↓j
.text:00401A88                 mov     esi, [ecx]
.text:00401A8A                 mov     ebx, [eax]
.text:00401A8C                 cmp     esi, ebx
.text:00401A8E                 jg      short loc_401AA5
.text:00401A90                 jl      short loc_401AAD
.text:00401A92                 mov     esi, edi
.text:00401A94                 mov     ebx, [esi]
.text:00401A96                 mov     [ebp+var_4], ebx
.text:00401A99                 mov     ebx, [ecx]
.text:00401A9B                 mov     [esi], ebx
.text:00401A9D                 mov     esi, [ebp+var_4]
.text:00401AA0                 add     edi, 4
.text:00401AA3                 mov     [ecx], esi
.text:00401AA5
.text:00401AA5 loc_401AA5:                             ; CODE XREF: sub_401A20+6E↑j
.text:00401AA5                 add     ecx, 4
.text:00401AA8                 cmp     ecx, [ebp+arg_8]
.text:00401AAB                 jb      short loc_401A88
.text:00401AAD
.text:00401AAD loc_401AAD:                             ; CODE XREF: sub_401A20+66↑j
.text:00401AAD                                         ; sub_401A20+70↑j
.text:00401AAD                 cmp     edx, [ebp+arg_4]
.text:00401AB0                 jbe     short loc_401AD6
.text:00401AB2
.text:00401AB2 loc_401AB2:                             ; CODE XREF: sub_401A20+B1↓j
.text:00401AB2                 mov     esi, [edx-4]
.text:00401AB5                 mov     ebx, [eax]
.text:00401AB7                 cmp     ebx, esi
.text:00401AB9                 jg      short loc_401ACB
.text:00401ABB                 jl      short loc_401AD3
.text:00401ABD                 mov     ebx, [edx-4]
.text:00401AC0                 mov     esi, [eax-4]
.text:00401AC3                 sub     eax, 4
.text:00401AC6                 mov     [eax], ebx
.text:00401AC8                 mov     [edx-4], esi
.text:00401ACB
.text:00401ACB loc_401ACB:                             ; CODE XREF: sub_401A20+99↑j
.text:00401ACB                 add     edx, 0FFFFFFFCh
.text:00401ACE                 cmp     [ebp+arg_4], edx
.text:00401AD1                 jb      short loc_401AB2
.text:00401AD3
.text:00401AD3 loc_401AD3:                             ; CODE XREF: sub_401A20+9B↑j
.text:00401AD3                 cmp     edx, [ebp+arg_4]
.text:00401AD6
.text:00401AD6 loc_401AD6:                             ; CODE XREF: sub_401A20+90↑j
.text:00401AD6                 jnz     short loc_401B10
.text:00401AD8                 cmp     ecx, [ebp+arg_8]
.text:00401ADB                 jz      short loc_401B48
.text:00401ADD                 cmp     edi, ecx
.text:00401ADF                 jz      short loc_401AE9
.text:00401AE1                 mov     ebx, [edi]
.text:00401AE3                 mov     esi, [eax]
.text:00401AE5                 mov     [eax], ebx
.text:00401AE7                 mov     [edi], esi
.text:00401AE9
.text:00401AE9 loc_401AE9:                             ; CODE XREF: sub_401A20+BF↑j
.text:00401AE9                 mov     esi, eax
.text:00401AEB                 mov     ebx, [esi]
.text:00401AED                 mov     [ebp+var_4], ecx
.text:00401AF0                 mov     [ebp+var_8], ebx
.text:00401AF3                 mov     ebx, [ebp+var_4]
.text:00401AF6                 mov     ebx, [ebx]
.text:00401AF8                 mov     [esi], ebx
.text:00401AFA                 mov     esi, [ebp+var_8]
.text:00401AFD                 mov     ebx, [ebp+var_4]
.text:00401B00                 add     edi, 4
.text:00401B03                 add     eax, 4
.text:00401B06                 add     ecx, 4
.text:00401B09                 mov     [ebx], esi
.text:00401B0B                 jmp     loc_401A83
.text:00401B10 ; ---------------------------------------------------------------------------
.text:00401B10
.text:00401B10 loc_401B10:                             ; CODE XREF: sub_401A20:loc_401AD6↑j
.text:00401B10                 sub     edx, 4
.text:00401B13                 cmp     ecx, [ebp+arg_8]
.text:00401B16                 jnz     short loc_401B38
.text:00401B18                 sub     eax, 4
.text:00401B1B                 cmp     edx, eax
.text:00401B1D                 jz      short loc_401B27
.text:00401B1F                 mov     ebx, [eax]
.text:00401B21                 mov     esi, [edx]
.text:00401B23                 mov     [edx], ebx
.text:00401B25                 mov     [eax], esi
.text:00401B27
.text:00401B27 loc_401B27:                             ; CODE XREF: sub_401A20+FD↑j
.text:00401B27                 mov     ebx, [edi-4]
.text:00401B2A                 mov     esi, [eax]
.text:00401B2C                 sub     edi, 4
.text:00401B2F                 mov     [eax], ebx
.text:00401B31                 mov     [edi], esi
.text:00401B33                 jmp     loc_401A83
.text:00401B38 ; ---------------------------------------------------------------------------
.text:00401B38
.text:00401B38 loc_401B38:                             ; CODE XREF: sub_401A20+F6↑j
.text:00401B38                 mov     esi, [ecx]
.text:00401B3A                 mov     ebx, [edx]
.text:00401B3C                 mov     [ecx], ebx
.text:00401B3E                 mov     [edx], esi
.text:00401B40                 add     ecx, 4
.text:00401B43                 jmp     loc_401A83
.text:00401B48 ; ---------------------------------------------------------------------------
.text:00401B48
.text:00401B48 loc_401B48:                             ; CODE XREF: sub_401A20+BB↑j
.text:00401B48                 mov     ecx, [ebp+arg_0]
.text:00401B4B                 mov     [ecx+4], edi
.text:00401B4E                 pop     edi
.text:00401B4F                 pop     esi
.text:00401B50                 mov     [ecx], eax
.text:00401B52                 mov     eax, ecx
.text:00401B54                 pop     ebx
.text:00401B55                 mov     esp, ebp
.text:00401B57                 pop     ebp
.text:00401B58                 retn
.text:00401B58 sub_401A20      endp
.text:00401B58
.text:00401B58 ; ---------------------------------------------------------------------------
.text:00401B59                 align 10h
.text:00401B60
.text:00401B60 ; =============== S U B R O U T I N E =======================================
.text:00401B60
.text:00401B60 ; Attributes: bp-based frame
.text:00401B60
.text:00401B60 sub_401B60      proc near               ; CODE XREF: sub_401A20+24↑p
.text:00401B60
.text:00401B60 var_8           = dword ptr -8
.text:00401B60 var_4           = dword ptr -4
.text:00401B60 arg_0           = dword ptr  8
.text:00401B60
.text:00401B60                 push    ebp
.text:00401B61                 mov     ebp, esp
.text:00401B63                 sub     esp, 8
.text:00401B66                 push    edi
.text:00401B67                 mov     edi, [ebp+arg_0]
.text:00401B6A                 mov     eax, edi
.text:00401B6C                 sub     eax, ecx
.text:00401B6E                 sar     eax, 2
.text:00401B71                 cmp     eax, 28h ; '('
.text:00401B74                 jle     loc_401C5D
.text:00401B7A                 mov     edi, [ecx]
.text:00401B7C                 inc     eax
.text:00401B7D                 cdq
.text:00401B7E                 and     edx, 7
.text:00401B81                 add     eax, edx
.text:00401B83                 sar     eax, 3
.text:00401B86                 push    ebx
.text:00401B87                 lea     ebx, ds:0[eax*8]
.text:00401B8E                 add     eax, eax
.text:00401B90                 add     eax, eax
.text:00401B92                 mov     edx, [eax+ecx]
.text:00401B95                 mov     [ebp+var_4], ebx
.text:00401B98                 cmp     edx, edi
.text:00401B9A                 jge     short loc_401BA1
.text:00401B9C                 mov     [eax+ecx], edi
.text:00401B9F                 mov     [ecx], edx
.text:00401BA1
.text:00401BA1 loc_401BA1:                             ; CODE XREF: sub_401B60+3A↑j
.text:00401BA1                 mov     edx, [ebx+ecx]
.text:00401BA4                 mov     edi, [eax+ecx]
.text:00401BA7                 cmp     edx, edi
.text:00401BA9                 jge     short loc_401BB1
.text:00401BAB                 mov     [ebx+ecx], edi
.text:00401BAE                 mov     [eax+ecx], edx
.text:00401BB1
.text:00401BB1 loc_401BB1:                             ; CODE XREF: sub_401B60+49↑j
.text:00401BB1                 mov     edx, [eax+ecx]
.text:00401BB4                 mov     edi, [ecx]
.text:00401BB6                 cmp     edx, edi
.text:00401BB8                 jge     short loc_401BBF
.text:00401BBA                 mov     [eax+ecx], edi
.text:00401BBD                 mov     [ecx], edx
.text:00401BBF
.text:00401BBF loc_401BBF:                             ; CODE XREF: sub_401B60+58↑j
.text:00401BBF                 mov     edi, [esi]
.text:00401BC1                 mov     edx, esi
.text:00401BC3                 sub     edx, eax
.text:00401BC5                 mov     ebx, [edx]
.text:00401BC7                 cmp     edi, ebx
.text:00401BC9                 jge     short loc_401BCF
.text:00401BCB                 mov     [esi], ebx
.text:00401BCD                 mov     [edx], edi
.text:00401BCF
.text:00401BCF loc_401BCF:                             ; CODE XREF: sub_401B60+69↑j
.text:00401BCF                 mov     edi, [eax+esi]
.text:00401BD2                 mov     ebx, [esi]
.text:00401BD4                 cmp     edi, ebx
.text:00401BD6                 jge     short loc_401BDD
.text:00401BD8                 mov     [eax+esi], ebx
.text:00401BDB                 mov     [esi], edi
.text:00401BDD
.text:00401BDD loc_401BDD:                             ; CODE XREF: sub_401B60+76↑j
.text:00401BDD                 mov     edi, [esi]
.text:00401BDF                 mov     ebx, [edx]
.text:00401BE1                 cmp     edi, ebx
.text:00401BE3                 jge     short loc_401BE9
.text:00401BE5                 mov     [esi], ebx
.text:00401BE7                 mov     [edx], edi
.text:00401BE9
.text:00401BE9 loc_401BE9:                             ; CODE XREF: sub_401B60+83↑j
.text:00401BE9                 mov     edi, [ebp+arg_0]
.text:00401BEC                 mov     edx, edi
.text:00401BEE                 sub     edi, [ebp+var_4]
.text:00401BF1                 sub     edx, eax
.text:00401BF3                 mov     ebx, [edx]
.text:00401BF5                 mov     [ebp+var_4], edi
.text:00401BF8                 mov     edi, [edi]
.text:00401BFA                 cmp     ebx, edi
.text:00401BFC                 jge     short loc_401C05
.text:00401BFE                 mov     [edx], edi
.text:00401C00                 mov     edi, [ebp+var_4]
.text:00401C03                 mov     [edi], ebx
.text:00401C05
.text:00401C05 loc_401C05:                             ; CODE XREF: sub_401B60+9C↑j
.text:00401C05                 mov     edi, [ebp+arg_0]
.text:00401C08                 mov     ebx, [edi]
.text:00401C0A                 mov     edi, [edx]
.text:00401C0C                 mov     [ebp+var_8], ebx
.text:00401C0F                 cmp     ebx, edi
.text:00401C11                 jge     short loc_401C1D
.text:00401C13                 mov     ebx, [ebp+arg_0]
.text:00401C16                 mov     [ebx], edi
.text:00401C18                 mov     edi, [ebp+var_8]
.text:00401C1B                 mov     [edx], edi
.text:00401C1D
.text:00401C1D loc_401C1D:                             ; CODE XREF: sub_401B60+B1↑j
.text:00401C1D                 mov     ebx, [ebp+var_4]
.text:00401C20                 mov     edi, [edx]
.text:00401C22                 mov     ebx, [ebx]
.text:00401C24                 cmp     edi, ebx
.text:00401C26                 jge     short loc_401C2F
.text:00401C28                 mov     [edx], ebx
.text:00401C2A                 mov     ebx, [ebp+var_4]
.text:00401C2D                 mov     [ebx], edi
.text:00401C2F
.text:00401C2F loc_401C2F:                             ; CODE XREF: sub_401B60+C6↑j
.text:00401C2F                 mov     edi, [esi]
.text:00401C31                 mov     ebx, [eax+ecx]
.text:00401C34                 cmp     edi, ebx
.text:00401C36                 jge     short loc_401C3D
.text:00401C38                 mov     [esi], ebx
.text:00401C3A                 mov     [eax+ecx], edi
.text:00401C3D
.text:00401C3D loc_401C3D:                             ; CODE XREF: sub_401B60+D6↑j
.text:00401C3D                 mov     edi, [edx]
.text:00401C3F                 mov     ebx, [esi]
.text:00401C41                 cmp     edi, ebx
.text:00401C43                 jge     short loc_401C49
.text:00401C45                 mov     [edx], ebx
.text:00401C47                 mov     [esi], edi
.text:00401C49
.text:00401C49 loc_401C49:                             ; CODE XREF: sub_401B60+E3↑j
.text:00401C49                 mov     edx, [esi]
.text:00401C4B                 mov     edi, [eax+ecx]
.text:00401C4E                 pop     ebx
.text:00401C4F                 cmp     edx, edi
.text:00401C51                 jge     short loc_401C81
.text:00401C53                 mov     [esi], edi
.text:00401C55                 mov     [eax+ecx], edx
.text:00401C58                 pop     edi
.text:00401C59                 mov     esp, ebp
.text:00401C5B                 pop     ebp
.text:00401C5C                 retn
.text:00401C5D ; ---------------------------------------------------------------------------
.text:00401C5D
.text:00401C5D loc_401C5D:                             ; CODE XREF: sub_401B60+14↑j
.text:00401C5D                 mov     eax, [esi]
.text:00401C5F                 mov     edx, [ecx]
.text:00401C61                 cmp     eax, edx
.text:00401C63                 jge     short loc_401C69
.text:00401C65                 mov     [esi], edx
.text:00401C67                 mov     [ecx], eax
.text:00401C69
.text:00401C69 loc_401C69:                             ; CODE XREF: sub_401B60+103↑j
.text:00401C69                 mov     eax, [edi]
.text:00401C6B                 mov     edx, [esi]
.text:00401C6D                 cmp     eax, edx
.text:00401C6F                 jge     short loc_401C75
.text:00401C71                 mov     [edi], edx
.text:00401C73                 mov     [esi], eax
.text:00401C75
.text:00401C75 loc_401C75:                             ; CODE XREF: sub_401B60+10F↑j
.text:00401C75                 mov     eax, [esi]
.text:00401C77                 mov     edx, [ecx]
.text:00401C79                 cmp     eax, edx
.text:00401C7B                 jge     short loc_401C81
.text:00401C7D                 mov     [esi], edx
.text:00401C7F                 mov     [ecx], eax
.text:00401C81
.text:00401C81 loc_401C81:                             ; CODE XREF: sub_401B60+F1↑j
.text:00401C81                                         ; sub_401B60+11B↑j
.text:00401C81                 pop     edi
.text:00401C82                 mov     esp, ebp
.text:00401C84                 pop     ebp
.text:00401C85                 retn
.text:00401C85 sub_401B60      endp
.text:00401C85
.text:00401C85 ; ---------------------------------------------------------------------------
.text:00401C86                 align 10h
.text:00401C90
.text:00401C90 ; =============== S U B R O U T I N E =======================================
.text:00401C90
.text:00401C90 ; Attributes: bp-based frame
.text:00401C90
.text:00401C90 sub_401C90      proc near               ; CODE XREF: sub_401950+AD↑p
.text:00401C90
.text:00401C90 var_C           = dword ptr -0Ch
.text:00401C90 var_8           = dword ptr -8
.text:00401C90 var_4           = dword ptr -4
.text:00401C90
.text:00401C90                 push    ebp
.text:00401C91                 mov     ebp, esp
.text:00401C93                 sub     esp, 0Ch
.text:00401C96                 sub     eax, ecx
.text:00401C98                 sar     eax, 2
.text:00401C9B                 mov     [ebp+var_4], eax
.text:00401C9E                 cdq
.text:00401C9F                 sub     eax, edx
.text:00401CA1                 push    esi
.text:00401CA2                 mov     esi, eax
.text:00401CA4                 sar     esi, 1
.text:00401CA6                 test    esi, esi
.text:00401CA8                 jle     short loc_401D26
.text:00401CAA                 push    ebx
.text:00401CAB                 push    edi
.text:00401CAC                 lea     eax, [esi+esi+2]
.text:00401CB0                 jmp     short loc_401CB5
.text:00401CB2 ; ---------------------------------------------------------------------------
.text:00401CB2
.text:00401CB2 loc_401CB2:                             ; CODE XREF: sub_401C90+92↓j
.text:00401CB2                 mov     eax, [ebp+var_C]
.text:00401CB5
.text:00401CB5 loc_401CB5:                             ; CODE XREF: sub_401C90+20↑j
.text:00401CB5                 mov     edx, [ecx+esi*4-4]
.text:00401CB9                 dec     esi
.text:00401CBA                 sub     eax, 2
.text:00401CBD                 mov     [ebp+var_8], edx
.text:00401CC0                 mov     edx, [ebp+var_4]
.text:00401CC3                 mov     [ebp+var_C], eax
.text:00401CC6                 mov     edi, esi
.text:00401CC8                 cmp     eax, edx
.text:00401CCA                 jge     short loc_401CEA
.text:00401CCC                 lea     esp, [esp+0]
.text:00401CD0
.text:00401CD0 loc_401CD0:                             ; CODE XREF: sub_401C90+58↓j
.text:00401CD0                 mov     ebx, [ecx+eax*4]
.text:00401CD3                 cmp     ebx, [ecx+eax*4-4]
.text:00401CD7                 jge     short loc_401CDA
.text:00401CD9                 dec     eax
.text:00401CDA
.text:00401CDA loc_401CDA:                             ; CODE XREF: sub_401C90+47↑j
.text:00401CDA                 mov     ebx, [ecx+eax*4]
.text:00401CDD                 mov     [ecx+edi*4], ebx
.text:00401CE0                 mov     edi, eax
.text:00401CE2                 lea     eax, [eax+eax+2]
.text:00401CE6                 cmp     eax, edx
.text:00401CE8                 jl      short loc_401CD0
.text:00401CEA
.text:00401CEA loc_401CEA:                             ; CODE XREF: sub_401C90+3A↑j
.text:00401CEA                 cmp     eax, edx
.text:00401CEC                 jnz     short loc_401CF8
.text:00401CEE                 mov     eax, [ecx+edx*4-4]
.text:00401CF2                 mov     [ecx+edi*4], eax
.text:00401CF5                 lea     edi, [edx-1]
.text:00401CF8
.text:00401CF8 loc_401CF8:                             ; CODE XREF: sub_401C90+5C↑j
.text:00401CF8                 mov     ebx, [ebp+var_8]
.text:00401CFB                 lea     eax, [edi-1]
.text:00401CFE                 cdq
.text:00401CFF                 sub     eax, edx
.text:00401D01                 sar     eax, 1
.text:00401D03                 cmp     esi, edi
.text:00401D05                 jge     short loc_401D1D
.text:00401D07
.text:00401D07 loc_401D07:                             ; CODE XREF: sub_401C90+8B↓j
.text:00401D07                 mov     edx, [ecx+eax*4]
.text:00401D0A                 cmp     edx, ebx
.text:00401D0C                 jge     short loc_401D1D
.text:00401D0E                 mov     [ecx+edi*4], edx
.text:00401D11                 mov     edi, eax
.text:00401D13                 dec     eax
.text:00401D14                 cdq
.text:00401D15                 sub     eax, edx
.text:00401D17                 sar     eax, 1
.text:00401D19                 cmp     esi, edi
.text:00401D1B                 jl      short loc_401D07
.text:00401D1D
.text:00401D1D loc_401D1D:                             ; CODE XREF: sub_401C90+75↑j
.text:00401D1D                                         ; sub_401C90+7C↑j
.text:00401D1D                 mov     [ecx+edi*4], ebx
.text:00401D20                 test    esi, esi
.text:00401D22                 jg      short loc_401CB2
.text:00401D24                 pop     edi
.text:00401D25                 pop     ebx
.text:00401D26
.text:00401D26 loc_401D26:                             ; CODE XREF: sub_401C90+18↑j
.text:00401D26                 pop     esi
.text:00401D27                 mov     esp, ebp
.text:00401D29                 pop     ebp
.text:00401D2A                 retn
.text:00401D2A sub_401C90      endp
.text:00401D2A
.text:00401D2A ; ---------------------------------------------------------------------------
.text:00401D2B                 align 10h
.text:00401D30
.text:00401D30 ; =============== S U B R O U T I N E =======================================
.text:00401D30
.text:00401D30 ; Attributes: bp-based frame
.text:00401D30
.text:00401D30 sub_401D30      proc near               ; CODE XREF: sub_401950+B6↑p
.text:00401D30
.text:00401D30 var_4           = dword ptr -4
.text:00401D30
.text:00401D30                 push    ebp
.text:00401D31                 mov     ebp, esp
.text:00401D33                 push    ecx
.text:00401D34                 sub     eax, ecx
.text:00401D36                 mov     edx, eax
.text:00401D38                 and     edx, 0FFFFFFFCh
.text:00401D3B                 cmp     edx, 4
.text:00401D3E                 jle     loc_401DC8
.text:00401D44                 push    ebx
.text:00401D45                 push    esi
.text:00401D46                 push    edi
.text:00401D47
.text:00401D47 loc_401D47:                             ; CODE XREF: sub_401D30+93↓j
.text:00401D47                 mov     edx, [ecx]
.text:00401D49                 mov     edi, [ecx+eax-4]
.text:00401D4D                 lea     ebx, [eax-4]
.text:00401D50                 mov     [ecx+eax-4], edx
.text:00401D54                 mov     edx, ebx
.text:00401D56                 sar     edx, 2
.text:00401D59                 mov     eax, 2
.text:00401D5E                 xor     esi, esi
.text:00401D60                 mov     [ebp+var_4], ebx
.text:00401D63                 cmp     eax, edx
.text:00401D65                 jge     short loc_401D84
.text:00401D67
.text:00401D67 loc_401D67:                             ; CODE XREF: sub_401D30+4F↓j
.text:00401D67                 mov     ebx, [ecx+eax*4]
.text:00401D6A                 cmp     ebx, [ecx+eax*4-4]
.text:00401D6E                 jge     short loc_401D71
.text:00401D70                 dec     eax
.text:00401D71
.text:00401D71 loc_401D71:                             ; CODE XREF: sub_401D30+3E↑j
.text:00401D71                 mov     ebx, [ecx+eax*4]
.text:00401D74                 mov     [ecx+esi*4], ebx
.text:00401D77                 mov     esi, eax
.text:00401D79                 lea     eax, [eax+eax+2]
.text:00401D7D                 cmp     eax, edx
.text:00401D7F                 jl      short loc_401D67
.text:00401D81                 mov     ebx, [ebp+var_4]
.text:00401D84
.text:00401D84 loc_401D84:                             ; CODE XREF: sub_401D30+35↑j
.text:00401D84                 jnz     short loc_401D90
.text:00401D86                 mov     eax, [ecx+edx*4-4]
.text:00401D8A                 mov     [ecx+esi*4], eax
.text:00401D8D                 lea     esi, [edx-1]
.text:00401D90
.text:00401D90 loc_401D90:                             ; CODE XREF: sub_401D30:loc_401D84↑j
.text:00401D90                 lea     eax, [esi-1]
.text:00401D93                 cdq
.text:00401D94                 sub     eax, edx
.text:00401D96                 sar     eax, 1
.text:00401D98                 test    esi, esi
.text:00401D9A                 jle     short loc_401DB6
.text:00401D9C                 lea     esp, [esp+0]
.text:00401DA0
.text:00401DA0 loc_401DA0:                             ; CODE XREF: sub_401D30+84↓j
.text:00401DA0                 mov     edx, [ecx+eax*4]
.text:00401DA3                 cmp     edx, edi
.text:00401DA5                 jge     short loc_401DB6
.text:00401DA7                 mov     [ecx+esi*4], edx
.text:00401DAA                 mov     esi, eax
.text:00401DAC                 dec     eax
.text:00401DAD                 cdq
.text:00401DAE                 sub     eax, edx
.text:00401DB0                 sar     eax, 1
.text:00401DB2                 test    esi, esi
.text:00401DB4                 jg      short loc_401DA0
.text:00401DB6
.text:00401DB6 loc_401DB6:                             ; CODE XREF: sub_401D30+6A↑j
.text:00401DB6                                         ; sub_401D30+75↑j
.text:00401DB6                 mov     eax, ebx
.text:00401DB8                 mov     edx, ebx
.text:00401DBA                 and     edx, 0FFFFFFFCh
.text:00401DBD                 mov     [ecx+esi*4], edi
.text:00401DC0                 cmp     edx, 4
.text:00401DC3                 jg      short loc_401D47
.text:00401DC5                 pop     edi
.text:00401DC6                 pop     esi
.text:00401DC7                 pop     ebx
.text:00401DC8
.text:00401DC8 loc_401DC8:                             ; CODE XREF: sub_401D30+E↑j
.text:00401DC8                 mov     esp, ebp
.text:00401DCA                 pop     ebp
.text:00401DCB                 retn
.text:00401DCB sub_401D30      endp
.text:00401DCB
.text:00401DCB ; ---------------------------------------------------------------------------
.text:00401DCC                 align 10h
.text:00401DD0
.text:00401DD0 ; =============== S U B R O U T I N E =======================================
.text:00401DD0
.text:00401DD0 ; Attributes: bp-based frame
.text:00401DD0
.text:00401DD0 sub_401DD0      proc near               ; CODE XREF: sub_401950+89↑p
.text:00401DD0
.text:00401DD0 var_4           = dword ptr -4
.text:00401DD0 arg_0           = dword ptr  8
.text:00401DD0
.text:00401DD0                 push    ebp
.text:00401DD1                 mov     ebp, esp
.text:00401DD3                 push    ecx
.text:00401DD4                 push    edi
.text:00401DD5                 lea     edi, [ebx+4]
.text:00401DD8                 cmp     edi, [ebp+arg_0]
.text:00401DDB                 jz      short loc_401E40
.text:00401DDD                 mov     eax, 4
.text:00401DE2                 sub     eax, ebx
.text:00401DE4                 push    esi
.text:00401DE5                 mov     [ebp+var_4], eax
.text:00401DE8                 jmp     short loc_401DF3
.text:00401DE8 ; ---------------------------------------------------------------------------
.text:00401DEA                 align 10h
.text:00401DF0
.text:00401DF0 loc_401DF0:                             ; CODE XREF: sub_401DD0+6D↓j
.text:00401DF0                 mov     eax, [ebp+var_4]
.text:00401DF3
.text:00401DF3 loc_401DF3:                             ; CODE XREF: sub_401DD0+18↑j
.text:00401DF3                 mov     esi, [edi]
.text:00401DF5                 mov     edx, edi
.text:00401DF7                 cmp     esi, [ebx]
.text:00401DF9                 jge     short loc_401E1D
.text:00401DFB                 lea     eax, [eax+edi-4]
.text:00401DFF                 sar     eax, 2
.text:00401E02                 add     eax, eax
.text:00401E04                 add     eax, eax
.text:00401E06                 push    eax             ; Size
.text:00401E07                 mov     ecx, edi
.text:00401E09                 sub     ecx, eax
.text:00401E0B                 add     ecx, 4
.text:00401E0E                 push    ebx             ; Src
.text:00401E0F                 push    ecx             ; Dst
.text:00401E10                 call    ds:memmove
.text:00401E16                 add     esp, 0Ch
.text:00401E19                 mov     [ebx], esi
.text:00401E1B                 jmp     short loc_401E37
.text:00401E1D ; ---------------------------------------------------------------------------
.text:00401E1D
.text:00401E1D loc_401E1D:                             ; CODE XREF: sub_401DD0+29↑j
.text:00401E1D                 mov     ecx, [edi-4]
.text:00401E20                 lea     eax, [edi-4]
.text:00401E23                 cmp     esi, ecx
.text:00401E25                 jge     short loc_401E35
.text:00401E27
.text:00401E27 loc_401E27:                             ; CODE XREF: sub_401DD0+63↓j
.text:00401E27                 mov     [edx], ecx
.text:00401E29                 mov     ecx, [eax-4]
.text:00401E2C                 mov     edx, eax
.text:00401E2E                 sub     eax, 4
.text:00401E31                 cmp     esi, ecx
.text:00401E33                 jl      short loc_401E27
.text:00401E35
.text:00401E35 loc_401E35:                             ; CODE XREF: sub_401DD0+55↑j
.text:00401E35                 mov     [edx], esi
.text:00401E37
.text:00401E37 loc_401E37:                             ; CODE XREF: sub_401DD0+4B↑j
.text:00401E37                 add     edi, 4
.text:00401E3A                 cmp     edi, [ebp+arg_0]
.text:00401E3D                 jnz     short loc_401DF0
.text:00401E3F                 pop     esi
.text:00401E40
.text:00401E40 loc_401E40:                             ; CODE XREF: sub_401DD0+B↑j
.text:00401E40                 pop     edi
.text:00401E41                 mov     esp, ebp
.text:00401E43                 pop     ebp
.text:00401E44                 retn
.text:00401E44 sub_401DD0      endp
.text:00401E44
.text:00401E45 ; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401E54 ; [00000006 BYTES: COLLAPSED FUNCTION std::exception::what(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401E5A ; [00000006 BYTES: COLLAPSED FUNCTION std::exception::exception(std::exception const &). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401E60 ; [0000005E BYTES: COLLAPSED FUNCTION __ArrayUnwind(void *,uint,int,void (*)(void *)). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401EBE ; [00000063 BYTES: COLLAPSED FUNCTION `eh vector destructor iterator'(void *,uint,int,void (*)(void *)). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401F21 ; [000000A1 BYTES: COLLAPSED FUNCTION __onexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401FC2 ; [00000017 BYTES: COLLAPSED FUNCTION _atexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401FD9 ; [00000065 BYTES: COLLAPSED FUNCTION `eh vector constructor iterator'(void *,uint,int,void (*)(void *),void (*)(void *)). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040203E ; [00000006 BYTES: COLLAPSED FUNCTION operator delete(void *). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402044 ; [0000004C BYTES: COLLAPSED FUNCTION type_info::`vector deleting destructor'(uint). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402090 ; [0000004B BYTES: COLLAPSED FUNCTION _pre_cpp_init. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004020DB ; [00000189 BYTES: COLLAPSED FUNCTION ___tmainCRTStartup. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402264 ; [000000BA BYTES: COLLAPSED FUNCTION _pre_c_init. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040231E ; [0000000A BYTES: COLLAPSED FUNCTION start. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402328 ; [00000106 BYTES: COLLAPSED FUNCTION ___report_gsfailure. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040242E ; [00000006 BYTES: COLLAPSED FUNCTION terminate(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402434                 align 10h
.text:00402440 ; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402485 ; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402499 ; [00000025 BYTES: COLLAPSED FUNCTION SEH_402610. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004024BE ; [00000006 BYTES: COLLAPSED FUNCTION _unlock. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004024C4 ; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004024CA ; [00000006 BYTES: COLLAPSED FUNCTION _lock. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004024D0 ; [00000042 BYTES: COLLAPSED FUNCTION __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402512
.text:00402512 ; =============== S U B R O U T I N E =======================================
.text:00402512
.text:00402512
.text:00402512 sub_402512      proc near               ; DATA XREF: .rdata:00403128↓o
.text:00402512                 push    offset ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; lpTopLevelExceptionFilter
.text:00402517                 call    ds:SetUnhandledExceptionFilter
.text:0040251D                 xor     eax, eax
.text:0040251F                 retn
.text:0040251F sub_402512      endp
.text:0040251F
.text:00402520 ; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402526
.text:00402526 ; =============== S U B R O U T I N E =======================================
.text:00402526
.text:00402526
.text:00402526 sub_402526      proc near               ; CODE XREF: _pre_c_init+81↑p
.text:00402526                 mov     edi, edi
.text:00402528                 push    esi
.text:00402529                 mov     eax, offset unk_403350
.text:0040252E                 mov     esi, offset unk_403350
.text:00402533                 push    edi
.text:00402534                 mov     edi, eax
.text:00402536                 cmp     eax, esi
.text:00402538                 jnb     short loc_402549
.text:0040253A
.text:0040253A loc_40253A:                             ; CODE XREF: sub_402526+21↓j
.text:0040253A                 mov     eax, [edi]
.text:0040253C                 test    eax, eax
.text:0040253E                 jz      short loc_402542
.text:00402540                 call    eax
.text:00402542
.text:00402542 loc_402542:                             ; CODE XREF: sub_402526+18↑j
.text:00402542                 add     edi, 4
.text:00402545                 cmp     edi, esi
.text:00402547                 jb      short loc_40253A
.text:00402549
.text:00402549 loc_402549:                             ; CODE XREF: sub_402526+12↑j
.text:00402549                 pop     edi
.text:0040254A                 pop     esi
.text:0040254B                 retn
.text:0040254B sub_402526      endp
.text:0040254B
.text:0040254C
.text:0040254C ; =============== S U B R O U T I N E =======================================
.text:0040254C
.text:0040254C
.text:0040254C ; void __cdecl sub_40254C()
.text:0040254C sub_40254C      proc near               ; DATA XREF: _pre_cpp_init↑o
.text:0040254C                 mov     edi, edi
.text:0040254E                 push    esi
.text:0040254F                 mov     eax, offset unk_403358
.text:00402554                 mov     esi, offset unk_403358
.text:00402559                 push    edi
.text:0040255A                 mov     edi, eax
.text:0040255C                 cmp     eax, esi
.text:0040255E                 jnb     short loc_40256F
.text:00402560
.text:00402560 loc_402560:                             ; CODE XREF: sub_40254C+21↓j
.text:00402560                 mov     eax, [edi]
.text:00402562                 test    eax, eax
.text:00402564                 jz      short loc_402568
.text:00402566                 call    eax
.text:00402568
.text:00402568 loc_402568:                             ; CODE XREF: sub_40254C+18↑j
.text:00402568                 add     edi, 4
.text:0040256B                 cmp     edi, esi
.text:0040256D                 jb      short loc_402560
.text:0040256F
.text:0040256F loc_40256F:                             ; CODE XREF: sub_40254C+12↑j
.text:0040256F                 pop     edi
.text:00402570                 pop     esi
.text:00402571                 retn
.text:00402571 sub_40254C      endp
.text:00402571
.text:00402572 ; [00000006 BYTES: COLLAPSED FUNCTION _XcptFilter. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402578                 align 10h
.text:00402580 ; [00000035 BYTES: COLLAPSED FUNCTION __ValidateImageBase. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004025B5                 align 10h
.text:004025C0 ; [00000044 BYTES: COLLAPSED FUNCTION __FindPESection. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402604                 align 10h
.text:00402610 ; [000000BC BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004026CC ; [00000006 BYTES: COLLAPSED FUNCTION _initterm. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004026D2 ; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004026D8 ; [00000028 BYTES: COLLAPSED FUNCTION __setdefaultprecision. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402700
.text:00402700 ; =============== S U B R O U T I N E =======================================
.text:00402700
.text:00402700
.text:00402700 sub_402700      proc near               ; CODE XREF: _pre_c_init+86↑p
.text:00402700                                         ; DATA XREF: _pre_c_init+94↑o
.text:00402700                 xor     eax, eax
.text:00402702                 retn
.text:00402702 sub_402700      endp
.text:00402702
.text:00402703 ; [0000009B BYTES: COLLAPSED FUNCTION ___security_init_cookie. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040279E ; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004027A4 ; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004027AA ; [00000006 BYTES: COLLAPSED FUNCTION type_info::_type_info_dtor_internal_method(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004027B0 ; [00000006 BYTES: COLLAPSED FUNCTION _invoke_watson. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004027B6 ; [00000006 BYTES: COLLAPSED FUNCTION _controlfp_s. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004027BC ; [00000006 BYTES: COLLAPSED FUNCTION __CxxFrameHandler3. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004027C2                 align 10h
.text:004027D0 ; [00000034 BYTES: COLLAPSED FUNCTION __allmul. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402804 ; [00000006 BYTES: COLLAPSED FUNCTION _CxxThrowException. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040280A                 align 10h
.text:00402810 ; START OF FUNCTION CHUNK FOR sub_401570
.text:00402810
.text:00402810 loc_402810:                             ; DATA XREF: .rdata:stru_403470↓o
.text:00402810 ; __unwind { // SEH_401570
.text:00402810 ;   cleanup() // owned by 401596
.text:00402810                 mov     eax, [ebp+arg_0]
.text:00402813                 jmp     loc_401660
.text:00402818 ; ---------------------------------------------------------------------------
.text:00402818
.text:00402818 SEH_401570:                             ; DATA XREF: sub_401570+5↑o
.text:00402818                                         ; .rdata:00403344↓o
.text:00402818                 mov     edx, [esp-4+arg_4]
.text:0040281C                 lea     eax, [edx+0Ch]
.text:0040281F                 mov     ecx, [edx-8]
.text:00402822                 xor     ecx, eax
.text:00402824                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00402829                 mov     eax, offset stru_403478
.text:0040282E                 jmp     __CxxFrameHandler3
.text:0040282E ; } // starts at 402810
.text:0040282E ; END OF FUNCTION CHUNK FOR sub_401570
.text:0040282E ; ---------------------------------------------------------------------------
.text:00402833                 align 10h
.text:00402840 ; START OF FUNCTION CHUNK FOR sub_4016E0
.text:00402840
.text:00402840 loc_402840:                             ; DATA XREF: .rdata:stru_40349C↓o
.text:00402840 ; __unwind { // SEH_4016E0
.text:00402840                 lea     eax, [ebp+var_30]
.text:00402843                 jmp     loc_401660
.text:00402848 ; ---------------------------------------------------------------------------
.text:00402848
.text:00402848 loc_402848:                             ; DATA XREF: .rdata:004034A4↓o
.text:00402848                 lea     eax, [ebp+var_30]
.text:0040284B                 push    eax
.text:0040284C                 call    sub_401570
.text:00402851                 retn
.text:00402852 ; ---------------------------------------------------------------------------
.text:00402852
.text:00402852 loc_402852:                             ; DATA XREF: .rdata:004034BC↓o
.text:00402852 ;   cleanup() // owned by 401779
.text:00402852 ;   cleanup() // owned by 4017AC
.text:00402852 ;   cleanup() // owned by 4017C3
.text:00402852 ;   cleanup() // owned by 401849
.text:00402852 ;   cleanup() // owned by 401863
.text:00402852 ;   cleanup() // owned by 401918
.text:00402852                 lea     eax, [ebp+var_30]
.text:00402855                 jmp     loc_401660
.text:0040285A ; ---------------------------------------------------------------------------
.text:0040285A
.text:0040285A SEH_4016E0:                             ; DATA XREF: sub_4016E0+5↑o
.text:0040285A                                         ; .rdata:00403348↓o
.text:0040285A                 mov     edx, [esp-4+arg_4]
.text:0040285E                 lea     eax, [edx+0Ch]
.text:00402861                 mov     ecx, [edx-34h]
.text:00402864                 xor     ecx, eax
.text:00402866                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040286B                 mov     eax, offset stru_4034E8
.text:00402870                 jmp     __CxxFrameHandler3
.text:00402870 ; } // starts at 402840
.text:00402870 ; END OF FUNCTION CHUNK FOR sub_4016E0
.text:00402870 ; ---------------------------------------------------------------------------
.text:00402875                 align 10h
.text:00402880
.text:00402880 ; =============== S U B R O U T I N E =======================================
.text:00402880
.text:00402880
.text:00402880 sub_402880      proc near               ; DATA XREF: .rdata:00403118↓o
.text:00402880                 push    offset sub_401540 ; void (__thiscall *)(void *)
.text:00402885                 push    offset unknown_libname_1 ; void (__thiscall *)(void *)
.text:0040288A                 push    7D0h            ; int
.text:0040288F                 push    10h             ; unsigned int
.text:00402891                 push    offset dword_408250 ; void *
.text:00402896                 call    ??_L@YGXPAXIHP6EX0@Z1@Z ; `eh vector constructor iterator'(void *,uint,int,void (*)(void *),void (*)(void *))
.text:0040289B                 push    offset sub_4028B0 ; void (__cdecl *)()
.text:004028A0                 call    _atexit
.text:004028A5                 pop     ecx
.text:004028A6                 retn
.text:004028A6 sub_402880      endp
.text:004028A6
.text:004028A6 ; ---------------------------------------------------------------------------
.text:004028A7                 align 10h
.text:004028B0
.text:004028B0 ; =============== S U B R O U T I N E =======================================
.text:004028B0
.text:004028B0
.text:004028B0 ; void __cdecl sub_4028B0()
.text:004028B0 sub_4028B0      proc near               ; DATA XREF: sub_402880+1B↑o
.text:004028B0                 push    offset sub_401540 ; void (__thiscall *)(void *)
.text:004028B5                 push    7D0h            ; int
.text:004028BA                 push    10h             ; unsigned int
.text:004028BC                 push    offset dword_408250 ; void *
.text:004028C1                 call    ??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
.text:004028C6                 retn
.text:004028C6 sub_4028B0      endp
.text:004028C6
.text:004028C6 ; ---------------------------------------------------------------------------
.text:004028C7                 align 200h
.text:00402A00                 dd 180h dup(?)
.text:00402A00 _text           ends
.text:00402A00