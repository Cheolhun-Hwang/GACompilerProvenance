.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: bp-based frame
.text:00401000
.text:00401000 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00401000 _main           proc near               ; CODE XREF: ___tmainCRTStartup+11D↓p
.text:00401000
.text:00401000 var_18          = dword ptr -18h
.text:00401000 var_14          = dword ptr -14h
.text:00401000 var_10          = dword ptr -10h
.text:00401000 var_C           = dword ptr -0Ch
.text:00401000 var_8           = dword ptr -8
.text:00401000 var_4           = dword ptr -4
.text:00401000 argc            = dword ptr  8
.text:00401000 argv            = dword ptr  0Ch
.text:00401000 envp            = dword ptr  10h
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 18h
.text:00401006                 push    edi
.text:00401007                 mov     edi, ds:scanf
.text:0040100D                 lea     eax, [ebp+var_8]
.text:00401010                 push    eax
.text:00401011                 push    offset Format   ; "%d"
.text:00401016                 call    edi ; scanf
.text:00401018                 mov     eax, 1
.text:0040101D                 add     esp, 8
.text:00401020                 mov     [ebp+var_4], eax
.text:00401023                 cmp     [ebp+var_8], eax
.text:00401026                 jl      loc_4010ED
.text:0040102C                 push    ebx
.text:0040102D                 push    esi
.text:0040102E                 mov     edi, edi
.text:00401030
.text:00401030 loc_401030:                             ; CODE XREF: _main+E5↓j
.text:00401030                 push    offset dword_403374
.text:00401035                 push    offset dword_40336C
.text:0040103A                 push    offset dword_403370
.text:0040103F                 push    offset aDDD     ; "%d%d%d"
.text:00401044                 call    edi
.text:00401046                 xor     ebx, ebx
.text:00401048                 add     esp, 10h
.text:0040104B                 xor     esi, esi
.text:0040104D                 cmp     dword_403370, ebx
.text:00401053                 jle     short loc_4010CB
.text:00401055                 mov     [ebp+var_10], ebx
.text:00401058                 jmp     short loc_401060
.text:00401058 ; ---------------------------------------------------------------------------
.text:0040105A                 align 10h
.text:00401060
.text:00401060 loc_401060:                             ; CODE XREF: _main+58↑j
.text:00401060                                         ; _main+C9↓j
.text:00401060                 lea     ecx, [ebp+var_14]
.text:00401063                 push    ecx
.text:00401064                 push    offset Format   ; "%d"
.text:00401069                 call    edi
.text:0040106B                 mov     eax, dword_403374
.text:00401070                 lea     ecx, [eax-1]
.text:00401073                 add     esp, 8
.text:00401076                 mov     [ebp+var_C], ecx
.text:00401079                 test    ecx, ecx
.text:0040107B                 lea     ecx, [ebp+var_C]
.text:0040107E                 jg      short loc_401083
.text:00401080                 lea     ecx, [ebp+var_10]
.text:00401083
.text:00401083 loc_401083:                             ; CODE XREF: _main+7E↑j
.text:00401083                 mov     edx, [ecx]
.text:00401085                 lea     ecx, [eax+edx*2]
.text:00401088                 mov     edx, [ebp+var_14]
.text:0040108B                 cmp     edx, ecx
.text:0040108D                 jl      short loc_401092
.text:0040108F                 inc     esi
.text:00401090                 jmp     short loc_4010C2
.text:00401092 ; ---------------------------------------------------------------------------
.text:00401092
.text:00401092 loc_401092:                             ; CODE XREF: _main+8D↑j
.text:00401092                 lea     ecx, [eax-2]
.text:00401095                 mov     [ebp+var_C], ecx
.text:00401098                 test    ecx, ecx
.text:0040109A                 mov     [ebp+var_18], 0
.text:004010A1                 lea     ecx, [ebp+var_C]
.text:004010A4                 jg      short loc_4010A9
.text:004010A6                 lea     ecx, [ebp+var_18]
.text:004010A9
.text:004010A9 loc_4010A9:                             ; CODE XREF: _main+A4↑j
.text:004010A9                 mov     ecx, [ecx]
.text:004010AB                 lea     eax, [eax+ecx*2]
.text:004010AE                 cmp     edx, eax
.text:004010B0                 jl      short loc_4010C2
.text:004010B2                 cmp     dword_40336C, 0
.text:004010B9                 jz      short loc_4010C2
.text:004010BB                 inc     esi
.text:004010BC                 dec     dword_40336C
.text:004010C2
.text:004010C2 loc_4010C2:                             ; CODE XREF: _main+90↑j
.text:004010C2                                         ; _main+B0↑j ...
.text:004010C2                 inc     ebx
.text:004010C3                 cmp     ebx, dword_403370
.text:004010C9                 jl      short loc_401060
.text:004010CB
.text:004010CB loc_4010CB:                             ; CODE XREF: _main+53↑j
.text:004010CB                 push    esi
.text:004010CC                 mov     esi, [ebp+var_4]
.text:004010CF                 push    esi
.text:004010D0                 push    offset aCaseDD  ; "Case #%d: %d\n"
.text:004010D5                 call    ds:printf
.text:004010DB                 inc     esi
.text:004010DC                 add     esp, 0Ch
.text:004010DF                 mov     [ebp+var_4], esi
.text:004010E2                 cmp     esi, [ebp+var_8]
.text:004010E5                 jle     loc_401030
.text:004010EB                 pop     esi
.text:004010EC                 pop     ebx
.text:004010ED
.text:004010ED loc_4010ED:                             ; CODE XREF: _main+26↑j
.text:004010ED                 xor     eax, eax
.text:004010EF                 pop     edi
.text:004010F0                 mov     esp, ebp
.text:004010F2                 pop     ebp
.text:004010F3                 retn
.text:004010F3 _main           endp
.text:004010F3
.text:004010F4 ; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401103 ; [0000004B BYTES: COLLAPSED FUNCTION _pre_cpp_init. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040114E ; [00000189 BYTES: COLLAPSED FUNCTION ___tmainCRTStartup. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004012D7 ; [000000BA BYTES: COLLAPSED FUNCTION _pre_c_init. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401391 ; [0000000A BYTES: COLLAPSED FUNCTION start. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040139B ; [00000106 BYTES: COLLAPSED FUNCTION ___report_gsfailure. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004014A1 ; [00000042 BYTES: COLLAPSED FUNCTION __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004014E3
.text:004014E3 ; =============== S U B R O U T I N E =======================================
.text:004014E3
.text:004014E3
.text:004014E3 sub_4014E3      proc near               ; DATA XREF: .rdata:004020C0↓o
.text:004014E3                 push    offset ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; lpTopLevelExceptionFilter
.text:004014E8                 call    ds:SetUnhandledExceptionFilter
.text:004014EE                 xor     eax, eax
.text:004014F0                 retn
.text:004014F0 sub_4014E3      endp
.text:004014F0
.text:004014F0 ; ---------------------------------------------------------------------------
.text:004014F1                 align 2
.text:004014F2 ; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004014F8 ; [000000A1 BYTES: COLLAPSED FUNCTION __onexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401599 ; [00000017 BYTES: COLLAPSED FUNCTION _atexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004015B0
.text:004015B0 ; =============== S U B R O U T I N E =======================================
.text:004015B0
.text:004015B0
.text:004015B0 sub_4015B0      proc near               ; CODE XREF: _pre_c_init+81↑p
.text:004015B0                 mov     edi, edi
.text:004015B2                 push    esi
.text:004015B3                 mov     eax, offset unk_4021E8
.text:004015B8                 mov     esi, offset unk_4021E8
.text:004015BD                 push    edi
.text:004015BE                 mov     edi, eax
.text:004015C0                 cmp     eax, esi
.text:004015C2                 jnb     short loc_4015D3
.text:004015C4
.text:004015C4 loc_4015C4:                             ; CODE XREF: sub_4015B0+21↓j
.text:004015C4                 mov     eax, [edi]
.text:004015C6                 test    eax, eax
.text:004015C8                 jz      short loc_4015CC
.text:004015CA                 call    eax
.text:004015CC
.text:004015CC loc_4015CC:                             ; CODE XREF: sub_4015B0+18↑j
.text:004015CC                 add     edi, 4
.text:004015CF                 cmp     edi, esi
.text:004015D1                 jb      short loc_4015C4
.text:004015D3
.text:004015D3 loc_4015D3:                             ; CODE XREF: sub_4015B0+12↑j
.text:004015D3                 pop     edi
.text:004015D4                 pop     esi
.text:004015D5                 retn
.text:004015D5 sub_4015B0      endp
.text:004015D5
.text:004015D6
.text:004015D6 ; =============== S U B R O U T I N E =======================================
.text:004015D6
.text:004015D6
.text:004015D6 ; void __cdecl sub_4015D6()
.text:004015D6 sub_4015D6      proc near               ; DATA XREF: _pre_cpp_init↑o
.text:004015D6                 mov     edi, edi
.text:004015D8                 push    esi
.text:004015D9                 mov     eax, offset unk_4021F0
.text:004015DE                 mov     esi, offset unk_4021F0
.text:004015E3                 push    edi
.text:004015E4                 mov     edi, eax
.text:004015E6                 cmp     eax, esi
.text:004015E8                 jnb     short loc_4015F9
.text:004015EA
.text:004015EA loc_4015EA:                             ; CODE XREF: sub_4015D6+21↓j
.text:004015EA                 mov     eax, [edi]
.text:004015EC                 test    eax, eax
.text:004015EE                 jz      short loc_4015F2
.text:004015F0                 call    eax
.text:004015F2
.text:004015F2 loc_4015F2:                             ; CODE XREF: sub_4015D6+18↑j
.text:004015F2                 add     edi, 4
.text:004015F5                 cmp     edi, esi
.text:004015F7                 jb      short loc_4015EA
.text:004015F9
.text:004015F9 loc_4015F9:                             ; CODE XREF: sub_4015D6+12↑j
.text:004015F9                 pop     edi
.text:004015FA                 pop     esi
.text:004015FB                 retn
.text:004015FB sub_4015D6      endp
.text:004015FB
.text:004015FC ; [00000006 BYTES: COLLAPSED FUNCTION _XcptFilter. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401602                 align 10h
.text:00401610 ; [00000035 BYTES: COLLAPSED FUNCTION __ValidateImageBase. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401645                 align 10h
.text:00401650 ; [00000044 BYTES: COLLAPSED FUNCTION __FindPESection. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401694                 align 10h
.text:004016A0 ; [000000BC BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040175C ; [00000006 BYTES: COLLAPSED FUNCTION _initterm. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401762 ; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401768                 align 10h
.text:00401770 ; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004017B5 ; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004017C9 ; [00000025 BYTES: COLLAPSED FUNCTION __except_handler4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004017EE ; [00000028 BYTES: COLLAPSED FUNCTION __setdefaultprecision. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401816
.text:00401816 ; =============== S U B R O U T I N E =======================================
.text:00401816
.text:00401816
.text:00401816 sub_401816      proc near               ; CODE XREF: _pre_c_init+86↑p
.text:00401816                                         ; DATA XREF: _pre_c_init+94↑o
.text:00401816                 xor     eax, eax
.text:00401818                 retn
.text:00401818 sub_401816      endp
.text:00401818
.text:00401819 ; [0000009B BYTES: COLLAPSED FUNCTION ___security_init_cookie. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004018B4 ; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004018BA ; [00000006 BYTES: COLLAPSED FUNCTION terminate(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004018C0 ; [00000006 BYTES: COLLAPSED FUNCTION _unlock. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004018C6 ; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004018CC ; [00000006 BYTES: COLLAPSED FUNCTION _lock. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004018D2 ; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004018D8 ; [00000006 BYTES: COLLAPSED FUNCTION _invoke_watson. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004018DE ; [00000006 BYTES: COLLAPSED FUNCTION _controlfp_s. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004018E4                 align 200h
.text:00401A00                 dd 180h dup(?)
.text:00401A00 _text           ends
.text:00401A00