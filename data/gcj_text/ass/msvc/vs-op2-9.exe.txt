.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000
.text:00401000 sub_401000      proc near               ; DATA XREF: .rdata:004054EC↓o
.text:00401000                 mov     dword ptr [ecx], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:00401006                 jmp     ds:??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text:00401006 sub_401000      endp
.text:00401006
.text:00401006 ; ---------------------------------------------------------------------------
.text:0040100C                 align 10h
.text:00401010
.text:00401010 ; =============== S U B R O U T I N E =======================================
.text:00401010
.text:00401010 ; Attributes: bp-based frame
.text:00401010
.text:00401010 sub_401010      proc near               ; DATA XREF: .rdata:const std::bad_alloc::`vftable'↓o
.text:00401010
.text:00401010 arg_0           = byte ptr  8
.text:00401010
.text:00401010                 push    ebp
.text:00401011                 mov     ebp, esp
.text:00401013                 push    esi
.text:00401014                 mov     esi, ecx
.text:00401016                 mov     dword ptr [esi], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:0040101C                 call    ds:??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text:00401022                 test    [ebp+arg_0], 1
.text:00401026                 jz      short loc_401032
.text:00401028                 push    esi
.text:00401029                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040102F                 add     esp, 4
.text:00401032
.text:00401032 loc_401032:                             ; CODE XREF: sub_401010+16↑j
.text:00401032                 mov     eax, esi
.text:00401034                 pop     esi
.text:00401035                 pop     ebp
.text:00401036                 retn    4
.text:00401036 sub_401010      endp
.text:00401036
.text:00401036 ; ---------------------------------------------------------------------------
.text:00401039                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 sub_401040      proc near               ; CODE XREF: _main+7D↓p
.text:00401040                                         ; _main+CE↓p ...
.text:00401040
.text:00401040 var_10          = dword ptr -10h
.text:00401040 var_C           = dword ptr -0Ch
.text:00401040 var_4           = dword ptr -4
.text:00401040 arg_0           = dword ptr  8
.text:00401040 arg_4           = dword ptr  0Ch
.text:00401040 arg_10          = dword ptr  18h
.text:00401040 arg_14          = dword ptr  1Ch
.text:00401040 arg_1C          = dword ptr  24h
.text:00401040 arg_30          = dword ptr  38h
.text:00401040
.text:00401040 ; FUNCTION CHUNK AT .text:00401AC0 SIZE 00000024 BYTES
.text:00401040 ; FUNCTION CHUNK AT .text:00404220 SIZE 0000002B BYTES
.text:00401040
.text:00401040 ; __unwind { // SEH_401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 push    0FFFFFFFFh
.text:00401045                 push    offset SEH_401040
.text:0040104A                 mov     eax, large fs:0
.text:00401050                 push    eax
.text:00401051                 push    ecx
.text:00401052                 push    esi
.text:00401053                 push    edi
.text:00401054                 mov     eax, ___security_cookie
.text:00401059                 xor     eax, ebp
.text:0040105B                 push    eax
.text:0040105C                 lea     eax, [ebp+var_C]
.text:0040105F                 mov     large fs:0, eax
.text:00401065 ;   try {
.text:00401065                 mov     [ebp+var_4], 1
.text:0040106C                 mov     eax, [ebp+arg_0]
.text:0040106F                 mov     edi, 10h
.text:00401074                 cmp     [ebp+arg_14], edi
.text:00401077                 jnb     short loc_40107C
.text:00401079                 lea     eax, [ebp+arg_0]
.text:0040107C
.text:0040107C loc_40107C:                             ; CODE XREF: sub_401040+37↑j
.text:0040107C                 movsx   eax, byte ptr [eax]
.text:0040107F                 sub     eax, 61h ; 'a'
.text:00401082                 mov     [ebp+var_10], eax
.text:00401085                 mov     eax, [ebp+arg_1C]
.text:00401088                 cmp     [ebp+arg_30], edi
.text:0040108B                 jnb     short loc_401090
.text:0040108D                 lea     eax, [ebp+arg_1C]
.text:00401090
.text:00401090 loc_401090:                             ; CODE XREF: sub_401040+4B↑j
.text:00401090                 movsx   esi, byte ptr [eax]
.text:00401093                 lea     eax, [ebp+var_10]
.text:00401096                 add     esi, 0FFFFFFEAh
.text:00401099                 call    sub_401AF0
.text:0040109E                 mov     [eax], esi
.text:004010A0                 mov     esi, ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004010A6                 cmp     [ebp+arg_14], edi
.text:004010A9                 jb      short loc_4010B4
.text:004010AB                 mov     ecx, [ebp+arg_0]
.text:004010AE                 push    ecx
.text:004010AF                 call    esi ; operator delete(void *) ; operator delete(void *)
.text:004010B1                 add     esp, 4
.text:004010B4
.text:004010B4 loc_4010B4:                             ; CODE XREF: sub_401040+69↑j
.text:004010B4                 xor     eax, eax
.text:004010B6                 mov     [ebp+arg_14], 0Fh
.text:004010BD                 mov     [ebp+arg_10], eax
.text:004010C0                 mov     byte ptr [ebp+arg_0], al
.text:004010C3                 cmp     [ebp+arg_30], edi
.text:004010C6                 jb      short loc_4010D1
.text:004010C8                 mov     edx, [ebp+arg_1C]
.text:004010CB                 push    edx
.text:004010CC                 call    esi ; operator delete(void *) ; operator delete(void *)
.text:004010CE                 add     esp, 4
.text:004010D1
.text:004010D1 loc_4010D1:                             ; CODE XREF: sub_401040+86↑j
.text:004010D1                 mov     ecx, [ebp+var_C]
.text:004010D4                 mov     large fs:0, ecx
.text:004010DB                 pop     ecx
.text:004010DC                 pop     edi
.text:004010DD                 pop     esi
.text:004010DE                 mov     esp, ebp
.text:004010E0                 pop     ebp
.text:004010E1                 retn
.text:004010E1 ;   } // starts at 401065
.text:004010E1 ; } // starts at 401040
.text:004010E1 sub_401040      endp
.text:004010E1
.text:004010E1 ; ---------------------------------------------------------------------------
.text:004010E2                 align 10h
.text:004010F0
.text:004010F0 ; =============== S U B R O U T I N E =======================================
.text:004010F0
.text:004010F0 ; Attributes: bp-based frame
.text:004010F0
.text:004010F0 sub_4010F0      proc near               ; CODE XREF: _main+391↓p
.text:004010F0
.text:004010F0 var_B4          = byte ptr -0B4h
.text:004010F0 var_AC          = byte ptr -0ACh
.text:004010F0 var_A4          = byte ptr -0A4h
.text:004010F0 var_9C          = byte ptr -9Ch
.text:004010F0 var_94          = dword ptr -94h
.text:004010F0 var_90          = dword ptr -90h
.text:004010F0 var_8C          = dword ptr -8Ch
.text:004010F0 var_88          = dword ptr -88h
.text:004010F0 var_84          = dword ptr -84h
.text:004010F0 var_80          = dword ptr -80h
.text:004010F0 var_7C          = dword ptr -7Ch
.text:004010F0 var_78          = dword ptr -78h
.text:004010F0 var_74          = dword ptr -74h
.text:004010F0 var_70          = dword ptr -70h
.text:004010F0 var_6C          = dword ptr -6Ch
.text:004010F0 var_68          = dword ptr -68h
.text:004010F0 var_64          = dword ptr -64h
.text:004010F0 var_60          = dword ptr -60h
.text:004010F0 var_5C          = dword ptr -5Ch
.text:004010F0 var_58          = dword ptr -58h
.text:004010F0 var_54          = dword ptr -54h
.text:004010F0 var_50          = dword ptr -50h
.text:004010F0 var_4C          = dword ptr -4Ch
.text:004010F0 var_48          = dword ptr -48h
.text:004010F0 var_44          = dword ptr -44h
.text:004010F0 var_40          = dword ptr -40h
.text:004010F0 var_3C          = dword ptr -3Ch
.text:004010F0 var_38          = dword ptr -38h
.text:004010F0 var_34          = dword ptr -34h
.text:004010F0 var_30          = dword ptr -30h
.text:004010F0 var_2C          = dword ptr -2Ch
.text:004010F0 var_28          = dword ptr -28h
.text:004010F0 var_24          = dword ptr -24h
.text:004010F0 var_20          = dword ptr -20h
.text:004010F0 var_1C          = dword ptr -1Ch
.text:004010F0 var_18          = dword ptr -18h
.text:004010F0 var_14          = dword ptr -14h
.text:004010F0 var_10          = dword ptr -10h
.text:004010F0 var_C           = dword ptr -0Ch
.text:004010F0 var_8           = dword ptr -8
.text:004010F0 var_4           = dword ptr -4
.text:004010F0
.text:004010F0                 push    ebp
.text:004010F1                 mov     ebp, esp
.text:004010F3                 sub     esp, 0B4h
.text:004010F9                 push    ebx
.text:004010FA                 push    esi
.text:004010FB                 push    edi
.text:004010FC                 call    sub_401BF0
.text:00401101                 push    1B8h            ; Size
.text:00401106                 push    0               ; Val
.text:00401108                 push    offset dword_4073E8 ; Dst
.text:0040110D                 call    memset
.text:00401112                 add     esp, 0Ch
.text:00401115                 push    1B8h            ; Size
.text:0040111A                 push    0               ; Val
.text:0040111C                 push    offset dword_4075A0 ; Dst
.text:00401121                 call    memset
.text:00401126                 mov     eax, dword_407078
.text:0040112B                 dec     eax
.text:0040112C                 add     esp, 0Ch
.text:0040112F                 mov     [ebp+var_1C], 0
.text:00401136                 test    eax, eax
.text:00401138                 jle     loc_4015C4
.text:0040113E                 mov     edi, edi
.text:00401140
.text:00401140 loc_401140:                             ; CODE XREF: sub_4010F0+4CE↓j
.text:00401140                 mov     edi, dword_40707C
.text:00401146                 mov     eax, dword_407068
.text:0040114B                 mov     esi, dword_42250C
.text:00401151                 mov     edx, eax
.text:00401153                 cmp     edi, 10h
.text:00401156                 jnb     short loc_40115D
.text:00401158                 mov     edx, offset dword_407068
.text:0040115D
.text:0040115D loc_40115D:                             ; CODE XREF: sub_4010F0+66↑j
.text:0040115D                 mov     ecx, [ebp+var_1C]
.text:00401160                 movsx   ebx, byte ptr [edx+ecx]
.text:00401164                 sub     ebx, 61h ; 'a'
.text:00401167                 mov     [ebp+var_14], ebx
.text:0040116A                 cmp     edi, 10h
.text:0040116D                 jnb     short loc_401174
.text:0040116F                 mov     eax, offset dword_407068
.text:00401174
.text:00401174 loc_401174:                             ; CODE XREF: sub_4010F0+7D↑j
.text:00401174                 movsx   eax, byte ptr [eax+ecx+1]
.text:00401179                 sub     eax, 61h ; 'a'
.text:0040117C                 lea     ecx, [ebp+var_84]
.text:00401182                 mov     [ebp+var_8], eax
.text:00401185                 mov     [ebp+var_90], eax
.text:0040118B                 push    ecx
.text:0040118C                 lea     eax, [ebp+var_94]
.text:00401192                 mov     [ebp+var_94], ebx
.text:00401198                 call    sub_401FC0
.text:0040119D                 mov     edx, [ebp+var_C]
.text:004011A0                 mov     eax, [ebp+var_80]
.text:004011A3                 mov     ecx, [ebp+var_84]
.text:004011A9                 push    edx
.text:004011AA                 push    eax
.text:004011AB                 push    ecx
.text:004011AC                 lea     edi, [ebp+var_10]
.text:004011AF                 mov     [ebp+var_10], 0
.text:004011B6                 call    sub_4037C0
.text:004011BB                 add     esp, 0Ch
.text:004011BE                 cmp     [ebp+var_10], 0
.text:004011C2                 jnz     short loc_4011FA
.text:004011C4                 mov     eax, [ebp+var_8]
.text:004011C7                 mov     ecx, 1
.text:004011CC                 add     dword_4075A0[ebx*4], ecx
.text:004011D3                 add     dword_4073E8[eax*4], ecx
.text:004011DA                 lea     esi, [ebp+var_3C]
.text:004011DD                 mov     [ebp+var_3C], ebx
.text:004011E0                 mov     [ebp+var_38], eax
.text:004011E3                 call    sub_4036E0
.text:004011E8                 push    eax
.text:004011E9                 lea     edi, [ebp+var_9C]
.text:004011EF                 call    sub_403070
.text:004011F4                 mov     esi, dword_42250C
.text:004011FA
.text:004011FA loc_4011FA:                             ; CODE XREF: sub_4010F0+D2↑j
.text:004011FA                 mov     eax, [esi+4]
.text:004011FD                 cmp     byte ptr [eax+15h], 0
.text:00401201                 mov     edi, esi
.text:00401203                 mov     edx, esi
.text:00401205                 jnz     short loc_401229
.text:00401207
.text:00401207 loc_401207:                             ; CODE XREF: sub_4010F0+137↓j
.text:00401207                 mov     ecx, [eax+0Ch]
.text:0040120A                 cmp     ecx, ebx
.text:0040120C                 jge     short loc_401213
.text:0040120E                 mov     eax, [eax+8]
.text:00401211                 jmp     short loc_401223
.text:00401213 ; ---------------------------------------------------------------------------
.text:00401213
.text:00401213 loc_401213:                             ; CODE XREF: sub_4010F0+11C↑j
.text:00401213                 cmp     byte ptr [edx+15h], 0
.text:00401217                 jz      short loc_40121F
.text:00401219                 cmp     ebx, ecx
.text:0040121B                 jge     short loc_40121F
.text:0040121D                 mov     edx, eax
.text:0040121F
.text:0040121F loc_40121F:                             ; CODE XREF: sub_4010F0+127↑j
.text:0040121F                                         ; sub_4010F0+12B↑j
.text:0040121F                 mov     edi, eax
.text:00401221                 mov     eax, [eax]
.text:00401223
.text:00401223 loc_401223:                             ; CODE XREF: sub_4010F0+121↑j
.text:00401223                 cmp     byte ptr [eax+15h], 0
.text:00401227                 jz      short loc_401207
.text:00401229
.text:00401229 loc_401229:                             ; CODE XREF: sub_4010F0+115↑j
.text:00401229                 cmp     byte ptr [edx+15h], 0
.text:0040122D                 jz      short loc_401234
.text:0040122F                 mov     eax, [esi+4]
.text:00401232                 jmp     short loc_401236
.text:00401234 ; ---------------------------------------------------------------------------
.text:00401234
.text:00401234 loc_401234:                             ; CODE XREF: sub_4010F0+13D↑j
.text:00401234                 mov     eax, [edx]
.text:00401236
.text:00401236 loc_401236:                             ; CODE XREF: sub_4010F0+142↑j
.text:00401236                 cmp     byte ptr [eax+15h], 0
.text:0040123A                 jnz     short loc_401254
.text:0040123C                 lea     esp, [esp+0]
.text:00401240
.text:00401240 loc_401240:                             ; CODE XREF: sub_4010F0+162↓j
.text:00401240                 cmp     ebx, [eax+0Ch]
.text:00401243                 jge     short loc_40124B
.text:00401245                 mov     edx, eax
.text:00401247                 mov     eax, [eax]
.text:00401249                 jmp     short loc_40124E
.text:0040124B ; ---------------------------------------------------------------------------
.text:0040124B
.text:0040124B loc_40124B:                             ; CODE XREF: sub_4010F0+153↑j
.text:0040124B                 mov     eax, [eax+8]
.text:0040124E
.text:0040124E loc_40124E:                             ; CODE XREF: sub_4010F0+159↑j
.text:0040124E                 cmp     byte ptr [eax+15h], 0
.text:00401252                 jz      short loc_401240
.text:00401254
.text:00401254 loc_401254:                             ; CODE XREF: sub_4010F0+14A↑j
.text:00401254                 mov     eax, [ebp+var_C]
.text:00401257                 push    eax
.text:00401258                 push    edx
.text:00401259                 push    edi
.text:0040125A                 lea     edi, [ebp+var_10]
.text:0040125D                 mov     [ebp+var_10], 0
.text:00401264                 call    sub_4037C0
.text:00401269                 add     esp, 0Ch
.text:0040126C                 cmp     [ebp+var_10], 0
.text:00401270                 jz      loc_401333
.text:00401276                 mov     eax, [esi+4]
.text:00401279                 cmp     byte ptr [eax+15h], 0
.text:0040127D                 mov     ecx, dword_42250C
.text:00401283                 mov     edi, ecx
.text:00401285                 jnz     short loc_40129B
.text:00401287
.text:00401287 loc_401287:                             ; CODE XREF: sub_4010F0+1A9↓j
.text:00401287                 cmp     [eax+0Ch], ebx
.text:0040128A                 jge     short loc_401291
.text:0040128C                 mov     eax, [eax+8]
.text:0040128F                 jmp     short loc_401295
.text:00401291 ; ---------------------------------------------------------------------------
.text:00401291
.text:00401291 loc_401291:                             ; CODE XREF: sub_4010F0+19A↑j
.text:00401291                 mov     edi, eax
.text:00401293                 mov     eax, [eax]
.text:00401295
.text:00401295 loc_401295:                             ; CODE XREF: sub_4010F0+19F↑j
.text:00401295                 cmp     byte ptr [eax+15h], 0
.text:00401299                 jz      short loc_401287
.text:0040129B
.text:0040129B loc_40129B:                             ; CODE XREF: sub_4010F0+195↑j
.text:0040129B                 mov     eax, edi
.text:0040129D                 cmp     edi, ecx
.text:0040129F                 jz      short loc_4012A6
.text:004012A1                 cmp     ebx, [edi+0Ch]
.text:004012A4                 jge     short loc_4012C7
.text:004012A6
.text:004012A6 loc_4012A6:                             ; CODE XREF: sub_4010F0+1AF↑j
.text:004012A6                 lea     esi, [ebp+var_7C]
.text:004012A9                 mov     [ebp+var_7C], ebx
.text:004012AC                 mov     [ebp+var_78], 0
.text:004012B3                 call    sub_403750
.text:004012B8                 push    edi
.text:004012B9                 lea     ebx, [ebp+var_18]
.text:004012BC                 call    sub_402EE0
.text:004012C1                 mov     eax, [ebp+var_18]
.text:004012C4                 mov     ebx, [ebp+var_14]
.text:004012C7
.text:004012C7 loc_4012C7:                             ; CODE XREF: sub_4010F0+1B4↑j
.text:004012C7                 mov     esi, [eax+10h]
.text:004012CA                 mov     ecx, [ebp+var_8]
.text:004012CD                 lea     edx, [ebp+var_24]
.text:004012D0                 push    edx
.text:004012D1                 lea     eax, [ebp+var_4C]
.text:004012D4                 mov     [ebp+var_4C], esi
.text:004012D7                 mov     [ebp+var_48], ecx
.text:004012DA                 call    sub_401FC0
.text:004012DF                 mov     eax, [ebp+var_C]
.text:004012E2                 mov     ecx, [ebp+var_20]
.text:004012E5                 mov     edx, [ebp+var_24]
.text:004012E8                 push    eax
.text:004012E9                 push    ecx
.text:004012EA                 push    edx
.text:004012EB                 lea     edi, [ebp+var_4]
.text:004012EE                 mov     [ebp+var_4], 0
.text:004012F5                 call    sub_4037C0
.text:004012FA                 add     esp, 0Ch
.text:004012FD                 cmp     [ebp+var_4], 0
.text:00401301                 jnz     short loc_401333
.text:00401303                 mov     eax, [ebp+var_8]
.text:00401306                 mov     ecx, 1
.text:0040130B                 add     dword_4075A0[esi*4], ecx
.text:00401312                 add     dword_4073E8[eax*4], ecx
.text:00401319                 mov     [ebp+var_5C], esi
.text:0040131C                 lea     esi, [ebp+var_5C]
.text:0040131F                 mov     [ebp+var_58], eax
.text:00401322                 call    sub_4036E0
.text:00401327                 push    eax
.text:00401328                 lea     edi, [ebp+var_AC]
.text:0040132E                 call    sub_403070
.text:00401333
.text:00401333 loc_401333:                             ; CODE XREF: sub_4010F0+180↑j
.text:00401333                                         ; sub_4010F0+211↑j
.text:00401333                 mov     edx, dword_42250C
.text:00401339                 mov     esi, [edx+4]
.text:0040133C                 mov     eax, esi
.text:0040133E                 cmp     byte ptr [eax+15h], 0
.text:00401342                 mov     edi, edx
.text:00401344                 jnz     short loc_40136A
.text:00401346
.text:00401346 loc_401346:                             ; CODE XREF: sub_4010F0+278↓j
.text:00401346                 mov     ecx, [eax+0Ch]
.text:00401349                 cmp     ecx, [ebp+var_8]
.text:0040134C                 jge     short loc_401353
.text:0040134E                 mov     eax, [eax+8]
.text:00401351                 jmp     short loc_401364
.text:00401353 ; ---------------------------------------------------------------------------
.text:00401353
.text:00401353 loc_401353:                             ; CODE XREF: sub_4010F0+25C↑j
.text:00401353                 cmp     byte ptr [edx+15h], 0
.text:00401357                 jz      short loc_401360
.text:00401359                 cmp     [ebp+var_8], ecx
.text:0040135C                 jge     short loc_401360
.text:0040135E                 mov     edx, eax
.text:00401360
.text:00401360 loc_401360:                             ; CODE XREF: sub_4010F0+267↑j
.text:00401360                                         ; sub_4010F0+26C↑j
.text:00401360                 mov     edi, eax
.text:00401362                 mov     eax, [eax]
.text:00401364
.text:00401364 loc_401364:                             ; CODE XREF: sub_4010F0+261↑j
.text:00401364                 cmp     byte ptr [eax+15h], 0
.text:00401368                 jz      short loc_401346
.text:0040136A
.text:0040136A loc_40136A:                             ; CODE XREF: sub_4010F0+254↑j
.text:0040136A                 cmp     byte ptr [edx+15h], 0
.text:0040136E                 mov     eax, esi
.text:00401370                 jnz     short loc_401374
.text:00401372                 mov     eax, [edx]
.text:00401374
.text:00401374 loc_401374:                             ; CODE XREF: sub_4010F0+280↑j
.text:00401374                 cmp     byte ptr [eax+15h], 0
.text:00401378                 jnz     short loc_401394
.text:0040137A                 mov     ecx, [ebp+var_8]
.text:0040137D                 lea     ecx, [ecx+0]
.text:00401380
.text:00401380 loc_401380:                             ; CODE XREF: sub_4010F0+2A2↓j
.text:00401380                 cmp     ecx, [eax+0Ch]
.text:00401383                 jge     short loc_40138B
.text:00401385                 mov     edx, eax
.text:00401387                 mov     eax, [eax]
.text:00401389                 jmp     short loc_40138E
.text:0040138B ; ---------------------------------------------------------------------------
.text:0040138B
.text:0040138B loc_40138B:                             ; CODE XREF: sub_4010F0+293↑j
.text:0040138B                 mov     eax, [eax+8]
.text:0040138E
.text:0040138E loc_40138E:                             ; CODE XREF: sub_4010F0+299↑j
.text:0040138E                 cmp     byte ptr [eax+15h], 0
.text:00401392                 jz      short loc_401380
.text:00401394
.text:00401394 loc_401394:                             ; CODE XREF: sub_4010F0+288↑j
.text:00401394                 mov     eax, [ebp+var_C]
.text:00401397                 push    eax
.text:00401398                 push    edx
.text:00401399                 push    edi
.text:0040139A                 lea     edi, [ebp+var_4]
.text:0040139D                 mov     [ebp+var_4], 0
.text:004013A4                 call    sub_4037C0
.text:004013A9                 add     esp, 0Ch
.text:004013AC                 cmp     [ebp+var_4], 0
.text:004013B0                 jz      loc_401482
.text:004013B6                 mov     edx, dword_42250C
.text:004013BC                 mov     ecx, [ebp+var_8]
.text:004013BF                 mov     eax, esi
.text:004013C1                 cmp     byte ptr [eax+15h], 0
.text:004013C5                 mov     edi, edx
.text:004013C7                 jnz     short loc_4013E4
.text:004013C9                 lea     esp, [esp+0]
.text:004013D0
.text:004013D0 loc_4013D0:                             ; CODE XREF: sub_4010F0+2F2↓j
.text:004013D0                 cmp     [eax+0Ch], ecx
.text:004013D3                 jge     short loc_4013DA
.text:004013D5                 mov     eax, [eax+8]
.text:004013D8                 jmp     short loc_4013DE
.text:004013DA ; ---------------------------------------------------------------------------
.text:004013DA
.text:004013DA loc_4013DA:                             ; CODE XREF: sub_4010F0+2E3↑j
.text:004013DA                 mov     edi, eax
.text:004013DC                 mov     eax, [eax]
.text:004013DE
.text:004013DE loc_4013DE:                             ; CODE XREF: sub_4010F0+2E8↑j
.text:004013DE                 cmp     byte ptr [eax+15h], 0
.text:004013E2                 jz      short loc_4013D0
.text:004013E4
.text:004013E4 loc_4013E4:                             ; CODE XREF: sub_4010F0+2D7↑j
.text:004013E4                 mov     eax, edi
.text:004013E6                 cmp     edi, edx
.text:004013E8                 jz      short loc_4013EF
.text:004013EA                 cmp     ecx, [edi+0Ch]
.text:004013ED                 jge     short loc_40141C
.text:004013EF
.text:004013EF loc_4013EF:                             ; CODE XREF: sub_4010F0+2F8↑j
.text:004013EF                 mov     ecx, [ebp+var_8]
.text:004013F2                 lea     esi, [ebp+var_8C]
.text:004013F8                 mov     [ebp+var_8C], ecx
.text:004013FE                 mov     [ebp+var_88], 0
.text:00401408                 call    sub_403750
.text:0040140D                 push    edi
.text:0040140E                 lea     ebx, [ebp+var_C]
.text:00401411                 call    sub_402EE0
.text:00401416                 mov     eax, [ebp+var_C]
.text:00401419                 mov     ebx, [ebp+var_14]
.text:0040141C
.text:0040141C loc_40141C:                             ; CODE XREF: sub_4010F0+2FD↑j
.text:0040141C                 mov     esi, [eax+10h]
.text:0040141F                 lea     edx, [ebp+var_2C]
.text:00401422                 push    edx
.text:00401423                 lea     eax, [ebp+var_6C]
.text:00401426                 mov     [ebp+var_6C], ebx
.text:00401429                 mov     [ebp+var_68], esi
.text:0040142C                 call    sub_401FC0
.text:00401431                 mov     eax, [ebp+var_C]
.text:00401434                 mov     ecx, [ebp+var_28]
.text:00401437                 mov     edx, [ebp+var_2C]
.text:0040143A                 push    eax
.text:0040143B                 push    ecx
.text:0040143C                 push    edx
.text:0040143D                 lea     edi, [ebp+var_4]
.text:00401440                 mov     [ebp+var_4], 0
.text:00401447                 call    sub_4037C0
.text:0040144C                 add     esp, 0Ch
.text:0040144F                 cmp     [ebp+var_4], 0
.text:00401453                 jnz     short loc_401482
.text:00401455                 mov     eax, 1
.text:0040145A                 add     dword_4073E8[esi*4], eax
.text:00401461                 add     dword_4075A0[ebx*4], eax
.text:00401468                 mov     [ebp+var_30], esi
.text:0040146B                 lea     esi, [ebp+var_34]
.text:0040146E                 mov     [ebp+var_34], ebx
.text:00401471                 call    sub_4036E0
.text:00401476                 push    eax
.text:00401477                 lea     edi, [ebp+var_A4]
.text:0040147D                 call    sub_403070
.text:00401482
.text:00401482 loc_401482:                             ; CODE XREF: sub_4010F0+2C0↑j
.text:00401482                                         ; sub_4010F0+363↑j
.text:00401482                 mov     edx, dword_42250C
.text:00401488                 mov     edi, [edx+4]
.text:0040148B                 mov     esi, [ebp+var_8]
.text:0040148E                 mov     eax, edi
.text:00401490                 cmp     byte ptr [eax+15h], 0
.text:00401494                 mov     ebx, edx
.text:00401496                 jnz     short loc_4014BA
.text:00401498
.text:00401498 loc_401498:                             ; CODE XREF: sub_4010F0+3C8↓j
.text:00401498                 mov     ecx, [eax+0Ch]
.text:0040149B                 cmp     ecx, esi
.text:0040149D                 jge     short loc_4014A4
.text:0040149F                 mov     eax, [eax+8]
.text:004014A2                 jmp     short loc_4014B4
.text:004014A4 ; ---------------------------------------------------------------------------
.text:004014A4
.text:004014A4 loc_4014A4:                             ; CODE XREF: sub_4010F0+3AD↑j
.text:004014A4                 cmp     byte ptr [edx+15h], 0
.text:004014A8                 jz      short loc_4014B0
.text:004014AA                 cmp     esi, ecx
.text:004014AC                 jge     short loc_4014B0
.text:004014AE                 mov     edx, eax
.text:004014B0
.text:004014B0 loc_4014B0:                             ; CODE XREF: sub_4010F0+3B8↑j
.text:004014B0                                         ; sub_4010F0+3BC↑j
.text:004014B0                 mov     ebx, eax
.text:004014B2                 mov     eax, [eax]
.text:004014B4
.text:004014B4 loc_4014B4:                             ; CODE XREF: sub_4010F0+3B2↑j
.text:004014B4                 cmp     byte ptr [eax+15h], 0
.text:004014B8                 jz      short loc_401498
.text:004014BA
.text:004014BA loc_4014BA:                             ; CODE XREF: sub_4010F0+3A6↑j
.text:004014BA                 cmp     byte ptr [edx+15h], 0
.text:004014BE                 mov     eax, edi
.text:004014C0                 jnz     short loc_4014C4
.text:004014C2                 mov     eax, [edx]
.text:004014C4
.text:004014C4 loc_4014C4:                             ; CODE XREF: sub_4010F0+3D0↑j
.text:004014C4                 cmp     byte ptr [eax+15h], 0
.text:004014C8                 jnz     short loc_4014E4
.text:004014CA                 lea     ebx, [ebx+0]
.text:004014D0
.text:004014D0 loc_4014D0:                             ; CODE XREF: sub_4010F0+3F2↓j
.text:004014D0                 cmp     esi, [eax+0Ch]
.text:004014D3                 jge     short loc_4014DB
.text:004014D5                 mov     edx, eax
.text:004014D7                 mov     eax, [eax]
.text:004014D9                 jmp     short loc_4014DE
.text:004014DB ; ---------------------------------------------------------------------------
.text:004014DB
.text:004014DB loc_4014DB:                             ; CODE XREF: sub_4010F0+3E3↑j
.text:004014DB                 mov     eax, [eax+8]
.text:004014DE
.text:004014DE loc_4014DE:                             ; CODE XREF: sub_4010F0+3E9↑j
.text:004014DE                 cmp     byte ptr [eax+15h], 0
.text:004014E2                 jz      short loc_4014D0
.text:004014E4
.text:004014E4 loc_4014E4:                             ; CODE XREF: sub_4010F0+3D8↑j
.text:004014E4                 mov     eax, [ebp+var_C]
.text:004014E7                 push    eax
.text:004014E8                 push    edx
.text:004014E9                 push    ebx
.text:004014EA                 lea     edi, [ebp+var_4]
.text:004014ED                 mov     [ebp+var_4], 0
.text:004014F4                 call    sub_4037C0
.text:004014F9                 add     esp, 0Ch
.text:004014FC                 cmp     [ebp+var_4], 0
.text:00401500                 jz      loc_4015AE
.text:00401506                 lea     ecx, [ebp+var_14]
.text:00401509                 push    ecx
.text:0040150A                 lea     edx, [ebp+var_44]
.text:0040150D                 push    edx
.text:0040150E                 call    sub_401EA0
.text:00401513                 mov     eax, [ebp+var_C]
.text:00401516                 mov     ecx, [ebp+var_40]
.text:00401519                 mov     edx, [ebp+var_44]
.text:0040151C                 push    eax
.text:0040151D                 push    ecx
.text:0040151E                 push    edx
.text:0040151F                 lea     edi, [ebp+var_4]
.text:00401522                 mov     [ebp+var_4], 0
.text:00401529                 call    sub_4037C0
.text:0040152E                 add     esp, 0Ch
.text:00401531                 cmp     [ebp+var_4], 0
.text:00401535                 jz      short loc_4015AE
.text:00401537                 lea     eax, [ebp+var_8]
.text:0040153A                 call    sub_401B70
.text:0040153F                 mov     esi, [eax]
.text:00401541                 lea     eax, [ebp+var_14]
.text:00401544                 call    sub_401B70
.text:00401549                 mov     ebx, [eax]
.text:0040154B                 lea     eax, [ebp+var_64]
.text:0040154E                 push    eax
.text:0040154F                 lea     eax, [ebp+var_54]
.text:00401552                 mov     [ebp+var_54], ebx
.text:00401555                 mov     [ebp+var_50], esi
.text:00401558                 call    sub_401FC0
.text:0040155D                 mov     ecx, [ebp+var_C]
.text:00401560                 mov     edx, [ebp+var_60]
.text:00401563                 mov     eax, [ebp+var_64]
.text:00401566                 push    ecx
.text:00401567                 push    edx
.text:00401568                 push    eax
.text:00401569                 lea     edi, [ebp+var_4]
.text:0040156C                 mov     [ebp+var_4], 0
.text:00401573                 call    sub_4037C0
.text:00401578                 add     esp, 0Ch
.text:0040157B                 cmp     [ebp+var_4], 0
.text:0040157F                 jnz     short loc_4015AE
.text:00401581                 mov     eax, 1
.text:00401586                 add     dword_4073E8[esi*4], eax
.text:0040158D                 add     dword_4075A0[ebx*4], eax
.text:00401594                 mov     [ebp+var_70], esi
.text:00401597                 lea     esi, [ebp+var_74]
.text:0040159A                 mov     [ebp+var_74], ebx
.text:0040159D                 call    sub_4036E0
.text:004015A2                 push    eax
.text:004015A3                 lea     edi, [ebp+var_B4]
.text:004015A9                 call    sub_403070
.text:004015AE
.text:004015AE loc_4015AE:                             ; CODE XREF: sub_4010F0+410↑j
.text:004015AE                                         ; sub_4010F0+445↑j ...
.text:004015AE                 mov     eax, [ebp+var_1C]
.text:004015B1                 mov     ecx, dword_407078
.text:004015B7                 inc     eax
.text:004015B8                 dec     ecx
.text:004015B9                 mov     [ebp+var_1C], eax
.text:004015BC                 cmp     eax, ecx
.text:004015BE                 jl      loc_401140
.text:004015C4
.text:004015C4 loc_4015C4:                             ; CODE XREF: sub_4010F0+48↑j
.text:004015C4                 xor     edi, edi
.text:004015C6                 xor     esi, esi
.text:004015C8                 mov     [ebp+var_10], edi
.text:004015CB                 mov     [ebp+var_4], esi
.text:004015CE                 xor     eax, eax
.text:004015D0
.text:004015D0 loc_4015D0:                             ; CODE XREF: sub_4010F0+56A↓j
.text:004015D0                 mov     ecx, dword_4075A0[eax]
.text:004015D6                 mov     edx, dword_4073E8[eax]
.text:004015DC                 cmp     edx, ecx
.text:004015DE                 jle     short loc_4015E6
.text:004015E0                 sub     edx, ecx
.text:004015E2                 add     edi, edx
.text:004015E4                 jmp     short loc_4015EA
.text:004015E6 ; ---------------------------------------------------------------------------
.text:004015E6
.text:004015E6 loc_4015E6:                             ; CODE XREF: sub_4010F0+4EE↑j
.text:004015E6                 sub     ecx, edx
.text:004015E8                 add     esi, ecx
.text:004015EA
.text:004015EA loc_4015EA:                             ; CODE XREF: sub_4010F0+4F4↑j
.text:004015EA                 mov     ecx, dword_4075A4[eax]
.text:004015F0                 mov     edx, dword_4073EC[eax]
.text:004015F6                 cmp     edx, ecx
.text:004015F8                 jle     short loc_401600
.text:004015FA                 sub     edx, ecx
.text:004015FC                 add     edi, edx
.text:004015FE                 jmp     short loc_401604
.text:00401600 ; ---------------------------------------------------------------------------
.text:00401600
.text:00401600 loc_401600:                             ; CODE XREF: sub_4010F0+508↑j
.text:00401600                 sub     ecx, edx
.text:00401602                 add     esi, ecx
.text:00401604
.text:00401604 loc_401604:                             ; CODE XREF: sub_4010F0+50E↑j
.text:00401604                 mov     ecx, dword_4075A8[eax]
.text:0040160A                 mov     edx, dword_4073F0[eax]
.text:00401610                 cmp     edx, ecx
.text:00401612                 jle     short loc_40161A
.text:00401614                 sub     edx, ecx
.text:00401616                 add     edi, edx
.text:00401618                 jmp     short loc_40161E
.text:0040161A ; ---------------------------------------------------------------------------
.text:0040161A
.text:0040161A loc_40161A:                             ; CODE XREF: sub_4010F0+522↑j
.text:0040161A                 sub     ecx, edx
.text:0040161C                 add     esi, ecx
.text:0040161E
.text:0040161E loc_40161E:                             ; CODE XREF: sub_4010F0+528↑j
.text:0040161E                 mov     ecx, dword_4075AC[eax]
.text:00401624                 mov     edx, dword_4073F4[eax]
.text:0040162A                 cmp     edx, ecx
.text:0040162C                 jle     short loc_401634
.text:0040162E                 sub     edx, ecx
.text:00401630                 add     edi, edx
.text:00401632                 jmp     short loc_401638
.text:00401634 ; ---------------------------------------------------------------------------
.text:00401634
.text:00401634 loc_401634:                             ; CODE XREF: sub_4010F0+53C↑j
.text:00401634                 sub     ecx, edx
.text:00401636                 add     esi, ecx
.text:00401638
.text:00401638 loc_401638:                             ; CODE XREF: sub_4010F0+542↑j
.text:00401638                 mov     ecx, dword_4075B0[eax]
.text:0040163E                 mov     edx, dword_4073F8[eax]
.text:00401644                 cmp     edx, ecx
.text:00401646                 jle     short loc_40164E
.text:00401648                 sub     edx, ecx
.text:0040164A                 add     edi, edx
.text:0040164C                 jmp     short loc_401652
.text:0040164E ; ---------------------------------------------------------------------------
.text:0040164E
.text:0040164E loc_40164E:                             ; CODE XREF: sub_4010F0+556↑j
.text:0040164E                 sub     ecx, edx
.text:00401650                 add     esi, ecx
.text:00401652
.text:00401652 loc_401652:                             ; CODE XREF: sub_4010F0+55C↑j
.text:00401652                 add     eax, 14h
.text:00401655                 cmp     eax, 1B8h
.text:0040165A                 jl      loc_4015D0
.text:00401660                 mov     [ebp+var_4], esi
.text:00401663                 mov     [ebp+var_10], edi
.text:00401666                 lea     eax, [ebp+var_4]
.text:00401669                 cmp     edi, esi
.text:0040166B                 jl      short loc_401670
.text:0040166D                 lea     eax, [ebp+var_10]
.text:00401670
.text:00401670 loc_401670:                             ; CODE XREF: sub_4010F0+57B↑j
.text:00401670                 mov     eax, [eax]
.text:00401672                 dec     eax
.text:00401673                 mov     [ebp+var_C], eax
.text:00401676                 test    eax, eax
.text:00401678                 mov     [ebp+var_18], 0
.text:0040167F                 lea     eax, [ebp+var_C]
.text:00401682                 jg      short loc_401687
.text:00401684                 lea     eax, [ebp+var_18]
.text:00401687
.text:00401687 loc_401687:                             ; CODE XREF: sub_4010F0+592↑j
.text:00401687                 mov     edx, ds:?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl(std::basic_ostream<char,std::char_traits<char>> &)
.text:0040168D                 mov     ecx, dword_422520
.text:00401693                 mov     eax, [eax]
.text:00401695                 push    edx
.text:00401696                 lea     edx, [eax+ecx+1]
.text:0040169A                 mov     ecx, ds:?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cout
.text:004016A0                 push    edx
.text:004016A1                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
.text:004016A7                 mov     ecx, eax
.text:004016A9                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(std::basic_ostream<char,std::char_traits<char>> & (*)(std::basic_ostream<char,std::char_traits<char>> &))
.text:004016AF                 pop     edi
.text:004016B0                 pop     esi
.text:004016B1                 pop     ebx
.text:004016B2                 mov     esp, ebp
.text:004016B4                 pop     ebp
.text:004016B5                 retn
.text:004016B5 sub_4010F0      endp
.text:004016B5
.text:004016B5 ; ---------------------------------------------------------------------------
.text:004016B6                 align 10h
.text:004016C0
.text:004016C0 ; =============== S U B R O U T I N E =======================================
.text:004016C0
.text:004016C0 ; Attributes: bp-based frame fuzzy-sp
.text:004016C0
.text:004016C0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:004016C0 _main           proc near               ; CODE XREF: ___tmainCRTStartup+11D↓p
.text:004016C0
.text:004016C0 var_1C          = dword ptr -1Ch
.text:004016C0 var_18          = dword ptr -18h
.text:004016C0 var_14          = dword ptr -14h
.text:004016C0 var_C           = dword ptr -0Ch
.text:004016C0 var_4           = dword ptr -4
.text:004016C0 argc            = dword ptr  8
.text:004016C0 argv            = dword ptr  0Ch
.text:004016C0 envp            = dword ptr  10h
.text:004016C0
.text:004016C0 ; FUNCTION CHUNK AT .text:00401AC0 SIZE 00000024 BYTES
.text:004016C0 ; FUNCTION CHUNK AT .text:00404250 SIZE 0000005B BYTES
.text:004016C0
.text:004016C0 ; __unwind { // _main_SEH
.text:004016C0                 push    ebp
.text:004016C1                 mov     ebp, esp
.text:004016C3                 and     esp, 0FFFFFFF8h
.text:004016C6                 push    0FFFFFFFFh
.text:004016C8                 push    offset _main_SEH
.text:004016CD                 mov     eax, large fs:0
.text:004016D3                 push    eax
.text:004016D4                 sub     esp, 10h
.text:004016D7                 push    ebx
.text:004016D8                 push    esi
.text:004016D9                 push    edi
.text:004016DA                 mov     eax, ___security_cookie
.text:004016DF                 xor     eax, esp
.text:004016E1                 push    eax
.text:004016E2                 lea     eax, [esp+2Ch+var_C]
.text:004016E6                 mov     large fs:0, eax
.text:004016EC                 sub     esp, 1Ch
.text:004016EF                 mov     esi, esp
.text:004016F1                 mov     ebx, 0Fh
.text:004016F6                 mov     [esi+14h], ebx
.text:004016F9                 mov     dword ptr [esi+10h], 0
.text:00401700                 lea     edi, [ebx-0Eh]
.text:00401703                 mov     eax, offset a0  ; "0"
.text:00401708                 mov     [esp+48h+var_18], esp
.text:0040170C                 mov     byte ptr [esi], 0
.text:0040170F                 call    sub_401D30
.text:00401714                 xor     eax, eax
.text:00401716                 mov     [esp+48h+var_4], eax
.text:0040171A                 sub     esp, 1Ch
.text:0040171D                 mov     esi, esp
.text:0040171F                 mov     [esi+10h], eax
.text:00401722                 mov     [esi+14h], ebx
.text:00401725                 mov     [esi], al
.text:00401727                 mov     eax, offset aO  ; "o"
.text:0040172C                 mov     [esp+64h+var_14], esp
.text:00401730                 call    sub_401D30
.text:00401735                 mov     [esp+64h+var_4], 0FFFFFFFFh
.text:0040173D                 call    sub_401040
.text:00401742                 add     esp, 1Ch
.text:00401745                 mov     esi, esp
.text:00401747                 mov     [esi+14h], ebx
.text:0040174A                 mov     dword ptr [esi+10h], 0
.text:00401751                 mov     eax, offset a1  ; "1"
.text:00401756                 mov     [esp+48h+var_14], esp
.text:0040175A                 mov     byte ptr [esi], 0
.text:0040175D                 call    sub_401D30
.text:00401762                 sub     esp, 1Ch
.text:00401765                 mov     [esp+64h+var_4], edi
.text:00401769                 mov     esi, esp
.text:0040176B                 mov     [esi+14h], ebx
.text:0040176E                 mov     dword ptr [esi+10h], 0
.text:00401775                 mov     eax, offset aI  ; "i"
.text:0040177A                 mov     [esp+64h+var_18], esp
.text:0040177E                 mov     byte ptr [esi], 0
.text:00401781                 call    sub_401D30
.text:00401786                 mov     [esp+64h+var_4], 0FFFFFFFFh
.text:0040178E                 call    sub_401040
.text:00401793                 add     esp, 1Ch
.text:00401796                 mov     esi, esp
.text:00401798                 mov     [esi+14h], ebx
.text:0040179B                 mov     dword ptr [esi+10h], 0
.text:004017A2                 mov     eax, offset a3  ; "3"
.text:004017A7                 mov     [esp+48h+var_14], esp
.text:004017AB                 mov     byte ptr [esi], 0
.text:004017AE                 call    sub_401D30
.text:004017B3                 sub     esp, 1Ch
.text:004017B6                 mov     [esp+64h+var_4], 2
.text:004017BE                 mov     esi, esp
.text:004017C0                 mov     [esi+14h], ebx
.text:004017C3                 mov     dword ptr [esi+10h], 0
.text:004017CA                 mov     eax, offset aE  ; "e"
.text:004017CF                 mov     [esp+64h+var_18], esp
.text:004017D3                 mov     byte ptr [esi], 0
.text:004017D6                 call    sub_401D30
.text:004017DB                 mov     [esp+64h+var_4], 0FFFFFFFFh
.text:004017E3                 call    sub_401040
.text:004017E8                 add     esp, 1Ch
.text:004017EB                 mov     esi, esp
.text:004017ED                 mov     [esi+14h], ebx
.text:004017F0                 mov     dword ptr [esi+10h], 0
.text:004017F7                 mov     eax, offset a4  ; "4"
.text:004017FC                 mov     [esp+48h+var_14], esp
.text:00401800                 mov     byte ptr [esi], 0
.text:00401803                 call    sub_401D30
.text:00401808                 sub     esp, 1Ch
.text:0040180B                 mov     [esp+64h+var_4], 3
.text:00401813                 mov     esi, esp
.text:00401815                 mov     [esi+14h], ebx
.text:00401818                 mov     dword ptr [esi+10h], 0
.text:0040181F                 mov     eax, offset aA  ; "a"
.text:00401824                 mov     [esp+64h+var_18], esp
.text:00401828                 mov     byte ptr [esi], 0
.text:0040182B                 call    sub_401D30
.text:00401830                 mov     [esp+64h+var_4], 0FFFFFFFFh
.text:00401838                 call    sub_401040
.text:0040183D                 add     esp, 1Ch
.text:00401840                 mov     esi, esp
.text:00401842                 mov     [esi+14h], ebx
.text:00401845                 mov     dword ptr [esi+10h], 0
.text:0040184C                 mov     eax, offset a5  ; "5"
.text:00401851                 mov     [esp+48h+var_14], esp
.text:00401855                 mov     byte ptr [esi], 0
.text:00401858                 call    sub_401D30
.text:0040185D                 sub     esp, 1Ch
.text:00401860                 mov     [esp+64h+var_4], 4
.text:00401868                 mov     esi, esp
.text:0040186A                 mov     [esi+14h], ebx
.text:0040186D                 mov     dword ptr [esi+10h], 0
.text:00401874                 mov     eax, offset aS  ; "s"
.text:00401879                 mov     [esp+64h+var_18], esp
.text:0040187D                 mov     byte ptr [esi], 0
.text:00401880                 call    sub_401D30
.text:00401885                 mov     [esp+64h+var_4], 0FFFFFFFFh
.text:0040188D                 call    sub_401040
.text:00401892                 add     esp, 1Ch
.text:00401895                 mov     esi, esp
.text:00401897                 mov     [esi+14h], ebx
.text:0040189A                 mov     dword ptr [esi+10h], 0
.text:004018A1                 mov     eax, offset a7  ; "7"
.text:004018A6                 mov     [esp+48h+var_14], esp
.text:004018AA                 mov     byte ptr [esi], 0
.text:004018AD                 call    sub_401D30
.text:004018B2                 sub     esp, 1Ch
.text:004018B5                 mov     [esp+64h+var_4], 5
.text:004018BD                 mov     esi, esp
.text:004018BF                 mov     [esi+14h], ebx
.text:004018C2                 mov     dword ptr [esi+10h], 0
.text:004018C9                 mov     eax, offset aT  ; "t"
.text:004018CE                 mov     [esp+64h+var_18], esp
.text:004018D2                 mov     byte ptr [esi], 0
.text:004018D5                 call    sub_401D30
.text:004018DA                 mov     [esp+64h+var_4], 0FFFFFFFFh
.text:004018E2                 call    sub_401040
.text:004018E7                 add     esp, 1Ch
.text:004018EA                 mov     esi, esp
.text:004018EC                 mov     [esi+14h], ebx
.text:004018EF                 mov     dword ptr [esi+10h], 0
.text:004018F6                 mov     eax, offset a8  ; "8"
.text:004018FB                 mov     [esp+48h+var_14], esp
.text:004018FF                 mov     byte ptr [esi], 0
.text:00401902                 call    sub_401D30
.text:00401907                 sub     esp, 1Ch
.text:0040190A                 mov     [esp+64h+var_4], 6
.text:00401912                 mov     esi, esp
.text:00401914                 mov     [esi+14h], ebx
.text:00401917                 mov     dword ptr [esi+10h], 0
.text:0040191E                 mov     eax, offset aB  ; "b"
.text:00401923                 mov     [esp+64h+var_18], esp
.text:00401927                 mov     byte ptr [esi], 0
.text:0040192A                 call    sub_401D30
.text:0040192F                 mov     [esp+64h+var_4], 0FFFFFFFFh
.text:00401937                 call    sub_401040
.text:0040193C                 add     esp, 1Ch
.text:0040193F                 mov     esi, esp
.text:00401941                 mov     [esi+14h], ebx
.text:00401944                 mov     dword ptr [esi+10h], 0
.text:0040194B                 mov     eax, offset a9  ; "9"
.text:00401950                 mov     [esp+48h+var_14], esp
.text:00401954                 mov     byte ptr [esi], 0
.text:00401957                 call    sub_401D30
.text:0040195C                 sub     esp, 1Ch
.text:0040195F                 mov     [esp+64h+var_4], 7
.text:00401967                 mov     esi, esp
.text:00401969                 mov     [esi+14h], ebx
.text:0040196C                 xor     ebx, ebx
.text:0040196E                 mov     [esi+10h], ebx
.text:00401971                 mov     eax, offset aG  ; "g"
.text:00401976                 mov     [esp+64h+var_18], esp
.text:0040197A                 mov     [esi], bl
.text:0040197C                 call    sub_401D30
.text:00401981                 mov     [esp+64h+var_4], 0FFFFFFFFh
.text:00401989                 call    sub_401040
.text:0040198E                 mov     ecx, ds:?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A ; std::basic_istream<char,std::char_traits<char>> std::cin
.text:00401994                 add     esp, 38h
.text:00401997                 lea     eax, [esp+2Ch+var_1C]
.text:0040199B                 push    eax
.text:0040199C                 call    ds:??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z ; std::basic_istream<char,std::char_traits<char>>::operator>>(int &)
.text:004019A2                 cmp     [esp+2Ch+var_1C], ebx
.text:004019A6                 jle     loc_401A60
.text:004019AC                 lea     esp, [esp+0]
.text:004019B0
.text:004019B0 loc_4019B0:                             ; CODE XREF: _main+39A↓j
.text:004019B0                 mov     ecx, ds:?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl(std::basic_ostream<char,std::char_traits<char>> &)
.text:004019B6                 push    ecx
.text:004019B7                 call    ds:clock
.text:004019BD                 mov     edx, [esp+30h+var_1C]
.text:004019C1                 push    eax
.text:004019C2                 push    edx
.text:004019C3                 push    ecx
.text:004019C4                 mov     ecx, ds:?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cerr
.text:004019CA                 push    ebx
.text:004019CB                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
.text:004019D1                 push    eax
.text:004019D2                 call    sub_402A90
.text:004019D7                 add     esp, 8
.text:004019DA                 mov     ecx, eax
.text:004019DC                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
.text:004019E2                 push    eax
.text:004019E3                 call    sub_402CC0
.text:004019E8                 add     esp, 4
.text:004019EB                 mov     ecx, eax
.text:004019ED                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@J@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(long)
.text:004019F3                 mov     ecx, eax
.text:004019F5                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(std::basic_ostream<char,std::char_traits<char>> & (*)(std::basic_ostream<char,std::char_traits<char>> &))
.text:004019FB                 mov     ecx, ds:?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A ; std::basic_istream<char,std::char_traits<char>> std::cin
.text:00401A01                 push    offset unk_4073E0
.text:00401A06                 call    ds:??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z ; std::basic_istream<char,std::char_traits<char>>::operator>>(int &)
.text:00401A0C                 push    offset unk_407758
.text:00401A11                 push    offset Format   ; "%s"
.text:00401A16                 call    ds:scanf
.text:00401A1C                 mov     eax, offset unk_407758
.text:00401A21                 add     esp, 8
.text:00401A24                 lea     esi, [eax+1]
.text:00401A27
.text:00401A27 loc_401A27:                             ; CODE XREF: _main+36C↓j
.text:00401A27                 mov     cl, [eax]
.text:00401A29                 inc     eax
.text:00401A2A                 test    cl, cl
.text:00401A2C                 jnz     short loc_401A27
.text:00401A2E                 sub     eax, esi
.text:00401A30                 mov     edi, eax
.text:00401A32                 mov     eax, offset unk_407758
.text:00401A37                 mov     esi, offset dword_407068
.text:00401A3C                 call    sub_401D30
.text:00401A41                 inc     ebx
.text:00401A42                 push    ebx
.text:00401A43                 push    offset aCaseD   ; "Case #%d: "
.text:00401A48                 call    ds:printf
.text:00401A4E                 add     esp, 8
.text:00401A51                 call    sub_4010F0
.text:00401A56                 cmp     ebx, [esp+2Ch+var_1C]
.text:00401A5A                 jl      loc_4019B0
.text:00401A60
.text:00401A60 loc_401A60:                             ; CODE XREF: _main+2E6↑j
.text:00401A60                 mov     eax, ds:?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl(std::basic_ostream<char,std::char_traits<char>> &)
.text:00401A65                 push    eax
.text:00401A66                 call    ds:clock
.text:00401A6C                 push    eax
.text:00401A6D                 mov     eax, [esp+34h+var_1C]
.text:00401A71                 push    eax
.text:00401A72                 push    ecx
.text:00401A73                 mov     ecx, ds:?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cerr
.text:00401A79                 push    eax
.text:00401A7A                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
.text:00401A80                 push    eax
.text:00401A81                 call    sub_402A90
.text:00401A86                 add     esp, 8
.text:00401A89                 mov     ecx, eax
.text:00401A8B                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
.text:00401A91                 push    eax
.text:00401A92                 call    sub_402CC0
.text:00401A97                 add     esp, 4
.text:00401A9A                 mov     ecx, eax
.text:00401A9C                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@J@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(long)
.text:00401AA2                 mov     ecx, eax
.text:00401AA4                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(std::basic_ostream<char,std::char_traits<char>> & (*)(std::basic_ostream<char,std::char_traits<char>> &))
.text:00401AAA                 xor     eax, eax
.text:00401AAC                 mov     ecx, [esp+2Ch+var_C]
.text:00401AB0                 mov     large fs:0, ecx
.text:00401AB7                 pop     ecx
.text:00401AB8                 pop     edi
.text:00401AB9                 pop     esi
.text:00401ABA                 pop     ebx
.text:00401ABB                 mov     esp, ebp
.text:00401ABD                 pop     ebp
.text:00401ABE                 retn
.text:00401ABE ; } // starts at 4016C0
.text:00401ABE _main           endp
.text:00401ABE
.text:00401ABE ; ---------------------------------------------------------------------------
.text:00401ABF                 align 10h
.text:00401AC0 ; START OF FUNCTION CHUNK FOR sub_401040
.text:00401AC0 ;   ADDITIONAL PARENT FUNCTION _main
.text:00401AC0
.text:00401AC0 loc_401AC0:                             ; CODE XREF: sub_401040+31E3↓j
.text:00401AC0                                         ; sub_401040+31EB↓j ...
.text:00401AC0 ; __unwind { // _main_SEH
.text:00401AC0                 cmp     dword ptr [esi+14h], 10h
.text:00401AC4                 jb      short loc_401AD2
.text:00401AC6                 mov     eax, [esi]
.text:00401AC8                 push    eax
.text:00401AC9                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00401ACF                 add     esp, 4
.text:00401AD2
.text:00401AD2 loc_401AD2:                             ; CODE XREF: sub_401040+A84↑j
.text:00401AD2                 mov     dword ptr [esi+14h], 0Fh
.text:00401AD9                 mov     dword ptr [esi+10h], 0
.text:00401AE0                 mov     byte ptr [esi], 0
.text:00401AE3                 retn
.text:00401AE3 ; } // starts at 401AC0
.text:00401AE3 ; END OF FUNCTION CHUNK FOR sub_401040
.text:00401AE3 ; ---------------------------------------------------------------------------
.text:00401AE4                 align 10h
.text:00401AF0
.text:00401AF0 ; =============== S U B R O U T I N E =======================================
.text:00401AF0
.text:00401AF0 ; Attributes: bp-based frame
.text:00401AF0
.text:00401AF0 sub_401AF0      proc near               ; CODE XREF: sub_401040+59↑p
.text:00401AF0
.text:00401AF0 var_8           = dword ptr -8
.text:00401AF0 var_4           = dword ptr -4
.text:00401AF0
.text:00401AF0                 push    ebp
.text:00401AF1                 mov     ebp, esp
.text:00401AF3                 mov     ecx, dword_42250C
.text:00401AF9                 sub     esp, 8
.text:00401AFC                 push    esi
.text:00401AFD                 mov     esi, eax
.text:00401AFF                 mov     eax, [ecx+4]
.text:00401B02                 cmp     byte ptr [eax+15h], 0
.text:00401B06                 push    edi
.text:00401B07                 mov     edi, ecx
.text:00401B09                 jnz     short loc_401B24
.text:00401B0B                 mov     edx, [esi]
.text:00401B0D                 lea     ecx, [ecx+0]
.text:00401B10
.text:00401B10 loc_401B10:                             ; CODE XREF: sub_401AF0+32↓j
.text:00401B10                 cmp     [eax+0Ch], edx
.text:00401B13                 jge     short loc_401B1A
.text:00401B15                 mov     eax, [eax+8]
.text:00401B18                 jmp     short loc_401B1E
.text:00401B1A ; ---------------------------------------------------------------------------
.text:00401B1A
.text:00401B1A loc_401B1A:                             ; CODE XREF: sub_401AF0+23↑j
.text:00401B1A                 mov     edi, eax
.text:00401B1C                 mov     eax, [eax]
.text:00401B1E
.text:00401B1E loc_401B1E:                             ; CODE XREF: sub_401AF0+28↑j
.text:00401B1E                 cmp     byte ptr [eax+15h], 0
.text:00401B22                 jz      short loc_401B10
.text:00401B24
.text:00401B24 loc_401B24:                             ; CODE XREF: sub_401AF0+19↑j
.text:00401B24                 cmp     edi, ecx
.text:00401B26                 jz      short loc_401B2F
.text:00401B28                 mov     eax, [esi]
.text:00401B2A                 cmp     eax, [edi+0Ch]
.text:00401B2D                 jge     short loc_401B5A
.text:00401B2F
.text:00401B2F loc_401B2F:                             ; CODE XREF: sub_401AF0+36↑j
.text:00401B2F                 mov     ecx, [esi]
.text:00401B31                 push    ebx
.text:00401B32                 lea     esi, [ebp+var_8]
.text:00401B35                 mov     [ebp+var_8], ecx
.text:00401B38                 mov     [ebp+var_4], 0
.text:00401B3F                 call    sub_403750
.text:00401B44                 push    edi
.text:00401B45                 lea     ebx, [ebp+var_4]
.text:00401B48                 call    sub_402EE0
.text:00401B4D                 mov     eax, [ebp+var_4]
.text:00401B50                 pop     ebx
.text:00401B51                 pop     edi
.text:00401B52                 add     eax, 10h
.text:00401B55                 pop     esi
.text:00401B56                 mov     esp, ebp
.text:00401B58                 pop     ebp
.text:00401B59                 retn
.text:00401B5A ; ---------------------------------------------------------------------------
.text:00401B5A
.text:00401B5A loc_401B5A:                             ; CODE XREF: sub_401AF0+3D↑j
.text:00401B5A                 lea     eax, [edi+10h]
.text:00401B5D                 pop     edi
.text:00401B5E                 pop     esi
.text:00401B5F                 mov     esp, ebp
.text:00401B61                 pop     ebp
.text:00401B62                 retn
.text:00401B62 sub_401AF0      endp
.text:00401B62
.text:00401B62 ; ---------------------------------------------------------------------------
.text:00401B63                 align 10h
.text:00401B70
.text:00401B70 ; =============== S U B R O U T I N E =======================================
.text:00401B70
.text:00401B70 ; Attributes: bp-based frame
.text:00401B70
.text:00401B70 sub_401B70      proc near               ; CODE XREF: sub_4010F0+44A↑p
.text:00401B70                                         ; sub_4010F0+454↑p
.text:00401B70
.text:00401B70 var_8           = dword ptr -8
.text:00401B70 var_4           = dword ptr -4
.text:00401B70
.text:00401B70                 push    ebp
.text:00401B71                 mov     ebp, esp
.text:00401B73                 mov     ecx, dword_42250C
.text:00401B79                 sub     esp, 0Ch
.text:00401B7C                 push    ebx
.text:00401B7D                 push    esi
.text:00401B7E                 mov     esi, eax
.text:00401B80                 mov     eax, [ecx+4]
.text:00401B83                 cmp     byte ptr [eax+15h], 0
.text:00401B87                 push    edi
.text:00401B88                 mov     edi, ecx
.text:00401B8A                 jnz     short loc_401BA4
.text:00401B8C                 mov     edx, [esi]
.text:00401B8E                 mov     edi, edi
.text:00401B90
.text:00401B90 loc_401B90:                             ; CODE XREF: sub_401B70+32↓j
.text:00401B90                 cmp     [eax+0Ch], edx
.text:00401B93                 jge     short loc_401B9A
.text:00401B95                 mov     eax, [eax+8]
.text:00401B98                 jmp     short loc_401B9E
.text:00401B9A ; ---------------------------------------------------------------------------
.text:00401B9A
.text:00401B9A loc_401B9A:                             ; CODE XREF: sub_401B70+23↑j
.text:00401B9A                 mov     edi, eax
.text:00401B9C                 mov     eax, [eax]
.text:00401B9E
.text:00401B9E loc_401B9E:                             ; CODE XREF: sub_401B70+28↑j
.text:00401B9E                 cmp     byte ptr [eax+15h], 0
.text:00401BA2                 jz      short loc_401B90
.text:00401BA4
.text:00401BA4 loc_401BA4:                             ; CODE XREF: sub_401B70+1A↑j
.text:00401BA4                 cmp     edi, ecx
.text:00401BA6                 jz      short loc_401BAF
.text:00401BA8                 mov     eax, [esi]
.text:00401BAA                 cmp     eax, [edi+0Ch]
.text:00401BAD                 jge     short loc_401BD9
.text:00401BAF
.text:00401BAF loc_401BAF:                             ; CODE XREF: sub_401B70+36↑j
.text:00401BAF                 mov     ecx, [esi]
.text:00401BB1                 lea     esi, [ebp+var_8]
.text:00401BB4                 mov     [ebp+var_8], ecx
.text:00401BB7                 mov     [ebp+var_4], 0
.text:00401BBE                 call    sub_403750
.text:00401BC3                 push    edi
.text:00401BC4                 lea     ebx, [ebp+var_4]
.text:00401BC7                 call    sub_402EE0
.text:00401BCC                 mov     eax, [ebp+var_4]
.text:00401BCF                 add     eax, 10h
.text:00401BD2                 pop     edi
.text:00401BD3                 pop     esi
.text:00401BD4                 pop     ebx
.text:00401BD5                 mov     esp, ebp
.text:00401BD7                 pop     ebp
.text:00401BD8                 retn
.text:00401BD9 ; ---------------------------------------------------------------------------
.text:00401BD9
.text:00401BD9 loc_401BD9:                             ; CODE XREF: sub_401B70+3D↑j
.text:00401BD9                 lea     eax, [edi+10h]
.text:00401BDC                 pop     edi
.text:00401BDD                 pop     esi
.text:00401BDE                 pop     ebx
.text:00401BDF                 mov     esp, ebp
.text:00401BE1                 pop     ebp
.text:00401BE2                 retn
.text:00401BE2 sub_401B70      endp
.text:00401BE2
.text:00401BE2 ; ---------------------------------------------------------------------------
.text:00401BE3                 align 10h
.text:00401BF0
.text:00401BF0 ; =============== S U B R O U T I N E =======================================
.text:00401BF0
.text:00401BF0
.text:00401BF0 sub_401BF0      proc near               ; CODE XREF: sub_4010F0+C↑p
.text:00401BF0                                         ; sub_401F20+17↓p
.text:00401BF0                 mov     eax, dword_42251C
.text:00401BF5                 push    esi
.text:00401BF6                 push    edi
.text:00401BF7                 mov     edi, [eax+4]
.text:00401BFA                 cmp     byte ptr [edi+15h], 0
.text:00401BFE                 mov     esi, edi
.text:00401C00                 jnz     short loc_401C34
.text:00401C02                 push    ebx
.text:00401C03                 mov     ebx, ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00401C09                 lea     esp, [esp+0]
.text:00401C10
.text:00401C10 loc_401C10:                             ; CODE XREF: sub_401BF0+3C↓j
.text:00401C10                 mov     eax, [esi+8]
.text:00401C13                 push    eax
.text:00401C14                 mov     ecx, offset unk_422518
.text:00401C19                 call    sub_401C70
.text:00401C1E                 mov     esi, [esi]
.text:00401C20                 push    edi
.text:00401C21                 call    ebx ; operator delete(void *) ; operator delete(void *)
.text:00401C23                 add     esp, 4
.text:00401C26                 cmp     byte ptr [esi+15h], 0
.text:00401C2A                 mov     edi, esi
.text:00401C2C                 jz      short loc_401C10
.text:00401C2E                 mov     eax, dword_42251C
.text:00401C33                 pop     ebx
.text:00401C34
.text:00401C34 loc_401C34:                             ; CODE XREF: sub_401BF0+10↑j
.text:00401C34                 mov     [eax+4], eax
.text:00401C37                 mov     eax, dword_42251C
.text:00401C3C                 mov     [eax], eax
.text:00401C3E                 mov     eax, dword_42251C
.text:00401C43                 pop     edi
.text:00401C44                 mov     [eax+8], eax
.text:00401C47                 mov     dword_422520, 0
.text:00401C51                 pop     esi
.text:00401C52                 retn
.text:00401C52 sub_401BF0      endp
.text:00401C52
.text:00401C52 ; ---------------------------------------------------------------------------
.text:00401C53                 align 10h
.text:00401C60 ; START OF FUNCTION CHUNK FOR sub_404400
.text:00401C60
.text:00401C60 loc_401C60:                             ; CODE XREF: sub_404400:loc_4042D0↓j
.text:00401C60 ; __unwind { // SEH_404400
.text:00401C60                 mov     eax, dword_42250C
.text:00401C65                 push    eax
.text:00401C66                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00401C6C                 pop     ecx
.text:00401C6D                 retn
.text:00401C6D ; } // starts at 401C60
.text:00401C6D ; END OF FUNCTION CHUNK FOR sub_404400
.text:00401C6D ; ---------------------------------------------------------------------------
.text:00401C6E                 align 10h
.text:00401C70
.text:00401C70 ; =============== S U B R O U T I N E =======================================
.text:00401C70
.text:00401C70 ; Attributes: bp-based frame
.text:00401C70
.text:00401C70 sub_401C70      proc near               ; CODE XREF: sub_401BF0+29↑p
.text:00401C70                                         ; sub_401C70+19↓p ...
.text:00401C70
.text:00401C70 arg_0           = dword ptr  8
.text:00401C70
.text:00401C70                 push    ebp
.text:00401C71                 mov     ebp, esp
.text:00401C73                 push    ebx
.text:00401C74                 push    esi
.text:00401C75                 push    edi
.text:00401C76                 mov     edi, [ebp+arg_0]
.text:00401C79                 cmp     byte ptr [edi+15h], 0
.text:00401C7D                 mov     ebx, ecx
.text:00401C7F                 mov     esi, edi
.text:00401C81                 jnz     short loc_401CA2
.text:00401C83
.text:00401C83 loc_401C83:                             ; CODE XREF: sub_401C70+30↓j
.text:00401C83                 mov     eax, [esi+8]
.text:00401C86                 push    eax
.text:00401C87                 mov     ecx, ebx
.text:00401C89                 call    sub_401C70
.text:00401C8E                 mov     esi, [esi]
.text:00401C90                 push    edi
.text:00401C91                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00401C97                 add     esp, 4
.text:00401C9A                 cmp     byte ptr [esi+15h], 0
.text:00401C9E                 mov     edi, esi
.text:00401CA0                 jz      short loc_401C83
.text:00401CA2
.text:00401CA2 loc_401CA2:                             ; CODE XREF: sub_401C70+11↑j
.text:00401CA2                 pop     edi
.text:00401CA3                 pop     esi
.text:00401CA4                 pop     ebx
.text:00401CA5                 pop     ebp
.text:00401CA6                 retn    4
.text:00401CA6 sub_401C70      endp
.text:00401CA6
.text:00401CA6 ; ---------------------------------------------------------------------------
.text:00401CA9                 align 10h
.text:00401CB0 ; START OF FUNCTION CHUNK FOR sub_404490
.text:00401CB0
.text:00401CB0 loc_401CB0:                             ; CODE XREF: sub_404490:loc_4042B0↓j
.text:00401CB0 ; __unwind { // SEH_404490
.text:00401CB0                 mov     eax, dword_42251C
.text:00401CB5                 push    eax
.text:00401CB6                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00401CBC                 pop     ecx
.text:00401CBD                 retn
.text:00401CBD ; } // starts at 401CB0
.text:00401CBD ; END OF FUNCTION CHUNK FOR sub_404490
.text:00401CBD ; ---------------------------------------------------------------------------
.text:00401CBE                 align 10h
.text:00401CC0
.text:00401CC0 ; =============== S U B R O U T I N E =======================================
.text:00401CC0
.text:00401CC0 ; Attributes: bp-based frame
.text:00401CC0
.text:00401CC0 sub_401CC0      proc near               ; CODE XREF: sub_402CC0+14CC↓p
.text:00401CC0                                         ; sub_402A90+173C↓p
.text:00401CC0
.text:00401CC0 var_C           = dword ptr -0Ch
.text:00401CC0 var_4           = dword ptr -4
.text:00401CC0 arg_0           = dword ptr  8
.text:00401CC0 arg_4           = dword ptr  0Ch
.text:00401CC0
.text:00401CC0 ; FUNCTION CHUNK AT .text:00402070 SIZE 00000019 BYTES
.text:00401CC0 ; FUNCTION CHUNK AT .text:00404150 SIZE 00000023 BYTES
.text:00401CC0
.text:00401CC0 ; __unwind { // SEH_401CC0
.text:00401CC0                 push    ebp
.text:00401CC1                 mov     ebp, esp
.text:00401CC3                 push    0FFFFFFFFh
.text:00401CC5                 push    offset SEH_401CC0
.text:00401CCA                 mov     eax, large fs:0
.text:00401CD0                 push    eax
.text:00401CD1                 push    esi
.text:00401CD2                 mov     eax, ___security_cookie
.text:00401CD7                 xor     eax, ebp
.text:00401CD9                 push    eax
.text:00401CDA                 lea     eax, [ebp+var_C]
.text:00401CDD                 mov     large fs:0, eax
.text:00401CE3                 mov     esi, [ebp+arg_0]
.text:00401CE6 ;   try {
.text:00401CE6                 mov     [ebp+var_4], 0
.text:00401CED                 call    ds:?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
.text:00401CF3                 test    al, al
.text:00401CF5                 jnz     short loc_401CFF
.text:00401CF7                 mov     ecx, [esi]
.text:00401CF9                 call    ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
.text:00401CF9 ;   } // starts at 401CE6
.text:00401CFF
.text:00401CFF loc_401CFF:                             ; CODE XREF: sub_401CC0+35↑j
.text:00401CFF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00401D06                 mov     eax, [esi]
.text:00401D08                 mov     ecx, [eax]
.text:00401D0A                 mov     edx, [ecx+4]
.text:00401D0D                 mov     eax, [edx+eax+38h]
.text:00401D11                 test    eax, eax
.text:00401D13                 jz      short loc_401D1E
.text:00401D15                 mov     edx, [eax]
.text:00401D17                 mov     ecx, eax
.text:00401D19                 mov     eax, [edx+8]
.text:00401D1C                 call    eax
.text:00401D1E
.text:00401D1E loc_401D1E:                             ; CODE XREF: sub_401CC0+53↑j
.text:00401D1E                 mov     ecx, [ebp+var_C]
.text:00401D21                 mov     large fs:0, ecx
.text:00401D28                 pop     ecx
.text:00401D29                 pop     esi
.text:00401D2A                 mov     esp, ebp
.text:00401D2C                 pop     ebp
.text:00401D2D                 retn    4
.text:00401D2D ; } // starts at 401CC0
.text:00401D2D sub_401CC0      endp
.text:00401D2D
.text:00401D30
.text:00401D30 ; =============== S U B R O U T I N E =======================================
.text:00401D30
.text:00401D30
.text:00401D30 sub_401D30      proc near               ; CODE XREF: _main+4F↑p
.text:00401D30                                         ; _main+70↑p ...
.text:00401D30                 push    ebx
.text:00401D31                 mov     ebx, eax
.text:00401D33                 test    ebx, ebx
.text:00401D35                 jz      short loc_401D82
.text:00401D37                 mov     ecx, [esi+14h]
.text:00401D3A                 cmp     ecx, 10h
.text:00401D3D                 jb      short loc_401D43
.text:00401D3F                 mov     eax, [esi]
.text:00401D41                 jmp     short loc_401D45
.text:00401D43 ; ---------------------------------------------------------------------------
.text:00401D43
.text:00401D43 loc_401D43:                             ; CODE XREF: sub_401D30+D↑j
.text:00401D43                 mov     eax, esi
.text:00401D45
.text:00401D45 loc_401D45:                             ; CODE XREF: sub_401D30+11↑j
.text:00401D45                 cmp     ebx, eax
.text:00401D47                 jb      short loc_401D82
.text:00401D49                 cmp     ecx, 10h
.text:00401D4C                 jb      short loc_401D52
.text:00401D4E                 mov     eax, [esi]
.text:00401D50                 jmp     short loc_401D54
.text:00401D52 ; ---------------------------------------------------------------------------
.text:00401D52
.text:00401D52 loc_401D52:                             ; CODE XREF: sub_401D30+1C↑j
.text:00401D52                 mov     eax, esi
.text:00401D54
.text:00401D54 loc_401D54:                             ; CODE XREF: sub_401D30+20↑j
.text:00401D54                 mov     edx, [esi+10h]
.text:00401D57                 add     edx, eax
.text:00401D59                 cmp     edx, ebx
.text:00401D5B                 jbe     short loc_401D82
.text:00401D5D                 cmp     ecx, 10h
.text:00401D60                 jb      short loc_401D72
.text:00401D62                 mov     eax, [esi]
.text:00401D64                 sub     ebx, eax
.text:00401D66                 push    esi             ; int
.text:00401D67                 mov     eax, edi
.text:00401D69                 mov     ecx, esi        ; int
.text:00401D6B                 call    sub_402090
.text:00401D70                 pop     ebx
.text:00401D71                 retn
.text:00401D72 ; ---------------------------------------------------------------------------
.text:00401D72
.text:00401D72 loc_401D72:                             ; CODE XREF: sub_401D30+30↑j
.text:00401D72                 mov     eax, esi
.text:00401D74                 sub     ebx, eax
.text:00401D76                 push    esi             ; int
.text:00401D77                 mov     eax, edi
.text:00401D79                 mov     ecx, esi        ; int
.text:00401D7B                 call    sub_402090
.text:00401D80                 pop     ebx
.text:00401D81                 retn
.text:00401D82 ; ---------------------------------------------------------------------------
.text:00401D82
.text:00401D82 loc_401D82:                             ; CODE XREF: sub_401D30+5↑j
.text:00401D82                                         ; sub_401D30+17↑j ...
.text:00401D82                 cmp     edi, 0FFFFFFFEh
.text:00401D85                 jbe     short loc_401D92
.text:00401D87                 push    offset aStringTooLong ; "string too long"
.text:00401D8C                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:00401D92
.text:00401D92 loc_401D92:                             ; CODE XREF: sub_401D30+55↑j
.text:00401D92                 mov     eax, [esi+14h]
.text:00401D95                 cmp     eax, edi
.text:00401D97                 jnb     short loc_401DB2
.text:00401D99                 mov     eax, [esi+10h]
.text:00401D9C                 push    eax             ; Size
.text:00401D9D                 push    edi             ; Dst
.text:00401D9E                 push    esi             ; int
.text:00401D9F                 call    sub_402720
.text:00401DA4                 test    edi, edi
.text:00401DA6                 jz      short loc_401DF4
.text:00401DA8
.text:00401DA8 loc_401DA8:                             ; CODE XREF: sub_401D30+84↓j
.text:00401DA8                 cmp     dword ptr [esi+14h], 10h
.text:00401DAC                 jb      short loc_401DCE
.text:00401DAE                 mov     eax, [esi]
.text:00401DB0                 jmp     short loc_401DD0
.text:00401DB2 ; ---------------------------------------------------------------------------
.text:00401DB2
.text:00401DB2 loc_401DB2:                             ; CODE XREF: sub_401D30+67↑j
.text:00401DB2                 test    edi, edi
.text:00401DB4                 jnz     short loc_401DA8
.text:00401DB6                 mov     [esi+10h], edi
.text:00401DB9                 cmp     eax, 10h
.text:00401DBC                 jb      short loc_401DC7
.text:00401DBE                 mov     eax, [esi]
.text:00401DC0                 mov     byte ptr [eax], 0
.text:00401DC3                 mov     eax, esi
.text:00401DC5                 pop     ebx
.text:00401DC6                 retn
.text:00401DC7 ; ---------------------------------------------------------------------------
.text:00401DC7
.text:00401DC7 loc_401DC7:                             ; CODE XREF: sub_401D30+8C↑j
.text:00401DC7                 mov     eax, esi
.text:00401DC9                 mov     byte ptr [eax], 0
.text:00401DCC                 pop     ebx
.text:00401DCD                 retn
.text:00401DCE ; ---------------------------------------------------------------------------
.text:00401DCE
.text:00401DCE loc_401DCE:                             ; CODE XREF: sub_401D30+7C↑j
.text:00401DCE                 mov     eax, esi
.text:00401DD0
.text:00401DD0 loc_401DD0:                             ; CODE XREF: sub_401D30+80↑j
.text:00401DD0                 push    edi             ; Size
.text:00401DD1                 push    ebx             ; Src
.text:00401DD2                 push    eax             ; Dst
.text:00401DD3                 call    memcpy
.text:00401DD8                 add     esp, 0Ch
.text:00401DDB                 cmp     dword ptr [esi+14h], 10h
.text:00401DDF                 mov     [esi+10h], edi
.text:00401DE2                 jb      short loc_401DEE
.text:00401DE4                 mov     eax, [esi]
.text:00401DE6                 mov     byte ptr [eax+edi], 0
.text:00401DEA                 mov     eax, esi
.text:00401DEC                 pop     ebx
.text:00401DED                 retn
.text:00401DEE ; ---------------------------------------------------------------------------
.text:00401DEE
.text:00401DEE loc_401DEE:                             ; CODE XREF: sub_401D30+B2↑j
.text:00401DEE                 mov     eax, esi
.text:00401DF0                 mov     byte ptr [eax+edi], 0
.text:00401DF4
.text:00401DF4 loc_401DF4:                             ; CODE XREF: sub_401D30+76↑j
.text:00401DF4                 mov     eax, esi
.text:00401DF6                 pop     ebx
.text:00401DF7                 retn
.text:00401DF7 sub_401D30      endp
.text:00401DF7
.text:00401DF7 ; ---------------------------------------------------------------------------
.text:00401DF8                 align 10h
.text:00401E00
.text:00401E00 ; =============== S U B R O U T I N E =======================================
.text:00401E00
.text:00401E00 ; Attributes: bp-based frame
.text:00401E00
.text:00401E00 sub_401E00      proc near               ; CODE XREF: sub_404400+37↓p
.text:00401E00
.text:00401E00 var_4           = byte ptr -4
.text:00401E00 arg_0           = dword ptr  8
.text:00401E00 arg_4           = dword ptr  0Ch
.text:00401E00
.text:00401E00                 push    ebp
.text:00401E01                 mov     ebp, esp
.text:00401E03                 push    ecx
.text:00401E04                 mov     ecx, [ebp+arg_0]
.text:00401E07                 mov     eax, dword_42250C
.text:00401E0C                 mov     edx, [ebp+arg_4]
.text:00401E0F                 cmp     ecx, [eax]
.text:00401E11                 jnz     short loc_401E2D
.text:00401E13                 cmp     edx, eax
.text:00401E15                 jnz     short loc_401E2D
.text:00401E17                 call    sub_4023D0
.text:00401E1C                 mov     eax, dword_42250C
.text:00401E21                 mov     ecx, [eax]
.text:00401E23                 mov     eax, esi
.text:00401E25                 mov     [esi], ecx
.text:00401E27                 mov     esp, ebp
.text:00401E29                 pop     ebp
.text:00401E2A                 retn    8
.text:00401E2D ; ---------------------------------------------------------------------------
.text:00401E2D
.text:00401E2D loc_401E2D:                             ; CODE XREF: sub_401E00+11↑j
.text:00401E2D                                         ; sub_401E00+15↑j
.text:00401E2D                 cmp     ecx, edx
.text:00401E2F                 jz      short loc_401E90
.text:00401E31
.text:00401E31 loc_401E31:                             ; CODE XREF: sub_401E00+8E↓j
.text:00401E31                 cmp     byte ptr [ecx+15h], 0
.text:00401E35                 mov     edx, ecx
.text:00401E37                 jnz     short loc_401E7E
.text:00401E39                 mov     eax, [ecx+8]
.text:00401E3C                 cmp     byte ptr [eax+15h], 0
.text:00401E40                 jnz     short loc_401E5F
.text:00401E42                 mov     ecx, eax
.text:00401E44                 mov     eax, [ecx]
.text:00401E46                 cmp     byte ptr [eax+15h], 0
.text:00401E4A                 jnz     short loc_401E5A
.text:00401E4C                 lea     esp, [esp+0]
.text:00401E50
.text:00401E50 loc_401E50:                             ; CODE XREF: sub_401E00+58↓j
.text:00401E50                 mov     ecx, eax
.text:00401E52                 mov     eax, [ecx]
.text:00401E54                 cmp     byte ptr [eax+15h], 0
.text:00401E58                 jz      short loc_401E50
.text:00401E5A
.text:00401E5A loc_401E5A:                             ; CODE XREF: sub_401E00+4A↑j
.text:00401E5A                 mov     [ebp+arg_0], ecx
.text:00401E5D                 jmp     short loc_401E7E
.text:00401E5F ; ---------------------------------------------------------------------------
.text:00401E5F
.text:00401E5F loc_401E5F:                             ; CODE XREF: sub_401E00+40↑j
.text:00401E5F                 mov     eax, [ecx+4]
.text:00401E62                 cmp     byte ptr [eax+15h], 0
.text:00401E66                 jnz     short loc_401E7B
.text:00401E68
.text:00401E68 loc_401E68:                             ; CODE XREF: sub_401E00+79↓j
.text:00401E68                 cmp     ecx, [eax+8]
.text:00401E6B                 jnz     short loc_401E7B
.text:00401E6D                 mov     ecx, eax
.text:00401E6F                 mov     [ebp+arg_0], ecx
.text:00401E72                 mov     eax, [eax+4]
.text:00401E75                 cmp     byte ptr [eax+15h], 0
.text:00401E79                 jz      short loc_401E68
.text:00401E7B
.text:00401E7B loc_401E7B:                             ; CODE XREF: sub_401E00+66↑j
.text:00401E7B                                         ; sub_401E00+6B↑j
.text:00401E7B                 mov     [ebp+arg_0], eax
.text:00401E7E
.text:00401E7E loc_401E7E:                             ; CODE XREF: sub_401E00+37↑j
.text:00401E7E                                         ; sub_401E00+5D↑j
.text:00401E7E                 push    edx
.text:00401E7F                 lea     edx, [ebp+var_4]
.text:00401E82                 push    edx
.text:00401E83                 call    sub_402170
.text:00401E88                 mov     ecx, [ebp+arg_0]
.text:00401E8B                 cmp     ecx, [ebp+arg_4]
.text:00401E8E                 jnz     short loc_401E31
.text:00401E90
.text:00401E90 loc_401E90:                             ; CODE XREF: sub_401E00+2F↑j
.text:00401E90                 mov     eax, esi
.text:00401E92                 mov     [esi], ecx
.text:00401E94                 mov     esp, ebp
.text:00401E96                 pop     ebp
.text:00401E97                 retn    8
.text:00401E97 sub_401E00      endp
.text:00401E97
.text:00401E97 ; ---------------------------------------------------------------------------
.text:00401E9A                 align 10h
.text:00401EA0
.text:00401EA0 ; =============== S U B R O U T I N E =======================================
.text:00401EA0
.text:00401EA0 ; Attributes: bp-based frame
.text:00401EA0
.text:00401EA0 sub_401EA0      proc near               ; CODE XREF: sub_4010F0+41E↑p
.text:00401EA0
.text:00401EA0 arg_0           = dword ptr  8
.text:00401EA0 arg_4           = dword ptr  0Ch
.text:00401EA0
.text:00401EA0                 push    ebp
.text:00401EA1                 mov     ebp, esp
.text:00401EA3                 mov     edx, dword_42250C
.text:00401EA9                 push    ebx
.text:00401EAA                 mov     ebx, [edx+4]
.text:00401EAD                 mov     ecx, ebx
.text:00401EAF                 cmp     byte ptr [ecx+15h], 0
.text:00401EB3                 push    esi
.text:00401EB4                 mov     eax, edx
.text:00401EB6                 jnz     short loc_401EE3
.text:00401EB8                 mov     esi, [ebp+arg_4]
.text:00401EBB                 push    edi
.text:00401EBC                 mov     edi, [esi]
.text:00401EBE                 mov     edi, edi
.text:00401EC0
.text:00401EC0 loc_401EC0:                             ; CODE XREF: sub_401EA0+40↓j
.text:00401EC0                 mov     esi, [ecx+0Ch]
.text:00401EC3                 cmp     esi, edi
.text:00401EC5                 jge     short loc_401ECC
.text:00401EC7                 mov     ecx, [ecx+8]
.text:00401ECA                 jmp     short loc_401EDC
.text:00401ECC ; ---------------------------------------------------------------------------
.text:00401ECC
.text:00401ECC loc_401ECC:                             ; CODE XREF: sub_401EA0+25↑j
.text:00401ECC                 cmp     byte ptr [edx+15h], 0
.text:00401ED0                 jz      short loc_401ED8
.text:00401ED2                 cmp     edi, esi
.text:00401ED4                 jge     short loc_401ED8
.text:00401ED6                 mov     edx, ecx
.text:00401ED8
.text:00401ED8 loc_401ED8:                             ; CODE XREF: sub_401EA0+30↑j
.text:00401ED8                                         ; sub_401EA0+34↑j
.text:00401ED8                 mov     eax, ecx
.text:00401EDA                 mov     ecx, [ecx]
.text:00401EDC
.text:00401EDC loc_401EDC:                             ; CODE XREF: sub_401EA0+2A↑j
.text:00401EDC                 cmp     byte ptr [ecx+15h], 0
.text:00401EE0                 jz      short loc_401EC0
.text:00401EE2                 pop     edi
.text:00401EE3
.text:00401EE3 loc_401EE3:                             ; CODE XREF: sub_401EA0+16↑j
.text:00401EE3                 cmp     byte ptr [edx+15h], 0
.text:00401EE7                 mov     ecx, ebx
.text:00401EE9                 jnz     short loc_401EED
.text:00401EEB                 mov     ecx, [edx]
.text:00401EED
.text:00401EED loc_401EED:                             ; CODE XREF: sub_401EA0+49↑j
.text:00401EED                 cmp     byte ptr [ecx+15h], 0
.text:00401EF1                 jnz     short loc_401F0C
.text:00401EF3                 mov     esi, [ebp+arg_4]
.text:00401EF6                 mov     esi, [esi]
.text:00401EF8
.text:00401EF8 loc_401EF8:                             ; CODE XREF: sub_401EA0+6A↓j
.text:00401EF8                 cmp     esi, [ecx+0Ch]
.text:00401EFB                 jge     short loc_401F03
.text:00401EFD                 mov     edx, ecx
.text:00401EFF                 mov     ecx, [ecx]
.text:00401F01                 jmp     short loc_401F06
.text:00401F03 ; ---------------------------------------------------------------------------
.text:00401F03
.text:00401F03 loc_401F03:                             ; CODE XREF: sub_401EA0+5B↑j
.text:00401F03                 mov     ecx, [ecx+8]
.text:00401F06
.text:00401F06 loc_401F06:                             ; CODE XREF: sub_401EA0+61↑j
.text:00401F06                 cmp     byte ptr [ecx+15h], 0
.text:00401F0A                 jz      short loc_401EF8
.text:00401F0C
.text:00401F0C loc_401F0C:                             ; CODE XREF: sub_401EA0+51↑j
.text:00401F0C                 mov     ecx, [ebp+arg_0]
.text:00401F0F                 pop     esi
.text:00401F10                 mov     [ecx], eax
.text:00401F12                 mov     [ecx+4], edx
.text:00401F15                 mov     eax, ecx
.text:00401F17                 pop     ebx
.text:00401F18                 pop     ebp
.text:00401F19                 retn    8
.text:00401F19 sub_401EA0      endp
.text:00401F19
.text:00401F19 ; ---------------------------------------------------------------------------
.text:00401F1C                 align 10h
.text:00401F20
.text:00401F20 ; =============== S U B R O U T I N E =======================================
.text:00401F20
.text:00401F20 ; Attributes: bp-based frame
.text:00401F20
.text:00401F20 sub_401F20      proc near               ; CODE XREF: sub_404490+37↓p
.text:00401F20
.text:00401F20 var_4           = byte ptr -4
.text:00401F20 arg_0           = dword ptr  8
.text:00401F20 arg_4           = dword ptr  0Ch
.text:00401F20
.text:00401F20                 push    ebp
.text:00401F21                 mov     ebp, esp
.text:00401F23                 push    ecx
.text:00401F24                 mov     ecx, [ebp+arg_0]
.text:00401F27                 mov     eax, dword_42251C
.text:00401F2C                 mov     edx, [ebp+arg_4]
.text:00401F2F                 cmp     ecx, [eax]
.text:00401F31                 jnz     short loc_401F4D
.text:00401F33                 cmp     edx, eax
.text:00401F35                 jnz     short loc_401F4D
.text:00401F37                 call    sub_401BF0
.text:00401F3C                 mov     eax, dword_42251C
.text:00401F41                 mov     ecx, [eax]
.text:00401F43                 mov     eax, esi
.text:00401F45                 mov     [esi], ecx
.text:00401F47                 mov     esp, ebp
.text:00401F49                 pop     ebp
.text:00401F4A                 retn    8
.text:00401F4D ; ---------------------------------------------------------------------------
.text:00401F4D
.text:00401F4D loc_401F4D:                             ; CODE XREF: sub_401F20+11↑j
.text:00401F4D                                         ; sub_401F20+15↑j
.text:00401F4D                 cmp     ecx, edx
.text:00401F4F                 jz      short loc_401FB0
.text:00401F51
.text:00401F51 loc_401F51:                             ; CODE XREF: sub_401F20+8E↓j
.text:00401F51                 cmp     byte ptr [ecx+15h], 0
.text:00401F55                 mov     edx, ecx
.text:00401F57                 jnz     short loc_401F9E
.text:00401F59                 mov     eax, [ecx+8]
.text:00401F5C                 cmp     byte ptr [eax+15h], 0
.text:00401F60                 jnz     short loc_401F7F
.text:00401F62                 mov     ecx, eax
.text:00401F64                 mov     eax, [ecx]
.text:00401F66                 cmp     byte ptr [eax+15h], 0
.text:00401F6A                 jnz     short loc_401F7A
.text:00401F6C                 lea     esp, [esp+0]
.text:00401F70
.text:00401F70 loc_401F70:                             ; CODE XREF: sub_401F20+58↓j
.text:00401F70                 mov     ecx, eax
.text:00401F72                 mov     eax, [ecx]
.text:00401F74                 cmp     byte ptr [eax+15h], 0
.text:00401F78                 jz      short loc_401F70
.text:00401F7A
.text:00401F7A loc_401F7A:                             ; CODE XREF: sub_401F20+4A↑j
.text:00401F7A                 mov     [ebp+arg_0], ecx
.text:00401F7D                 jmp     short loc_401F9E
.text:00401F7F ; ---------------------------------------------------------------------------
.text:00401F7F
.text:00401F7F loc_401F7F:                             ; CODE XREF: sub_401F20+40↑j
.text:00401F7F                 mov     eax, [ecx+4]
.text:00401F82                 cmp     byte ptr [eax+15h], 0
.text:00401F86                 jnz     short loc_401F9B
.text:00401F88
.text:00401F88 loc_401F88:                             ; CODE XREF: sub_401F20+79↓j
.text:00401F88                 cmp     ecx, [eax+8]
.text:00401F8B                 jnz     short loc_401F9B
.text:00401F8D                 mov     ecx, eax
.text:00401F8F                 mov     [ebp+arg_0], ecx
.text:00401F92                 mov     eax, [eax+4]
.text:00401F95                 cmp     byte ptr [eax+15h], 0
.text:00401F99                 jz      short loc_401F88
.text:00401F9B
.text:00401F9B loc_401F9B:                             ; CODE XREF: sub_401F20+66↑j
.text:00401F9B                                         ; sub_401F20+6B↑j
.text:00401F9B                 mov     [ebp+arg_0], eax
.text:00401F9E
.text:00401F9E loc_401F9E:                             ; CODE XREF: sub_401F20+37↑j
.text:00401F9E                                         ; sub_401F20+5D↑j
.text:00401F9E                 push    edx
.text:00401F9F                 lea     edx, [ebp+var_4]
.text:00401FA2                 push    edx
.text:00401FA3                 call    sub_402440
.text:00401FA8                 mov     ecx, [ebp+arg_0]
.text:00401FAB                 cmp     ecx, [ebp+arg_4]
.text:00401FAE                 jnz     short loc_401F51
.text:00401FB0
.text:00401FB0 loc_401FB0:                             ; CODE XREF: sub_401F20+2F↑j
.text:00401FB0                 mov     eax, esi
.text:00401FB2                 mov     [esi], ecx
.text:00401FB4                 mov     esp, ebp
.text:00401FB6                 pop     ebp
.text:00401FB7                 retn    8
.text:00401FB7 sub_401F20      endp
.text:00401FB7
.text:00401FB7 ; ---------------------------------------------------------------------------
.text:00401FBA                 align 10h
.text:00401FC0
.text:00401FC0 ; =============== S U B R O U T I N E =======================================
.text:00401FC0
.text:00401FC0 ; Attributes: bp-based frame
.text:00401FC0
.text:00401FC0 sub_401FC0      proc near               ; CODE XREF: sub_4010F0+A8↑p
.text:00401FC0                                         ; sub_4010F0+1EA↑p ...
.text:00401FC0
.text:00401FC0 var_8           = dword ptr -8
.text:00401FC0 var_4           = dword ptr -4
.text:00401FC0 arg_0           = dword ptr  8
.text:00401FC0
.text:00401FC0                 push    ebp
.text:00401FC1                 mov     ebp, esp
.text:00401FC3                 sub     esp, 8
.text:00401FC6                 mov     edx, dword_42251C
.text:00401FCC                 mov     ecx, [edx+4]
.text:00401FCF                 cmp     byte ptr [ecx+15h], 0
.text:00401FD3                 push    ebx
.text:00401FD4                 mov     ebx, [ebp+arg_0]
.text:00401FD7                 push    esi
.text:00401FD8                 push    edi
.text:00401FD9                 mov     [ebp+var_8], ecx
.text:00401FDC                 mov     [ebp+var_4], edx
.text:00401FDF                 jnz     short loc_40201E
.text:00401FE1                 mov     edi, [eax]
.text:00401FE3
.text:00401FE3 loc_401FE3:                             ; CODE XREF: sub_401FC0+56↓j
.text:00401FE3                 mov     esi, [ecx+0Ch]
.text:00401FE6                 cmp     edi, esi
.text:00401FE8                 jg      short loc_401FF4
.text:00401FEA                 jl      short loc_401FF9
.text:00401FEC                 mov     ebx, [ecx+10h]
.text:00401FEF                 cmp     ebx, [eax+4]
.text:00401FF2                 jge     short loc_401FF9
.text:00401FF4
.text:00401FF4 loc_401FF4:                             ; CODE XREF: sub_401FC0+28↑j
.text:00401FF4                 mov     ecx, [ecx+8]
.text:00401FF7                 jmp     short loc_402012
.text:00401FF9 ; ---------------------------------------------------------------------------
.text:00401FF9
.text:00401FF9 loc_401FF9:                             ; CODE XREF: sub_401FC0+2A↑j
.text:00401FF9                                         ; sub_401FC0+32↑j
.text:00401FF9                 cmp     byte ptr [edx+15h], 0
.text:00401FFD                 jz      short loc_40200D
.text:00401FFF                 cmp     edi, esi
.text:00402001                 jl      short loc_40200B
.text:00402003                 mov     esi, [eax+4]
.text:00402006                 cmp     esi, [ecx+10h]
.text:00402009                 jge     short loc_40200D
.text:0040200B
.text:0040200B loc_40200B:                             ; CODE XREF: sub_401FC0+41↑j
.text:0040200B                 mov     edx, ecx
.text:0040200D
.text:0040200D loc_40200D:                             ; CODE XREF: sub_401FC0+3D↑j
.text:0040200D                                         ; sub_401FC0+49↑j
.text:0040200D                 mov     [ebp+var_4], ecx
.text:00402010                 mov     ecx, [ecx]
.text:00402012
.text:00402012 loc_402012:                             ; CODE XREF: sub_401FC0+37↑j
.text:00402012                 cmp     byte ptr [ecx+15h], 0
.text:00402016                 jz      short loc_401FE3
.text:00402018                 mov     ecx, [ebp+var_8]
.text:0040201B                 mov     ebx, [ebp+arg_0]
.text:0040201E
.text:0040201E loc_40201E:                             ; CODE XREF: sub_401FC0+1F↑j
.text:0040201E                 cmp     byte ptr [edx+15h], 0
.text:00402022                 jnz     short loc_402026
.text:00402024                 mov     ecx, [edx]
.text:00402026
.text:00402026 loc_402026:                             ; CODE XREF: sub_401FC0+62↑j
.text:00402026                 cmp     byte ptr [ecx+15h], 0
.text:0040202A                 jnz     short loc_402050
.text:0040202C                 mov     edi, [eax]
.text:0040202E                 mov     edi, edi
.text:00402030
.text:00402030 loc_402030:                             ; CODE XREF: sub_401FC0+8E↓j
.text:00402030                 mov     esi, [ecx+0Ch]
.text:00402033                 cmp     esi, edi
.text:00402035                 jg      short loc_402041
.text:00402037                 jl      short loc_402047
.text:00402039                 mov     esi, [eax+4]
.text:0040203C                 cmp     esi, [ecx+10h]
.text:0040203F                 jge     short loc_402047
.text:00402041
.text:00402041 loc_402041:                             ; CODE XREF: sub_401FC0+75↑j
.text:00402041                 mov     edx, ecx
.text:00402043                 mov     ecx, [ecx]
.text:00402045                 jmp     short loc_40204A
.text:00402047 ; ---------------------------------------------------------------------------
.text:00402047
.text:00402047 loc_402047:                             ; CODE XREF: sub_401FC0+77↑j
.text:00402047                                         ; sub_401FC0+7F↑j
.text:00402047                 mov     ecx, [ecx+8]
.text:0040204A
.text:0040204A loc_40204A:                             ; CODE XREF: sub_401FC0+85↑j
.text:0040204A                 cmp     byte ptr [ecx+15h], 0
.text:0040204E                 jz      short loc_402030
.text:00402050
.text:00402050 loc_402050:                             ; CODE XREF: sub_401FC0+6A↑j
.text:00402050                 mov     eax, [ebp+var_4]
.text:00402053                 pop     edi
.text:00402054                 mov     [ebx], eax
.text:00402056                 pop     esi
.text:00402057                 mov     [ebx+4], edx
.text:0040205A                 mov     eax, ebx
.text:0040205C                 pop     ebx
.text:0040205D                 mov     esp, ebp
.text:0040205F                 pop     ebp
.text:00402060                 retn    4
.text:00402060 sub_401FC0      endp
.text:00402060
.text:00402060 ; ---------------------------------------------------------------------------
.text:00402063                 align 10h
.text:00402070 ; START OF FUNCTION CHUNK FOR sub_402A90
.text:00402070 ;   ADDITIONAL PARENT FUNCTION sub_401CC0
.text:00402070 ;   ADDITIONAL PARENT FUNCTION sub_402CC0
.text:00402070
.text:00402070 loc_402070:                             ; CODE XREF: sub_401CC0+2493↓j
.text:00402070                                         ; sub_402CC0+14C3↓j ...
.text:00402070 ; __unwind { // SEH_402A90
.text:00402070                 mov     eax, [eax]
.text:00402072                 mov     ecx, [eax]
.text:00402074                 mov     edx, [ecx+4]
.text:00402077                 mov     eax, [edx+eax+38h]
.text:0040207B                 test    eax, eax
.text:0040207D                 jz      short locret_402088
.text:0040207F                 mov     edx, [eax]
.text:00402081                 mov     ecx, eax
.text:00402083                 mov     eax, [edx+8]
.text:00402086                 jmp     eax
.text:00402088 ; ---------------------------------------------------------------------------
.text:00402088
.text:00402088 locret_402088:                          ; CODE XREF: sub_402A90-A13↑j
.text:00402088                 retn
.text:00402088 ; } // starts at 402070
.text:00402088 ; END OF FUNCTION CHUNK FOR sub_402A90
.text:00402088 ; ---------------------------------------------------------------------------
.text:00402089                 align 10h
.text:00402090
.text:00402090 ; =============== S U B R O U T I N E =======================================
.text:00402090
.text:00402090 ; Attributes: bp-based frame
.text:00402090
.text:00402090 ; int __thiscall sub_402090(int, int)
.text:00402090 sub_402090      proc near               ; CODE XREF: sub_401D30+3B↑p
.text:00402090                                         ; sub_401D30+4B↑p
.text:00402090
.text:00402090 arg_0           = dword ptr  8
.text:00402090
.text:00402090                 push    ebp
.text:00402091                 mov     ebp, esp
.text:00402093                 push    esi
.text:00402094                 mov     esi, ecx
.text:00402096                 mov     ecx, [ebp+arg_0]
.text:00402099                 push    edi
.text:0040209A                 mov     edi, [ecx+10h]
.text:0040209D                 cmp     edi, ebx
.text:0040209F                 jnb     short loc_4020AC
.text:004020A1                 push    offset aInvalidStringP ; "invalid string position"
.text:004020A6                 call    ds:?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text:004020AC
.text:004020AC loc_4020AC:                             ; CODE XREF: sub_402090+F↑j
.text:004020AC                 sub     edi, ebx
.text:004020AE                 cmp     eax, edi
.text:004020B0                 jnb     short loc_4020B4
.text:004020B2                 mov     edi, eax
.text:004020B4
.text:004020B4 loc_4020B4:                             ; CODE XREF: sub_402090+20↑j
.text:004020B4                 cmp     esi, ecx
.text:004020B6                 jnz     short loc_4020D4
.text:004020B8                 lea     ecx, [edi+ebx]
.text:004020BB                 or      eax, 0FFFFFFFFh
.text:004020BE                 call    sub_4026A0
.text:004020C3                 mov     eax, ebx
.text:004020C5                 xor     ecx, ecx
.text:004020C7                 call    sub_4026A0
.text:004020CC                 pop     edi
.text:004020CD                 mov     eax, esi
.text:004020CF                 pop     esi
.text:004020D0                 pop     ebp
.text:004020D1                 retn    4
.text:004020D4 ; ---------------------------------------------------------------------------
.text:004020D4
.text:004020D4 loc_4020D4:                             ; CODE XREF: sub_402090+26↑j
.text:004020D4                 cmp     edi, 0FFFFFFFEh
.text:004020D7                 jbe     short loc_4020E4
.text:004020D9                 push    offset aStringTooLong ; "string too long"
.text:004020DE                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:004020E4
.text:004020E4 loc_4020E4:                             ; CODE XREF: sub_402090+47↑j
.text:004020E4                 mov     eax, [esi+14h]
.text:004020E7                 cmp     eax, edi
.text:004020E9                 jnb     short loc_402112
.text:004020EB                 mov     eax, [esi+10h]
.text:004020EE                 push    eax             ; Size
.text:004020EF                 push    edi             ; Dst
.text:004020F0                 push    esi             ; int
.text:004020F1                 call    sub_402720
.text:004020F6                 mov     ecx, [ebp+arg_0]
.text:004020F9                 test    edi, edi
.text:004020FB                 jz      short loc_402162
.text:004020FD
.text:004020FD loc_4020FD:                             ; CODE XREF: sub_402090+84↓j
.text:004020FD                 mov     eax, 10h
.text:00402102                 cmp     [ecx+14h], eax
.text:00402105                 jb      short loc_402109
.text:00402107                 mov     ecx, [ecx]
.text:00402109
.text:00402109 loc_402109:                             ; CODE XREF: sub_402090+75↑j
.text:00402109                 cmp     [esi+14h], eax
.text:0040210C                 jb      short loc_402136
.text:0040210E                 mov     eax, [esi]
.text:00402110                 jmp     short loc_402138
.text:00402112 ; ---------------------------------------------------------------------------
.text:00402112
.text:00402112 loc_402112:                             ; CODE XREF: sub_402090+59↑j
.text:00402112                 test    edi, edi
.text:00402114                 jnz     short loc_4020FD
.text:00402116                 mov     [esi+10h], edi
.text:00402119                 cmp     eax, 10h
.text:0040211C                 jb      short loc_40212B
.text:0040211E                 mov     eax, [esi]
.text:00402120                 mov     byte ptr [eax], 0
.text:00402123                 pop     edi
.text:00402124                 mov     eax, esi
.text:00402126                 pop     esi
.text:00402127                 pop     ebp
.text:00402128                 retn    4
.text:0040212B ; ---------------------------------------------------------------------------
.text:0040212B
.text:0040212B loc_40212B:                             ; CODE XREF: sub_402090+8C↑j
.text:0040212B                 mov     eax, esi
.text:0040212D                 pop     edi
.text:0040212E                 mov     byte ptr [eax], 0
.text:00402131                 pop     esi
.text:00402132                 pop     ebp
.text:00402133                 retn    4
.text:00402136 ; ---------------------------------------------------------------------------
.text:00402136
.text:00402136 loc_402136:                             ; CODE XREF: sub_402090+7C↑j
.text:00402136                 mov     eax, esi
.text:00402138
.text:00402138 loc_402138:                             ; CODE XREF: sub_402090+80↑j
.text:00402138                 push    edi             ; Size
.text:00402139                 add     ecx, ebx
.text:0040213B                 push    ecx             ; Src
.text:0040213C                 push    eax             ; Dst
.text:0040213D                 call    memcpy
.text:00402142                 add     esp, 0Ch
.text:00402145                 cmp     dword ptr [esi+14h], 10h
.text:00402149                 mov     [esi+10h], edi
.text:0040214C                 jb      short loc_40215C
.text:0040214E                 mov     eax, [esi]
.text:00402150                 mov     byte ptr [eax+edi], 0
.text:00402154                 pop     edi
.text:00402155                 mov     eax, esi
.text:00402157                 pop     esi
.text:00402158                 pop     ebp
.text:00402159                 retn    4
.text:0040215C ; ---------------------------------------------------------------------------
.text:0040215C
.text:0040215C loc_40215C:                             ; CODE XREF: sub_402090+BC↑j
.text:0040215C                 mov     eax, esi
.text:0040215E                 mov     byte ptr [eax+edi], 0
.text:00402162
.text:00402162 loc_402162:                             ; CODE XREF: sub_402090+6B↑j
.text:00402162                 pop     edi
.text:00402163                 mov     eax, esi
.text:00402165                 pop     esi
.text:00402166                 pop     ebp
.text:00402167                 retn    4
.text:00402167 sub_402090      endp
.text:00402167
.text:00402167 ; ---------------------------------------------------------------------------
.text:0040216A                 align 10h
.text:00402170
.text:00402170 ; =============== S U B R O U T I N E =======================================
.text:00402170
.text:00402170 ; Attributes: bp-based frame
.text:00402170
.text:00402170 sub_402170      proc near               ; CODE XREF: sub_401E00+83↑p
.text:00402170
.text:00402170 var_4           = dword ptr -4
.text:00402170 arg_0           = dword ptr  8
.text:00402170 arg_4           = dword ptr  0Ch
.text:00402170
.text:00402170                 push    ebp
.text:00402171                 mov     ebp, esp
.text:00402173                 push    ecx
.text:00402174                 mov     eax, [ebp+arg_4]
.text:00402177                 cmp     byte ptr [eax+15h], 0
.text:0040217B                 jz      short loc_402188
.text:0040217D                 push    offset aInvalidMapSetT ; "invalid map/set<T> iterator"
.text:00402182                 call    ds:?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text:00402188
.text:00402188 loc_402188:                             ; CODE XREF: sub_402170+B↑j
.text:00402188                 push    ebx
.text:00402189                 push    esi
.text:0040218A                 mov     ebx, eax
.text:0040218C                 push    edi
.text:0040218D                 lea     eax, [ebp+arg_4]
.text:00402190                 mov     [ebp+var_4], ebx
.text:00402193                 call    sub_4029F0
.text:00402198                 mov     ecx, [ebx]
.text:0040219A                 cmp     byte ptr [ecx+15h], 0
.text:0040219E                 jz      short loc_4021A5
.text:004021A0                 mov     edi, [ebx+8]
.text:004021A3                 jmp     short loc_4021BC
.text:004021A5 ; ---------------------------------------------------------------------------
.text:004021A5
.text:004021A5 loc_4021A5:                             ; CODE XREF: sub_402170+2E↑j
.text:004021A5                 mov     eax, [ebx+8]
.text:004021A8                 cmp     byte ptr [eax+15h], 0
.text:004021AC                 jz      short loc_4021B2
.text:004021AE                 mov     edi, ecx
.text:004021B0                 jmp     short loc_4021BC
.text:004021B2 ; ---------------------------------------------------------------------------
.text:004021B2
.text:004021B2 loc_4021B2:                             ; CODE XREF: sub_402170+3C↑j
.text:004021B2                 mov     eax, [ebp+arg_4]
.text:004021B5                 mov     edi, [eax+8]
.text:004021B8                 cmp     eax, ebx
.text:004021BA                 jnz     short loc_402238
.text:004021BC
.text:004021BC loc_4021BC:                             ; CODE XREF: sub_402170+33↑j
.text:004021BC                                         ; sub_402170+40↑j
.text:004021BC                 cmp     byte ptr [edi+15h], 0
.text:004021C0                 mov     esi, [ebx+4]
.text:004021C3                 jnz     short loc_4021C8
.text:004021C5                 mov     [edi+4], esi
.text:004021C8
.text:004021C8 loc_4021C8:                             ; CODE XREF: sub_402170+53↑j
.text:004021C8                 mov     eax, dword_42250C
.text:004021CD                 cmp     [eax+4], ebx
.text:004021D0                 jnz     short loc_4021D7
.text:004021D2                 mov     [eax+4], edi
.text:004021D5                 jmp     short loc_4021E2
.text:004021D7 ; ---------------------------------------------------------------------------
.text:004021D7
.text:004021D7 loc_4021D7:                             ; CODE XREF: sub_402170+60↑j
.text:004021D7                 cmp     [esi], ebx
.text:004021D9                 jnz     short loc_4021DF
.text:004021DB                 mov     [esi], edi
.text:004021DD                 jmp     short loc_4021E2
.text:004021DF ; ---------------------------------------------------------------------------
.text:004021DF
.text:004021DF loc_4021DF:                             ; CODE XREF: sub_402170+69↑j
.text:004021DF                 mov     [esi+8], edi
.text:004021E2
.text:004021E2 loc_4021E2:                             ; CODE XREF: sub_402170+65↑j
.text:004021E2                                         ; sub_402170+6D↑j
.text:004021E2                 mov     edx, dword_42250C
.text:004021E8                 cmp     [edx], ebx
.text:004021EA                 jnz     short loc_40220C
.text:004021EC                 cmp     byte ptr [edi+15h], 0
.text:004021F0                 jz      short loc_4021F6
.text:004021F2                 mov     ecx, esi
.text:004021F4                 jmp     short loc_40220A
.text:004021F6 ; ---------------------------------------------------------------------------
.text:004021F6
.text:004021F6 loc_4021F6:                             ; CODE XREF: sub_402170+80↑j
.text:004021F6                 mov     eax, [edi]
.text:004021F8                 cmp     byte ptr [eax+15h], 0
.text:004021FC                 mov     ecx, edi
.text:004021FE                 jnz     short loc_40220A
.text:00402200
.text:00402200 loc_402200:                             ; CODE XREF: sub_402170+98↓j
.text:00402200                 mov     ecx, eax
.text:00402202                 mov     eax, [ecx]
.text:00402204                 cmp     byte ptr [eax+15h], 0
.text:00402208                 jz      short loc_402200
.text:0040220A
.text:0040220A loc_40220A:                             ; CODE XREF: sub_402170+84↑j
.text:0040220A                                         ; sub_402170+8E↑j
.text:0040220A                 mov     [edx], ecx
.text:0040220C
.text:0040220C loc_40220C:                             ; CODE XREF: sub_402170+7A↑j
.text:0040220C                 mov     ecx, dword_42250C
.text:00402212                 cmp     [ecx+8], ebx
.text:00402215                 jnz     short loc_402292
.text:00402217                 cmp     byte ptr [edi+15h], 0
.text:0040221B                 jz      short loc_402226
.text:0040221D                 mov     eax, esi
.text:0040221F                 mov     edx, ecx
.text:00402221                 mov     [edx+8], eax
.text:00402224                 jmp     short loc_402292
.text:00402226 ; ---------------------------------------------------------------------------
.text:00402226
.text:00402226 loc_402226:                             ; CODE XREF: sub_402170+AB↑j
.text:00402226                 mov     eax, edi
.text:00402228                 call    sub_4029D0
.text:0040222D                 mov     edx, dword_42250C
.text:00402233                 mov     [edx+8], eax
.text:00402236                 jmp     short loc_402292
.text:00402238 ; ---------------------------------------------------------------------------
.text:00402238
.text:00402238 loc_402238:                             ; CODE XREF: sub_402170+4A↑j
.text:00402238                 mov     [ecx+4], eax
.text:0040223B                 mov     ecx, [ebx]
.text:0040223D                 mov     [eax], ecx
.text:0040223F                 cmp     eax, [ebx+8]
.text:00402242                 jnz     short loc_402248
.text:00402244                 mov     esi, eax
.text:00402246                 jmp     short loc_402262
.text:00402248 ; ---------------------------------------------------------------------------
.text:00402248
.text:00402248 loc_402248:                             ; CODE XREF: sub_402170+D2↑j
.text:00402248                 cmp     byte ptr [edi+15h], 0
.text:0040224C                 mov     esi, [eax+4]
.text:0040224F                 jnz     short loc_402254
.text:00402251                 mov     [edi+4], esi
.text:00402254
.text:00402254 loc_402254:                             ; CODE XREF: sub_402170+DF↑j
.text:00402254                 mov     [esi], edi
.text:00402256                 mov     ecx, [ebx+8]
.text:00402259                 mov     [eax+8], ecx
.text:0040225C                 mov     edx, [ebx+8]
.text:0040225F                 mov     [edx+4], eax
.text:00402262
.text:00402262 loc_402262:                             ; CODE XREF: sub_402170+D6↑j
.text:00402262                 mov     ecx, dword_42250C
.text:00402268                 cmp     [ecx+4], ebx
.text:0040226B                 jnz     short loc_402272
.text:0040226D                 mov     [ecx+4], eax
.text:00402270                 jmp     short loc_402280
.text:00402272 ; ---------------------------------------------------------------------------
.text:00402272
.text:00402272 loc_402272:                             ; CODE XREF: sub_402170+FB↑j
.text:00402272                 mov     ecx, [ebx+4]
.text:00402275                 cmp     [ecx], ebx
.text:00402277                 jnz     short loc_40227D
.text:00402279                 mov     [ecx], eax
.text:0040227B                 jmp     short loc_402280
.text:0040227D ; ---------------------------------------------------------------------------
.text:0040227D
.text:0040227D loc_40227D:                             ; CODE XREF: sub_402170+107↑j
.text:0040227D                 mov     [ecx+8], eax
.text:00402280
.text:00402280 loc_402280:                             ; CODE XREF: sub_402170+100↑j
.text:00402280                                         ; sub_402170+10B↑j
.text:00402280                 mov     ecx, [ebx+4]
.text:00402283                 mov     [eax+4], ecx
.text:00402286                 mov     dl, [ebx+14h]
.text:00402289                 mov     cl, [eax+14h]
.text:0040228C                 mov     [eax+14h], dl
.text:0040228F                 mov     [ebx+14h], cl
.text:00402292
.text:00402292 loc_402292:                             ; CODE XREF: sub_402170+A5↑j
.text:00402292                                         ; sub_402170+B4↑j ...
.text:00402292                 mov     eax, [ebp+var_4]
.text:00402295                 mov     ebx, 1
.text:0040229A                 cmp     [eax+14h], bl
.text:0040229D                 jnz     loc_402396
.text:004022A3                 mov     ecx, dword_42250C
.text:004022A9                 cmp     edi, [ecx+4]
.text:004022AC                 jz      loc_402393
.text:004022B2
.text:004022B2 loc_4022B2:                             ; CODE XREF: sub_402170+1EE↓j
.text:004022B2                 cmp     [edi+14h], bl
.text:004022B5                 jnz     loc_402393
.text:004022BB                 mov     ecx, [esi]
.text:004022BD                 cmp     edi, ecx
.text:004022BF                 jnz     short loc_402321
.text:004022C1                 mov     ecx, [esi+8]
.text:004022C4                 cmp     byte ptr [ecx+14h], 0
.text:004022C8                 jnz     short loc_4022DB
.text:004022CA                 mov     [ecx+14h], bl
.text:004022CD                 mov     ecx, esi
.text:004022CF                 mov     byte ptr [esi+14h], 0
.text:004022D3                 call    sub_402890
.text:004022D8                 mov     ecx, [esi+8]
.text:004022DB
.text:004022DB loc_4022DB:                             ; CODE XREF: sub_402170+158↑j
.text:004022DB                 cmp     byte ptr [ecx+15h], 0
.text:004022DF                 jnz     short loc_402350
.text:004022E1                 mov     edx, [ecx]
.text:004022E3                 cmp     [edx+14h], bl
.text:004022E6                 jnz     short loc_4022F0
.text:004022E8                 mov     eax, [ecx+8]
.text:004022EB                 cmp     [eax+14h], bl
.text:004022EE                 jz      short loc_40234C
.text:004022F0
.text:004022F0 loc_4022F0:                             ; CODE XREF: sub_402170+176↑j
.text:004022F0                 mov     edx, [ecx+8]
.text:004022F3                 cmp     [edx+14h], bl
.text:004022F6                 jnz     short loc_402309
.text:004022F8                 mov     eax, [ecx]
.text:004022FA                 mov     [eax+14h], bl
.text:004022FD                 mov     byte ptr [ecx+14h], 0
.text:00402301                 call    sub_4028E0
.text:00402306                 mov     ecx, [esi+8]
.text:00402309
.text:00402309 loc_402309:                             ; CODE XREF: sub_402170+186↑j
.text:00402309                 mov     dl, [esi+14h]
.text:0040230C                 mov     [ecx+14h], dl
.text:0040230F                 mov     [esi+14h], bl
.text:00402312                 mov     eax, [ecx+8]
.text:00402315                 mov     ecx, esi
.text:00402317                 mov     [eax+14h], bl
.text:0040231A                 call    sub_402890
.text:0040231F                 jmp     short loc_402393
.text:00402321 ; ---------------------------------------------------------------------------
.text:00402321
.text:00402321 loc_402321:                             ; CODE XREF: sub_402170+14F↑j
.text:00402321                 cmp     byte ptr [ecx+14h], 0
.text:00402325                 jnz     short loc_402337
.text:00402327                 mov     [ecx+14h], bl
.text:0040232A                 mov     ecx, esi
.text:0040232C                 mov     byte ptr [esi+14h], 0
.text:00402330                 call    sub_4028E0
.text:00402335                 mov     ecx, [esi]
.text:00402337
.text:00402337 loc_402337:                             ; CODE XREF: sub_402170+1B5↑j
.text:00402337                 cmp     byte ptr [ecx+15h], 0
.text:0040233B                 jnz     short loc_402350
.text:0040233D                 mov     edx, [ecx+8]
.text:00402340                 cmp     [edx+14h], bl
.text:00402343                 jnz     short loc_402366
.text:00402345                 mov     eax, [ecx]
.text:00402347                 cmp     [eax+14h], bl
.text:0040234A                 jnz     short loc_402366
.text:0040234C
.text:0040234C loc_40234C:                             ; CODE XREF: sub_402170+17E↑j
.text:0040234C                 mov     byte ptr [ecx+14h], 0
.text:00402350
.text:00402350 loc_402350:                             ; CODE XREF: sub_402170+16F↑j
.text:00402350                                         ; sub_402170+1CB↑j
.text:00402350                 mov     ecx, dword_42250C
.text:00402356                 mov     edi, esi
.text:00402358                 mov     esi, [esi+4]
.text:0040235B                 cmp     edi, [ecx+4]
.text:0040235E                 jnz     loc_4022B2
.text:00402364                 jmp     short loc_402393
.text:00402366 ; ---------------------------------------------------------------------------
.text:00402366
.text:00402366 loc_402366:                             ; CODE XREF: sub_402170+1D3↑j
.text:00402366                                         ; sub_402170+1DA↑j
.text:00402366                 mov     edx, [ecx]
.text:00402368                 cmp     [edx+14h], bl
.text:0040236B                 jnz     short loc_40237E
.text:0040236D                 mov     eax, [ecx+8]
.text:00402370                 mov     [eax+14h], bl
.text:00402373                 mov     byte ptr [ecx+14h], 0
.text:00402377                 call    sub_402890
.text:0040237C                 mov     ecx, [esi]
.text:0040237E
.text:0040237E loc_40237E:                             ; CODE XREF: sub_402170+1FB↑j
.text:0040237E                 mov     dl, [esi+14h]
.text:00402381                 mov     [ecx+14h], dl
.text:00402384                 mov     [esi+14h], bl
.text:00402387                 mov     eax, [ecx]
.text:00402389                 mov     ecx, esi
.text:0040238B                 mov     [eax+14h], bl
.text:0040238E                 call    sub_4028E0
.text:00402393
.text:00402393 loc_402393:                             ; CODE XREF: sub_402170+13C↑j
.text:00402393                                         ; sub_402170+145↑j ...
.text:00402393                 mov     [edi+14h], bl
.text:00402396
.text:00402396 loc_402396:                             ; CODE XREF: sub_402170+12D↑j
.text:00402396                 mov     ecx, [ebp+var_4]
.text:00402399                 push    ecx
.text:0040239A                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004023A0                 add     esp, 4
.text:004023A3                 cmp     dword_422510, 0
.text:004023AA                 jbe     short loc_4023B2
.text:004023AC                 sub     dword_422510, ebx
.text:004023B2
.text:004023B2 loc_4023B2:                             ; CODE XREF: sub_402170+23A↑j
.text:004023B2                 mov     edx, [ebp+arg_4]
.text:004023B5                 mov     eax, [ebp+arg_0]
.text:004023B8                 pop     edi
.text:004023B9                 pop     esi
.text:004023BA                 mov     [eax], edx
.text:004023BC                 pop     ebx
.text:004023BD                 mov     esp, ebp
.text:004023BF                 pop     ebp
.text:004023C0                 retn    8
.text:004023C0 sub_402170      endp
.text:004023C0
.text:004023C0 ; ---------------------------------------------------------------------------
.text:004023C3                 align 10h
.text:004023D0
.text:004023D0 ; =============== S U B R O U T I N E =======================================
.text:004023D0
.text:004023D0
.text:004023D0 sub_4023D0      proc near               ; CODE XREF: sub_401E00+17↑p
.text:004023D0                 mov     eax, dword_42250C
.text:004023D5                 push    esi
.text:004023D6                 push    edi
.text:004023D7                 mov     edi, [eax+4]
.text:004023DA                 cmp     byte ptr [edi+15h], 0
.text:004023DE                 mov     esi, edi
.text:004023E0                 jnz     short loc_402414
.text:004023E2                 push    ebx
.text:004023E3                 mov     ebx, ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004023E9                 lea     esp, [esp+0]
.text:004023F0
.text:004023F0 loc_4023F0:                             ; CODE XREF: sub_4023D0+3C↓j
.text:004023F0                 mov     eax, [esi+8]
.text:004023F3                 push    eax
.text:004023F4                 mov     ecx, offset unk_422508
.text:004023F9                 call    sub_401C70
.text:004023FE                 mov     esi, [esi]
.text:00402400                 push    edi
.text:00402401                 call    ebx ; operator delete(void *) ; operator delete(void *)
.text:00402403                 add     esp, 4
.text:00402406                 cmp     byte ptr [esi+15h], 0
.text:0040240A                 mov     edi, esi
.text:0040240C                 jz      short loc_4023F0
.text:0040240E                 mov     eax, dword_42250C
.text:00402413                 pop     ebx
.text:00402414
.text:00402414 loc_402414:                             ; CODE XREF: sub_4023D0+10↑j
.text:00402414                 mov     [eax+4], eax
.text:00402417                 mov     eax, dword_42250C
.text:0040241C                 mov     [eax], eax
.text:0040241E                 mov     eax, dword_42250C
.text:00402423                 pop     edi
.text:00402424                 mov     [eax+8], eax
.text:00402427                 mov     dword_422510, 0
.text:00402431                 pop     esi
.text:00402432                 retn
.text:00402432 sub_4023D0      endp
.text:00402432
.text:00402432 ; ---------------------------------------------------------------------------
.text:00402433                 align 10h
.text:00402440
.text:00402440 ; =============== S U B R O U T I N E =======================================
.text:00402440
.text:00402440 ; Attributes: bp-based frame
.text:00402440
.text:00402440 sub_402440      proc near               ; CODE XREF: sub_401F20+83↑p
.text:00402440
.text:00402440 var_4           = dword ptr -4
.text:00402440 arg_0           = dword ptr  8
.text:00402440 arg_4           = dword ptr  0Ch
.text:00402440
.text:00402440                 push    ebp
.text:00402441                 mov     ebp, esp
.text:00402443                 push    ecx
.text:00402444                 mov     eax, [ebp+arg_4]
.text:00402447                 cmp     byte ptr [eax+15h], 0
.text:0040244B                 jz      short loc_402458
.text:0040244D                 push    offset aInvalidMapSetT ; "invalid map/set<T> iterator"
.text:00402452                 call    ds:?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text:00402458
.text:00402458 loc_402458:                             ; CODE XREF: sub_402440+B↑j
.text:00402458                 push    ebx
.text:00402459                 push    esi
.text:0040245A                 mov     ebx, eax
.text:0040245C                 push    edi
.text:0040245D                 lea     eax, [ebp+arg_4]
.text:00402460                 mov     [ebp+var_4], ebx
.text:00402463                 call    sub_4029F0
.text:00402468                 mov     ecx, [ebx]
.text:0040246A                 cmp     byte ptr [ecx+15h], 0
.text:0040246E                 jz      short loc_402475
.text:00402470                 mov     edi, [ebx+8]
.text:00402473                 jmp     short loc_40248C
.text:00402475 ; ---------------------------------------------------------------------------
.text:00402475
.text:00402475 loc_402475:                             ; CODE XREF: sub_402440+2E↑j
.text:00402475                 mov     eax, [ebx+8]
.text:00402478                 cmp     byte ptr [eax+15h], 0
.text:0040247C                 jz      short loc_402482
.text:0040247E                 mov     edi, ecx
.text:00402480                 jmp     short loc_40248C
.text:00402482 ; ---------------------------------------------------------------------------
.text:00402482
.text:00402482 loc_402482:                             ; CODE XREF: sub_402440+3C↑j
.text:00402482                 mov     eax, [ebp+arg_4]
.text:00402485                 mov     edi, [eax+8]
.text:00402488                 cmp     eax, ebx
.text:0040248A                 jnz     short loc_402508
.text:0040248C
.text:0040248C loc_40248C:                             ; CODE XREF: sub_402440+33↑j
.text:0040248C                                         ; sub_402440+40↑j
.text:0040248C                 cmp     byte ptr [edi+15h], 0
.text:00402490                 mov     esi, [ebx+4]
.text:00402493                 jnz     short loc_402498
.text:00402495                 mov     [edi+4], esi
.text:00402498
.text:00402498 loc_402498:                             ; CODE XREF: sub_402440+53↑j
.text:00402498                 mov     eax, dword_42251C
.text:0040249D                 cmp     [eax+4], ebx
.text:004024A0                 jnz     short loc_4024A7
.text:004024A2                 mov     [eax+4], edi
.text:004024A5                 jmp     short loc_4024B2
.text:004024A7 ; ---------------------------------------------------------------------------
.text:004024A7
.text:004024A7 loc_4024A7:                             ; CODE XREF: sub_402440+60↑j
.text:004024A7                 cmp     [esi], ebx
.text:004024A9                 jnz     short loc_4024AF
.text:004024AB                 mov     [esi], edi
.text:004024AD                 jmp     short loc_4024B2
.text:004024AF ; ---------------------------------------------------------------------------
.text:004024AF
.text:004024AF loc_4024AF:                             ; CODE XREF: sub_402440+69↑j
.text:004024AF                 mov     [esi+8], edi
.text:004024B2
.text:004024B2 loc_4024B2:                             ; CODE XREF: sub_402440+65↑j
.text:004024B2                                         ; sub_402440+6D↑j
.text:004024B2                 mov     edx, dword_42251C
.text:004024B8                 cmp     [edx], ebx
.text:004024BA                 jnz     short loc_4024DC
.text:004024BC                 cmp     byte ptr [edi+15h], 0
.text:004024C0                 jz      short loc_4024C6
.text:004024C2                 mov     ecx, esi
.text:004024C4                 jmp     short loc_4024DA
.text:004024C6 ; ---------------------------------------------------------------------------
.text:004024C6
.text:004024C6 loc_4024C6:                             ; CODE XREF: sub_402440+80↑j
.text:004024C6                 mov     eax, [edi]
.text:004024C8                 cmp     byte ptr [eax+15h], 0
.text:004024CC                 mov     ecx, edi
.text:004024CE                 jnz     short loc_4024DA
.text:004024D0
.text:004024D0 loc_4024D0:                             ; CODE XREF: sub_402440+98↓j
.text:004024D0                 mov     ecx, eax
.text:004024D2                 mov     eax, [ecx]
.text:004024D4                 cmp     byte ptr [eax+15h], 0
.text:004024D8                 jz      short loc_4024D0
.text:004024DA
.text:004024DA loc_4024DA:                             ; CODE XREF: sub_402440+84↑j
.text:004024DA                                         ; sub_402440+8E↑j
.text:004024DA                 mov     [edx], ecx
.text:004024DC
.text:004024DC loc_4024DC:                             ; CODE XREF: sub_402440+7A↑j
.text:004024DC                 mov     ecx, dword_42251C
.text:004024E2                 cmp     [ecx+8], ebx
.text:004024E5                 jnz     short loc_402562
.text:004024E7                 cmp     byte ptr [edi+15h], 0
.text:004024EB                 jz      short loc_4024F6
.text:004024ED                 mov     eax, esi
.text:004024EF                 mov     edx, ecx
.text:004024F1                 mov     [edx+8], eax
.text:004024F4                 jmp     short loc_402562
.text:004024F6 ; ---------------------------------------------------------------------------
.text:004024F6
.text:004024F6 loc_4024F6:                             ; CODE XREF: sub_402440+AB↑j
.text:004024F6                 mov     eax, edi
.text:004024F8                 call    sub_4029D0
.text:004024FD                 mov     edx, dword_42251C
.text:00402503                 mov     [edx+8], eax
.text:00402506                 jmp     short loc_402562
.text:00402508 ; ---------------------------------------------------------------------------
.text:00402508
.text:00402508 loc_402508:                             ; CODE XREF: sub_402440+4A↑j
.text:00402508                 mov     [ecx+4], eax
.text:0040250B                 mov     ecx, [ebx]
.text:0040250D                 mov     [eax], ecx
.text:0040250F                 cmp     eax, [ebx+8]
.text:00402512                 jnz     short loc_402518
.text:00402514                 mov     esi, eax
.text:00402516                 jmp     short loc_402532
.text:00402518 ; ---------------------------------------------------------------------------
.text:00402518
.text:00402518 loc_402518:                             ; CODE XREF: sub_402440+D2↑j
.text:00402518                 cmp     byte ptr [edi+15h], 0
.text:0040251C                 mov     esi, [eax+4]
.text:0040251F                 jnz     short loc_402524
.text:00402521                 mov     [edi+4], esi
.text:00402524
.text:00402524 loc_402524:                             ; CODE XREF: sub_402440+DF↑j
.text:00402524                 mov     [esi], edi
.text:00402526                 mov     ecx, [ebx+8]
.text:00402529                 mov     [eax+8], ecx
.text:0040252C                 mov     edx, [ebx+8]
.text:0040252F                 mov     [edx+4], eax
.text:00402532
.text:00402532 loc_402532:                             ; CODE XREF: sub_402440+D6↑j
.text:00402532                 mov     ecx, dword_42251C
.text:00402538                 cmp     [ecx+4], ebx
.text:0040253B                 jnz     short loc_402542
.text:0040253D                 mov     [ecx+4], eax
.text:00402540                 jmp     short loc_402550
.text:00402542 ; ---------------------------------------------------------------------------
.text:00402542
.text:00402542 loc_402542:                             ; CODE XREF: sub_402440+FB↑j
.text:00402542                 mov     ecx, [ebx+4]
.text:00402545                 cmp     [ecx], ebx
.text:00402547                 jnz     short loc_40254D
.text:00402549                 mov     [ecx], eax
.text:0040254B                 jmp     short loc_402550
.text:0040254D ; ---------------------------------------------------------------------------
.text:0040254D
.text:0040254D loc_40254D:                             ; CODE XREF: sub_402440+107↑j
.text:0040254D                 mov     [ecx+8], eax
.text:00402550
.text:00402550 loc_402550:                             ; CODE XREF: sub_402440+100↑j
.text:00402550                                         ; sub_402440+10B↑j
.text:00402550                 mov     ecx, [ebx+4]
.text:00402553                 mov     [eax+4], ecx
.text:00402556                 mov     dl, [ebx+14h]
.text:00402559                 mov     cl, [eax+14h]
.text:0040255C                 mov     [eax+14h], dl
.text:0040255F                 mov     [ebx+14h], cl
.text:00402562
.text:00402562 loc_402562:                             ; CODE XREF: sub_402440+A5↑j
.text:00402562                                         ; sub_402440+B4↑j ...
.text:00402562                 mov     eax, [ebp+var_4]
.text:00402565                 mov     ebx, 1
.text:0040256A                 cmp     [eax+14h], bl
.text:0040256D                 jnz     loc_402666
.text:00402573                 mov     ecx, dword_42251C
.text:00402579                 cmp     edi, [ecx+4]
.text:0040257C                 jz      loc_402663
.text:00402582
.text:00402582 loc_402582:                             ; CODE XREF: sub_402440+1EE↓j
.text:00402582                 cmp     [edi+14h], bl
.text:00402585                 jnz     loc_402663
.text:0040258B                 mov     ecx, [esi]
.text:0040258D                 cmp     edi, ecx
.text:0040258F                 jnz     short loc_4025F1
.text:00402591                 mov     ecx, [esi+8]
.text:00402594                 cmp     byte ptr [ecx+14h], 0
.text:00402598                 jnz     short loc_4025AB
.text:0040259A                 mov     [ecx+14h], bl
.text:0040259D                 mov     ecx, esi
.text:0040259F                 mov     byte ptr [esi+14h], 0
.text:004025A3                 call    sub_402930
.text:004025A8                 mov     ecx, [esi+8]
.text:004025AB
.text:004025AB loc_4025AB:                             ; CODE XREF: sub_402440+158↑j
.text:004025AB                 cmp     byte ptr [ecx+15h], 0
.text:004025AF                 jnz     short loc_402620
.text:004025B1                 mov     edx, [ecx]
.text:004025B3                 cmp     [edx+14h], bl
.text:004025B6                 jnz     short loc_4025C0
.text:004025B8                 mov     eax, [ecx+8]
.text:004025BB                 cmp     [eax+14h], bl
.text:004025BE                 jz      short loc_40261C
.text:004025C0
.text:004025C0 loc_4025C0:                             ; CODE XREF: sub_402440+176↑j
.text:004025C0                 mov     edx, [ecx+8]
.text:004025C3                 cmp     [edx+14h], bl
.text:004025C6                 jnz     short loc_4025D9
.text:004025C8                 mov     eax, [ecx]
.text:004025CA                 mov     [eax+14h], bl
.text:004025CD                 mov     byte ptr [ecx+14h], 0
.text:004025D1                 call    sub_402980
.text:004025D6                 mov     ecx, [esi+8]
.text:004025D9
.text:004025D9 loc_4025D9:                             ; CODE XREF: sub_402440+186↑j
.text:004025D9                 mov     dl, [esi+14h]
.text:004025DC                 mov     [ecx+14h], dl
.text:004025DF                 mov     [esi+14h], bl
.text:004025E2                 mov     eax, [ecx+8]
.text:004025E5                 mov     ecx, esi
.text:004025E7                 mov     [eax+14h], bl
.text:004025EA                 call    sub_402930
.text:004025EF                 jmp     short loc_402663
.text:004025F1 ; ---------------------------------------------------------------------------
.text:004025F1
.text:004025F1 loc_4025F1:                             ; CODE XREF: sub_402440+14F↑j
.text:004025F1                 cmp     byte ptr [ecx+14h], 0
.text:004025F5                 jnz     short loc_402607
.text:004025F7                 mov     [ecx+14h], bl
.text:004025FA                 mov     ecx, esi
.text:004025FC                 mov     byte ptr [esi+14h], 0
.text:00402600                 call    sub_402980
.text:00402605                 mov     ecx, [esi]
.text:00402607
.text:00402607 loc_402607:                             ; CODE XREF: sub_402440+1B5↑j
.text:00402607                 cmp     byte ptr [ecx+15h], 0
.text:0040260B                 jnz     short loc_402620
.text:0040260D                 mov     edx, [ecx+8]
.text:00402610                 cmp     [edx+14h], bl
.text:00402613                 jnz     short loc_402636
.text:00402615                 mov     eax, [ecx]
.text:00402617                 cmp     [eax+14h], bl
.text:0040261A                 jnz     short loc_402636
.text:0040261C
.text:0040261C loc_40261C:                             ; CODE XREF: sub_402440+17E↑j
.text:0040261C                 mov     byte ptr [ecx+14h], 0
.text:00402620
.text:00402620 loc_402620:                             ; CODE XREF: sub_402440+16F↑j
.text:00402620                                         ; sub_402440+1CB↑j
.text:00402620                 mov     ecx, dword_42251C
.text:00402626                 mov     edi, esi
.text:00402628                 mov     esi, [esi+4]
.text:0040262B                 cmp     edi, [ecx+4]
.text:0040262E                 jnz     loc_402582
.text:00402634                 jmp     short loc_402663
.text:00402636 ; ---------------------------------------------------------------------------
.text:00402636
.text:00402636 loc_402636:                             ; CODE XREF: sub_402440+1D3↑j
.text:00402636                                         ; sub_402440+1DA↑j
.text:00402636                 mov     edx, [ecx]
.text:00402638                 cmp     [edx+14h], bl
.text:0040263B                 jnz     short loc_40264E
.text:0040263D                 mov     eax, [ecx+8]
.text:00402640                 mov     [eax+14h], bl
.text:00402643                 mov     byte ptr [ecx+14h], 0
.text:00402647                 call    sub_402930
.text:0040264C                 mov     ecx, [esi]
.text:0040264E
.text:0040264E loc_40264E:                             ; CODE XREF: sub_402440+1FB↑j
.text:0040264E                 mov     dl, [esi+14h]
.text:00402651                 mov     [ecx+14h], dl
.text:00402654                 mov     [esi+14h], bl
.text:00402657                 mov     eax, [ecx]
.text:00402659                 mov     ecx, esi
.text:0040265B                 mov     [eax+14h], bl
.text:0040265E                 call    sub_402980
.text:00402663
.text:00402663 loc_402663:                             ; CODE XREF: sub_402440+13C↑j
.text:00402663                                         ; sub_402440+145↑j ...
.text:00402663                 mov     [edi+14h], bl
.text:00402666
.text:00402666 loc_402666:                             ; CODE XREF: sub_402440+12D↑j
.text:00402666                 mov     ecx, [ebp+var_4]
.text:00402669                 push    ecx
.text:0040266A                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00402670                 add     esp, 4
.text:00402673                 cmp     dword_422520, 0
.text:0040267A                 jbe     short loc_402682
.text:0040267C                 sub     dword_422520, ebx
.text:00402682
.text:00402682 loc_402682:                             ; CODE XREF: sub_402440+23A↑j
.text:00402682                 mov     edx, [ebp+arg_4]
.text:00402685                 mov     eax, [ebp+arg_0]
.text:00402688                 pop     edi
.text:00402689                 pop     esi
.text:0040268A                 mov     [eax], edx
.text:0040268C                 pop     ebx
.text:0040268D                 mov     esp, ebp
.text:0040268F                 pop     ebp
.text:00402690                 retn    8
.text:00402690 sub_402440      endp
.text:00402690
.text:00402690 ; ---------------------------------------------------------------------------
.text:00402693                 align 10h
.text:004026A0
.text:004026A0 ; =============== S U B R O U T I N E =======================================
.text:004026A0
.text:004026A0
.text:004026A0 sub_4026A0      proc near               ; CODE XREF: sub_402090+2E↑p
.text:004026A0                                         ; sub_402090+37↑p
.text:004026A0                 push    edi
.text:004026A1                 mov     edi, eax
.text:004026A3                 mov     eax, [esi+10h]
.text:004026A6                 cmp     eax, ecx
.text:004026A8                 jnb     short loc_4026B5
.text:004026AA                 push    offset aInvalidStringP ; "invalid string position"
.text:004026AF                 call    ds:?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text:004026B5
.text:004026B5 loc_4026B5:                             ; CODE XREF: sub_4026A0+8↑j
.text:004026B5                 sub     eax, ecx
.text:004026B7                 cmp     eax, edi
.text:004026B9                 jnb     short loc_4026BD
.text:004026BB                 mov     edi, eax
.text:004026BD
.text:004026BD loc_4026BD:                             ; CODE XREF: sub_4026A0+19↑j
.text:004026BD                 test    edi, edi
.text:004026BF                 jz      short loc_40270E
.text:004026C1                 mov     edx, [esi+14h]
.text:004026C4                 push    ebx
.text:004026C5                 cmp     edx, 10h
.text:004026C8                 jb      short loc_4026CE
.text:004026CA                 mov     ebx, [esi]
.text:004026CC                 jmp     short loc_4026D0
.text:004026CE ; ---------------------------------------------------------------------------
.text:004026CE
.text:004026CE loc_4026CE:                             ; CODE XREF: sub_4026A0+28↑j
.text:004026CE                 mov     ebx, esi
.text:004026D0
.text:004026D0 loc_4026D0:                             ; CODE XREF: sub_4026A0+2C↑j
.text:004026D0                 cmp     edx, 10h
.text:004026D3                 jb      short loc_4026D9
.text:004026D5                 mov     edx, [esi]
.text:004026D7                 jmp     short loc_4026DB
.text:004026D9 ; ---------------------------------------------------------------------------
.text:004026D9
.text:004026D9 loc_4026D9:                             ; CODE XREF: sub_4026A0+33↑j
.text:004026D9                 mov     edx, esi
.text:004026DB
.text:004026DB loc_4026DB:                             ; CODE XREF: sub_4026A0+37↑j
.text:004026DB                 sub     eax, edi
.text:004026DD                 add     ebx, ecx
.text:004026DF                 push    eax             ; Size
.text:004026E0                 add     ebx, edi
.text:004026E2                 add     edx, ecx
.text:004026E4                 push    ebx             ; Src
.text:004026E5                 push    edx             ; Dst
.text:004026E6                 call    ds:memmove
.text:004026EC                 mov     eax, [esi+10h]
.text:004026EF                 add     esp, 0Ch
.text:004026F2                 sub     eax, edi
.text:004026F4                 cmp     dword ptr [esi+14h], 10h
.text:004026F8                 mov     [esi+10h], eax
.text:004026FB                 pop     ebx
.text:004026FC                 jb      short loc_402708
.text:004026FE                 mov     ecx, [esi]
.text:00402700                 mov     byte ptr [ecx+eax], 0
.text:00402704                 mov     eax, esi
.text:00402706                 pop     edi
.text:00402707                 retn
.text:00402708 ; ---------------------------------------------------------------------------
.text:00402708
.text:00402708 loc_402708:                             ; CODE XREF: sub_4026A0+5C↑j
.text:00402708                 mov     ecx, esi
.text:0040270A                 mov     byte ptr [ecx+eax], 0
.text:0040270E
.text:0040270E loc_40270E:                             ; CODE XREF: sub_4026A0+1F↑j
.text:0040270E                 mov     eax, esi
.text:00402710                 pop     edi
.text:00402711                 retn
.text:00402711 sub_4026A0      endp
.text:00402711
.text:00402711 ; ---------------------------------------------------------------------------
.text:00402712                 align 10h
.text:00402720
.text:00402720 ; =============== S U B R O U T I N E =======================================
.text:00402720
.text:00402720 ; Attributes: bp-based frame
.text:00402720
.text:00402720 ; int __stdcall sub_402720(int, void *Dst, size_t Size)
.text:00402720 sub_402720      proc near               ; CODE XREF: sub_401D30+6F↑p
.text:00402720                                         ; sub_402090+61↑p
.text:00402720
.text:00402720 var_24          = dword ptr -24h
.text:00402720 var_18          = dword ptr -18h
.text:00402720 var_14          = dword ptr -14h
.text:00402720 var_10          = dword ptr -10h
.text:00402720 var_C           = dword ptr -0Ch
.text:00402720 var_4           = dword ptr -4
.text:00402720 arg_0           = dword ptr  8
.text:00402720 Dst             = dword ptr  0Ch
.text:00402720 Size            = dword ptr  10h
.text:00402720
.text:00402720 ; FUNCTION CHUNK AT .text:00404200 SIZE 0000001B BYTES
.text:00402720
.text:00402720 ; __unwind { // SEH_402720
.text:00402720                 push    ebp
.text:00402721                 mov     ebp, esp
.text:00402723                 push    0FFFFFFFFh
.text:00402725                 push    offset SEH_402720
.text:0040272A                 mov     eax, large fs:0
.text:00402730                 push    eax
.text:00402731                 sub     esp, 18h
.text:00402734                 push    ebx
.text:00402735                 push    esi
.text:00402736                 push    edi
.text:00402737                 mov     eax, ___security_cookie
.text:0040273C                 xor     eax, ebp
.text:0040273E                 push    eax
.text:0040273F                 lea     eax, [ebp+var_C]
.text:00402742                 mov     large fs:0, eax
.text:00402748                 mov     [ebp+var_10], esp
.text:0040274B                 mov     eax, [ebp+Dst]
.text:0040274E                 mov     edi, [ebp+arg_0]
.text:00402751                 mov     esi, eax
.text:00402753                 or      esi, 0Fh
.text:00402756                 cmp     esi, 0FFFFFFFEh
.text:00402759                 jbe     short loc_40275F
.text:0040275B                 mov     esi, eax
.text:0040275D                 jmp     short loc_402786
.text:0040275F ; ---------------------------------------------------------------------------
.text:0040275F
.text:0040275F loc_40275F:                             ; CODE XREF: sub_402720+39↑j
.text:0040275F                 mov     ebx, [edi+14h]
.text:00402762                 mov     eax, 0AAAAAAABh
.text:00402767                 mul     esi
.text:00402769                 mov     ecx, ebx
.text:0040276B                 shr     ecx, 1
.text:0040276D                 shr     edx, 1
.text:0040276F                 cmp     ecx, edx
.text:00402771                 jbe     short loc_402786
.text:00402773                 mov     eax, 0FFFFFFFEh
.text:00402778                 sub     eax, ecx
.text:0040277A                 lea     esi, [ecx+ebx]
.text:0040277D                 cmp     ebx, eax
.text:0040277F                 jbe     short loc_402786
.text:00402781                 mov     esi, 0FFFFFFFEh
.text:00402786
.text:00402786 loc_402786:                             ; CODE XREF: sub_402720+3D↑j
.text:00402786                                         ; sub_402720+51↑j ...
.text:00402786                 xor     eax, eax
.text:00402788                 lea     ecx, [esi+1]
.text:0040278B ;   try {
.text:0040278B                 mov     [ebp+var_4], eax
.text:0040278E                 cmp     ecx, eax
.text:00402790                 jbe     short loc_4027A5
.text:00402792                 cmp     ecx, 0FFFFFFFFh
.text:00402795                 ja      short loc_4027AA
.text:00402797                 push    ecx
.text:00402798                 call    ds:??2@YAPAXI@Z ; operator new(uint)
.text:0040279E                 add     esp, 4
.text:004027A1                 test    eax, eax
.text:004027A3                 jz      short loc_4027AA
.text:004027A5
.text:004027A5 loc_4027A5:                             ; CODE XREF: sub_402720+70↑j
.text:004027A5                 mov     [ebp+Dst], eax
.text:004027A8                 jmp     short loc_4027F7
.text:004027AA ; ---------------------------------------------------------------------------
.text:004027AA
.text:004027AA loc_4027AA:                             ; CODE XREF: sub_402720+75↑j
.text:004027AA                                         ; sub_402720+83↑j
.text:004027AA                 lea     ecx, [ebp+var_14]
.text:004027AD                 push    ecx
.text:004027AE                 lea     ecx, [ebp+var_24]
.text:004027B1                 mov     [ebp+var_14], 0
.text:004027B8                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:004027BE                 push    offset __TI2?AVbad_alloc@std@@ ; throw info for 'class std::bad_alloc'
.text:004027C3                 lea     edx, [ebp+var_24]
.text:004027C6                 push    edx
.text:004027C7                 mov     [ebp+var_24], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:004027CE                 call    _CxxThrowException
.text:004027D3 ; ---------------------------------------------------------------------------
.text:004027D3
.text:004027D3 loc_4027D3:                             ; DATA XREF: .rdata:stru_405634↓o
.text:004027D3 ;   catch(...) // owned by 40278B
.text:004027D3                 mov     eax, [ebp+Dst]
.text:004027D6                 lea     ecx, [eax+1]
.text:004027D9                 mov     [ebp+var_10], esp
.text:004027DC                 mov     [ebp+var_18], eax
.text:004027DC ;   } // starts at 40278B
.text:004027DF ;   try {
.text:004027DF                 mov     byte ptr [ebp+var_4], 2
.text:004027E3                 call    sub_402A40
.text:004027E8                 mov     [ebp+Dst], eax
.text:004027EB                 mov     eax, offset loc_4027F1
.text:004027F0                 retn
.text:004027F1 ; ---------------------------------------------------------------------------
.text:004027F1
.text:004027F1 loc_4027F1:                             ; CODE XREF: sub_402720+D0↑j
.text:004027F1                                         ; DATA XREF: sub_402720+CB↑o
.text:004027F1                 mov     edi, [ebp+arg_0]
.text:004027F4                 mov     esi, [ebp+var_18]
.text:004027F7
.text:004027F7 loc_4027F7:                             ; CODE XREF: sub_402720+88↑j
.text:004027F7                 mov     ebx, [ebp+Size]
.text:004027FA                 test    ebx, ebx
.text:004027FC                 jz      short loc_402818
.text:004027FE                 cmp     dword ptr [edi+14h], 10h
.text:00402802                 jb      short loc_402808
.text:00402804                 mov     eax, [edi]
.text:00402806                 jmp     short loc_40280A
.text:00402808 ; ---------------------------------------------------------------------------
.text:00402808
.text:00402808 loc_402808:                             ; CODE XREF: sub_402720+E2↑j
.text:00402808                 mov     eax, edi
.text:0040280A
.text:0040280A loc_40280A:                             ; CODE XREF: sub_402720+E6↑j
.text:0040280A                 push    ebx             ; Size
.text:0040280B                 push    eax             ; Src
.text:0040280C                 mov     eax, [ebp+Dst]
.text:0040280F                 push    eax             ; Dst
.text:00402810                 call    memcpy
.text:00402815                 add     esp, 0Ch
.text:00402818
.text:00402818 loc_402818:                             ; CODE XREF: sub_402720+DC↑j
.text:00402818                 cmp     dword ptr [edi+14h], 10h
.text:0040281C                 jb      short loc_40282A
.text:0040281E                 mov     ecx, [edi]
.text:00402820                 push    ecx
.text:00402821                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00402827                 add     esp, 4
.text:0040282A
.text:0040282A loc_40282A:                             ; CODE XREF: sub_402720+FC↑j
.text:0040282A                 mov     eax, [ebp+Dst]
.text:0040282D                 mov     byte ptr [edi], 0
.text:00402830                 mov     [edi], eax
.text:00402832                 mov     [edi+14h], esi
.text:00402835                 mov     [edi+10h], ebx
.text:00402838                 cmp     esi, 10h
.text:0040283B                 jb      short loc_40283F
.text:0040283D                 mov     edi, eax
.text:0040283F
.text:0040283F loc_40283F:                             ; CODE XREF: sub_402720+11B↑j
.text:0040283F                 mov     byte ptr [edi+ebx], 0
.text:00402843                 mov     ecx, [ebp+var_C]
.text:00402846                 mov     large fs:0, ecx
.text:0040284D                 pop     ecx
.text:0040284E                 pop     edi
.text:0040284F                 pop     esi
.text:00402850                 pop     ebx
.text:00402851                 mov     esp, ebp
.text:00402853                 pop     ebp
.text:00402854                 retn    0Ch
.text:00402857 ; ---------------------------------------------------------------------------
.text:00402857
.text:00402857 loc_402857:                             ; DATA XREF: .rdata:stru_405624↓o
.text:00402857 ;   catch(...) // owned by 4027DF
.text:00402857                 mov     esi, [ebp+arg_0]
.text:0040285A                 cmp     dword ptr [esi+14h], 10h
.text:0040285E                 jb      short loc_40286C
.text:00402860                 mov     edx, [esi]
.text:00402862                 push    edx
.text:00402863                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00402869                 add     esp, 4
.text:0040286C
.text:0040286C loc_40286C:                             ; CODE XREF: sub_402720+13E↑j
.text:0040286C                 push    0
.text:0040286E                 mov     dword ptr [esi+14h], 0Fh
.text:00402875                 mov     dword ptr [esi+10h], 0
.text:0040287C                 push    0
.text:0040287E                 mov     byte ptr [esi], 0
.text:00402881                 call    _CxxThrowException
.text:00402881 ;   } // starts at 4027DF
.text:00402881 ; } // starts at 402720
.text:00402881 sub_402720      endp
.text:00402881
.text:00402881 ; ---------------------------------------------------------------------------
.text:00402886                 align 10h
.text:00402890
.text:00402890 ; =============== S U B R O U T I N E =======================================
.text:00402890
.text:00402890
.text:00402890 sub_402890      proc near               ; CODE XREF: sub_402170+163↑p
.text:00402890                                         ; sub_402170+1AA↑p ...
.text:00402890                 mov     eax, [ecx+8]
.text:00402893                 mov     edx, [eax]
.text:00402895                 mov     [ecx+8], edx
.text:00402898                 mov     edx, [eax]
.text:0040289A                 cmp     byte ptr [edx+15h], 0
.text:0040289E                 jnz     short loc_4028A3
.text:004028A0                 mov     [edx+4], ecx
.text:004028A3
.text:004028A3 loc_4028A3:                             ; CODE XREF: sub_402890+E↑j
.text:004028A3                 mov     edx, [ecx+4]
.text:004028A6                 mov     [eax+4], edx
.text:004028A9                 mov     edx, dword_42250C
.text:004028AF                 cmp     ecx, [edx+4]
.text:004028B2                 jnz     short loc_4028BD
.text:004028B4                 mov     [edx+4], eax
.text:004028B7                 mov     [eax], ecx
.text:004028B9                 mov     [ecx+4], eax
.text:004028BC                 retn
.text:004028BD ; ---------------------------------------------------------------------------
.text:004028BD
.text:004028BD loc_4028BD:                             ; CODE XREF: sub_402890+22↑j
.text:004028BD                 mov     edx, [ecx+4]
.text:004028C0                 cmp     ecx, [edx]
.text:004028C2                 jnz     short loc_4028CC
.text:004028C4                 mov     [edx], eax
.text:004028C6                 mov     [eax], ecx
.text:004028C8                 mov     [ecx+4], eax
.text:004028CB                 retn
.text:004028CC ; ---------------------------------------------------------------------------
.text:004028CC
.text:004028CC loc_4028CC:                             ; CODE XREF: sub_402890+32↑j
.text:004028CC                 mov     [edx+8], eax
.text:004028CF                 mov     [eax], ecx
.text:004028D1                 mov     [ecx+4], eax
.text:004028D4                 retn
.text:004028D4 sub_402890      endp
.text:004028D4
.text:004028D4 ; ---------------------------------------------------------------------------
.text:004028D5                 align 10h
.text:004028E0
.text:004028E0 ; =============== S U B R O U T I N E =======================================
.text:004028E0
.text:004028E0
.text:004028E0 sub_4028E0      proc near               ; CODE XREF: sub_402170+191↑p
.text:004028E0                                         ; sub_402170+1C0↑p ...
.text:004028E0                 mov     eax, [ecx]
.text:004028E2                 mov     edx, [eax+8]
.text:004028E5                 mov     [ecx], edx
.text:004028E7                 mov     edx, [eax+8]
.text:004028EA                 cmp     byte ptr [edx+15h], 0
.text:004028EE                 jnz     short loc_4028F3
.text:004028F0                 mov     [edx+4], ecx
.text:004028F3
.text:004028F3 loc_4028F3:                             ; CODE XREF: sub_4028E0+E↑j
.text:004028F3                 mov     edx, [ecx+4]
.text:004028F6                 mov     [eax+4], edx
.text:004028F9                 mov     edx, dword_42250C
.text:004028FF                 cmp     ecx, [edx+4]
.text:00402902                 jnz     short loc_40290E
.text:00402904                 mov     [edx+4], eax
.text:00402907                 mov     [eax+8], ecx
.text:0040290A                 mov     [ecx+4], eax
.text:0040290D                 retn
.text:0040290E ; ---------------------------------------------------------------------------
.text:0040290E
.text:0040290E loc_40290E:                             ; CODE XREF: sub_4028E0+22↑j
.text:0040290E                 mov     edx, [ecx+4]
.text:00402911                 cmp     ecx, [edx+8]
.text:00402914                 jnz     short loc_402920
.text:00402916                 mov     [edx+8], eax
.text:00402919                 mov     [eax+8], ecx
.text:0040291C                 mov     [ecx+4], eax
.text:0040291F                 retn
.text:00402920 ; ---------------------------------------------------------------------------
.text:00402920
.text:00402920 loc_402920:                             ; CODE XREF: sub_4028E0+34↑j
.text:00402920                 mov     [edx], eax
.text:00402922                 mov     [eax+8], ecx
.text:00402925                 mov     [ecx+4], eax
.text:00402928                 retn
.text:00402928 sub_4028E0      endp
.text:00402928
.text:00402928 ; ---------------------------------------------------------------------------
.text:00402929                 align 10h
.text:00402930
.text:00402930 ; =============== S U B R O U T I N E =======================================
.text:00402930
.text:00402930
.text:00402930 sub_402930      proc near               ; CODE XREF: sub_402440+163↑p
.text:00402930                                         ; sub_402440+1AA↑p ...
.text:00402930                 mov     eax, [ecx+8]
.text:00402933                 mov     edx, [eax]
.text:00402935                 mov     [ecx+8], edx
.text:00402938                 mov     edx, [eax]
.text:0040293A                 cmp     byte ptr [edx+15h], 0
.text:0040293E                 jnz     short loc_402943
.text:00402940                 mov     [edx+4], ecx
.text:00402943
.text:00402943 loc_402943:                             ; CODE XREF: sub_402930+E↑j
.text:00402943                 mov     edx, [ecx+4]
.text:00402946                 mov     [eax+4], edx
.text:00402949                 mov     edx, dword_42251C
.text:0040294F                 cmp     ecx, [edx+4]
.text:00402952                 jnz     short loc_40295D
.text:00402954                 mov     [edx+4], eax
.text:00402957                 mov     [eax], ecx
.text:00402959                 mov     [ecx+4], eax
.text:0040295C                 retn
.text:0040295D ; ---------------------------------------------------------------------------
.text:0040295D
.text:0040295D loc_40295D:                             ; CODE XREF: sub_402930+22↑j
.text:0040295D                 mov     edx, [ecx+4]
.text:00402960                 cmp     ecx, [edx]
.text:00402962                 jnz     short loc_40296C
.text:00402964                 mov     [edx], eax
.text:00402966                 mov     [eax], ecx
.text:00402968                 mov     [ecx+4], eax
.text:0040296B                 retn
.text:0040296C ; ---------------------------------------------------------------------------
.text:0040296C
.text:0040296C loc_40296C:                             ; CODE XREF: sub_402930+32↑j
.text:0040296C                 mov     [edx+8], eax
.text:0040296F                 mov     [eax], ecx
.text:00402971                 mov     [ecx+4], eax
.text:00402974                 retn
.text:00402974 sub_402930      endp
.text:00402974
.text:00402974 ; ---------------------------------------------------------------------------
.text:00402975                 align 10h
.text:00402980
.text:00402980 ; =============== S U B R O U T I N E =======================================
.text:00402980
.text:00402980
.text:00402980 sub_402980      proc near               ; CODE XREF: sub_402440+191↑p
.text:00402980                                         ; sub_402440+1C0↑p ...
.text:00402980                 mov     eax, [ecx]
.text:00402982                 mov     edx, [eax+8]
.text:00402985                 mov     [ecx], edx
.text:00402987                 mov     edx, [eax+8]
.text:0040298A                 cmp     byte ptr [edx+15h], 0
.text:0040298E                 jnz     short loc_402993
.text:00402990                 mov     [edx+4], ecx
.text:00402993
.text:00402993 loc_402993:                             ; CODE XREF: sub_402980+E↑j
.text:00402993                 mov     edx, [ecx+4]
.text:00402996                 mov     [eax+4], edx
.text:00402999                 mov     edx, dword_42251C
.text:0040299F                 cmp     ecx, [edx+4]
.text:004029A2                 jnz     short loc_4029AE
.text:004029A4                 mov     [edx+4], eax
.text:004029A7                 mov     [eax+8], ecx
.text:004029AA                 mov     [ecx+4], eax
.text:004029AD                 retn
.text:004029AE ; ---------------------------------------------------------------------------
.text:004029AE
.text:004029AE loc_4029AE:                             ; CODE XREF: sub_402980+22↑j
.text:004029AE                 mov     edx, [ecx+4]
.text:004029B1                 cmp     ecx, [edx+8]
.text:004029B4                 jnz     short loc_4029C0
.text:004029B6                 mov     [edx+8], eax
.text:004029B9                 mov     [eax+8], ecx
.text:004029BC                 mov     [ecx+4], eax
.text:004029BF                 retn
.text:004029C0 ; ---------------------------------------------------------------------------
.text:004029C0
.text:004029C0 loc_4029C0:                             ; CODE XREF: sub_402980+34↑j
.text:004029C0                 mov     [edx], eax
.text:004029C2                 mov     [eax+8], ecx
.text:004029C5                 mov     [ecx+4], eax
.text:004029C8                 retn
.text:004029C8 sub_402980      endp
.text:004029C8
.text:004029C8 ; ---------------------------------------------------------------------------
.text:004029C9                 align 10h
.text:004029D0
.text:004029D0 ; =============== S U B R O U T I N E =======================================
.text:004029D0
.text:004029D0
.text:004029D0 sub_4029D0      proc near               ; CODE XREF: sub_402170+B8↑p
.text:004029D0                                         ; sub_402440+B8↑p
.text:004029D0                 mov     ecx, [eax+8]
.text:004029D3                 cmp     byte ptr [ecx+15h], 0
.text:004029D7                 jnz     short locret_4029EB
.text:004029D9                 lea     esp, [esp+0]
.text:004029E0
.text:004029E0 loc_4029E0:                             ; CODE XREF: sub_4029D0+19↓j
.text:004029E0                 mov     eax, ecx
.text:004029E2                 mov     ecx, [eax+8]
.text:004029E5                 cmp     byte ptr [ecx+15h], 0
.text:004029E9                 jz      short loc_4029E0
.text:004029EB
.text:004029EB locret_4029EB:                          ; CODE XREF: sub_4029D0+7↑j
.text:004029EB                 retn
.text:004029EB sub_4029D0      endp
.text:004029EB
.text:004029EB ; ---------------------------------------------------------------------------
.text:004029EC                 align 10h
.text:004029F0
.text:004029F0 ; =============== S U B R O U T I N E =======================================
.text:004029F0
.text:004029F0
.text:004029F0 sub_4029F0      proc near               ; CODE XREF: sub_402170+23↑p
.text:004029F0                                         ; sub_402440+23↑p ...
.text:004029F0                 mov     ecx, [eax]
.text:004029F2                 cmp     byte ptr [ecx+15h], 0
.text:004029F6                 jnz     short locret_402A3A
.text:004029F8                 mov     edx, [ecx+8]
.text:004029FB                 cmp     byte ptr [edx+15h], 0
.text:004029FF                 jnz     short loc_402A1D
.text:00402A01                 mov     ecx, [edx]
.text:00402A03                 cmp     byte ptr [ecx+15h], 0
.text:00402A07                 jnz     short loc_402A1A
.text:00402A09                 lea     esp, [esp+0]
.text:00402A10
.text:00402A10 loc_402A10:                             ; CODE XREF: sub_4029F0+28↓j
.text:00402A10                 mov     edx, ecx
.text:00402A12                 mov     ecx, [edx]
.text:00402A14                 cmp     byte ptr [ecx+15h], 0
.text:00402A18                 jz      short loc_402A10
.text:00402A1A
.text:00402A1A loc_402A1A:                             ; CODE XREF: sub_4029F0+17↑j
.text:00402A1A                 mov     [eax], edx
.text:00402A1C                 retn
.text:00402A1D ; ---------------------------------------------------------------------------
.text:00402A1D
.text:00402A1D loc_402A1D:                             ; CODE XREF: sub_4029F0+F↑j
.text:00402A1D                 mov     ecx, [ecx+4]
.text:00402A20                 cmp     byte ptr [ecx+15h], 0
.text:00402A24                 jnz     short loc_402A38
.text:00402A26
.text:00402A26 loc_402A26:                             ; CODE XREF: sub_4029F0+46↓j
.text:00402A26                 mov     edx, [eax]
.text:00402A28                 cmp     edx, [ecx+8]
.text:00402A2B                 jnz     short loc_402A38
.text:00402A2D                 mov     [eax], ecx
.text:00402A2F                 mov     ecx, [ecx+4]
.text:00402A32                 cmp     byte ptr [ecx+15h], 0
.text:00402A36                 jz      short loc_402A26
.text:00402A38
.text:00402A38 loc_402A38:                             ; CODE XREF: sub_4029F0+34↑j
.text:00402A38                                         ; sub_4029F0+3B↑j
.text:00402A38                 mov     [eax], ecx
.text:00402A3A
.text:00402A3A locret_402A3A:                          ; CODE XREF: sub_4029F0+6↑j
.text:00402A3A                 retn
.text:00402A3A sub_4029F0      endp
.text:00402A3A
.text:00402A3A ; ---------------------------------------------------------------------------
.text:00402A3B                 align 10h
.text:00402A40
.text:00402A40 ; =============== S U B R O U T I N E =======================================
.text:00402A40
.text:00402A40 ; Attributes: bp-based frame
.text:00402A40
.text:00402A40 sub_402A40      proc near               ; CODE XREF: sub_402720+C3↑p
.text:00402A40
.text:00402A40 var_10          = dword ptr -10h
.text:00402A40 var_4           = dword ptr -4
.text:00402A40
.text:00402A40                 push    ebp
.text:00402A41                 mov     ebp, esp
.text:00402A43                 sub     esp, 10h
.text:00402A46                 xor     eax, eax
.text:00402A48                 test    ecx, ecx
.text:00402A4A                 jz      short loc_402A88
.text:00402A4C                 cmp     ecx, 0FFFFFFFFh
.text:00402A4F                 ja      short loc_402A5F
.text:00402A51                 push    ecx
.text:00402A52                 call    ds:??2@YAPAXI@Z ; operator new(uint)
.text:00402A58                 add     esp, 4
.text:00402A5B                 test    eax, eax
.text:00402A5D                 jnz     short loc_402A88
.text:00402A5F
.text:00402A5F loc_402A5F:                             ; CODE XREF: sub_402A40+F↑j
.text:00402A5F                 lea     eax, [ebp+var_4]
.text:00402A62                 push    eax
.text:00402A63                 lea     ecx, [ebp+var_10]
.text:00402A66                 mov     [ebp+var_4], 0
.text:00402A6D                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:00402A73                 push    offset __TI2?AVbad_alloc@std@@ ; throw info for 'class std::bad_alloc'
.text:00402A78                 lea     ecx, [ebp+var_10]
.text:00402A7B                 push    ecx
.text:00402A7C                 mov     [ebp+var_10], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:00402A83                 call    _CxxThrowException
.text:00402A88 ; ---------------------------------------------------------------------------
.text:00402A88
.text:00402A88 loc_402A88:                             ; CODE XREF: sub_402A40+A↑j
.text:00402A88                                         ; sub_402A40+1D↑j
.text:00402A88                 mov     esp, ebp
.text:00402A8A                 pop     ebp
.text:00402A8B                 retn
.text:00402A8B sub_402A40      endp
.text:00402A8B
.text:00402A8B ; ---------------------------------------------------------------------------
.text:00402A8C                 align 10h
.text:00402A90
.text:00402A90 ; =============== S U B R O U T I N E =======================================
.text:00402A90
.text:00402A90 ; Attributes: bp-based frame
.text:00402A90
.text:00402A90 sub_402A90      proc near               ; CODE XREF: _main+312↑p
.text:00402A90                                         ; _main+3C1↑p
.text:00402A90
.text:00402A90 var_20          = dword ptr -20h
.text:00402A90 var_1C          = byte ptr -1Ch
.text:00402A90 var_18          = dword ptr -18h
.text:00402A90 var_14          = dword ptr -14h
.text:00402A90 var_10          = dword ptr -10h
.text:00402A90 var_C           = dword ptr -0Ch
.text:00402A90 var_4           = dword ptr -4
.text:00402A90 arg_0           = dword ptr  8
.text:00402A90 arg_4           = dword ptr  0Ch
.text:00402A90
.text:00402A90 ; FUNCTION CHUNK AT .text:00402070 SIZE 00000019 BYTES
.text:00402A90 ; FUNCTION CHUNK AT .text:004041C0 SIZE 00000035 BYTES
.text:00402A90
.text:00402A90 ; __unwind { // SEH_402A90
.text:00402A90                 push    ebp
.text:00402A91                 mov     ebp, esp
.text:00402A93                 push    0FFFFFFFFh
.text:00402A95                 push    offset SEH_402A90
.text:00402A9A                 mov     eax, large fs:0
.text:00402AA0                 push    eax
.text:00402AA1                 sub     esp, 14h
.text:00402AA4                 push    ebx
.text:00402AA5                 push    esi
.text:00402AA6                 push    edi
.text:00402AA7                 mov     eax, ___security_cookie
.text:00402AAC                 xor     eax, ebp
.text:00402AAE                 push    eax
.text:00402AAF                 lea     eax, [ebp+var_C]
.text:00402AB2                 mov     large fs:0, eax
.text:00402AB8                 mov     [ebp+var_10], esp
.text:00402ABB                 mov     esi, [ebp+arg_0]
.text:00402ABE                 mov     eax, [esi]
.text:00402AC0                 mov     edx, [eax+4]
.text:00402AC3                 mov     ecx, [edx+esi+24h]
.text:00402AC7                 mov     eax, [edx+esi+20h]
.text:00402ACB                 xor     ebx, ebx
.text:00402ACD                 mov     [ebp+var_14], ebx
.text:00402AD0                 cmp     ecx, ebx
.text:00402AD2                 jl      short loc_402AF0
.text:00402AD4                 jg      short loc_402AE5
.text:00402AD6                 cmp     eax, ebx
.text:00402AD8                 jbe     short loc_402AF0
.text:00402ADA                 cmp     ecx, ebx
.text:00402ADC                 jl      short loc_402AF0
.text:00402ADE                 jg      short loc_402AE5
.text:00402AE0                 cmp     eax, 1
.text:00402AE3                 jbe     short loc_402AF0
.text:00402AE5
.text:00402AE5 loc_402AE5:                             ; CODE XREF: sub_402A90+44↑j
.text:00402AE5                                         ; sub_402A90+4E↑j
.text:00402AE5                 sub     eax, 1
.text:00402AE8                 sbb     ecx, ebx
.text:00402AEA                 mov     edi, eax
.text:00402AEC                 mov     ebx, ecx
.text:00402AEE                 jmp     short loc_402AF2
.text:00402AF0 ; ---------------------------------------------------------------------------
.text:00402AF0
.text:00402AF0 loc_402AF0:                             ; CODE XREF: sub_402A90+42↑j
.text:00402AF0                                         ; sub_402A90+48↑j ...
.text:00402AF0                 xor     edi, edi
.text:00402AF2
.text:00402AF2 loc_402AF2:                             ; CODE XREF: sub_402A90+5E↑j
.text:00402AF2                 mov     ecx, [edx+esi+38h]
.text:00402AF6                 mov     [ebp+var_20], esi
.text:00402AF9                 test    ecx, ecx
.text:00402AFB                 jz      short loc_402B04
.text:00402AFD                 mov     edx, [ecx]
.text:00402AFF                 mov     eax, [edx+4]
.text:00402B02                 call    eax
.text:00402B04
.text:00402B04 loc_402B04:                             ; CODE XREF: sub_402A90+6B↑j
.text:00402B04 ;   try {
.text:00402B04                 mov     [ebp+var_4], 0
.text:00402B0B                 mov     ecx, [esi]
.text:00402B0D                 mov     eax, [ecx+4]
.text:00402B10                 cmp     dword ptr [eax+esi+0Ch], 0
.text:00402B15                 jnz     short loc_402B27
.text:00402B17                 mov     eax, [eax+esi+3Ch]
.text:00402B1B                 test    eax, eax
.text:00402B1D                 jz      short loc_402B27
.text:00402B1F                 mov     ecx, eax
.text:00402B21                 call    ds:?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char>>::flush(void)
.text:00402B27
.text:00402B27 loc_402B27:                             ; CODE XREF: sub_402A90+85↑j
.text:00402B27                                         ; sub_402A90+8D↑j
.text:00402B27                 mov     eax, [esi]
.text:00402B29                 mov     eax, [eax+4]
.text:00402B2C                 cmp     dword ptr [eax+esi+0Ch], 0
.text:00402B31                 setz    cl
.text:00402B34                 mov     [ebp+var_1C], cl
.text:00402B34 ;   } // starts at 402B04
.text:00402B37 ;   try {
.text:00402B37                 mov     [ebp+var_4], 1
.text:00402B3E                 test    cl, cl
.text:00402B40                 jnz     short loc_402B4E
.text:00402B42                 mov     [ebp+var_14], 4
.text:00402B49                 jmp     loc_402BE5
.text:00402B49 ;   } // starts at 402B37
.text:00402B4E ; ---------------------------------------------------------------------------
.text:00402B4E
.text:00402B4E loc_402B4E:                             ; CODE XREF: sub_402A90+B0↑j
.text:00402B4E ;   try {
.text:00402B4E                 mov     byte ptr [ebp+var_4], 2
.text:00402B52                 mov     eax, [eax+esi+14h]
.text:00402B56                 and     eax, 1C0h
.text:00402B5B                 cmp     eax, 40h ; '@'
.text:00402B5E                 jz      short loc_402B97
.text:00402B60
.text:00402B60 loc_402B60:                             ; CODE XREF: sub_402A90+1B9↓j
.text:00402B60                 test    ebx, ebx
.text:00402B62                 jl      short loc_402B91
.text:00402B64                 jg      short loc_402B6A
.text:00402B66                 test    edi, edi
.text:00402B68                 jz      short loc_402B91
.text:00402B6A
.text:00402B6A loc_402B6A:                             ; CODE XREF: sub_402A90+D4↑j
.text:00402B6A                 mov     edx, [esi]
.text:00402B6C                 mov     eax, [edx+4]
.text:00402B6F                 mov     cl, [eax+esi+40h]
.text:00402B73                 mov     byte ptr [ebp+var_18], cl
.text:00402B76                 mov     edx, [ebp+var_18]
.text:00402B79                 mov     ecx, [eax+esi+38h]
.text:00402B7D                 push    edx
.text:00402B7E                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:00402B84                 cmp     eax, 0FFFFFFFFh
.text:00402B87                 jnz     loc_402C43
.text:00402B8D                 or      [ebp+var_14], 4
.text:00402B91
.text:00402B91 loc_402B91:                             ; CODE XREF: sub_402A90+D2↑j
.text:00402B91                                         ; sub_402A90+D8↑j
.text:00402B91                 cmp     [ebp+var_14], 0
.text:00402B95                 jnz     short loc_402BCF
.text:00402B97
.text:00402B97 loc_402B97:                             ; CODE XREF: sub_402A90+CE↑j
.text:00402B97                 mov     eax, [esi]
.text:00402B99                 mov     ecx, [eax+4]
.text:00402B9C                 mov     ecx, [ecx+esi+38h]
.text:00402BA0                 xor     eax, eax
.text:00402BA2                 push    eax
.text:00402BA3                 mov     eax, 1
.text:00402BA8                 push    eax
.text:00402BA9                 mov     eax, offset asc_4051C0 ; "/"
.text:00402BAE                 push    eax
.text:00402BAF                 call    ds:?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputn(char const *,__int64)
.text:00402BB5                 mov     ecx, 1
.text:00402BBA                 cmp     eax, ecx
.text:00402BBC                 jnz     short loc_402BC8
.text:00402BBE                 xor     eax, eax
.text:00402BC0                 cmp     edx, eax
.text:00402BC2                 jz      loc_402C50
.text:00402BC8
.text:00402BC8 loc_402BC8:                             ; CODE XREF: sub_402A90+12C↑j
.text:00402BC8                 mov     [ebp+var_14], 4
.text:00402BCF
.text:00402BCF loc_402BCF:                             ; CODE XREF: sub_402A90+105↑j
.text:00402BCF                                         ; sub_402A90+1C2↓j ...
.text:00402BCF                 mov     edx, [esi]
.text:00402BD1                 mov     eax, [edx+4]
.text:00402BD4                 xor     ecx, ecx
.text:00402BD6                 mov     [eax+esi+20h], ecx
.text:00402BDA                 mov     [eax+esi+24h], ecx
.text:00402BDA ;   } // starts at 402B4E
.text:00402BDE ;   try {
.text:00402BDE                 mov     [ebp+var_4], 1
.text:00402BE5
.text:00402BE5 loc_402BE5:                             ; CODE XREF: sub_402A90+B9↑j
.text:00402BE5                                         ; sub_402A90+226↓j
.text:00402BE5                 mov     ecx, [esi]
.text:00402BE7                 mov     eax, [ebp+var_14]
.text:00402BEA                 mov     ecx, [ecx+4]
.text:00402BED                 push    0
.text:00402BEF                 push    eax
.text:00402BF0                 add     ecx, esi
.text:00402BF2                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:00402BF2 ;   } // starts at 402BDE
.text:00402BF8 ;   try {
.text:00402BF8                 mov     [ebp+var_4], 4
.text:00402BFF                 call    ds:?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
.text:00402C05                 mov     edi, [ebp+var_20]
.text:00402C08                 test    al, al
.text:00402C0A                 jnz     short loc_402C14
.text:00402C0C                 mov     ecx, edi
.text:00402C0E                 call    ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
.text:00402C0E ;   } // starts at 402BF8
.text:00402C14
.text:00402C14 loc_402C14:                             ; CODE XREF: sub_402A90+17A↑j
.text:00402C14                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00402C1B                 mov     edx, [edi]
.text:00402C1D                 mov     eax, [edx+4]
.text:00402C20                 mov     ecx, [eax+edi+38h]
.text:00402C24                 test    ecx, ecx
.text:00402C26                 jz      short loc_402C2F
.text:00402C28                 mov     edx, [ecx]
.text:00402C2A                 mov     eax, [edx+8]
.text:00402C2D                 call    eax
.text:00402C2F
.text:00402C2F loc_402C2F:                             ; CODE XREF: sub_402A90+196↑j
.text:00402C2F                 mov     eax, esi
.text:00402C31                 mov     ecx, [ebp+var_C]
.text:00402C34                 mov     large fs:0, ecx
.text:00402C3B                 pop     ecx
.text:00402C3C                 pop     edi
.text:00402C3D                 pop     esi
.text:00402C3E                 pop     ebx
.text:00402C3F                 mov     esp, ebp
.text:00402C41                 pop     ebp
.text:00402C42                 retn
.text:00402C43 ; ---------------------------------------------------------------------------
.text:00402C43
.text:00402C43 loc_402C43:                             ; CODE XREF: sub_402A90+F7↑j
.text:00402C43                 add     edi, 0FFFFFFFFh
.text:00402C46                 adc     ebx, 0FFFFFFFFh
.text:00402C49                 jmp     loc_402B60
.text:00402C49 ; ---------------------------------------------------------------------------
.text:00402C4E                 align 10h
.text:00402C50
.text:00402C50 loc_402C50:                             ; CODE XREF: sub_402A90+132↑j
.text:00402C50                                         ; sub_402A90+200↓j
.text:00402C50                 test    ebx, ebx
.text:00402C52                 jl      loc_402BCF
.text:00402C58                 jg      short loc_402C62
.text:00402C5A                 test    edi, edi
.text:00402C5C                 jz      loc_402BCF
.text:00402C62
.text:00402C62 loc_402C62:                             ; CODE XREF: sub_402A90+1C8↑j
.text:00402C62                 mov     edx, [esi]
.text:00402C64                 mov     eax, [edx+4]
.text:00402C67                 mov     cl, [eax+esi+40h]
.text:00402C6B                 mov     byte ptr [ebp+var_18], cl
.text:00402C6E                 mov     edx, [ebp+var_18]
.text:00402C71                 mov     ecx, [eax+esi+38h]
.text:00402C75                 push    edx
.text:00402C76                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:00402C7C                 cmp     eax, 0FFFFFFFFh
.text:00402C7F                 jnz     short loc_402C8A
.text:00402C81                 or      [ebp+var_14], 4
.text:00402C85                 jmp     loc_402BCF
.text:00402C8A ; ---------------------------------------------------------------------------
.text:00402C8A
.text:00402C8A loc_402C8A:                             ; CODE XREF: sub_402A90+1EF↑j
.text:00402C8A                 add     edi, 0FFFFFFFFh
.text:00402C8D                 adc     ebx, 0FFFFFFFFh
.text:00402C90                 jmp     short loc_402C50
.text:00402C92 ; ---------------------------------------------------------------------------
.text:00402C92
.text:00402C92 loc_402C92:                             ; DATA XREF: .rdata:stru_4055BC↓o
.text:00402C92 ;   catch(...) // owned by 402B4E
.text:00402C92                 mov     eax, [ebp+arg_0]
.text:00402C95                 mov     ecx, [eax]
.text:00402C97                 mov     ecx, [ecx+4]
.text:00402C9A                 push    1
.text:00402C9C                 push    4
.text:00402C9E                 add     ecx, eax
.text:00402CA0                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:00402CA6 ;   try {
.text:00402CA6                 mov     [ebp+var_4], 1
.text:00402CAD                 mov     eax, offset loc_402CB3
.text:00402CB2                 retn
.text:00402CB3 ; ---------------------------------------------------------------------------
.text:00402CB3
.text:00402CB3 loc_402CB3:                             ; CODE XREF: sub_402A90+222↑j
.text:00402CB3                                         ; DATA XREF: sub_402A90+21D↑o
.text:00402CB3                 mov     esi, [ebp+arg_0]
.text:00402CB6                 jmp     loc_402BE5
.text:00402CB6 ;   } // starts at 402CA6
.text:00402CB6 ; } // starts at 402A90
.text:00402CB6 sub_402A90      endp
.text:00402CB6
.text:00402CB6 ; ---------------------------------------------------------------------------
.text:00402CBB                 align 10h
.text:00402CC0
.text:00402CC0 ; =============== S U B R O U T I N E =======================================
.text:00402CC0
.text:00402CC0 ; Attributes: bp-based frame
.text:00402CC0
.text:00402CC0 sub_402CC0      proc near               ; CODE XREF: _main+323↑p
.text:00402CC0                                         ; _main+3D2↑p
.text:00402CC0
.text:00402CC0 var_24          = dword ptr -24h
.text:00402CC0 var_20          = byte ptr -20h
.text:00402CC0 var_1C          = dword ptr -1Ch
.text:00402CC0 var_18          = dword ptr -18h
.text:00402CC0 var_14          = dword ptr -14h
.text:00402CC0 var_10          = dword ptr -10h
.text:00402CC0 var_C           = dword ptr -0Ch
.text:00402CC0 var_4           = dword ptr -4
.text:00402CC0 arg_0           = dword ptr  8
.text:00402CC0 arg_4           = dword ptr  0Ch
.text:00402CC0
.text:00402CC0 ; FUNCTION CHUNK AT .text:00402070 SIZE 00000019 BYTES
.text:00402CC0 ; FUNCTION CHUNK AT .text:00404180 SIZE 00000035 BYTES
.text:00402CC0
.text:00402CC0 ; __unwind { // SEH_402CC0
.text:00402CC0                 push    ebp
.text:00402CC1                 mov     ebp, esp
.text:00402CC3                 push    0FFFFFFFFh
.text:00402CC5                 push    offset SEH_402CC0
.text:00402CCA                 mov     eax, large fs:0
.text:00402CD0                 push    eax
.text:00402CD1                 sub     esp, 18h
.text:00402CD4                 push    ebx
.text:00402CD5                 push    esi
.text:00402CD6                 push    edi
.text:00402CD7                 mov     eax, ___security_cookie
.text:00402CDC                 xor     eax, ebp
.text:00402CDE                 push    eax
.text:00402CDF                 lea     eax, [ebp+var_C]
.text:00402CE2                 mov     large fs:0, eax
.text:00402CE8                 mov     [ebp+var_10], esp
.text:00402CEB                 mov     esi, [ebp+arg_0]
.text:00402CEE                 mov     eax, [esi]
.text:00402CF0                 mov     ecx, [eax+4]
.text:00402CF3                 mov     ecx, [ecx+esi+38h]
.text:00402CF7                 xor     ebx, ebx
.text:00402CF9                 mov     edi, esi
.text:00402CFB                 mov     byte ptr [ebp+var_1C], 20h ; ' '
.text:00402CFF                 mov     [ebp+var_14], ebx
.text:00402D02                 mov     [ebp+var_24], edi
.text:00402D05                 cmp     ecx, ebx
.text:00402D07                 jz      short loc_402D10
.text:00402D09                 mov     edx, [ecx]
.text:00402D0B                 mov     eax, [edx+4]
.text:00402D0E                 call    eax
.text:00402D10
.text:00402D10 loc_402D10:                             ; CODE XREF: sub_402CC0+47↑j
.text:00402D10 ;   try {
.text:00402D10                 mov     [ebp+var_4], ebx
.text:00402D13                 mov     ecx, [esi]
.text:00402D15                 mov     eax, [ecx+4]
.text:00402D18                 cmp     [eax+esi+0Ch], ebx
.text:00402D1C                 jnz     short loc_402D2E
.text:00402D1E                 mov     eax, [eax+esi+3Ch]
.text:00402D22                 cmp     eax, ebx
.text:00402D24                 jz      short loc_402D2E
.text:00402D26                 mov     ecx, eax
.text:00402D28                 call    ds:?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char>>::flush(void)
.text:00402D2E
.text:00402D2E loc_402D2E:                             ; CODE XREF: sub_402CC0+5C↑j
.text:00402D2E                                         ; sub_402CC0+64↑j
.text:00402D2E                 mov     eax, [esi]
.text:00402D30                 mov     edx, [eax+4]
.text:00402D33                 add     edx, esi
.text:00402D35                 cmp     [edx+0Ch], ebx
.text:00402D38                 setz    al
.text:00402D3B                 mov     [ebp+var_20], al
.text:00402D3B ;   } // starts at 402D10
.text:00402D3E ;   try {
.text:00402D3E                 mov     [ebp+var_4], 1
.text:00402D45                 test    al, al
.text:00402D47                 jz      loc_402E53
.text:00402D4D                 mov     ecx, [edx+24h]
.text:00402D50                 mov     eax, [edx+20h]
.text:00402D53                 cmp     ecx, ebx
.text:00402D55                 jg      short loc_402D62
.text:00402D57                 jl      short loc_402D5E
.text:00402D59                 cmp     eax, 1
.text:00402D5C                 ja      short loc_402D62
.text:00402D5E
.text:00402D5E loc_402D5E:                             ; CODE XREF: sub_402CC0+97↑j
.text:00402D5E                 xor     edi, edi
.text:00402D60                 jmp     short loc_402D6B
.text:00402D62 ; ---------------------------------------------------------------------------
.text:00402D62
.text:00402D62 loc_402D62:                             ; CODE XREF: sub_402CC0+95↑j
.text:00402D62                                         ; sub_402CC0+9C↑j
.text:00402D62                 sub     eax, 1
.text:00402D65                 sbb     ecx, ebx
.text:00402D67                 mov     edi, eax
.text:00402D69                 mov     ebx, ecx
.text:00402D69 ;   } // starts at 402D3E
.text:00402D6B
.text:00402D6B loc_402D6B:                             ; CODE XREF: sub_402CC0+A0↑j
.text:00402D6B ;   try {
.text:00402D6B                 mov     byte ptr [ebp+var_4], 2
.text:00402D6F                 mov     edx, [edx+14h]
.text:00402D72                 and     edx, 1C0h
.text:00402D78                 cmp     edx, 40h ; '@'
.text:00402D7B                 jz      short loc_402DC2
.text:00402D7D                 lea     ecx, [ecx+0]
.text:00402D80
.text:00402D80 loc_402D80:                             ; CODE XREF: sub_402CC0+100↓j
.text:00402D80                 cmp     [ebp+var_14], 0
.text:00402D84                 jnz     loc_402E47
.text:00402D8A                 test    ebx, ebx
.text:00402D8C                 jl      short loc_402DC2
.text:00402D8E                 jg      short loc_402D94
.text:00402D90                 test    edi, edi
.text:00402D92                 jz      short loc_402DC2
.text:00402D94
.text:00402D94 loc_402D94:                             ; CODE XREF: sub_402CC0+CE↑j
.text:00402D94                 mov     edx, [esi]
.text:00402D96                 mov     eax, [edx+4]
.text:00402D99                 mov     cl, [eax+esi+40h]
.text:00402D9D                 mov     byte ptr [ebp+var_18], cl
.text:00402DA0                 mov     edx, [ebp+var_18]
.text:00402DA3                 mov     ecx, [eax+esi+38h]
.text:00402DA7                 push    edx
.text:00402DA8                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:00402DAE                 cmp     eax, 0FFFFFFFFh
.text:00402DB1                 jnz     short loc_402DBA
.text:00402DB3                 mov     [ebp+var_14], 4
.text:00402DBA
.text:00402DBA loc_402DBA:                             ; CODE XREF: sub_402CC0+F1↑j
.text:00402DBA                 add     edi, 0FFFFFFFFh
.text:00402DBD                 adc     ebx, 0FFFFFFFFh
.text:00402DC0                 jmp     short loc_402D80
.text:00402DC2 ; ---------------------------------------------------------------------------
.text:00402DC2
.text:00402DC2 loc_402DC2:                             ; CODE XREF: sub_402CC0+BB↑j
.text:00402DC2                                         ; sub_402CC0+CC↑j ...
.text:00402DC2                 mov     eax, [esi]
.text:00402DC4                 mov     ecx, [eax+4]
.text:00402DC7                 mov     edx, [ebp+var_1C]
.text:00402DCA                 mov     ecx, [ecx+esi+38h]
.text:00402DCE                 push    edx
.text:00402DCF                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:00402DD5                 cmp     eax, 0FFFFFFFFh
.text:00402DD8                 jnz     short loc_402DE1
.text:00402DDA                 mov     [ebp+var_14], 4
.text:00402DE1
.text:00402DE1 loc_402DE1:                             ; CODE XREF: sub_402CC0+118↑j
.text:00402DE1                                         ; sub_402CC0+15F↓j
.text:00402DE1                 cmp     [ebp+var_14], 0
.text:00402DE5                 jnz     short loc_402E47
.text:00402DE7                 test    ebx, ebx
.text:00402DE9                 jl      short loc_402E47
.text:00402DEB                 jg      short loc_402DF1
.text:00402DED                 test    edi, edi
.text:00402DEF                 jz      short loc_402E47
.text:00402DF1
.text:00402DF1 loc_402DF1:                             ; CODE XREF: sub_402CC0+12B↑j
.text:00402DF1                 mov     eax, [esi]
.text:00402DF3                 mov     eax, [eax+4]
.text:00402DF6                 mov     dl, [eax+esi+40h]
.text:00402DFA                 mov     eax, [eax+esi+38h]
.text:00402DFE                 mov     byte ptr [ebp+var_18], dl
.text:00402E01                 mov     ecx, [ebp+var_18]
.text:00402E04                 push    ecx
.text:00402E05                 mov     ecx, eax
.text:00402E07                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:00402E0D                 cmp     eax, 0FFFFFFFFh
.text:00402E10                 jnz     short loc_402E19
.text:00402E12                 mov     [ebp+var_14], 4
.text:00402E19
.text:00402E19 loc_402E19:                             ; CODE XREF: sub_402CC0+150↑j
.text:00402E19                 add     edi, 0FFFFFFFFh
.text:00402E1C                 adc     ebx, 0FFFFFFFFh
.text:00402E1F                 jmp     short loc_402DE1
.text:00402E21 ; ---------------------------------------------------------------------------
.text:00402E21
.text:00402E21 loc_402E21:                             ; DATA XREF: .rdata:stru_40554C↓o
.text:00402E21 ;   catch(...) // owned by 402D6B
.text:00402E21                 mov     eax, [ebp+arg_0]
.text:00402E24                 mov     edx, [eax]
.text:00402E26                 mov     ecx, [edx+4]
.text:00402E29                 push    1
.text:00402E2B                 push    4
.text:00402E2D                 add     ecx, eax
.text:00402E2F                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:00402E2F ;   } // starts at 402D6B
.text:00402E35 ;   try {
.text:00402E35                 mov     [ebp+var_4], 1
.text:00402E3C                 mov     eax, offset loc_402E42
.text:00402E41                 retn
.text:00402E42 ; ---------------------------------------------------------------------------
.text:00402E42
.text:00402E42 loc_402E42:                             ; CODE XREF: sub_402CC0+181↑j
.text:00402E42                                         ; DATA XREF: sub_402CC0+17C↑o
.text:00402E42                 mov     esi, [ebp+arg_0]
.text:00402E45                 jmp     short loc_402E4E
.text:00402E45 ;   } // starts at 402E35
.text:00402E47 ; ---------------------------------------------------------------------------
.text:00402E47
.text:00402E47 loc_402E47:                             ; CODE XREF: sub_402CC0+C4↑j
.text:00402E47                                         ; sub_402CC0+125↑j ...
.text:00402E47 ;   try {
.text:00402E47                 mov     [ebp+var_4], 1
.text:00402E4E
.text:00402E4E loc_402E4E:                             ; CODE XREF: sub_402CC0+185↑j
.text:00402E4E                 mov     edi, [ebp+var_24]
.text:00402E51                 xor     ebx, ebx
.text:00402E53
.text:00402E53 loc_402E53:                             ; CODE XREF: sub_402CC0+87↑j
.text:00402E53                 mov     eax, [esi]
.text:00402E55                 mov     eax, [eax+4]
.text:00402E58                 mov     ecx, [ebp+var_14]
.text:00402E5B                 mov     [eax+esi+20h], ebx
.text:00402E5F                 mov     [eax+esi+24h], ebx
.text:00402E63                 mov     edx, [esi]
.text:00402E65                 push    ebx
.text:00402E66                 push    ecx
.text:00402E67                 mov     ecx, [edx+4]
.text:00402E6A                 add     ecx, esi
.text:00402E6C                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:00402E6C ;   } // starts at 402E47
.text:00402E72 ;   try {
.text:00402E72                 mov     [ebp+var_4], 4
.text:00402E79                 call    ds:?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
.text:00402E7F                 test    al, al
.text:00402E81                 jnz     short loc_402E8B
.text:00402E83                 mov     ecx, edi
.text:00402E85                 call    ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
.text:00402E85 ;   } // starts at 402E72
.text:00402E8B
.text:00402E8B loc_402E8B:                             ; CODE XREF: sub_402CC0+1C1↑j
.text:00402E8B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00402E92                 mov     eax, [edi]
.text:00402E94                 mov     ecx, [eax+4]
.text:00402E97                 mov     ecx, [ecx+edi+38h]
.text:00402E9B                 cmp     ecx, ebx
.text:00402E9D                 jz      short loc_402EA6
.text:00402E9F                 mov     edx, [ecx]
.text:00402EA1                 mov     eax, [edx+8]
.text:00402EA4                 call    eax
.text:00402EA6
.text:00402EA6 loc_402EA6:                             ; CODE XREF: sub_402CC0+1DD↑j
.text:00402EA6                 mov     eax, esi
.text:00402EA8                 mov     ecx, [ebp+var_C]
.text:00402EAB                 mov     large fs:0, ecx
.text:00402EB2                 pop     ecx
.text:00402EB3                 pop     edi
.text:00402EB4                 pop     esi
.text:00402EB5                 pop     ebx
.text:00402EB6                 mov     esp, ebp
.text:00402EB8                 pop     ebp
.text:00402EB9                 retn
.text:00402EB9 ; } // starts at 402CC0
.text:00402EB9 sub_402CC0      endp
.text:00402EB9
.text:00402EB9 ; ---------------------------------------------------------------------------
.text:00402EBA                 align 10h
.text:00402EC0
.text:00402EC0 ; =============== S U B R O U T I N E =======================================
.text:00402EC0
.text:00402EC0 ; Attributes: bp-based frame
.text:00402EC0
.text:00402EC0 sub_402EC0      proc near               ; DATA XREF: .rdata:004054D8↓o
.text:00402EC0
.text:00402EC0 arg_0           = dword ptr  8
.text:00402EC0
.text:00402EC0                 push    ebp
.text:00402EC1                 mov     ebp, esp
.text:00402EC3                 mov     eax, [ebp+arg_0]
.text:00402EC6                 push    esi
.text:00402EC7                 push    eax
.text:00402EC8                 mov     esi, ecx
.text:00402ECA                 call    ds:__imp_??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.text:00402ED0                 mov     dword ptr [esi], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:00402ED6                 mov     eax, esi
.text:00402ED8                 pop     esi
.text:00402ED9                 pop     ebp
.text:00402EDA                 retn    4
.text:00402EDA sub_402EC0      endp
.text:00402EDA
.text:00402EDA ; ---------------------------------------------------------------------------
.text:00402EDD                 align 10h
.text:00402EE0
.text:00402EE0 ; =============== S U B R O U T I N E =======================================
.text:00402EE0
.text:00402EE0 ; Attributes: bp-based frame
.text:00402EE0
.text:00402EE0 sub_402EE0      proc near               ; CODE XREF: sub_4010F0+1CC↑p
.text:00402EE0                                         ; sub_4010F0+321↑p ...
.text:00402EE0
.text:00402EE0 var_C           = byte ptr -0Ch
.text:00402EE0 var_4           = dword ptr -4
.text:00402EE0 arg_0           = dword ptr  8
.text:00402EE0
.text:00402EE0                 push    ebp
.text:00402EE1                 mov     ebp, esp
.text:00402EE3                 sub     esp, 0Ch
.text:00402EE6                 cmp     dword_422510, 0
.text:00402EED                 push    edi
.text:00402EEE                 mov     edi, eax
.text:00402EF0                 mov     [ebp+var_4], 0
.text:00402EF7                 jnz     short loc_402F11
.text:00402EF9                 mov     ecx, dword_42250C
.text:00402EFF                 push    edi
.text:00402F00                 push    1
.text:00402F02                 push    ebx
.text:00402F03                 call    sub_403280
.text:00402F08                 mov     eax, ebx
.text:00402F0A                 pop     edi
.text:00402F0B                 mov     esp, ebp
.text:00402F0D                 pop     ebp
.text:00402F0E                 retn    4
.text:00402F11 ; ---------------------------------------------------------------------------
.text:00402F11
.text:00402F11 loc_402F11:                             ; CODE XREF: sub_402EE0+17↑j
.text:00402F11                 mov     eax, dword_42250C
.text:00402F16                 push    esi
.text:00402F17                 mov     esi, [ebp+arg_0]
.text:00402F1A                 cmp     esi, [eax]
.text:00402F1C                 jnz     short loc_402F3F
.text:00402F1E                 mov     eax, [edi+0Ch]
.text:00402F21                 cmp     eax, [esi+0Ch]
.text:00402F24                 jge     loc_40304A
.text:00402F2A                 push    edi
.text:00402F2B
.text:00402F2B loc_402F2B:                             ; CODE XREF: sub_402EE0+FD↓j
.text:00402F2B                 push    1
.text:00402F2D                 push    ebx
.text:00402F2E                 mov     ecx, esi
.text:00402F30                 call    sub_403280
.text:00402F35                 pop     esi
.text:00402F36                 mov     eax, ebx
.text:00402F38                 pop     edi
.text:00402F39                 mov     esp, ebp
.text:00402F3B                 pop     ebp
.text:00402F3C                 retn    4
.text:00402F3F ; ---------------------------------------------------------------------------
.text:00402F3F
.text:00402F3F loc_402F3F:                             ; CODE XREF: sub_402EE0+3C↑j
.text:00402F3F                 cmp     esi, eax
.text:00402F41                 jnz     short loc_402F65
.text:00402F43                 mov     ecx, [eax+8]
.text:00402F46                 mov     edx, [ecx+0Ch]
.text:00402F49                 cmp     edx, [edi+0Ch]
.text:00402F4C                 jge     loc_40304A
.text:00402F52                 push    edi
.text:00402F53                 push    0
.text:00402F55                 push    ebx
.text:00402F56                 call    sub_403280
.text:00402F5B                 pop     esi
.text:00402F5C                 mov     eax, ebx
.text:00402F5E                 pop     edi
.text:00402F5F                 mov     esp, ebp
.text:00402F61                 pop     ebp
.text:00402F62                 retn    4
.text:00402F65 ; ---------------------------------------------------------------------------
.text:00402F65
.text:00402F65 loc_402F65:                             ; CODE XREF: sub_402EE0+61↑j
.text:00402F65                 mov     eax, [edi+0Ch]
.text:00402F68                 cmp     [esi+0Ch], eax
.text:00402F6B                 jle     loc_402FF8
.text:00402F71                 mov     ecx, esi
.text:00402F73                 mov     [ebp+var_4], ecx
.text:00402F76                 cmp     byte ptr [esi+15h], 0
.text:00402F7A                 jz      short loc_402F81
.text:00402F7C                 mov     ecx, [esi+8]
.text:00402F7F                 jmp     short loc_402FCA
.text:00402F81 ; ---------------------------------------------------------------------------
.text:00402F81
.text:00402F81 loc_402F81:                             ; CODE XREF: sub_402EE0+9A↑j
.text:00402F81                 mov     eax, [esi]
.text:00402F83                 cmp     byte ptr [eax+15h], 0
.text:00402F87                 jnz     short loc_402FA1
.text:00402F89                 mov     ecx, eax
.text:00402F8B                 mov     eax, [ecx+8]
.text:00402F8E                 cmp     byte ptr [eax+15h], 0
.text:00402F92                 jnz     short loc_402FCA
.text:00402F94
.text:00402F94 loc_402F94:                             ; CODE XREF: sub_402EE0+BD↓j
.text:00402F94                 mov     ecx, eax
.text:00402F96                 mov     eax, [ecx+8]
.text:00402F99                 cmp     byte ptr [eax+15h], 0
.text:00402F9D                 jz      short loc_402F94
.text:00402F9F                 jmp     short loc_402FCA
.text:00402FA1 ; ---------------------------------------------------------------------------
.text:00402FA1
.text:00402FA1 loc_402FA1:                             ; CODE XREF: sub_402EE0+A7↑j
.text:00402FA1                 mov     eax, [esi+4]
.text:00402FA4                 cmp     byte ptr [eax+15h], 0
.text:00402FA8                 jnz     short loc_402FC2
.text:00402FAA                 lea     ebx, [ebx+0]
.text:00402FB0
.text:00402FB0 loc_402FB0:                             ; CODE XREF: sub_402EE0+E0↓j
.text:00402FB0                 cmp     ecx, [eax]
.text:00402FB2                 jnz     short loc_402FC2
.text:00402FB4                 mov     ecx, eax
.text:00402FB6                 mov     [ebp+var_4], ecx
.text:00402FB9                 mov     eax, [eax+4]
.text:00402FBC                 cmp     byte ptr [eax+15h], 0
.text:00402FC0                 jz      short loc_402FB0
.text:00402FC2
.text:00402FC2 loc_402FC2:                             ; CODE XREF: sub_402EE0+C8↑j
.text:00402FC2                                         ; sub_402EE0+D2↑j
.text:00402FC2                 cmp     byte ptr [ecx+15h], 0
.text:00402FC6                 jnz     short loc_402FCD
.text:00402FC8                 mov     ecx, eax
.text:00402FCA
.text:00402FCA loc_402FCA:                             ; CODE XREF: sub_402EE0+9F↑j
.text:00402FCA                                         ; sub_402EE0+B2↑j ...
.text:00402FCA                 mov     [ebp+var_4], ecx
.text:00402FCD
.text:00402FCD loc_402FCD:                             ; CODE XREF: sub_402EE0+E6↑j
.text:00402FCD                 mov     eax, [edi+0Ch]
.text:00402FD0                 cmp     [ecx+0Ch], eax
.text:00402FD3                 jge     short loc_402FF5
.text:00402FD5                 mov     eax, [ecx+8]
.text:00402FD8                 cmp     byte ptr [eax+15h], 0
.text:00402FDC                 push    edi
.text:00402FDD                 jz      loc_402F2B
.text:00402FE3                 push    0
.text:00402FE5                 push    ebx
.text:00402FE6                 call    sub_403280
.text:00402FEB                 pop     esi
.text:00402FEC                 mov     eax, ebx
.text:00402FEE                 pop     edi
.text:00402FEF                 mov     esp, ebp
.text:00402FF1                 pop     ebp
.text:00402FF2                 retn    4
.text:00402FF5 ; ---------------------------------------------------------------------------
.text:00402FF5
.text:00402FF5 loc_402FF5:                             ; CODE XREF: sub_402EE0+F3↑j
.text:00402FF5                 cmp     [esi+0Ch], eax
.text:00402FF8
.text:00402FF8 loc_402FF8:                             ; CODE XREF: sub_402EE0+8B↑j
.text:00402FF8                 jge     short loc_40304A
.text:00402FFA                 lea     eax, [ebp+var_4]
.text:00402FFD                 mov     [ebp+var_4], esi
.text:00403000                 call    sub_4029F0
.text:00403005                 mov     ecx, dword_42250C
.text:0040300B                 cmp     [eax], ecx
.text:0040300D                 mov     ecx, [ebp+var_4]
.text:00403010                 jz      short loc_40301A
.text:00403012                 mov     eax, [edi+0Ch]
.text:00403015                 cmp     eax, [ecx+0Ch]
.text:00403018                 jge     short loc_40304A
.text:0040301A
.text:0040301A loc_40301A:                             ; CODE XREF: sub_402EE0+130↑j
.text:0040301A                 mov     edx, [esi+8]
.text:0040301D                 cmp     byte ptr [edx+15h], 0
.text:00403021                 push    edi
.text:00403022                 jz      short loc_403038
.text:00403024                 push    0
.text:00403026                 push    ebx
.text:00403027                 mov     ecx, esi
.text:00403029                 call    sub_403280
.text:0040302E                 pop     esi
.text:0040302F                 mov     eax, ebx
.text:00403031                 pop     edi
.text:00403032                 mov     esp, ebp
.text:00403034                 pop     ebp
.text:00403035                 retn    4
.text:00403038 ; ---------------------------------------------------------------------------
.text:00403038
.text:00403038 loc_403038:                             ; CODE XREF: sub_402EE0+142↑j
.text:00403038                 push    1
.text:0040303A                 push    ebx
.text:0040303B                 call    sub_403280
.text:00403040                 pop     esi
.text:00403041                 mov     eax, ebx
.text:00403043                 pop     edi
.text:00403044                 mov     esp, ebp
.text:00403046                 pop     ebp
.text:00403047                 retn    4
.text:0040304A ; ---------------------------------------------------------------------------
.text:0040304A
.text:0040304A loc_40304A:                             ; CODE XREF: sub_402EE0+44↑j
.text:0040304A                                         ; sub_402EE0+6C↑j ...
.text:0040304A                 push    edi
.text:0040304B                 lea     edi, [ebp+var_C]
.text:0040304E                 call    sub_403180
.text:00403053                 mov     eax, [eax]
.text:00403055                 pop     esi
.text:00403056                 mov     [ebx], eax
.text:00403058                 mov     eax, ebx
.text:0040305A                 pop     edi
.text:0040305B                 mov     esp, ebp
.text:0040305D                 pop     ebp
.text:0040305E                 retn    4
.text:0040305E sub_402EE0      endp
.text:0040305E
.text:0040305E ; ---------------------------------------------------------------------------
.text:00403061                 align 10h
.text:00403070
.text:00403070 ; =============== S U B R O U T I N E =======================================
.text:00403070
.text:00403070 ; Attributes: bp-based frame
.text:00403070
.text:00403070 sub_403070      proc near               ; CODE XREF: sub_4010F0+FF↑p
.text:00403070                                         ; sub_4010F0+23E↑p ...
.text:00403070
.text:00403070 var_4           = dword ptr -4
.text:00403070 arg_0           = dword ptr  8
.text:00403070
.text:00403070                 push    ebp
.text:00403071                 mov     ebp, esp
.text:00403073                 push    ecx
.text:00403074                 push    ebx
.text:00403075                 mov     ebx, dword_42251C
.text:0040307B                 mov     eax, [ebx+4]
.text:0040307E                 cmp     byte ptr [eax+15h], 0
.text:00403082                 mov     dl, 1
.text:00403084                 push    esi
.text:00403085                 mov     ecx, ebx
.text:00403087                 mov     byte ptr [ebp+var_4], dl
.text:0040308A                 jnz     short loc_4030B6
.text:0040308C                 mov     ecx, [ebp+arg_0]
.text:0040308F                 mov     esi, [ecx+0Ch]
.text:00403092
.text:00403092 loc_403092:                             ; CODE XREF: sub_403070+44↓j
.text:00403092                 mov     edx, [eax+0Ch]
.text:00403095                 mov     ecx, eax
.text:00403097                 cmp     edx, esi
.text:00403099                 jg      short loc_4030E5
.text:0040309B                 jl      short loc_4030A8
.text:0040309D                 mov     edx, [ebp+arg_0]
.text:004030A0                 mov     edx, [edx+10h]
.text:004030A3                 cmp     edx, [eax+10h]
.text:004030A6                 jl      short loc_4030E5
.text:004030A8
.text:004030A8 loc_4030A8:                             ; CODE XREF: sub_403070+2B↑j
.text:004030A8                 mov     eax, [eax+8]
.text:004030AB                 xor     dl, dl
.text:004030AD                 mov     byte ptr [ebp+var_4], dl
.text:004030B0
.text:004030B0 loc_4030B0:                             ; CODE XREF: sub_403070+7C↓j
.text:004030B0                 cmp     byte ptr [eax+15h], 0
.text:004030B4                 jz      short loc_403092
.text:004030B6
.text:004030B6 loc_4030B6:                             ; CODE XREF: sub_403070+1A↑j
.text:004030B6                 mov     esi, ecx
.text:004030B8                 test    dl, dl
.text:004030BA                 jz      loc_40313D
.text:004030C0                 cmp     ecx, [ebx]
.text:004030C2                 jnz     short loc_4030EE
.text:004030C4                 mov     eax, [ebp+arg_0]
.text:004030C7                 push    eax
.text:004030C8                 push    1
.text:004030CA
.text:004030CA loc_4030CA:                             ; CODE XREF: sub_403070+E9↓j
.text:004030CA                 lea     edx, [ebp+arg_0]
.text:004030CD                 push    edx
.text:004030CE                 call    sub_4034B0
.text:004030D3                 mov     eax, [eax]
.text:004030D5                 pop     esi
.text:004030D6                 mov     [edi], eax
.text:004030D8                 mov     byte ptr [edi+4], 1
.text:004030DC                 mov     eax, edi
.text:004030DE                 pop     ebx
.text:004030DF                 mov     esp, ebp
.text:004030E1                 pop     ebp
.text:004030E2                 retn    4
.text:004030E5 ; ---------------------------------------------------------------------------
.text:004030E5
.text:004030E5 loc_4030E5:                             ; CODE XREF: sub_403070+29↑j
.text:004030E5                                         ; sub_403070+36↑j
.text:004030E5                 mov     eax, [eax]
.text:004030E7                 mov     dl, 1
.text:004030E9                 mov     byte ptr [ebp+var_4], dl
.text:004030EC                 jmp     short loc_4030B0
.text:004030EE ; ---------------------------------------------------------------------------
.text:004030EE
.text:004030EE loc_4030EE:                             ; CODE XREF: sub_403070+52↑j
.text:004030EE                 cmp     byte ptr [ecx+15h], 0
.text:004030F2                 jz      short loc_4030F9
.text:004030F4                 mov     esi, [ecx+8]
.text:004030F7                 jmp     short loc_40313D
.text:004030F9 ; ---------------------------------------------------------------------------
.text:004030F9
.text:004030F9 loc_4030F9:                             ; CODE XREF: sub_403070+82↑j
.text:004030F9                 mov     eax, [ecx]
.text:004030FB                 cmp     byte ptr [eax+15h], 0
.text:004030FF                 jnz     short loc_40311D
.text:00403101                 mov     esi, eax
.text:00403103                 mov     eax, [esi+8]
.text:00403106                 cmp     byte ptr [eax+15h], 0
.text:0040310A                 jnz     short loc_40313D
.text:0040310C                 lea     esp, [esp+0]
.text:00403110
.text:00403110 loc_403110:                             ; CODE XREF: sub_403070+A9↓j
.text:00403110                 mov     esi, eax
.text:00403112                 mov     eax, [esi+8]
.text:00403115                 cmp     byte ptr [eax+15h], 0
.text:00403119                 jz      short loc_403110
.text:0040311B                 jmp     short loc_40313D
.text:0040311D ; ---------------------------------------------------------------------------
.text:0040311D
.text:0040311D loc_40311D:                             ; CODE XREF: sub_403070+8F↑j
.text:0040311D                 mov     eax, [ecx+4]
.text:00403120                 cmp     byte ptr [eax+15h], 0
.text:00403124                 jnz     short loc_403135
.text:00403126
.text:00403126 loc_403126:                             ; CODE XREF: sub_403070+C3↓j
.text:00403126                 cmp     esi, [eax]
.text:00403128                 jnz     short loc_403135
.text:0040312A                 mov     esi, eax
.text:0040312C                 mov     eax, [eax+4]
.text:0040312F                 cmp     byte ptr [eax+15h], 0
.text:00403133                 jz      short loc_403126
.text:00403135
.text:00403135 loc_403135:                             ; CODE XREF: sub_403070+B4↑j
.text:00403135                                         ; sub_403070+B8↑j
.text:00403135                 cmp     byte ptr [esi+15h], 0
.text:00403139                 jnz     short loc_40313D
.text:0040313B                 mov     esi, eax
.text:0040313D
.text:0040313D loc_40313D:                             ; CODE XREF: sub_403070+4A↑j
.text:0040313D                                         ; sub_403070+87↑j ...
.text:0040313D                 mov     ebx, [ebp+arg_0]
.text:00403140                 mov     eax, [esi+0Ch]
.text:00403143                 mov     edx, [ebx+0Ch]
.text:00403146                 cmp     edx, eax
.text:00403148                 jg      short loc_403154
.text:0040314A                 jl      short loc_40315E
.text:0040314C                 mov     edx, [esi+10h]
.text:0040314F                 cmp     edx, [ebx+10h]
.text:00403152                 jge     short loc_40315E
.text:00403154
.text:00403154 loc_403154:                             ; CODE XREF: sub_403070+D8↑j
.text:00403154                 mov     eax, [ebp+var_4]
.text:00403157                 push    ebx
.text:00403158                 push    eax
.text:00403159                 jmp     loc_4030CA
.text:0040315E ; ---------------------------------------------------------------------------
.text:0040315E
.text:0040315E loc_40315E:                             ; CODE XREF: sub_403070+DA↑j
.text:0040315E                                         ; sub_403070+E2↑j
.text:0040315E                 push    ebx
.text:0040315F                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00403165                 add     esp, 4
.text:00403168                 mov     [edi], esi
.text:0040316A                 pop     esi
.text:0040316B                 mov     byte ptr [edi+4], 0
.text:0040316F                 mov     eax, edi
.text:00403171                 pop     ebx
.text:00403172                 mov     esp, ebp
.text:00403174                 pop     ebp
.text:00403175                 retn    4
.text:00403175 sub_403070      endp
.text:00403175
.text:00403175 ; ---------------------------------------------------------------------------
.text:00403178                 align 10h
.text:00403180
.text:00403180 ; =============== S U B R O U T I N E =======================================
.text:00403180
.text:00403180 ; Attributes: bp-based frame
.text:00403180
.text:00403180 sub_403180      proc near               ; CODE XREF: sub_402EE0+16E↑p
.text:00403180
.text:00403180 var_4           = dword ptr -4
.text:00403180 arg_0           = dword ptr  8
.text:00403180
.text:00403180                 push    ebp
.text:00403181                 mov     ebp, esp
.text:00403183                 push    ecx
.text:00403184                 push    ebx
.text:00403185                 mov     ebx, dword_42250C
.text:0040318B                 mov     eax, [ebx+4]
.text:0040318E                 cmp     byte ptr [eax+15h], 0
.text:00403192                 mov     dl, 1
.text:00403194                 push    esi
.text:00403195                 mov     ecx, ebx
.text:00403197                 mov     byte ptr [ebp+var_4], dl
.text:0040319A                 jnz     short loc_4031BE
.text:0040319C                 mov     ecx, [ebp+arg_0]
.text:0040319F                 mov     esi, [ecx+0Ch]
.text:004031A2
.text:004031A2 loc_4031A2:                             ; CODE XREF: sub_403180+3C↓j
.text:004031A2                 cmp     esi, [eax+0Ch]
.text:004031A5                 mov     ecx, eax
.text:004031A7                 setl    dl
.text:004031AA                 mov     byte ptr [ebp+var_4], dl
.text:004031AD                 test    dl, dl
.text:004031AF                 jz      short loc_4031B5
.text:004031B1                 mov     eax, [eax]
.text:004031B3                 jmp     short loc_4031B8
.text:004031B5 ; ---------------------------------------------------------------------------
.text:004031B5
.text:004031B5 loc_4031B5:                             ; CODE XREF: sub_403180+2F↑j
.text:004031B5                 mov     eax, [eax+8]
.text:004031B8
.text:004031B8 loc_4031B8:                             ; CODE XREF: sub_403180+33↑j
.text:004031B8                 cmp     byte ptr [eax+15h], 0
.text:004031BC                 jz      short loc_4031A2
.text:004031BE
.text:004031BE loc_4031BE:                             ; CODE XREF: sub_403180+1A↑j
.text:004031BE                 mov     esi, ecx
.text:004031C0                 test    dl, dl
.text:004031C2                 jz      short loc_403237
.text:004031C4                 cmp     ecx, [ebx]
.text:004031C6                 jnz     short loc_4031E9
.text:004031C8                 mov     edx, [ebp+arg_0]
.text:004031CB                 push    edx
.text:004031CC                 push    1
.text:004031CE                 lea     eax, [ebp+arg_0]
.text:004031D1                 push    eax
.text:004031D2                 call    sub_403280
.text:004031D7                 mov     ecx, [eax]
.text:004031D9                 pop     esi
.text:004031DA                 mov     [edi], ecx
.text:004031DC                 mov     byte ptr [edi+4], 1
.text:004031E0                 mov     eax, edi
.text:004031E2                 pop     ebx
.text:004031E3                 mov     esp, ebp
.text:004031E5                 pop     ebp
.text:004031E6                 retn    4
.text:004031E9 ; ---------------------------------------------------------------------------
.text:004031E9
.text:004031E9 loc_4031E9:                             ; CODE XREF: sub_403180+46↑j
.text:004031E9                 cmp     byte ptr [ecx+15h], 0
.text:004031ED                 jz      short loc_4031F4
.text:004031EF                 mov     esi, [ecx+8]
.text:004031F2                 jmp     short loc_403237
.text:004031F4 ; ---------------------------------------------------------------------------
.text:004031F4
.text:004031F4 loc_4031F4:                             ; CODE XREF: sub_403180+6D↑j
.text:004031F4                 mov     eax, [ecx]
.text:004031F6                 cmp     byte ptr [eax+15h], 0
.text:004031FA                 jnz     short loc_403214
.text:004031FC                 mov     esi, eax
.text:004031FE                 mov     eax, [esi+8]
.text:00403201                 cmp     byte ptr [eax+15h], 0
.text:00403205                 jnz     short loc_403237
.text:00403207
.text:00403207 loc_403207:                             ; CODE XREF: sub_403180+90↓j
.text:00403207                 mov     esi, eax
.text:00403209                 mov     eax, [esi+8]
.text:0040320C                 cmp     byte ptr [eax+15h], 0
.text:00403210                 jz      short loc_403207
.text:00403212                 jmp     short loc_403237
.text:00403214 ; ---------------------------------------------------------------------------
.text:00403214
.text:00403214 loc_403214:                             ; CODE XREF: sub_403180+7A↑j
.text:00403214                 mov     eax, [ecx+4]
.text:00403217                 cmp     byte ptr [eax+15h], 0
.text:0040321B                 jnz     short loc_40322F
.text:0040321D                 lea     ecx, [ecx+0]
.text:00403220
.text:00403220 loc_403220:                             ; CODE XREF: sub_403180+AD↓j
.text:00403220                 cmp     esi, [eax]
.text:00403222                 jnz     short loc_40322F
.text:00403224                 mov     esi, eax
.text:00403226                 mov     eax, [eax+4]
.text:00403229                 cmp     byte ptr [eax+15h], 0
.text:0040322D                 jz      short loc_403220
.text:0040322F
.text:0040322F loc_40322F:                             ; CODE XREF: sub_403180+9B↑j
.text:0040322F                                         ; sub_403180+A2↑j
.text:0040322F                 cmp     byte ptr [esi+15h], 0
.text:00403233                 jnz     short loc_403237
.text:00403235                 mov     esi, eax
.text:00403237
.text:00403237 loc_403237:                             ; CODE XREF: sub_403180+42↑j
.text:00403237                                         ; sub_403180+72↑j ...
.text:00403237                 mov     eax, [ebp+arg_0]
.text:0040323A                 mov     edx, [esi+0Ch]
.text:0040323D                 push    eax
.text:0040323E                 cmp     edx, [eax+0Ch]
.text:00403241                 jge     short loc_403262
.text:00403243                 mov     eax, [ebp+var_4]
.text:00403246                 push    eax
.text:00403247                 lea     edx, [ebp+arg_0]
.text:0040324A                 push    edx
.text:0040324B                 call    sub_403280
.text:00403250                 mov     eax, [eax]
.text:00403252                 pop     esi
.text:00403253                 mov     [edi], eax
.text:00403255                 mov     byte ptr [edi+4], 1
.text:00403259                 mov     eax, edi
.text:0040325B                 pop     ebx
.text:0040325C                 mov     esp, ebp
.text:0040325E                 pop     ebp
.text:0040325F                 retn    4
.text:00403262 ; ---------------------------------------------------------------------------
.text:00403262
.text:00403262 loc_403262:                             ; CODE XREF: sub_403180+C1↑j
.text:00403262                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00403268                 add     esp, 4
.text:0040326B                 mov     [edi], esi
.text:0040326D                 pop     esi
.text:0040326E                 mov     byte ptr [edi+4], 0
.text:00403272                 mov     eax, edi
.text:00403274                 pop     ebx
.text:00403275                 mov     esp, ebp
.text:00403277                 pop     ebp
.text:00403278                 retn    4
.text:00403278 sub_403180      endp
.text:00403278
.text:00403278 ; ---------------------------------------------------------------------------
.text:0040327B                 align 10h
.text:00403280
.text:00403280 ; =============== S U B R O U T I N E =======================================
.text:00403280
.text:00403280 ; Attributes: bp-based frame
.text:00403280
.text:00403280 sub_403280      proc near               ; CODE XREF: sub_402EE0+23↑p
.text:00403280                                         ; sub_402EE0+50↑p ...
.text:00403280
.text:00403280 arg_0           = dword ptr  8
.text:00403280 arg_4           = byte ptr  0Ch
.text:00403280 arg_8           = dword ptr  10h
.text:00403280
.text:00403280                 push    ebp
.text:00403281                 mov     ebp, esp
.text:00403283                 cmp     dword_422510, 1FFFFFFEh
.text:0040328D                 jb      short loc_4032A7
.text:0040328F                 mov     eax, [ebp+arg_8]
.text:00403292                 push    eax
.text:00403293                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00403299                 add     esp, 4
.text:0040329C                 push    offset aMapSetTTooLong ; "map/set<T> too long"
.text:004032A1                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:004032A7
.text:004032A7 loc_4032A7:                             ; CODE XREF: sub_403280+D↑j
.text:004032A7                 push    ebx
.text:004032A8                 push    edi
.text:004032A9                 mov     edi, [ebp+arg_8]
.text:004032AC                 mov     eax, 1
.text:004032B1                 add     dword_422510, eax
.text:004032B7                 mov     [edi+4], ecx
.text:004032BA                 mov     edx, dword_42250C
.text:004032C0                 xor     bl, bl
.text:004032C2                 cmp     ecx, edx
.text:004032C4                 jnz     short loc_4032D9
.text:004032C6                 mov     [edx+4], edi
.text:004032C9                 mov     ecx, dword_42250C
.text:004032CF                 mov     [ecx], edi
.text:004032D1                 mov     edx, dword_42250C
.text:004032D7                 jmp     short loc_4032FC
.text:004032D9 ; ---------------------------------------------------------------------------
.text:004032D9
.text:004032D9 loc_4032D9:                             ; CODE XREF: sub_403280+44↑j
.text:004032D9                 cmp     [ebp+arg_4], bl
.text:004032DC                 jz      short loc_4032EE
.text:004032DE                 mov     [ecx], edi
.text:004032E0                 mov     edx, dword_42250C
.text:004032E6                 cmp     ecx, [edx]
.text:004032E8                 jnz     short loc_4032FF
.text:004032EA                 mov     [edx], edi
.text:004032EC                 jmp     short loc_4032FF
.text:004032EE ; ---------------------------------------------------------------------------
.text:004032EE
.text:004032EE loc_4032EE:                             ; CODE XREF: sub_403280+5C↑j
.text:004032EE                 mov     [ecx+8], edi
.text:004032F1                 mov     edx, dword_42250C
.text:004032F7                 cmp     ecx, [edx+8]
.text:004032FA                 jnz     short loc_4032FF
.text:004032FC
.text:004032FC loc_4032FC:                             ; CODE XREF: sub_403280+57↑j
.text:004032FC                 mov     [edx+8], edi
.text:004032FF
.text:004032FF loc_4032FF:                             ; CODE XREF: sub_403280+68↑j
.text:004032FF                                         ; sub_403280+6C↑j ...
.text:004032FF                 mov     edx, [edi+4]
.text:00403302                 mov     ecx, edi
.text:00403304                 cmp     [edx+14h], bl
.text:00403307                 jnz     loc_403490
.text:0040330D                 push    esi
.text:0040330E                 mov     edi, edi
.text:00403310
.text:00403310 loc_403310:                             ; CODE XREF: sub_403280+209↓j
.text:00403310                 mov     edx, [ecx+4]
.text:00403313                 mov     esi, [edx+4]
.text:00403316                 cmp     edx, [esi]
.text:00403318                 jnz     loc_4033CC
.text:0040331E                 mov     esi, [esi+8]
.text:00403321                 cmp     [esi+14h], bl
.text:00403324                 jz      loc_4033D3
.text:0040332A                 cmp     ecx, [edx+8]
.text:0040332D                 jnz     short loc_40336C
.text:0040332F                 mov     ecx, edx
.text:00403331                 mov     edx, [ecx+8]
.text:00403334                 mov     esi, [edx]
.text:00403336                 mov     [ecx+8], esi
.text:00403339                 mov     esi, [edx]
.text:0040333B                 cmp     [esi+15h], bl
.text:0040333E                 jnz     short loc_403343
.text:00403340                 mov     [esi+4], ecx
.text:00403343
.text:00403343 loc_403343:                             ; CODE XREF: sub_403280+BE↑j
.text:00403343                 mov     esi, [ecx+4]
.text:00403346                 mov     [edx+4], esi
.text:00403349                 mov     esi, dword_42250C
.text:0040334F                 cmp     ecx, [esi+4]
.text:00403352                 jnz     short loc_403359
.text:00403354                 mov     [esi+4], edx
.text:00403357                 jmp     short loc_403367
.text:00403359 ; ---------------------------------------------------------------------------
.text:00403359
.text:00403359 loc_403359:                             ; CODE XREF: sub_403280+D2↑j
.text:00403359                 mov     esi, [ecx+4]
.text:0040335C                 cmp     ecx, [esi]
.text:0040335E                 jnz     short loc_403364
.text:00403360                 mov     [esi], edx
.text:00403362                 jmp     short loc_403367
.text:00403364 ; ---------------------------------------------------------------------------
.text:00403364
.text:00403364 loc_403364:                             ; CODE XREF: sub_403280+DE↑j
.text:00403364                 mov     [esi+8], edx
.text:00403367
.text:00403367 loc_403367:                             ; CODE XREF: sub_403280+D7↑j
.text:00403367                                         ; sub_403280+E2↑j
.text:00403367                 mov     [edx], ecx
.text:00403369                 mov     [ecx+4], edx
.text:0040336C
.text:0040336C loc_40336C:                             ; CODE XREF: sub_403280+AD↑j
.text:0040336C                 mov     edx, [ecx+4]
.text:0040336F                 mov     [edx+14h], al
.text:00403372                 mov     edx, [ecx+4]
.text:00403375                 mov     edx, [edx+4]
.text:00403378                 mov     [edx+14h], bl
.text:0040337B                 mov     edx, [ecx+4]
.text:0040337E                 mov     edx, [edx+4]
.text:00403381                 mov     esi, [edx]
.text:00403383                 mov     edi, [esi+8]
.text:00403386                 mov     [edx], edi
.text:00403388                 mov     edi, [esi+8]
.text:0040338B                 cmp     [edi+15h], bl
.text:0040338E                 jnz     short loc_403393
.text:00403390                 mov     [edi+4], edx
.text:00403393
.text:00403393 loc_403393:                             ; CODE XREF: sub_403280+10E↑j
.text:00403393                 mov     edi, [edx+4]
.text:00403396                 mov     [esi+4], edi
.text:00403399                 mov     edi, dword_42250C
.text:0040339F                 cmp     edx, [edi+4]
.text:004033A2                 jnz     short loc_4033AF
.text:004033A4                 mov     [edi+4], esi
.text:004033A7                 mov     [esi+8], edx
.text:004033AA                 jmp     loc_40347D
.text:004033AF ; ---------------------------------------------------------------------------
.text:004033AF
.text:004033AF loc_4033AF:                             ; CODE XREF: sub_403280+122↑j
.text:004033AF                 mov     edi, [edx+4]
.text:004033B2                 cmp     edx, [edi+8]
.text:004033B5                 jnz     short loc_4033C2
.text:004033B7                 mov     [edi+8], esi
.text:004033BA                 mov     [esi+8], edx
.text:004033BD                 jmp     loc_40347D
.text:004033C2 ; ---------------------------------------------------------------------------
.text:004033C2
.text:004033C2 loc_4033C2:                             ; CODE XREF: sub_403280+135↑j
.text:004033C2                 mov     [edi], esi
.text:004033C4                 mov     [esi+8], edx
.text:004033C7                 jmp     loc_40347D
.text:004033CC ; ---------------------------------------------------------------------------
.text:004033CC
.text:004033CC loc_4033CC:                             ; CODE XREF: sub_403280+98↑j
.text:004033CC                 mov     esi, [esi]
.text:004033CE                 cmp     [esi+14h], bl
.text:004033D1                 jnz     short loc_4033ED
.text:004033D3
.text:004033D3 loc_4033D3:                             ; CODE XREF: sub_403280+A4↑j
.text:004033D3                 mov     [edx+14h], al
.text:004033D6                 mov     [esi+14h], al
.text:004033D9                 mov     edx, [ecx+4]
.text:004033DC                 mov     edx, [edx+4]
.text:004033DF                 mov     [edx+14h], bl
.text:004033E2                 mov     ecx, [ecx+4]
.text:004033E5                 mov     ecx, [ecx+4]
.text:004033E8                 jmp     loc_403483
.text:004033ED ; ---------------------------------------------------------------------------
.text:004033ED
.text:004033ED loc_4033ED:                             ; CODE XREF: sub_403280+151↑j
.text:004033ED                 cmp     ecx, [edx]
.text:004033EF                 jnz     short loc_403430
.text:004033F1                 mov     ecx, edx
.text:004033F3                 mov     edx, [ecx]
.text:004033F5                 mov     esi, [edx+8]
.text:004033F8                 mov     [ecx], esi
.text:004033FA                 mov     esi, [edx+8]
.text:004033FD                 cmp     [esi+15h], bl
.text:00403400                 jnz     short loc_403405
.text:00403402                 mov     [esi+4], ecx
.text:00403405
.text:00403405 loc_403405:                             ; CODE XREF: sub_403280+180↑j
.text:00403405                 mov     esi, [ecx+4]
.text:00403408                 mov     [edx+4], esi
.text:0040340B                 mov     esi, dword_42250C
.text:00403411                 cmp     ecx, [esi+4]
.text:00403414                 jnz     short loc_40341B
.text:00403416                 mov     [esi+4], edx
.text:00403419                 jmp     short loc_40342A
.text:0040341B ; ---------------------------------------------------------------------------
.text:0040341B
.text:0040341B loc_40341B:                             ; CODE XREF: sub_403280+194↑j
.text:0040341B                 mov     esi, [ecx+4]
.text:0040341E                 cmp     ecx, [esi+8]
.text:00403421                 jnz     short loc_403428
.text:00403423                 mov     [esi+8], edx
.text:00403426                 jmp     short loc_40342A
.text:00403428 ; ---------------------------------------------------------------------------
.text:00403428
.text:00403428 loc_403428:                             ; CODE XREF: sub_403280+1A1↑j
.text:00403428                 mov     [esi], edx
.text:0040342A
.text:0040342A loc_40342A:                             ; CODE XREF: sub_403280+199↑j
.text:0040342A                                         ; sub_403280+1A6↑j
.text:0040342A                 mov     [edx+8], ecx
.text:0040342D                 mov     [ecx+4], edx
.text:00403430
.text:00403430 loc_403430:                             ; CODE XREF: sub_403280+16F↑j
.text:00403430                 mov     edx, [ecx+4]
.text:00403433                 mov     [edx+14h], al
.text:00403436                 mov     edx, [ecx+4]
.text:00403439                 mov     edx, [edx+4]
.text:0040343C                 mov     [edx+14h], bl
.text:0040343F                 mov     edx, [ecx+4]
.text:00403442                 mov     edx, [edx+4]
.text:00403445                 mov     esi, [edx+8]
.text:00403448                 mov     edi, [esi]
.text:0040344A                 mov     [edx+8], edi
.text:0040344D                 mov     edi, [esi]
.text:0040344F                 cmp     [edi+15h], bl
.text:00403452                 jnz     short loc_403457
.text:00403454                 mov     [edi+4], edx
.text:00403457
.text:00403457 loc_403457:                             ; CODE XREF: sub_403280+1D2↑j
.text:00403457                 mov     edi, [edx+4]
.text:0040345A                 mov     [esi+4], edi
.text:0040345D                 mov     edi, dword_42250C
.text:00403463                 cmp     edx, [edi+4]
.text:00403466                 jnz     short loc_40346D
.text:00403468                 mov     [edi+4], esi
.text:0040346B                 jmp     short loc_40347B
.text:0040346D ; ---------------------------------------------------------------------------
.text:0040346D
.text:0040346D loc_40346D:                             ; CODE XREF: sub_403280+1E6↑j
.text:0040346D                 mov     edi, [edx+4]
.text:00403470                 cmp     edx, [edi]
.text:00403472                 jnz     short loc_403478
.text:00403474                 mov     [edi], esi
.text:00403476                 jmp     short loc_40347B
.text:00403478 ; ---------------------------------------------------------------------------
.text:00403478
.text:00403478 loc_403478:                             ; CODE XREF: sub_403280+1F2↑j
.text:00403478                 mov     [edi+8], esi
.text:0040347B
.text:0040347B loc_40347B:                             ; CODE XREF: sub_403280+1EB↑j
.text:0040347B                                         ; sub_403280+1F6↑j
.text:0040347B                 mov     [esi], edx
.text:0040347D
.text:0040347D loc_40347D:                             ; CODE XREF: sub_403280+12A↑j
.text:0040347D                                         ; sub_403280+13D↑j ...
.text:0040347D                 mov     edi, [ebp+arg_8]
.text:00403480                 mov     [edx+4], esi
.text:00403483
.text:00403483 loc_403483:                             ; CODE XREF: sub_403280+168↑j
.text:00403483                 mov     edx, [ecx+4]
.text:00403486                 cmp     [edx+14h], bl
.text:00403489                 jz      loc_403310
.text:0040348F                 pop     esi
.text:00403490
.text:00403490 loc_403490:                             ; CODE XREF: sub_403280+87↑j
.text:00403490                 mov     ecx, dword_42250C
.text:00403496                 mov     edx, [ecx+4]
.text:00403499                 mov     [edx+14h], al
.text:0040349C                 mov     eax, [ebp+arg_0]
.text:0040349F                 mov     [eax], edi
.text:004034A1                 pop     edi
.text:004034A2                 pop     ebx
.text:004034A3                 pop     ebp
.text:004034A4                 retn    0Ch
.text:004034A4 sub_403280      endp
.text:004034A4
.text:004034A4 ; ---------------------------------------------------------------------------
.text:004034A7                 align 10h
.text:004034B0
.text:004034B0 ; =============== S U B R O U T I N E =======================================
.text:004034B0
.text:004034B0 ; Attributes: bp-based frame
.text:004034B0
.text:004034B0 sub_4034B0      proc near               ; CODE XREF: sub_403070+5E↑p
.text:004034B0
.text:004034B0 arg_0           = dword ptr  8
.text:004034B0 arg_4           = byte ptr  0Ch
.text:004034B0 arg_8           = dword ptr  10h
.text:004034B0
.text:004034B0                 push    ebp
.text:004034B1                 mov     ebp, esp
.text:004034B3                 cmp     dword_422520, 1FFFFFFEh
.text:004034BD                 jb      short loc_4034D7
.text:004034BF                 mov     eax, [ebp+arg_8]
.text:004034C2                 push    eax
.text:004034C3                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004034C9                 add     esp, 4
.text:004034CC                 push    offset aMapSetTTooLong ; "map/set<T> too long"
.text:004034D1                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:004034D7
.text:004034D7 loc_4034D7:                             ; CODE XREF: sub_4034B0+D↑j
.text:004034D7                 push    ebx
.text:004034D8                 push    edi
.text:004034D9                 mov     edi, [ebp+arg_8]
.text:004034DC                 mov     eax, 1
.text:004034E1                 add     dword_422520, eax
.text:004034E7                 mov     [edi+4], ecx
.text:004034EA                 mov     edx, dword_42251C
.text:004034F0                 xor     bl, bl
.text:004034F2                 cmp     ecx, edx
.text:004034F4                 jnz     short loc_403509
.text:004034F6                 mov     [edx+4], edi
.text:004034F9                 mov     ecx, dword_42251C
.text:004034FF                 mov     [ecx], edi
.text:00403501                 mov     edx, dword_42251C
.text:00403507                 jmp     short loc_40352C
.text:00403509 ; ---------------------------------------------------------------------------
.text:00403509
.text:00403509 loc_403509:                             ; CODE XREF: sub_4034B0+44↑j
.text:00403509                 cmp     [ebp+arg_4], bl
.text:0040350C                 jz      short loc_40351E
.text:0040350E                 mov     [ecx], edi
.text:00403510                 mov     edx, dword_42251C
.text:00403516                 cmp     ecx, [edx]
.text:00403518                 jnz     short loc_40352F
.text:0040351A                 mov     [edx], edi
.text:0040351C                 jmp     short loc_40352F
.text:0040351E ; ---------------------------------------------------------------------------
.text:0040351E
.text:0040351E loc_40351E:                             ; CODE XREF: sub_4034B0+5C↑j
.text:0040351E                 mov     [ecx+8], edi
.text:00403521                 mov     edx, dword_42251C
.text:00403527                 cmp     ecx, [edx+8]
.text:0040352A                 jnz     short loc_40352F
.text:0040352C
.text:0040352C loc_40352C:                             ; CODE XREF: sub_4034B0+57↑j
.text:0040352C                 mov     [edx+8], edi
.text:0040352F
.text:0040352F loc_40352F:                             ; CODE XREF: sub_4034B0+68↑j
.text:0040352F                                         ; sub_4034B0+6C↑j ...
.text:0040352F                 mov     edx, [edi+4]
.text:00403532                 mov     ecx, edi
.text:00403534                 cmp     [edx+14h], bl
.text:00403537                 jnz     loc_4036C0
.text:0040353D                 push    esi
.text:0040353E                 mov     edi, edi
.text:00403540
.text:00403540 loc_403540:                             ; CODE XREF: sub_4034B0+209↓j
.text:00403540                 mov     edx, [ecx+4]
.text:00403543                 mov     esi, [edx+4]
.text:00403546                 cmp     edx, [esi]
.text:00403548                 jnz     loc_4035FC
.text:0040354E                 mov     esi, [esi+8]
.text:00403551                 cmp     [esi+14h], bl
.text:00403554                 jz      loc_403603
.text:0040355A                 cmp     ecx, [edx+8]
.text:0040355D                 jnz     short loc_40359C
.text:0040355F                 mov     ecx, edx
.text:00403561                 mov     edx, [ecx+8]
.text:00403564                 mov     esi, [edx]
.text:00403566                 mov     [ecx+8], esi
.text:00403569                 mov     esi, [edx]
.text:0040356B                 cmp     [esi+15h], bl
.text:0040356E                 jnz     short loc_403573
.text:00403570                 mov     [esi+4], ecx
.text:00403573
.text:00403573 loc_403573:                             ; CODE XREF: sub_4034B0+BE↑j
.text:00403573                 mov     esi, [ecx+4]
.text:00403576                 mov     [edx+4], esi
.text:00403579                 mov     esi, dword_42251C
.text:0040357F                 cmp     ecx, [esi+4]
.text:00403582                 jnz     short loc_403589
.text:00403584                 mov     [esi+4], edx
.text:00403587                 jmp     short loc_403597
.text:00403589 ; ---------------------------------------------------------------------------
.text:00403589
.text:00403589 loc_403589:                             ; CODE XREF: sub_4034B0+D2↑j
.text:00403589                 mov     esi, [ecx+4]
.text:0040358C                 cmp     ecx, [esi]
.text:0040358E                 jnz     short loc_403594
.text:00403590                 mov     [esi], edx
.text:00403592                 jmp     short loc_403597
.text:00403594 ; ---------------------------------------------------------------------------
.text:00403594
.text:00403594 loc_403594:                             ; CODE XREF: sub_4034B0+DE↑j
.text:00403594                 mov     [esi+8], edx
.text:00403597
.text:00403597 loc_403597:                             ; CODE XREF: sub_4034B0+D7↑j
.text:00403597                                         ; sub_4034B0+E2↑j
.text:00403597                 mov     [edx], ecx
.text:00403599                 mov     [ecx+4], edx
.text:0040359C
.text:0040359C loc_40359C:                             ; CODE XREF: sub_4034B0+AD↑j
.text:0040359C                 mov     edx, [ecx+4]
.text:0040359F                 mov     [edx+14h], al
.text:004035A2                 mov     edx, [ecx+4]
.text:004035A5                 mov     edx, [edx+4]
.text:004035A8                 mov     [edx+14h], bl
.text:004035AB                 mov     edx, [ecx+4]
.text:004035AE                 mov     edx, [edx+4]
.text:004035B1                 mov     esi, [edx]
.text:004035B3                 mov     edi, [esi+8]
.text:004035B6                 mov     [edx], edi
.text:004035B8                 mov     edi, [esi+8]
.text:004035BB                 cmp     [edi+15h], bl
.text:004035BE                 jnz     short loc_4035C3
.text:004035C0                 mov     [edi+4], edx
.text:004035C3
.text:004035C3 loc_4035C3:                             ; CODE XREF: sub_4034B0+10E↑j
.text:004035C3                 mov     edi, [edx+4]
.text:004035C6                 mov     [esi+4], edi
.text:004035C9                 mov     edi, dword_42251C
.text:004035CF                 cmp     edx, [edi+4]
.text:004035D2                 jnz     short loc_4035DF
.text:004035D4                 mov     [edi+4], esi
.text:004035D7                 mov     [esi+8], edx
.text:004035DA                 jmp     loc_4036AD
.text:004035DF ; ---------------------------------------------------------------------------
.text:004035DF
.text:004035DF loc_4035DF:                             ; CODE XREF: sub_4034B0+122↑j
.text:004035DF                 mov     edi, [edx+4]
.text:004035E2                 cmp     edx, [edi+8]
.text:004035E5                 jnz     short loc_4035F2
.text:004035E7                 mov     [edi+8], esi
.text:004035EA                 mov     [esi+8], edx
.text:004035ED                 jmp     loc_4036AD
.text:004035F2 ; ---------------------------------------------------------------------------
.text:004035F2
.text:004035F2 loc_4035F2:                             ; CODE XREF: sub_4034B0+135↑j
.text:004035F2                 mov     [edi], esi
.text:004035F4                 mov     [esi+8], edx
.text:004035F7                 jmp     loc_4036AD
.text:004035FC ; ---------------------------------------------------------------------------
.text:004035FC
.text:004035FC loc_4035FC:                             ; CODE XREF: sub_4034B0+98↑j
.text:004035FC                 mov     esi, [esi]
.text:004035FE                 cmp     [esi+14h], bl
.text:00403601                 jnz     short loc_40361D
.text:00403603
.text:00403603 loc_403603:                             ; CODE XREF: sub_4034B0+A4↑j
.text:00403603                 mov     [edx+14h], al
.text:00403606                 mov     [esi+14h], al
.text:00403609                 mov     edx, [ecx+4]
.text:0040360C                 mov     edx, [edx+4]
.text:0040360F                 mov     [edx+14h], bl
.text:00403612                 mov     ecx, [ecx+4]
.text:00403615                 mov     ecx, [ecx+4]
.text:00403618                 jmp     loc_4036B3
.text:0040361D ; ---------------------------------------------------------------------------
.text:0040361D
.text:0040361D loc_40361D:                             ; CODE XREF: sub_4034B0+151↑j
.text:0040361D                 cmp     ecx, [edx]
.text:0040361F                 jnz     short loc_403660
.text:00403621                 mov     ecx, edx
.text:00403623                 mov     edx, [ecx]
.text:00403625                 mov     esi, [edx+8]
.text:00403628                 mov     [ecx], esi
.text:0040362A                 mov     esi, [edx+8]
.text:0040362D                 cmp     [esi+15h], bl
.text:00403630                 jnz     short loc_403635
.text:00403632                 mov     [esi+4], ecx
.text:00403635
.text:00403635 loc_403635:                             ; CODE XREF: sub_4034B0+180↑j
.text:00403635                 mov     esi, [ecx+4]
.text:00403638                 mov     [edx+4], esi
.text:0040363B                 mov     esi, dword_42251C
.text:00403641                 cmp     ecx, [esi+4]
.text:00403644                 jnz     short loc_40364B
.text:00403646                 mov     [esi+4], edx
.text:00403649                 jmp     short loc_40365A
.text:0040364B ; ---------------------------------------------------------------------------
.text:0040364B
.text:0040364B loc_40364B:                             ; CODE XREF: sub_4034B0+194↑j
.text:0040364B                 mov     esi, [ecx+4]
.text:0040364E                 cmp     ecx, [esi+8]
.text:00403651                 jnz     short loc_403658
.text:00403653                 mov     [esi+8], edx
.text:00403656                 jmp     short loc_40365A
.text:00403658 ; ---------------------------------------------------------------------------
.text:00403658
.text:00403658 loc_403658:                             ; CODE XREF: sub_4034B0+1A1↑j
.text:00403658                 mov     [esi], edx
.text:0040365A
.text:0040365A loc_40365A:                             ; CODE XREF: sub_4034B0+199↑j
.text:0040365A                                         ; sub_4034B0+1A6↑j
.text:0040365A                 mov     [edx+8], ecx
.text:0040365D                 mov     [ecx+4], edx
.text:00403660
.text:00403660 loc_403660:                             ; CODE XREF: sub_4034B0+16F↑j
.text:00403660                 mov     edx, [ecx+4]
.text:00403663                 mov     [edx+14h], al
.text:00403666                 mov     edx, [ecx+4]
.text:00403669                 mov     edx, [edx+4]
.text:0040366C                 mov     [edx+14h], bl
.text:0040366F                 mov     edx, [ecx+4]
.text:00403672                 mov     edx, [edx+4]
.text:00403675                 mov     esi, [edx+8]
.text:00403678                 mov     edi, [esi]
.text:0040367A                 mov     [edx+8], edi
.text:0040367D                 mov     edi, [esi]
.text:0040367F                 cmp     [edi+15h], bl
.text:00403682                 jnz     short loc_403687
.text:00403684                 mov     [edi+4], edx
.text:00403687
.text:00403687 loc_403687:                             ; CODE XREF: sub_4034B0+1D2↑j
.text:00403687                 mov     edi, [edx+4]
.text:0040368A                 mov     [esi+4], edi
.text:0040368D                 mov     edi, dword_42251C
.text:00403693                 cmp     edx, [edi+4]
.text:00403696                 jnz     short loc_40369D
.text:00403698                 mov     [edi+4], esi
.text:0040369B                 jmp     short loc_4036AB
.text:0040369D ; ---------------------------------------------------------------------------
.text:0040369D
.text:0040369D loc_40369D:                             ; CODE XREF: sub_4034B0+1E6↑j
.text:0040369D                 mov     edi, [edx+4]
.text:004036A0                 cmp     edx, [edi]
.text:004036A2                 jnz     short loc_4036A8
.text:004036A4                 mov     [edi], esi
.text:004036A6                 jmp     short loc_4036AB
.text:004036A8 ; ---------------------------------------------------------------------------
.text:004036A8
.text:004036A8 loc_4036A8:                             ; CODE XREF: sub_4034B0+1F2↑j
.text:004036A8                 mov     [edi+8], esi
.text:004036AB
.text:004036AB loc_4036AB:                             ; CODE XREF: sub_4034B0+1EB↑j
.text:004036AB                                         ; sub_4034B0+1F6↑j
.text:004036AB                 mov     [esi], edx
.text:004036AD
.text:004036AD loc_4036AD:                             ; CODE XREF: sub_4034B0+12A↑j
.text:004036AD                                         ; sub_4034B0+13D↑j ...
.text:004036AD                 mov     edi, [ebp+arg_8]
.text:004036B0                 mov     [edx+4], esi
.text:004036B3
.text:004036B3 loc_4036B3:                             ; CODE XREF: sub_4034B0+168↑j
.text:004036B3                 mov     edx, [ecx+4]
.text:004036B6                 cmp     [edx+14h], bl
.text:004036B9                 jz      loc_403540
.text:004036BF                 pop     esi
.text:004036C0
.text:004036C0 loc_4036C0:                             ; CODE XREF: sub_4034B0+87↑j
.text:004036C0                 mov     ecx, dword_42251C
.text:004036C6                 mov     edx, [ecx+4]
.text:004036C9                 mov     [edx+14h], al
.text:004036CC                 mov     eax, [ebp+arg_0]
.text:004036CF                 mov     [eax], edi
.text:004036D1                 pop     edi
.text:004036D2                 pop     ebx
.text:004036D3                 pop     ebp
.text:004036D4                 retn    0Ch
.text:004036D4 sub_4034B0      endp
.text:004036D4
.text:004036D4 ; ---------------------------------------------------------------------------
.text:004036D7                 align 10h
.text:004036E0
.text:004036E0 ; =============== S U B R O U T I N E =======================================
.text:004036E0
.text:004036E0 ; Attributes: bp-based frame
.text:004036E0
.text:004036E0 sub_4036E0      proc near               ; CODE XREF: sub_4010F0+F3↑p
.text:004036E0                                         ; sub_4010F0+232↑p ...
.text:004036E0
.text:004036E0 var_10          = dword ptr -10h
.text:004036E0 var_4           = dword ptr -4
.text:004036E0
.text:004036E0                 push    ebp
.text:004036E1                 mov     ebp, esp
.text:004036E3                 sub     esp, 10h
.text:004036E6                 push    18h
.text:004036E8                 call    ds:??2@YAPAXI@Z ; operator new(uint)
.text:004036EE                 xor     edx, edx
.text:004036F0                 add     esp, 4
.text:004036F3                 cmp     eax, edx
.text:004036F5                 jz      short loc_40372A
.text:004036F7                 mov     ecx, dword_42251C
.text:004036FD                 mov     [eax], ecx
.text:004036FF                 mov     ecx, dword_42251C
.text:00403705                 mov     [eax+4], ecx
.text:00403708                 mov     ecx, dword_42251C
.text:0040370E                 mov     [eax+8], ecx
.text:00403711                 lea     ecx, [eax+0Ch]
.text:00403714                 mov     [eax+14h], dx
.text:00403718                 cmp     ecx, edx
.text:0040371A                 jz      short loc_403726
.text:0040371C                 mov     edx, [esi]
.text:0040371E                 mov     [ecx], edx
.text:00403720                 mov     edx, [esi+4]
.text:00403723                 mov     [ecx+4], edx
.text:00403726
.text:00403726 loc_403726:                             ; CODE XREF: sub_4036E0+3A↑j
.text:00403726                 mov     esp, ebp
.text:00403728                 pop     ebp
.text:00403729                 retn
.text:0040372A ; ---------------------------------------------------------------------------
.text:0040372A
.text:0040372A loc_40372A:                             ; CODE XREF: sub_4036E0+15↑j
.text:0040372A                 lea     eax, [ebp+var_4]
.text:0040372D                 push    eax
.text:0040372E                 lea     ecx, [ebp+var_10]
.text:00403731                 mov     [ebp+var_4], edx
.text:00403734                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:0040373A                 push    offset __TI2?AVbad_alloc@std@@ ; throw info for 'class std::bad_alloc'
.text:0040373F                 lea     ecx, [ebp+var_10]
.text:00403742                 push    ecx
.text:00403743                 mov     [ebp+var_10], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:0040374A                 call    _CxxThrowException
.text:0040374A sub_4036E0      endp
.text:0040374A
.text:0040374A ; ---------------------------------------------------------------------------
.text:0040374F                 align 10h
.text:00403750
.text:00403750 ; =============== S U B R O U T I N E =======================================
.text:00403750
.text:00403750 ; Attributes: bp-based frame
.text:00403750
.text:00403750 sub_403750      proc near               ; CODE XREF: sub_4010F0+1C3↑p
.text:00403750                                         ; sub_4010F0+318↑p ...
.text:00403750
.text:00403750 var_10          = dword ptr -10h
.text:00403750 var_4           = dword ptr -4
.text:00403750
.text:00403750                 push    ebp
.text:00403751                 mov     ebp, esp
.text:00403753                 sub     esp, 10h
.text:00403756                 push    18h
.text:00403758                 call    ds:??2@YAPAXI@Z ; operator new(uint)
.text:0040375E                 xor     edx, edx
.text:00403760                 add     esp, 4
.text:00403763                 cmp     eax, edx
.text:00403765                 jz      short loc_40379A
.text:00403767                 mov     ecx, dword_42250C
.text:0040376D                 mov     [eax], ecx
.text:0040376F                 mov     ecx, dword_42250C
.text:00403775                 mov     [eax+4], ecx
.text:00403778                 mov     ecx, dword_42250C
.text:0040377E                 mov     [eax+8], ecx
.text:00403781                 lea     ecx, [eax+0Ch]
.text:00403784                 mov     [eax+14h], dx
.text:00403788                 cmp     ecx, edx
.text:0040378A                 jz      short loc_403796
.text:0040378C                 mov     edx, [esi]
.text:0040378E                 mov     [ecx], edx
.text:00403790                 mov     edx, [esi+4]
.text:00403793                 mov     [ecx+4], edx
.text:00403796
.text:00403796 loc_403796:                             ; CODE XREF: sub_403750+3A↑j
.text:00403796                 mov     esp, ebp
.text:00403798                 pop     ebp
.text:00403799                 retn
.text:0040379A ; ---------------------------------------------------------------------------
.text:0040379A
.text:0040379A loc_40379A:                             ; CODE XREF: sub_403750+15↑j
.text:0040379A                 lea     eax, [ebp+var_4]
.text:0040379D                 push    eax
.text:0040379E                 lea     ecx, [ebp+var_10]
.text:004037A1                 mov     [ebp+var_4], edx
.text:004037A4                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:004037AA                 push    offset __TI2?AVbad_alloc@std@@ ; throw info for 'class std::bad_alloc'
.text:004037AF                 lea     ecx, [ebp+var_10]
.text:004037B2                 push    ecx
.text:004037B3                 mov     [ebp+var_10], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:004037BA                 call    _CxxThrowException
.text:004037BA sub_403750      endp
.text:004037BA
.text:004037BA ; ---------------------------------------------------------------------------
.text:004037BF                 align 10h
.text:004037C0
.text:004037C0 ; =============== S U B R O U T I N E =======================================
.text:004037C0
.text:004037C0 ; Attributes: bp-based frame
.text:004037C0
.text:004037C0 sub_4037C0      proc near               ; CODE XREF: sub_4010F0+C6↑p
.text:004037C0                                         ; sub_4010F0+174↑p ...
.text:004037C0
.text:004037C0 arg_0           = dword ptr  8
.text:004037C0 arg_4           = dword ptr  0Ch
.text:004037C0
.text:004037C0                 push    ebp
.text:004037C1                 mov     ebp, esp
.text:004037C3                 mov     ecx, [ebp+arg_0]
.text:004037C6                 push    esi
.text:004037C7                 mov     esi, [ebp+arg_4]
.text:004037CA                 cmp     ecx, esi
.text:004037CC                 jz      short loc_403823
.text:004037CE                 mov     edx, [edi]
.text:004037D0
.text:004037D0 loc_4037D0:                             ; CODE XREF: sub_4037C0+5F↓j
.text:004037D0                 inc     edx
.text:004037D1                 cmp     byte ptr [ecx+15h], 0
.text:004037D5                 jnz     short loc_40381D
.text:004037D7                 mov     eax, [ecx+8]
.text:004037DA                 cmp     byte ptr [eax+15h], 0
.text:004037DE                 jnz     short loc_4037FC
.text:004037E0                 mov     ecx, eax
.text:004037E2                 mov     eax, [ecx]
.text:004037E4                 cmp     byte ptr [eax+15h], 0
.text:004037E8                 jnz     short loc_40381A
.text:004037EA                 lea     ebx, [ebx+0]
.text:004037F0
.text:004037F0 loc_4037F0:                             ; CODE XREF: sub_4037C0+38↓j
.text:004037F0                 mov     ecx, eax
.text:004037F2                 mov     eax, [ecx]
.text:004037F4                 cmp     byte ptr [eax+15h], 0
.text:004037F8                 jz      short loc_4037F0
.text:004037FA                 jmp     short loc_40381A
.text:004037FC ; ---------------------------------------------------------------------------
.text:004037FC
.text:004037FC loc_4037FC:                             ; CODE XREF: sub_4037C0+1E↑j
.text:004037FC                 mov     eax, [ecx+4]
.text:004037FF                 cmp     byte ptr [eax+15h], 0
.text:00403803                 jnz     short loc_403818
.text:00403805
.text:00403805 loc_403805:                             ; CODE XREF: sub_4037C0+56↓j
.text:00403805                 cmp     ecx, [eax+8]
.text:00403808                 jnz     short loc_403818
.text:0040380A                 mov     ecx, eax
.text:0040380C                 mov     [ebp+arg_0], ecx
.text:0040380F                 mov     eax, [eax+4]
.text:00403812                 cmp     byte ptr [eax+15h], 0
.text:00403816                 jz      short loc_403805
.text:00403818
.text:00403818 loc_403818:                             ; CODE XREF: sub_4037C0+43↑j
.text:00403818                                         ; sub_4037C0+48↑j
.text:00403818                 mov     ecx, eax
.text:0040381A
.text:0040381A loc_40381A:                             ; CODE XREF: sub_4037C0+28↑j
.text:0040381A                                         ; sub_4037C0+3A↑j
.text:0040381A                 mov     [ebp+arg_0], ecx
.text:0040381D
.text:0040381D loc_40381D:                             ; CODE XREF: sub_4037C0+15↑j
.text:0040381D                 cmp     ecx, esi
.text:0040381F                 jnz     short loc_4037D0
.text:00403821                 mov     [edi], edx
.text:00403823
.text:00403823 loc_403823:                             ; CODE XREF: sub_4037C0+C↑j
.text:00403823                 pop     esi
.text:00403824                 pop     ebp
.text:00403825                 retn
.text:00403825 sub_4037C0      endp
.text:00403825
.text:00403826 ; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403835                 align 2
.text:00403836 ; [00000006 BYTES: COLLAPSED FUNCTION std::exception::what(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040383C ; [00000006 BYTES: COLLAPSED FUNCTION std::exception::exception(std::exception const &). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403842 ; [000000A1 BYTES: COLLAPSED FUNCTION __onexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004038E3 ; [00000017 BYTES: COLLAPSED FUNCTION _atexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004038FA ; [00000006 BYTES: COLLAPSED FUNCTION operator delete(void *). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403900 ; [0000004C BYTES: COLLAPSED FUNCTION type_info::`vector deleting destructor'(uint). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040394C ; [0000004B BYTES: COLLAPSED FUNCTION _pre_cpp_init. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403997 ; [00000189 BYTES: COLLAPSED FUNCTION ___tmainCRTStartup. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403B20 ; [000000BA BYTES: COLLAPSED FUNCTION _pre_c_init. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403BDA ; [0000000A BYTES: COLLAPSED FUNCTION start. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403BE4 ; [00000106 BYTES: COLLAPSED FUNCTION ___report_gsfailure. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403CEA ; [00000006 BYTES: COLLAPSED FUNCTION _unlock. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403CF0 ; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403CF6 ; [00000006 BYTES: COLLAPSED FUNCTION _lock. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403CFC                 align 10h
.text:00403D00 ; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403D45 ; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403D59 ; [00000025 BYTES: COLLAPSED FUNCTION SEH_403F80. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403D7E ; [0000005E BYTES: COLLAPSED FUNCTION __ArrayUnwind(void *,uint,int,void (*)(void *)). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403DDC ; [00000063 BYTES: COLLAPSED FUNCTION `eh vector destructor iterator'(void *,uint,int,void (*)(void *)). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403E3F ; [00000042 BYTES: COLLAPSED FUNCTION __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403E81
.text:00403E81 ; =============== S U B R O U T I N E =======================================
.text:00403E81
.text:00403E81
.text:00403E81 sub_403E81      proc near               ; DATA XREF: .rdata:00405144↓o
.text:00403E81                 push    offset ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; lpTopLevelExceptionFilter
.text:00403E86                 call    ds:SetUnhandledExceptionFilter
.text:00403E8C                 xor     eax, eax
.text:00403E8E                 retn
.text:00403E8E sub_403E81      endp
.text:00403E8E
.text:00403E8E ; ---------------------------------------------------------------------------
.text:00403E8F                 align 10h
.text:00403E90 ; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403E96
.text:00403E96 ; =============== S U B R O U T I N E =======================================
.text:00403E96
.text:00403E96
.text:00403E96 sub_403E96      proc near               ; CODE XREF: _pre_c_init+81↑p
.text:00403E96                 mov     edi, edi
.text:00403E98                 push    esi
.text:00403E99                 mov     eax, offset unk_4053F8
.text:00403E9E                 mov     esi, offset unk_4053F8
.text:00403EA3                 push    edi
.text:00403EA4                 mov     edi, eax
.text:00403EA6                 cmp     eax, esi
.text:00403EA8                 jnb     short loc_403EB9
.text:00403EAA
.text:00403EAA loc_403EAA:                             ; CODE XREF: sub_403E96+21↓j
.text:00403EAA                 mov     eax, [edi]
.text:00403EAC                 test    eax, eax
.text:00403EAE                 jz      short loc_403EB2
.text:00403EB0                 call    eax
.text:00403EB2
.text:00403EB2 loc_403EB2:                             ; CODE XREF: sub_403E96+18↑j
.text:00403EB2                 add     edi, 4
.text:00403EB5                 cmp     edi, esi
.text:00403EB7                 jb      short loc_403EAA
.text:00403EB9
.text:00403EB9 loc_403EB9:                             ; CODE XREF: sub_403E96+12↑j
.text:00403EB9                 pop     edi
.text:00403EBA                 pop     esi
.text:00403EBB                 retn
.text:00403EBB sub_403E96      endp
.text:00403EBB
.text:00403EBC
.text:00403EBC ; =============== S U B R O U T I N E =======================================
.text:00403EBC
.text:00403EBC
.text:00403EBC ; void __cdecl sub_403EBC()
.text:00403EBC sub_403EBC      proc near               ; DATA XREF: _pre_cpp_init↑o
.text:00403EBC                 mov     edi, edi
.text:00403EBE                 push    esi
.text:00403EBF                 mov     eax, offset unk_405400
.text:00403EC4                 mov     esi, offset unk_405400
.text:00403EC9                 push    edi
.text:00403ECA                 mov     edi, eax
.text:00403ECC                 cmp     eax, esi
.text:00403ECE                 jnb     short loc_403EDF
.text:00403ED0
.text:00403ED0 loc_403ED0:                             ; CODE XREF: sub_403EBC+21↓j
.text:00403ED0                 mov     eax, [edi]
.text:00403ED2                 test    eax, eax
.text:00403ED4                 jz      short loc_403ED8
.text:00403ED6                 call    eax
.text:00403ED8
.text:00403ED8 loc_403ED8:                             ; CODE XREF: sub_403EBC+18↑j
.text:00403ED8                 add     edi, 4
.text:00403EDB                 cmp     edi, esi
.text:00403EDD                 jb      short loc_403ED0
.text:00403EDF
.text:00403EDF loc_403EDF:                             ; CODE XREF: sub_403EBC+12↑j
.text:00403EDF                 pop     edi
.text:00403EE0                 pop     esi
.text:00403EE1                 retn
.text:00403EE1 sub_403EBC      endp
.text:00403EE1
.text:00403EE2 ; [00000006 BYTES: COLLAPSED FUNCTION _XcptFilter. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403EE8                 align 10h
.text:00403EF0 ; [00000035 BYTES: COLLAPSED FUNCTION __ValidateImageBase. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403F25                 align 10h
.text:00403F30 ; [00000044 BYTES: COLLAPSED FUNCTION __FindPESection. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403F74                 align 10h
.text:00403F80 ; [000000BC BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040403C ; [00000006 BYTES: COLLAPSED FUNCTION _initterm. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404042 ; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404048 ; [00000028 BYTES: COLLAPSED FUNCTION __setdefaultprecision. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404070
.text:00404070 ; =============== S U B R O U T I N E =======================================
.text:00404070
.text:00404070
.text:00404070 sub_404070      proc near               ; CODE XREF: _pre_c_init+86↑p
.text:00404070                                         ; DATA XREF: _pre_c_init+94↑o
.text:00404070                 xor     eax, eax
.text:00404072                 retn
.text:00404072 sub_404070      endp
.text:00404072
.text:00404073 ; [0000009B BYTES: COLLAPSED FUNCTION ___security_init_cookie. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040410E ; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404114 ; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040411A ; [00000006 BYTES: COLLAPSED FUNCTION terminate(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404120 ; [00000006 BYTES: COLLAPSED FUNCTION type_info::_type_info_dtor_internal_method(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404126 ; [00000006 BYTES: COLLAPSED FUNCTION _invoke_watson. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040412C ; [00000006 BYTES: COLLAPSED FUNCTION _controlfp_s. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404132 ; [00000006 BYTES: COLLAPSED FUNCTION __CxxFrameHandler3. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404138 ; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040413E ; [00000006 BYTES: COLLAPSED FUNCTION _CxxThrowException. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404144 ; [00000006 BYTES: COLLAPSED FUNCTION memset. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040414A                 align 10h
.text:00404150 ; START OF FUNCTION CHUNK FOR sub_401CC0
.text:00404150
.text:00404150 loc_404150:                             ; DATA XREF: .rdata:stru_4054F8↓o
.text:00404150 ; __unwind { // SEH_401CC0
.text:00404150 ;   cleanup() // owned by 401CE6
.text:00404150                 mov     eax, [ebp+arg_0]
.text:00404153                 jmp     loc_402070
.text:00404158 ; ---------------------------------------------------------------------------
.text:00404158
.text:00404158 SEH_401CC0:                             ; DATA XREF: sub_401CC0+5↑o
.text:00404158                                         ; .rdata:004053D4↓o
.text:00404158                 mov     edx, [esp-4+arg_4]
.text:0040415C                 lea     eax, [edx+0Ch]
.text:0040415F                 mov     ecx, [edx-8]
.text:00404162                 xor     ecx, eax
.text:00404164                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00404169                 mov     eax, offset stru_405500
.text:0040416E                 jmp     __CxxFrameHandler3
.text:0040416E ; } // starts at 404150
.text:0040416E ; END OF FUNCTION CHUNK FOR sub_401CC0
.text:0040416E ; ---------------------------------------------------------------------------
.text:00404173                 align 10h
.text:00404180 ; START OF FUNCTION CHUNK FOR sub_402CC0
.text:00404180
.text:00404180 loc_404180:                             ; DATA XREF: .rdata:stru_405524↓o
.text:00404180 ; __unwind { // SEH_402CC0
.text:00404180                 lea     eax, [ebp+var_24]
.text:00404183                 jmp     loc_402070
.text:00404188 ; ---------------------------------------------------------------------------
.text:00404188
.text:00404188 loc_404188:                             ; DATA XREF: .rdata:0040552C↓o
.text:00404188                 lea     eax, [ebp+var_24]
.text:0040418B                 push    eax
.text:0040418C                 call    sub_401CC0
.text:00404191                 retn
.text:00404192 ; ---------------------------------------------------------------------------
.text:00404192
.text:00404192 loc_404192:                             ; DATA XREF: .rdata:00405544↓o
.text:00404192 ;   cleanup() // owned by 402D10
.text:00404192 ;   cleanup() // owned by 402D3E
.text:00404192 ;   cleanup() // owned by 402D6B
.text:00404192 ;   cleanup() // owned by 402E35
.text:00404192 ;   cleanup() // owned by 402E47
.text:00404192 ;   cleanup() // owned by 402E72
.text:00404192                 lea     eax, [ebp+var_24]
.text:00404195                 jmp     loc_402070
.text:0040419A ; ---------------------------------------------------------------------------
.text:0040419A
.text:0040419A SEH_402CC0:                             ; DATA XREF: sub_402CC0+5↑o
.text:0040419A                                         ; .rdata:004053D8↓o
.text:0040419A                 mov     edx, [esp-4+arg_4]
.text:0040419E                 lea     eax, [edx+0Ch]
.text:004041A1                 mov     ecx, [edx-28h]
.text:004041A4                 xor     ecx, eax
.text:004041A6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004041AB                 mov     eax, offset stru_405570
.text:004041B0                 jmp     __CxxFrameHandler3
.text:004041B0 ; } // starts at 404180
.text:004041B0 ; END OF FUNCTION CHUNK FOR sub_402CC0
.text:004041B0 ; ---------------------------------------------------------------------------
.text:004041B5                 align 10h
.text:004041C0 ; START OF FUNCTION CHUNK FOR sub_402A90
.text:004041C0
.text:004041C0 loc_4041C0:                             ; DATA XREF: .rdata:stru_405594↓o
.text:004041C0 ; __unwind { // SEH_402A90
.text:004041C0                 lea     eax, [ebp+var_20]
.text:004041C3                 jmp     loc_402070
.text:004041C8 ; ---------------------------------------------------------------------------
.text:004041C8
.text:004041C8 loc_4041C8:                             ; DATA XREF: .rdata:0040559C↓o
.text:004041C8                 lea     eax, [ebp+var_20]
.text:004041CB                 push    eax
.text:004041CC                 call    sub_401CC0
.text:004041D1                 retn
.text:004041D2 ; ---------------------------------------------------------------------------
.text:004041D2
.text:004041D2 loc_4041D2:                             ; DATA XREF: .rdata:004055B4↓o
.text:004041D2 ;   cleanup() // owned by 402B04
.text:004041D2 ;   cleanup() // owned by 402B37
.text:004041D2 ;   cleanup() // owned by 402B4E
.text:004041D2 ;   cleanup() // owned by 402BDE
.text:004041D2 ;   cleanup() // owned by 402BF8
.text:004041D2 ;   cleanup() // owned by 402CA6
.text:004041D2                 lea     eax, [ebp+var_20]
.text:004041D5                 jmp     loc_402070
.text:004041DA ; ---------------------------------------------------------------------------
.text:004041DA
.text:004041DA SEH_402A90:                             ; DATA XREF: sub_402A90+5↑o
.text:004041DA                                         ; .rdata:004053DC↓o
.text:004041DA                 mov     edx, [esp-4+arg_4]
.text:004041DE                 lea     eax, [edx+0Ch]
.text:004041E1                 mov     ecx, [edx-24h]
.text:004041E4                 xor     ecx, eax
.text:004041E6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004041EB                 mov     eax, offset stru_4055E0
.text:004041F0                 jmp     __CxxFrameHandler3
.text:004041F0 ; } // starts at 4041C0
.text:004041F0 ; END OF FUNCTION CHUNK FOR sub_402A90
.text:004041F0 ; ---------------------------------------------------------------------------
.text:004041F5                 align 10h
.text:00404200 ; START OF FUNCTION CHUNK FOR sub_402720
.text:00404200
.text:00404200 SEH_402720:                             ; DATA XREF: sub_402720+5↑o
.text:00404200                                         ; .rdata:004053E0↓o
.text:00404200 ; __unwind { // SEH_402720
.text:00404200                 mov     edx, [esp-4+Dst]
.text:00404204                 lea     eax, [edx+0Ch]
.text:00404207                 mov     ecx, [edx-28h]
.text:0040420A                 xor     ecx, eax
.text:0040420C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00404211                 mov     eax, offset stru_40566C
.text:00404216                 jmp     __CxxFrameHandler3
.text:00404216 ; } // starts at 404200
.text:00404216 ; END OF FUNCTION CHUNK FOR sub_402720
.text:00404216 ; ---------------------------------------------------------------------------
.text:0040421B                 align 10h
.text:00404220 ; START OF FUNCTION CHUNK FOR sub_401040
.text:00404220
.text:00404220 loc_404220:                             ; DATA XREF: .rdata:stru_405690↓o
.text:00404220 ; __unwind { // SEH_401040
.text:00404220                 lea     esi, [ebp+arg_1C]
.text:00404223                 jmp     loc_401AC0
.text:00404228 ; ---------------------------------------------------------------------------
.text:00404228
.text:00404228 loc_404228:                             ; DATA XREF: .rdata:00405698↓o
.text:00404228 ;   cleanup() // owned by 401065
.text:00404228                 lea     esi, [ebp+arg_0]
.text:0040422B                 jmp     loc_401AC0
.text:00404230 ; ---------------------------------------------------------------------------
.text:00404230
.text:00404230 SEH_401040:                             ; DATA XREF: sub_401040+5↑o
.text:00404230                                         ; .rdata:004053E4↓o
.text:00404230                 mov     edx, [esp-4+arg_4]
.text:00404234                 lea     eax, [edx+0Ch]
.text:00404237                 mov     ecx, [edx-10h]
.text:0040423A                 xor     ecx, eax
.text:0040423C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00404241                 mov     eax, offset stru_4056A0
.text:00404246                 jmp     __CxxFrameHandler3
.text:00404246 ; } // starts at 404220
.text:00404246 ; END OF FUNCTION CHUNK FOR sub_401040
.text:00404246 ; ---------------------------------------------------------------------------
.text:0040424B                 align 10h
.text:00404250 ; START OF FUNCTION CHUNK FOR _main
.text:00404250
.text:00404250 loc_404250:                             ; DATA XREF: .rdata:stru_4056C8↓o
.text:00404250 ; __unwind { // _main_SEH
.text:00404250                 mov     esi, [ebp+var_18]
.text:00404253                 jmp     loc_401AC0
.text:00404258 ; ---------------------------------------------------------------------------
.text:00404258
.text:00404258 loc_404258:                             ; DATA XREF: .rdata:004056D0↓o
.text:00404258                 mov     esi, [ebp+var_14]
.text:0040425B                 jmp     loc_401AC0
.text:00404260 ; ---------------------------------------------------------------------------
.text:00404260
.text:00404260 loc_404260:                             ; DATA XREF: .rdata:004056D8↓o
.text:00404260                 mov     esi, [ebp+var_14]
.text:00404263                 jmp     loc_401AC0
.text:00404268 ; ---------------------------------------------------------------------------
.text:00404268
.text:00404268 loc_404268:                             ; DATA XREF: .rdata:004056E0↓o
.text:00404268                 mov     esi, [ebp+var_14]
.text:0040426B                 jmp     loc_401AC0
.text:00404270 ; ---------------------------------------------------------------------------
.text:00404270
.text:00404270 loc_404270:                             ; DATA XREF: .rdata:004056E8↓o
.text:00404270                 mov     esi, [ebp+var_14]
.text:00404273                 jmp     loc_401AC0
.text:00404278 ; ---------------------------------------------------------------------------
.text:00404278
.text:00404278 loc_404278:                             ; DATA XREF: .rdata:004056F0↓o
.text:00404278                 mov     esi, [ebp+var_14]
.text:0040427B                 jmp     loc_401AC0
.text:00404280 ; ---------------------------------------------------------------------------
.text:00404280
.text:00404280 loc_404280:                             ; DATA XREF: .rdata:004056F8↓o
.text:00404280                 mov     esi, [ebp+var_14]
.text:00404283                 jmp     loc_401AC0
.text:00404288 ; ---------------------------------------------------------------------------
.text:00404288
.text:00404288 loc_404288:                             ; DATA XREF: .rdata:00405700↓o
.text:00404288                 mov     esi, [ebp+var_14]
.text:0040428B                 jmp     loc_401AC0
.text:00404290 ; ---------------------------------------------------------------------------
.text:00404290
.text:00404290 _main_SEH:                              ; DATA XREF: _main+8↑o
.text:00404290                                         ; .rdata:004053E8↓o
.text:00404290                 mov     edx, [esp-4+argv]
.text:00404294                 lea     eax, [edx-1Ch]
.text:00404297                 mov     ecx, [edx-20h]
.text:0040429A                 xor     ecx, eax
.text:0040429C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004042A1                 mov     eax, offset stru_405708
.text:004042A6                 jmp     __CxxFrameHandler3
.text:004042A6 ; } // starts at 404250
.text:004042A6 ; END OF FUNCTION CHUNK FOR _main
.text:004042A6 ; ---------------------------------------------------------------------------
.text:004042AB                 align 10h
.text:004042B0 ; START OF FUNCTION CHUNK FOR sub_404490
.text:004042B0
.text:004042B0 loc_4042B0:                             ; DATA XREF: .rdata:stru_40572C↓o
.text:004042B0 ; __unwind { // SEH_404490
.text:004042B0 ;   cleanup() // owned by 4044B4
.text:004042B0                 jmp     loc_401CB0
.text:004042B5 ; ---------------------------------------------------------------------------
.text:004042B5
.text:004042B5 SEH_404490:                             ; DATA XREF: sub_404490+5↓o
.text:004042B5                                         ; .rdata:004053EC↓o
.text:004042B5                 mov     edx, [esp-4+arg_4]
.text:004042B9                 lea     eax, [edx+0Ch]
.text:004042BC                 mov     ecx, [edx-0Ch]
.text:004042BF                 xor     ecx, eax
.text:004042C1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004042C6                 mov     eax, offset stru_405734
.text:004042CB                 jmp     __CxxFrameHandler3
.text:004042CB ; } // starts at 4042B0
.text:004042CB ; END OF FUNCTION CHUNK FOR sub_404490
.text:004042D0 ; ---------------------------------------------------------------------------
.text:004042D0 ; START OF FUNCTION CHUNK FOR sub_404400
.text:004042D0
.text:004042D0 loc_4042D0:                             ; DATA XREF: .rdata:stru_405758↓o
.text:004042D0 ; __unwind { // SEH_404400
.text:004042D0 ;   cleanup() // owned by 404424
.text:004042D0                 jmp     loc_401C60
.text:004042D5 ; ---------------------------------------------------------------------------
.text:004042D5
.text:004042D5 SEH_404400:                             ; DATA XREF: sub_404400+5↓o
.text:004042D5                                         ; .rdata:004053F0↓o
.text:004042D5                 mov     edx, [esp-4+arg_4]
.text:004042D9                 lea     eax, [edx+0Ch]
.text:004042DC                 mov     ecx, [edx-0Ch]
.text:004042DF                 xor     ecx, eax
.text:004042E1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004042E6                 mov     eax, offset stru_405760
.text:004042EB                 jmp     __CxxFrameHandler3
.text:004042EB ; } // starts at 4042D0
.text:004042EB ; END OF FUNCTION CHUNK FOR sub_404400
.text:004042F0
.text:004042F0 ; =============== S U B R O U T I N E =======================================
.text:004042F0
.text:004042F0 ; Attributes: bp-based frame
.text:004042F0
.text:004042F0 sub_4042F0      proc near               ; DATA XREF: .rdata:0040512C↓o
.text:004042F0
.text:004042F0 var_10          = dword ptr -10h
.text:004042F0 var_4           = dword ptr -4
.text:004042F0
.text:004042F0                 push    ebp
.text:004042F1                 mov     ebp, esp
.text:004042F3                 sub     esp, 10h
.text:004042F6                 push    18h
.text:004042F8                 call    ds:??2@YAPAXI@Z ; operator new(uint)
.text:004042FE                 add     esp, 4
.text:00404301                 test    eax, eax
.text:00404303                 jz      short loc_404341
.text:00404305                 mov     dword_42250C, eax
.text:0040430A                 mov     [eax], eax
.text:0040430C                 mov     eax, dword_42250C
.text:00404311                 mov     [eax+4], eax
.text:00404314                 mov     eax, dword_42250C
.text:00404319                 mov     [eax+8], eax
.text:0040431C                 mov     ecx, dword_42250C
.text:00404322                 mov     al, 1
.text:00404324                 mov     [ecx+14h], al
.text:00404327                 mov     edx, dword_42250C
.text:0040432D                 push    offset sub_404400 ; void (__cdecl *)()
.text:00404332                 mov     [edx+15h], al
.text:00404335                 call    _atexit
.text:0040433A                 add     esp, 4
.text:0040433D                 mov     esp, ebp
.text:0040433F                 pop     ebp
.text:00404340                 retn
.text:00404341 ; ---------------------------------------------------------------------------
.text:00404341
.text:00404341 loc_404341:                             ; CODE XREF: sub_4042F0+13↑j
.text:00404341                 lea     eax, [ebp+var_4]
.text:00404344                 push    eax
.text:00404345                 lea     ecx, [ebp+var_10]
.text:00404348                 mov     [ebp+var_4], 0
.text:0040434F                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:00404355                 push    offset __TI2?AVbad_alloc@std@@ ; throw info for 'class std::bad_alloc'
.text:0040435A                 lea     ecx, [ebp+var_10]
.text:0040435D                 push    ecx
.text:0040435E                 mov     [ebp+var_10], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:00404365                 call    _CxxThrowException
.text:00404365 sub_4042F0      endp
.text:00404365
.text:00404365 ; ---------------------------------------------------------------------------
.text:0040436A                 align 10h
.text:00404370
.text:00404370 ; =============== S U B R O U T I N E =======================================
.text:00404370
.text:00404370
.text:00404370 sub_404370      proc near               ; DATA XREF: .rdata:00405130↓o
.text:00404370                 push    offset sub_404460 ; void (__cdecl *)()
.text:00404375                 call    _atexit
.text:0040437A                 pop     ecx
.text:0040437B                 retn
.text:0040437B sub_404370      endp
.text:0040437B
.text:0040437B ; ---------------------------------------------------------------------------
.text:0040437C                 align 10h
.text:00404380
.text:00404380 ; =============== S U B R O U T I N E =======================================
.text:00404380
.text:00404380 ; Attributes: bp-based frame
.text:00404380
.text:00404380 sub_404380      proc near               ; DATA XREF: .rdata:00405134↓o
.text:00404380
.text:00404380 var_10          = dword ptr -10h
.text:00404380 var_4           = dword ptr -4
.text:00404380
.text:00404380                 push    ebp
.text:00404381                 mov     ebp, esp
.text:00404383                 sub     esp, 10h
.text:00404386                 push    18h
.text:00404388                 call    ds:??2@YAPAXI@Z ; operator new(uint)
.text:0040438E                 add     esp, 4
.text:00404391                 test    eax, eax
.text:00404393                 jz      short loc_4043D1
.text:00404395                 mov     dword_42251C, eax
.text:0040439A                 mov     [eax], eax
.text:0040439C                 mov     eax, dword_42251C
.text:004043A1                 mov     [eax+4], eax
.text:004043A4                 mov     eax, dword_42251C
.text:004043A9                 mov     [eax+8], eax
.text:004043AC                 mov     ecx, dword_42251C
.text:004043B2                 mov     al, 1
.text:004043B4                 mov     [ecx+14h], al
.text:004043B7                 mov     edx, dword_42251C
.text:004043BD                 push    offset sub_404490 ; void (__cdecl *)()
.text:004043C2                 mov     [edx+15h], al
.text:004043C5                 call    _atexit
.text:004043CA                 add     esp, 4
.text:004043CD                 mov     esp, ebp
.text:004043CF                 pop     ebp
.text:004043D0                 retn
.text:004043D1 ; ---------------------------------------------------------------------------
.text:004043D1
.text:004043D1 loc_4043D1:                             ; CODE XREF: sub_404380+13↑j
.text:004043D1                 lea     eax, [ebp+var_4]
.text:004043D4                 push    eax
.text:004043D5                 lea     ecx, [ebp+var_10]
.text:004043D8                 mov     [ebp+var_4], 0
.text:004043DF                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:004043E5                 push    offset __TI2?AVbad_alloc@std@@ ; throw info for 'class std::bad_alloc'
.text:004043EA                 lea     ecx, [ebp+var_10]
.text:004043ED                 push    ecx
.text:004043EE                 mov     [ebp+var_10], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:004043F5                 call    _CxxThrowException
.text:004043F5 sub_404380      endp
.text:004043F5
.text:004043F5 ; ---------------------------------------------------------------------------
.text:004043FA                 align 10h
.text:00404400
.text:00404400 ; =============== S U B R O U T I N E =======================================
.text:00404400
.text:00404400 ; Attributes: bp-based frame
.text:00404400
.text:00404400 ; void __cdecl sub_404400()
.text:00404400 sub_404400      proc near               ; DATA XREF: sub_4042F0+3D↑o
.text:00404400
.text:00404400 var_10          = byte ptr -10h
.text:00404400 var_C           = dword ptr -0Ch
.text:00404400 var_4           = dword ptr -4
.text:00404400 arg_4           = dword ptr  0Ch
.text:00404400
.text:00404400 ; FUNCTION CHUNK AT .text:00401C60 SIZE 0000000E BYTES
.text:00404400 ; FUNCTION CHUNK AT .text:004042D0 SIZE 00000020 BYTES
.text:00404400
.text:00404400 ; __unwind { // SEH_404400
.text:00404400                 push    ebp
.text:00404401                 mov     ebp, esp
.text:00404403                 push    0FFFFFFFFh
.text:00404405                 push    offset SEH_404400
.text:0040440A                 mov     eax, large fs:0
.text:00404410                 push    eax
.text:00404411                 push    ecx
.text:00404412                 push    esi
.text:00404413                 mov     eax, ___security_cookie
.text:00404418                 xor     eax, ebp
.text:0040441A                 push    eax
.text:0040441B                 lea     eax, [ebp+var_C]
.text:0040441E                 mov     large fs:0, eax
.text:00404424 ;   try {
.text:00404424                 mov     [ebp+var_4], 0
.text:0040442B                 mov     eax, dword_42250C
.text:00404430                 mov     ecx, [eax]
.text:00404432                 push    eax
.text:00404433                 push    ecx
.text:00404434                 lea     esi, [ebp+var_10]
.text:00404437                 call    sub_401E00
.text:0040443C                 mov     eax, dword_42250C
.text:00404441                 push    eax
.text:00404442                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00404448                 add     esp, 4
.text:0040444B                 mov     ecx, [ebp+var_C]
.text:0040444E                 mov     large fs:0, ecx
.text:00404455                 pop     ecx
.text:00404456                 pop     esi
.text:00404457                 mov     esp, ebp
.text:00404459                 pop     ebp
.text:0040445A                 retn
.text:0040445A ;   } // starts at 404424
.text:0040445A ; } // starts at 404400
.text:0040445A sub_404400      endp
.text:0040445A
.text:0040445A ; ---------------------------------------------------------------------------
.text:0040445B                 align 10h
.text:00404460
.text:00404460 ; =============== S U B R O U T I N E =======================================
.text:00404460
.text:00404460
.text:00404460 ; void __cdecl sub_404460()
.text:00404460 sub_404460      proc near               ; DATA XREF: sub_404370↑o
.text:00404460                 cmp     dword_40707C, 10h
.text:00404467                 jb      short loc_404478
.text:00404469                 mov     eax, dword_407068
.text:0040446E                 push    eax
.text:0040446F                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00404475                 add     esp, 4
.text:00404478
.text:00404478 loc_404478:                             ; CODE XREF: sub_404460+7↑j
.text:00404478                 xor     eax, eax
.text:0040447A                 mov     dword_40707C, 0Fh
.text:00404484                 mov     dword_407078, eax
.text:00404489                 mov     byte ptr dword_407068, al
.text:0040448E                 retn
.text:0040448E sub_404460      endp
.text:0040448E
.text:0040448E ; ---------------------------------------------------------------------------
.text:0040448F                 align 10h
.text:00404490
.text:00404490 ; =============== S U B R O U T I N E =======================================
.text:00404490
.text:00404490 ; Attributes: bp-based frame
.text:00404490
.text:00404490 ; void __cdecl sub_404490()
.text:00404490 sub_404490      proc near               ; DATA XREF: sub_404380+3D↑o
.text:00404490
.text:00404490 var_10          = byte ptr -10h
.text:00404490 var_C           = dword ptr -0Ch
.text:00404490 var_4           = dword ptr -4
.text:00404490 arg_4           = dword ptr  0Ch
.text:00404490
.text:00404490 ; FUNCTION CHUNK AT .text:00401CB0 SIZE 0000000E BYTES
.text:00404490 ; FUNCTION CHUNK AT .text:004042B0 SIZE 00000020 BYTES
.text:00404490
.text:00404490 ; __unwind { // SEH_404490
.text:00404490                 push    ebp
.text:00404491                 mov     ebp, esp
.text:00404493                 push    0FFFFFFFFh
.text:00404495                 push    offset SEH_404490
.text:0040449A                 mov     eax, large fs:0
.text:004044A0                 push    eax
.text:004044A1                 push    ecx
.text:004044A2                 push    esi
.text:004044A3                 mov     eax, ___security_cookie
.text:004044A8                 xor     eax, ebp
.text:004044AA                 push    eax
.text:004044AB                 lea     eax, [ebp+var_C]
.text:004044AE                 mov     large fs:0, eax
.text:004044B4 ;   try {
.text:004044B4                 mov     [ebp+var_4], 0
.text:004044BB                 mov     eax, dword_42251C
.text:004044C0                 mov     ecx, [eax]
.text:004044C2                 push    eax
.text:004044C3                 push    ecx
.text:004044C4                 lea     esi, [ebp+var_10]
.text:004044C7                 call    sub_401F20
.text:004044CC                 mov     eax, dword_42251C
.text:004044D1                 push    eax
.text:004044D2                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004044D8                 add     esp, 4
.text:004044DB                 mov     ecx, [ebp+var_C]
.text:004044DE                 mov     large fs:0, ecx
.text:004044E5                 pop     ecx
.text:004044E6                 pop     esi
.text:004044E7                 mov     esp, ebp
.text:004044E9                 pop     ebp
.text:004044EA                 retn
.text:004044EA ;   } // starts at 4044B4
.text:004044EA ; } // starts at 404490
.text:004044EA sub_404490      endp
.text:004044EA
.text:004044EA ; ---------------------------------------------------------------------------
.text:004044EB                 align 200h
.text:00404600                 dd 280h dup(?)
.text:00404600 _text           ends
.text:00404600