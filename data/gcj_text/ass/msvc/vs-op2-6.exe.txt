.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: bp-based frame
.text:00401000
.text:00401000 sub_401000      proc near               ; CODE XREF: _main+FB↓p
.text:00401000
.text:00401000 var_10          = dword ptr -10h
.text:00401000 var_C           = dword ptr -0Ch
.text:00401000 var_8           = dword ptr -8
.text:00401000 var_4           = dword ptr -4
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 mov     ecx, dword_404370
.text:00401009                 sub     esp, 14h
.text:0040100C                 push    ebx
.text:0040100D                 push    esi
.text:0040100E                 xor     eax, eax
.text:00401010                 push    edi
.text:00401011                 test    ecx, ecx
.text:00401013                 jle     loc_401108
.text:00401019                 lea     esp, [esp+0]
.text:00401020
.text:00401020 loc_401020:                             ; CODE XREF: sub_401000+2A↓j
.text:00401020                 mov     dword_404378[eax*4], eax
.text:00401027                 inc     eax
.text:00401028                 cmp     eax, ecx
.text:0040102A                 jl      short loc_401020
.text:0040102C                 test    ecx, ecx
.text:0040102E                 jle     loc_401108
.text:00401034                 mov     [ebp+var_8], ecx
.text:00401037
.text:00401037 loc_401037:                             ; CODE XREF: sub_401000+102↓j
.text:00401037                 xor     eax, eax
.text:00401039                 lea     edx, [ecx-1]
.text:0040103C                 mov     [ebp+var_4], eax
.text:0040103F                 test    edx, edx
.text:00401041                 jle     loc_4010FF
.text:00401047                 jmp     short loc_401053
.text:00401047 ; ---------------------------------------------------------------------------
.text:00401049                 align 10h
.text:00401050
.text:00401050 loc_401050:                             ; CODE XREF: sub_401000+F3↓j
.text:00401050                 mov     eax, [ebp+var_4]
.text:00401053
.text:00401053 loc_401053:                             ; CODE XREF: sub_401000+47↑j
.text:00401053                 mov     edi, dword_40437C[eax*4]
.text:0040105A                 mov     ebx, dword_404378[eax*4]
.text:00401061                 mov     esi, dword_4054A8[ebx*4]
.text:00401068                 mov     ecx, dword_4054A8[edi*4]
.text:0040106F                 mov     eax, 64h ; 'd'
.text:00401074                 sub     eax, dword_4065D8[ebx*4]
.text:0040107B                 mov     edx, esi
.text:0040107D                 imul    eax, ecx
.text:00401080                 imul    edx, 64h ; 'd'
.text:00401083                 imul    ecx, 64h ; 'd'
.text:00401086                 add     eax, edx
.text:00401088                 imul    eax, 64h ; 'd'
.text:0040108B                 cdq
.text:0040108C                 mov     [ebp+var_10], eax
.text:0040108F                 mov     eax, 64h ; 'd'
.text:00401094                 sub     eax, dword_4065D8[edi*4]
.text:0040109B                 mov     [ebp+var_C], edx
.text:0040109E                 imul    eax, esi
.text:004010A1                 add     eax, ecx
.text:004010A3                 mov     ecx, [ebp+var_C]
.text:004010A6                 imul    eax, 64h ; 'd'
.text:004010A9                 cdq
.text:004010AA                 cmp     ecx, edx
.text:004010AC                 jg      short loc_4010C2
.text:004010AE                 jl      short loc_4010B5
.text:004010B0                 cmp     [ebp+var_10], eax
.text:004010B3                 ja      short loc_4010C2
.text:004010B5
.text:004010B5 loc_4010B5:                             ; CODE XREF: sub_401000+AE↑j
.text:004010B5                 cmp     [ebp+var_10], eax
.text:004010B8                 jnz     short loc_4010E3
.text:004010BA                 cmp     ecx, edx
.text:004010BC                 jnz     short loc_4010E3
.text:004010BE                 cmp     ebx, edi
.text:004010C0                 jle     short loc_4010E3
.text:004010C2
.text:004010C2 loc_4010C2:                             ; CODE XREF: sub_401000+AC↑j
.text:004010C2                                         ; sub_401000+B3↑j
.text:004010C2                 mov     eax, [ebp+var_4]
.text:004010C5                 mov     edx, dword_40437C[eax*4]
.text:004010CC                 mov     ecx, dword_404378[eax*4]
.text:004010D3                 mov     dword_404378[eax*4], edx
.text:004010DA                 mov     dword_40437C[eax*4], ecx
.text:004010E1                 jmp     short loc_4010E6
.text:004010E3 ; ---------------------------------------------------------------------------
.text:004010E3
.text:004010E3 loc_4010E3:                             ; CODE XREF: sub_401000+B8↑j
.text:004010E3                                         ; sub_401000+BC↑j ...
.text:004010E3                 mov     eax, [ebp+var_4]
.text:004010E6
.text:004010E6 loc_4010E6:                             ; CODE XREF: sub_401000+E1↑j
.text:004010E6                 mov     ecx, dword_404370
.text:004010EC                 inc     eax
.text:004010ED                 dec     ecx
.text:004010EE                 mov     [ebp+var_4], eax
.text:004010F1                 cmp     eax, ecx
.text:004010F3                 jl      loc_401050
.text:004010F9                 mov     ecx, dword_404370
.text:004010FF
.text:004010FF loc_4010FF:                             ; CODE XREF: sub_401000+41↑j
.text:004010FF                 dec     [ebp+var_8]
.text:00401102                 jnz     loc_401037
.text:00401108
.text:00401108 loc_401108:                             ; CODE XREF: sub_401000+13↑j
.text:00401108                                         ; sub_401000+2E↑j
.text:00401108                 xor     esi, esi
.text:0040110A                 test    ecx, ecx
.text:0040110C                 jle     short loc_40113B
.text:0040110E                 mov     edi, ds:printf
.text:00401114                 jmp     short loc_401120
.text:00401114 ; ---------------------------------------------------------------------------
.text:00401116                 align 10h
.text:00401120
.text:00401120 loc_401120:                             ; CODE XREF: sub_401000+114↑j
.text:00401120                                         ; sub_401000+139↓j
.text:00401120                 mov     eax, dword_404378[esi*4]
.text:00401127                 push    eax
.text:00401128                 push    offset Format   ; " %d"
.text:0040112D                 call    edi ; printf
.text:0040112F                 inc     esi
.text:00401130                 add     esp, 8
.text:00401133                 cmp     esi, dword_404370
.text:00401139                 jl      short loc_401120
.text:0040113B
.text:0040113B loc_40113B:                             ; CODE XREF: sub_401000+10C↑j
.text:0040113B                 push    offset Str      ; Str
.text:00401140                 call    ds:puts
.text:00401146                 add     esp, 4
.text:00401149                 pop     edi
.text:0040114A                 pop     esi
.text:0040114B                 pop     ebx
.text:0040114C                 mov     esp, ebp
.text:0040114E                 pop     ebp
.text:0040114F                 retn
.text:0040114F sub_401000      endp
.text:0040114F
.text:00401150
.text:00401150 ; =============== S U B R O U T I N E =======================================
.text:00401150
.text:00401150 ; Attributes: bp-based frame fuzzy-sp
.text:00401150
.text:00401150 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00401150 _main           proc near               ; CODE XREF: ___tmainCRTStartup+11D↓p
.text:00401150
.text:00401150 var_8           = dword ptr -8
.text:00401150 var_4           = dword ptr -4
.text:00401150 argc            = dword ptr  8
.text:00401150 argv            = dword ptr  0Ch
.text:00401150 envp            = dword ptr  10h
.text:00401150
.text:00401150                 push    ebp
.text:00401151                 mov     ebp, esp
.text:00401153                 and     esp, 0FFFFFFF8h
.text:00401156                 sub     esp, 0Ch
.text:00401159                 mov     ecx, ds:?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A ; std::basic_istream<char,std::char_traits<char>> std::cin
.text:0040115F                 push    ebx
.text:00401160                 push    esi
.text:00401161                 push    edi
.text:00401162                 lea     eax, [esp+18h+var_8]
.text:00401166                 push    eax
.text:00401167                 call    ds:??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z ; std::basic_istream<char,std::char_traits<char>>::operator>>(int &)
.text:0040116D                 cmp     [esp+18h+var_8], 0
.text:00401172                 mov     [esp+18h+var_4], 0
.text:0040117A                 jle     loc_40125E
.text:00401180                 mov     ebx, ds:scanf
.text:00401186
.text:00401186 loc_401186:                             ; CODE XREF: _main+108↓j
.text:00401186                 mov     ecx, ds:?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl(std::basic_ostream<char,std::char_traits<char>> &)
.text:0040118C                 push    ecx
.text:0040118D                 call    ds:clock
.text:00401193                 mov     edx, [esp+1Ch+var_8]
.text:00401197                 push    eax
.text:00401198                 mov     eax, [esp+20h+var_4]
.text:0040119C                 push    edx
.text:0040119D                 push    ecx
.text:0040119E                 mov     ecx, ds:?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cerr
.text:004011A4                 push    eax
.text:004011A5                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
.text:004011AB                 push    eax
.text:004011AC                 call    sub_401350
.text:004011B1                 add     esp, 8
.text:004011B4                 mov     ecx, eax
.text:004011B6                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
.text:004011BC                 push    eax
.text:004011BD                 call    sub_401580
.text:004011C2                 add     esp, 4
.text:004011C5                 mov     ecx, eax
.text:004011C7                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@J@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(long)
.text:004011CD                 mov     ecx, eax
.text:004011CF                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(std::basic_ostream<char,std::char_traits<char>> & (*)(std::basic_ostream<char,std::char_traits<char>> &))
.text:004011D5                 mov     ecx, ds:?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A ; std::basic_istream<char,std::char_traits<char>> std::cin
.text:004011DB                 push    offset dword_404370
.text:004011E0                 call    ds:??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z ; std::basic_istream<char,std::char_traits<char>>::operator>>(int &)
.text:004011E6                 mov     eax, dword_404370
.text:004011EB                 xor     esi, esi
.text:004011ED                 test    eax, eax
.text:004011EF                 jle     short loc_40120E
.text:004011F1                 mov     edi, offset dword_4054A8
.text:004011F6
.text:004011F6 loc_4011F6:                             ; CODE XREF: _main+BC↓j
.text:004011F6                 push    edi
.text:004011F7                 push    offset aD       ; "%d"
.text:004011FC                 call    ebx ; scanf
.text:004011FE                 mov     eax, dword_404370
.text:00401203                 inc     esi
.text:00401204                 add     esp, 8
.text:00401207                 add     edi, 4
.text:0040120A                 cmp     esi, eax
.text:0040120C                 jl      short loc_4011F6
.text:0040120E
.text:0040120E loc_40120E:                             ; CODE XREF: _main+9F↑j
.text:0040120E                 xor     esi, esi
.text:00401210                 test    eax, eax
.text:00401212                 jle     short loc_401237
.text:00401214                 mov     edi, offset dword_4065D8
.text:00401219                 lea     esp, [esp+0]
.text:00401220
.text:00401220 loc_401220:                             ; CODE XREF: _main+E5↓j
.text:00401220                 push    edi
.text:00401221                 push    offset aD       ; "%d"
.text:00401226                 call    ebx ; scanf
.text:00401228                 inc     esi
.text:00401229                 add     esp, 8
.text:0040122C                 add     edi, 4
.text:0040122F                 cmp     esi, dword_404370
.text:00401235                 jl      short loc_401220
.text:00401237
.text:00401237 loc_401237:                             ; CODE XREF: _main+C2↑j
.text:00401237                 mov     esi, [esp+18h+var_4]
.text:0040123B                 inc     esi
.text:0040123C                 push    esi
.text:0040123D                 push    offset aCaseD   ; "Case #%d:"
.text:00401242                 call    ds:printf
.text:00401248                 add     esp, 8
.text:0040124B                 call    sub_401000
.text:00401250                 mov     [esp+18h+var_4], esi
.text:00401254                 cmp     esi, [esp+18h+var_8]
.text:00401258                 jl      loc_401186
.text:0040125E
.text:0040125E loc_40125E:                             ; CODE XREF: _main+2A↑j
.text:0040125E                 mov     ecx, ds:?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl(std::basic_ostream<char,std::char_traits<char>> &)
.text:00401264                 push    ecx
.text:00401265                 call    ds:clock
.text:0040126B                 push    eax
.text:0040126C                 mov     eax, [esp+20h+var_8]
.text:00401270                 push    eax
.text:00401271                 push    ecx
.text:00401272                 mov     ecx, ds:?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cerr
.text:00401278                 push    eax
.text:00401279                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
.text:0040127F                 push    eax
.text:00401280                 call    sub_401350
.text:00401285                 add     esp, 8
.text:00401288                 mov     ecx, eax
.text:0040128A                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
.text:00401290                 push    eax
.text:00401291                 call    sub_401580
.text:00401296                 add     esp, 4
.text:00401299                 mov     ecx, eax
.text:0040129B                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@J@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(long)
.text:004012A1                 mov     ecx, eax
.text:004012A3                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(std::basic_ostream<char,std::char_traits<char>> & (*)(std::basic_ostream<char,std::char_traits<char>> &))
.text:004012A9                 pop     edi
.text:004012AA                 pop     esi
.text:004012AB                 xor     eax, eax
.text:004012AD                 pop     ebx
.text:004012AE                 mov     esp, ebp
.text:004012B0                 pop     ebp
.text:004012B1                 retn
.text:004012B1 _main           endp
.text:004012B1
.text:004012B1 ; ---------------------------------------------------------------------------
.text:004012B2                 align 10h
.text:004012C0
.text:004012C0 ; =============== S U B R O U T I N E =======================================
.text:004012C0
.text:004012C0 ; Attributes: bp-based frame
.text:004012C0
.text:004012C0 sub_4012C0      proc near               ; CODE XREF: sub_401580+A2C↓p
.text:004012C0                                         ; sub_401350+C9C↓p
.text:004012C0
.text:004012C0 var_C           = dword ptr -0Ch
.text:004012C0 var_4           = dword ptr -4
.text:004012C0 arg_0           = dword ptr  8
.text:004012C0 arg_4           = dword ptr  0Ch
.text:004012C0
.text:004012C0 ; FUNCTION CHUNK AT .text:00401330 SIZE 00000019 BYTES
.text:004012C0 ; FUNCTION CHUNK AT .text:00401F70 SIZE 00000023 BYTES
.text:004012C0
.text:004012C0 ; __unwind { // SEH_4012C0
.text:004012C0                 push    ebp
.text:004012C1                 mov     ebp, esp
.text:004012C3                 push    0FFFFFFFFh
.text:004012C5                 push    offset SEH_4012C0
.text:004012CA                 mov     eax, large fs:0
.text:004012D0                 push    eax
.text:004012D1                 push    esi
.text:004012D2                 mov     eax, ___security_cookie
.text:004012D7                 xor     eax, ebp
.text:004012D9                 push    eax
.text:004012DA                 lea     eax, [ebp+var_C]
.text:004012DD                 mov     large fs:0, eax
.text:004012E3                 mov     esi, [ebp+arg_0]
.text:004012E6 ;   try {
.text:004012E6                 mov     [ebp+var_4], 0
.text:004012ED                 call    ds:?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
.text:004012F3                 test    al, al
.text:004012F5                 jnz     short loc_4012FF
.text:004012F7                 mov     ecx, [esi]
.text:004012F9                 call    ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
.text:004012F9 ;   } // starts at 4012E6
.text:004012FF
.text:004012FF loc_4012FF:                             ; CODE XREF: sub_4012C0+35↑j
.text:004012FF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00401306                 mov     eax, [esi]
.text:00401308                 mov     ecx, [eax]
.text:0040130A                 mov     edx, [ecx+4]
.text:0040130D                 mov     eax, [edx+eax+38h]
.text:00401311                 test    eax, eax
.text:00401313                 jz      short loc_40131E
.text:00401315                 mov     edx, [eax]
.text:00401317                 mov     ecx, eax
.text:00401319                 mov     eax, [edx+8]
.text:0040131C                 call    eax
.text:0040131E
.text:0040131E loc_40131E:                             ; CODE XREF: sub_4012C0+53↑j
.text:0040131E                 mov     ecx, [ebp+var_C]
.text:00401321                 mov     large fs:0, ecx
.text:00401328                 pop     ecx
.text:00401329                 pop     esi
.text:0040132A                 mov     esp, ebp
.text:0040132C                 pop     ebp
.text:0040132D                 retn    4
.text:0040132D ; } // starts at 4012C0
.text:0040132D sub_4012C0      endp
.text:0040132D
.text:00401330 ; ---------------------------------------------------------------------------
.text:00401330 ; START OF FUNCTION CHUNK FOR sub_401350
.text:00401330 ;   ADDITIONAL PARENT FUNCTION sub_4012C0
.text:00401330 ;   ADDITIONAL PARENT FUNCTION sub_401580
.text:00401330
.text:00401330 loc_401330:                             ; CODE XREF: sub_4012C0+CB3↓j
.text:00401330                                         ; sub_401580+A23↓j ...
.text:00401330 ; __unwind { // SEH_401350
.text:00401330                 mov     eax, [eax]
.text:00401332                 mov     ecx, [eax]
.text:00401334                 mov     edx, [ecx+4]
.text:00401337                 mov     eax, [edx+eax+38h]
.text:0040133B                 test    eax, eax
.text:0040133D                 jz      short locret_401348
.text:0040133F                 mov     edx, [eax]
.text:00401341                 mov     ecx, eax
.text:00401343                 mov     eax, [edx+8]
.text:00401346                 jmp     eax
.text:00401348 ; ---------------------------------------------------------------------------
.text:00401348
.text:00401348 locret_401348:                          ; CODE XREF: sub_401350-13↑j
.text:00401348                 retn
.text:00401348 ; } // starts at 401330
.text:00401348 ; END OF FUNCTION CHUNK FOR sub_401350
.text:00401348 ; ---------------------------------------------------------------------------
.text:00401349                 align 10h
.text:00401350
.text:00401350 ; =============== S U B R O U T I N E =======================================
.text:00401350
.text:00401350 ; Attributes: bp-based frame
.text:00401350
.text:00401350 sub_401350      proc near               ; CODE XREF: _main+5C↑p
.text:00401350                                         ; _main+130↑p
.text:00401350
.text:00401350 var_20          = dword ptr -20h
.text:00401350 var_1C          = byte ptr -1Ch
.text:00401350 var_18          = dword ptr -18h
.text:00401350 var_14          = dword ptr -14h
.text:00401350 var_10          = dword ptr -10h
.text:00401350 var_C           = dword ptr -0Ch
.text:00401350 var_4           = dword ptr -4
.text:00401350 arg_0           = dword ptr  8
.text:00401350 arg_4           = dword ptr  0Ch
.text:00401350
.text:00401350 ; FUNCTION CHUNK AT .text:00401330 SIZE 00000019 BYTES
.text:00401350 ; FUNCTION CHUNK AT .text:00401FE0 SIZE 00000035 BYTES
.text:00401350
.text:00401350 ; __unwind { // SEH_401350
.text:00401350                 push    ebp
.text:00401351                 mov     ebp, esp
.text:00401353                 push    0FFFFFFFFh
.text:00401355                 push    offset SEH_401350
.text:0040135A                 mov     eax, large fs:0
.text:00401360                 push    eax
.text:00401361                 sub     esp, 14h
.text:00401364                 push    ebx
.text:00401365                 push    esi
.text:00401366                 push    edi
.text:00401367                 mov     eax, ___security_cookie
.text:0040136C                 xor     eax, ebp
.text:0040136E                 push    eax
.text:0040136F                 lea     eax, [ebp+var_C]
.text:00401372                 mov     large fs:0, eax
.text:00401378                 mov     [ebp+var_10], esp
.text:0040137B                 mov     esi, [ebp+arg_0]
.text:0040137E                 mov     eax, [esi]
.text:00401380                 mov     edx, [eax+4]
.text:00401383                 mov     ecx, [edx+esi+24h]
.text:00401387                 mov     eax, [edx+esi+20h]
.text:0040138B                 xor     ebx, ebx
.text:0040138D                 mov     [ebp+var_14], ebx
.text:00401390                 cmp     ecx, ebx
.text:00401392                 jl      short loc_4013B0
.text:00401394                 jg      short loc_4013A5
.text:00401396                 cmp     eax, ebx
.text:00401398                 jbe     short loc_4013B0
.text:0040139A                 cmp     ecx, ebx
.text:0040139C                 jl      short loc_4013B0
.text:0040139E                 jg      short loc_4013A5
.text:004013A0                 cmp     eax, 1
.text:004013A3                 jbe     short loc_4013B0
.text:004013A5
.text:004013A5 loc_4013A5:                             ; CODE XREF: sub_401350+44↑j
.text:004013A5                                         ; sub_401350+4E↑j
.text:004013A5                 sub     eax, 1
.text:004013A8                 sbb     ecx, ebx
.text:004013AA                 mov     edi, eax
.text:004013AC                 mov     ebx, ecx
.text:004013AE                 jmp     short loc_4013B2
.text:004013B0 ; ---------------------------------------------------------------------------
.text:004013B0
.text:004013B0 loc_4013B0:                             ; CODE XREF: sub_401350+42↑j
.text:004013B0                                         ; sub_401350+48↑j ...
.text:004013B0                 xor     edi, edi
.text:004013B2
.text:004013B2 loc_4013B2:                             ; CODE XREF: sub_401350+5E↑j
.text:004013B2                 mov     ecx, [edx+esi+38h]
.text:004013B6                 mov     [ebp+var_20], esi
.text:004013B9                 test    ecx, ecx
.text:004013BB                 jz      short loc_4013C4
.text:004013BD                 mov     edx, [ecx]
.text:004013BF                 mov     eax, [edx+4]
.text:004013C2                 call    eax
.text:004013C4
.text:004013C4 loc_4013C4:                             ; CODE XREF: sub_401350+6B↑j
.text:004013C4 ;   try {
.text:004013C4                 mov     [ebp+var_4], 0
.text:004013CB                 mov     ecx, [esi]
.text:004013CD                 mov     eax, [ecx+4]
.text:004013D0                 cmp     dword ptr [eax+esi+0Ch], 0
.text:004013D5                 jnz     short loc_4013E7
.text:004013D7                 mov     eax, [eax+esi+3Ch]
.text:004013DB                 test    eax, eax
.text:004013DD                 jz      short loc_4013E7
.text:004013DF                 mov     ecx, eax
.text:004013E1                 call    ds:?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char>>::flush(void)
.text:004013E7
.text:004013E7 loc_4013E7:                             ; CODE XREF: sub_401350+85↑j
.text:004013E7                                         ; sub_401350+8D↑j
.text:004013E7                 mov     eax, [esi]
.text:004013E9                 mov     eax, [eax+4]
.text:004013EC                 cmp     dword ptr [eax+esi+0Ch], 0
.text:004013F1                 setz    cl
.text:004013F4                 mov     [ebp+var_1C], cl
.text:004013F4 ;   } // starts at 4013C4
.text:004013F7 ;   try {
.text:004013F7                 mov     [ebp+var_4], 1
.text:004013FE                 test    cl, cl
.text:00401400                 jnz     short loc_40140E
.text:00401402                 mov     [ebp+var_14], 4
.text:00401409                 jmp     loc_4014A5
.text:00401409 ;   } // starts at 4013F7
.text:0040140E ; ---------------------------------------------------------------------------
.text:0040140E
.text:0040140E loc_40140E:                             ; CODE XREF: sub_401350+B0↑j
.text:0040140E ;   try {
.text:0040140E                 mov     byte ptr [ebp+var_4], 2
.text:00401412                 mov     eax, [eax+esi+14h]
.text:00401416                 and     eax, 1C0h
.text:0040141B                 cmp     eax, 40h ; '@'
.text:0040141E                 jz      short loc_401457
.text:00401420
.text:00401420 loc_401420:                             ; CODE XREF: sub_401350+1B9↓j
.text:00401420                 test    ebx, ebx
.text:00401422                 jl      short loc_401451
.text:00401424                 jg      short loc_40142A
.text:00401426                 test    edi, edi
.text:00401428                 jz      short loc_401451
.text:0040142A
.text:0040142A loc_40142A:                             ; CODE XREF: sub_401350+D4↑j
.text:0040142A                 mov     edx, [esi]
.text:0040142C                 mov     eax, [edx+4]
.text:0040142F                 mov     cl, [eax+esi+40h]
.text:00401433                 mov     byte ptr [ebp+var_18], cl
.text:00401436                 mov     edx, [ebp+var_18]
.text:00401439                 mov     ecx, [eax+esi+38h]
.text:0040143D                 push    edx
.text:0040143E                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:00401444                 cmp     eax, 0FFFFFFFFh
.text:00401447                 jnz     loc_401503
.text:0040144D                 or      [ebp+var_14], 4
.text:00401451
.text:00401451 loc_401451:                             ; CODE XREF: sub_401350+D2↑j
.text:00401451                                         ; sub_401350+D8↑j
.text:00401451                 cmp     [ebp+var_14], 0
.text:00401455                 jnz     short loc_40148F
.text:00401457
.text:00401457 loc_401457:                             ; CODE XREF: sub_401350+CE↑j
.text:00401457                 mov     eax, [esi]
.text:00401459                 mov     ecx, [eax+4]
.text:0040145C                 mov     ecx, [ecx+esi+38h]
.text:00401460                 xor     eax, eax
.text:00401462                 push    eax
.text:00401463                 mov     eax, 1
.text:00401468                 push    eax
.text:00401469                 mov     eax, offset unk_403140
.text:0040146E                 push    eax
.text:0040146F                 call    ds:?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputn(char const *,__int64)
.text:00401475                 mov     ecx, 1
.text:0040147A                 cmp     eax, ecx
.text:0040147C                 jnz     short loc_401488
.text:0040147E                 xor     eax, eax
.text:00401480                 cmp     edx, eax
.text:00401482                 jz      loc_401510
.text:00401488
.text:00401488 loc_401488:                             ; CODE XREF: sub_401350+12C↑j
.text:00401488                 mov     [ebp+var_14], 4
.text:0040148F
.text:0040148F loc_40148F:                             ; CODE XREF: sub_401350+105↑j
.text:0040148F                                         ; sub_401350+1C2↓j ...
.text:0040148F                 mov     edx, [esi]
.text:00401491                 mov     eax, [edx+4]
.text:00401494                 xor     ecx, ecx
.text:00401496                 mov     [eax+esi+20h], ecx
.text:0040149A                 mov     [eax+esi+24h], ecx
.text:0040149A ;   } // starts at 40140E
.text:0040149E ;   try {
.text:0040149E                 mov     [ebp+var_4], 1
.text:004014A5
.text:004014A5 loc_4014A5:                             ; CODE XREF: sub_401350+B9↑j
.text:004014A5                                         ; sub_401350+226↓j
.text:004014A5                 mov     ecx, [esi]
.text:004014A7                 mov     eax, [ebp+var_14]
.text:004014AA                 mov     ecx, [ecx+4]
.text:004014AD                 push    0
.text:004014AF                 push    eax
.text:004014B0                 add     ecx, esi
.text:004014B2                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:004014B2 ;   } // starts at 40149E
.text:004014B8 ;   try {
.text:004014B8                 mov     [ebp+var_4], 4
.text:004014BF                 call    ds:?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
.text:004014C5                 mov     edi, [ebp+var_20]
.text:004014C8                 test    al, al
.text:004014CA                 jnz     short loc_4014D4
.text:004014CC                 mov     ecx, edi
.text:004014CE                 call    ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
.text:004014CE ;   } // starts at 4014B8
.text:004014D4
.text:004014D4 loc_4014D4:                             ; CODE XREF: sub_401350+17A↑j
.text:004014D4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:004014DB                 mov     edx, [edi]
.text:004014DD                 mov     eax, [edx+4]
.text:004014E0                 mov     ecx, [eax+edi+38h]
.text:004014E4                 test    ecx, ecx
.text:004014E6                 jz      short loc_4014EF
.text:004014E8                 mov     edx, [ecx]
.text:004014EA                 mov     eax, [edx+8]
.text:004014ED                 call    eax
.text:004014EF
.text:004014EF loc_4014EF:                             ; CODE XREF: sub_401350+196↑j
.text:004014EF                 mov     eax, esi
.text:004014F1                 mov     ecx, [ebp+var_C]
.text:004014F4                 mov     large fs:0, ecx
.text:004014FB                 pop     ecx
.text:004014FC                 pop     edi
.text:004014FD                 pop     esi
.text:004014FE                 pop     ebx
.text:004014FF                 mov     esp, ebp
.text:00401501                 pop     ebp
.text:00401502                 retn
.text:00401503 ; ---------------------------------------------------------------------------
.text:00401503
.text:00401503 loc_401503:                             ; CODE XREF: sub_401350+F7↑j
.text:00401503                 add     edi, 0FFFFFFFFh
.text:00401506                 adc     ebx, 0FFFFFFFFh
.text:00401509                 jmp     loc_401420
.text:00401509 ; ---------------------------------------------------------------------------
.text:0040150E                 align 10h
.text:00401510
.text:00401510 loc_401510:                             ; CODE XREF: sub_401350+132↑j
.text:00401510                                         ; sub_401350+200↓j
.text:00401510                 test    ebx, ebx
.text:00401512                 jl      loc_40148F
.text:00401518                 jg      short loc_401522
.text:0040151A                 test    edi, edi
.text:0040151C                 jz      loc_40148F
.text:00401522
.text:00401522 loc_401522:                             ; CODE XREF: sub_401350+1C8↑j
.text:00401522                 mov     edx, [esi]
.text:00401524                 mov     eax, [edx+4]
.text:00401527                 mov     cl, [eax+esi+40h]
.text:0040152B                 mov     byte ptr [ebp+var_18], cl
.text:0040152E                 mov     edx, [ebp+var_18]
.text:00401531                 mov     ecx, [eax+esi+38h]
.text:00401535                 push    edx
.text:00401536                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:0040153C                 cmp     eax, 0FFFFFFFFh
.text:0040153F                 jnz     short loc_40154A
.text:00401541                 or      [ebp+var_14], 4
.text:00401545                 jmp     loc_40148F
.text:0040154A ; ---------------------------------------------------------------------------
.text:0040154A
.text:0040154A loc_40154A:                             ; CODE XREF: sub_401350+1EF↑j
.text:0040154A                 add     edi, 0FFFFFFFFh
.text:0040154D                 adc     ebx, 0FFFFFFFFh
.text:00401550                 jmp     short loc_401510
.text:00401552 ; ---------------------------------------------------------------------------
.text:00401552
.text:00401552 loc_401552:                             ; DATA XREF: .rdata:stru_403360↓o
.text:00401552 ;   catch(...) // owned by 40140E
.text:00401552                 mov     eax, [ebp+arg_0]
.text:00401555                 mov     ecx, [eax]
.text:00401557                 mov     ecx, [ecx+4]
.text:0040155A                 push    1
.text:0040155C                 push    4
.text:0040155E                 add     ecx, eax
.text:00401560                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:00401566 ;   try {
.text:00401566                 mov     [ebp+var_4], 1
.text:0040156D                 mov     eax, offset loc_401573
.text:00401572                 retn
.text:00401573 ; ---------------------------------------------------------------------------
.text:00401573
.text:00401573 loc_401573:                             ; CODE XREF: sub_401350+222↑j
.text:00401573                                         ; DATA XREF: sub_401350+21D↑o
.text:00401573                 mov     esi, [ebp+arg_0]
.text:00401576                 jmp     loc_4014A5
.text:00401576 ;   } // starts at 401566
.text:00401576 ; } // starts at 401350
.text:00401576 sub_401350      endp
.text:00401576
.text:00401576 ; ---------------------------------------------------------------------------
.text:0040157B                 align 10h
.text:00401580
.text:00401580 ; =============== S U B R O U T I N E =======================================
.text:00401580
.text:00401580 ; Attributes: bp-based frame
.text:00401580
.text:00401580 sub_401580      proc near               ; CODE XREF: _main+6D↑p
.text:00401580                                         ; _main+141↑p
.text:00401580
.text:00401580 var_24          = dword ptr -24h
.text:00401580 var_20          = byte ptr -20h
.text:00401580 var_1C          = dword ptr -1Ch
.text:00401580 var_18          = dword ptr -18h
.text:00401580 var_14          = dword ptr -14h
.text:00401580 var_10          = dword ptr -10h
.text:00401580 var_C           = dword ptr -0Ch
.text:00401580 var_4           = dword ptr -4
.text:00401580 arg_0           = dword ptr  8
.text:00401580 arg_4           = dword ptr  0Ch
.text:00401580
.text:00401580 ; FUNCTION CHUNK AT .text:00401330 SIZE 00000019 BYTES
.text:00401580 ; FUNCTION CHUNK AT .text:00401FA0 SIZE 00000035 BYTES
.text:00401580
.text:00401580 ; __unwind { // SEH_401580
.text:00401580                 push    ebp
.text:00401581                 mov     ebp, esp
.text:00401583                 push    0FFFFFFFFh
.text:00401585                 push    offset SEH_401580
.text:0040158A                 mov     eax, large fs:0
.text:00401590                 push    eax
.text:00401591                 sub     esp, 18h
.text:00401594                 push    ebx
.text:00401595                 push    esi
.text:00401596                 push    edi
.text:00401597                 mov     eax, ___security_cookie
.text:0040159C                 xor     eax, ebp
.text:0040159E                 push    eax
.text:0040159F                 lea     eax, [ebp+var_C]
.text:004015A2                 mov     large fs:0, eax
.text:004015A8                 mov     [ebp+var_10], esp
.text:004015AB                 mov     esi, [ebp+arg_0]
.text:004015AE                 mov     eax, [esi]
.text:004015B0                 mov     ecx, [eax+4]
.text:004015B3                 mov     ecx, [ecx+esi+38h]
.text:004015B7                 xor     ebx, ebx
.text:004015B9                 mov     edi, esi
.text:004015BB                 mov     byte ptr [ebp+var_1C], 20h ; ' '
.text:004015BF                 mov     [ebp+var_14], ebx
.text:004015C2                 mov     [ebp+var_24], edi
.text:004015C5                 cmp     ecx, ebx
.text:004015C7                 jz      short loc_4015D0
.text:004015C9                 mov     edx, [ecx]
.text:004015CB                 mov     eax, [edx+4]
.text:004015CE                 call    eax
.text:004015D0
.text:004015D0 loc_4015D0:                             ; CODE XREF: sub_401580+47↑j
.text:004015D0 ;   try {
.text:004015D0                 mov     [ebp+var_4], ebx
.text:004015D3                 mov     ecx, [esi]
.text:004015D5                 mov     eax, [ecx+4]
.text:004015D8                 cmp     [eax+esi+0Ch], ebx
.text:004015DC                 jnz     short loc_4015EE
.text:004015DE                 mov     eax, [eax+esi+3Ch]
.text:004015E2                 cmp     eax, ebx
.text:004015E4                 jz      short loc_4015EE
.text:004015E6                 mov     ecx, eax
.text:004015E8                 call    ds:?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char>>::flush(void)
.text:004015EE
.text:004015EE loc_4015EE:                             ; CODE XREF: sub_401580+5C↑j
.text:004015EE                                         ; sub_401580+64↑j
.text:004015EE                 mov     eax, [esi]
.text:004015F0                 mov     edx, [eax+4]
.text:004015F3                 add     edx, esi
.text:004015F5                 cmp     [edx+0Ch], ebx
.text:004015F8                 setz    al
.text:004015FB                 mov     [ebp+var_20], al
.text:004015FB ;   } // starts at 4015D0
.text:004015FE ;   try {
.text:004015FE                 mov     [ebp+var_4], 1
.text:00401605                 test    al, al
.text:00401607                 jz      loc_401713
.text:0040160D                 mov     ecx, [edx+24h]
.text:00401610                 mov     eax, [edx+20h]
.text:00401613                 cmp     ecx, ebx
.text:00401615                 jg      short loc_401622
.text:00401617                 jl      short loc_40161E
.text:00401619                 cmp     eax, 1
.text:0040161C                 ja      short loc_401622
.text:0040161E
.text:0040161E loc_40161E:                             ; CODE XREF: sub_401580+97↑j
.text:0040161E                 xor     edi, edi
.text:00401620                 jmp     short loc_40162B
.text:00401622 ; ---------------------------------------------------------------------------
.text:00401622
.text:00401622 loc_401622:                             ; CODE XREF: sub_401580+95↑j
.text:00401622                                         ; sub_401580+9C↑j
.text:00401622                 sub     eax, 1
.text:00401625                 sbb     ecx, ebx
.text:00401627                 mov     edi, eax
.text:00401629                 mov     ebx, ecx
.text:00401629 ;   } // starts at 4015FE
.text:0040162B
.text:0040162B loc_40162B:                             ; CODE XREF: sub_401580+A0↑j
.text:0040162B ;   try {
.text:0040162B                 mov     byte ptr [ebp+var_4], 2
.text:0040162F                 mov     edx, [edx+14h]
.text:00401632                 and     edx, 1C0h
.text:00401638                 cmp     edx, 40h ; '@'
.text:0040163B                 jz      short loc_401682
.text:0040163D                 lea     ecx, [ecx+0]
.text:00401640
.text:00401640 loc_401640:                             ; CODE XREF: sub_401580+100↓j
.text:00401640                 cmp     [ebp+var_14], 0
.text:00401644                 jnz     loc_401707
.text:0040164A                 test    ebx, ebx
.text:0040164C                 jl      short loc_401682
.text:0040164E                 jg      short loc_401654
.text:00401650                 test    edi, edi
.text:00401652                 jz      short loc_401682
.text:00401654
.text:00401654 loc_401654:                             ; CODE XREF: sub_401580+CE↑j
.text:00401654                 mov     edx, [esi]
.text:00401656                 mov     eax, [edx+4]
.text:00401659                 mov     cl, [eax+esi+40h]
.text:0040165D                 mov     byte ptr [ebp+var_18], cl
.text:00401660                 mov     edx, [ebp+var_18]
.text:00401663                 mov     ecx, [eax+esi+38h]
.text:00401667                 push    edx
.text:00401668                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:0040166E                 cmp     eax, 0FFFFFFFFh
.text:00401671                 jnz     short loc_40167A
.text:00401673                 mov     [ebp+var_14], 4
.text:0040167A
.text:0040167A loc_40167A:                             ; CODE XREF: sub_401580+F1↑j
.text:0040167A                 add     edi, 0FFFFFFFFh
.text:0040167D                 adc     ebx, 0FFFFFFFFh
.text:00401680                 jmp     short loc_401640
.text:00401682 ; ---------------------------------------------------------------------------
.text:00401682
.text:00401682 loc_401682:                             ; CODE XREF: sub_401580+BB↑j
.text:00401682                                         ; sub_401580+CC↑j ...
.text:00401682                 mov     eax, [esi]
.text:00401684                 mov     ecx, [eax+4]
.text:00401687                 mov     edx, [ebp+var_1C]
.text:0040168A                 mov     ecx, [ecx+esi+38h]
.text:0040168E                 push    edx
.text:0040168F                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:00401695                 cmp     eax, 0FFFFFFFFh
.text:00401698                 jnz     short loc_4016A1
.text:0040169A                 mov     [ebp+var_14], 4
.text:004016A1
.text:004016A1 loc_4016A1:                             ; CODE XREF: sub_401580+118↑j
.text:004016A1                                         ; sub_401580+15F↓j
.text:004016A1                 cmp     [ebp+var_14], 0
.text:004016A5                 jnz     short loc_401707
.text:004016A7                 test    ebx, ebx
.text:004016A9                 jl      short loc_401707
.text:004016AB                 jg      short loc_4016B1
.text:004016AD                 test    edi, edi
.text:004016AF                 jz      short loc_401707
.text:004016B1
.text:004016B1 loc_4016B1:                             ; CODE XREF: sub_401580+12B↑j
.text:004016B1                 mov     eax, [esi]
.text:004016B3                 mov     eax, [eax+4]
.text:004016B6                 mov     dl, [eax+esi+40h]
.text:004016BA                 mov     eax, [eax+esi+38h]
.text:004016BE                 mov     byte ptr [ebp+var_18], dl
.text:004016C1                 mov     ecx, [ebp+var_18]
.text:004016C4                 push    ecx
.text:004016C5                 mov     ecx, eax
.text:004016C7                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:004016CD                 cmp     eax, 0FFFFFFFFh
.text:004016D0                 jnz     short loc_4016D9
.text:004016D2                 mov     [ebp+var_14], 4
.text:004016D9
.text:004016D9 loc_4016D9:                             ; CODE XREF: sub_401580+150↑j
.text:004016D9                 add     edi, 0FFFFFFFFh
.text:004016DC                 adc     ebx, 0FFFFFFFFh
.text:004016DF                 jmp     short loc_4016A1
.text:004016E1 ; ---------------------------------------------------------------------------
.text:004016E1
.text:004016E1 loc_4016E1:                             ; DATA XREF: .rdata:stru_4032F0↓o
.text:004016E1 ;   catch(...) // owned by 40162B
.text:004016E1                 mov     eax, [ebp+arg_0]
.text:004016E4                 mov     edx, [eax]
.text:004016E6                 mov     ecx, [edx+4]
.text:004016E9                 push    1
.text:004016EB                 push    4
.text:004016ED                 add     ecx, eax
.text:004016EF                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:004016EF ;   } // starts at 40162B
.text:004016F5 ;   try {
.text:004016F5                 mov     [ebp+var_4], 1
.text:004016FC                 mov     eax, offset loc_401702
.text:00401701                 retn
.text:00401702 ; ---------------------------------------------------------------------------
.text:00401702
.text:00401702 loc_401702:                             ; CODE XREF: sub_401580+181↑j
.text:00401702                                         ; DATA XREF: sub_401580+17C↑o
.text:00401702                 mov     esi, [ebp+arg_0]
.text:00401705                 jmp     short loc_40170E
.text:00401705 ;   } // starts at 4016F5
.text:00401707 ; ---------------------------------------------------------------------------
.text:00401707
.text:00401707 loc_401707:                             ; CODE XREF: sub_401580+C4↑j
.text:00401707                                         ; sub_401580+125↑j ...
.text:00401707 ;   try {
.text:00401707                 mov     [ebp+var_4], 1
.text:0040170E
.text:0040170E loc_40170E:                             ; CODE XREF: sub_401580+185↑j
.text:0040170E                 mov     edi, [ebp+var_24]
.text:00401711                 xor     ebx, ebx
.text:00401713
.text:00401713 loc_401713:                             ; CODE XREF: sub_401580+87↑j
.text:00401713                 mov     eax, [esi]
.text:00401715                 mov     eax, [eax+4]
.text:00401718                 mov     ecx, [ebp+var_14]
.text:0040171B                 mov     [eax+esi+20h], ebx
.text:0040171F                 mov     [eax+esi+24h], ebx
.text:00401723                 mov     edx, [esi]
.text:00401725                 push    ebx
.text:00401726                 push    ecx
.text:00401727                 mov     ecx, [edx+4]
.text:0040172A                 add     ecx, esi
.text:0040172C                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:0040172C ;   } // starts at 401707
.text:00401732 ;   try {
.text:00401732                 mov     [ebp+var_4], 4
.text:00401739                 call    ds:?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
.text:0040173F                 test    al, al
.text:00401741                 jnz     short loc_40174B
.text:00401743                 mov     ecx, edi
.text:00401745                 call    ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
.text:00401745 ;   } // starts at 401732
.text:0040174B
.text:0040174B loc_40174B:                             ; CODE XREF: sub_401580+1C1↑j
.text:0040174B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00401752                 mov     eax, [edi]
.text:00401754                 mov     ecx, [eax+4]
.text:00401757                 mov     ecx, [ecx+edi+38h]
.text:0040175B                 cmp     ecx, ebx
.text:0040175D                 jz      short loc_401766
.text:0040175F                 mov     edx, [ecx]
.text:00401761                 mov     eax, [edx+8]
.text:00401764                 call    eax
.text:00401766
.text:00401766 loc_401766:                             ; CODE XREF: sub_401580+1DD↑j
.text:00401766                 mov     eax, esi
.text:00401768                 mov     ecx, [ebp+var_C]
.text:0040176B                 mov     large fs:0, ecx
.text:00401772                 pop     ecx
.text:00401773                 pop     edi
.text:00401774                 pop     esi
.text:00401775                 pop     ebx
.text:00401776                 mov     esp, ebp
.text:00401778                 pop     ebp
.text:00401779                 retn
.text:00401779 ; } // starts at 401580
.text:00401779 sub_401580      endp
.text:00401779
.text:0040177A ; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401789 ; [0000004B BYTES: COLLAPSED FUNCTION _pre_cpp_init. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004017D4 ; [00000189 BYTES: COLLAPSED FUNCTION ___tmainCRTStartup. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040195D ; [000000BA BYTES: COLLAPSED FUNCTION _pre_c_init. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401A17 ; [0000000A BYTES: COLLAPSED FUNCTION start. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401A21 ; [00000106 BYTES: COLLAPSED FUNCTION ___report_gsfailure. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401B27 ; [00000042 BYTES: COLLAPSED FUNCTION __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401B69
.text:00401B69 ; =============== S U B R O U T I N E =======================================
.text:00401B69
.text:00401B69
.text:00401B69 sub_401B69      proc near               ; DATA XREF: .rdata:00403104↓o
.text:00401B69                 push    offset ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; lpTopLevelExceptionFilter
.text:00401B6E                 call    ds:SetUnhandledExceptionFilter
.text:00401B74                 xor     eax, eax
.text:00401B76                 retn
.text:00401B76 sub_401B69      endp
.text:00401B76
.text:00401B76 ; ---------------------------------------------------------------------------
.text:00401B77                 align 4
.text:00401B78 ; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401B7E ; [000000A1 BYTES: COLLAPSED FUNCTION __onexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401C1F ; [00000017 BYTES: COLLAPSED FUNCTION _atexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401C36
.text:00401C36 ; =============== S U B R O U T I N E =======================================
.text:00401C36
.text:00401C36
.text:00401C36 sub_401C36      proc near               ; CODE XREF: _pre_c_init+81↑p
.text:00401C36                 mov     edi, edi
.text:00401C38                 push    esi
.text:00401C39                 mov     eax, offset unk_403234
.text:00401C3E                 mov     esi, offset unk_403234
.text:00401C43                 push    edi
.text:00401C44                 mov     edi, eax
.text:00401C46                 cmp     eax, esi
.text:00401C48                 jnb     short loc_401C59
.text:00401C4A
.text:00401C4A loc_401C4A:                             ; CODE XREF: sub_401C36+21↓j
.text:00401C4A                 mov     eax, [edi]
.text:00401C4C                 test    eax, eax
.text:00401C4E                 jz      short loc_401C52
.text:00401C50                 call    eax
.text:00401C52
.text:00401C52 loc_401C52:                             ; CODE XREF: sub_401C36+18↑j
.text:00401C52                 add     edi, 4
.text:00401C55                 cmp     edi, esi
.text:00401C57                 jb      short loc_401C4A
.text:00401C59
.text:00401C59 loc_401C59:                             ; CODE XREF: sub_401C36+12↑j
.text:00401C59                 pop     edi
.text:00401C5A                 pop     esi
.text:00401C5B                 retn
.text:00401C5B sub_401C36      endp
.text:00401C5B
.text:00401C5C
.text:00401C5C ; =============== S U B R O U T I N E =======================================
.text:00401C5C
.text:00401C5C
.text:00401C5C ; void __cdecl sub_401C5C()
.text:00401C5C sub_401C5C      proc near               ; DATA XREF: _pre_cpp_init↑o
.text:00401C5C                 mov     edi, edi
.text:00401C5E                 push    esi
.text:00401C5F                 mov     eax, offset unk_40323C
.text:00401C64                 mov     esi, offset unk_40323C
.text:00401C69                 push    edi
.text:00401C6A                 mov     edi, eax
.text:00401C6C                 cmp     eax, esi
.text:00401C6E                 jnb     short loc_401C7F
.text:00401C70
.text:00401C70 loc_401C70:                             ; CODE XREF: sub_401C5C+21↓j
.text:00401C70                 mov     eax, [edi]
.text:00401C72                 test    eax, eax
.text:00401C74                 jz      short loc_401C78
.text:00401C76                 call    eax
.text:00401C78
.text:00401C78 loc_401C78:                             ; CODE XREF: sub_401C5C+18↑j
.text:00401C78                 add     edi, 4
.text:00401C7B                 cmp     edi, esi
.text:00401C7D                 jb      short loc_401C70
.text:00401C7F
.text:00401C7F loc_401C7F:                             ; CODE XREF: sub_401C5C+12↑j
.text:00401C7F                 pop     edi
.text:00401C80                 pop     esi
.text:00401C81                 retn
.text:00401C81 sub_401C5C      endp
.text:00401C81
.text:00401C82 ; [00000006 BYTES: COLLAPSED FUNCTION _XcptFilter. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401C88                 align 10h
.text:00401C90 ; [00000035 BYTES: COLLAPSED FUNCTION __ValidateImageBase. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401CC5                 align 10h
.text:00401CD0 ; [00000044 BYTES: COLLAPSED FUNCTION __FindPESection. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401D14                 align 10h
.text:00401D20 ; [000000BC BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401DDC ; [00000006 BYTES: COLLAPSED FUNCTION _initterm. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401DE2 ; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401DE8                 align 10h
.text:00401DF0 ; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401E35 ; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401E49 ; [00000025 BYTES: COLLAPSED FUNCTION __except_handler4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401E6E ; [00000028 BYTES: COLLAPSED FUNCTION __setdefaultprecision. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401E96
.text:00401E96 ; =============== S U B R O U T I N E =======================================
.text:00401E96
.text:00401E96
.text:00401E96 sub_401E96      proc near               ; CODE XREF: _pre_c_init+86↑p
.text:00401E96                                         ; DATA XREF: _pre_c_init+94↑o
.text:00401E96                 xor     eax, eax
.text:00401E98                 retn
.text:00401E98 sub_401E96      endp
.text:00401E98
.text:00401E99 ; [0000009B BYTES: COLLAPSED FUNCTION ___security_init_cookie. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401F34 ; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401F3A ; [00000006 BYTES: COLLAPSED FUNCTION terminate(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401F40 ; [00000006 BYTES: COLLAPSED FUNCTION _unlock. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401F46 ; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401F4C ; [00000006 BYTES: COLLAPSED FUNCTION _lock. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401F52 ; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401F58 ; [00000006 BYTES: COLLAPSED FUNCTION _invoke_watson. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401F5E ; [00000006 BYTES: COLLAPSED FUNCTION _controlfp_s. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401F64 ; [00000006 BYTES: COLLAPSED FUNCTION __CxxFrameHandler3. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401F6A                 align 10h
.text:00401F70 ; START OF FUNCTION CHUNK FOR sub_4012C0
.text:00401F70
.text:00401F70 loc_401F70:                             ; DATA XREF: .rdata:stru_40329C↓o
.text:00401F70 ; __unwind { // SEH_4012C0
.text:00401F70 ;   cleanup() // owned by 4012E6
.text:00401F70                 mov     eax, [ebp+arg_0]
.text:00401F73                 jmp     loc_401330
.text:00401F78 ; ---------------------------------------------------------------------------
.text:00401F78
.text:00401F78 SEH_4012C0:                             ; DATA XREF: sub_4012C0+5↑o
.text:00401F78                                         ; .rdata:00403224↓o
.text:00401F78                 mov     edx, [esp-4+arg_4]
.text:00401F7C                 lea     eax, [edx+0Ch]
.text:00401F7F                 mov     ecx, [edx-8]
.text:00401F82                 xor     ecx, eax
.text:00401F84                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00401F89                 mov     eax, offset stru_4032A4
.text:00401F8E                 jmp     __CxxFrameHandler3
.text:00401F8E ; } // starts at 401F70
.text:00401F8E ; END OF FUNCTION CHUNK FOR sub_4012C0
.text:00401F8E ; ---------------------------------------------------------------------------
.text:00401F93                 align 10h
.text:00401FA0 ; START OF FUNCTION CHUNK FOR sub_401580
.text:00401FA0
.text:00401FA0 loc_401FA0:                             ; DATA XREF: .rdata:stru_4032C8↓o
.text:00401FA0 ; __unwind { // SEH_401580
.text:00401FA0                 lea     eax, [ebp+var_24]
.text:00401FA3                 jmp     loc_401330
.text:00401FA8 ; ---------------------------------------------------------------------------
.text:00401FA8
.text:00401FA8 loc_401FA8:                             ; DATA XREF: .rdata:004032D0↓o
.text:00401FA8                 lea     eax, [ebp+var_24]
.text:00401FAB                 push    eax
.text:00401FAC                 call    sub_4012C0
.text:00401FB1                 retn
.text:00401FB2 ; ---------------------------------------------------------------------------
.text:00401FB2
.text:00401FB2 loc_401FB2:                             ; DATA XREF: .rdata:004032E8↓o
.text:00401FB2 ;   cleanup() // owned by 4015D0
.text:00401FB2 ;   cleanup() // owned by 4015FE
.text:00401FB2 ;   cleanup() // owned by 40162B
.text:00401FB2 ;   cleanup() // owned by 4016F5
.text:00401FB2 ;   cleanup() // owned by 401707
.text:00401FB2 ;   cleanup() // owned by 401732
.text:00401FB2                 lea     eax, [ebp+var_24]
.text:00401FB5                 jmp     loc_401330
.text:00401FBA ; ---------------------------------------------------------------------------
.text:00401FBA
.text:00401FBA SEH_401580:                             ; DATA XREF: sub_401580+5↑o
.text:00401FBA                                         ; .rdata:00403228↓o
.text:00401FBA                 mov     edx, [esp-4+arg_4]
.text:00401FBE                 lea     eax, [edx+0Ch]
.text:00401FC1                 mov     ecx, [edx-28h]
.text:00401FC4                 xor     ecx, eax
.text:00401FC6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00401FCB                 mov     eax, offset stru_403314
.text:00401FD0                 jmp     __CxxFrameHandler3
.text:00401FD0 ; } // starts at 401FA0
.text:00401FD0 ; END OF FUNCTION CHUNK FOR sub_401580
.text:00401FD0 ; ---------------------------------------------------------------------------
.text:00401FD5                 align 10h
.text:00401FE0 ; START OF FUNCTION CHUNK FOR sub_401350
.text:00401FE0
.text:00401FE0 loc_401FE0:                             ; DATA XREF: .rdata:stru_403338↓o
.text:00401FE0 ; __unwind { // SEH_401350
.text:00401FE0                 lea     eax, [ebp+var_20]
.text:00401FE3                 jmp     loc_401330
.text:00401FE8 ; ---------------------------------------------------------------------------
.text:00401FE8
.text:00401FE8 loc_401FE8:                             ; DATA XREF: .rdata:00403340↓o
.text:00401FE8                 lea     eax, [ebp+var_20]
.text:00401FEB                 push    eax
.text:00401FEC                 call    sub_4012C0
.text:00401FF1                 retn
.text:00401FF2 ; ---------------------------------------------------------------------------
.text:00401FF2
.text:00401FF2 loc_401FF2:                             ; DATA XREF: .rdata:00403358↓o
.text:00401FF2 ;   cleanup() // owned by 4013C4
.text:00401FF2 ;   cleanup() // owned by 4013F7
.text:00401FF2 ;   cleanup() // owned by 40140E
.text:00401FF2 ;   cleanup() // owned by 40149E
.text:00401FF2 ;   cleanup() // owned by 4014B8
.text:00401FF2 ;   cleanup() // owned by 401566
.text:00401FF2                 lea     eax, [ebp+var_20]
.text:00401FF5                 jmp     loc_401330
.text:00401FFA ; ---------------------------------------------------------------------------
.text:00401FFA
.text:00401FFA SEH_401350:                             ; DATA XREF: sub_401350+5↑o
.text:00401FFA                                         ; .rdata:0040322C↓o
.text:00401FFA                 mov     edx, [esp-4+arg_4]
.text:00401FFE                 lea     eax, [edx+0Ch]
.text:00402001                 mov     ecx, [edx-24h]
.text:00402004                 xor     ecx, eax
.text:00402006                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040200B                 mov     eax, offset stru_403384
.text:00402010                 jmp     __CxxFrameHandler3
.text:00402010 ; } // starts at 401FE0
.text:00402010 ; END OF FUNCTION CHUNK FOR sub_401350
.text:00402010 ; ---------------------------------------------------------------------------
.text:00402015                 align 200h
.text:00402200                 dd 380h dup(?)
.text:00402200 _text           ends
.text:00402200