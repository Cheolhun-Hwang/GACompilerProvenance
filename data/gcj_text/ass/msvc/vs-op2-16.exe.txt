.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000
.text:00401000 sub_401000      proc near               ; DATA XREF: .rdata:00403424↓o
.text:00401000                 mov     dword ptr [ecx], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:00401006                 jmp     ds:??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text:00401006 sub_401000      endp
.text:00401006
.text:00401006 ; ---------------------------------------------------------------------------
.text:0040100C                 align 10h
.text:00401010
.text:00401010 ; =============== S U B R O U T I N E =======================================
.text:00401010
.text:00401010 ; Attributes: bp-based frame
.text:00401010
.text:00401010 sub_401010      proc near               ; DATA XREF: .rdata:const std::bad_alloc::`vftable'↓o
.text:00401010
.text:00401010 arg_0           = byte ptr  8
.text:00401010
.text:00401010                 push    ebp
.text:00401011                 mov     ebp, esp
.text:00401013                 push    esi
.text:00401014                 mov     esi, ecx
.text:00401016                 mov     dword ptr [esi], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:0040101C                 call    ds:??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text:00401022                 test    [ebp+arg_0], 1
.text:00401026                 jz      short loc_401032
.text:00401028                 push    esi
.text:00401029                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040102F                 add     esp, 4
.text:00401032
.text:00401032 loc_401032:                             ; CODE XREF: sub_401010+16↑j
.text:00401032                 mov     eax, esi
.text:00401034                 pop     esi
.text:00401035                 pop     ebp
.text:00401036                 retn    4
.text:00401036 sub_401010      endp
.text:00401036
.text:00401036 ; ---------------------------------------------------------------------------
.text:00401039                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 sub_401040      proc near               ; DATA XREF: _main+344↓o
.text:00401040
.text:00401040 arg_0           = dword ptr  8
.text:00401040 arg_4           = dword ptr  0Ch
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 push    ebx
.text:00401044                 push    esi
.text:00401045                 mov     esi, [ebp+arg_0]
.text:00401048                 mov     ecx, dword_405360[esi*4]
.text:0040104F                 push    edi
.text:00401050                 mov     edi, [ebp+arg_4]
.text:00401053                 mov     eax, dword_405360[edi*4]
.text:0040105A                 mov     edx, 64h ; 'd'
.text:0040105F                 sub     edx, dword_4043C0[esi*4]
.text:00401066                 mov     ebx, ecx
.text:00401068                 imul    ebx, 64h ; 'd'
.text:0040106B                 imul    edx, eax
.text:0040106E                 imul    eax, 64h ; 'd'
.text:00401071                 add     edx, ebx
.text:00401073                 mov     ebx, 64h ; 'd'
.text:00401078                 sub     ebx, dword_4043C0[edi*4]
.text:0040107F                 imul    ebx, ecx
.text:00401082                 add     eax, ebx
.text:00401084                 cmp     edx, eax
.text:00401086                 jl      short loc_401095
.text:00401088                 jnz     short loc_40108E
.text:0040108A                 cmp     esi, edi
.text:0040108C                 jl      short loc_401095
.text:0040108E
.text:0040108E loc_40108E:                             ; CODE XREF: sub_401040+48↑j
.text:0040108E                 pop     edi
.text:0040108F                 pop     esi
.text:00401090                 xor     eax, eax
.text:00401092                 pop     ebx
.text:00401093                 pop     ebp
.text:00401094                 retn
.text:00401095 ; ---------------------------------------------------------------------------
.text:00401095
.text:00401095 loc_401095:                             ; CODE XREF: sub_401040+46↑j
.text:00401095                                         ; sub_401040+4C↑j
.text:00401095                 pop     edi
.text:00401096                 pop     esi
.text:00401097                 mov     eax, 1
.text:0040109C                 pop     ebx
.text:0040109D                 pop     ebp
.text:0040109E                 retn
.text:0040109E sub_401040      endp
.text:0040109E
.text:0040109E ; ---------------------------------------------------------------------------
.text:0040109F                 align 10h
.text:004010A0
.text:004010A0 ; =============== S U B R O U T I N E =======================================
.text:004010A0
.text:004010A0 ; Attributes: bp-based frame fuzzy-sp
.text:004010A0
.text:004010A0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:004010A0 _main           proc near               ; CODE XREF: ___tmainCRTStartup+11D↓p
.text:004010A0
.text:004010A0 var_C           = dword ptr -0Ch
.text:004010A0 var_8           = dword ptr -8
.text:004010A0 var_4           = dword ptr -4
.text:004010A0 argc            = dword ptr  8
.text:004010A0 argv            = dword ptr  0Ch
.text:004010A0 envp            = dword ptr  10h
.text:004010A0
.text:004010A0                 push    ebp
.text:004010A1                 mov     ebp, esp
.text:004010A3                 and     esp, 0FFFFFFF8h
.text:004010A6                 sub     esp, 0Ch
.text:004010A9                 mov     ecx, ds:?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A ; std::basic_istream<char,std::char_traits<char>> std::cin
.text:004010AF                 push    ebx
.text:004010B0                 push    esi
.text:004010B1                 push    edi
.text:004010B2                 lea     eax, [esp+18h+var_4]
.text:004010B6                 push    eax
.text:004010B7                 call    ds:??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z ; std::basic_istream<char,std::char_traits<char>>::operator>>(int &)
.text:004010BD                 mov     eax, 1
.text:004010C2                 mov     [esp+18h+var_8], eax
.text:004010C6                 cmp     [esp+18h+var_4], eax
.text:004010CA                 jl      loc_4014DD
.text:004010D0
.text:004010D0 loc_4010D0:                             ; CODE XREF: _main+437↓j
.text:004010D0                 mov     ebx, ds:scanf
.text:004010D6                 push    offset dword_406300
.text:004010DB                 push    offset Format   ; "%d"
.text:004010E0                 call    ebx ; scanf
.text:004010E2                 xor     esi, esi
.text:004010E4                 add     esp, 8
.text:004010E7                 cmp     dword_406300, esi
.text:004010ED                 jle     short loc_40110B
.text:004010EF                 mov     edi, offset dword_405360
.text:004010F4
.text:004010F4 loc_4010F4:                             ; CODE XREF: _main+69↓j
.text:004010F4                 push    edi
.text:004010F5                 push    offset Format   ; "%d"
.text:004010FA                 call    ebx ; scanf
.text:004010FC                 inc     esi
.text:004010FD                 add     esp, 8
.text:00401100                 add     edi, 4
.text:00401103                 cmp     esi, dword_406300
.text:00401109                 jl      short loc_4010F4
.text:0040110B
.text:0040110B loc_40110B:                             ; CODE XREF: _main+4D↑j
.text:0040110B                 mov     ecx, Src
.text:00401111                 mov     edx, Dst
.text:00401117                 cmp     edx, ecx
.text:00401119                 jz      short loc_40113F
.text:0040111B                 mov     eax, ecx
.text:0040111D                 sub     eax, ecx
.text:0040111F                 sar     eax, 2
.text:00401122                 lea     esi, ds:0[eax*4]
.text:00401129                 push    esi             ; Size
.text:0040112A                 push    ecx             ; Src
.text:0040112B                 push    edx             ; Dst
.text:0040112C                 mov     edi, edx
.text:0040112E                 call    ds:memmove
.text:00401134                 add     esp, 0Ch
.text:00401137                 add     esi, edi
.text:00401139                 mov     Src, esi
.text:0040113F
.text:0040113F loc_40113F:                             ; CODE XREF: _main+79↑j
.text:0040113F                 mov     eax, dword_406318
.text:00401144                 mov     ecx, dword_406314
.text:0040114A                 cmp     ecx, eax
.text:0040114C                 jz      short loc_401178
.text:0040114E                 mov     edx, eax
.text:00401150                 sub     edx, eax
.text:00401152                 sar     edx, 2
.text:00401155                 lea     esi, ds:0[edx*4]
.text:0040115C                 push    esi             ; Size
.text:0040115D                 push    eax             ; Src
.text:0040115E                 push    ecx             ; Dst
.text:0040115F                 mov     edi, ecx
.text:00401161                 call    ds:memmove
.text:00401167                 mov     ecx, dword_406314
.text:0040116D                 lea     eax, [esi+edi]
.text:00401170                 add     esp, 0Ch
.text:00401173                 mov     dword_406318, eax
.text:00401178
.text:00401178 loc_401178:                             ; CODE XREF: _main+AC↑j
.text:00401178                 xor     ebx, ebx
.text:0040117A                 mov     [esp+18h+var_C], ebx
.text:0040117E                 cmp     dword_406300, ebx
.text:00401184                 jle     loc_4013E0
.text:0040118A                 lea     ebx, [ebx+0]
.text:00401190
.text:00401190 loc_401190:                             ; CODE XREF: _main+33A↓j
.text:00401190                 lea     esi, dword_4043C0[ebx*4]
.text:00401197                 push    esi
.text:00401198                 push    offset Format   ; "%d"
.text:0040119D                 call    ds:scanf
.text:004011A3                 add     esp, 8
.text:004011A6                 cmp     dword ptr [esi], 0
.text:004011A9                 jnz     loc_4012D5
.text:004011AF                 mov     ecx, Src
.text:004011B5                 lea     edx, [esp+18h+var_C]
.text:004011B9                 cmp     edx, ecx
.text:004011BB                 mov     edx, Dst
.text:004011C1                 jnb     loc_40125C
.text:004011C7                 lea     eax, [esp+18h+var_C]
.text:004011CB                 cmp     edx, eax
.text:004011CD                 ja      loc_40125C
.text:004011D3                 mov     esi, dword_40630C
.text:004011D9                 mov     edi, eax
.text:004011DB                 sub     edi, edx
.text:004011DD                 sar     edi, 2
.text:004011E0                 cmp     ecx, esi
.text:004011E2                 jnz     short loc_401234
.text:004011E4                 mov     eax, ecx
.text:004011E6                 sub     eax, edx
.text:004011E8                 sar     eax, 2
.text:004011EB                 cmp     eax, 3FFFFFFEh
.text:004011F0                 ja      loc_4014E6
.text:004011F6                 sub     esi, edx
.text:004011F8                 inc     eax
.text:004011F9                 sar     esi, 2
.text:004011FC                 cmp     eax, esi
.text:004011FE                 jbe     short loc_401234
.text:00401200                 mov     ecx, esi
.text:00401202                 mov     edx, ecx
.text:00401204                 shr     edx, 1
.text:00401206                 mov     esi, 3FFFFFFFh
.text:0040120B                 sub     esi, edx
.text:0040120D                 cmp     esi, ecx
.text:0040120F                 jnb     short loc_401215
.text:00401211                 xor     ecx, ecx
.text:00401213                 jmp     short loc_401217
.text:00401215 ; ---------------------------------------------------------------------------
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: _main+16F↑j
.text:00401215                 add     ecx, edx
.text:00401217
.text:00401217 loc_401217:                             ; CODE XREF: _main+173↑j
.text:00401217                 cmp     ecx, eax
.text:00401219                 jnb     short loc_40121D
.text:0040121B                 mov     ecx, eax
.text:0040121D
.text:0040121D loc_40121D:                             ; CODE XREF: _main+179↑j
.text:0040121D                 push    ecx
.text:0040121E                 mov     esi, offset Dst
.text:00401223                 call    sub_401570
.text:00401228                 mov     ecx, Src
.text:0040122E                 mov     edx, Dst
.text:00401234
.text:00401234 loc_401234:                             ; CODE XREF: _main+142↑j
.text:00401234                                         ; _main+15E↑j
.text:00401234                 test    ecx, ecx
.text:00401236                 jz      short loc_401243
.text:00401238                 mov     edx, [edx+edi*4]
.text:0040123B                 mov     [ecx], edx
.text:0040123D                 mov     ecx, Src
.text:00401243
.text:00401243 loc_401243:                             ; CODE XREF: _main+196↑j
.text:00401243                 mov     eax, dword_406318
.text:00401248                 add     ecx, 4
.text:0040124B                 mov     Src, ecx
.text:00401251                 mov     ecx, dword_406314
.text:00401257                 jmp     loc_4013CF
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125C
.text:0040125C loc_40125C:                             ; CODE XREF: _main+121↑j
.text:0040125C                                         ; _main+12D↑j
.text:0040125C                 mov     esi, dword_40630C
.text:00401262                 cmp     ecx, esi
.text:00401264                 jnz     short loc_4012B0
.text:00401266                 mov     eax, ecx
.text:00401268                 sub     eax, edx
.text:0040126A                 sar     eax, 2
.text:0040126D                 cmp     eax, 3FFFFFFEh
.text:00401272                 ja      loc_4014E6
.text:00401278                 sub     esi, edx
.text:0040127A                 mov     edx, esi
.text:0040127C                 inc     eax
.text:0040127D                 sar     edx, 2
.text:00401280                 cmp     eax, edx
.text:00401282                 jbe     short loc_4012B0
.text:00401284                 mov     ecx, edx
.text:00401286                 shr     edx, 1
.text:00401288                 mov     esi, 3FFFFFFFh
.text:0040128D                 sub     esi, edx
.text:0040128F                 cmp     esi, ecx
.text:00401291                 jnb     short loc_401297
.text:00401293                 xor     ecx, ecx
.text:00401295                 jmp     short loc_401299
.text:00401297 ; ---------------------------------------------------------------------------
.text:00401297
.text:00401297 loc_401297:                             ; CODE XREF: _main+1F1↑j
.text:00401297                 add     ecx, edx
.text:00401299
.text:00401299 loc_401299:                             ; CODE XREF: _main+1F5↑j
.text:00401299                 cmp     ecx, eax
.text:0040129B                 jnb     short loc_40129F
.text:0040129D                 mov     ecx, eax
.text:0040129F
.text:0040129F loc_40129F:                             ; CODE XREF: _main+1FB↑j
.text:0040129F                 push    ecx
.text:004012A0                 mov     esi, offset Dst
.text:004012A5                 call    sub_401570
.text:004012AA                 mov     ecx, Src
.text:004012B0
.text:004012B0 loc_4012B0:                             ; CODE XREF: _main+1C4↑j
.text:004012B0                                         ; _main+1E2↑j
.text:004012B0                 test    ecx, ecx
.text:004012B2                 jz      short loc_4012BC
.text:004012B4                 mov     [ecx], ebx
.text:004012B6                 mov     ecx, Src
.text:004012BC
.text:004012BC loc_4012BC:                             ; CODE XREF: _main+212↑j
.text:004012BC                 mov     eax, dword_406318
.text:004012C1                 add     ecx, 4
.text:004012C4                 mov     Src, ecx
.text:004012CA                 mov     ecx, dword_406314
.text:004012D0                 jmp     loc_4013CF
.text:004012D5 ; ---------------------------------------------------------------------------
.text:004012D5
.text:004012D5 loc_4012D5:                             ; CODE XREF: _main+109↑j
.text:004012D5                 mov     eax, dword_406318
.text:004012DA                 lea     ecx, [esp+18h+var_C]
.text:004012DE                 cmp     ecx, eax
.text:004012E0                 mov     ecx, dword_406314
.text:004012E6                 jnb     short loc_40135C
.text:004012E8                 lea     edx, [esp+18h+var_C]
.text:004012EC                 cmp     ecx, edx
.text:004012EE                 ja      short loc_40135C
.text:004012F0                 mov     esi, dword_40631C
.text:004012F6                 mov     edi, edx
.text:004012F8                 sub     edi, ecx
.text:004012FA                 sar     edi, 2
.text:004012FD                 cmp     eax, esi
.text:004012FF                 jnz     short loc_401351
.text:00401301                 mov     edx, eax
.text:00401303                 sub     edx, ecx
.text:00401305                 sar     edx, 2
.text:00401308                 cmp     edx, 3FFFFFFEh
.text:0040130E                 ja      loc_4014E6
.text:00401314                 sub     esi, ecx
.text:00401316                 inc     edx
.text:00401317                 sar     esi, 2
.text:0040131A                 cmp     edx, esi
.text:0040131C                 jbe     short loc_401351
.text:0040131E                 mov     eax, esi
.text:00401320                 mov     ecx, eax
.text:00401322                 shr     ecx, 1
.text:00401324                 mov     esi, 3FFFFFFFh
.text:00401329                 sub     esi, ecx
.text:0040132B                 cmp     esi, eax
.text:0040132D                 jnb     short loc_401333
.text:0040132F                 xor     eax, eax
.text:00401331                 jmp     short loc_401335
.text:00401333 ; ---------------------------------------------------------------------------
.text:00401333
.text:00401333 loc_401333:                             ; CODE XREF: _main+28D↑j
.text:00401333                 add     eax, ecx
.text:00401335
.text:00401335 loc_401335:                             ; CODE XREF: _main+291↑j
.text:00401335                 cmp     eax, edx
.text:00401337                 jnb     short loc_40133B
.text:00401339                 mov     eax, edx
.text:0040133B
.text:0040133B loc_40133B:                             ; CODE XREF: _main+297↑j
.text:0040133B                 push    eax
.text:0040133C                 mov     esi, offset dword_406314
.text:00401341                 call    sub_401570
.text:00401346                 mov     eax, dword_406318
.text:0040134B                 mov     ecx, dword_406314
.text:00401351
.text:00401351 loc_401351:                             ; CODE XREF: _main+25F↑j
.text:00401351                                         ; _main+27C↑j
.text:00401351                 test    eax, eax
.text:00401353                 jz      short loc_4013C7
.text:00401355                 mov     ecx, [ecx+edi*4]
.text:00401358                 mov     [eax], ecx
.text:0040135A                 jmp     short loc_4013BC
.text:0040135C ; ---------------------------------------------------------------------------
.text:0040135C
.text:0040135C loc_40135C:                             ; CODE XREF: _main+246↑j
.text:0040135C                                         ; _main+24E↑j
.text:0040135C                 mov     esi, dword_40631C
.text:00401362                 cmp     eax, esi
.text:00401364                 jnz     short loc_4013B6
.text:00401366                 mov     edx, eax
.text:00401368                 sub     edx, ecx
.text:0040136A                 sar     edx, 2
.text:0040136D                 cmp     edx, 3FFFFFFEh
.text:00401373                 ja      loc_4014E6
.text:00401379                 sub     esi, ecx
.text:0040137B                 inc     edx
.text:0040137C                 sar     esi, 2
.text:0040137F                 cmp     edx, esi
.text:00401381                 jbe     short loc_4013B6
.text:00401383                 mov     eax, esi
.text:00401385                 mov     ecx, eax
.text:00401387                 shr     ecx, 1
.text:00401389                 mov     esi, 3FFFFFFFh
.text:0040138E                 sub     esi, ecx
.text:00401390                 cmp     esi, eax
.text:00401392                 jnb     short loc_401398
.text:00401394                 xor     eax, eax
.text:00401396                 jmp     short loc_40139A
.text:00401398 ; ---------------------------------------------------------------------------
.text:00401398
.text:00401398 loc_401398:                             ; CODE XREF: _main+2F2↑j
.text:00401398                 add     eax, ecx
.text:0040139A
.text:0040139A loc_40139A:                             ; CODE XREF: _main+2F6↑j
.text:0040139A                 cmp     eax, edx
.text:0040139C                 jnb     short loc_4013A0
.text:0040139E                 mov     eax, edx
.text:004013A0
.text:004013A0 loc_4013A0:                             ; CODE XREF: _main+2FC↑j
.text:004013A0                 push    eax
.text:004013A1                 mov     esi, offset dword_406314
.text:004013A6                 call    sub_401570
.text:004013AB                 mov     eax, dword_406318
.text:004013B0                 mov     ecx, dword_406314
.text:004013B6
.text:004013B6 loc_4013B6:                             ; CODE XREF: _main+2C4↑j
.text:004013B6                                         ; _main+2E1↑j
.text:004013B6                 test    eax, eax
.text:004013B8                 jz      short loc_4013C7
.text:004013BA                 mov     [eax], ebx
.text:004013BC
.text:004013BC loc_4013BC:                             ; CODE XREF: _main+2BA↑j
.text:004013BC                 mov     eax, dword_406318
.text:004013C1                 mov     ecx, dword_406314
.text:004013C7
.text:004013C7 loc_4013C7:                             ; CODE XREF: _main+2B3↑j
.text:004013C7                                         ; _main+318↑j
.text:004013C7                 add     eax, 4
.text:004013CA                 mov     dword_406318, eax
.text:004013CF
.text:004013CF loc_4013CF:                             ; CODE XREF: _main+1B7↑j
.text:004013CF                                         ; _main+230↑j
.text:004013CF                 inc     ebx
.text:004013D0                 mov     [esp+18h+var_C], ebx
.text:004013D4                 cmp     ebx, dword_406300
.text:004013DA                 jl      loc_401190
.text:004013E0
.text:004013E0 loc_4013E0:                             ; CODE XREF: _main+E4↑j
.text:004013E0                 mov     edx, eax
.text:004013E2                 sub     edx, ecx
.text:004013E4                 push    offset sub_401040 ; int
.text:004013E9                 sar     edx, 2
.text:004013EC                 push    edx             ; int
.text:004013ED                 push    eax             ; int
.text:004013EE                 push    ecx             ; Src
.text:004013EF                 call    sub_4018E0
.text:004013F4                 mov     eax, Src
.text:004013F9                 mov     ecx, Dst
.text:004013FF                 mov     edx, eax
.text:00401401                 sub     edx, ecx
.text:00401403                 sar     edx, 2
.text:00401406                 push    edx
.text:00401407                 push    eax
.text:00401408                 push    ecx
.text:00401409                 call    sub_4019D0
.text:0040140E                 mov     edi, [esp+34h+var_8]
.text:00401412                 mov     eax, ds:?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cout
.text:00401417                 add     esp, 1Ch
.text:0040141A                 push    offset asc_403160 ; ": "
.text:0040141F                 push    edi
.text:00401420                 push    offset aCase    ; "Case #"
.text:00401425                 push    eax
.text:00401426                 call    sub_401670
.text:0040142B                 add     esp, 8
.text:0040142E                 mov     ecx, eax
.text:00401430                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
.text:00401436                 push    eax
.text:00401437                 call    sub_401670
.text:0040143C                 mov     ecx, dword_406318
.text:00401442                 mov     eax, dword_406314
.text:00401447                 sub     ecx, eax
.text:00401449                 add     esp, 8
.text:0040144C                 xor     esi, esi
.text:0040144E                 test    ecx, 0FFFFFFFCh
.text:00401454                 jle     short loc_40147D
.text:00401456
.text:00401456 loc_401456:                             ; CODE XREF: _main+3DB↓j
.text:00401456                 mov     edx, [eax+esi*4]
.text:00401459                 push    edx
.text:0040145A                 push    offset aD       ; "%d "
.text:0040145F                 call    ds:printf
.text:00401465                 mov     ecx, dword_406318
.text:0040146B                 mov     eax, dword_406314
.text:00401470                 sub     ecx, eax
.text:00401472                 inc     esi
.text:00401473                 sar     ecx, 2
.text:00401476                 add     esp, 8
.text:00401479                 cmp     esi, ecx
.text:0040147B                 jl      short loc_401456
.text:0040147D
.text:0040147D loc_40147D:                             ; CODE XREF: _main+3B4↑j
.text:0040147D                 mov     edx, Src
.text:00401483                 mov     eax, Dst
.text:00401488                 sub     edx, eax
.text:0040148A                 xor     esi, esi
.text:0040148C                 test    edx, 0FFFFFFFCh
.text:00401492                 jle     short loc_4014BB
.text:00401494
.text:00401494 loc_401494:                             ; CODE XREF: _main+419↓j
.text:00401494                 mov     eax, [eax+esi*4]
.text:00401497                 push    eax
.text:00401498                 push    offset aD       ; "%d "
.text:0040149D                 call    ds:printf
.text:004014A3                 mov     ecx, Src
.text:004014A9                 mov     eax, Dst
.text:004014AE                 sub     ecx, eax
.text:004014B0                 inc     esi
.text:004014B1                 sar     ecx, 2
.text:004014B4                 add     esp, 8
.text:004014B7                 cmp     esi, ecx
.text:004014B9                 jl      short loc_401494
.text:004014BB
.text:004014BB loc_4014BB:                             ; CODE XREF: _main+3F2↑j
.text:004014BB                 mov     edx, ds:?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl(std::basic_ostream<char,std::char_traits<char>> &)
.text:004014C1                 mov     ecx, ds:?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cout
.text:004014C7                 push    edx
.text:004014C8                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(std::basic_ostream<char,std::char_traits<char>> & (*)(std::basic_ostream<char,std::char_traits<char>> &))
.text:004014CE                 inc     edi
.text:004014CF                 mov     [esp+18h+var_8], edi
.text:004014D3                 cmp     edi, [esp+18h+var_4]
.text:004014D7                 jle     loc_4010D0
.text:004014DD
.text:004014DD loc_4014DD:                             ; CODE XREF: _main+2A↑j
.text:004014DD                 pop     edi
.text:004014DE                 pop     esi
.text:004014DF                 xor     eax, eax
.text:004014E1                 pop     ebx
.text:004014E2                 mov     esp, ebp
.text:004014E4                 pop     ebp
.text:004014E5                 retn
.text:004014E6 ; ---------------------------------------------------------------------------
.text:004014E6
.text:004014E6 loc_4014E6:                             ; CODE XREF: _main+150↑j
.text:004014E6                                         ; _main+1D2↑j ...
.text:004014E6                 push    offset aVectorTTooLong ; "vector<T> too long"
.text:004014EB                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:004014EB _main           endp
.text:004014EB
.text:004014EB ; ---------------------------------------------------------------------------
.text:004014F1                 align 10h
.text:00401500
.text:00401500 ; =============== S U B R O U T I N E =======================================
.text:00401500
.text:00401500 ; Attributes: bp-based frame
.text:00401500
.text:00401500 sub_401500      proc near               ; CODE XREF: sub_401670+183C↓p
.text:00401500
.text:00401500 var_C           = dword ptr -0Ch
.text:00401500 var_4           = dword ptr -4
.text:00401500 arg_0           = dword ptr  8
.text:00401500 arg_4           = dword ptr  0Ch
.text:00401500
.text:00401500 ; FUNCTION CHUNK AT .text:004015F0 SIZE 00000019 BYTES
.text:00401500 ; FUNCTION CHUNK AT .text:00402E70 SIZE 00000023 BYTES
.text:00401500
.text:00401500 ; __unwind { // SEH_401500
.text:00401500                 push    ebp
.text:00401501                 mov     ebp, esp
.text:00401503                 push    0FFFFFFFFh
.text:00401505                 push    offset SEH_401500
.text:0040150A                 mov     eax, large fs:0
.text:00401510                 push    eax
.text:00401511                 push    esi
.text:00401512                 mov     eax, ___security_cookie
.text:00401517                 xor     eax, ebp
.text:00401519                 push    eax
.text:0040151A                 lea     eax, [ebp+var_C]
.text:0040151D                 mov     large fs:0, eax
.text:00401523                 mov     esi, [ebp+arg_0]
.text:00401526 ;   try {
.text:00401526                 mov     [ebp+var_4], 0
.text:0040152D                 call    ds:?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
.text:00401533                 test    al, al
.text:00401535                 jnz     short loc_40153F
.text:00401537                 mov     ecx, [esi]
.text:00401539                 call    ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
.text:00401539 ;   } // starts at 401526
.text:0040153F
.text:0040153F loc_40153F:                             ; CODE XREF: sub_401500+35↑j
.text:0040153F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00401546                 mov     eax, [esi]
.text:00401548                 mov     ecx, [eax]
.text:0040154A                 mov     edx, [ecx+4]
.text:0040154D                 mov     eax, [edx+eax+38h]
.text:00401551                 test    eax, eax
.text:00401553                 jz      short loc_40155E
.text:00401555                 mov     edx, [eax]
.text:00401557                 mov     ecx, eax
.text:00401559                 mov     eax, [edx+8]
.text:0040155C                 call    eax
.text:0040155E
.text:0040155E loc_40155E:                             ; CODE XREF: sub_401500+53↑j
.text:0040155E                 mov     ecx, [ebp+var_C]
.text:00401561                 mov     large fs:0, ecx
.text:00401568                 pop     ecx
.text:00401569                 pop     esi
.text:0040156A                 mov     esp, ebp
.text:0040156C                 pop     ebp
.text:0040156D                 retn    4
.text:0040156D ; } // starts at 401500
.text:0040156D sub_401500      endp
.text:0040156D
.text:00401570
.text:00401570 ; =============== S U B R O U T I N E =======================================
.text:00401570
.text:00401570 ; Attributes: bp-based frame
.text:00401570
.text:00401570 sub_401570      proc near               ; CODE XREF: _main+183↑p
.text:00401570                                         ; _main+205↑p ...
.text:00401570
.text:00401570 arg_0           = dword ptr  8
.text:00401570
.text:00401570                 push    ebp
.text:00401571                 mov     ebp, esp
.text:00401573                 mov     ecx, [ebp+arg_0]
.text:00401576                 cmp     ecx, 3FFFFFFFh
.text:0040157C                 jbe     short loc_401589
.text:0040157E                 push    offset aVectorTTooLong ; "vector<T> too long"
.text:00401583                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:00401589
.text:00401589 loc_401589:                             ; CODE XREF: sub_401570+C↑j
.text:00401589                 mov     eax, [esi+8]
.text:0040158C                 sub     eax, [esi]
.text:0040158E                 sar     eax, 2
.text:00401591                 cmp     eax, ecx
.text:00401593                 jnb     short loc_4015E3
.text:00401595                 push    ebx
.text:00401596                 push    edi
.text:00401597                 call    sub_401610
.text:0040159C                 mov     ecx, [esi+4]
.text:0040159F                 mov     ebx, eax
.text:004015A1                 mov     eax, [esi]
.text:004015A3                 sub     ecx, eax
.text:004015A5                 sar     ecx, 2
.text:004015A8                 add     ecx, ecx
.text:004015AA                 add     ecx, ecx
.text:004015AC                 push    ecx             ; Size
.text:004015AD                 push    eax             ; Src
.text:004015AE                 push    ebx             ; Dst
.text:004015AF                 call    ds:memmove
.text:004015B5                 mov     eax, [esi]
.text:004015B7                 mov     edi, [esi+4]
.text:004015BA                 sub     edi, eax
.text:004015BC                 add     esp, 0Ch
.text:004015BF                 sar     edi, 2
.text:004015C2                 test    eax, eax
.text:004015C4                 jz      short loc_4015D0
.text:004015C6                 push    eax
.text:004015C7                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004015CD                 add     esp, 4
.text:004015D0
.text:004015D0 loc_4015D0:                             ; CODE XREF: sub_401570+54↑j
.text:004015D0                 mov     edx, [ebp+arg_0]
.text:004015D3                 lea     ecx, [ebx+edi*4]
.text:004015D6                 lea     eax, [ebx+edx*4]
.text:004015D9                 pop     edi
.text:004015DA                 mov     [esi], ebx
.text:004015DC                 mov     [esi+8], eax
.text:004015DF                 mov     [esi+4], ecx
.text:004015E2                 pop     ebx
.text:004015E3
.text:004015E3 loc_4015E3:                             ; CODE XREF: sub_401570+23↑j
.text:004015E3                 pop     ebp
.text:004015E4                 retn    4
.text:004015E4 sub_401570      endp
.text:004015E4
.text:004015E4 ; ---------------------------------------------------------------------------
.text:004015E7                 align 10h
.text:004015F0 ; START OF FUNCTION CHUNK FOR sub_401670
.text:004015F0 ;   ADDITIONAL PARENT FUNCTION sub_401500
.text:004015F0
.text:004015F0 loc_4015F0:                             ; CODE XREF: sub_401500+1973↓j
.text:004015F0                                         ; sub_401670+1833↓j ...
.text:004015F0 ; __unwind { // SEH_401670
.text:004015F0                 mov     eax, [eax]
.text:004015F2                 mov     ecx, [eax]
.text:004015F4                 mov     edx, [ecx+4]
.text:004015F7                 mov     eax, [edx+eax+38h]
.text:004015FB                 test    eax, eax
.text:004015FD                 jz      short locret_401608
.text:004015FF                 mov     edx, [eax]
.text:00401601                 mov     ecx, eax
.text:00401603                 mov     eax, [edx+8]
.text:00401606                 jmp     eax
.text:00401608 ; ---------------------------------------------------------------------------
.text:00401608
.text:00401608 locret_401608:                          ; CODE XREF: sub_401670-73↑j
.text:00401608                 retn
.text:00401608 ; } // starts at 4015F0
.text:00401608 ; END OF FUNCTION CHUNK FOR sub_401670
.text:00401608 ; ---------------------------------------------------------------------------
.text:00401609                 align 10h
.text:00401610
.text:00401610 ; =============== S U B R O U T I N E =======================================
.text:00401610
.text:00401610 ; Attributes: bp-based frame
.text:00401610
.text:00401610 sub_401610      proc near               ; CODE XREF: sub_401570+27↑p
.text:00401610
.text:00401610 var_10          = dword ptr -10h
.text:00401610 var_4           = dword ptr -4
.text:00401610
.text:00401610                 push    ebp
.text:00401611                 mov     ebp, esp
.text:00401613                 sub     esp, 10h
.text:00401616                 xor     eax, eax
.text:00401618                 test    ecx, ecx
.text:0040161A                 jz      short loc_401662
.text:0040161C                 cmp     ecx, 3FFFFFFFh
.text:00401622                 ja      short loc_401639
.text:00401624                 lea     eax, ds:0[ecx*4]
.text:0040162B                 push    eax
.text:0040162C                 call    ds:??2@YAPAXI@Z ; operator new(uint)
.text:00401632                 add     esp, 4
.text:00401635                 test    eax, eax
.text:00401637                 jnz     short loc_401662
.text:00401639
.text:00401639 loc_401639:                             ; CODE XREF: sub_401610+12↑j
.text:00401639                 lea     ecx, [ebp+var_4]
.text:0040163C                 push    ecx
.text:0040163D                 lea     ecx, [ebp+var_10]
.text:00401640                 mov     [ebp+var_4], 0
.text:00401647                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:0040164D                 push    offset __TI2?AVbad_alloc@std@@ ; throw info for 'class std::bad_alloc'
.text:00401652                 lea     edx, [ebp+var_10]
.text:00401655                 push    edx
.text:00401656                 mov     [ebp+var_10], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:0040165D                 call    _CxxThrowException
.text:00401662 ; ---------------------------------------------------------------------------
.text:00401662
.text:00401662 loc_401662:                             ; CODE XREF: sub_401610+A↑j
.text:00401662                                         ; sub_401610+27↑j
.text:00401662                 mov     esp, ebp
.text:00401664                 pop     ebp
.text:00401665                 retn
.text:00401665 sub_401610      endp
.text:00401665
.text:00401665 ; ---------------------------------------------------------------------------
.text:00401666                 align 10h
.text:00401670
.text:00401670 ; =============== S U B R O U T I N E =======================================
.text:00401670
.text:00401670 ; Attributes: bp-based frame
.text:00401670
.text:00401670 sub_401670      proc near               ; CODE XREF: _main+386↑p
.text:00401670                                         ; _main+397↑p
.text:00401670
.text:00401670 var_30          = dword ptr -30h
.text:00401670 var_2C          = byte ptr -2Ch
.text:00401670 var_24          = dword ptr -24h
.text:00401670 var_1C          = dword ptr -1Ch
.text:00401670 var_18          = dword ptr -18h
.text:00401670 var_14          = dword ptr -14h
.text:00401670 var_10          = dword ptr -10h
.text:00401670 var_C           = dword ptr -0Ch
.text:00401670 var_4           = dword ptr -4
.text:00401670 arg_0           = dword ptr  8
.text:00401670 arg_4           = dword ptr  0Ch
.text:00401670
.text:00401670 ; FUNCTION CHUNK AT .text:004015F0 SIZE 00000019 BYTES
.text:00401670 ; FUNCTION CHUNK AT .text:00402EA0 SIZE 00000035 BYTES
.text:00401670
.text:00401670 ; __unwind { // SEH_401670
.text:00401670                 push    ebp
.text:00401671                 mov     ebp, esp
.text:00401673                 push    0FFFFFFFFh
.text:00401675                 push    offset SEH_401670
.text:0040167A                 mov     eax, large fs:0
.text:00401680                 push    eax
.text:00401681                 sub     esp, 24h
.text:00401684                 push    ebx
.text:00401685                 push    esi
.text:00401686                 push    edi
.text:00401687                 mov     eax, ___security_cookie
.text:0040168C                 xor     eax, ebp
.text:0040168E                 push    eax
.text:0040168F                 lea     eax, [ebp+var_C]
.text:00401692                 mov     large fs:0, eax
.text:00401698                 mov     [ebp+var_10], esp
.text:0040169B                 mov     esi, [ebp+arg_0]
.text:0040169E                 mov     eax, [ebp+arg_4]
.text:004016A1                 mov     [ebp+var_14], 0
.text:004016A8                 lea     ecx, [eax+1]
.text:004016AB                 jmp     short loc_4016B0
.text:004016AB ; ---------------------------------------------------------------------------
.text:004016AD                 align 10h
.text:004016B0
.text:004016B0 loc_4016B0:                             ; CODE XREF: sub_401670+3B↑j
.text:004016B0                                         ; sub_401670+45↓j
.text:004016B0                 mov     dl, [eax]
.text:004016B2                 inc     eax
.text:004016B3                 test    dl, dl
.text:004016B5                 jnz     short loc_4016B0
.text:004016B7                 sub     eax, ecx
.text:004016B9                 mov     [ebp+var_18], eax
.text:004016BC                 mov     eax, [esi]
.text:004016BE                 mov     edx, [eax+4]
.text:004016C1                 mov     ecx, [edx+esi+24h]
.text:004016C5                 mov     eax, [edx+esi+20h]
.text:004016C9                 xor     edi, edi
.text:004016CB                 test    ecx, ecx
.text:004016CD                 jl      short loc_4016EE
.text:004016CF                 jg      short loc_4016D5
.text:004016D1                 test    eax, eax
.text:004016D3                 jz      short loc_4016EE
.text:004016D5
.text:004016D5 loc_4016D5:                             ; CODE XREF: sub_401670+5F↑j
.text:004016D5                 cmp     ecx, edi
.text:004016D7                 jl      short loc_4016EE
.text:004016D9                 jg      short loc_4016E0
.text:004016DB                 cmp     eax, [ebp+var_18]
.text:004016DE                 jbe     short loc_4016EE
.text:004016E0
.text:004016E0 loc_4016E0:                             ; CODE XREF: sub_401670+69↑j
.text:004016E0                 sub     eax, [ebp+var_18]
.text:004016E3                 sbb     ecx, edi
.text:004016E5                 mov     edi, ecx
.text:004016E7                 mov     ebx, eax
.text:004016E9                 mov     [ebp+var_24], edi
.text:004016EC                 jmp     short loc_4016F5
.text:004016EE ; ---------------------------------------------------------------------------
.text:004016EE
.text:004016EE loc_4016EE:                             ; CODE XREF: sub_401670+5D↑j
.text:004016EE                                         ; sub_401670+63↑j ...
.text:004016EE                 xor     ebx, ebx
.text:004016F0                 mov     [ebp+var_24], ebx
.text:004016F3                 mov     edi, ebx
.text:004016F5
.text:004016F5 loc_4016F5:                             ; CODE XREF: sub_401670+7C↑j
.text:004016F5                 mov     edx, [edx+esi+38h]
.text:004016F9                 mov     [ebp+var_30], esi
.text:004016FC                 test    edx, edx
.text:004016FE                 jz      short loc_401709
.text:00401700                 mov     eax, [edx]
.text:00401702                 mov     ecx, edx
.text:00401704                 mov     edx, [eax+4]
.text:00401707                 call    edx
.text:00401709
.text:00401709 loc_401709:                             ; CODE XREF: sub_401670+8E↑j
.text:00401709 ;   try {
.text:00401709                 mov     [ebp+var_4], 0
.text:00401710                 mov     eax, [esi]
.text:00401712                 mov     eax, [eax+4]
.text:00401715                 cmp     dword ptr [eax+esi+0Ch], 0
.text:0040171A                 jnz     short loc_40172C
.text:0040171C                 mov     eax, [eax+esi+3Ch]
.text:00401720                 test    eax, eax
.text:00401722                 jz      short loc_40172C
.text:00401724                 mov     ecx, eax
.text:00401726                 call    ds:?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char>>::flush(void)
.text:0040172C
.text:0040172C loc_40172C:                             ; CODE XREF: sub_401670+AA↑j
.text:0040172C                                         ; sub_401670+B2↑j
.text:0040172C                 mov     edx, [esi]
.text:0040172E                 mov     eax, [edx+4]
.text:00401731                 cmp     dword ptr [eax+esi+0Ch], 0
.text:00401736                 setz    cl
.text:00401739                 mov     [ebp+var_2C], cl
.text:00401739 ;   } // starts at 401709
.text:0040173C ;   try {
.text:0040173C                 mov     [ebp+var_4], 1
.text:00401743                 test    cl, cl
.text:00401745                 jnz     short loc_401753
.text:00401747                 mov     [ebp+var_14], 4
.text:0040174E                 jmp     loc_4017E0
.text:0040174E ;   } // starts at 40173C
.text:00401753 ; ---------------------------------------------------------------------------
.text:00401753
.text:00401753 loc_401753:                             ; CODE XREF: sub_401670+D5↑j
.text:00401753 ;   try {
.text:00401753                 mov     byte ptr [ebp+var_4], 2
.text:00401757                 mov     eax, [eax+esi+14h]
.text:0040175B                 and     eax, 1C0h
.text:00401760                 cmp     eax, 40h ; '@'
.text:00401763                 jz      short loc_40179C
.text:00401765
.text:00401765 loc_401765:                             ; CODE XREF: sub_401670+1D7↓j
.text:00401765                 test    edi, edi
.text:00401767                 jl      short loc_401796
.text:00401769                 jg      short loc_40176F
.text:0040176B                 test    ebx, ebx
.text:0040176D                 jz      short loc_401796
.text:0040176F
.text:0040176F loc_40176F:                             ; CODE XREF: sub_401670+F9↑j
.text:0040176F                 mov     ecx, [esi]
.text:00401771                 mov     eax, [ecx+4]
.text:00401774                 mov     cl, [eax+esi+40h]
.text:00401778                 mov     byte ptr [ebp+var_1C], cl
.text:0040177B                 mov     edx, [ebp+var_1C]
.text:0040177E                 mov     ecx, [eax+esi+38h]
.text:00401782                 push    edx
.text:00401783                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:00401789                 cmp     eax, 0FFFFFFFFh
.text:0040178C                 jnz     loc_40183E
.text:00401792                 or      [ebp+var_14], 4
.text:00401796
.text:00401796 loc_401796:                             ; CODE XREF: sub_401670+F7↑j
.text:00401796                                         ; sub_401670+FD↑j
.text:00401796                 cmp     [ebp+var_14], 0
.text:0040179A                 jnz     short loc_4017CA
.text:0040179C
.text:0040179C loc_40179C:                             ; CODE XREF: sub_401670+F3↑j
.text:0040179C                 mov     eax, [esi]
.text:0040179E                 mov     ecx, [eax+4]
.text:004017A1                 mov     edx, [ebp+var_18]
.text:004017A4                 mov     eax, [ebp+arg_4]
.text:004017A7                 mov     ecx, [ecx+esi+38h]
.text:004017AB                 xor     edi, edi
.text:004017AD                 push    edi
.text:004017AE                 push    edx
.text:004017AF                 push    eax
.text:004017B0                 call    ds:?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputn(char const *,__int64)
.text:004017B6                 cmp     eax, [ebp+var_18]
.text:004017B9                 jnz     short loc_4017C3
.text:004017BB                 cmp     edx, edi
.text:004017BD                 jz      loc_401850
.text:004017C3
.text:004017C3 loc_4017C3:                             ; CODE XREF: sub_401670+149↑j
.text:004017C3                 mov     [ebp+var_14], 4
.text:004017CA
.text:004017CA loc_4017CA:                             ; CODE XREF: sub_401670+12A↑j
.text:004017CA                                         ; sub_401670+1E3↓j ...
.text:004017CA                 mov     edx, [esi]
.text:004017CC                 mov     eax, [edx+4]
.text:004017CF                 xor     ecx, ecx
.text:004017D1                 mov     [eax+esi+20h], ecx
.text:004017D5                 mov     [eax+esi+24h], ecx
.text:004017D5 ;   } // starts at 401753
.text:004017D9 ;   try {
.text:004017D9                 mov     [ebp+var_4], 1
.text:004017E0
.text:004017E0 loc_4017E0:                             ; CODE XREF: sub_401670+DE↑j
.text:004017E0                                         ; sub_401670+248↓j
.text:004017E0                 mov     ecx, [esi]
.text:004017E2                 mov     eax, [ebp+var_14]
.text:004017E5                 mov     ecx, [ecx+4]
.text:004017E8                 push    0
.text:004017EA                 push    eax
.text:004017EB                 add     ecx, esi
.text:004017ED                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:004017ED ;   } // starts at 4017D9
.text:004017F3 ;   try {
.text:004017F3                 mov     [ebp+var_4], 4
.text:004017FA                 call    ds:?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
.text:00401800                 mov     edi, [ebp+var_30]
.text:00401803                 test    al, al
.text:00401805                 jnz     short loc_40180F
.text:00401807                 mov     ecx, edi
.text:00401809                 call    ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
.text:00401809 ;   } // starts at 4017F3
.text:0040180F
.text:0040180F loc_40180F:                             ; CODE XREF: sub_401670+195↑j
.text:0040180F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00401816                 mov     edx, [edi]
.text:00401818                 mov     eax, [edx+4]
.text:0040181B                 mov     ecx, [eax+edi+38h]
.text:0040181F                 test    ecx, ecx
.text:00401821                 jz      short loc_40182A
.text:00401823                 mov     edx, [ecx]
.text:00401825                 mov     eax, [edx+8]
.text:00401828                 call    eax
.text:0040182A
.text:0040182A loc_40182A:                             ; CODE XREF: sub_401670+1B1↑j
.text:0040182A                 mov     eax, esi
.text:0040182C                 mov     ecx, [ebp+var_C]
.text:0040182F                 mov     large fs:0, ecx
.text:00401836                 pop     ecx
.text:00401837                 pop     edi
.text:00401838                 pop     esi
.text:00401839                 pop     ebx
.text:0040183A                 mov     esp, ebp
.text:0040183C                 pop     ebp
.text:0040183D                 retn
.text:0040183E ; ---------------------------------------------------------------------------
.text:0040183E
.text:0040183E loc_40183E:                             ; CODE XREF: sub_401670+11C↑j
.text:0040183E                 add     ebx, 0FFFFFFFFh
.text:00401841                 adc     edi, 0FFFFFFFFh
.text:00401844                 mov     [ebp+var_24], edi
.text:00401847                 jmp     loc_401765
.text:00401847 ; ---------------------------------------------------------------------------
.text:0040184C                 align 10h
.text:00401850
.text:00401850 loc_401850:                             ; CODE XREF: sub_401670+14D↑j
.text:00401850                                         ; sub_401670+222↓j
.text:00401850                 cmp     [ebp+var_24], edi
.text:00401853                 jl      loc_4017CA
.text:00401859                 jg      short loc_401863
.text:0040185B                 test    ebx, ebx
.text:0040185D                 jz      loc_4017CA
.text:00401863
.text:00401863 loc_401863:                             ; CODE XREF: sub_401670+1E9↑j
.text:00401863                 mov     ecx, [esi]
.text:00401865                 mov     eax, [ecx+4]
.text:00401868                 mov     cl, [eax+esi+40h]
.text:0040186C                 mov     byte ptr [ebp+var_1C], cl
.text:0040186F                 mov     edx, [ebp+var_1C]
.text:00401872                 mov     ecx, [eax+esi+38h]
.text:00401876                 push    edx
.text:00401877                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:0040187D                 cmp     eax, 0FFFFFFFFh
.text:00401880                 jnz     short loc_40188B
.text:00401882                 or      [ebp+var_14], 4
.text:00401886                 jmp     loc_4017CA
.text:0040188B ; ---------------------------------------------------------------------------
.text:0040188B
.text:0040188B loc_40188B:                             ; CODE XREF: sub_401670+210↑j
.text:0040188B                 add     ebx, 0FFFFFFFFh
.text:0040188E                 adc     [ebp+var_24], 0FFFFFFFFh
.text:00401892                 jmp     short loc_401850
.text:00401894 ; ---------------------------------------------------------------------------
.text:00401894
.text:00401894 loc_401894:                             ; DATA XREF: .rdata:stru_403484↓o
.text:00401894 ;   catch(...) // owned by 401753
.text:00401894                 mov     eax, [ebp+arg_0]
.text:00401897                 mov     ecx, [eax]
.text:00401899                 mov     ecx, [ecx+4]
.text:0040189C                 push    1
.text:0040189E                 push    4
.text:004018A0                 add     ecx, eax
.text:004018A2                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:004018A8 ;   try {
.text:004018A8                 mov     [ebp+var_4], 1
.text:004018AF                 mov     eax, offset loc_4018B5
.text:004018B4                 retn
.text:004018B5 ; ---------------------------------------------------------------------------
.text:004018B5
.text:004018B5 loc_4018B5:                             ; CODE XREF: sub_401670+244↑j
.text:004018B5                                         ; DATA XREF: sub_401670+23F↑o
.text:004018B5                 mov     esi, [ebp+arg_0]
.text:004018B8                 jmp     loc_4017E0
.text:004018B8 ;   } // starts at 4018A8
.text:004018B8 ; } // starts at 401670
.text:004018B8 sub_401670      endp
.text:004018B8
.text:004018B8 ; ---------------------------------------------------------------------------
.text:004018BD                 align 10h
.text:004018C0
.text:004018C0 ; =============== S U B R O U T I N E =======================================
.text:004018C0
.text:004018C0 ; Attributes: bp-based frame
.text:004018C0
.text:004018C0 sub_4018C0      proc near               ; DATA XREF: .rdata:00403410↓o
.text:004018C0
.text:004018C0 arg_0           = dword ptr  8
.text:004018C0
.text:004018C0                 push    ebp
.text:004018C1                 mov     ebp, esp
.text:004018C3                 mov     eax, [ebp+arg_0]
.text:004018C6                 push    esi
.text:004018C7                 push    eax
.text:004018C8                 mov     esi, ecx
.text:004018CA                 call    ds:__imp_??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.text:004018D0                 mov     dword ptr [esi], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:004018D6                 mov     eax, esi
.text:004018D8                 pop     esi
.text:004018D9                 pop     ebp
.text:004018DA                 retn    4
.text:004018DA sub_4018C0      endp
.text:004018DA
.text:004018DA ; ---------------------------------------------------------------------------
.text:004018DD                 align 10h
.text:004018E0
.text:004018E0 ; =============== S U B R O U T I N E =======================================
.text:004018E0
.text:004018E0 ; Attributes: bp-based frame
.text:004018E0
.text:004018E0 ; int __cdecl sub_4018E0(void *Src, int, int, int)
.text:004018E0 sub_4018E0      proc near               ; CODE XREF: _main+34F↑p
.text:004018E0                                         ; sub_4018E0+68↓p ...
.text:004018E0
.text:004018E0 var_8           = dword ptr -8
.text:004018E0 var_4           = dword ptr -4
.text:004018E0 Src             = dword ptr  8
.text:004018E0 arg_4           = dword ptr  0Ch
.text:004018E0 arg_8           = dword ptr  10h
.text:004018E0 arg_C           = dword ptr  14h
.text:004018E0
.text:004018E0                 push    ebp
.text:004018E1                 mov     ebp, esp
.text:004018E3                 sub     esp, 0Ch
.text:004018E6                 push    ebx
.text:004018E7                 mov     ebx, [ebp+Src]
.text:004018EA                 push    esi
.text:004018EB                 push    edi
.text:004018EC                 mov     edi, [ebp+arg_4]
.text:004018EF                 mov     eax, edi
.text:004018F1                 sub     eax, ebx
.text:004018F3                 sar     eax, 2
.text:004018F6                 cmp     eax, 20h ; ' '
.text:004018F9                 jle     short loc_401970
.text:004018FB                 mov     esi, [ebp+arg_8]
.text:004018FE
.text:004018FE loc_4018FE:                             ; CODE XREF: sub_4018E0+8E↓j
.text:004018FE                 test    esi, esi
.text:00401900                 jle     loc_40198E
.text:00401906                 mov     eax, [ebp+arg_C]
.text:00401909                 push    eax
.text:0040190A                 push    edi
.text:0040190B                 lea     ecx, [ebp+var_8]
.text:0040190E                 push    ebx
.text:0040190F                 push    ecx
.text:00401910                 call    sub_401AA0
.text:00401915                 mov     ecx, [ebp+var_8]
.text:00401918                 mov     eax, esi
.text:0040191A                 cdq
.text:0040191B                 sub     eax, edx
.text:0040191D                 sar     eax, 1
.text:0040191F                 mov     esi, eax
.text:00401921                 cdq
.text:00401922                 sub     eax, edx
.text:00401924                 sar     eax, 1
.text:00401926                 add     esi, eax
.text:00401928                 mov     eax, [ebp+var_4]
.text:0040192B                 mov     edx, edi
.text:0040192D                 sub     edx, eax
.text:0040192F                 sub     ecx, ebx
.text:00401931                 add     esp, 10h
.text:00401934                 and     edx, 0FFFFFFFCh
.text:00401937                 and     ecx, 0FFFFFFFCh
.text:0040193A                 cmp     ecx, edx
.text:0040193C                 mov     edx, [ebp+arg_C]
.text:0040193F                 push    edx             ; int
.text:00401940                 push    esi             ; int
.text:00401941                 jge     short loc_401957
.text:00401943                 mov     eax, [ebp+var_8]
.text:00401946                 push    eax             ; int
.text:00401947                 push    ebx             ; Src
.text:00401948                 call    sub_4018E0
.text:0040194D                 mov     ecx, [ebp+var_4]
.text:00401950                 mov     [ebp+Src], ecx
.text:00401953                 mov     ebx, ecx
.text:00401955                 jmp     short loc_401961
.text:00401957 ; ---------------------------------------------------------------------------
.text:00401957
.text:00401957 loc_401957:                             ; CODE XREF: sub_4018E0+61↑j
.text:00401957                 push    edi             ; int
.text:00401958                 push    eax             ; Src
.text:00401959                 call    sub_4018E0
.text:0040195E                 mov     edi, [ebp+var_8]
.text:00401961
.text:00401961 loc_401961:                             ; CODE XREF: sub_4018E0+75↑j
.text:00401961                 mov     eax, edi
.text:00401963                 sub     eax, ebx
.text:00401965                 sar     eax, 2
.text:00401968                 add     esp, 10h
.text:0040196B                 cmp     eax, 20h ; ' '
.text:0040196E                 jg      short loc_4018FE
.text:00401970
.text:00401970 loc_401970:                             ; CODE XREF: sub_4018E0+19↑j
.text:00401970                                         ; sub_4018E0+B1↓j
.text:00401970                 cmp     eax, 1
.text:00401973                 jle     short loc_401987
.text:00401975                 cmp     ebx, edi
.text:00401977                 jz      short loc_401987
.text:00401979                 mov     edx, [ebp+arg_C]
.text:0040197C                 push    edx             ; int
.text:0040197D                 push    edi             ; int
.text:0040197E                 push    ebx             ; Src
.text:0040197F                 call    sub_4020A0
.text:00401984                 add     esp, 0Ch
.text:00401987
.text:00401987 loc_401987:                             ; CODE XREF: sub_4018E0+93↑j
.text:00401987                                         ; sub_4018E0+97↑j
.text:00401987                 pop     edi
.text:00401988                 pop     esi
.text:00401989                 pop     ebx
.text:0040198A                 mov     esp, ebp
.text:0040198C                 pop     ebp
.text:0040198D                 retn
.text:0040198E ; ---------------------------------------------------------------------------
.text:0040198E
.text:0040198E loc_40198E:                             ; CODE XREF: sub_4018E0+20↑j
.text:0040198E                 cmp     eax, 20h ; ' '
.text:00401991                 jle     short loc_401970
.text:00401993                 mov     eax, edi
.text:00401995                 sub     eax, ebx
.text:00401997                 and     eax, 0FFFFFFFCh
.text:0040199A                 cmp     eax, 4
.text:0040199D                 jle     short loc_4019AF
.text:0040199F                 mov     ecx, [ebp+arg_C]
.text:004019A2                 push    ecx
.text:004019A3                 mov     ecx, edi
.text:004019A5                 mov     eax, ebx
.text:004019A7                 call    sub_401FB0
.text:004019AC                 add     esp, 4
.text:004019AF
.text:004019AF loc_4019AF:                             ; CODE XREF: sub_4018E0+BD↑j
.text:004019AF                 mov     ebx, [ebp+arg_C]
.text:004019B2                 mov     ecx, [ebp+Src]
.text:004019B5                 mov     eax, edi
.text:004019B7                 call    sub_402050
.text:004019BC                 pop     edi
.text:004019BD                 pop     esi
.text:004019BE                 pop     ebx
.text:004019BF                 mov     esp, ebp
.text:004019C1                 pop     ebp
.text:004019C2                 retn
.text:004019C2 sub_4018E0      endp
.text:004019C2
.text:004019C2 ; ---------------------------------------------------------------------------
.text:004019C3                 align 10h
.text:004019D0
.text:004019D0 ; =============== S U B R O U T I N E =======================================
.text:004019D0
.text:004019D0 ; Attributes: bp-based frame
.text:004019D0
.text:004019D0 sub_4019D0      proc near               ; CODE XREF: _main+369↑p
.text:004019D0                                         ; sub_4019D0+5C↓p ...
.text:004019D0
.text:004019D0 var_C           = dword ptr -0Ch
.text:004019D0 var_8           = dword ptr -8
.text:004019D0 arg_0           = dword ptr  8
.text:004019D0 arg_4           = dword ptr  0Ch
.text:004019D0 arg_8           = dword ptr  10h
.text:004019D0
.text:004019D0                 push    ebp
.text:004019D1                 mov     ebp, esp
.text:004019D3                 sub     esp, 10h
.text:004019D6                 push    ebx
.text:004019D7                 mov     ebx, [ebp+arg_0]
.text:004019DA                 push    esi
.text:004019DB                 push    edi
.text:004019DC                 mov     edi, [ebp+arg_4]
.text:004019DF                 mov     eax, edi
.text:004019E1                 sub     eax, ebx
.text:004019E3                 sar     eax, 2
.text:004019E6                 cmp     eax, 20h ; ' '
.text:004019E9                 jle     short loc_401A4F
.text:004019EB                 mov     esi, [ebp+arg_8]
.text:004019EE
.text:004019EE loc_4019EE:                             ; CODE XREF: sub_4019D0+7D↓j
.text:004019EE                 test    esi, esi
.text:004019F0                 jle     short loc_401A68
.text:004019F2                 push    edi
.text:004019F3                 lea     eax, [ebp+var_C]
.text:004019F6                 push    ebx
.text:004019F7                 push    eax
.text:004019F8                 call    sub_401C50
.text:004019FD                 mov     eax, esi
.text:004019FF                 cdq
.text:00401A00                 sub     eax, edx
.text:00401A02                 sar     eax, 1
.text:00401A04                 mov     esi, eax
.text:00401A06                 cdq
.text:00401A07                 sub     eax, edx
.text:00401A09                 mov     edx, [ebp+var_C]
.text:00401A0C                 sar     eax, 1
.text:00401A0E                 add     esi, eax
.text:00401A10                 mov     eax, [ebp+var_8]
.text:00401A13                 mov     ecx, edi
.text:00401A15                 sub     ecx, eax
.text:00401A17                 sub     edx, ebx
.text:00401A19                 add     esp, 0Ch
.text:00401A1C                 and     ecx, 0FFFFFFFCh
.text:00401A1F                 and     edx, 0FFFFFFFCh
.text:00401A22                 push    esi
.text:00401A23                 cmp     edx, ecx
.text:00401A25                 jge     short loc_401A36
.text:00401A27                 mov     eax, [ebp+var_C]
.text:00401A2A                 push    eax
.text:00401A2B                 push    ebx
.text:00401A2C                 call    sub_4019D0
.text:00401A31                 mov     ebx, [ebp+var_8]
.text:00401A34                 jmp     short loc_401A40
.text:00401A36 ; ---------------------------------------------------------------------------
.text:00401A36
.text:00401A36 loc_401A36:                             ; CODE XREF: sub_4019D0+55↑j
.text:00401A36                 push    edi
.text:00401A37                 push    eax
.text:00401A38                 call    sub_4019D0
.text:00401A3D                 mov     edi, [ebp+var_C]
.text:00401A40
.text:00401A40 loc_401A40:                             ; CODE XREF: sub_4019D0+64↑j
.text:00401A40                 mov     eax, edi
.text:00401A42                 sub     eax, ebx
.text:00401A44                 sar     eax, 2
.text:00401A47                 add     esp, 0Ch
.text:00401A4A                 cmp     eax, 20h ; ' '
.text:00401A4D                 jg      short loc_4019EE
.text:00401A4F
.text:00401A4F loc_401A4F:                             ; CODE XREF: sub_4019D0+19↑j
.text:00401A4F                                         ; sub_4019D0+9B↓j
.text:00401A4F                 cmp     eax, 1
.text:00401A52                 jle     short loc_401A61
.text:00401A54                 cmp     ebx, edi
.text:00401A56                 jz      short loc_401A61
.text:00401A58                 push    edi
.text:00401A59                 call    sub_4023B0
.text:00401A5E                 add     esp, 4
.text:00401A61
.text:00401A61 loc_401A61:                             ; CODE XREF: sub_4019D0+82↑j
.text:00401A61                                         ; sub_4019D0+86↑j
.text:00401A61                 pop     edi
.text:00401A62                 pop     esi
.text:00401A63                 pop     ebx
.text:00401A64                 mov     esp, ebp
.text:00401A66                 pop     ebp
.text:00401A67                 retn
.text:00401A68 ; ---------------------------------------------------------------------------
.text:00401A68
.text:00401A68 loc_401A68:                             ; CODE XREF: sub_4019D0+20↑j
.text:00401A68                 cmp     eax, 20h ; ' '
.text:00401A6B                 jle     short loc_401A4F
.text:00401A6D                 mov     ecx, edi
.text:00401A6F                 sub     ecx, ebx
.text:00401A71                 and     ecx, 0FFFFFFFCh
.text:00401A74                 cmp     ecx, 4
.text:00401A77                 jle     short loc_401A82
.text:00401A79                 mov     eax, edi
.text:00401A7B                 mov     ecx, ebx
.text:00401A7D                 call    sub_402270
.text:00401A82
.text:00401A82 loc_401A82:                             ; CODE XREF: sub_4019D0+A7↑j
.text:00401A82                 mov     eax, edi
.text:00401A84                 mov     ecx, ebx
.text:00401A86                 call    sub_402310
.text:00401A8B                 pop     edi
.text:00401A8C                 pop     esi
.text:00401A8D                 pop     ebx
.text:00401A8E                 mov     esp, ebp
.text:00401A90                 pop     ebp
.text:00401A91                 retn
.text:00401A91 sub_4019D0      endp
.text:00401A91
.text:00401A91 ; ---------------------------------------------------------------------------
.text:00401A92                 align 10h
.text:00401AA0
.text:00401AA0 ; =============== S U B R O U T I N E =======================================
.text:00401AA0
.text:00401AA0 ; Attributes: bp-based frame
.text:00401AA0
.text:00401AA0 sub_401AA0      proc near               ; CODE XREF: sub_4018E0+30↑p
.text:00401AA0
.text:00401AA0 var_8           = dword ptr -8
.text:00401AA0 var_4           = dword ptr -4
.text:00401AA0 arg_0           = dword ptr  8
.text:00401AA0 arg_4           = dword ptr  0Ch
.text:00401AA0 arg_8           = dword ptr  10h
.text:00401AA0 arg_C           = dword ptr  14h
.text:00401AA0
.text:00401AA0                 push    ebp
.text:00401AA1                 mov     ebp, esp
.text:00401AA3                 sub     esp, 8
.text:00401AA6                 mov     ecx, [ebp+arg_8]
.text:00401AA9                 push    ebx
.text:00401AAA                 mov     ebx, [ebp+arg_4]
.text:00401AAD                 mov     eax, ecx
.text:00401AAF                 sub     eax, ebx
.text:00401AB1                 sar     eax, 2
.text:00401AB4                 cdq
.text:00401AB5                 push    esi
.text:00401AB6                 sub     eax, edx
.text:00401AB8                 sar     eax, 1
.text:00401ABA                 push    edi
.text:00401ABB                 lea     edi, [ebx+eax*4]
.text:00401ABE                 mov     eax, [ebp+arg_C]
.text:00401AC1                 push    eax
.text:00401AC2                 add     ecx, 0FFFFFFFCh
.text:00401AC5                 push    ecx
.text:00401AC6                 mov     esi, ebx
.text:00401AC8                 call    sub_401D90
.text:00401ACD                 add     esp, 8
.text:00401AD0                 lea     esi, [edi+4]
.text:00401AD3                 mov     [ebp+var_4], esi
.text:00401AD6                 cmp     ebx, edi
.text:00401AD8                 jnb     short loc_401B09
.text:00401ADA                 lea     ebx, [ebx+0]
.text:00401AE0
.text:00401AE0 loc_401AE0:                             ; CODE XREF: sub_401AA0+67↓j
.text:00401AE0                 mov     ecx, [edi]
.text:00401AE2                 mov     edx, [edi-4]
.text:00401AE5                 push    ecx
.text:00401AE6                 push    edx
.text:00401AE7                 call    [ebp+arg_C]
.text:00401AEA                 add     esp, 8
.text:00401AED                 test    al, al
.text:00401AEF                 jnz     short loc_401B09
.text:00401AF1                 mov     eax, [edi-4]
.text:00401AF4                 mov     ecx, [edi]
.text:00401AF6                 push    eax
.text:00401AF7                 push    ecx
.text:00401AF8                 call    [ebp+arg_C]
.text:00401AFB                 add     esp, 8
.text:00401AFE                 test    al, al
.text:00401B00                 jnz     short loc_401B09
.text:00401B02                 add     edi, 0FFFFFFFCh
.text:00401B05                 cmp     ebx, edi
.text:00401B07                 jb      short loc_401AE0
.text:00401B09
.text:00401B09 loc_401B09:                             ; CODE XREF: sub_401AA0+38↑j
.text:00401B09                                         ; sub_401AA0+4F↑j ...
.text:00401B09                 cmp     esi, [ebp+arg_8]
.text:00401B0C                 jnb     short loc_401B3C
.text:00401B0E                 mov     edi, edi
.text:00401B10
.text:00401B10 loc_401B10:                             ; CODE XREF: sub_401AA0+97↓j
.text:00401B10                 mov     edx, [edi]
.text:00401B12                 mov     eax, [esi]
.text:00401B14                 mov     ebx, [ebp+arg_C]
.text:00401B17                 push    edx
.text:00401B18                 push    eax
.text:00401B19                 call    ebx
.text:00401B1B                 add     esp, 8
.text:00401B1E                 test    al, al
.text:00401B20                 jnz     short loc_401B39
.text:00401B22                 mov     ecx, [esi]
.text:00401B24                 mov     edx, [edi]
.text:00401B26                 push    ecx
.text:00401B27                 push    edx
.text:00401B28                 call    ebx
.text:00401B2A                 add     esp, 8
.text:00401B2D                 test    al, al
.text:00401B2F                 jnz     short loc_401B39
.text:00401B31                 add     esi, 4
.text:00401B34                 cmp     esi, [ebp+arg_8]
.text:00401B37                 jb      short loc_401B10
.text:00401B39
.text:00401B39 loc_401B39:                             ; CODE XREF: sub_401AA0+80↑j
.text:00401B39                                         ; sub_401AA0+8F↑j
.text:00401B39                 mov     [ebp+var_4], esi
.text:00401B3C
.text:00401B3C loc_401B3C:                             ; CODE XREF: sub_401AA0+6C↑j
.text:00401B3C                 mov     ebx, edi
.text:00401B3E                 mov     edi, edi
.text:00401B40
.text:00401B40 loc_401B40:                             ; CODE XREF: sub_401AA0+154↓j
.text:00401B40                                         ; sub_401AA0+182↓j ...
.text:00401B40                 cmp     esi, [ebp+arg_8]
.text:00401B43                 jnb     short loc_401B80
.text:00401B45
.text:00401B45 loc_401B45:                             ; CODE XREF: sub_401AA0+DE↓j
.text:00401B45                 mov     eax, [esi]
.text:00401B47                 mov     ecx, [edi]
.text:00401B49                 push    eax
.text:00401B4A                 push    ecx
.text:00401B4B                 call    [ebp+arg_C]
.text:00401B4E                 add     esp, 8
.text:00401B51                 test    al, al
.text:00401B53                 jnz     short loc_401B78
.text:00401B55                 mov     edx, [edi]
.text:00401B57                 mov     eax, [esi]
.text:00401B59                 push    edx
.text:00401B5A                 push    eax
.text:00401B5B                 call    [ebp+arg_C]
.text:00401B5E                 add     esp, 8
.text:00401B61                 test    al, al
.text:00401B63                 jnz     short loc_401B80
.text:00401B65                 mov     ecx, [ebp+var_4]
.text:00401B68                 mov     edx, [esi]
.text:00401B6A                 mov     eax, ecx
.text:00401B6C                 add     ecx, 4
.text:00401B6F                 mov     [ebp+var_4], ecx
.text:00401B72                 mov     ecx, [eax]
.text:00401B74                 mov     [eax], edx
.text:00401B76                 mov     [esi], ecx
.text:00401B78
.text:00401B78 loc_401B78:                             ; CODE XREF: sub_401AA0+B3↑j
.text:00401B78                 add     esi, 4
.text:00401B7B                 cmp     esi, [ebp+arg_8]
.text:00401B7E                 jb      short loc_401B45
.text:00401B80
.text:00401B80 loc_401B80:                             ; CODE XREF: sub_401AA0+A3↑j
.text:00401B80                                         ; sub_401AA0+C3↑j
.text:00401B80                 cmp     ebx, [ebp+arg_4]
.text:00401B83                 jbe     short loc_401BC0
.text:00401B85
.text:00401B85 loc_401B85:                             ; CODE XREF: sub_401AA0+11B↓j
.text:00401B85                 mov     eax, [edi]
.text:00401B87                 mov     ecx, [ebx-4]
.text:00401B8A                 push    eax
.text:00401B8B                 push    ecx
.text:00401B8C                 call    [ebp+arg_C]
.text:00401B8F                 add     esp, 8
.text:00401B92                 test    al, al
.text:00401B94                 jnz     short loc_401BB5
.text:00401B96                 mov     edx, [ebx-4]
.text:00401B99                 mov     eax, [edi]
.text:00401B9B                 push    edx
.text:00401B9C                 push    eax
.text:00401B9D                 call    [ebp+arg_C]
.text:00401BA0                 add     esp, 8
.text:00401BA3                 test    al, al
.text:00401BA5                 jnz     short loc_401BBD
.text:00401BA7                 mov     ecx, [ebx-4]
.text:00401BAA                 mov     eax, [edi-4]
.text:00401BAD                 sub     edi, 4
.text:00401BB0                 mov     [edi], ecx
.text:00401BB2                 mov     [ebx-4], eax
.text:00401BB5
.text:00401BB5 loc_401BB5:                             ; CODE XREF: sub_401AA0+F4↑j
.text:00401BB5                 add     ebx, 0FFFFFFFCh
.text:00401BB8                 cmp     [ebp+arg_4], ebx
.text:00401BBB                 jb      short loc_401B85
.text:00401BBD
.text:00401BBD loc_401BBD:                             ; CODE XREF: sub_401AA0+105↑j
.text:00401BBD                 cmp     ebx, [ebp+arg_4]
.text:00401BC0
.text:00401BC0 loc_401BC0:                             ; CODE XREF: sub_401AA0+E3↑j
.text:00401BC0                 jnz     short loc_401BF9
.text:00401BC2                 cmp     esi, [ebp+arg_8]
.text:00401BC5                 jz      short loc_401C37
.text:00401BC7                 mov     eax, [ebp+var_4]
.text:00401BCA                 cmp     eax, esi
.text:00401BCC                 jz      short loc_401BD6
.text:00401BCE                 mov     edx, [eax]
.text:00401BD0                 mov     ecx, [edi]
.text:00401BD2                 mov     [edi], edx
.text:00401BD4                 mov     [eax], ecx
.text:00401BD6
.text:00401BD6 loc_401BD6:                             ; CODE XREF: sub_401AA0+12C↑j
.text:00401BD6                 mov     ecx, edi
.text:00401BD8                 mov     edx, [ecx]
.text:00401BDA                 add     eax, 4
.text:00401BDD                 mov     [ebp+var_4], eax
.text:00401BE0                 mov     eax, esi
.text:00401BE2                 mov     [ebp+var_8], edx
.text:00401BE5                 mov     edx, [eax]
.text:00401BE7                 mov     [ecx], edx
.text:00401BE9                 mov     ecx, [ebp+var_8]
.text:00401BEC                 add     edi, 4
.text:00401BEF                 add     esi, 4
.text:00401BF2                 mov     [eax], ecx
.text:00401BF4                 jmp     loc_401B40
.text:00401BF9 ; ---------------------------------------------------------------------------
.text:00401BF9
.text:00401BF9 loc_401BF9:                             ; CODE XREF: sub_401AA0:loc_401BC0↑j
.text:00401BF9                 sub     ebx, 4
.text:00401BFC                 cmp     esi, [ebp+arg_8]
.text:00401BFF                 jnz     short loc_401C27
.text:00401C01                 sub     edi, 4
.text:00401C04                 cmp     ebx, edi
.text:00401C06                 jz      short loc_401C10
.text:00401C08                 mov     edx, [edi]
.text:00401C0A                 mov     eax, [ebx]
.text:00401C0C                 mov     [ebx], edx
.text:00401C0E                 mov     [edi], eax
.text:00401C10
.text:00401C10 loc_401C10:                             ; CODE XREF: sub_401AA0+166↑j
.text:00401C10                 mov     eax, [ebp+var_4]
.text:00401C13                 mov     edx, [eax-4]
.text:00401C16                 mov     ecx, [edi]
.text:00401C18                 sub     eax, 4
.text:00401C1B                 mov     [edi], edx
.text:00401C1D                 mov     [ebp+var_4], eax
.text:00401C20                 mov     [eax], ecx
.text:00401C22                 jmp     loc_401B40
.text:00401C27 ; ---------------------------------------------------------------------------
.text:00401C27
.text:00401C27 loc_401C27:                             ; CODE XREF: sub_401AA0+15F↑j
.text:00401C27                 mov     eax, [esi]
.text:00401C29                 mov     ecx, [ebx]
.text:00401C2B                 mov     [esi], ecx
.text:00401C2D                 mov     [ebx], eax
.text:00401C2F                 add     esi, 4
.text:00401C32                 jmp     loc_401B40
.text:00401C37 ; ---------------------------------------------------------------------------
.text:00401C37
.text:00401C37 loc_401C37:                             ; CODE XREF: sub_401AA0+125↑j
.text:00401C37                 mov     eax, [ebp+arg_0]
.text:00401C3A                 mov     edx, [ebp+var_4]
.text:00401C3D                 mov     [eax], edi
.text:00401C3F                 pop     edi
.text:00401C40                 pop     esi
.text:00401C41                 mov     [eax+4], edx
.text:00401C44                 pop     ebx
.text:00401C45                 mov     esp, ebp
.text:00401C47                 pop     ebp
.text:00401C48                 retn
.text:00401C48 sub_401AA0      endp
.text:00401C48
.text:00401C48 ; ---------------------------------------------------------------------------
.text:00401C49                 align 10h
.text:00401C50
.text:00401C50 ; =============== S U B R O U T I N E =======================================
.text:00401C50
.text:00401C50 ; Attributes: bp-based frame
.text:00401C50
.text:00401C50 sub_401C50      proc near               ; CODE XREF: sub_4019D0+28↑p
.text:00401C50
.text:00401C50 var_8           = dword ptr -8
.text:00401C50 var_4           = dword ptr -4
.text:00401C50 arg_0           = dword ptr  8
.text:00401C50 arg_4           = dword ptr  0Ch
.text:00401C50 arg_8           = dword ptr  10h
.text:00401C50
.text:00401C50                 push    ebp
.text:00401C51                 mov     ebp, esp
.text:00401C53                 mov     ecx, [ebp+arg_8]
.text:00401C56                 sub     esp, 8
.text:00401C59                 push    ebx
.text:00401C5A                 mov     ebx, [ebp+arg_4]
.text:00401C5D                 mov     eax, ecx
.text:00401C5F                 sub     eax, ebx
.text:00401C61                 sar     eax, 2
.text:00401C64                 cdq
.text:00401C65                 push    esi
.text:00401C66                 sub     eax, edx
.text:00401C68                 add     ecx, 0FFFFFFFCh
.text:00401C6B                 push    edi
.text:00401C6C                 sar     eax, 1
.text:00401C6E                 push    ecx
.text:00401C6F                 lea     esi, [ebx+eax*4]
.text:00401C72                 mov     ecx, ebx
.text:00401C74                 call    sub_402140
.text:00401C79                 add     esp, 4
.text:00401C7C                 mov     eax, esi
.text:00401C7E                 lea     edi, [esi+4]
.text:00401C81                 cmp     ebx, esi
.text:00401C83                 jnb     short loc_401C97
.text:00401C85
.text:00401C85 loc_401C85:                             ; CODE XREF: sub_401C50+45↓j
.text:00401C85                 mov     ecx, [eax-4]
.text:00401C88                 mov     edx, [eax]
.text:00401C8A                 cmp     edx, ecx
.text:00401C8C                 jg      short loc_401C97
.text:00401C8E                 jl      short loc_401C97
.text:00401C90                 add     eax, 0FFFFFFFCh
.text:00401C93                 cmp     ebx, eax
.text:00401C95                 jb      short loc_401C85
.text:00401C97
.text:00401C97 loc_401C97:                             ; CODE XREF: sub_401C50+33↑j
.text:00401C97                                         ; sub_401C50+3C↑j ...
.text:00401C97                 mov     esi, [ebp+arg_8]
.text:00401C9A                 cmp     edi, esi
.text:00401C9C                 jnb     short loc_401CAF
.text:00401C9E                 mov     edx, [eax]
.text:00401CA0
.text:00401CA0 loc_401CA0:                             ; CODE XREF: sub_401C50+5D↓j
.text:00401CA0                 mov     ecx, [edi]
.text:00401CA2                 cmp     edx, ecx
.text:00401CA4                 jg      short loc_401CAF
.text:00401CA6                 jl      short loc_401CAF
.text:00401CA8                 add     edi, 4
.text:00401CAB                 cmp     edi, esi
.text:00401CAD                 jb      short loc_401CA0
.text:00401CAF
.text:00401CAF loc_401CAF:                             ; CODE XREF: sub_401C50+4C↑j
.text:00401CAF                                         ; sub_401C50+54↑j ...
.text:00401CAF                 mov     ecx, edi
.text:00401CB1                 mov     edx, eax
.text:00401CB3
.text:00401CB3 loc_401CB3:                             ; CODE XREF: sub_401C50+EB↓j
.text:00401CB3                                         ; sub_401C50+113↓j ...
.text:00401CB3                 cmp     ecx, [ebp+arg_8]
.text:00401CB6                 jnb     short loc_401CDD
.text:00401CB8
.text:00401CB8 loc_401CB8:                             ; CODE XREF: sub_401C50+8B↓j
.text:00401CB8                 mov     esi, [ecx]
.text:00401CBA                 mov     ebx, [eax]
.text:00401CBC                 cmp     esi, ebx
.text:00401CBE                 jg      short loc_401CD5
.text:00401CC0                 jl      short loc_401CDD
.text:00401CC2                 mov     esi, edi
.text:00401CC4                 mov     ebx, [esi]
.text:00401CC6                 mov     [ebp+var_4], ebx
.text:00401CC9                 mov     ebx, [ecx]
.text:00401CCB                 mov     [esi], ebx
.text:00401CCD                 mov     esi, [ebp+var_4]
.text:00401CD0                 add     edi, 4
.text:00401CD3                 mov     [ecx], esi
.text:00401CD5
.text:00401CD5 loc_401CD5:                             ; CODE XREF: sub_401C50+6E↑j
.text:00401CD5                 add     ecx, 4
.text:00401CD8                 cmp     ecx, [ebp+arg_8]
.text:00401CDB                 jb      short loc_401CB8
.text:00401CDD
.text:00401CDD loc_401CDD:                             ; CODE XREF: sub_401C50+66↑j
.text:00401CDD                                         ; sub_401C50+70↑j
.text:00401CDD                 cmp     edx, [ebp+arg_4]
.text:00401CE0                 jbe     short loc_401D06
.text:00401CE2
.text:00401CE2 loc_401CE2:                             ; CODE XREF: sub_401C50+B1↓j
.text:00401CE2                 mov     esi, [edx-4]
.text:00401CE5                 mov     ebx, [eax]
.text:00401CE7                 cmp     ebx, esi
.text:00401CE9                 jg      short loc_401CFB
.text:00401CEB                 jl      short loc_401D03
.text:00401CED                 mov     ebx, [edx-4]
.text:00401CF0                 mov     esi, [eax-4]
.text:00401CF3                 sub     eax, 4
.text:00401CF6                 mov     [eax], ebx
.text:00401CF8                 mov     [edx-4], esi
.text:00401CFB
.text:00401CFB loc_401CFB:                             ; CODE XREF: sub_401C50+99↑j
.text:00401CFB                 add     edx, 0FFFFFFFCh
.text:00401CFE                 cmp     [ebp+arg_4], edx
.text:00401D01                 jb      short loc_401CE2
.text:00401D03
.text:00401D03 loc_401D03:                             ; CODE XREF: sub_401C50+9B↑j
.text:00401D03                 cmp     edx, [ebp+arg_4]
.text:00401D06
.text:00401D06 loc_401D06:                             ; CODE XREF: sub_401C50+90↑j
.text:00401D06                 jnz     short loc_401D40
.text:00401D08                 cmp     ecx, [ebp+arg_8]
.text:00401D0B                 jz      short loc_401D78
.text:00401D0D                 cmp     edi, ecx
.text:00401D0F                 jz      short loc_401D19
.text:00401D11                 mov     ebx, [edi]
.text:00401D13                 mov     esi, [eax]
.text:00401D15                 mov     [eax], ebx
.text:00401D17                 mov     [edi], esi
.text:00401D19
.text:00401D19 loc_401D19:                             ; CODE XREF: sub_401C50+BF↑j
.text:00401D19                 mov     esi, eax
.text:00401D1B                 mov     ebx, [esi]
.text:00401D1D                 mov     [ebp+var_4], ecx
.text:00401D20                 mov     [ebp+var_8], ebx
.text:00401D23                 mov     ebx, [ebp+var_4]
.text:00401D26                 mov     ebx, [ebx]
.text:00401D28                 mov     [esi], ebx
.text:00401D2A                 mov     esi, [ebp+var_8]
.text:00401D2D                 mov     ebx, [ebp+var_4]
.text:00401D30                 add     edi, 4
.text:00401D33                 add     eax, 4
.text:00401D36                 add     ecx, 4
.text:00401D39                 mov     [ebx], esi
.text:00401D3B                 jmp     loc_401CB3
.text:00401D40 ; ---------------------------------------------------------------------------
.text:00401D40
.text:00401D40 loc_401D40:                             ; CODE XREF: sub_401C50:loc_401D06↑j
.text:00401D40                 sub     edx, 4
.text:00401D43                 cmp     ecx, [ebp+arg_8]
.text:00401D46                 jnz     short loc_401D68
.text:00401D48                 sub     eax, 4
.text:00401D4B                 cmp     edx, eax
.text:00401D4D                 jz      short loc_401D57
.text:00401D4F                 mov     ebx, [eax]
.text:00401D51                 mov     esi, [edx]
.text:00401D53                 mov     [edx], ebx
.text:00401D55                 mov     [eax], esi
.text:00401D57
.text:00401D57 loc_401D57:                             ; CODE XREF: sub_401C50+FD↑j
.text:00401D57                 mov     ebx, [edi-4]
.text:00401D5A                 mov     esi, [eax]
.text:00401D5C                 sub     edi, 4
.text:00401D5F                 mov     [eax], ebx
.text:00401D61                 mov     [edi], esi
.text:00401D63                 jmp     loc_401CB3
.text:00401D68 ; ---------------------------------------------------------------------------
.text:00401D68
.text:00401D68 loc_401D68:                             ; CODE XREF: sub_401C50+F6↑j
.text:00401D68                 mov     esi, [ecx]
.text:00401D6A                 mov     ebx, [edx]
.text:00401D6C                 mov     [ecx], ebx
.text:00401D6E                 mov     [edx], esi
.text:00401D70                 add     ecx, 4
.text:00401D73                 jmp     loc_401CB3
.text:00401D78 ; ---------------------------------------------------------------------------
.text:00401D78
.text:00401D78 loc_401D78:                             ; CODE XREF: sub_401C50+BB↑j
.text:00401D78                 mov     ecx, [ebp+arg_0]
.text:00401D7B                 mov     [ecx+4], edi
.text:00401D7E                 pop     edi
.text:00401D7F                 pop     esi
.text:00401D80                 mov     [ecx], eax
.text:00401D82                 mov     eax, ecx
.text:00401D84                 pop     ebx
.text:00401D85                 mov     esp, ebp
.text:00401D87                 pop     ebp
.text:00401D88                 retn
.text:00401D88 sub_401C50      endp
.text:00401D88
.text:00401D88 ; ---------------------------------------------------------------------------
.text:00401D89                 align 10h
.text:00401D90
.text:00401D90 ; =============== S U B R O U T I N E =======================================
.text:00401D90
.text:00401D90 ; Attributes: bp-based frame
.text:00401D90
.text:00401D90 sub_401D90      proc near               ; CODE XREF: sub_401AA0+28↑p
.text:00401D90
.text:00401D90 var_C           = dword ptr -0Ch
.text:00401D90 var_8           = dword ptr -8
.text:00401D90 var_4           = dword ptr -4
.text:00401D90 arg_0           = dword ptr  8
.text:00401D90 arg_4           = dword ptr  0Ch
.text:00401D90
.text:00401D90                 push    ebp
.text:00401D91                 mov     ebp, esp
.text:00401D93                 sub     esp, 0Ch
.text:00401D96                 push    ebx
.text:00401D97                 mov     ebx, [ebp+arg_0]
.text:00401D9A                 mov     eax, ebx
.text:00401D9C                 sub     eax, esi
.text:00401D9E                 sar     eax, 2
.text:00401DA1                 cmp     eax, 28h ; '('
.text:00401DA4                 jle     loc_401F54
.text:00401DAA                 inc     eax
.text:00401DAB                 cdq
.text:00401DAC                 and     edx, 7
.text:00401DAF                 add     eax, edx
.text:00401DB1                 mov     edx, [esi]
.text:00401DB3                 sar     eax, 3
.text:00401DB6                 lea     ecx, ds:0[eax*8]
.text:00401DBD                 lea     ebx, ds:0[eax*4]
.text:00401DC4                 mov     eax, [ebx+esi]
.text:00401DC7                 push    edx
.text:00401DC8                 push    eax
.text:00401DC9                 mov     [ebp+var_C], ecx
.text:00401DCC                 call    [ebp+arg_4]
.text:00401DCF                 add     esp, 8
.text:00401DD2                 test    al, al
.text:00401DD4                 jz      short loc_401DE0
.text:00401DD6                 mov     ecx, [esi]
.text:00401DD8                 mov     eax, [ebx+esi]
.text:00401DDB                 mov     [ebx+esi], ecx
.text:00401DDE                 mov     [esi], eax
.text:00401DE0
.text:00401DE0 loc_401DE0:                             ; CODE XREF: sub_401D90+44↑j
.text:00401DE0                 mov     edx, [ebx+esi]
.text:00401DE3                 mov     eax, [ebp+var_C]
.text:00401DE6                 mov     ecx, [eax+esi]
.text:00401DE9                 push    edx
.text:00401DEA                 push    ecx
.text:00401DEB                 call    [ebp+arg_4]
.text:00401DEE                 add     esp, 8
.text:00401DF1                 test    al, al
.text:00401DF3                 jz      short loc_401E04
.text:00401DF5                 mov     ecx, [ebp+var_C]
.text:00401DF8                 mov     edx, [ebx+esi]
.text:00401DFB                 mov     eax, [ecx+esi]
.text:00401DFE                 mov     [ecx+esi], edx
.text:00401E01                 mov     [ebx+esi], eax
.text:00401E04
.text:00401E04 loc_401E04:                             ; CODE XREF: sub_401D90+63↑j
.text:00401E04                 mov     eax, [esi]
.text:00401E06                 mov     ecx, [ebx+esi]
.text:00401E09                 push    eax
.text:00401E0A                 push    ecx
.text:00401E0B                 call    [ebp+arg_4]
.text:00401E0E                 add     esp, 8
.text:00401E11                 test    al, al
.text:00401E13                 jz      short loc_401E1F
.text:00401E15                 mov     edx, [esi]
.text:00401E17                 mov     eax, [ebx+esi]
.text:00401E1A                 mov     [ebx+esi], edx
.text:00401E1D                 mov     [esi], eax
.text:00401E1F
.text:00401E1F loc_401E1F:                             ; CODE XREF: sub_401D90+83↑j
.text:00401E1F                 mov     ecx, [edi]
.text:00401E21                 mov     eax, edi
.text:00401E23                 sub     eax, ebx
.text:00401E25                 mov     [ebp+var_8], eax
.text:00401E28                 mov     eax, [eax]
.text:00401E2A                 push    eax
.text:00401E2B                 push    ecx
.text:00401E2C                 call    [ebp+arg_4]
.text:00401E2F                 add     esp, 8
.text:00401E32                 test    al, al
.text:00401E34                 jz      short loc_401E41
.text:00401E36                 mov     ecx, [ebp+var_8]
.text:00401E39                 mov     edx, [ecx]
.text:00401E3B                 mov     eax, [edi]
.text:00401E3D                 mov     [edi], edx
.text:00401E3F                 mov     [ecx], eax
.text:00401E41
.text:00401E41 loc_401E41:                             ; CODE XREF: sub_401D90+A4↑j
.text:00401E41                 mov     eax, [edi]
.text:00401E43                 mov     ecx, [ebx+edi]
.text:00401E46                 push    eax
.text:00401E47                 push    ecx
.text:00401E48                 call    [ebp+arg_4]
.text:00401E4B                 add     esp, 8
.text:00401E4E                 test    al, al
.text:00401E50                 jz      short loc_401E5C
.text:00401E52                 mov     edx, [edi]
.text:00401E54                 mov     eax, [ebx+edi]
.text:00401E57                 mov     [ebx+edi], edx
.text:00401E5A                 mov     [edi], eax
.text:00401E5C
.text:00401E5C loc_401E5C:                             ; CODE XREF: sub_401D90+C0↑j
.text:00401E5C                 mov     eax, [ebp+var_8]
.text:00401E5F                 mov     ecx, [eax]
.text:00401E61                 mov     edx, [edi]
.text:00401E63                 push    ecx
.text:00401E64                 push    edx
.text:00401E65                 call    [ebp+arg_4]
.text:00401E68                 add     esp, 8
.text:00401E6B                 test    al, al
.text:00401E6D                 jz      short loc_401E7A
.text:00401E6F                 mov     ecx, [ebp+var_8]
.text:00401E72                 mov     edx, [ecx]
.text:00401E74                 mov     eax, [edi]
.text:00401E76                 mov     [edi], edx
.text:00401E78                 mov     [ecx], eax
.text:00401E7A
.text:00401E7A loc_401E7A:                             ; CODE XREF: sub_401D90+DD↑j
.text:00401E7A                 mov     eax, [ebp+arg_0]
.text:00401E7D                 mov     ecx, eax
.text:00401E7F                 sub     eax, [ebp+var_C]
.text:00401E82                 sub     ecx, ebx
.text:00401E84                 mov     [ebp+var_8], eax
.text:00401E87                 mov     eax, [eax]
.text:00401E89                 mov     [ebp+var_4], ecx
.text:00401E8C                 mov     ecx, [ecx]
.text:00401E8E                 push    eax
.text:00401E8F                 push    ecx
.text:00401E90                 call    [ebp+arg_4]
.text:00401E93                 add     esp, 8
.text:00401E96                 test    al, al
.text:00401E98                 mov     eax, [ebp+var_4]
.text:00401E9B                 jz      short loc_401EAB
.text:00401E9D                 mov     edx, [ebp+var_8]
.text:00401EA0                 mov     edx, [edx]
.text:00401EA2                 mov     ecx, [eax]
.text:00401EA4                 mov     [eax], edx
.text:00401EA6                 mov     edx, [ebp+var_8]
.text:00401EA9                 mov     [edx], ecx
.text:00401EAB
.text:00401EAB loc_401EAB:                             ; CODE XREF: sub_401D90+10B↑j
.text:00401EAB                 mov     eax, [eax]
.text:00401EAD                 mov     ecx, [ebp+arg_0]
.text:00401EB0                 mov     edx, [ecx]
.text:00401EB2                 push    eax
.text:00401EB3                 push    edx
.text:00401EB4                 call    [ebp+arg_4]
.text:00401EB7                 add     esp, 8
.text:00401EBA                 test    al, al
.text:00401EBC                 jz      short loc_401ED4
.text:00401EBE                 mov     ecx, [ebp+arg_0]
.text:00401EC1                 mov     eax, [ecx]
.text:00401EC3                 mov     [ebp+arg_0], eax
.text:00401EC6                 mov     eax, [ebp+var_4]
.text:00401EC9                 mov     edx, [eax]
.text:00401ECB                 mov     [ecx], edx
.text:00401ECD                 mov     ecx, [ebp+arg_0]
.text:00401ED0                 mov     [eax], ecx
.text:00401ED2                 jmp     short loc_401ED7
.text:00401ED4 ; ---------------------------------------------------------------------------
.text:00401ED4
.text:00401ED4 loc_401ED4:                             ; CODE XREF: sub_401D90+12C↑j
.text:00401ED4                 mov     eax, [ebp+var_4]
.text:00401ED7
.text:00401ED7 loc_401ED7:                             ; CODE XREF: sub_401D90+142↑j
.text:00401ED7                 mov     edx, [ebp+var_8]
.text:00401EDA                 mov     ecx, [edx]
.text:00401EDC                 mov     edx, [eax]
.text:00401EDE                 push    ecx
.text:00401EDF                 push    edx
.text:00401EE0                 call    [ebp+arg_4]
.text:00401EE3                 add     esp, 8
.text:00401EE6                 test    al, al
.text:00401EE8                 jz      short loc_401EFB
.text:00401EEA                 mov     ecx, [ebp+var_4]
.text:00401EED                 mov     edx, [ebp+var_8]
.text:00401EF0                 mov     eax, [ecx]
.text:00401EF2                 mov     edx, [edx]
.text:00401EF4                 mov     [ecx], edx
.text:00401EF6                 mov     ecx, [ebp+var_8]
.text:00401EF9                 mov     [ecx], eax
.text:00401EFB
.text:00401EFB loc_401EFB:                             ; CODE XREF: sub_401D90+158↑j
.text:00401EFB                 mov     edx, [ebx+esi]
.text:00401EFE                 mov     eax, [edi]
.text:00401F00                 push    edx
.text:00401F01                 push    eax
.text:00401F02                 call    [ebp+arg_4]
.text:00401F05                 add     esp, 8
.text:00401F08                 test    al, al
.text:00401F0A                 jz      short loc_401F16
.text:00401F0C                 mov     ecx, [ebx+esi]
.text:00401F0F                 mov     eax, [edi]
.text:00401F11                 mov     [edi], ecx
.text:00401F13                 mov     [ebx+esi], eax
.text:00401F16
.text:00401F16 loc_401F16:                             ; CODE XREF: sub_401D90+17A↑j
.text:00401F16                 mov     edx, [edi]
.text:00401F18                 mov     eax, [ebp+var_4]
.text:00401F1B                 mov     ecx, [eax]
.text:00401F1D                 push    edx
.text:00401F1E                 push    ecx
.text:00401F1F                 call    [ebp+arg_4]
.text:00401F22                 add     esp, 8
.text:00401F25                 test    al, al
.text:00401F27                 jz      short loc_401F34
.text:00401F29                 mov     ecx, [ebp+var_4]
.text:00401F2C                 mov     edx, [edi]
.text:00401F2E                 mov     eax, [ecx]
.text:00401F30                 mov     [ecx], edx
.text:00401F32                 mov     [edi], eax
.text:00401F34
.text:00401F34 loc_401F34:                             ; CODE XREF: sub_401D90+197↑j
.text:00401F34                 mov     eax, [ebx+esi]
.text:00401F37                 mov     ecx, [edi]
.text:00401F39                 push    eax
.text:00401F3A                 push    ecx
.text:00401F3B                 call    [ebp+arg_4]
.text:00401F3E                 add     esp, 8
.text:00401F41                 test    al, al
.text:00401F43                 jz      short loc_401F9C
.text:00401F45                 mov     edx, [ebx+esi]
.text:00401F48                 mov     eax, [edi]
.text:00401F4A                 mov     [edi], edx
.text:00401F4C                 mov     [ebx+esi], eax
.text:00401F4F                 pop     ebx
.text:00401F50                 mov     esp, ebp
.text:00401F52                 pop     ebp
.text:00401F53                 retn
.text:00401F54 ; ---------------------------------------------------------------------------
.text:00401F54
.text:00401F54 loc_401F54:                             ; CODE XREF: sub_401D90+14↑j
.text:00401F54                 mov     eax, [esi]
.text:00401F56                 mov     ecx, [edi]
.text:00401F58                 push    eax
.text:00401F59                 push    ecx
.text:00401F5A                 call    [ebp+arg_4]
.text:00401F5D                 add     esp, 8
.text:00401F60                 test    al, al
.text:00401F62                 jz      short loc_401F6C
.text:00401F64                 mov     edx, [esi]
.text:00401F66                 mov     eax, [edi]
.text:00401F68                 mov     [edi], edx
.text:00401F6A                 mov     [esi], eax
.text:00401F6C
.text:00401F6C loc_401F6C:                             ; CODE XREF: sub_401D90+1D2↑j
.text:00401F6C                 mov     eax, [edi]
.text:00401F6E                 mov     ecx, [ebx]
.text:00401F70                 push    eax
.text:00401F71                 push    ecx
.text:00401F72                 call    [ebp+arg_4]
.text:00401F75                 add     esp, 8
.text:00401F78                 test    al, al
.text:00401F7A                 jz      short loc_401F84
.text:00401F7C                 mov     edx, [edi]
.text:00401F7E                 mov     eax, [ebx]
.text:00401F80                 mov     [ebx], edx
.text:00401F82                 mov     [edi], eax
.text:00401F84
.text:00401F84 loc_401F84:                             ; CODE XREF: sub_401D90+1EA↑j
.text:00401F84                 mov     eax, [esi]
.text:00401F86                 mov     ecx, [edi]
.text:00401F88                 push    eax
.text:00401F89                 push    ecx
.text:00401F8A                 call    [ebp+arg_4]
.text:00401F8D                 add     esp, 8
.text:00401F90                 test    al, al
.text:00401F92                 jz      short loc_401F9C
.text:00401F94                 mov     edx, [esi]
.text:00401F96                 mov     eax, [edi]
.text:00401F98                 mov     [edi], edx
.text:00401F9A                 mov     [esi], eax
.text:00401F9C
.text:00401F9C loc_401F9C:                             ; CODE XREF: sub_401D90+1B3↑j
.text:00401F9C                                         ; sub_401D90+202↑j
.text:00401F9C                 pop     ebx
.text:00401F9D                 mov     esp, ebp
.text:00401F9F                 pop     ebp
.text:00401FA0                 retn
.text:00401FA0 sub_401D90      endp
.text:00401FA0
.text:00401FA0 ; ---------------------------------------------------------------------------
.text:00401FA1                 align 10h
.text:00401FB0
.text:00401FB0 ; =============== S U B R O U T I N E =======================================
.text:00401FB0
.text:00401FB0 ; Attributes: bp-based frame
.text:00401FB0
.text:00401FB0 sub_401FB0      proc near               ; CODE XREF: sub_4018E0+C7↑p
.text:00401FB0
.text:00401FB0 var_10          = dword ptr -10h
.text:00401FB0 var_C           = dword ptr -0Ch
.text:00401FB0 var_8           = dword ptr -8
.text:00401FB0 var_4           = dword ptr -4
.text:00401FB0 arg_0           = dword ptr  8
.text:00401FB0
.text:00401FB0                 push    ebp
.text:00401FB1                 mov     ebp, esp
.text:00401FB3                 sub     esp, 10h
.text:00401FB6                 push    ebx
.text:00401FB7                 mov     ebx, eax
.text:00401FB9                 sub     ecx, ebx
.text:00401FBB                 sar     ecx, 2
.text:00401FBE                 mov     eax, ecx
.text:00401FC0                 cdq
.text:00401FC1                 sub     eax, edx
.text:00401FC3                 push    edi
.text:00401FC4                 mov     edi, eax
.text:00401FC6                 sar     edi, 1
.text:00401FC8                 mov     [ebp+var_8], ecx
.text:00401FCB                 test    edi, edi
.text:00401FCD                 jle     short loc_402048
.text:00401FCF                 push    esi
.text:00401FD0                 lea     esi, [edi+edi+2]
.text:00401FD4                 jmp     short loc_401FDC
.text:00401FD6 ; ---------------------------------------------------------------------------
.text:00401FD6
.text:00401FD6 loc_401FD6:                             ; CODE XREF: sub_401FB0+95↓j
.text:00401FD6                 mov     ecx, [ebp+var_8]
.text:00401FD9                 mov     esi, [ebp+var_C]
.text:00401FDC
.text:00401FDC loc_401FDC:                             ; CODE XREF: sub_401FB0+24↑j
.text:00401FDC                 mov     eax, [ebx+edi*4-4]
.text:00401FE0                 dec     edi
.text:00401FE1                 sub     esi, 2
.text:00401FE4                 mov     [ebp+var_C], esi
.text:00401FE7                 mov     [ebp+var_10], eax
.text:00401FEA                 mov     [ebp+var_4], edi
.text:00401FED                 cmp     esi, ecx
.text:00401FEF                 jge     short loc_40201F
.text:00401FF1
.text:00401FF1 loc_401FF1:                             ; CODE XREF: sub_401FB0+68↓j
.text:00401FF1                 mov     ecx, [ebx+esi*4-4]
.text:00401FF5                 mov     edx, [ebx+esi*4]
.text:00401FF8                 push    ecx
.text:00401FF9                 push    edx
.text:00401FFA                 call    [ebp+arg_0]
.text:00401FFD                 add     esp, 8
.text:00402000                 test    al, al
.text:00402002                 jz      short loc_402005
.text:00402004                 dec     esi
.text:00402005
.text:00402005 loc_402005:                             ; CODE XREF: sub_401FB0+52↑j
.text:00402005                 mov     ecx, [ebp+var_4]
.text:00402008                 mov     eax, [ebx+esi*4]
.text:0040200B                 mov     [ebp+var_4], esi
.text:0040200E                 lea     esi, [esi+esi+2]
.text:00402012                 mov     [ebx+ecx*4], eax
.text:00402015                 cmp     esi, [ebp+var_8]
.text:00402018                 jl      short loc_401FF1
.text:0040201A                 mov     ecx, [ebp+var_8]
.text:0040201D                 cmp     esi, ecx
.text:0040201F
.text:0040201F loc_40201F:                             ; CODE XREF: sub_401FB0+3F↑j
.text:0040201F                 jnz     short loc_40202F
.text:00402021                 mov     edx, [ebx+ecx*4-4]
.text:00402025                 mov     eax, [ebp+var_4]
.text:00402028                 dec     ecx
.text:00402029                 mov     [ebx+eax*4], edx
.text:0040202C                 mov     [ebp+var_4], ecx
.text:0040202F
.text:0040202F loc_40202F:                             ; CODE XREF: sub_401FB0:loc_40201F↑j
.text:0040202F                 mov     ecx, [ebp+arg_0]
.text:00402032                 mov     eax, [ebp+var_4]
.text:00402035                 push    ecx
.text:00402036                 lea     edx, [ebp+var_10]
.text:00402039                 push    edx
.text:0040203A                 push    edi
.text:0040203B                 call    sub_4024F0
.text:00402040                 add     esp, 0Ch
.text:00402043                 test    edi, edi
.text:00402045                 jg      short loc_401FD6
.text:00402047                 pop     esi
.text:00402048
.text:00402048 loc_402048:                             ; CODE XREF: sub_401FB0+1D↑j
.text:00402048                 pop     edi
.text:00402049                 pop     ebx
.text:0040204A                 mov     esp, ebp
.text:0040204C                 pop     ebp
.text:0040204D                 retn
.text:0040204D sub_401FB0      endp
.text:0040204D
.text:0040204D ; ---------------------------------------------------------------------------
.text:0040204E                 align 10h
.text:00402050
.text:00402050 ; =============== S U B R O U T I N E =======================================
.text:00402050
.text:00402050 ; Attributes: bp-based frame
.text:00402050
.text:00402050 sub_402050      proc near               ; CODE XREF: sub_4018E0+D7↑p
.text:00402050
.text:00402050 var_4           = dword ptr -4
.text:00402050
.text:00402050                 push    ebp
.text:00402051                 mov     ebp, esp
.text:00402053                 push    ecx
.text:00402054                 push    edi
.text:00402055                 mov     edi, ecx
.text:00402057                 sub     eax, edi
.text:00402059                 mov     ecx, eax
.text:0040205B                 and     ecx, 0FFFFFFFCh
.text:0040205E                 cmp     ecx, 4
.text:00402061                 jle     short loc_402096
.text:00402063                 push    esi
.text:00402064
.text:00402064 loc_402064:                             ; CODE XREF: sub_402050+43↓j
.text:00402064                 mov     edx, [edi+eax-4]
.text:00402068                 mov     ecx, [edi]
.text:0040206A                 lea     esi, [eax-4]
.text:0040206D                 mov     [edi+eax-4], ecx
.text:00402071                 mov     [ebp+var_4], edx
.text:00402074                 push    ebx
.text:00402075                 lea     edx, [ebp+var_4]
.text:00402078                 mov     eax, esi
.text:0040207A                 sar     eax, 2
.text:0040207D                 push    edx
.text:0040207E                 push    eax
.text:0040207F                 xor     eax, eax
.text:00402081                 call    sub_402430
.text:00402086                 mov     eax, esi
.text:00402088                 mov     ecx, esi
.text:0040208A                 and     ecx, 0FFFFFFFCh
.text:0040208D                 add     esp, 0Ch
.text:00402090                 cmp     ecx, 4
.text:00402093                 jg      short loc_402064
.text:00402095                 pop     esi
.text:00402096
.text:00402096 loc_402096:                             ; CODE XREF: sub_402050+11↑j
.text:00402096                 pop     edi
.text:00402097                 mov     esp, ebp
.text:00402099                 pop     ebp
.text:0040209A                 retn
.text:0040209A sub_402050      endp
.text:0040209A
.text:0040209A ; ---------------------------------------------------------------------------
.text:0040209B                 align 10h
.text:004020A0
.text:004020A0 ; =============== S U B R O U T I N E =======================================
.text:004020A0
.text:004020A0 ; Attributes: bp-based frame
.text:004020A0
.text:004020A0 ; int __cdecl sub_4020A0(void *Src, int, int)
.text:004020A0 sub_4020A0      proc near               ; CODE XREF: sub_4018E0+9F↑p
.text:004020A0
.text:004020A0 var_4           = dword ptr -4
.text:004020A0 Src             = dword ptr  8
.text:004020A0 arg_4           = dword ptr  0Ch
.text:004020A0 arg_8           = dword ptr  10h
.text:004020A0
.text:004020A0                 push    ebp
.text:004020A1                 mov     ebp, esp
.text:004020A3                 push    ecx
.text:004020A4                 push    ebx
.text:004020A5                 push    esi
.text:004020A6                 mov     esi, [ebp+Src]
.text:004020A9                 lea     ebx, [esi+4]
.text:004020AC                 cmp     ebx, [ebp+arg_4]
.text:004020AF                 jz      short loc_40212D
.text:004020B1                 push    edi
.text:004020B2
.text:004020B2 loc_4020B2:                             ; CODE XREF: sub_4020A0+8A↓j
.text:004020B2                 mov     eax, [esi]
.text:004020B4                 mov     edi, [ebx]
.text:004020B6                 push    eax
.text:004020B7                 push    edi
.text:004020B8                 mov     [ebp+var_4], ebx
.text:004020BB                 call    [ebp+arg_8]
.text:004020BE                 add     esp, 8
.text:004020C1                 test    al, al
.text:004020C3                 jz      short loc_4020E7
.text:004020C5                 mov     eax, ebx
.text:004020C7                 sub     eax, esi
.text:004020C9                 sar     eax, 2
.text:004020CC                 add     eax, eax
.text:004020CE                 add     eax, eax
.text:004020D0                 push    eax             ; Size
.text:004020D1                 mov     ecx, ebx
.text:004020D3                 sub     ecx, eax
.text:004020D5                 add     ecx, 4
.text:004020D8                 push    esi             ; Src
.text:004020D9                 push    ecx             ; Dst
.text:004020DA                 call    ds:memmove
.text:004020E0                 add     esp, 0Ch
.text:004020E3                 mov     [esi], edi
.text:004020E5                 jmp     short loc_402124
.text:004020E7 ; ---------------------------------------------------------------------------
.text:004020E7
.text:004020E7 loc_4020E7:                             ; CODE XREF: sub_4020A0+23↑j
.text:004020E7                 mov     edx, [ebx-4]
.text:004020EA                 lea     esi, [ebx-4]
.text:004020ED                 push    edx
.text:004020EE                 push    edi
.text:004020EF                 call    [ebp+arg_8]
.text:004020F2                 add     esp, 8
.text:004020F5                 test    al, al
.text:004020F7                 jz      short loc_40211C
.text:004020F9                 lea     esp, [esp+0]
.text:00402100
.text:00402100 loc_402100:                             ; CODE XREF: sub_4020A0+7A↓j
.text:00402100                 mov     ecx, [ebp+var_4]
.text:00402103                 mov     eax, [esi]
.text:00402105                 mov     [ebp+var_4], esi
.text:00402108                 mov     [ecx], eax
.text:0040210A                 mov     edx, [esi-4]
.text:0040210D                 sub     esi, 4
.text:00402110                 push    edx
.text:00402111                 push    edi
.text:00402112                 call    [ebp+arg_8]
.text:00402115                 add     esp, 8
.text:00402118                 test    al, al
.text:0040211A                 jnz     short loc_402100
.text:0040211C
.text:0040211C loc_40211C:                             ; CODE XREF: sub_4020A0+57↑j
.text:0040211C                 mov     eax, [ebp+var_4]
.text:0040211F                 mov     esi, [ebp+Src]
.text:00402122                 mov     [eax], edi
.text:00402124
.text:00402124 loc_402124:                             ; CODE XREF: sub_4020A0+45↑j
.text:00402124                 add     ebx, 4
.text:00402127                 cmp     ebx, [ebp+arg_4]
.text:0040212A                 jnz     short loc_4020B2
.text:0040212C                 pop     edi
.text:0040212D
.text:0040212D loc_40212D:                             ; CODE XREF: sub_4020A0+F↑j
.text:0040212D                 pop     esi
.text:0040212E                 pop     ebx
.text:0040212F                 mov     esp, ebp
.text:00402131                 pop     ebp
.text:00402132                 retn
.text:00402132 sub_4020A0      endp
.text:00402132
.text:00402132 ; ---------------------------------------------------------------------------
.text:00402133                 align 10h
.text:00402140
.text:00402140 ; =============== S U B R O U T I N E =======================================
.text:00402140
.text:00402140 ; Attributes: bp-based frame
.text:00402140
.text:00402140 sub_402140      proc near               ; CODE XREF: sub_401C50+24↑p
.text:00402140
.text:00402140 var_8           = dword ptr -8
.text:00402140 var_4           = dword ptr -4
.text:00402140 arg_0           = dword ptr  8
.text:00402140
.text:00402140                 push    ebp
.text:00402141                 mov     ebp, esp
.text:00402143                 sub     esp, 8
.text:00402146                 push    edi
.text:00402147                 mov     edi, [ebp+arg_0]
.text:0040214A                 mov     eax, edi
.text:0040214C                 sub     eax, ecx
.text:0040214E                 sar     eax, 2
.text:00402151                 cmp     eax, 28h ; '('
.text:00402154                 jle     loc_40223D
.text:0040215A                 mov     edi, [ecx]
.text:0040215C                 inc     eax
.text:0040215D                 cdq
.text:0040215E                 and     edx, 7
.text:00402161                 add     eax, edx
.text:00402163                 sar     eax, 3
.text:00402166                 push    ebx
.text:00402167                 lea     ebx, ds:0[eax*8]
.text:0040216E                 add     eax, eax
.text:00402170                 add     eax, eax
.text:00402172                 mov     edx, [eax+ecx]
.text:00402175                 mov     [ebp+var_4], ebx
.text:00402178                 cmp     edx, edi
.text:0040217A                 jge     short loc_402181
.text:0040217C                 mov     [eax+ecx], edi
.text:0040217F                 mov     [ecx], edx
.text:00402181
.text:00402181 loc_402181:                             ; CODE XREF: sub_402140+3A↑j
.text:00402181                 mov     edx, [ebx+ecx]
.text:00402184                 mov     edi, [eax+ecx]
.text:00402187                 cmp     edx, edi
.text:00402189                 jge     short loc_402191
.text:0040218B                 mov     [ebx+ecx], edi
.text:0040218E                 mov     [eax+ecx], edx
.text:00402191
.text:00402191 loc_402191:                             ; CODE XREF: sub_402140+49↑j
.text:00402191                 mov     edx, [eax+ecx]
.text:00402194                 mov     edi, [ecx]
.text:00402196                 cmp     edx, edi
.text:00402198                 jge     short loc_40219F
.text:0040219A                 mov     [eax+ecx], edi
.text:0040219D                 mov     [ecx], edx
.text:0040219F
.text:0040219F loc_40219F:                             ; CODE XREF: sub_402140+58↑j
.text:0040219F                 mov     edi, [esi]
.text:004021A1                 mov     edx, esi
.text:004021A3                 sub     edx, eax
.text:004021A5                 mov     ebx, [edx]
.text:004021A7                 cmp     edi, ebx
.text:004021A9                 jge     short loc_4021AF
.text:004021AB                 mov     [esi], ebx
.text:004021AD                 mov     [edx], edi
.text:004021AF
.text:004021AF loc_4021AF:                             ; CODE XREF: sub_402140+69↑j
.text:004021AF                 mov     edi, [eax+esi]
.text:004021B2                 mov     ebx, [esi]
.text:004021B4                 cmp     edi, ebx
.text:004021B6                 jge     short loc_4021BD
.text:004021B8                 mov     [eax+esi], ebx
.text:004021BB                 mov     [esi], edi
.text:004021BD
.text:004021BD loc_4021BD:                             ; CODE XREF: sub_402140+76↑j
.text:004021BD                 mov     edi, [esi]
.text:004021BF                 mov     ebx, [edx]
.text:004021C1                 cmp     edi, ebx
.text:004021C3                 jge     short loc_4021C9
.text:004021C5                 mov     [esi], ebx
.text:004021C7                 mov     [edx], edi
.text:004021C9
.text:004021C9 loc_4021C9:                             ; CODE XREF: sub_402140+83↑j
.text:004021C9                 mov     edi, [ebp+arg_0]
.text:004021CC                 mov     edx, edi
.text:004021CE                 sub     edi, [ebp+var_4]
.text:004021D1                 sub     edx, eax
.text:004021D3                 mov     ebx, [edx]
.text:004021D5                 mov     [ebp+var_4], edi
.text:004021D8                 mov     edi, [edi]
.text:004021DA                 cmp     ebx, edi
.text:004021DC                 jge     short loc_4021E5
.text:004021DE                 mov     [edx], edi
.text:004021E0                 mov     edi, [ebp+var_4]
.text:004021E3                 mov     [edi], ebx
.text:004021E5
.text:004021E5 loc_4021E5:                             ; CODE XREF: sub_402140+9C↑j
.text:004021E5                 mov     edi, [ebp+arg_0]
.text:004021E8                 mov     ebx, [edi]
.text:004021EA                 mov     edi, [edx]
.text:004021EC                 mov     [ebp+var_8], ebx
.text:004021EF                 cmp     ebx, edi
.text:004021F1                 jge     short loc_4021FD
.text:004021F3                 mov     ebx, [ebp+arg_0]
.text:004021F6                 mov     [ebx], edi
.text:004021F8                 mov     edi, [ebp+var_8]
.text:004021FB                 mov     [edx], edi
.text:004021FD
.text:004021FD loc_4021FD:                             ; CODE XREF: sub_402140+B1↑j
.text:004021FD                 mov     ebx, [ebp+var_4]
.text:00402200                 mov     edi, [edx]
.text:00402202                 mov     ebx, [ebx]
.text:00402204                 cmp     edi, ebx
.text:00402206                 jge     short loc_40220F
.text:00402208                 mov     [edx], ebx
.text:0040220A                 mov     ebx, [ebp+var_4]
.text:0040220D                 mov     [ebx], edi
.text:0040220F
.text:0040220F loc_40220F:                             ; CODE XREF: sub_402140+C6↑j
.text:0040220F                 mov     edi, [esi]
.text:00402211                 mov     ebx, [eax+ecx]
.text:00402214                 cmp     edi, ebx
.text:00402216                 jge     short loc_40221D
.text:00402218                 mov     [esi], ebx
.text:0040221A                 mov     [eax+ecx], edi
.text:0040221D
.text:0040221D loc_40221D:                             ; CODE XREF: sub_402140+D6↑j
.text:0040221D                 mov     edi, [edx]
.text:0040221F                 mov     ebx, [esi]
.text:00402221                 cmp     edi, ebx
.text:00402223                 jge     short loc_402229
.text:00402225                 mov     [edx], ebx
.text:00402227                 mov     [esi], edi
.text:00402229
.text:00402229 loc_402229:                             ; CODE XREF: sub_402140+E3↑j
.text:00402229                 mov     edx, [esi]
.text:0040222B                 mov     edi, [eax+ecx]
.text:0040222E                 pop     ebx
.text:0040222F                 cmp     edx, edi
.text:00402231                 jge     short loc_402261
.text:00402233                 mov     [esi], edi
.text:00402235                 mov     [eax+ecx], edx
.text:00402238                 pop     edi
.text:00402239                 mov     esp, ebp
.text:0040223B                 pop     ebp
.text:0040223C                 retn
.text:0040223D ; ---------------------------------------------------------------------------
.text:0040223D
.text:0040223D loc_40223D:                             ; CODE XREF: sub_402140+14↑j
.text:0040223D                 mov     eax, [esi]
.text:0040223F                 mov     edx, [ecx]
.text:00402241                 cmp     eax, edx
.text:00402243                 jge     short loc_402249
.text:00402245                 mov     [esi], edx
.text:00402247                 mov     [ecx], eax
.text:00402249
.text:00402249 loc_402249:                             ; CODE XREF: sub_402140+103↑j
.text:00402249                 mov     eax, [edi]
.text:0040224B                 mov     edx, [esi]
.text:0040224D                 cmp     eax, edx
.text:0040224F                 jge     short loc_402255
.text:00402251                 mov     [edi], edx
.text:00402253                 mov     [esi], eax
.text:00402255
.text:00402255 loc_402255:                             ; CODE XREF: sub_402140+10F↑j
.text:00402255                 mov     eax, [esi]
.text:00402257                 mov     edx, [ecx]
.text:00402259                 cmp     eax, edx
.text:0040225B                 jge     short loc_402261
.text:0040225D                 mov     [esi], edx
.text:0040225F                 mov     [ecx], eax
.text:00402261
.text:00402261 loc_402261:                             ; CODE XREF: sub_402140+F1↑j
.text:00402261                                         ; sub_402140+11B↑j
.text:00402261                 pop     edi
.text:00402262                 mov     esp, ebp
.text:00402264                 pop     ebp
.text:00402265                 retn
.text:00402265 sub_402140      endp
.text:00402265
.text:00402265 ; ---------------------------------------------------------------------------
.text:00402266                 align 10h
.text:00402270
.text:00402270 ; =============== S U B R O U T I N E =======================================
.text:00402270
.text:00402270 ; Attributes: bp-based frame
.text:00402270
.text:00402270 sub_402270      proc near               ; CODE XREF: sub_4019D0+AD↑p
.text:00402270
.text:00402270 var_C           = dword ptr -0Ch
.text:00402270 var_8           = dword ptr -8
.text:00402270 var_4           = dword ptr -4
.text:00402270
.text:00402270                 push    ebp
.text:00402271                 mov     ebp, esp
.text:00402273                 sub     esp, 0Ch
.text:00402276                 sub     eax, ecx
.text:00402278                 sar     eax, 2
.text:0040227B                 mov     [ebp+var_4], eax
.text:0040227E                 cdq
.text:0040227F                 sub     eax, edx
.text:00402281                 push    esi
.text:00402282                 mov     esi, eax
.text:00402284                 sar     esi, 1
.text:00402286                 test    esi, esi
.text:00402288                 jle     short loc_402306
.text:0040228A                 push    ebx
.text:0040228B                 push    edi
.text:0040228C                 lea     eax, [esi+esi+2]
.text:00402290                 jmp     short loc_402295
.text:00402292 ; ---------------------------------------------------------------------------
.text:00402292
.text:00402292 loc_402292:                             ; CODE XREF: sub_402270+92↓j
.text:00402292                 mov     eax, [ebp+var_C]
.text:00402295
.text:00402295 loc_402295:                             ; CODE XREF: sub_402270+20↑j
.text:00402295                 mov     edx, [ecx+esi*4-4]
.text:00402299                 dec     esi
.text:0040229A                 sub     eax, 2
.text:0040229D                 mov     [ebp+var_8], edx
.text:004022A0                 mov     edx, [ebp+var_4]
.text:004022A3                 mov     [ebp+var_C], eax
.text:004022A6                 mov     edi, esi
.text:004022A8                 cmp     eax, edx
.text:004022AA                 jge     short loc_4022CA
.text:004022AC                 lea     esp, [esp+0]
.text:004022B0
.text:004022B0 loc_4022B0:                             ; CODE XREF: sub_402270+58↓j
.text:004022B0                 mov     ebx, [ecx+eax*4]
.text:004022B3                 cmp     ebx, [ecx+eax*4-4]
.text:004022B7                 jge     short loc_4022BA
.text:004022B9                 dec     eax
.text:004022BA
.text:004022BA loc_4022BA:                             ; CODE XREF: sub_402270+47↑j
.text:004022BA                 mov     ebx, [ecx+eax*4]
.text:004022BD                 mov     [ecx+edi*4], ebx
.text:004022C0                 mov     edi, eax
.text:004022C2                 lea     eax, [eax+eax+2]
.text:004022C6                 cmp     eax, edx
.text:004022C8                 jl      short loc_4022B0
.text:004022CA
.text:004022CA loc_4022CA:                             ; CODE XREF: sub_402270+3A↑j
.text:004022CA                 cmp     eax, edx
.text:004022CC                 jnz     short loc_4022D8
.text:004022CE                 mov     eax, [ecx+edx*4-4]
.text:004022D2                 mov     [ecx+edi*4], eax
.text:004022D5                 lea     edi, [edx-1]
.text:004022D8
.text:004022D8 loc_4022D8:                             ; CODE XREF: sub_402270+5C↑j
.text:004022D8                 mov     ebx, [ebp+var_8]
.text:004022DB                 lea     eax, [edi-1]
.text:004022DE                 cdq
.text:004022DF                 sub     eax, edx
.text:004022E1                 sar     eax, 1
.text:004022E3                 cmp     esi, edi
.text:004022E5                 jge     short loc_4022FD
.text:004022E7
.text:004022E7 loc_4022E7:                             ; CODE XREF: sub_402270+8B↓j
.text:004022E7                 mov     edx, [ecx+eax*4]
.text:004022EA                 cmp     edx, ebx
.text:004022EC                 jge     short loc_4022FD
.text:004022EE                 mov     [ecx+edi*4], edx
.text:004022F1                 mov     edi, eax
.text:004022F3                 dec     eax
.text:004022F4                 cdq
.text:004022F5                 sub     eax, edx
.text:004022F7                 sar     eax, 1
.text:004022F9                 cmp     esi, edi
.text:004022FB                 jl      short loc_4022E7
.text:004022FD
.text:004022FD loc_4022FD:                             ; CODE XREF: sub_402270+75↑j
.text:004022FD                                         ; sub_402270+7C↑j
.text:004022FD                 mov     [ecx+edi*4], ebx
.text:00402300                 test    esi, esi
.text:00402302                 jg      short loc_402292
.text:00402304                 pop     edi
.text:00402305                 pop     ebx
.text:00402306
.text:00402306 loc_402306:                             ; CODE XREF: sub_402270+18↑j
.text:00402306                 pop     esi
.text:00402307                 mov     esp, ebp
.text:00402309                 pop     ebp
.text:0040230A                 retn
.text:0040230A sub_402270      endp
.text:0040230A
.text:0040230A ; ---------------------------------------------------------------------------
.text:0040230B                 align 10h
.text:00402310
.text:00402310 ; =============== S U B R O U T I N E =======================================
.text:00402310
.text:00402310 ; Attributes: bp-based frame
.text:00402310
.text:00402310 sub_402310      proc near               ; CODE XREF: sub_4019D0+B6↑p
.text:00402310
.text:00402310 var_4           = dword ptr -4
.text:00402310
.text:00402310                 push    ebp
.text:00402311                 mov     ebp, esp
.text:00402313                 push    ecx
.text:00402314                 sub     eax, ecx
.text:00402316                 mov     edx, eax
.text:00402318                 and     edx, 0FFFFFFFCh
.text:0040231B                 cmp     edx, 4
.text:0040231E                 jle     loc_4023A8
.text:00402324                 push    ebx
.text:00402325                 push    esi
.text:00402326                 push    edi
.text:00402327
.text:00402327 loc_402327:                             ; CODE XREF: sub_402310+93↓j
.text:00402327                 mov     edx, [ecx]
.text:00402329                 mov     edi, [ecx+eax-4]
.text:0040232D                 lea     ebx, [eax-4]
.text:00402330                 mov     [ecx+eax-4], edx
.text:00402334                 mov     edx, ebx
.text:00402336                 sar     edx, 2
.text:00402339                 mov     eax, 2
.text:0040233E                 xor     esi, esi
.text:00402340                 mov     [ebp+var_4], ebx
.text:00402343                 cmp     eax, edx
.text:00402345                 jge     short loc_402364
.text:00402347
.text:00402347 loc_402347:                             ; CODE XREF: sub_402310+4F↓j
.text:00402347                 mov     ebx, [ecx+eax*4]
.text:0040234A                 cmp     ebx, [ecx+eax*4-4]
.text:0040234E                 jge     short loc_402351
.text:00402350                 dec     eax
.text:00402351
.text:00402351 loc_402351:                             ; CODE XREF: sub_402310+3E↑j
.text:00402351                 mov     ebx, [ecx+eax*4]
.text:00402354                 mov     [ecx+esi*4], ebx
.text:00402357                 mov     esi, eax
.text:00402359                 lea     eax, [eax+eax+2]
.text:0040235D                 cmp     eax, edx
.text:0040235F                 jl      short loc_402347
.text:00402361                 mov     ebx, [ebp+var_4]
.text:00402364
.text:00402364 loc_402364:                             ; CODE XREF: sub_402310+35↑j
.text:00402364                 jnz     short loc_402370
.text:00402366                 mov     eax, [ecx+edx*4-4]
.text:0040236A                 mov     [ecx+esi*4], eax
.text:0040236D                 lea     esi, [edx-1]
.text:00402370
.text:00402370 loc_402370:                             ; CODE XREF: sub_402310:loc_402364↑j
.text:00402370                 lea     eax, [esi-1]
.text:00402373                 cdq
.text:00402374                 sub     eax, edx
.text:00402376                 sar     eax, 1
.text:00402378                 test    esi, esi
.text:0040237A                 jle     short loc_402396
.text:0040237C                 lea     esp, [esp+0]
.text:00402380
.text:00402380 loc_402380:                             ; CODE XREF: sub_402310+84↓j
.text:00402380                 mov     edx, [ecx+eax*4]
.text:00402383                 cmp     edx, edi
.text:00402385                 jge     short loc_402396
.text:00402387                 mov     [ecx+esi*4], edx
.text:0040238A                 mov     esi, eax
.text:0040238C                 dec     eax
.text:0040238D                 cdq
.text:0040238E                 sub     eax, edx
.text:00402390                 sar     eax, 1
.text:00402392                 test    esi, esi
.text:00402394                 jg      short loc_402380
.text:00402396
.text:00402396 loc_402396:                             ; CODE XREF: sub_402310+6A↑j
.text:00402396                                         ; sub_402310+75↑j
.text:00402396                 mov     eax, ebx
.text:00402398                 mov     edx, ebx
.text:0040239A                 and     edx, 0FFFFFFFCh
.text:0040239D                 mov     [ecx+esi*4], edi
.text:004023A0                 cmp     edx, 4
.text:004023A3                 jg      short loc_402327
.text:004023A5                 pop     edi
.text:004023A6                 pop     esi
.text:004023A7                 pop     ebx
.text:004023A8
.text:004023A8 loc_4023A8:                             ; CODE XREF: sub_402310+E↑j
.text:004023A8                 mov     esp, ebp
.text:004023AA                 pop     ebp
.text:004023AB                 retn
.text:004023AB sub_402310      endp
.text:004023AB
.text:004023AB ; ---------------------------------------------------------------------------
.text:004023AC                 align 10h
.text:004023B0
.text:004023B0 ; =============== S U B R O U T I N E =======================================
.text:004023B0
.text:004023B0 ; Attributes: bp-based frame
.text:004023B0
.text:004023B0 sub_4023B0      proc near               ; CODE XREF: sub_4019D0+89↑p
.text:004023B0
.text:004023B0 var_4           = dword ptr -4
.text:004023B0 arg_0           = dword ptr  8
.text:004023B0
.text:004023B0                 push    ebp
.text:004023B1                 mov     ebp, esp
.text:004023B3                 push    ecx
.text:004023B4                 push    edi
.text:004023B5                 lea     edi, [ebx+4]
.text:004023B8                 cmp     edi, [ebp+arg_0]
.text:004023BB                 jz      short loc_402420
.text:004023BD                 mov     eax, 4
.text:004023C2                 sub     eax, ebx
.text:004023C4                 push    esi
.text:004023C5                 mov     [ebp+var_4], eax
.text:004023C8                 jmp     short loc_4023D3
.text:004023C8 ; ---------------------------------------------------------------------------
.text:004023CA                 align 10h
.text:004023D0
.text:004023D0 loc_4023D0:                             ; CODE XREF: sub_4023B0+6D↓j
.text:004023D0                 mov     eax, [ebp+var_4]
.text:004023D3
.text:004023D3 loc_4023D3:                             ; CODE XREF: sub_4023B0+18↑j
.text:004023D3                 mov     esi, [edi]
.text:004023D5                 mov     edx, edi
.text:004023D7                 cmp     esi, [ebx]
.text:004023D9                 jge     short loc_4023FD
.text:004023DB                 lea     eax, [eax+edi-4]
.text:004023DF                 sar     eax, 2
.text:004023E2                 add     eax, eax
.text:004023E4                 add     eax, eax
.text:004023E6                 push    eax             ; Size
.text:004023E7                 mov     ecx, edi
.text:004023E9                 sub     ecx, eax
.text:004023EB                 add     ecx, 4
.text:004023EE                 push    ebx             ; Src
.text:004023EF                 push    ecx             ; Dst
.text:004023F0                 call    ds:memmove
.text:004023F6                 add     esp, 0Ch
.text:004023F9                 mov     [ebx], esi
.text:004023FB                 jmp     short loc_402417
.text:004023FD ; ---------------------------------------------------------------------------
.text:004023FD
.text:004023FD loc_4023FD:                             ; CODE XREF: sub_4023B0+29↑j
.text:004023FD                 mov     ecx, [edi-4]
.text:00402400                 lea     eax, [edi-4]
.text:00402403                 cmp     esi, ecx
.text:00402405                 jge     short loc_402415
.text:00402407
.text:00402407 loc_402407:                             ; CODE XREF: sub_4023B0+63↓j
.text:00402407                 mov     [edx], ecx
.text:00402409                 mov     ecx, [eax-4]
.text:0040240C                 mov     edx, eax
.text:0040240E                 sub     eax, 4
.text:00402411                 cmp     esi, ecx
.text:00402413                 jl      short loc_402407
.text:00402415
.text:00402415 loc_402415:                             ; CODE XREF: sub_4023B0+55↑j
.text:00402415                 mov     [edx], esi
.text:00402417
.text:00402417 loc_402417:                             ; CODE XREF: sub_4023B0+4B↑j
.text:00402417                 add     edi, 4
.text:0040241A                 cmp     edi, [ebp+arg_0]
.text:0040241D                 jnz     short loc_4023D0
.text:0040241F                 pop     esi
.text:00402420
.text:00402420 loc_402420:                             ; CODE XREF: sub_4023B0+B↑j
.text:00402420                 pop     edi
.text:00402421                 mov     esp, ebp
.text:00402423                 pop     ebp
.text:00402424                 retn
.text:00402424 sub_4023B0      endp
.text:00402424
.text:00402424 ; ---------------------------------------------------------------------------
.text:00402425                 align 10h
.text:00402430
.text:00402430 ; =============== S U B R O U T I N E =======================================
.text:00402430
.text:00402430 ; Attributes: bp-based frame
.text:00402430
.text:00402430 sub_402430      proc near               ; CODE XREF: sub_402050+31↑p
.text:00402430
.text:00402430 var_4           = dword ptr -4
.text:00402430 arg_0           = dword ptr  8
.text:00402430 arg_4           = dword ptr  0Ch
.text:00402430 arg_8           = dword ptr  10h
.text:00402430
.text:00402430                 push    ebp
.text:00402431                 mov     ebp, esp
.text:00402433                 push    ecx
.text:00402434                 push    ebx
.text:00402435                 mov     ebx, eax
.text:00402437                 mov     eax, [ebp+arg_0]
.text:0040243A                 push    esi
.text:0040243B                 lea     esi, [ebx+ebx+2]
.text:0040243F                 mov     [ebp+var_4], ebx
.text:00402442                 cmp     esi, eax
.text:00402444                 jge     short loc_402470
.text:00402446
.text:00402446 loc_402446:                             ; CODE XREF: sub_402430+39↓j
.text:00402446                 mov     eax, [edi+esi*4-4]
.text:0040244A                 mov     ecx, [edi+esi*4]
.text:0040244D                 push    eax
.text:0040244E                 push    ecx
.text:0040244F                 call    [ebp+arg_8]
.text:00402452                 add     esp, 8
.text:00402455                 test    al, al
.text:00402457                 jz      short loc_40245A
.text:00402459                 dec     esi
.text:0040245A
.text:0040245A loc_40245A:                             ; CODE XREF: sub_402430+27↑j
.text:0040245A                 mov     edx, [edi+esi*4]
.text:0040245D                 mov     [edi+ebx*4], edx
.text:00402460                 mov     ebx, esi
.text:00402462                 lea     esi, [esi+esi+2]
.text:00402466                 cmp     esi, [ebp+arg_0]
.text:00402469                 jl      short loc_402446
.text:0040246B                 mov     eax, [ebp+arg_0]
.text:0040246E                 cmp     esi, eax
.text:00402470
.text:00402470 loc_402470:                             ; CODE XREF: sub_402430+14↑j
.text:00402470                 jnz     short loc_40247C
.text:00402472                 mov     ecx, [edi+eax*4-4]
.text:00402476                 mov     [edi+ebx*4], ecx
.text:00402479                 lea     ebx, [eax-1]
.text:0040247C
.text:0040247C loc_40247C:                             ; CODE XREF: sub_402430:loc_402470↑j
.text:0040247C                 lea     eax, [ebx-1]
.text:0040247F                 cdq
.text:00402480                 sub     eax, edx
.text:00402482                 mov     esi, eax
.text:00402484                 sar     esi, 1
.text:00402486                 cmp     [ebp+var_4], ebx
.text:00402489                 jge     short loc_4024C9
.text:0040248B                 jmp     short loc_402490
.text:0040248B ; ---------------------------------------------------------------------------
.text:0040248D                 align 10h
.text:00402490
.text:00402490 loc_402490:                             ; CODE XREF: sub_402430+5B↑j
.text:00402490                                         ; sub_402430+89↓j
.text:00402490                 mov     edx, [ebp+arg_4]
.text:00402493                 mov     eax, [edx]
.text:00402495                 mov     ecx, [edi+esi*4]
.text:00402498                 push    eax
.text:00402499                 push    ecx
.text:0040249A                 call    [ebp+arg_8]
.text:0040249D                 add     esp, 8
.text:004024A0                 test    al, al
.text:004024A2                 jz      short loc_4024D7
.text:004024A4                 mov     edx, [edi+esi*4]
.text:004024A7                 lea     eax, [esi-1]
.text:004024AA                 mov     [edi+ebx*4], edx
.text:004024AD                 cdq
.text:004024AE                 sub     eax, edx
.text:004024B0                 mov     ebx, esi
.text:004024B2                 sar     eax, 1
.text:004024B4                 mov     esi, eax
.text:004024B6                 cmp     [ebp+var_4], ebx
.text:004024B9                 jl      short loc_402490
.text:004024BB                 mov     eax, [ebp+arg_4]
.text:004024BE                 mov     ecx, [eax]
.text:004024C0                 pop     esi
.text:004024C1                 mov     [edi+ebx*4], ecx
.text:004024C4                 pop     ebx
.text:004024C5                 mov     esp, ebp
.text:004024C7                 pop     ebp
.text:004024C8                 retn
.text:004024C9 ; ---------------------------------------------------------------------------
.text:004024C9
.text:004024C9 loc_4024C9:                             ; CODE XREF: sub_402430+59↑j
.text:004024C9                 mov     edx, [ebp+arg_4]
.text:004024CC                 mov     eax, [edx]
.text:004024CE                 pop     esi
.text:004024CF                 mov     [edi+ebx*4], eax
.text:004024D2                 pop     ebx
.text:004024D3                 mov     esp, ebp
.text:004024D5                 pop     ebp
.text:004024D6                 retn
.text:004024D7 ; ---------------------------------------------------------------------------
.text:004024D7
.text:004024D7 loc_4024D7:                             ; CODE XREF: sub_402430+72↑j
.text:004024D7                 mov     ecx, [ebp+arg_4]
.text:004024DA                 mov     edx, [ecx]
.text:004024DC                 pop     esi
.text:004024DD                 mov     [edi+ebx*4], edx
.text:004024E0                 pop     ebx
.text:004024E1                 mov     esp, ebp
.text:004024E3                 pop     ebp
.text:004024E4                 retn
.text:004024E4 sub_402430      endp
.text:004024E4
.text:004024E4 ; ---------------------------------------------------------------------------
.text:004024E5                 align 10h
.text:004024F0
.text:004024F0 ; =============== S U B R O U T I N E =======================================
.text:004024F0
.text:004024F0 ; Attributes: bp-based frame
.text:004024F0
.text:004024F0 sub_4024F0      proc near               ; CODE XREF: sub_401FB0+8B↑p
.text:004024F0
.text:004024F0 arg_0           = dword ptr  8
.text:004024F0 arg_4           = dword ptr  0Ch
.text:004024F0 arg_8           = dword ptr  10h
.text:004024F0
.text:004024F0                 push    ebp
.text:004024F1                 mov     ebp, esp
.text:004024F3                 push    esi
.text:004024F4                 push    edi
.text:004024F5                 mov     edi, eax
.text:004024F7                 lea     eax, [edi-1]
.text:004024FA                 cdq
.text:004024FB                 sub     eax, edx
.text:004024FD                 mov     esi, eax
.text:004024FF                 sar     esi, 1
.text:00402501                 cmp     [ebp+arg_0], edi
.text:00402504                 jge     short loc_40253D
.text:00402506
.text:00402506 loc_402506:                             ; CODE XREF: sub_4024F0+3F↓j
.text:00402506                 mov     eax, [ebp+arg_4]
.text:00402509                 mov     ecx, [eax]
.text:0040250B                 mov     edx, [ebx+esi*4]
.text:0040250E                 push    ecx
.text:0040250F                 push    edx
.text:00402510                 call    [ebp+arg_8]
.text:00402513                 add     esp, 8
.text:00402516                 test    al, al
.text:00402518                 jz      short loc_402549
.text:0040251A                 mov     eax, [ebx+esi*4]
.text:0040251D                 mov     [ebx+edi*4], eax
.text:00402520                 lea     eax, [esi-1]
.text:00402523                 cdq
.text:00402524                 sub     eax, edx
.text:00402526                 mov     edi, esi
.text:00402528                 sar     eax, 1
.text:0040252A                 mov     esi, eax
.text:0040252C                 cmp     [ebp+arg_0], edi
.text:0040252F                 jl      short loc_402506
.text:00402531                 mov     ecx, [ebp+arg_4]
.text:00402534                 mov     edx, [ecx]
.text:00402536                 mov     [ebx+edi*4], edx
.text:00402539                 pop     edi
.text:0040253A                 pop     esi
.text:0040253B                 pop     ebp
.text:0040253C                 retn
.text:0040253D ; ---------------------------------------------------------------------------
.text:0040253D
.text:0040253D loc_40253D:                             ; CODE XREF: sub_4024F0+14↑j
.text:0040253D                 mov     eax, [ebp+arg_4]
.text:00402540                 mov     ecx, [eax]
.text:00402542                 mov     [ebx+edi*4], ecx
.text:00402545                 pop     edi
.text:00402546                 pop     esi
.text:00402547                 pop     ebp
.text:00402548                 retn
.text:00402549 ; ---------------------------------------------------------------------------
.text:00402549
.text:00402549 loc_402549:                             ; CODE XREF: sub_4024F0+28↑j
.text:00402549                 mov     edx, [ebp+arg_4]
.text:0040254C                 mov     eax, [edx]
.text:0040254E                 mov     [ebx+edi*4], eax
.text:00402551                 pop     edi
.text:00402552                 pop     esi
.text:00402553                 pop     ebp
.text:00402554                 retn
.text:00402554 sub_4024F0      endp
.text:00402554
.text:00402555 ; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402564 ; [00000006 BYTES: COLLAPSED FUNCTION std::exception::what(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040256A ; [00000006 BYTES: COLLAPSED FUNCTION std::exception::exception(std::exception const &). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402570 ; [000000A1 BYTES: COLLAPSED FUNCTION __onexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402611 ; [00000017 BYTES: COLLAPSED FUNCTION _atexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402628 ; [00000006 BYTES: COLLAPSED FUNCTION operator delete(void *). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040262E ; [0000004C BYTES: COLLAPSED FUNCTION type_info::`vector deleting destructor'(uint). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040267A ; [0000004B BYTES: COLLAPSED FUNCTION _pre_cpp_init. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004026C5 ; [00000189 BYTES: COLLAPSED FUNCTION ___tmainCRTStartup. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040284E ; [000000BA BYTES: COLLAPSED FUNCTION _pre_c_init. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402908 ; [0000000A BYTES: COLLAPSED FUNCTION start. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402912 ; [00000106 BYTES: COLLAPSED FUNCTION ___report_gsfailure. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402A18 ; [00000006 BYTES: COLLAPSED FUNCTION _unlock. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402A1E ; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402A24 ; [00000006 BYTES: COLLAPSED FUNCTION _lock. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402A2A                 align 10h
.text:00402A30 ; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402A75 ; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402A89 ; [00000025 BYTES: COLLAPSED FUNCTION SEH_402CB0. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402AAE ; [0000005E BYTES: COLLAPSED FUNCTION __ArrayUnwind(void *,uint,int,void (*)(void *)). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402B0C ; [00000063 BYTES: COLLAPSED FUNCTION `eh vector destructor iterator'(void *,uint,int,void (*)(void *)). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402B6F ; [00000042 BYTES: COLLAPSED FUNCTION __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402BB1
.text:00402BB1 ; =============== S U B R O U T I N E =======================================
.text:00402BB1
.text:00402BB1
.text:00402BB1 sub_402BB1      proc near               ; DATA XREF: .rdata:00403128↓o
.text:00402BB1                 push    offset ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; lpTopLevelExceptionFilter
.text:00402BB6                 call    ds:SetUnhandledExceptionFilter
.text:00402BBC                 xor     eax, eax
.text:00402BBE                 retn
.text:00402BBE sub_402BB1      endp
.text:00402BBE
.text:00402BBE ; ---------------------------------------------------------------------------
.text:00402BBF                 align 10h
.text:00402BC0 ; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402BC6
.text:00402BC6 ; =============== S U B R O U T I N E =======================================
.text:00402BC6
.text:00402BC6
.text:00402BC6 sub_402BC6      proc near               ; CODE XREF: _pre_c_init+81↑p
.text:00402BC6                 mov     edi, edi
.text:00402BC8                 push    esi
.text:00402BC9                 mov     eax, offset unk_403330
.text:00402BCE                 mov     esi, offset unk_403330
.text:00402BD3                 push    edi
.text:00402BD4                 mov     edi, eax
.text:00402BD6                 cmp     eax, esi
.text:00402BD8                 jnb     short loc_402BE9
.text:00402BDA
.text:00402BDA loc_402BDA:                             ; CODE XREF: sub_402BC6+21↓j
.text:00402BDA                 mov     eax, [edi]
.text:00402BDC                 test    eax, eax
.text:00402BDE                 jz      short loc_402BE2
.text:00402BE0                 call    eax
.text:00402BE2
.text:00402BE2 loc_402BE2:                             ; CODE XREF: sub_402BC6+18↑j
.text:00402BE2                 add     edi, 4
.text:00402BE5                 cmp     edi, esi
.text:00402BE7                 jb      short loc_402BDA
.text:00402BE9
.text:00402BE9 loc_402BE9:                             ; CODE XREF: sub_402BC6+12↑j
.text:00402BE9                 pop     edi
.text:00402BEA                 pop     esi
.text:00402BEB                 retn
.text:00402BEB sub_402BC6      endp
.text:00402BEB
.text:00402BEC
.text:00402BEC ; =============== S U B R O U T I N E =======================================
.text:00402BEC
.text:00402BEC
.text:00402BEC ; void __cdecl sub_402BEC()
.text:00402BEC sub_402BEC      proc near               ; DATA XREF: _pre_cpp_init↑o
.text:00402BEC                 mov     edi, edi
.text:00402BEE                 push    esi
.text:00402BEF                 mov     eax, offset unk_403338
.text:00402BF4                 mov     esi, offset unk_403338
.text:00402BF9                 push    edi
.text:00402BFA                 mov     edi, eax
.text:00402BFC                 cmp     eax, esi
.text:00402BFE                 jnb     short loc_402C0F
.text:00402C00
.text:00402C00 loc_402C00:                             ; CODE XREF: sub_402BEC+21↓j
.text:00402C00                 mov     eax, [edi]
.text:00402C02                 test    eax, eax
.text:00402C04                 jz      short loc_402C08
.text:00402C06                 call    eax
.text:00402C08
.text:00402C08 loc_402C08:                             ; CODE XREF: sub_402BEC+18↑j
.text:00402C08                 add     edi, 4
.text:00402C0B                 cmp     edi, esi
.text:00402C0D                 jb      short loc_402C00
.text:00402C0F
.text:00402C0F loc_402C0F:                             ; CODE XREF: sub_402BEC+12↑j
.text:00402C0F                 pop     edi
.text:00402C10                 pop     esi
.text:00402C11                 retn
.text:00402C11 sub_402BEC      endp
.text:00402C11
.text:00402C12 ; [00000006 BYTES: COLLAPSED FUNCTION _XcptFilter. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402C18                 align 10h
.text:00402C20 ; [00000035 BYTES: COLLAPSED FUNCTION __ValidateImageBase. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402C55                 align 10h
.text:00402C60 ; [00000044 BYTES: COLLAPSED FUNCTION __FindPESection. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402CA4                 align 10h
.text:00402CB0 ; [000000BC BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402D6C ; [00000006 BYTES: COLLAPSED FUNCTION _initterm. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402D72 ; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402D78 ; [00000028 BYTES: COLLAPSED FUNCTION __setdefaultprecision. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402DA0
.text:00402DA0 ; =============== S U B R O U T I N E =======================================
.text:00402DA0
.text:00402DA0
.text:00402DA0 sub_402DA0      proc near               ; CODE XREF: _pre_c_init+86↑p
.text:00402DA0                                         ; DATA XREF: _pre_c_init+94↑o
.text:00402DA0                 xor     eax, eax
.text:00402DA2                 retn
.text:00402DA2 sub_402DA0      endp
.text:00402DA2
.text:00402DA3 ; [0000009B BYTES: COLLAPSED FUNCTION ___security_init_cookie. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402E3E ; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402E44 ; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402E4A ; [00000006 BYTES: COLLAPSED FUNCTION terminate(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402E50 ; [00000006 BYTES: COLLAPSED FUNCTION type_info::_type_info_dtor_internal_method(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402E56 ; [00000006 BYTES: COLLAPSED FUNCTION _invoke_watson. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402E5C ; [00000006 BYTES: COLLAPSED FUNCTION _controlfp_s. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402E62 ; [00000006 BYTES: COLLAPSED FUNCTION __CxxFrameHandler3. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402E68 ; [00000006 BYTES: COLLAPSED FUNCTION _CxxThrowException. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402E6E                 align 10h
.text:00402E70 ; START OF FUNCTION CHUNK FOR sub_401500
.text:00402E70
.text:00402E70 loc_402E70:                             ; DATA XREF: .rdata:stru_403430↓o
.text:00402E70 ; __unwind { // SEH_401500
.text:00402E70 ;   cleanup() // owned by 401526
.text:00402E70                 mov     eax, [ebp+arg_0]
.text:00402E73                 jmp     loc_4015F0
.text:00402E78 ; ---------------------------------------------------------------------------
.text:00402E78
.text:00402E78 SEH_401500:                             ; DATA XREF: sub_401500+5↑o
.text:00402E78                                         ; .rdata:00403324↓o
.text:00402E78                 mov     edx, [esp-4+arg_4]
.text:00402E7C                 lea     eax, [edx+0Ch]
.text:00402E7F                 mov     ecx, [edx-8]
.text:00402E82                 xor     ecx, eax
.text:00402E84                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00402E89                 mov     eax, offset stru_403438
.text:00402E8E                 jmp     __CxxFrameHandler3
.text:00402E8E ; } // starts at 402E70
.text:00402E8E ; END OF FUNCTION CHUNK FOR sub_401500
.text:00402E8E ; ---------------------------------------------------------------------------
.text:00402E93                 align 10h
.text:00402EA0 ; START OF FUNCTION CHUNK FOR sub_401670
.text:00402EA0
.text:00402EA0 loc_402EA0:                             ; DATA XREF: .rdata:stru_40345C↓o
.text:00402EA0 ; __unwind { // SEH_401670
.text:00402EA0                 lea     eax, [ebp+var_30]
.text:00402EA3                 jmp     loc_4015F0
.text:00402EA8 ; ---------------------------------------------------------------------------
.text:00402EA8
.text:00402EA8 loc_402EA8:                             ; DATA XREF: .rdata:00403464↓o
.text:00402EA8                 lea     eax, [ebp+var_30]
.text:00402EAB                 push    eax
.text:00402EAC                 call    sub_401500
.text:00402EB1                 retn
.text:00402EB2 ; ---------------------------------------------------------------------------
.text:00402EB2
.text:00402EB2 loc_402EB2:                             ; DATA XREF: .rdata:0040347C↓o
.text:00402EB2 ;   cleanup() // owned by 401709
.text:00402EB2 ;   cleanup() // owned by 40173C
.text:00402EB2 ;   cleanup() // owned by 401753
.text:00402EB2 ;   cleanup() // owned by 4017D9
.text:00402EB2 ;   cleanup() // owned by 4017F3
.text:00402EB2 ;   cleanup() // owned by 4018A8
.text:00402EB2                 lea     eax, [ebp+var_30]
.text:00402EB5                 jmp     loc_4015F0
.text:00402EBA ; ---------------------------------------------------------------------------
.text:00402EBA
.text:00402EBA SEH_401670:                             ; DATA XREF: sub_401670+5↑o
.text:00402EBA                                         ; .rdata:00403328↓o
.text:00402EBA                 mov     edx, [esp-4+arg_4]
.text:00402EBE                 lea     eax, [edx+0Ch]
.text:00402EC1                 mov     ecx, [edx-34h]
.text:00402EC4                 xor     ecx, eax
.text:00402EC6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00402ECB                 mov     eax, offset stru_4034A8
.text:00402ED0                 jmp     __CxxFrameHandler3
.text:00402ED0 ; } // starts at 402EA0
.text:00402ED0 ; END OF FUNCTION CHUNK FOR sub_401670
.text:00402ED0 ; ---------------------------------------------------------------------------
.text:00402ED5                 align 10h
.text:00402EE0
.text:00402EE0 ; =============== S U B R O U T I N E =======================================
.text:00402EE0
.text:00402EE0
.text:00402EE0 sub_402EE0      proc near               ; DATA XREF: .rdata:00403114↓o
.text:00402EE0                 push    offset sub_402F40 ; void (__cdecl *)()
.text:00402EE5                 call    _atexit
.text:00402EEA                 pop     ecx
.text:00402EEB                 retn
.text:00402EEB sub_402EE0      endp
.text:00402EEB
.text:00402EEB ; ---------------------------------------------------------------------------
.text:00402EEC                 align 10h
.text:00402EF0
.text:00402EF0 ; =============== S U B R O U T I N E =======================================
.text:00402EF0
.text:00402EF0
.text:00402EF0 sub_402EF0      proc near               ; DATA XREF: .rdata:00403118↓o
.text:00402EF0                 push    offset sub_402F00 ; void (__cdecl *)()
.text:00402EF5                 call    _atexit
.text:00402EFA                 pop     ecx
.text:00402EFB                 retn
.text:00402EFB sub_402EF0      endp
.text:00402EFB
.text:00402EFB ; ---------------------------------------------------------------------------
.text:00402EFC                 align 10h
.text:00402F00
.text:00402F00 ; =============== S U B R O U T I N E =======================================
.text:00402F00
.text:00402F00
.text:00402F00 ; void __cdecl sub_402F00()
.text:00402F00 sub_402F00      proc near               ; DATA XREF: sub_402EF0↑o
.text:00402F00                 mov     eax, dword_406314
.text:00402F05                 test    eax, eax
.text:00402F07                 jz      short loc_402F13
.text:00402F09                 push    eax
.text:00402F0A                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00402F10                 add     esp, 4
.text:00402F13
.text:00402F13 loc_402F13:                             ; CODE XREF: sub_402F00+7↑j
.text:00402F13                 mov     dword_406314, 0
.text:00402F1D                 mov     dword_406318, 0
.text:00402F27                 mov     dword_40631C, 0
.text:00402F31                 retn
.text:00402F31 sub_402F00      endp
.text:00402F31
.text:00402F31 ; ---------------------------------------------------------------------------
.text:00402F32                 align 10h
.text:00402F40
.text:00402F40 ; =============== S U B R O U T I N E =======================================
.text:00402F40
.text:00402F40
.text:00402F40 ; void __cdecl sub_402F40()
.text:00402F40 sub_402F40      proc near               ; DATA XREF: sub_402EE0↑o
.text:00402F40                 mov     eax, Dst
.text:00402F45                 test    eax, eax
.text:00402F47                 jz      short loc_402F53
.text:00402F49                 push    eax
.text:00402F4A                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00402F50                 add     esp, 4
.text:00402F53
.text:00402F53 loc_402F53:                             ; CODE XREF: sub_402F40+7↑j
.text:00402F53                 mov     Dst, 0
.text:00402F5D                 mov     Src, 0
.text:00402F67                 mov     dword_40630C, 0
.text:00402F71                 retn
.text:00402F71 sub_402F40      endp
.text:00402F71
.text:00402F71 ; ---------------------------------------------------------------------------
.text:00402F72                 align 100h
.text:00402F72 _text           ends
.text:00402F72