.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000
.text:00401000 sub_401000      proc near               ; DATA XREF: .rdata:00406514↓o
.text:00401000                 mov     dword ptr [ecx], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:00401006                 jmp     ds:??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text:00401006 sub_401000      endp
.text:00401006
.text:00401006 ; ---------------------------------------------------------------------------
.text:0040100C                 align 10h
.text:00401010
.text:00401010 ; =============== S U B R O U T I N E =======================================
.text:00401010
.text:00401010 ; Attributes: bp-based frame
.text:00401010
.text:00401010 sub_401010      proc near               ; DATA XREF: .rdata:const std::bad_alloc::`vftable'↓o
.text:00401010
.text:00401010 arg_0           = byte ptr  8
.text:00401010
.text:00401010                 push    ebp
.text:00401011                 mov     ebp, esp
.text:00401013                 push    esi
.text:00401014                 mov     esi, ecx
.text:00401016                 mov     dword ptr [esi], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:0040101C                 call    ds:??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text:00401022                 test    [ebp+arg_0], 1
.text:00401026                 jz      short loc_401032
.text:00401028                 push    esi
.text:00401029                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040102F                 add     esp, 4
.text:00401032
.text:00401032 loc_401032:                             ; CODE XREF: sub_401010+16↑j
.text:00401032                 mov     eax, esi
.text:00401034                 pop     esi
.text:00401035                 pop     ebp
.text:00401036                 retn    4
.text:00401036 sub_401010      endp
.text:00401036
.text:00401036 ; ---------------------------------------------------------------------------
.text:00401039                 align 10h
.text:00401040 ; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401041                 align 10h
.text:00401050
.text:00401050 ; =============== S U B R O U T I N E =======================================
.text:00401050
.text:00401050
.text:00401050 sub_401050      proc near               ; CODE XREF: sub_404A60:loc_404AAF↓p
.text:00401050                                         ; sub_404A60:loc_404B51↓p ...
.text:00401050                 push    esi
.text:00401051                 mov     esi, eax
.text:00401053                 push    edi
.text:00401054                 cmp     esi, 4
.text:00401057                 jb      short loc_401074
.text:00401059                 lea     esp, [esp+0]
.text:00401060
.text:00401060 loc_401060:                             ; CODE XREF: sub_401050+22↓j
.text:00401060                 mov     eax, [edx]
.text:00401062                 cmp     eax, [ecx]
.text:00401064                 jnz     short loc_401078
.text:00401066                 sub     esi, 4
.text:00401069                 add     ecx, 4
.text:0040106C                 add     edx, 4
.text:0040106F                 cmp     esi, 4
.text:00401072                 jnb     short loc_401060
.text:00401074
.text:00401074 loc_401074:                             ; CODE XREF: sub_401050+7↑j
.text:00401074                 test    esi, esi
.text:00401076                 jz      short loc_4010BC
.text:00401078
.text:00401078 loc_401078:                             ; CODE XREF: sub_401050+14↑j
.text:00401078                 movzx   eax, byte ptr [edx]
.text:0040107B                 movzx   edi, byte ptr [ecx]
.text:0040107E                 sub     eax, edi
.text:00401080                 jnz     short loc_4010B3
.text:00401082                 cmp     esi, 1
.text:00401085                 jbe     short loc_4010BC
.text:00401087                 movzx   eax, byte ptr [edx+1]
.text:0040108B                 movzx   edi, byte ptr [ecx+1]
.text:0040108F                 sub     eax, edi
.text:00401091                 jnz     short loc_4010B3
.text:00401093                 cmp     esi, 2
.text:00401096                 jbe     short loc_4010BC
.text:00401098                 movzx   eax, byte ptr [edx+2]
.text:0040109C                 movzx   edi, byte ptr [ecx+2]
.text:004010A0                 sub     eax, edi
.text:004010A2                 jnz     short loc_4010B3
.text:004010A4                 cmp     esi, 3
.text:004010A7                 jbe     short loc_4010BC
.text:004010A9                 movzx   eax, byte ptr [edx+3]
.text:004010AD                 movzx   ecx, byte ptr [ecx+3]
.text:004010B1                 sub     eax, ecx
.text:004010B3
.text:004010B3 loc_4010B3:                             ; CODE XREF: sub_401050+30↑j
.text:004010B3                                         ; sub_401050+41↑j ...
.text:004010B3                 sar     eax, 1Fh
.text:004010B6                 pop     edi
.text:004010B7                 or      eax, 1
.text:004010BA                 pop     esi
.text:004010BB                 retn
.text:004010BC ; ---------------------------------------------------------------------------
.text:004010BC
.text:004010BC loc_4010BC:                             ; CODE XREF: sub_401050+26↑j
.text:004010BC                                         ; sub_401050+35↑j ...
.text:004010BC                 pop     edi
.text:004010BD                 xor     eax, eax
.text:004010BF                 pop     esi
.text:004010C0                 retn
.text:004010C0 sub_401050      endp
.text:004010C0
.text:004010C0 ; ---------------------------------------------------------------------------
.text:004010C1                 align 10h
.text:004010D0
.text:004010D0 ; =============== S U B R O U T I N E =======================================
.text:004010D0
.text:004010D0 ; Attributes: bp-based frame
.text:004010D0
.text:004010D0 sub_4010D0      proc near               ; CODE XREF: sub_401340+37A↓p
.text:004010D0
.text:004010D0 var_1C          = dword ptr -1Ch
.text:004010D0 var_18          = dword ptr -18h
.text:004010D0 var_14          = dword ptr -14h
.text:004010D0 var_10          = dword ptr -10h
.text:004010D0 var_C           = dword ptr -0Ch
.text:004010D0 var_4           = dword ptr -4
.text:004010D0 arg_0           = dword ptr  8
.text:004010D0 arg_4           = dword ptr  0Ch
.text:004010D0
.text:004010D0 ; FUNCTION CHUNK AT .text:00402130 SIZE 00000025 BYTES
.text:004010D0 ; FUNCTION CHUNK AT .text:00405C40 SIZE 00000034 BYTES
.text:004010D0
.text:004010D0 ; __unwind { // SEH_4010D0
.text:004010D0                 push    ebp
.text:004010D1                 mov     ebp, esp
.text:004010D3                 push    0FFFFFFFFh
.text:004010D5                 push    offset SEH_4010D0
.text:004010DA                 mov     eax, large fs:0
.text:004010E0                 push    eax
.text:004010E1                 sub     esp, 10h
.text:004010E4                 push    ebx
.text:004010E5                 push    esi
.text:004010E6                 push    edi
.text:004010E7                 mov     eax, ___security_cookie
.text:004010EC                 xor     eax, ebp
.text:004010EE                 push    eax
.text:004010EF                 lea     eax, [ebp+var_C]
.text:004010F2                 mov     large fs:0, eax
.text:004010F8                 mov     ebx, [ebp+arg_0]
.text:004010FB                 xor     esi, esi
.text:004010FD                 mov     [ebp+var_1C], esi
.text:00401100                 mov     [ebx], esi
.text:00401102                 mov     [ebx+4], esi
.text:00401105                 mov     [ebx+8], esi
.text:00401108 ;   try {
.text:00401108                 mov     [ebp+var_4], esi
.text:0040110B                 mov     [ebp+var_1C], 1
.text:00401112                 mov     [ebp+var_14], esi
.text:00401115                 jmp     short loc_401123
.text:00401117 ; ---------------------------------------------------------------------------
.text:00401117                 jmp     short loc_401120
.text:00401117 ; ---------------------------------------------------------------------------
.text:00401119                 align 10h
.text:00401120
.text:00401120 loc_401120:                             ; CODE XREF: sub_4010D0+47↑j
.text:00401120                                         ; sub_4010D0+20D↓j
.text:00401120                 mov     esi, [ebp+var_14]
.text:00401123
.text:00401123 loc_401123:                             ; CODE XREF: sub_4010D0+45↑j
.text:00401123                 mov     eax, dword_6F8310
.text:00401128                 mov     ecx, [ebp+arg_4]
.text:0040112B                 mov     edx, [eax+ecx*8]
.text:0040112E                 add     edx, ds:dword_40617C[esi]
.text:00401134                 mov     ecx, [eax+ecx*8+4]
.text:00401138                 add     ecx, ds:dword_406194[esi]
.text:0040113E                 mov     esi, dword_6F8314
.text:00401144                 sub     esi, eax
.text:00401146                 sar     esi, 3
.text:00401149                 mov     edi, esi
.text:0040114B                 mov     [ebp+var_18], ecx
.text:0040114E                 mov     [ebp+var_10], edx
.text:00401151                 mov     ecx, eax
.text:00401153                 test    edi, edi
.text:00401155                 jle     short loc_401191
.text:00401157
.text:00401157 loc_401157:                             ; CODE XREF: sub_4010D0+B4↓j
.text:00401157                 mov     ebx, [ebp+var_10]
.text:0040115A                 mov     eax, edi
.text:0040115C                 cdq
.text:0040115D                 sub     eax, edx
.text:0040115F                 sar     eax, 1
.text:00401161                 mov     edx, [ecx+eax*8]
.text:00401164                 cmp     ebx, edx
.text:00401166                 jg      short loc_401173
.text:00401168                 jl      short loc_401180
.text:0040116A                 mov     edx, [ebp+var_18]
.text:0040116D                 cmp     [ecx+eax*8+4], edx
.text:00401171                 jge     short loc_401180
.text:00401173
.text:00401173 loc_401173:                             ; CODE XREF: sub_4010D0+96↑j
.text:00401173                 or      edx, 0FFFFFFFFh
.text:00401176                 sub     edx, eax
.text:00401178                 lea     ecx, [ecx+eax*8+8]
.text:0040117C                 add     edi, edx
.text:0040117E                 jmp     short loc_401182
.text:00401180 ; ---------------------------------------------------------------------------
.text:00401180
.text:00401180 loc_401180:                             ; CODE XREF: sub_4010D0+98↑j
.text:00401180                                         ; sub_4010D0+A1↑j
.text:00401180                 mov     edi, eax
.text:00401182
.text:00401182 loc_401182:                             ; CODE XREF: sub_4010D0+AE↑j
.text:00401182                 test    edi, edi
.text:00401184                 jg      short loc_401157
.text:00401186                 mov     ebx, [ebp+arg_0]
.text:00401189                 mov     eax, dword_6F8310
.text:0040118E                 mov     edx, [ebp+var_10]
.text:00401191
.text:00401191 loc_401191:                             ; CODE XREF: sub_4010D0+85↑j
.text:00401191                 sub     ecx, eax
.text:00401193                 sar     ecx, 3
.text:00401196                 mov     edi, ecx
.text:00401198                 mov     [ebp+var_10], edi
.text:0040119B                 cmp     edi, esi
.text:0040119D                 jge     short loc_401207
.text:0040119F                 cmp     [eax+edi*8], edx
.text:004011A2                 jnz     short loc_401207
.text:004011A4                 mov     ecx, [ebp+var_18]
.text:004011A7                 cmp     [eax+edi*8+4], ecx
.text:004011AB                 jnz     short loc_401207
.text:004011AD                 mov     eax, [ebx+4]
.text:004011B0                 lea     edx, [ebp+var_10]
.text:004011B3                 cmp     edx, eax
.text:004011B5                 jnb     short loc_4011E9
.text:004011B7                 mov     ecx, [ebx]
.text:004011B9                 cmp     ecx, edx
.text:004011BB                 ja      short loc_4011E9
.text:004011BD                 mov     esi, edx
.text:004011BF                 sub     esi, ecx
.text:004011C1                 sar     esi, 2
.text:004011C4                 cmp     eax, [ebx+8]
.text:004011C7                 jnz     short loc_4011D0
.text:004011C9                 mov     eax, ebx
.text:004011CB                 call    sub_4023A0
.text:004011D0
.text:004011D0 loc_4011D0:                             ; CODE XREF: sub_4010D0+F7↑j
.text:004011D0                 mov     eax, [ebx]
.text:004011D2                 lea     ecx, [eax+esi*4]
.text:004011D5                 mov     eax, [ebx+4]
.text:004011D8                 test    eax, eax
.text:004011DA                 jz      loc_4012CD
.text:004011E0                 mov     ecx, [ecx]
.text:004011E2                 mov     [eax], ecx
.text:004011E4                 jmp     loc_4012CD
.text:004011E9 ; ---------------------------------------------------------------------------
.text:004011E9
.text:004011E9 loc_4011E9:                             ; CODE XREF: sub_4010D0+E5↑j
.text:004011E9                                         ; sub_4010D0+EB↑j
.text:004011E9                 cmp     eax, [ebx+8]
.text:004011EC                 jnz     short loc_4011F5
.text:004011EE                 mov     eax, ebx
.text:004011F0                 call    sub_4023A0
.text:004011F5
.text:004011F5 loc_4011F5:                             ; CODE XREF: sub_4010D0+11C↑j
.text:004011F5                 mov     eax, [ebx+4]
.text:004011F8                 test    eax, eax
.text:004011FA                 jz      loc_4012CD
.text:00401200                 mov     [eax], edi
.text:00401202                 jmp     loc_4012CD
.text:00401207 ; ---------------------------------------------------------------------------
.text:00401207
.text:00401207 loc_401207:                             ; CODE XREF: sub_4010D0+CD↑j
.text:00401207                                         ; sub_4010D0+D2↑j ...
.text:00401207                 mov     eax, [ebx+4]
.text:0040120A                 lea     edx, [ebp+var_10]
.text:0040120D                 mov     [ebp+var_10], 0FFFFFFFFh
.text:00401214                 cmp     edx, eax
.text:00401216                 jnb     short loc_40127E
.text:00401218                 mov     edx, [ebx]
.text:0040121A                 lea     ecx, [ebp+var_10]
.text:0040121D                 cmp     edx, ecx
.text:0040121F                 ja      short loc_40127E
.text:00401221                 mov     edi, ecx
.text:00401223                 mov     ecx, [ebx+8]
.text:00401226                 sub     edi, edx
.text:00401228                 sar     edi, 2
.text:0040122B                 cmp     eax, ecx
.text:0040122D                 jnz     short loc_40126C
.text:0040122F                 sub     eax, edx
.text:00401231                 sar     eax, 2
.text:00401234                 cmp     eax, 3FFFFFFEh
.text:00401239                 ja      loc_4012F7
.text:0040123F                 sub     ecx, edx
.text:00401241                 inc     eax
.text:00401242                 sar     ecx, 2
.text:00401245                 cmp     eax, ecx
.text:00401247                 jbe     short loc_40126C
.text:00401249                 mov     edx, ecx
.text:0040124B                 shr     edx, 1
.text:0040124D                 mov     esi, 3FFFFFFFh
.text:00401252                 sub     esi, edx
.text:00401254                 cmp     esi, ecx
.text:00401256                 jnb     short loc_40125C
.text:00401258                 xor     ecx, ecx
.text:0040125A                 jmp     short loc_40125E
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125C
.text:0040125C loc_40125C:                             ; CODE XREF: sub_4010D0+186↑j
.text:0040125C                 add     ecx, edx
.text:0040125E
.text:0040125E loc_40125E:                             ; CODE XREF: sub_4010D0+18A↑j
.text:0040125E                 cmp     ecx, eax
.text:00401260                 jnb     short loc_401264
.text:00401262                 mov     ecx, eax
.text:00401264
.text:00401264 loc_401264:                             ; CODE XREF: sub_4010D0+190↑j
.text:00401264                 push    ecx
.text:00401265                 mov     esi, ebx
.text:00401267                 call    sub_402790
.text:0040126C
.text:0040126C loc_40126C:                             ; CODE XREF: sub_4010D0+15D↑j
.text:0040126C                                         ; sub_4010D0+177↑j
.text:0040126C                 mov     eax, [ebx+4]
.text:0040126F                 mov     edx, [ebx]
.text:00401271                 lea     ecx, [edx+edi*4]
.text:00401274                 test    eax, eax
.text:00401276                 jz      short loc_4012CD
.text:00401278                 mov     ecx, [ecx]
.text:0040127A                 mov     [eax], ecx
.text:0040127C                 jmp     short loc_4012CD
.text:0040127E ; ---------------------------------------------------------------------------
.text:0040127E
.text:0040127E loc_40127E:                             ; CODE XREF: sub_4010D0+146↑j
.text:0040127E                                         ; sub_4010D0+14F↑j
.text:0040127E                 mov     ecx, [ebx+8]
.text:00401281                 cmp     eax, ecx
.text:00401283                 jnz     short loc_4012C0
.text:00401285                 mov     edx, [ebx]
.text:00401287                 sub     eax, edx
.text:00401289                 sar     eax, 2
.text:0040128C                 cmp     eax, 3FFFFFFEh
.text:00401291                 ja      short loc_4012F7
.text:00401293                 sub     ecx, edx
.text:00401295                 inc     eax
.text:00401296                 sar     ecx, 2
.text:00401299                 cmp     eax, ecx
.text:0040129B                 jbe     short loc_4012C0
.text:0040129D                 mov     edx, ecx
.text:0040129F                 shr     edx, 1
.text:004012A1                 mov     esi, 3FFFFFFFh
.text:004012A6                 sub     esi, edx
.text:004012A8                 cmp     esi, ecx
.text:004012AA                 jnb     short loc_4012B0
.text:004012AC                 xor     ecx, ecx
.text:004012AE                 jmp     short loc_4012B2
.text:004012B0 ; ---------------------------------------------------------------------------
.text:004012B0
.text:004012B0 loc_4012B0:                             ; CODE XREF: sub_4010D0+1DA↑j
.text:004012B0                 add     ecx, edx
.text:004012B2
.text:004012B2 loc_4012B2:                             ; CODE XREF: sub_4010D0+1DE↑j
.text:004012B2                 cmp     ecx, eax
.text:004012B4                 jnb     short loc_4012B8
.text:004012B6                 mov     ecx, eax
.text:004012B8
.text:004012B8 loc_4012B8:                             ; CODE XREF: sub_4010D0+1E4↑j
.text:004012B8                 push    ecx
.text:004012B9                 mov     esi, ebx
.text:004012BB                 call    sub_402790
.text:004012C0
.text:004012C0 loc_4012C0:                             ; CODE XREF: sub_4010D0+1B3↑j
.text:004012C0                                         ; sub_4010D0+1CB↑j
.text:004012C0                 mov     eax, [ebx+4]
.text:004012C3                 test    eax, eax
.text:004012C5                 jz      short loc_4012CD
.text:004012C7                 mov     dword ptr [eax], 0FFFFFFFFh
.text:004012CD
.text:004012CD loc_4012CD:                             ; CODE XREF: sub_4010D0+10A↑j
.text:004012CD                                         ; sub_4010D0+114↑j ...
.text:004012CD                 mov     eax, [ebp+var_14]
.text:004012D0                 add     dword ptr [ebx+4], 4
.text:004012D4                 add     eax, 4
.text:004012D7                 mov     [ebp+var_14], eax
.text:004012DA                 cmp     eax, 18h
.text:004012DD                 jl      loc_401120
.text:004012E3                 mov     eax, ebx
.text:004012E5                 mov     ecx, [ebp+var_C]
.text:004012E8                 mov     large fs:0, ecx
.text:004012EF                 pop     ecx
.text:004012F0                 pop     edi
.text:004012F1                 pop     esi
.text:004012F2                 pop     ebx
.text:004012F3                 mov     esp, ebp
.text:004012F5                 pop     ebp
.text:004012F6                 retn
.text:004012F7 ; ---------------------------------------------------------------------------
.text:004012F7
.text:004012F7 loc_4012F7:                             ; CODE XREF: sub_4010D0+169↑j
.text:004012F7                                         ; sub_4010D0+1C1↑j
.text:004012F7                 push    offset aVectorTTooLong ; "vector<T> too long"
.text:004012FC                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:004012FC ;   } // starts at 401108
.text:004012FC ; } // starts at 4010D0
.text:004012FC sub_4010D0      endp
.text:004012FC
.text:004012FC ; ---------------------------------------------------------------------------
.text:00401302                 align 10h
.text:00401310
.text:00401310 ; =============== S U B R O U T I N E =======================================
.text:00401310
.text:00401310 ; Attributes: bp-based frame
.text:00401310
.text:00401310 sub_401310      proc near               ; CODE XREF: sub_401310+18↓p
.text:00401310                                         ; sub_401340+3EC↓p ...
.text:00401310
.text:00401310 arg_0           = dword ptr  8
.text:00401310
.text:00401310                 push    ebp
.text:00401311                 mov     ebp, esp
.text:00401313                 push    esi
.text:00401314                 mov     esi, [ebp+arg_0]
.text:00401317                 mov     eax, dword_68CC50[esi*4]
.text:0040131E                 cmp     eax, esi
.text:00401320                 jnz     short loc_401327
.text:00401322                 mov     eax, esi
.text:00401324                 pop     esi
.text:00401325                 pop     ebp
.text:00401326                 retn
.text:00401327 ; ---------------------------------------------------------------------------
.text:00401327
.text:00401327 loc_401327:                             ; CODE XREF: sub_401310+10↑j
.text:00401327                 push    eax
.text:00401328                 call    sub_401310
.text:0040132D                 add     esp, 4
.text:00401330                 mov     dword_68CC50[esi*4], eax
.text:00401337                 pop     esi
.text:00401338                 pop     ebp
.text:00401339                 retn
.text:00401339 sub_401310      endp
.text:00401339
.text:00401339 ; ---------------------------------------------------------------------------
.text:0040133A                 align 10h
.text:00401340
.text:00401340 ; =============== S U B R O U T I N E =======================================
.text:00401340
.text:00401340 ; Attributes: bp-based frame
.text:00401340
.text:00401340 sub_401340      proc near               ; CODE XREF: sub_401AB0+346↓p
.text:00401340
.text:00401340 var_6C          = dword ptr -6Ch
.text:00401340 var_68          = dword ptr -68h
.text:00401340 var_64          = dword ptr -64h
.text:00401340 var_60          = dword ptr -60h
.text:00401340 var_5C          = dword ptr -5Ch
.text:00401340 var_58          = dword ptr -58h
.text:00401340 var_54          = dword ptr -54h
.text:00401340 var_50          = dword ptr -50h
.text:00401340 var_4C          = dword ptr -4Ch
.text:00401340 var_48          = dword ptr -48h
.text:00401340 var_38          = dword ptr -38h
.text:00401340 var_34          = dword ptr -34h
.text:00401340 var_2C          = dword ptr -2Ch
.text:00401340 var_20          = dword ptr -20h
.text:00401340 var_1C          = dword ptr -1Ch
.text:00401340 var_18          = dword ptr -18h
.text:00401340 var_10          = dword ptr -10h
.text:00401340 var_C           = dword ptr -0Ch
.text:00401340 var_4           = dword ptr -4
.text:00401340 arg_4           = dword ptr  0Ch
.text:00401340
.text:00401340 ; FUNCTION CHUNK AT .text:00402020 SIZE 00000024 BYTES
.text:00401340 ; FUNCTION CHUNK AT .text:00402130 SIZE 00000025 BYTES
.text:00401340 ; FUNCTION CHUNK AT .text:00405CF0 SIZE 00000045 BYTES
.text:00401340
.text:00401340 ; __unwind { // SEH_401340
.text:00401340                 push    ebp
.text:00401341                 mov     ebp, esp
.text:00401343                 push    0FFFFFFFFh
.text:00401345                 push    offset SEH_401340
.text:0040134A                 mov     eax, large fs:0
.text:00401350                 push    eax
.text:00401351                 sub     esp, 64h
.text:00401354                 mov     eax, ___security_cookie
.text:00401359                 xor     eax, ebp
.text:0040135B                 mov     [ebp+var_10], eax
.text:0040135E                 push    ebx
.text:0040135F                 push    esi
.text:00401360                 push    edi
.text:00401361                 push    eax
.text:00401362                 lea     eax, [ebp+var_C]
.text:00401365                 mov     large fs:0, eax
.text:0040136B                 mov     eax, dword_6F8334
.text:00401370                 mov     ecx, Dst
.text:00401376                 push    eax             ; int
.text:00401377                 push    ecx             ; Dst
.text:00401378                 lea     edx, [ebp+var_68]
.text:0040137B                 push    edx             ; int
.text:0040137C                 call    sub_4021D0
.text:00401381                 mov     eax, dword_6F8314
.text:00401386                 mov     esi, dword_6F8310
.text:0040138C                 cmp     esi, eax
.text:0040138E                 jz      short loc_401397
.text:00401390                 mov     eax, esi
.text:00401392                 mov     dword_6F8314, eax
.text:00401397
.text:00401397 loc_401397:                             ; CODE XREF: sub_401340+4E↑j
.text:00401397                 xor     ecx, ecx
.text:00401399                 mov     [ebp+var_4C], ecx
.text:0040139C                 cmp     dword_54A800, ecx
.text:004013A2                 jle     loc_4014CA
.text:004013A8
.text:004013A8 loc_4013A8:                             ; CODE XREF: sub_401340+184↓j
.text:004013A8                 mov     edi, dword_4DF140[ecx*4]
.text:004013AF                 mov     ebx, dword_4083C0[ecx*4]
.text:004013B6                 lea     ecx, [ebp+var_6C]
.text:004013B9                 mov     [ebp+var_6C], edi
.text:004013BC                 mov     [ebp+var_68], ebx
.text:004013BF                 cmp     ecx, eax
.text:004013C1                 jnb     short loc_40143F
.text:004013C3                 mov     edx, ecx
.text:004013C5                 cmp     esi, edx
.text:004013C7                 ja      short loc_40143F
.text:004013C9                 mov     edi, ecx
.text:004013CB                 sub     edi, esi
.text:004013CD                 sar     edi, 3
.text:004013D0                 cmp     eax, dword_6F8318
.text:004013D6                 jnz     short loc_40142C
.text:004013D8                 mov     ecx, eax
.text:004013DA                 sub     ecx, esi
.text:004013DC                 sar     ecx, 3
.text:004013DF                 cmp     ecx, 1FFFFFFEh
.text:004013E5                 ja      loc_40154A
.text:004013EB                 mov     edx, dword_6F8318
.text:004013F1                 sub     edx, esi
.text:004013F3                 inc     ecx
.text:004013F4                 sar     edx, 3
.text:004013F7                 cmp     ecx, edx
.text:004013F9                 jbe     short loc_40142C
.text:004013FB                 mov     eax, edx
.text:004013FD                 shr     eax, 1
.text:004013FF                 mov     esi, 1FFFFFFFh
.text:00401404                 sub     esi, eax
.text:00401406                 cmp     esi, edx
.text:00401408                 jnb     short loc_40140E
.text:0040140A                 xor     edx, edx
.text:0040140C                 jmp     short loc_401410
.text:0040140E ; ---------------------------------------------------------------------------
.text:0040140E
.text:0040140E loc_40140E:                             ; CODE XREF: sub_401340+C8↑j
.text:0040140E                 add     edx, eax
.text:00401410
.text:00401410 loc_401410:                             ; CODE XREF: sub_401340+CC↑j
.text:00401410                 cmp     edx, ecx
.text:00401412                 jnb     short loc_401416
.text:00401414                 mov     edx, ecx
.text:00401416
.text:00401416 loc_401416:                             ; CODE XREF: sub_401340+D2↑j
.text:00401416                 push    edx
.text:00401417                 mov     ecx, offset dword_6F8310
.text:0040141C                 call    sub_4026C0
.text:00401421                 mov     eax, dword_6F8314
.text:00401426                 mov     esi, dword_6F8310
.text:0040142C
.text:0040142C loc_40142C:                             ; CODE XREF: sub_401340+96↑j
.text:0040142C                                         ; sub_401340+B9↑j
.text:0040142C                 lea     ecx, [esi+edi*8]
.text:0040142F                 test    eax, eax
.text:00401431                 jz      short loc_4014AF
.text:00401433                 mov     edx, [ecx]
.text:00401435                 mov     [eax], edx
.text:00401437                 mov     ecx, [ecx+4]
.text:0040143A                 mov     [eax+4], ecx
.text:0040143D                 jmp     short loc_4014A4
.text:0040143F ; ---------------------------------------------------------------------------
.text:0040143F
.text:0040143F loc_40143F:                             ; CODE XREF: sub_401340+81↑j
.text:0040143F                                         ; sub_401340+87↑j
.text:0040143F                 cmp     eax, dword_6F8318
.text:00401445                 jnz     short loc_40149B
.text:00401447                 mov     ecx, eax
.text:00401449                 sub     ecx, esi
.text:0040144B                 sar     ecx, 3
.text:0040144E                 cmp     ecx, 1FFFFFFEh
.text:00401454                 ja      loc_40154A
.text:0040145A                 mov     edx, dword_6F8318
.text:00401460                 sub     edx, esi
.text:00401462                 inc     ecx
.text:00401463                 sar     edx, 3
.text:00401466                 cmp     ecx, edx
.text:00401468                 jbe     short loc_40149B
.text:0040146A                 mov     eax, edx
.text:0040146C                 shr     eax, 1
.text:0040146E                 mov     esi, 1FFFFFFFh
.text:00401473                 sub     esi, eax
.text:00401475                 cmp     esi, edx
.text:00401477                 jnb     short loc_40147D
.text:00401479                 xor     edx, edx
.text:0040147B                 jmp     short loc_40147F
.text:0040147D ; ---------------------------------------------------------------------------
.text:0040147D
.text:0040147D loc_40147D:                             ; CODE XREF: sub_401340+137↑j
.text:0040147D                 add     edx, eax
.text:0040147F
.text:0040147F loc_40147F:                             ; CODE XREF: sub_401340+13B↑j
.text:0040147F                 cmp     edx, ecx
.text:00401481                 jnb     short loc_401485
.text:00401483                 mov     edx, ecx
.text:00401485
.text:00401485 loc_401485:                             ; CODE XREF: sub_401340+141↑j
.text:00401485                 push    edx
.text:00401486                 mov     ecx, offset dword_6F8310
.text:0040148B                 call    sub_4026C0
.text:00401490                 mov     eax, dword_6F8314
.text:00401495                 mov     esi, dword_6F8310
.text:0040149B
.text:0040149B loc_40149B:                             ; CODE XREF: sub_401340+105↑j
.text:0040149B                                         ; sub_401340+128↑j
.text:0040149B                 test    eax, eax
.text:0040149D                 jz      short loc_4014AF
.text:0040149F                 mov     [eax], edi
.text:004014A1                 mov     [eax+4], ebx
.text:004014A4
.text:004014A4 loc_4014A4:                             ; CODE XREF: sub_401340+FD↑j
.text:004014A4                 mov     eax, dword_6F8314
.text:004014A9                 mov     esi, dword_6F8310
.text:004014AF
.text:004014AF loc_4014AF:                             ; CODE XREF: sub_401340+F1↑j
.text:004014AF                                         ; sub_401340+15D↑j
.text:004014AF                 mov     ecx, [ebp+var_4C]
.text:004014B2                 inc     ecx
.text:004014B3                 add     eax, 8
.text:004014B6                 mov     dword_6F8314, eax
.text:004014BB                 mov     [ebp+var_4C], ecx
.text:004014BE                 cmp     ecx, dword_54A800
.text:004014C4                 jl      loc_4013A8
.text:004014CA
.text:004014CA loc_4014CA:                             ; CODE XREF: sub_401340+62↑j
.text:004014CA                 mov     edx, eax
.text:004014CC                 sub     edx, esi
.text:004014CE                 sar     edx, 3
.text:004014D1                 push    edx
.text:004014D2                 push    eax
.text:004014D3                 push    esi
.text:004014D4                 call    sub_4030C0
.text:004014D9                 mov     edx, dword_6F8310
.text:004014DF                 xor     edi, edi
.text:004014E1                 add     esp, 0Ch
.text:004014E4                 mov     byte_54A806, 0
.text:004014EB                 mov     byte_54A805, 0
.text:004014F2                 mov     byte_54A804, 0
.text:004014F9                 cmp     dword_54A800, edi
.text:004014FF                 jle     short loc_401580
.text:00401501                 mov     esi, dword_6F8314
.text:00401507                 sub     esi, edx
.text:00401509                 sar     esi, 3
.text:0040150C                 mov     [ebp+var_4C], esi
.text:0040150F                 nop
.text:00401510
.text:00401510 loc_401510:                             ; CODE XREF: sub_401340+23E↓j
.text:00401510                 mov     ebx, dword_4DF140[edi*4]
.text:00401517                 mov     ecx, edx
.text:00401519                 test    esi, esi
.text:0040151B                 jle     short loc_401564
.text:0040151D                 lea     ecx, [ecx+0]
.text:00401520
.text:00401520 loc_401520:                             ; CODE XREF: sub_401340+219↓j
.text:00401520                 mov     eax, esi
.text:00401522                 cdq
.text:00401523                 sub     eax, edx
.text:00401525                 sar     eax, 1
.text:00401527                 mov     edx, [ecx+eax*8]
.text:0040152A                 cmp     ebx, edx
.text:0040152C                 jg      short loc_40153D
.text:0040152E                 jl      short loc_401555
.text:00401530                 mov     edx, dword_4083C0[edi*4]
.text:00401537                 cmp     [ecx+eax*8+4], edx
.text:0040153B                 jge     short loc_401555
.text:0040153D
.text:0040153D loc_40153D:                             ; CODE XREF: sub_401340+1EC↑j
.text:0040153D                 or      edx, 0FFFFFFFFh
.text:00401540                 sub     edx, eax
.text:00401542                 lea     ecx, [ecx+eax*8+8]
.text:00401546                 add     esi, edx
.text:00401548                 jmp     short loc_401557
.text:0040154A ; ---------------------------------------------------------------------------
.text:0040154A
.text:0040154A loc_40154A:                             ; CODE XREF: sub_401340+A5↑j
.text:0040154A                                         ; sub_401340+114↑j
.text:0040154A                 push    offset aVectorTTooLong ; "vector<T> too long"
.text:0040154F                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:00401555
.text:00401555 loc_401555:                             ; CODE XREF: sub_401340+1EE↑j
.text:00401555                                         ; sub_401340+1FB↑j
.text:00401555                 mov     esi, eax
.text:00401557
.text:00401557 loc_401557:                             ; CODE XREF: sub_401340+208↑j
.text:00401557                 test    esi, esi
.text:00401559                 jg      short loc_401520
.text:0040155B                 mov     edx, dword_6F8310
.text:00401561                 mov     esi, [ebp+var_4C]
.text:00401564
.text:00401564 loc_401564:                             ; CODE XREF: sub_401340+1DB↑j
.text:00401564                 sub     ecx, edx
.text:00401566                 sar     ecx, 3
.text:00401569                 mov     dword_54A808[edi*4], ecx
.text:00401570                 mov     dword_621588[ecx*4], edi
.text:00401577                 inc     edi
.text:00401578                 cmp     edi, dword_54A800
.text:0040157E                 jl      short loc_401510
.text:00401580
.text:00401580 loc_401580:                             ; CODE XREF: sub_401340+1BF↑j
.text:00401580                 xor     edi, edi
.text:00401582                 cmp     dword_54A800, edi
.text:00401588                 jle     loc_401692
.text:0040158E                 mov     ecx, dword_6F8324
.text:00401594                 sub     ecx, dword_6F8320
.text:0040159A                 sar     ecx, 3
.text:0040159D                 mov     [ebp+var_4C], ecx
.text:004015A0                 jmp     short loc_4015A5
.text:004015A2 ; ---------------------------------------------------------------------------
.text:004015A2
.text:004015A2 loc_4015A2:                             ; CODE XREF: sub_401340+34C↓j
.text:004015A2                 mov     ecx, [ebp+var_4C]
.text:004015A5
.text:004015A5 loc_4015A5:                             ; CODE XREF: sub_401340+260↑j
.text:004015A5                 xor     eax, eax
.text:004015A7                 mov     dword_68CC50[edi*4], edi
.text:004015AE                 mov     dword_473A80[edi*4], eax
.text:004015B5                 mov     dword_5B5EC8[edi*4], eax
.text:004015BC                 mov     esi, [edx+edi*8+4]
.text:004015C0                 mov     ebx, [edx+edi*8]
.text:004015C3                 mov     [ebp+var_50], esi
.text:004015C6                 mov     esi, dword_6F8320
.text:004015CC                 cmp     ecx, eax
.text:004015CE                 jle     short loc_401602
.text:004015D0
.text:004015D0 loc_4015D0:                             ; CODE XREF: sub_401340+2BA↓j
.text:004015D0                 mov     eax, ecx
.text:004015D2                 cdq
.text:004015D3                 sub     eax, edx
.text:004015D5                 sar     eax, 1
.text:004015D7                 mov     edx, [esi+eax*8]
.text:004015DA                 cmp     ebx, edx
.text:004015DC                 jg      short loc_4015E9
.text:004015DE                 jl      short loc_4015F6
.text:004015E0                 mov     edx, [esi+eax*8+4]
.text:004015E4                 cmp     edx, [ebp+var_50]
.text:004015E7                 jge     short loc_4015F6
.text:004015E9
.text:004015E9 loc_4015E9:                             ; CODE XREF: sub_401340+29C↑j
.text:004015E9                 or      edx, 0FFFFFFFFh
.text:004015EC                 sub     edx, eax
.text:004015EE                 lea     esi, [esi+eax*8+8]
.text:004015F2                 add     ecx, edx
.text:004015F4                 jmp     short loc_4015F8
.text:004015F6 ; ---------------------------------------------------------------------------
.text:004015F6
.text:004015F6 loc_4015F6:                             ; CODE XREF: sub_401340+29E↑j
.text:004015F6                                         ; sub_401340+2A7↑j
.text:004015F6                 mov     ecx, eax
.text:004015F8
.text:004015F8 loc_4015F8:                             ; CODE XREF: sub_401340+2B4↑j
.text:004015F8                 test    ecx, ecx
.text:004015FA                 jg      short loc_4015D0
.text:004015FC                 mov     edx, dword_6F8310
.text:00401602
.text:00401602 loc_401602:                             ; CODE XREF: sub_401340+28E↑j
.text:00401602                 cmp     esi, dword_6F8324
.text:00401608                 jz      short loc_401627
.text:0040160A                 mov     eax, [esi]
.text:0040160C                 cmp     eax, ebx
.text:0040160E                 jg      short loc_401627
.text:00401610                 jl      short loc_40161A
.text:00401612                 mov     ecx, [ebp+var_50]
.text:00401615                 cmp     ecx, [esi+4]
.text:00401618                 jl      short loc_40162A
.text:0040161A
.text:0040161A loc_40161A:                             ; CODE XREF: sub_401340+2D0↑j
.text:0040161A                 mov     dword_5B5EC8[edi*4], 1
.text:00401625                 jmp     short loc_401685
.text:00401627 ; ---------------------------------------------------------------------------
.text:00401627
.text:00401627 loc_401627:                             ; CODE XREF: sub_401340+2C8↑j
.text:00401627                                         ; sub_401340+2CE↑j
.text:00401627                 mov     ecx, [ebp+var_50]
.text:0040162A
.text:0040162A loc_40162A:                             ; CODE XREF: sub_401340+2D8↑j
.text:0040162A                 cmp     ecx, 1
.text:0040162D                 jnz     short loc_401633
.text:0040162F                 mov     eax, ecx
.text:00401631                 jmp     short loc_40167E
.text:00401633 ; ---------------------------------------------------------------------------
.text:00401633
.text:00401633 loc_401633:                             ; CODE XREF: sub_401340+2ED↑j
.text:00401633                 cmp     ebx, 1
.text:00401636                 jnz     short loc_40163D
.text:00401638                 lea     eax, [ebx+1]
.text:0040163B                 jmp     short loc_40167E
.text:0040163D ; ---------------------------------------------------------------------------
.text:0040163D
.text:0040163D loc_40163D:                             ; CODE XREF: sub_401340+2F6↑j
.text:0040163D                 mov     eax, dword_68CC48
.text:00401642                 lea     esi, [eax+eax-1]
.text:00401646                 cmp     ebx, esi
.text:00401648                 jnz     short loc_401651
.text:0040164A                 mov     eax, 4
.text:0040164F                 jmp     short loc_40167E
.text:00401651 ; ---------------------------------------------------------------------------
.text:00401651
.text:00401651 loc_401651:                             ; CODE XREF: sub_401340+308↑j
.text:00401651                 cmp     ecx, esi
.text:00401653                 jnz     short loc_40165C
.text:00401655                 mov     eax, 8
.text:0040165A                 jmp     short loc_40167E
.text:0040165C ; ---------------------------------------------------------------------------
.text:0040165C
.text:0040165C loc_40165C:                             ; CODE XREF: sub_401340+313↑j
.text:0040165C                 sub     ebx, ecx
.text:0040165E                 lea     ecx, [eax-1]
.text:00401661                 cmp     ebx, ecx
.text:00401663                 jnz     short loc_40166C
.text:00401665                 mov     eax, 10h
.text:0040166A                 jmp     short loc_40167E
.text:0040166C ; ---------------------------------------------------------------------------
.text:0040166C
.text:0040166C loc_40166C:                             ; CODE XREF: sub_401340+323↑j
.text:0040166C                 mov     ecx, 1
.text:00401671                 sub     ecx, eax
.text:00401673                 xor     eax, eax
.text:00401675                 cmp     ebx, ecx
.text:00401677                 setnz   al
.text:0040167A                 dec     eax
.text:0040167B                 and     eax, 20h
.text:0040167E
.text:0040167E loc_40167E:                             ; CODE XREF: sub_401340+2F1↑j
.text:0040167E                                         ; sub_401340+2FB↑j ...
.text:0040167E                 mov     dword_473A80[edi*4], eax
.text:00401685
.text:00401685 loc_401685:                             ; CODE XREF: sub_401340+2E5↑j
.text:00401685                 inc     edi
.text:00401686                 cmp     edi, dword_54A800
.text:0040168C                 jl      loc_4015A2
.text:00401692
.text:00401692 loc_401692:                             ; CODE XREF: sub_401340+248↑j
.text:00401692                 cmp     dword_54A800, 0
.text:00401699                 mov     [ebp+var_50], 0
.text:004016A0                 jle     loc_401A8B
.text:004016A6                 mov     [ebp+var_58], offset dword_54A808
.text:004016AD                 lea     ecx, [ecx+0]
.text:004016B0
.text:004016B0 loc_4016B0:                             ; CODE XREF: sub_401340+628↓j
.text:004016B0                 mov     edx, [ebp+var_58]
.text:004016B3                 mov     eax, [edx]
.text:004016B5                 push    eax
.text:004016B6                 lea     ecx, [ebp+var_20]
.text:004016B9                 push    ecx
.text:004016BA                 call    sub_4010D0
.text:004016BF                 add     esp, 8
.text:004016C2 ;   try {
.text:004016C2                 mov     [ebp+var_4], 0
.text:004016C9                 mov     esi, [ebp+var_1C]
.text:004016CC                 mov     ecx, [ebp+var_20]
.text:004016CF                 mov     edx, esi
.text:004016D1                 sub     edx, ecx
.text:004016D3                 xor     eax, eax
.text:004016D5                 test    edx, 0FFFFFFFCh
.text:004016DB                 jle     short loc_40170A
.text:004016DD                 mov     edi, [ebp+var_50]
.text:004016E0
.text:004016E0 loc_4016E0:                             ; CODE XREF: sub_401340+3C8↓j
.text:004016E0                 mov     edx, [ecx+eax*4]
.text:004016E3                 cmp     edx, 0FFFFFFFFh
.text:004016E6                 jz      short loc_4016FE
.text:004016E8                 cmp     dword_621588[edx*4], edi
.text:004016EF                 jl      short loc_4016FE
.text:004016F1                 mov     dword ptr [ecx+eax*4], 0FFFFFFFFh
.text:004016F8                 mov     esi, [ebp+var_1C]
.text:004016FB                 mov     ecx, [ebp+var_20]
.text:004016FE
.text:004016FE loc_4016FE:                             ; CODE XREF: sub_401340+3A6↑j
.text:004016FE                                         ; sub_401340+3AF↑j
.text:004016FE                 mov     edx, esi
.text:00401700                 sub     edx, ecx
.text:00401702                 inc     eax
.text:00401703                 sar     edx, 2
.text:00401706                 cmp     eax, edx
.text:00401708                 jl      short loc_4016E0
.text:0040170A
.text:0040170A loc_40170A:                             ; CODE XREF: sub_401340+39B↑j
.text:0040170A                 mov     eax, esi
.text:0040170C                 sub     eax, ecx
.text:0040170E                 xor     edx, edx
.text:00401710                 test    eax, 0FFFFFFFCh
.text:00401715                 jle     short loc_401752
.text:00401717
.text:00401717 loc_401717:                             ; CODE XREF: sub_401340+410↓j
.text:00401717                 cmp     dword ptr [ecx+edx*4], 0FFFFFFFFh
.text:0040171B                 jz      short loc_401746
.text:0040171D                 mov     esi, [ecx+edx*4]
.text:00401720                 mov     eax, dword_68CC50[esi*4]
.text:00401727                 cmp     eax, esi
.text:00401729                 jz      short loc_40173D
.text:0040172B                 push    eax
.text:0040172C                 call    sub_401310
.text:00401731                 mov     dword_68CC50[esi*4], eax
.text:00401738                 add     esp, 4
.text:0040173B                 mov     esi, eax
.text:0040173D
.text:0040173D loc_40173D:                             ; CODE XREF: sub_401340+3E9↑j
.text:0040173D                 mov     [ecx+edx*4], esi
.text:00401740                 mov     esi, [ebp+var_1C]
.text:00401743                 mov     ecx, [ebp+var_20]
.text:00401746
.text:00401746 loc_401746:                             ; CODE XREF: sub_401340+3DB↑j
.text:00401746                 mov     eax, esi
.text:00401748                 sub     eax, ecx
.text:0040174A                 inc     edx
.text:0040174B                 sar     eax, 2
.text:0040174E                 cmp     edx, eax
.text:00401750                 jl      short loc_401717
.text:00401752
.text:00401752 loc_401752:                             ; CODE XREF: sub_401340+3D5↑j
.text:00401752                 sub     esi, ecx
.text:00401754                 mov     ebx, esi
.text:00401756                 sar     ebx, 2
.text:00401759                 mov     [ebp+var_60], ebx
.text:0040175C                 test    ebx, ebx
.text:0040175E                 jle     loc_40182A
.text:00401764                 mov     edi, 5
.text:00401769                 mov     [ebp+var_54], edi
.text:0040176C                 mov     [ebp+var_4C], ecx
.text:0040176F                 nop
.text:00401770
.text:00401770 loc_401770:                             ; CODE XREF: sub_401340+4E4↓j
.text:00401770                 mov     edx, [ebp+var_4C]
.text:00401773                 mov     esi, [edx]
.text:00401775                 cmp     esi, 0FFFFFFFFh
.text:00401778                 jz      loc_401817
.text:0040177E                 lea     eax, [edi-4]
.text:00401781                 mov     [ebp+var_68], eax
.text:00401784                 cdq
.text:00401785                 mov     ebx, 6
.text:0040178A                 idiv    ebx
.text:0040178C                 mov     [ebp+var_64], 1
.text:00401793                 mov     [ebp+var_5C], 5
.text:0040179A                 cmp     [ecx+edx*4], esi
.text:0040179D                 jnz     short loc_4017B8
.text:0040179F                 mov     edi, [ebp+var_68]
.text:004017A2
.text:004017A2 loc_4017A2:                             ; CODE XREF: sub_401340+473↓j
.text:004017A2                 inc     edi
.text:004017A3                 mov     eax, edi
.text:004017A5                 cdq
.text:004017A6                 mov     ebx, 6
.text:004017AB                 idiv    ebx
.text:004017AD                 inc     [ebp+var_64]
.text:004017B0                 cmp     [ecx+edx*4], esi
.text:004017B3                 jz      short loc_4017A2
.text:004017B5                 mov     edi, [ebp+var_54]
.text:004017B8
.text:004017B8 loc_4017B8:                             ; CODE XREF: sub_401340+45D↑j
.text:004017B8                 mov     eax, edi
.text:004017BA                 cdq
.text:004017BB                 mov     ebx, 6
.text:004017C0                 idiv    ebx
.text:004017C2                 cmp     [ecx+edx*4], esi
.text:004017C5                 jnz     short loc_4017DD
.text:004017C7
.text:004017C7 loc_4017C7:                             ; CODE XREF: sub_401340+498↓j
.text:004017C7                 dec     edi
.text:004017C8                 mov     eax, edi
.text:004017CA                 cdq
.text:004017CB                 mov     ebx, 6
.text:004017D0                 idiv    ebx
.text:004017D2                 dec     [ebp+var_5C]
.text:004017D5                 cmp     [ecx+edx*4], esi
.text:004017D8                 jz      short loc_4017C7
.text:004017DA                 mov     edi, [ebp+var_54]
.text:004017DD
.text:004017DD loc_4017DD:                             ; CODE XREF: sub_401340+485↑j
.text:004017DD                 mov     eax, [ebp+var_64]
.text:004017E0                 mov     ebx, [ebp+var_60]
.text:004017E3                 mov     [ebp+var_54], eax
.text:004017E6                 cmp     eax, [ebp+var_5C]
.text:004017E9                 jg      short loc_401817
.text:004017EB                 jmp     short loc_4017F0
.text:004017EB ; ---------------------------------------------------------------------------
.text:004017ED                 align 10h
.text:004017F0
.text:004017F0 loc_4017F0:                             ; CODE XREF: sub_401340+4AB↑j
.text:004017F0                                         ; sub_401340+4D2↓j
.text:004017F0                 lea     eax, [edi+eax-5]
.text:004017F4                 cdq
.text:004017F5                 mov     ebx, 6
.text:004017FA                 idiv    ebx
.text:004017FC                 cmp     [ecx+edx*4], esi
.text:004017FF                 jnz     short loc_401808
.text:00401801                 mov     byte_54A806, 1
.text:00401808
.text:00401808 loc_401808:                             ; CODE XREF: sub_401340+4BF↑j
.text:00401808                 mov     eax, [ebp+var_54]
.text:0040180B                 inc     eax
.text:0040180C                 mov     [ebp+var_54], eax
.text:0040180F                 cmp     eax, [ebp+var_5C]
.text:00401812                 jle     short loc_4017F0
.text:00401814                 mov     ebx, [ebp+var_60]
.text:00401817
.text:00401817 loc_401817:                             ; CODE XREF: sub_401340+438↑j
.text:00401817                                         ; sub_401340+4A9↑j
.text:00401817                 add     [ebp+var_4C], 4
.text:0040181B                 inc     edi
.text:0040181C                 lea     eax, [edi-5]
.text:0040181F                 mov     [ebp+var_54], edi
.text:00401822                 cmp     eax, ebx
.text:00401824                 jl      loc_401770
.text:0040182A
.text:0040182A loc_40182A:                             ; CODE XREF: sub_401340+41E↑j
.text:0040182A                 xor     edi, edi
.text:0040182C                 test    ebx, ebx
.text:0040182E                 jle     loc_4018AE
.text:00401834
.text:00401834 loc_401834:                             ; CODE XREF: sub_401340+56C↓j
.text:00401834                 mov     esi, [ecx+edi*4]
.text:00401837                 cmp     esi, 0FFFFFFFFh
.text:0040183A                 jz      short loc_4018A9
.text:0040183C                 mov     edx, [ebp+var_58]
.text:0040183F                 mov     edx, [edx]
.text:00401841                 mov     eax, dword_68CC50[edx*4]
.text:00401848                 cmp     eax, edx
.text:0040184A                 jz      short loc_40185E
.text:0040184C                 push    eax
.text:0040184D                 call    sub_401310
.text:00401852                 mov     dword_68CC50[edx*4], eax
.text:00401859                 add     esp, 4
.text:0040185C                 mov     edx, eax
.text:0040185E
.text:0040185E loc_40185E:                             ; CODE XREF: sub_401340+50A↑j
.text:0040185E                 mov     eax, dword_68CC50[esi*4]
.text:00401865                 cmp     eax, esi
.text:00401867                 jz      short loc_40187B
.text:00401869                 push    eax
.text:0040186A                 call    sub_401310
.text:0040186F                 mov     dword_68CC50[esi*4], eax
.text:00401876                 add     esp, 4
.text:00401879                 mov     esi, eax
.text:0040187B
.text:0040187B loc_40187B:                             ; CODE XREF: sub_401340+527↑j
.text:0040187B                 cmp     edx, esi
.text:0040187D                 jz      short loc_4018A9
.text:0040187F                 mov     eax, dword_5B5EC8[edx*4]
.text:00401886                 add     dword_5B5EC8[esi*4], eax
.text:0040188D                 mov     dword_68CC50[edx*4], esi
.text:00401894                 mov     edx, dword_473A80[edx*4]
.text:0040189B                 or      dword_473A80[esi*4], edx
.text:004018A2                 lea     esi, dword_473A80[esi*4]
.text:004018A9
.text:004018A9 loc_4018A9:                             ; CODE XREF: sub_401340+4FA↑j
.text:004018A9                                         ; sub_401340+53D↑j
.text:004018A9                 inc     edi
.text:004018AA                 cmp     edi, ebx
.text:004018AC                 jl      short loc_401834
.text:004018AE
.text:004018AE loc_4018AE:                             ; CODE XREF: sub_401340+4EE↑j
.text:004018AE                 mov     eax, [ebp+var_58]
.text:004018B1                 mov     edx, [eax]
.text:004018B3                 mov     eax, dword_68CC50[edx*4]
.text:004018BA                 cmp     eax, edx
.text:004018BC                 jz      short loc_4018D0
.text:004018BE                 push    eax
.text:004018BF                 call    sub_401310
.text:004018C4                 mov     dword_68CC50[edx*4], eax
.text:004018CB                 add     esp, 4
.text:004018CE                 mov     edx, eax
.text:004018D0
.text:004018D0 loc_4018D0:                             ; CODE XREF: sub_401340+57C↑j
.text:004018D0                 cmp     dword_5B5EC8[edx*4], 2
.text:004018D8                 jl      short loc_4018E1
.text:004018DA                 mov     byte_54A805, 1
.text:004018E1
.text:004018E1 loc_4018E1:                             ; CODE XREF: sub_401340+598↑j
.text:004018E1                 mov     edx, dword_473A80[edx*4]
.text:004018E8                 xor     esi, esi
.text:004018EA                 xor     eax, eax
.text:004018EC                 test    dl, 1
.text:004018EF                 jz      short loc_4018F4
.text:004018F1                 lea     eax, [esi+1]
.text:004018F4
.text:004018F4 loc_4018F4:                             ; CODE XREF: sub_401340+5AF↑j
.text:004018F4                 test    dl, 2
.text:004018F7                 jz      short loc_4018FA
.text:004018F9                 inc     eax
.text:004018FA
.text:004018FA loc_4018FA:                             ; CODE XREF: sub_401340+5B7↑j
.text:004018FA                 test    dl, 4
.text:004018FD                 jz      short loc_401900
.text:004018FF                 inc     eax
.text:00401900
.text:00401900 loc_401900:                             ; CODE XREF: sub_401340+5BD↑j
.text:00401900                 test    dl, 8
.text:00401903                 jz      short loc_401906
.text:00401905                 inc     eax
.text:00401906
.text:00401906 loc_401906:                             ; CODE XREF: sub_401340+5C3↑j
.text:00401906                 test    dl, 10h
.text:00401909                 jz      short loc_40190C
.text:0040190B                 inc     eax
.text:0040190C
.text:0040190C loc_40190C:                             ; CODE XREF: sub_401340+5C9↑j
.text:0040190C                 test    dl, 20h
.text:0040190F                 jz      short loc_401912
.text:00401911                 inc     eax
.text:00401912
.text:00401912 loc_401912:                             ; CODE XREF: sub_401340+5CF↑j
.text:00401912                 cmp     eax, 3
.text:00401915                 jl      short loc_40191E
.text:00401917                 mov     byte_54A804, 1
.text:0040191E
.text:0040191E loc_40191E:                             ; CODE XREF: sub_401340+5D5↑j
.text:0040191E                 cmp     byte_54A806, 0
.text:00401925                 jnz     short loc_401970
.text:00401927                 cmp     byte_54A805, 0
.text:0040192E                 jnz     short loc_401970
.text:00401930                 cmp     byte_54A804, 0
.text:00401937                 jnz     short loc_401970
.text:00401937 ;   } // starts at 4016C2
.text:00401939                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00401940                 cmp     ecx, esi
.text:00401942                 jz      short loc_40194E
.text:00401944                 push    ecx
.text:00401945                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040194B                 add     esp, 4
.text:0040194E
.text:0040194E loc_40194E:                             ; CODE XREF: sub_401340+602↑j
.text:0040194E                 mov     eax, [ebp+var_50]
.text:00401951                 add     [ebp+var_58], 4
.text:00401955                 inc     eax
.text:00401956                 mov     [ebp+var_20], esi
.text:00401959                 mov     [ebp+var_1C], esi
.text:0040195C                 mov     [ebp+var_18], esi
.text:0040195F                 mov     [ebp+var_50], eax
.text:00401962                 cmp     eax, dword_54A800
.text:00401968                 jl      loc_4016B0
.text:0040196E                 jmp     short loc_40198E
.text:00401970 ; ---------------------------------------------------------------------------
.text:00401970
.text:00401970 loc_401970:                             ; CODE XREF: sub_401340+5E5↑j
.text:00401970                                         ; sub_401340+5EE↑j ...
.text:00401970                 mov     edx, [ebp+var_50]
.text:00401973                 mov     dword_68CC4C, edx
.text:00401979                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00401980                 cmp     ecx, esi
.text:00401982                 jz      short loc_40198E
.text:00401984                 push    ecx
.text:00401985                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040198B                 add     esp, 4
.text:0040198E
.text:0040198E loc_40198E:                             ; CODE XREF: sub_401340+62E↑j
.text:0040198E                                         ; sub_401340+642↑j
.text:0040198E                 cmp     byte_54A806, 0
.text:00401995                 jz      short loc_4019E5
.text:00401997                 mov     [ebp+var_1C], esi
.text:0040199A                 mov     edi, 4
.text:0040199F                 mov     eax, offset aRing ; "ring"
.text:004019A4                 lea     esi, [ebp+var_2C]
.text:004019A7                 mov     [ebp+var_18], 0Fh
.text:004019AE                 mov     byte ptr [ebp+var_2C], 0
.text:004019B2                 call    sub_402470
.text:004019B7                 mov     ecx, esi        ; int
.text:004019B9 ;   try {
.text:004019B9                 mov     [ebp+var_4], 1
.text:004019C0                 call    sub_402050
.text:004019C5                 mov     ebx, 10h
.text:004019C5 ;   } // starts at 4019B9
.text:004019CA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:004019D1                 cmp     [ebp+var_18], ebx
.text:004019D4                 jb      short loc_4019EA
.text:004019D6                 mov     eax, [ebp+var_2C]
.text:004019D9                 push    eax
.text:004019DA                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004019E0                 add     esp, 4
.text:004019E3                 jmp     short loc_4019EA
.text:004019E5 ; ---------------------------------------------------------------------------
.text:004019E5
.text:004019E5 loc_4019E5:                             ; CODE XREF: sub_401340+655↑j
.text:004019E5                 mov     ebx, 10h
.text:004019EA
.text:004019EA loc_4019EA:                             ; CODE XREF: sub_401340+694↑j
.text:004019EA                                         ; sub_401340+6A3↑j
.text:004019EA                 cmp     byte_54A805, 0
.text:004019F1                 jz      short loc_401A3E
.text:004019F3                 mov     edi, 6
.text:004019F8                 mov     eax, offset aBridge ; "bridge"
.text:004019FD                 lea     esi, [ebp+var_2C]
.text:00401A00                 mov     [ebp+var_18], 0Fh
.text:00401A07                 mov     [ebp+var_1C], 0
.text:00401A0E                 mov     byte ptr [ebp+var_2C], 0
.text:00401A12                 call    sub_402470
.text:00401A17                 mov     ecx, esi        ; int
.text:00401A19 ;   try {
.text:00401A19                 mov     [ebp+var_4], 2
.text:00401A20                 call    sub_402050
.text:00401A20 ;   } // starts at 401A19
.text:00401A25                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00401A2C                 cmp     [ebp+var_18], ebx
.text:00401A2F                 jb      short loc_401A3E
.text:00401A31                 mov     ecx, [ebp+var_2C]
.text:00401A34                 push    ecx
.text:00401A35                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00401A3B                 add     esp, 4
.text:00401A3E
.text:00401A3E loc_401A3E:                             ; CODE XREF: sub_401340+6B1↑j
.text:00401A3E                                         ; sub_401340+6EF↑j
.text:00401A3E                 cmp     byte_54A804, 0
.text:00401A45                 jz      short loc_401A8B
.text:00401A47                 mov     edi, 4
.text:00401A4C                 mov     eax, offset aFork ; "fork"
.text:00401A51                 lea     esi, [ebp+var_48]
.text:00401A54                 mov     [ebp+var_34], 0Fh
.text:00401A5B                 mov     [ebp+var_38], 0
.text:00401A62                 mov     byte ptr [ebp+var_48], 0
.text:00401A66                 call    sub_402470
.text:00401A6B                 mov     ecx, esi        ; int
.text:00401A6D ;   try {
.text:00401A6D                 mov     [ebp+var_4], 3
.text:00401A74                 call    sub_402050
.text:00401A79                 cmp     [ebp+var_34], ebx
.text:00401A7C                 jb      short loc_401A8B
.text:00401A7E                 mov     edx, [ebp+var_48]
.text:00401A81                 push    edx
.text:00401A82                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00401A88                 add     esp, 4
.text:00401A8B
.text:00401A8B loc_401A8B:                             ; CODE XREF: sub_401340+360↑j
.text:00401A8B                                         ; sub_401340+705↑j ...
.text:00401A8B                 mov     ecx, [ebp+var_C]
.text:00401A8E                 mov     large fs:0, ecx
.text:00401A95                 pop     ecx
.text:00401A96                 pop     edi
.text:00401A97                 pop     esi
.text:00401A98                 pop     ebx
.text:00401A99                 mov     ecx, [ebp+var_10]
.text:00401A9C                 xor     ecx, ebp
.text:00401A9E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00401AA3                 mov     esp, ebp
.text:00401AA5                 pop     ebp
.text:00401AA6                 retn
.text:00401AA6 ;   } // starts at 401A6D
.text:00401AA6 ; } // starts at 401340
.text:00401AA6 sub_401340      endp
.text:00401AA6
.text:00401AA6 ; ---------------------------------------------------------------------------
.text:00401AA7                 align 10h
.text:00401AB0
.text:00401AB0 ; =============== S U B R O U T I N E =======================================
.text:00401AB0
.text:00401AB0 ; Attributes: bp-based frame
.text:00401AB0
.text:00401AB0 sub_401AB0      proc near               ; CODE XREF: _main+D3↓p
.text:00401AB0
.text:00401AB0 var_8           = dword ptr -8
.text:00401AB0 var_4           = dword ptr -4
.text:00401AB0
.text:00401AB0                 push    ebp
.text:00401AB1                 mov     ebp, esp
.text:00401AB3                 mov     eax, dword_6F8324
.text:00401AB8                 mov     ecx, dword_6F8320
.text:00401ABE                 sub     esp, 0Ch
.text:00401AC1                 push    ebx
.text:00401AC2                 push    esi
.text:00401AC3                 push    edi
.text:00401AC4                 cmp     ecx, eax
.text:00401AC6                 jz      short loc_401ACF
.text:00401AC8                 mov     eax, ecx
.text:00401ACA                 mov     dword_6F8324, eax
.text:00401ACF
.text:00401ACF loc_401ACF:                             ; CODE XREF: sub_401AB0+16↑j
.text:00401ACF                 mov     edi, 1
.text:00401AD4                 lea     edx, [ebp+var_8]
.text:00401AD7                 mov     [ebp+var_8], edi
.text:00401ADA                 mov     [ebp+var_4], edi
.text:00401ADD                 cmp     edx, eax
.text:00401ADF                 jnb     short loc_401B1C
.text:00401AE1                 cmp     ecx, edx
.text:00401AE3                 ja      short loc_401B1C
.text:00401AE5                 mov     esi, edx
.text:00401AE7                 sub     esi, ecx
.text:00401AE9                 sar     esi, 3
.text:00401AEC                 cmp     eax, dword_6F8328
.text:00401AF2                 jnz     short loc_401B03
.text:00401AF4                 mov     ecx, offset dword_6F8320
.text:00401AF9                 call    sub_402350
.text:00401AFE                 mov     eax, dword_6F8324
.text:00401B03
.text:00401B03 loc_401B03:                             ; CODE XREF: sub_401AB0+42↑j
.text:00401B03                 mov     ecx, dword_6F8320
.text:00401B09                 lea     ecx, [ecx+esi*8]
.text:00401B0C                 test    eax, eax
.text:00401B0E                 jz      short loc_401B41
.text:00401B10                 mov     edx, [ecx]
.text:00401B12                 mov     [eax], edx
.text:00401B14                 mov     ecx, [ecx+4]
.text:00401B17                 mov     [eax+4], ecx
.text:00401B1A                 jmp     short loc_401B3C
.text:00401B1C ; ---------------------------------------------------------------------------
.text:00401B1C
.text:00401B1C loc_401B1C:                             ; CODE XREF: sub_401AB0+2F↑j
.text:00401B1C                                         ; sub_401AB0+33↑j
.text:00401B1C                 cmp     eax, dword_6F8328
.text:00401B22                 jnz     short loc_401B33
.text:00401B24                 mov     ecx, offset dword_6F8320
.text:00401B29                 call    sub_402350
.text:00401B2E                 mov     eax, dword_6F8324
.text:00401B33
.text:00401B33 loc_401B33:                             ; CODE XREF: sub_401AB0+72↑j
.text:00401B33                 test    eax, eax
.text:00401B35                 jz      short loc_401B41
.text:00401B37                 mov     [eax], edi
.text:00401B39                 mov     [eax+4], edi
.text:00401B3C
.text:00401B3C loc_401B3C:                             ; CODE XREF: sub_401AB0+6A↑j
.text:00401B3C                 mov     eax, dword_6F8324
.text:00401B41
.text:00401B41 loc_401B41:                             ; CODE XREF: sub_401AB0+5E↑j
.text:00401B41                                         ; sub_401AB0+85↑j
.text:00401B41                 mov     esi, dword_68CC48
.text:00401B47                 add     eax, 8
.text:00401B4A                 lea     edx, [ebp+var_8]
.text:00401B4D                 mov     dword_6F8324, eax
.text:00401B52                 mov     [ebp+var_8], esi
.text:00401B55                 mov     [ebp+var_4], edi
.text:00401B58                 cmp     edx, eax
.text:00401B5A                 jnb     short loc_401B9D
.text:00401B5C                 mov     ecx, dword_6F8320
.text:00401B62                 cmp     ecx, edx
.text:00401B64                 ja      short loc_401B9D
.text:00401B66                 mov     esi, edx
.text:00401B68                 sub     esi, ecx
.text:00401B6A                 sar     esi, 3
.text:00401B6D                 cmp     eax, dword_6F8328
.text:00401B73                 jnz     short loc_401B84
.text:00401B75                 mov     ecx, offset dword_6F8320
.text:00401B7A                 call    sub_402350
.text:00401B7F                 mov     eax, dword_6F8324
.text:00401B84
.text:00401B84 loc_401B84:                             ; CODE XREF: sub_401AB0+C3↑j
.text:00401B84                 mov     ecx, dword_6F8320
.text:00401B8A                 lea     ecx, [ecx+esi*8]
.text:00401B8D                 test    eax, eax
.text:00401B8F                 jz      short loc_401BC2
.text:00401B91                 mov     edx, [ecx]
.text:00401B93                 mov     [eax], edx
.text:00401B95                 mov     ecx, [ecx+4]
.text:00401B98                 mov     [eax+4], ecx
.text:00401B9B                 jmp     short loc_401BBD
.text:00401B9D ; ---------------------------------------------------------------------------
.text:00401B9D
.text:00401B9D loc_401B9D:                             ; CODE XREF: sub_401AB0+AA↑j
.text:00401B9D                                         ; sub_401AB0+B4↑j
.text:00401B9D                 cmp     eax, dword_6F8328
.text:00401BA3                 jnz     short loc_401BB4
.text:00401BA5                 mov     ecx, offset dword_6F8320
.text:00401BAA                 call    sub_402350
.text:00401BAF                 mov     eax, dword_6F8324
.text:00401BB4
.text:00401BB4 loc_401BB4:                             ; CODE XREF: sub_401AB0+F3↑j
.text:00401BB4                 test    eax, eax
.text:00401BB6                 jz      short loc_401BC2
.text:00401BB8                 mov     [eax], esi
.text:00401BBA                 mov     [eax+4], edi
.text:00401BBD
.text:00401BBD loc_401BBD:                             ; CODE XREF: sub_401AB0+EB↑j
.text:00401BBD                 mov     eax, dword_6F8324
.text:00401BC2
.text:00401BC2 loc_401BC2:                             ; CODE XREF: sub_401AB0+DF↑j
.text:00401BC2                                         ; sub_401AB0+106↑j
.text:00401BC2                 mov     esi, dword_68CC48
.text:00401BC8                 add     eax, 8
.text:00401BCB                 lea     edx, [ebp+var_8]
.text:00401BCE                 mov     dword_6F8324, eax
.text:00401BD3                 mov     [ebp+var_8], edi
.text:00401BD6                 mov     [ebp+var_4], esi
.text:00401BD9                 cmp     edx, eax
.text:00401BDB                 jnb     short loc_401C1E
.text:00401BDD                 mov     ecx, dword_6F8320
.text:00401BE3                 cmp     ecx, edx
.text:00401BE5                 ja      short loc_401C1E
.text:00401BE7                 mov     esi, edx
.text:00401BE9                 sub     esi, ecx
.text:00401BEB                 sar     esi, 3
.text:00401BEE                 cmp     eax, dword_6F8328
.text:00401BF4                 jnz     short loc_401C05
.text:00401BF6                 mov     ecx, offset dword_6F8320
.text:00401BFB                 call    sub_402350
.text:00401C00                 mov     eax, dword_6F8324
.text:00401C05
.text:00401C05 loc_401C05:                             ; CODE XREF: sub_401AB0+144↑j
.text:00401C05                 mov     ecx, dword_6F8320
.text:00401C0B                 lea     ecx, [ecx+esi*8]
.text:00401C0E                 test    eax, eax
.text:00401C10                 jz      short loc_401C43
.text:00401C12                 mov     edx, [ecx]
.text:00401C14                 mov     [eax], edx
.text:00401C16                 mov     ecx, [ecx+4]
.text:00401C19                 mov     [eax+4], ecx
.text:00401C1C                 jmp     short loc_401C3E
.text:00401C1E ; ---------------------------------------------------------------------------
.text:00401C1E
.text:00401C1E loc_401C1E:                             ; CODE XREF: sub_401AB0+12B↑j
.text:00401C1E                                         ; sub_401AB0+135↑j
.text:00401C1E                 cmp     eax, dword_6F8328
.text:00401C24                 jnz     short loc_401C35
.text:00401C26                 mov     ecx, offset dword_6F8320
.text:00401C2B                 call    sub_402350
.text:00401C30                 mov     eax, dword_6F8324
.text:00401C35
.text:00401C35 loc_401C35:                             ; CODE XREF: sub_401AB0+174↑j
.text:00401C35                 test    eax, eax
.text:00401C37                 jz      short loc_401C43
.text:00401C39                 mov     [eax], edi
.text:00401C3B                 mov     [eax+4], esi
.text:00401C3E
.text:00401C3E loc_401C3E:                             ; CODE XREF: sub_401AB0+16C↑j
.text:00401C3E                 mov     eax, dword_6F8324
.text:00401C43
.text:00401C43 loc_401C43:                             ; CODE XREF: sub_401AB0+160↑j
.text:00401C43                                         ; sub_401AB0+187↑j
.text:00401C43                 mov     ecx, dword_68CC48
.text:00401C49                 lea     ecx, [ecx+ecx-1]
.text:00401C4D                 add     eax, 8
.text:00401C50                 lea     edx, [ebp+var_8]
.text:00401C53                 mov     esi, ecx
.text:00401C55                 mov     edi, ecx
.text:00401C57                 mov     dword_6F8324, eax
.text:00401C5C                 mov     [ebp+var_8], esi
.text:00401C5F                 mov     [ebp+var_4], edi
.text:00401C62                 cmp     edx, eax
.text:00401C64                 jnb     short loc_401CA7
.text:00401C66                 mov     ecx, dword_6F8320
.text:00401C6C                 cmp     ecx, edx
.text:00401C6E                 ja      short loc_401CA7
.text:00401C70                 mov     esi, edx
.text:00401C72                 sub     esi, ecx
.text:00401C74                 sar     esi, 3
.text:00401C77                 cmp     eax, dword_6F8328
.text:00401C7D                 jnz     short loc_401C8E
.text:00401C7F                 mov     ecx, offset dword_6F8320
.text:00401C84                 call    sub_402350
.text:00401C89                 mov     eax, dword_6F8324
.text:00401C8E
.text:00401C8E loc_401C8E:                             ; CODE XREF: sub_401AB0+1CD↑j
.text:00401C8E                 mov     ecx, dword_6F8320
.text:00401C94                 lea     ecx, [ecx+esi*8]
.text:00401C97                 test    eax, eax
.text:00401C99                 jz      short loc_401CCC
.text:00401C9B                 mov     edx, [ecx]
.text:00401C9D                 mov     [eax], edx
.text:00401C9F                 mov     ecx, [ecx+4]
.text:00401CA2                 mov     [eax+4], ecx
.text:00401CA5                 jmp     short loc_401CC7
.text:00401CA7 ; ---------------------------------------------------------------------------
.text:00401CA7
.text:00401CA7 loc_401CA7:                             ; CODE XREF: sub_401AB0+1B4↑j
.text:00401CA7                                         ; sub_401AB0+1BE↑j
.text:00401CA7                 cmp     eax, dword_6F8328
.text:00401CAD                 jnz     short loc_401CBE
.text:00401CAF                 mov     ecx, offset dword_6F8320
.text:00401CB4                 call    sub_402350
.text:00401CB9                 mov     eax, dword_6F8324
.text:00401CBE
.text:00401CBE loc_401CBE:                             ; CODE XREF: sub_401AB0+1FD↑j
.text:00401CBE                 test    eax, eax
.text:00401CC0                 jz      short loc_401CCC
.text:00401CC2                 mov     [eax], esi
.text:00401CC4                 mov     [eax+4], edi
.text:00401CC7
.text:00401CC7 loc_401CC7:                             ; CODE XREF: sub_401AB0+1F5↑j
.text:00401CC7                 mov     eax, dword_6F8324
.text:00401CCC
.text:00401CCC loc_401CCC:                             ; CODE XREF: sub_401AB0+1E9↑j
.text:00401CCC                                         ; sub_401AB0+210↑j
.text:00401CCC                 mov     esi, dword_68CC48
.text:00401CD2                 add     eax, 8
.text:00401CD5                 lea     edx, [ebp+var_8]
.text:00401CD8                 lea     edi, [esi+esi-1]
.text:00401CDC                 mov     dword_6F8324, eax
.text:00401CE1                 mov     [ebp+var_8], esi
.text:00401CE4                 mov     [ebp+var_4], edi
.text:00401CE7                 cmp     edx, eax
.text:00401CE9                 jnb     short loc_401D2C
.text:00401CEB                 mov     ecx, dword_6F8320
.text:00401CF1                 cmp     ecx, edx
.text:00401CF3                 ja      short loc_401D2C
.text:00401CF5                 mov     esi, edx
.text:00401CF7                 sub     esi, ecx
.text:00401CF9                 sar     esi, 3
.text:00401CFC                 cmp     eax, dword_6F8328
.text:00401D02                 jnz     short loc_401D13
.text:00401D04                 mov     ecx, offset dword_6F8320
.text:00401D09                 call    sub_402350
.text:00401D0E                 mov     eax, dword_6F8324
.text:00401D13
.text:00401D13 loc_401D13:                             ; CODE XREF: sub_401AB0+252↑j
.text:00401D13                 mov     ecx, dword_6F8320
.text:00401D19                 lea     ecx, [ecx+esi*8]
.text:00401D1C                 test    eax, eax
.text:00401D1E                 jz      short loc_401D51
.text:00401D20                 mov     edx, [ecx]
.text:00401D22                 mov     [eax], edx
.text:00401D24                 mov     ecx, [ecx+4]
.text:00401D27                 mov     [eax+4], ecx
.text:00401D2A                 jmp     short loc_401D4C
.text:00401D2C ; ---------------------------------------------------------------------------
.text:00401D2C
.text:00401D2C loc_401D2C:                             ; CODE XREF: sub_401AB0+239↑j
.text:00401D2C                                         ; sub_401AB0+243↑j
.text:00401D2C                 cmp     eax, dword_6F8328
.text:00401D32                 jnz     short loc_401D43
.text:00401D34                 mov     ecx, offset dword_6F8320
.text:00401D39                 call    sub_402350
.text:00401D3E                 mov     eax, dword_6F8324
.text:00401D43
.text:00401D43 loc_401D43:                             ; CODE XREF: sub_401AB0+282↑j
.text:00401D43                 test    eax, eax
.text:00401D45                 jz      short loc_401D51
.text:00401D47                 mov     [eax], esi
.text:00401D49                 mov     [eax+4], edi
.text:00401D4C
.text:00401D4C loc_401D4C:                             ; CODE XREF: sub_401AB0+27A↑j
.text:00401D4C                 mov     eax, dword_6F8324
.text:00401D51
.text:00401D51 loc_401D51:                             ; CODE XREF: sub_401AB0+26E↑j
.text:00401D51                                         ; sub_401AB0+295↑j
.text:00401D51                 mov     edi, dword_68CC48
.text:00401D57                 add     eax, 8
.text:00401D5A                 lea     edx, [ebp+var_8]
.text:00401D5D                 lea     esi, [edi+edi-1]
.text:00401D61                 mov     dword_6F8324, eax
.text:00401D66                 mov     [ebp+var_8], esi
.text:00401D69                 mov     [ebp+var_4], edi
.text:00401D6C                 cmp     edx, eax
.text:00401D6E                 jnb     short loc_401DB1
.text:00401D70                 mov     ecx, dword_6F8320
.text:00401D76                 cmp     ecx, edx
.text:00401D78                 ja      short loc_401DB1
.text:00401D7A                 mov     esi, edx
.text:00401D7C                 sub     esi, ecx
.text:00401D7E                 sar     esi, 3
.text:00401D81                 cmp     eax, dword_6F8328
.text:00401D87                 jnz     short loc_401D98
.text:00401D89                 mov     ecx, offset dword_6F8320
.text:00401D8E                 call    sub_402350
.text:00401D93                 mov     eax, dword_6F8324
.text:00401D98
.text:00401D98 loc_401D98:                             ; CODE XREF: sub_401AB0+2D7↑j
.text:00401D98                 mov     ecx, dword_6F8320
.text:00401D9E                 lea     ecx, [ecx+esi*8]
.text:00401DA1                 test    eax, eax
.text:00401DA3                 jz      short loc_401DD6
.text:00401DA5                 mov     edx, [ecx]
.text:00401DA7                 mov     [eax], edx
.text:00401DA9                 mov     ecx, [ecx+4]
.text:00401DAC                 mov     [eax+4], ecx
.text:00401DAF                 jmp     short loc_401DD1
.text:00401DB1 ; ---------------------------------------------------------------------------
.text:00401DB1
.text:00401DB1 loc_401DB1:                             ; CODE XREF: sub_401AB0+2BE↑j
.text:00401DB1                                         ; sub_401AB0+2C8↑j
.text:00401DB1                 cmp     eax, dword_6F8328
.text:00401DB7                 jnz     short loc_401DC8
.text:00401DB9                 mov     ecx, offset dword_6F8320
.text:00401DBE                 call    sub_402350
.text:00401DC3                 mov     eax, dword_6F8324
.text:00401DC8
.text:00401DC8 loc_401DC8:                             ; CODE XREF: sub_401AB0+307↑j
.text:00401DC8                 test    eax, eax
.text:00401DCA                 jz      short loc_401DD6
.text:00401DCC                 mov     [eax], esi
.text:00401DCE                 mov     [eax+4], edi
.text:00401DD1
.text:00401DD1 loc_401DD1:                             ; CODE XREF: sub_401AB0+2FF↑j
.text:00401DD1                 mov     eax, dword_6F8324
.text:00401DD6
.text:00401DD6 loc_401DD6:                             ; CODE XREF: sub_401AB0+2F3↑j
.text:00401DD6                                         ; sub_401AB0+31A↑j
.text:00401DD6                 mov     ecx, dword_6F8320
.text:00401DDC                 add     eax, 8
.text:00401DDF                 mov     edx, eax
.text:00401DE1                 sub     edx, ecx
.text:00401DE3                 sar     edx, 3
.text:00401DE6                 push    edx
.text:00401DE7                 push    eax
.text:00401DE8                 push    ecx
.text:00401DE9                 mov     dword_6F8324, eax
.text:00401DEE                 call    sub_4030C0
.text:00401DF3                 add     esp, 0Ch
.text:00401DF6                 call    sub_401340
.text:00401DFB                 mov     esi, Dst
.text:00401E01                 mov     edi, dword_6F8334
.text:00401E07                 cmp     esi, edi
.text:00401E09                 jnz     short loc_401E20
.text:00401E0B                 push    offset Str      ; "none"
.text:00401E10                 call    ds:puts
.text:00401E16                 add     esp, 4
.text:00401E19                 pop     edi
.text:00401E1A                 pop     esi
.text:00401E1B                 pop     ebx
.text:00401E1C                 mov     esp, ebp
.text:00401E1E                 pop     ebp
.text:00401E1F                 retn
.text:00401E20 ; ---------------------------------------------------------------------------
.text:00401E20
.text:00401E20 loc_401E20:                             ; CODE XREF: sub_401AB0+359↑j
.text:00401E20                 mov     ecx, edi
.text:00401E22                 sub     ecx, esi
.text:00401E24                 mov     eax, 92492493h
.text:00401E29                 imul    ecx
.text:00401E2B                 add     edx, ecx
.text:00401E2D                 sar     edx, 4
.text:00401E30                 mov     eax, edx
.text:00401E32                 shr     eax, 1Fh
.text:00401E35                 add     eax, edx
.text:00401E37                 push    eax
.text:00401E38                 push    edi
.text:00401E39                 push    esi
.text:00401E3A                 call    sub_403190
.text:00401E3F                 mov     ecx, dword_6F8334
.text:00401E45                 mov     edi, Dst
.text:00401E4B                 mov     ebx, ds:printf
.text:00401E51                 sub     ecx, edi
.text:00401E53                 mov     eax, 92492493h
.text:00401E58                 imul    ecx
.text:00401E5A                 add     edx, ecx
.text:00401E5C                 sar     edx, 4
.text:00401E5F                 mov     ecx, edx
.text:00401E61                 shr     ecx, 1Fh
.text:00401E64                 add     ecx, edx
.text:00401E66                 add     esp, 0Ch
.text:00401E69                 xor     esi, esi
.text:00401E6B                 test    ecx, ecx
.text:00401E6D                 jle     short loc_401EC0
.text:00401E6F                 nop
.text:00401E70
.text:00401E70 loc_401E70:                             ; CODE XREF: sub_401AB0+40E↓j
.text:00401E70                 mov     ecx, offset Format ; "-%s"
.text:00401E75                 test    esi, esi
.text:00401E77                 jnz     short loc_401E7E
.text:00401E79                 mov     ecx, offset aS_0 ; "%s"
.text:00401E7E
.text:00401E7E loc_401E7E:                             ; CODE XREF: sub_401AB0+3C7↑j
.text:00401E7E                 lea     edx, ds:0[esi*8]
.text:00401E85                 sub     edx, esi
.text:00401E87                 cmp     dword ptr [edi+edx*4+14h], 10h
.text:00401E8C                 lea     eax, [edi+edx*4]
.text:00401E8F                 jb      short loc_401E93
.text:00401E91                 mov     eax, [eax]
.text:00401E93
.text:00401E93 loc_401E93:                             ; CODE XREF: sub_401AB0+3DF↑j
.text:00401E93                 push    eax
.text:00401E94                 push    ecx             ; Format
.text:00401E95                 call    ebx ; printf
.text:00401E97                 mov     ecx, dword_6F8334
.text:00401E9D                 mov     edi, Dst
.text:00401EA3                 sub     ecx, edi
.text:00401EA5                 mov     eax, 92492493h
.text:00401EAA                 imul    ecx
.text:00401EAC                 add     edx, ecx
.text:00401EAE                 sar     edx, 4
.text:00401EB1                 mov     eax, edx
.text:00401EB3                 shr     eax, 1Fh
.text:00401EB6                 inc     esi
.text:00401EB7                 add     eax, edx
.text:00401EB9                 add     esp, 8
.text:00401EBC                 cmp     esi, eax
.text:00401EBE                 jl      short loc_401E70
.text:00401EC0
.text:00401EC0 loc_401EC0:                             ; CODE XREF: sub_401AB0+3BD↑j
.text:00401EC0                 mov     ecx, dword_68CC4C
.text:00401EC6                 inc     ecx
.text:00401EC7                 push    ecx
.text:00401EC8                 push    offset aInMoveD ; " in move %d\n"
.text:00401ECD                 call    ebx ; printf
.text:00401ECF                 add     esp, 8
.text:00401ED2                 pop     edi
.text:00401ED3                 pop     esi
.text:00401ED4                 pop     ebx
.text:00401ED5                 mov     esp, ebp
.text:00401ED7                 pop     ebp
.text:00401ED8                 retn
.text:00401ED8 sub_401AB0      endp
.text:00401ED8
.text:00401ED8 ; ---------------------------------------------------------------------------
.text:00401ED9                 align 10h
.text:00401EE0
.text:00401EE0 ; =============== S U B R O U T I N E =======================================
.text:00401EE0
.text:00401EE0 ; Attributes: bp-based frame fuzzy-sp
.text:00401EE0
.text:00401EE0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00401EE0 _main           proc near               ; CODE XREF: ___tmainCRTStartup+11D↓p
.text:00401EE0
.text:00401EE0 var_4           = dword ptr -4
.text:00401EE0 argc            = dword ptr  8
.text:00401EE0 argv            = dword ptr  0Ch
.text:00401EE0 envp            = dword ptr  10h
.text:00401EE0
.text:00401EE0                 push    ebp
.text:00401EE1                 mov     ebp, esp
.text:00401EE3                 and     esp, 0FFFFFFF8h
.text:00401EE6                 push    ecx
.text:00401EE7                 mov     ecx, ds:?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A ; std::basic_istream<char,std::char_traits<char>> std::cin
.text:00401EED                 push    ebx
.text:00401EEE                 push    esi
.text:00401EEF                 push    edi
.text:00401EF0                 lea     eax, [esp+10h+var_4]
.text:00401EF4                 push    eax
.text:00401EF5                 call    ds:??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z ; std::basic_istream<char,std::char_traits<char>>::operator>>(int &)
.text:00401EFB                 xor     edi, edi
.text:00401EFD                 cmp     [esp+10h+var_4], edi
.text:00401F01                 jle     loc_401FC2
.text:00401F07                 mov     ebx, ds:scanf
.text:00401F0D
.text:00401F0D loc_401F0D:                             ; CODE XREF: _main+DC↓j
.text:00401F0D                 mov     ecx, ds:?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl(std::basic_ostream<char,std::char_traits<char>> &)
.text:00401F13                 push    ecx
.text:00401F14                 call    ds:clock
.text:00401F1A                 mov     edx, [esp+14h+var_4]
.text:00401F1E                 push    eax
.text:00401F1F                 push    edx
.text:00401F20                 push    ecx
.text:00401F21                 mov     ecx, ds:?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cerr
.text:00401F27                 push    edi
.text:00401F28                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
.text:00401F2E                 push    eax
.text:00401F2F                 call    sub_402C70
.text:00401F34                 add     esp, 8
.text:00401F37                 mov     ecx, eax
.text:00401F39                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
.text:00401F3F                 push    eax
.text:00401F40                 call    sub_402EA0
.text:00401F45                 add     esp, 4
.text:00401F48                 mov     ecx, eax
.text:00401F4A                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@J@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(long)
.text:00401F50                 mov     ecx, eax
.text:00401F52                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(std::basic_ostream<char,std::char_traits<char>> & (*)(std::basic_ostream<char,std::char_traits<char>> &))
.text:00401F58                 mov     ecx, ds:?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A ; std::basic_istream<char,std::char_traits<char>> std::cin
.text:00401F5E                 push    offset dword_54A800
.text:00401F63                 push    offset dword_68CC48
.text:00401F68                 call    ds:??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z ; std::basic_istream<char,std::char_traits<char>>::operator>>(int &)
.text:00401F6E                 mov     ecx, eax
.text:00401F70                 call    ds:??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z ; std::basic_istream<char,std::char_traits<char>>::operator>>(int &)
.text:00401F76                 xor     esi, esi
.text:00401F78                 cmp     dword_54A800, esi
.text:00401F7E                 jle     short loc_401FA3
.text:00401F80
.text:00401F80 loc_401F80:                             ; CODE XREF: _main+C1↓j
.text:00401F80                 lea     eax, dword_4083C0[esi*4]
.text:00401F87                 push    eax
.text:00401F88                 lea     ecx, dword_4DF140[esi*4]
.text:00401F8F                 push    ecx
.text:00401F90                 push    offset aDD      ; "%d%d"
.text:00401F95                 call    ebx ; scanf
.text:00401F97                 inc     esi
.text:00401F98                 add     esp, 0Ch
.text:00401F9B                 cmp     esi, dword_54A800
.text:00401FA1                 jl      short loc_401F80
.text:00401FA3
.text:00401FA3 loc_401FA3:                             ; CODE XREF: _main+9E↑j
.text:00401FA3                 inc     edi
.text:00401FA4                 push    edi
.text:00401FA5                 push    offset aCaseD   ; "Case #%d: "
.text:00401FAA                 call    ds:printf
.text:00401FB0                 add     esp, 8
.text:00401FB3                 call    sub_401AB0
.text:00401FB8                 cmp     edi, [esp+10h+var_4]
.text:00401FBC                 jl      loc_401F0D
.text:00401FC2
.text:00401FC2 loc_401FC2:                             ; CODE XREF: _main+21↑j
.text:00401FC2                 mov     edx, ds:?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl(std::basic_ostream<char,std::char_traits<char>> &)
.text:00401FC8                 push    edx
.text:00401FC9                 call    ds:clock
.text:00401FCF                 push    eax
.text:00401FD0                 mov     eax, [esp+18h+var_4]
.text:00401FD4                 push    eax
.text:00401FD5                 push    ecx
.text:00401FD6                 mov     ecx, ds:?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cerr
.text:00401FDC                 push    eax
.text:00401FDD                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
.text:00401FE3                 push    eax
.text:00401FE4                 call    sub_402C70
.text:00401FE9                 add     esp, 8
.text:00401FEC                 mov     ecx, eax
.text:00401FEE                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
.text:00401FF4                 push    eax
.text:00401FF5                 call    sub_402EA0
.text:00401FFA                 add     esp, 4
.text:00401FFD                 mov     ecx, eax
.text:00401FFF                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@J@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(long)
.text:00402005                 mov     ecx, eax
.text:00402007                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(std::basic_ostream<char,std::char_traits<char>> & (*)(std::basic_ostream<char,std::char_traits<char>> &))
.text:0040200D                 pop     edi
.text:0040200E                 pop     esi
.text:0040200F                 xor     eax, eax
.text:00402011                 pop     ebx
.text:00402012                 mov     esp, ebp
.text:00402014                 pop     ebp
.text:00402015                 retn
.text:00402015 _main           endp
.text:00402015
.text:00402015 ; ---------------------------------------------------------------------------
.text:00402016                 align 10h
.text:00402020 ; START OF FUNCTION CHUNK FOR sub_401340
.text:00402020 ;   ADDITIONAL PARENT FUNCTION sub_404400
.text:00402020 ;   ADDITIONAL PARENT FUNCTION sub_404580
.text:00402020 ;   ADDITIONAL PARENT FUNCTION sub_4050B0
.text:00402020
.text:00402020 loc_402020:                             ; CODE XREF: sub_401340+49BB↓j
.text:00402020                                         ; sub_401340+49C3↓j ...
.text:00402020 ; __unwind { // SEH_4050B0
.text:00402020                 cmp     dword ptr [esi+14h], 10h
.text:00402024                 jb      short loc_402032
.text:00402026                 mov     eax, [esi]
.text:00402028                 push    eax
.text:00402029                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040202F                 add     esp, 4
.text:00402032
.text:00402032 loc_402032:                             ; CODE XREF: sub_401340+CE4↑j
.text:00402032                 mov     dword ptr [esi+14h], 0Fh
.text:00402039                 mov     dword ptr [esi+10h], 0
.text:00402040                 mov     byte ptr [esi], 0
.text:00402043                 retn
.text:00402043 ; } // starts at 402020
.text:00402043 ; END OF FUNCTION CHUNK FOR sub_401340
.text:00402043 ; ---------------------------------------------------------------------------
.text:00402044                 align 10h
.text:00402050
.text:00402050 ; =============== S U B R O U T I N E =======================================
.text:00402050
.text:00402050 ; Attributes: bp-based frame
.text:00402050
.text:00402050 ; int __usercall sub_402050@<eax>(int@<ecx>, int, int)
.text:00402050 sub_402050      proc near               ; CODE XREF: sub_401340+680↑p
.text:00402050                                         ; sub_401340+6E0↑p ...
.text:00402050
.text:00402050 var_C           = dword ptr -0Ch
.text:00402050 var_4           = dword ptr -4
.text:00402050 arg_4           = dword ptr  0Ch
.text:00402050
.text:00402050 ; FUNCTION CHUNK AT .text:00405CC0 SIZE 00000025 BYTES
.text:00402050
.text:00402050 ; __unwind { // SEH_402050
.text:00402050                 push    ebp
.text:00402051                 mov     ebp, esp
.text:00402053                 push    0FFFFFFFFh
.text:00402055                 push    offset SEH_402050
.text:0040205A                 mov     eax, large fs:0
.text:00402060                 push    eax
.text:00402061                 push    ebx
.text:00402062                 push    esi
.text:00402063                 push    edi
.text:00402064                 mov     eax, ___security_cookie
.text:00402069                 xor     eax, ebp
.text:0040206B                 push    eax
.text:0040206C                 lea     eax, [ebp+var_C]
.text:0040206F                 mov     large fs:0, eax
.text:00402075                 mov     esi, ecx
.text:00402077                 mov     ecx, dword_6F8334
.text:0040207D                 cmp     esi, ecx
.text:0040207F                 jnb     short loc_4020D1
.text:00402081                 mov     edi, Dst
.text:00402087                 cmp     edi, esi
.text:00402089                 ja      short loc_4020D1
.text:0040208B                 sub     esi, edi
.text:0040208D                 mov     eax, 92492493h
.text:00402092                 imul    esi
.text:00402094                 add     edx, esi
.text:00402096                 sar     edx, 4
.text:00402099                 mov     esi, edx
.text:0040209B                 shr     esi, 1Fh
.text:0040209E                 add     esi, edx
.text:004020A0                 cmp     ecx, dword_6F8338
.text:004020A6                 jnz     short loc_4020B9
.text:004020A8                 call    sub_402250
.text:004020AD                 mov     ecx, dword_6F8334
.text:004020B3                 mov     edi, Dst
.text:004020B9
.text:004020B9 loc_4020B9:                             ; CODE XREF: sub_402050+56↑j
.text:004020B9                 lea     eax, ds:0[esi*8]
.text:004020C0                 sub     eax, esi
.text:004020C2                 lea     eax, [edi+eax*4]
.text:004020C5                 xor     edx, edx
.text:004020C7 ;   try {
.text:004020C7                 mov     [ebp+var_4], edx
.text:004020CA                 cmp     ecx, edx
.text:004020CC                 jz      short loc_40210E
.text:004020CE                 push    eax
.text:004020CF                 jmp     short loc_4020F2
.text:004020D1 ; ---------------------------------------------------------------------------
.text:004020D1
.text:004020D1 loc_4020D1:                             ; CODE XREF: sub_402050+2F↑j
.text:004020D1                                         ; sub_402050+39↑j
.text:004020D1                 cmp     ecx, dword_6F8338
.text:004020D7                 jnz     short loc_4020E4
.text:004020D9                 call    sub_402250
.text:004020DE                 mov     ecx, dword_6F8334 ; int
.text:004020E4
.text:004020E4 loc_4020E4:                             ; CODE XREF: sub_402050+87↑j
.text:004020E4                 xor     edx, edx
.text:004020E4 ;   } // starts at 4020C7
.text:004020E6 ;   try {
.text:004020E6                 mov     [ebp+var_4], 1
.text:004020ED                 cmp     ecx, edx
.text:004020EF                 jz      short loc_40210E
.text:004020F1                 push    esi             ; int
.text:004020F2
.text:004020F2 loc_4020F2:                             ; CODE XREF: sub_402050+7F↑j
.text:004020F2                 mov     dword ptr [ecx+14h], 0Fh
.text:004020F9                 mov     [ecx+10h], edx
.text:004020FC                 or      eax, 0FFFFFFFFh
.text:004020FF                 xor     ebx, ebx
.text:00402101                 mov     [ecx], dl
.text:00402103                 call    sub_402830
.text:00402108                 mov     ecx, dword_6F8334
.text:0040210E
.text:0040210E loc_40210E:                             ; CODE XREF: sub_402050+7C↑j
.text:0040210E                                         ; sub_402050+9F↑j
.text:0040210E                 add     ecx, 1Ch
.text:00402111                 mov     dword_6F8334, ecx
.text:00402117                 mov     ecx, [ebp+var_C]
.text:0040211A                 mov     large fs:0, ecx
.text:00402121                 pop     ecx
.text:00402122                 pop     edi
.text:00402123                 pop     esi
.text:00402124                 pop     ebx
.text:00402125                 mov     esp, ebp
.text:00402127                 pop     ebp
.text:00402128                 retn
.text:00402128 ;   } // starts at 4020E6
.text:00402128 ; } // starts at 402050
.text:00402128 sub_402050      endp
.text:00402128
.text:00402128 ; ---------------------------------------------------------------------------
.text:00402129                 align 10h
.text:00402130 ; START OF FUNCTION CHUNK FOR sub_4010D0
.text:00402130 ;   ADDITIONAL PARENT FUNCTION sub_401340
.text:00402130
.text:00402130 loc_402130:                             ; CODE XREF: sub_4010D0+4B83↓j
.text:00402130                                         ; sub_401340+49B3↓j
.text:00402130 ; __unwind { // SEH_401340
.text:00402130                 mov     eax, [esi]
.text:00402132                 test    eax, eax
.text:00402134                 jz      short loc_402140
.text:00402136                 push    eax
.text:00402137                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040213D                 add     esp, 4
.text:00402140
.text:00402140 loc_402140:                             ; CODE XREF: sub_4010D0+1064↑j
.text:00402140                 mov     dword ptr [esi], 0
.text:00402146                 mov     dword ptr [esi+4], 0
.text:0040214D                 mov     dword ptr [esi+8], 0
.text:00402154                 retn
.text:00402154 ; } // starts at 402130
.text:00402154 ; END OF FUNCTION CHUNK FOR sub_4010D0
.text:00402154 ; ---------------------------------------------------------------------------
.text:00402155                 align 10h
.text:00402160
.text:00402160 ; =============== S U B R O U T I N E =======================================
.text:00402160
.text:00402160
.text:00402160 sub_402160      proc near               ; CODE XREF: sub_4050B0+8A↓p
.text:00402160                 cmp     esi, edi
.text:00402162                 jz      short loc_4021C3
.text:00402164                 cmp     dword ptr [esi+14h], 10h
.text:00402168                 jb      short loc_402176
.text:0040216A                 mov     eax, [esi]
.text:0040216C                 push    eax
.text:0040216D                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00402173                 add     esp, 4
.text:00402176
.text:00402176 loc_402176:                             ; CODE XREF: sub_402160+8↑j
.text:00402176                 mov     dword ptr [esi+14h], 0Fh
.text:0040217D                 mov     dword ptr [esi+10h], 0
.text:00402184                 mov     byte ptr [esi], 0
.text:00402187                 cmp     dword ptr [edi+14h], 10h
.text:0040218B                 jnb     short loc_40219F
.text:0040218D                 mov     ecx, [edi+10h]
.text:00402190                 inc     ecx
.text:00402191                 push    ecx             ; Size
.text:00402192                 push    edi             ; Src
.text:00402193                 push    esi             ; Dst
.text:00402194                 call    ds:memmove
.text:0040219A                 add     esp, 0Ch
.text:0040219D                 jmp     short loc_4021A9
.text:0040219F ; ---------------------------------------------------------------------------
.text:0040219F
.text:0040219F loc_40219F:                             ; CODE XREF: sub_402160+2B↑j
.text:0040219F                 mov     edx, [edi]
.text:004021A1                 mov     [esi], edx
.text:004021A3                 mov     dword ptr [edi], 0
.text:004021A9
.text:004021A9 loc_4021A9:                             ; CODE XREF: sub_402160+3D↑j
.text:004021A9                 mov     eax, [edi+10h]
.text:004021AC                 mov     [esi+10h], eax
.text:004021AF                 mov     ecx, [edi+14h]
.text:004021B2                 mov     [esi+14h], ecx
.text:004021B5                 mov     dword ptr [edi+10h], 0
.text:004021BC                 mov     dword ptr [edi+14h], 0
.text:004021C3
.text:004021C3 loc_4021C3:                             ; CODE XREF: sub_402160+2↑j
.text:004021C3                 mov     eax, esi
.text:004021C5                 retn
.text:004021C5 sub_402160      endp
.text:004021C5
.text:004021C5 ; ---------------------------------------------------------------------------
.text:004021C6                 align 10h
.text:004021D0
.text:004021D0 ; =============== S U B R O U T I N E =======================================
.text:004021D0
.text:004021D0 ; Attributes: bp-based frame
.text:004021D0
.text:004021D0 ; int __stdcall sub_4021D0(int, void *Dst, int)
.text:004021D0 sub_4021D0      proc near               ; CODE XREF: sub_401340+3C↑p
.text:004021D0
.text:004021D0 arg_0           = dword ptr  8
.text:004021D0 Dst             = dword ptr  0Ch
.text:004021D0 arg_8           = dword ptr  10h
.text:004021D0
.text:004021D0                 push    ebp
.text:004021D1                 mov     ebp, esp
.text:004021D3                 mov     ecx, [ebp+Dst]  ; Dst
.text:004021D6                 mov     eax, [ebp+arg_8]
.text:004021D9                 mov     edx, [ebp+arg_0]
.text:004021DC                 mov     [edx], ecx
.text:004021DE                 cmp     ecx, eax
.text:004021E0                 jz      short loc_402241
.text:004021E2                 mov     edx, [ebp+arg_0]
.text:004021E5                 push    ebx
.text:004021E6                 push    esi
.text:004021E7                 push    edi
.text:004021E8                 push    edx
.text:004021E9                 mov     edx, dword_6F8334
.text:004021EF                 push    edx             ; int
.text:004021F0                 call    sub_4032D0
.text:004021F5                 mov     ebx, eax
.text:004021F7                 mov     eax, dword_6F8334
.text:004021FC                 add     esp, 8
.text:004021FF                 mov     edi, eax
.text:00402201                 mov     esi, ebx
.text:00402203                 cmp     ebx, eax
.text:00402205                 jz      short loc_402231
.text:00402207
.text:00402207 loc_402207:                             ; CODE XREF: sub_4021D0+5F↓j
.text:00402207                 cmp     dword ptr [esi+14h], 10h
.text:0040220B                 jb      short loc_402219
.text:0040220D                 mov     eax, [esi]
.text:0040220F                 push    eax
.text:00402210                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00402216                 add     esp, 4
.text:00402219
.text:00402219 loc_402219:                             ; CODE XREF: sub_4021D0+3B↑j
.text:00402219                 mov     dword ptr [esi+14h], 0Fh
.text:00402220                 mov     dword ptr [esi+10h], 0
.text:00402227                 mov     byte ptr [esi], 0
.text:0040222A                 add     esi, 1Ch
.text:0040222D                 cmp     esi, edi
.text:0040222F                 jnz     short loc_402207
.text:00402231
.text:00402231 loc_402231:                             ; CODE XREF: sub_4021D0+35↑j
.text:00402231                 mov     eax, [ebp+arg_0]
.text:00402234                 pop     edi
.text:00402235                 pop     esi
.text:00402236                 mov     dword_6F8334, ebx
.text:0040223C                 pop     ebx
.text:0040223D                 pop     ebp
.text:0040223E                 retn    0Ch
.text:00402241 ; ---------------------------------------------------------------------------
.text:00402241
.text:00402241 loc_402241:                             ; CODE XREF: sub_4021D0+10↑j
.text:00402241                 mov     eax, edx
.text:00402243                 pop     ebp
.text:00402244                 retn    0Ch
.text:00402244 sub_4021D0      endp
.text:00402244
.text:00402244 ; ---------------------------------------------------------------------------
.text:00402247                 align 10h
.text:00402250
.text:00402250 ; =============== S U B R O U T I N E =======================================
.text:00402250
.text:00402250
.text:00402250 sub_402250      proc near               ; CODE XREF: sub_402050+58↑p
.text:00402250                                         ; sub_402050+89↑p
.text:00402250                 mov     ecx, dword_6F8334
.text:00402256                 push    esi
.text:00402257                 push    edi
.text:00402258                 mov     edi, Dst
.text:0040225E                 sub     ecx, edi
.text:00402260                 mov     eax, 92492493h
.text:00402265                 imul    ecx
.text:00402267                 add     edx, ecx
.text:00402269                 sar     edx, 4
.text:0040226C                 mov     ecx, edx
.text:0040226E                 shr     ecx, 1Fh
.text:00402271                 add     ecx, edx
.text:00402273                 cmp     ecx, 9249248h
.text:00402279                 jbe     short loc_402286
.text:0040227B                 push    offset aVectorTTooLong ; "vector<T> too long"
.text:00402280                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:00402286
.text:00402286 loc_402286:                             ; CODE XREF: sub_402250+29↑j
.text:00402286                 mov     esi, dword_6F8338
.text:0040228C                 sub     esi, edi
.text:0040228E                 mov     eax, 92492493h
.text:00402293                 imul    esi
.text:00402295                 add     edx, esi
.text:00402297                 sar     edx, 4
.text:0040229A                 mov     eax, edx
.text:0040229C                 shr     eax, 1Fh
.text:0040229F                 inc     ecx
.text:004022A0                 add     eax, edx
.text:004022A2                 cmp     ecx, eax
.text:004022A4                 jbe     short loc_4022C7
.text:004022A6                 mov     edx, eax
.text:004022A8                 shr     edx, 1
.text:004022AA                 mov     esi, 9249249h
.text:004022AF                 sub     esi, edx
.text:004022B1                 cmp     esi, eax
.text:004022B3                 jnb     short loc_4022B9
.text:004022B5                 xor     eax, eax
.text:004022B7                 jmp     short loc_4022BB
.text:004022B9 ; ---------------------------------------------------------------------------
.text:004022B9
.text:004022B9 loc_4022B9:                             ; CODE XREF: sub_402250+63↑j
.text:004022B9                 add     eax, edx
.text:004022BB
.text:004022BB loc_4022BB:                             ; CODE XREF: sub_402250+67↑j
.text:004022BB                 cmp     eax, ecx
.text:004022BD                 jnb     short loc_4022C1
.text:004022BF                 mov     eax, ecx
.text:004022C1
.text:004022C1 loc_4022C1:                             ; CODE XREF: sub_402250+6D↑j
.text:004022C1                 push    eax
.text:004022C2                 call    sub_402540
.text:004022C7
.text:004022C7 loc_4022C7:                             ; CODE XREF: sub_402250+54↑j
.text:004022C7                 pop     edi
.text:004022C8                 pop     esi
.text:004022C9                 retn
.text:004022C9 sub_402250      endp
.text:004022C9
.text:004022C9 ; ---------------------------------------------------------------------------
.text:004022CA                 align 10h
.text:004022D0
.text:004022D0 ; =============== S U B R O U T I N E =======================================
.text:004022D0
.text:004022D0
.text:004022D0 sub_4022D0      proc near               ; CODE XREF: sub_405E60↓j
.text:004022D0                 push    esi
.text:004022D1                 mov     esi, Dst
.text:004022D7                 test    esi, esi
.text:004022D9                 jz      short loc_402322
.text:004022DB                 mov     eax, dword_6F8334
.text:004022E0                 push    edi
.text:004022E1                 mov     edi, eax
.text:004022E3                 cmp     esi, eax
.text:004022E5                 jz      short loc_402317
.text:004022E7
.text:004022E7 loc_4022E7:                             ; CODE XREF: sub_4022D0+3F↓j
.text:004022E7                 cmp     dword ptr [esi+14h], 10h
.text:004022EB                 jb      short loc_4022F9
.text:004022ED                 mov     eax, [esi]
.text:004022EF                 push    eax
.text:004022F0                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004022F6                 add     esp, 4
.text:004022F9
.text:004022F9 loc_4022F9:                             ; CODE XREF: sub_4022D0+1B↑j
.text:004022F9                 mov     dword ptr [esi+14h], 0Fh
.text:00402300                 mov     dword ptr [esi+10h], 0
.text:00402307                 mov     byte ptr [esi], 0
.text:0040230A                 add     esi, 1Ch
.text:0040230D                 cmp     esi, edi
.text:0040230F                 jnz     short loc_4022E7
.text:00402311                 mov     esi, Dst
.text:00402317
.text:00402317 loc_402317:                             ; CODE XREF: sub_4022D0+15↑j
.text:00402317                 push    esi
.text:00402318                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040231E                 add     esp, 4
.text:00402321                 pop     edi
.text:00402322
.text:00402322 loc_402322:                             ; CODE XREF: sub_4022D0+9↑j
.text:00402322                 mov     Dst, 0
.text:0040232C                 mov     dword_6F8334, 0
.text:00402336                 mov     dword_6F8338, 0
.text:00402340                 pop     esi
.text:00402341                 retn
.text:00402341 sub_4022D0      endp
.text:00402341
.text:00402341 ; ---------------------------------------------------------------------------
.text:00402342                 align 10h
.text:00402350
.text:00402350 ; =============== S U B R O U T I N E =======================================
.text:00402350
.text:00402350
.text:00402350 sub_402350      proc near               ; CODE XREF: sub_401AB0+49↑p
.text:00402350                                         ; sub_401AB0+79↑p ...
.text:00402350                 mov     eax, [ecx+4]
.text:00402353                 push    esi
.text:00402354                 mov     esi, [ecx]
.text:00402356                 sub     eax, esi
.text:00402358                 sar     eax, 3
.text:0040235B                 cmp     eax, 1FFFFFFEh
.text:00402360                 jbe     short loc_40236D
.text:00402362                 push    offset aVectorTTooLong ; "vector<T> too long"
.text:00402367                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:0040236D
.text:0040236D loc_40236D:                             ; CODE XREF: sub_402350+10↑j
.text:0040236D                 mov     edx, [ecx+8]
.text:00402370                 sub     edx, esi
.text:00402372                 inc     eax
.text:00402373                 sar     edx, 3
.text:00402376                 cmp     eax, edx
.text:00402378                 jbe     short loc_40239D
.text:0040237A                 push    edi
.text:0040237B                 mov     esi, edx
.text:0040237D                 shr     esi, 1
.text:0040237F                 mov     edi, 1FFFFFFFh
.text:00402384                 sub     edi, esi
.text:00402386                 cmp     edi, edx
.text:00402388                 pop     edi
.text:00402389                 jnb     short loc_40238F
.text:0040238B                 xor     edx, edx
.text:0040238D                 jmp     short loc_402391
.text:0040238F ; ---------------------------------------------------------------------------
.text:0040238F
.text:0040238F loc_40238F:                             ; CODE XREF: sub_402350+39↑j
.text:0040238F                 add     edx, esi
.text:00402391
.text:00402391 loc_402391:                             ; CODE XREF: sub_402350+3D↑j
.text:00402391                 cmp     edx, eax
.text:00402393                 jnb     short loc_402397
.text:00402395                 mov     edx, eax
.text:00402397
.text:00402397 loc_402397:                             ; CODE XREF: sub_402350+43↑j
.text:00402397                 push    edx
.text:00402398                 call    sub_4026C0
.text:0040239D
.text:0040239D loc_40239D:                             ; CODE XREF: sub_402350+28↑j
.text:0040239D                 pop     esi
.text:0040239E                 retn
.text:0040239E sub_402350      endp
.text:0040239E
.text:0040239E ; ---------------------------------------------------------------------------
.text:0040239F                 align 10h
.text:004023A0
.text:004023A0 ; =============== S U B R O U T I N E =======================================
.text:004023A0
.text:004023A0
.text:004023A0 sub_4023A0      proc near               ; CODE XREF: sub_4010D0+FB↑p
.text:004023A0                                         ; sub_4010D0+120↑p
.text:004023A0                 push    esi
.text:004023A1                 mov     esi, eax
.text:004023A3                 mov     edx, [esi]
.text:004023A5                 mov     eax, [esi+4]
.text:004023A8                 sub     eax, edx
.text:004023AA                 sar     eax, 2
.text:004023AD                 cmp     eax, 3FFFFFFEh
.text:004023B2                 jbe     short loc_4023BF
.text:004023B4                 push    offset aVectorTTooLong ; "vector<T> too long"
.text:004023B9                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:004023BF
.text:004023BF loc_4023BF:                             ; CODE XREF: sub_4023A0+12↑j
.text:004023BF                 mov     ecx, [esi+8]
.text:004023C2                 sub     ecx, edx
.text:004023C4                 inc     eax
.text:004023C5                 sar     ecx, 2
.text:004023C8                 cmp     eax, ecx
.text:004023CA                 jbe     short loc_4023EF
.text:004023CC                 push    edi
.text:004023CD                 mov     edx, ecx
.text:004023CF                 shr     edx, 1
.text:004023D1                 mov     edi, 3FFFFFFFh
.text:004023D6                 sub     edi, edx
.text:004023D8                 cmp     edi, ecx
.text:004023DA                 pop     edi
.text:004023DB                 jnb     short loc_4023E1
.text:004023DD                 xor     ecx, ecx
.text:004023DF                 jmp     short loc_4023E3
.text:004023E1 ; ---------------------------------------------------------------------------
.text:004023E1
.text:004023E1 loc_4023E1:                             ; CODE XREF: sub_4023A0+3B↑j
.text:004023E1                 add     ecx, edx
.text:004023E3
.text:004023E3 loc_4023E3:                             ; CODE XREF: sub_4023A0+3F↑j
.text:004023E3                 cmp     ecx, eax
.text:004023E5                 jnb     short loc_4023E9
.text:004023E7                 mov     ecx, eax
.text:004023E9
.text:004023E9 loc_4023E9:                             ; CODE XREF: sub_4023A0+45↑j
.text:004023E9                 push    ecx
.text:004023EA                 call    sub_402790
.text:004023EF
.text:004023EF loc_4023EF:                             ; CODE XREF: sub_4023A0+2A↑j
.text:004023EF                 pop     esi
.text:004023F0                 retn
.text:004023F0 sub_4023A0      endp
.text:004023F0
.text:004023F0 ; ---------------------------------------------------------------------------
.text:004023F1                 align 10h
.text:00402400
.text:00402400 ; =============== S U B R O U T I N E =======================================
.text:00402400
.text:00402400 ; Attributes: bp-based frame
.text:00402400
.text:00402400 sub_402400      proc near               ; CODE XREF: sub_402EA0+2CEC↓p
.text:00402400                                         ; sub_402C70+2F5C↓p
.text:00402400
.text:00402400 var_C           = dword ptr -0Ch
.text:00402400 var_4           = dword ptr -4
.text:00402400 arg_0           = dword ptr  8
.text:00402400 arg_4           = dword ptr  0Ch
.text:00402400
.text:00402400 ; FUNCTION CHUNK AT .text:00402810 SIZE 00000019 BYTES
.text:00402400 ; FUNCTION CHUNK AT .text:00405B50 SIZE 00000023 BYTES
.text:00402400
.text:00402400 ; __unwind { // SEH_402400
.text:00402400                 push    ebp
.text:00402401                 mov     ebp, esp
.text:00402403                 push    0FFFFFFFFh
.text:00402405                 push    offset SEH_402400
.text:0040240A                 mov     eax, large fs:0
.text:00402410                 push    eax
.text:00402411                 push    esi
.text:00402412                 mov     eax, ___security_cookie
.text:00402417                 xor     eax, ebp
.text:00402419                 push    eax
.text:0040241A                 lea     eax, [ebp+var_C]
.text:0040241D                 mov     large fs:0, eax
.text:00402423                 mov     esi, [ebp+arg_0]
.text:00402426 ;   try {
.text:00402426                 mov     [ebp+var_4], 0
.text:0040242D                 call    ds:?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
.text:00402433                 test    al, al
.text:00402435                 jnz     short loc_40243F
.text:00402437                 mov     ecx, [esi]
.text:00402439                 call    ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
.text:00402439 ;   } // starts at 402426
.text:0040243F
.text:0040243F loc_40243F:                             ; CODE XREF: sub_402400+35↑j
.text:0040243F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00402446                 mov     eax, [esi]
.text:00402448                 mov     ecx, [eax]
.text:0040244A                 mov     edx, [ecx+4]
.text:0040244D                 mov     eax, [edx+eax+38h]
.text:00402451                 test    eax, eax
.text:00402453                 jz      short loc_40245E
.text:00402455                 mov     edx, [eax]
.text:00402457                 mov     ecx, eax
.text:00402459                 mov     eax, [edx+8]
.text:0040245C                 call    eax
.text:0040245E
.text:0040245E loc_40245E:                             ; CODE XREF: sub_402400+53↑j
.text:0040245E                 mov     ecx, [ebp+var_C]
.text:00402461                 mov     large fs:0, ecx
.text:00402468                 pop     ecx
.text:00402469                 pop     esi
.text:0040246A                 mov     esp, ebp
.text:0040246C                 pop     ebp
.text:0040246D                 retn    4
.text:0040246D ; } // starts at 402400
.text:0040246D sub_402400      endp
.text:0040246D
.text:00402470
.text:00402470 ; =============== S U B R O U T I N E =======================================
.text:00402470
.text:00402470
.text:00402470 sub_402470      proc near               ; CODE XREF: sub_401340+672↑p
.text:00402470                                         ; sub_401340+6D2↑p ...
.text:00402470                 push    ebx
.text:00402471                 mov     ebx, eax
.text:00402473                 test    ebx, ebx
.text:00402475                 jz      short loc_4024C2
.text:00402477                 mov     ecx, [esi+14h]
.text:0040247A                 cmp     ecx, 10h
.text:0040247D                 jb      short loc_402483
.text:0040247F                 mov     eax, [esi]
.text:00402481                 jmp     short loc_402485
.text:00402483 ; ---------------------------------------------------------------------------
.text:00402483
.text:00402483 loc_402483:                             ; CODE XREF: sub_402470+D↑j
.text:00402483                 mov     eax, esi
.text:00402485
.text:00402485 loc_402485:                             ; CODE XREF: sub_402470+11↑j
.text:00402485                 cmp     ebx, eax
.text:00402487                 jb      short loc_4024C2
.text:00402489                 cmp     ecx, 10h
.text:0040248C                 jb      short loc_402492
.text:0040248E                 mov     eax, [esi]
.text:00402490                 jmp     short loc_402494
.text:00402492 ; ---------------------------------------------------------------------------
.text:00402492
.text:00402492 loc_402492:                             ; CODE XREF: sub_402470+1C↑j
.text:00402492                 mov     eax, esi
.text:00402494
.text:00402494 loc_402494:                             ; CODE XREF: sub_402470+20↑j
.text:00402494                 mov     edx, [esi+10h]
.text:00402497                 add     edx, eax
.text:00402499                 cmp     edx, ebx
.text:0040249B                 jbe     short loc_4024C2
.text:0040249D                 cmp     ecx, 10h
.text:004024A0                 jb      short loc_4024B2
.text:004024A2                 mov     eax, [esi]
.text:004024A4                 sub     ebx, eax
.text:004024A6                 push    esi             ; int
.text:004024A7                 mov     eax, edi
.text:004024A9                 mov     ecx, esi        ; int
.text:004024AB                 call    sub_402830
.text:004024B0                 pop     ebx
.text:004024B1                 retn
.text:004024B2 ; ---------------------------------------------------------------------------
.text:004024B2
.text:004024B2 loc_4024B2:                             ; CODE XREF: sub_402470+30↑j
.text:004024B2                 mov     eax, esi
.text:004024B4                 sub     ebx, eax
.text:004024B6                 push    esi             ; int
.text:004024B7                 mov     eax, edi
.text:004024B9                 mov     ecx, esi        ; int
.text:004024BB                 call    sub_402830
.text:004024C0                 pop     ebx
.text:004024C1                 retn
.text:004024C2 ; ---------------------------------------------------------------------------
.text:004024C2
.text:004024C2 loc_4024C2:                             ; CODE XREF: sub_402470+5↑j
.text:004024C2                                         ; sub_402470+17↑j ...
.text:004024C2                 cmp     edi, 0FFFFFFFEh
.text:004024C5                 jbe     short loc_4024D2
.text:004024C7                 push    offset aStringTooLong ; "string too long"
.text:004024CC                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:004024D2
.text:004024D2 loc_4024D2:                             ; CODE XREF: sub_402470+55↑j
.text:004024D2                 mov     eax, [esi+14h]
.text:004024D5                 cmp     eax, edi
.text:004024D7                 jnb     short loc_4024F2
.text:004024D9                 mov     eax, [esi+10h]
.text:004024DC                 push    eax             ; Size
.text:004024DD                 push    edi             ; Dst
.text:004024DE                 push    esi             ; int
.text:004024DF                 call    sub_402AB0
.text:004024E4                 test    edi, edi
.text:004024E6                 jz      short loc_402534
.text:004024E8
.text:004024E8 loc_4024E8:                             ; CODE XREF: sub_402470+84↓j
.text:004024E8                 cmp     dword ptr [esi+14h], 10h
.text:004024EC                 jb      short loc_40250E
.text:004024EE                 mov     eax, [esi]
.text:004024F0                 jmp     short loc_402510
.text:004024F2 ; ---------------------------------------------------------------------------
.text:004024F2
.text:004024F2 loc_4024F2:                             ; CODE XREF: sub_402470+67↑j
.text:004024F2                 test    edi, edi
.text:004024F4                 jnz     short loc_4024E8
.text:004024F6                 mov     [esi+10h], edi
.text:004024F9                 cmp     eax, 10h
.text:004024FC                 jb      short loc_402507
.text:004024FE                 mov     eax, [esi]
.text:00402500                 mov     byte ptr [eax], 0
.text:00402503                 mov     eax, esi
.text:00402505                 pop     ebx
.text:00402506                 retn
.text:00402507 ; ---------------------------------------------------------------------------
.text:00402507
.text:00402507 loc_402507:                             ; CODE XREF: sub_402470+8C↑j
.text:00402507                 mov     eax, esi
.text:00402509                 mov     byte ptr [eax], 0
.text:0040250C                 pop     ebx
.text:0040250D                 retn
.text:0040250E ; ---------------------------------------------------------------------------
.text:0040250E
.text:0040250E loc_40250E:                             ; CODE XREF: sub_402470+7C↑j
.text:0040250E                 mov     eax, esi
.text:00402510
.text:00402510 loc_402510:                             ; CODE XREF: sub_402470+80↑j
.text:00402510                 push    edi             ; Size
.text:00402511                 push    ebx             ; Src
.text:00402512                 push    eax             ; Dst
.text:00402513                 call    memcpy
.text:00402518                 add     esp, 0Ch
.text:0040251B                 cmp     dword ptr [esi+14h], 10h
.text:0040251F                 mov     [esi+10h], edi
.text:00402522                 jb      short loc_40252E
.text:00402524                 mov     eax, [esi]
.text:00402526                 mov     byte ptr [eax+edi], 0
.text:0040252A                 mov     eax, esi
.text:0040252C                 pop     ebx
.text:0040252D                 retn
.text:0040252E ; ---------------------------------------------------------------------------
.text:0040252E
.text:0040252E loc_40252E:                             ; CODE XREF: sub_402470+B2↑j
.text:0040252E                 mov     eax, esi
.text:00402530                 mov     byte ptr [eax+edi], 0
.text:00402534
.text:00402534 loc_402534:                             ; CODE XREF: sub_402470+76↑j
.text:00402534                 mov     eax, esi
.text:00402536                 pop     ebx
.text:00402537                 retn
.text:00402537 sub_402470      endp
.text:00402537
.text:00402537 ; ---------------------------------------------------------------------------
.text:00402538                 align 10h
.text:00402540
.text:00402540 ; =============== S U B R O U T I N E =======================================
.text:00402540
.text:00402540 ; Attributes: bp-based frame
.text:00402540
.text:00402540 sub_402540      proc near               ; CODE XREF: sub_402250+72↑p
.text:00402540
.text:00402540 var_14          = dword ptr -14h
.text:00402540 var_10          = dword ptr -10h
.text:00402540 var_C           = dword ptr -0Ch
.text:00402540 var_4           = dword ptr -4
.text:00402540 arg_0           = dword ptr  8
.text:00402540 arg_4           = dword ptr  0Ch
.text:00402540
.text:00402540 ; FUNCTION CHUNK AT .text:00405CA0 SIZE 0000001B BYTES
.text:00402540
.text:00402540 ; __unwind { // SEH_402540
.text:00402540                 push    ebp
.text:00402541                 mov     ebp, esp
.text:00402543                 push    0FFFFFFFFh
.text:00402545                 push    offset SEH_402540
.text:0040254A                 mov     eax, large fs:0
.text:00402550                 push    eax
.text:00402551                 sub     esp, 8
.text:00402554                 push    ebx
.text:00402555                 push    esi
.text:00402556                 push    edi
.text:00402557                 mov     eax, ___security_cookie
.text:0040255C                 xor     eax, ebp
.text:0040255E                 push    eax
.text:0040255F                 lea     eax, [ebp+var_C]
.text:00402562                 mov     large fs:0, eax
.text:00402568                 mov     [ebp+var_10], esp
.text:0040256B                 mov     esi, [ebp+arg_0]
.text:0040256E                 cmp     esi, 9249249h
.text:00402574                 jbe     short loc_402581
.text:00402576                 push    offset aVectorTTooLong ; "vector<T> too long"
.text:0040257B                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:00402581
.text:00402581 loc_402581:                             ; CODE XREF: sub_402540+34↑j
.text:00402581                 mov     ecx, dword_6F8338
.text:00402587                 sub     ecx, Dst
.text:0040258D                 mov     eax, 92492493h
.text:00402592                 imul    ecx
.text:00402594                 add     edx, ecx
.text:00402596                 sar     edx, 4
.text:00402599                 mov     eax, edx
.text:0040259B                 shr     eax, 1Fh
.text:0040259E                 add     eax, edx
.text:004025A0                 cmp     eax, esi
.text:004025A2                 jnb     loc_402647
.text:004025A8                 mov     ecx, esi
.text:004025AA                 call    sub_402910
.text:004025AF ;   try {
.text:004025AF                 mov     [ebp+var_4], 0
.text:004025B6                 mov     ecx, [ebp+arg_0]
.text:004025B9                 mov     edx, dword_6F8334
.text:004025BF                 push    ecx             ; int
.text:004025C0                 mov     edi, eax
.text:004025C2                 push    edx             ; int
.text:004025C3                 mov     edx, Dst
.text:004025C9                 mov     ecx, edi        ; Dst
.text:004025CB                 mov     [ebp+var_14], edi
.text:004025CE                 call    sub_404000
.text:004025D3                 mov     ebx, Dst
.text:004025D9                 mov     ecx, dword_6F8334
.text:004025DF                 sub     ecx, ebx
.text:004025E1                 mov     eax, 92492493h
.text:004025E6                 imul    ecx
.text:004025E8                 add     edx, ecx
.text:004025EA                 sar     edx, 4
.text:004025ED                 mov     esi, edx
.text:004025EF                 shr     esi, 1Fh
.text:004025F2                 add     esp, 8
.text:004025F5                 add     esi, edx
.text:004025F7                 test    ebx, ebx
.text:004025F9                 jz      short loc_40261A
.text:004025FB                 mov     edi, dword_6F8334
.text:00402601                 mov     eax, ebx
.text:00402603                 call    sub_402680
.text:00402608                 mov     eax, Dst
.text:0040260D                 push    eax
.text:0040260E                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00402614                 mov     edi, [ebp+var_14]
.text:00402617                 add     esp, 4
.text:0040261A
.text:0040261A loc_40261A:                             ; CODE XREF: sub_402540+B9↑j
.text:0040261A                 mov     eax, [ebp+arg_0]
.text:0040261D                 lea     ecx, ds:0[eax*8]
.text:00402624                 sub     ecx, eax
.text:00402626                 lea     eax, ds:0[esi*8]
.text:0040262D                 lea     edx, [edi+ecx*4]
.text:00402630                 sub     eax, esi
.text:00402632                 lea     ecx, [edi+eax*4]
.text:00402635                 mov     dword_6F8338, edx
.text:0040263B                 mov     dword_6F8334, ecx
.text:00402641                 mov     Dst, edi
.text:00402647
.text:00402647 loc_402647:                             ; CODE XREF: sub_402540+62↑j
.text:00402647                 mov     ecx, [ebp+var_C]
.text:0040264A                 mov     large fs:0, ecx
.text:00402651                 pop     ecx
.text:00402652                 pop     edi
.text:00402653                 pop     esi
.text:00402654                 pop     ebx
.text:00402655                 mov     esp, ebp
.text:00402657                 pop     ebp
.text:00402658                 retn    4
.text:0040265B ; ---------------------------------------------------------------------------
.text:0040265B
.text:0040265B loc_40265B:                             ; DATA XREF: .rdata:stru_406788↓o
.text:0040265B ;   catch(...) // owned by 4025AF
.text:0040265B                 mov     edx, [ebp+var_14]
.text:0040265E                 push    edx
.text:0040265F                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00402665                 add     esp, 4
.text:00402668                 push    0
.text:0040266A                 push    0
.text:0040266C                 call    _CxxThrowException
.text:0040266C ;   } // starts at 4025AF
.text:0040266C ; } // starts at 402540
.text:0040266C sub_402540      endp
.text:0040266C
.text:0040266C ; ---------------------------------------------------------------------------
.text:00402671                 align 10h
.text:00402680
.text:00402680 ; =============== S U B R O U T I N E =======================================
.text:00402680
.text:00402680
.text:00402680 sub_402680      proc near               ; CODE XREF: sub_402540+C3↑p
.text:00402680                 push    esi
.text:00402681                 mov     esi, eax
.text:00402683                 cmp     esi, edi
.text:00402685                 jz      short loc_4026B1
.text:00402687
.text:00402687 loc_402687:                             ; CODE XREF: sub_402680+2F↓j
.text:00402687                 cmp     dword ptr [esi+14h], 10h
.text:0040268B                 jb      short loc_402699
.text:0040268D                 mov     eax, [esi]
.text:0040268F                 push    eax
.text:00402690                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00402696                 add     esp, 4
.text:00402699
.text:00402699 loc_402699:                             ; CODE XREF: sub_402680+B↑j
.text:00402699                 mov     dword ptr [esi+14h], 0Fh
.text:004026A0                 mov     dword ptr [esi+10h], 0
.text:004026A7                 mov     byte ptr [esi], 0
.text:004026AA                 add     esi, 1Ch
.text:004026AD                 cmp     esi, edi
.text:004026AF                 jnz     short loc_402687
.text:004026B1
.text:004026B1 loc_4026B1:                             ; CODE XREF: sub_402680+5↑j
.text:004026B1                 pop     esi
.text:004026B2                 retn
.text:004026B2 sub_402680      endp
.text:004026B2
.text:004026B2 ; ---------------------------------------------------------------------------
.text:004026B3                 align 10h
.text:004026C0
.text:004026C0 ; =============== S U B R O U T I N E =======================================
.text:004026C0
.text:004026C0 ; Attributes: bp-based frame
.text:004026C0
.text:004026C0 sub_4026C0      proc near               ; CODE XREF: sub_401340+DC↑p
.text:004026C0                                         ; sub_401340+14B↑p ...
.text:004026C0
.text:004026C0 var_14          = dword ptr -14h
.text:004026C0 var_10          = dword ptr -10h
.text:004026C0 var_C           = dword ptr -0Ch
.text:004026C0 var_4           = dword ptr -4
.text:004026C0 arg_0           = dword ptr  8
.text:004026C0 arg_4           = dword ptr  0Ch
.text:004026C0
.text:004026C0 ; FUNCTION CHUNK AT .text:00405C20 SIZE 0000001B BYTES
.text:004026C0
.text:004026C0 ; __unwind { // SEH_4026C0
.text:004026C0                 push    ebp
.text:004026C1                 mov     ebp, esp
.text:004026C3                 push    0FFFFFFFFh
.text:004026C5                 push    offset SEH_4026C0
.text:004026CA                 mov     eax, large fs:0
.text:004026D0                 push    eax
.text:004026D1                 sub     esp, 8
.text:004026D4                 push    ebx
.text:004026D5                 push    esi
.text:004026D6                 push    edi
.text:004026D7                 mov     eax, ___security_cookie
.text:004026DC                 xor     eax, ebp
.text:004026DE                 push    eax
.text:004026DF                 lea     eax, [ebp+var_C]
.text:004026E2                 mov     large fs:0, eax
.text:004026E8                 mov     [ebp+var_10], esp
.text:004026EB                 mov     esi, ecx
.text:004026ED                 mov     ecx, [ebp+arg_0]
.text:004026F0                 cmp     ecx, 1FFFFFFFh
.text:004026F6                 jbe     short loc_402703
.text:004026F8                 push    offset aVectorTTooLong ; "vector<T> too long"
.text:004026FD                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:00402703
.text:00402703 loc_402703:                             ; CODE XREF: sub_4026C0+36↑j
.text:00402703                 mov     eax, [esi+8]
.text:00402706                 sub     eax, [esi]
.text:00402708                 sar     eax, 3
.text:0040270B                 cmp     eax, ecx
.text:0040270D                 jnb     short loc_40275C
.text:0040270F                 call    sub_402970
.text:00402714                 mov     ebx, eax
.text:00402716 ;   try {
.text:00402716                 mov     [ebp+var_4], 0
.text:0040271D                 mov     eax, [ebp+arg_0]
.text:00402720                 mov     edx, [esi+4]
.text:00402723                 mov     ecx, [esi]
.text:00402725                 push    eax
.text:00402726                 mov     eax, ebx
.text:00402728                 mov     [ebp+var_14], ebx
.text:0040272B                 call    sub_4040C0
.text:00402730                 mov     eax, [esi]
.text:00402732                 mov     edi, [esi+4]
.text:00402735                 sub     edi, eax
.text:00402737                 add     esp, 4
.text:0040273A                 sar     edi, 3
.text:0040273D                 test    eax, eax
.text:0040273F                 jz      short loc_40274B
.text:00402741                 push    eax
.text:00402742                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00402748                 add     esp, 4
.text:0040274B
.text:0040274B loc_40274B:                             ; CODE XREF: sub_4026C0+7F↑j
.text:0040274B                 mov     ecx, [ebp+arg_0]
.text:0040274E                 lea     edx, [ebx+ecx*8]
.text:00402751                 lea     eax, [ebx+edi*8]
.text:00402754                 mov     [esi+8], edx
.text:00402757                 mov     [esi+4], eax
.text:0040275A                 mov     [esi], ebx
.text:0040275C
.text:0040275C loc_40275C:                             ; CODE XREF: sub_4026C0+4D↑j
.text:0040275C                 mov     ecx, [ebp+var_C]
.text:0040275F                 mov     large fs:0, ecx
.text:00402766                 pop     ecx
.text:00402767                 pop     edi
.text:00402768                 pop     esi
.text:00402769                 pop     ebx
.text:0040276A                 mov     esp, ebp
.text:0040276C                 pop     ebp
.text:0040276D                 retn    4
.text:00402770 ; ---------------------------------------------------------------------------
.text:00402770
.text:00402770 loc_402770:                             ; DATA XREF: .rdata:stru_4066C8↓o
.text:00402770 ;   catch(...) // owned by 402716
.text:00402770                 mov     ecx, [ebp+var_14]
.text:00402773                 push    ecx
.text:00402774                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040277A                 add     esp, 4
.text:0040277D                 push    0
.text:0040277F                 push    0
.text:00402781                 call    _CxxThrowException
.text:00402781 ;   } // starts at 402716
.text:00402781 ; } // starts at 4026C0
.text:00402781 sub_4026C0      endp
.text:00402781
.text:00402781 ; ---------------------------------------------------------------------------
.text:00402786                 align 10h
.text:00402790
.text:00402790 ; =============== S U B R O U T I N E =======================================
.text:00402790
.text:00402790 ; Attributes: bp-based frame
.text:00402790
.text:00402790 sub_402790      proc near               ; CODE XREF: sub_4010D0+197↑p
.text:00402790                                         ; sub_4010D0+1EB↑p ...
.text:00402790
.text:00402790 arg_0           = dword ptr  8
.text:00402790
.text:00402790                 push    ebp
.text:00402791                 mov     ebp, esp
.text:00402793                 mov     ecx, [ebp+arg_0]
.text:00402796                 cmp     ecx, 3FFFFFFFh
.text:0040279C                 jbe     short loc_4027A9
.text:0040279E                 push    offset aVectorTTooLong ; "vector<T> too long"
.text:004027A3                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:004027A9
.text:004027A9 loc_4027A9:                             ; CODE XREF: sub_402790+C↑j
.text:004027A9                 mov     eax, [esi+8]
.text:004027AC                 sub     eax, [esi]
.text:004027AE                 sar     eax, 2
.text:004027B1                 cmp     eax, ecx
.text:004027B3                 jnb     short loc_402803
.text:004027B5                 push    ebx
.text:004027B6                 push    edi
.text:004027B7                 call    sub_4029D0
.text:004027BC                 mov     ecx, [esi+4]
.text:004027BF                 mov     ebx, eax
.text:004027C1                 mov     eax, [esi]
.text:004027C3                 sub     ecx, eax
.text:004027C5                 sar     ecx, 2
.text:004027C8                 add     ecx, ecx
.text:004027CA                 add     ecx, ecx
.text:004027CC                 push    ecx             ; Size
.text:004027CD                 push    eax             ; Src
.text:004027CE                 push    ebx             ; Dst
.text:004027CF                 call    ds:memmove
.text:004027D5                 mov     eax, [esi]
.text:004027D7                 mov     edi, [esi+4]
.text:004027DA                 sub     edi, eax
.text:004027DC                 add     esp, 0Ch
.text:004027DF                 sar     edi, 2
.text:004027E2                 test    eax, eax
.text:004027E4                 jz      short loc_4027F0
.text:004027E6                 push    eax
.text:004027E7                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004027ED                 add     esp, 4
.text:004027F0
.text:004027F0 loc_4027F0:                             ; CODE XREF: sub_402790+54↑j
.text:004027F0                 mov     edx, [ebp+arg_0]
.text:004027F3                 lea     ecx, [ebx+edi*4]
.text:004027F6                 lea     eax, [ebx+edx*4]
.text:004027F9                 pop     edi
.text:004027FA                 mov     [esi], ebx
.text:004027FC                 mov     [esi+8], eax
.text:004027FF                 mov     [esi+4], ecx
.text:00402802                 pop     ebx
.text:00402803
.text:00402803 loc_402803:                             ; CODE XREF: sub_402790+23↑j
.text:00402803                 pop     ebp
.text:00402804                 retn    4
.text:00402804 sub_402790      endp
.text:00402804
.text:00402804 ; ---------------------------------------------------------------------------
.text:00402807                 align 10h
.text:00402810 ; START OF FUNCTION CHUNK FOR sub_402C70
.text:00402810 ;   ADDITIONAL PARENT FUNCTION sub_402400
.text:00402810 ;   ADDITIONAL PARENT FUNCTION sub_402EA0
.text:00402810
.text:00402810 loc_402810:                             ; CODE XREF: sub_402400+3753↓j
.text:00402810                                         ; sub_402EA0+2CE3↓j ...
.text:00402810 ; __unwind { // SEH_402C70
.text:00402810                 mov     eax, [eax]
.text:00402812                 mov     ecx, [eax]
.text:00402814                 mov     edx, [ecx+4]
.text:00402817                 mov     eax, [edx+eax+38h]
.text:0040281B                 test    eax, eax
.text:0040281D                 jz      short locret_402828
.text:0040281F                 mov     edx, [eax]
.text:00402821                 mov     ecx, eax
.text:00402823                 mov     eax, [edx+8]
.text:00402826                 jmp     eax
.text:00402828 ; ---------------------------------------------------------------------------
.text:00402828
.text:00402828 locret_402828:                          ; CODE XREF: sub_402C70-453↑j
.text:00402828                 retn
.text:00402828 ; } // starts at 402810
.text:00402828 ; END OF FUNCTION CHUNK FOR sub_402C70
.text:00402828 ; ---------------------------------------------------------------------------
.text:00402829                 align 10h
.text:00402830
.text:00402830 ; =============== S U B R O U T I N E =======================================
.text:00402830
.text:00402830 ; Attributes: bp-based frame
.text:00402830
.text:00402830 ; int __thiscall sub_402830(int, int)
.text:00402830 sub_402830      proc near               ; CODE XREF: sub_402050+B3↑p
.text:00402830                                         ; sub_402470+3B↑p ...
.text:00402830
.text:00402830 arg_0           = dword ptr  8
.text:00402830
.text:00402830                 push    ebp
.text:00402831                 mov     ebp, esp
.text:00402833                 push    esi
.text:00402834                 mov     esi, ecx
.text:00402836                 mov     ecx, [ebp+arg_0]
.text:00402839                 push    edi
.text:0040283A                 mov     edi, [ecx+10h]
.text:0040283D                 cmp     edi, ebx
.text:0040283F                 jnb     short loc_40284C
.text:00402841                 push    offset aInvalidStringP ; "invalid string position"
.text:00402846                 call    ds:?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text:0040284C
.text:0040284C loc_40284C:                             ; CODE XREF: sub_402830+F↑j
.text:0040284C                 sub     edi, ebx
.text:0040284E                 cmp     eax, edi
.text:00402850                 jnb     short loc_402854
.text:00402852                 mov     edi, eax
.text:00402854
.text:00402854 loc_402854:                             ; CODE XREF: sub_402830+20↑j
.text:00402854                 cmp     esi, ecx
.text:00402856                 jnz     short loc_402874
.text:00402858                 lea     ecx, [edi+ebx]
.text:0040285B                 or      eax, 0FFFFFFFFh
.text:0040285E                 call    sub_402A30
.text:00402863                 mov     eax, ebx
.text:00402865                 xor     ecx, ecx
.text:00402867                 call    sub_402A30
.text:0040286C                 pop     edi
.text:0040286D                 mov     eax, esi
.text:0040286F                 pop     esi
.text:00402870                 pop     ebp
.text:00402871                 retn    4
.text:00402874 ; ---------------------------------------------------------------------------
.text:00402874
.text:00402874 loc_402874:                             ; CODE XREF: sub_402830+26↑j
.text:00402874                 cmp     edi, 0FFFFFFFEh
.text:00402877                 jbe     short loc_402884
.text:00402879                 push    offset aStringTooLong ; "string too long"
.text:0040287E                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:00402884
.text:00402884 loc_402884:                             ; CODE XREF: sub_402830+47↑j
.text:00402884                 mov     eax, [esi+14h]
.text:00402887                 cmp     eax, edi
.text:00402889                 jnb     short loc_4028B2
.text:0040288B                 mov     eax, [esi+10h]
.text:0040288E                 push    eax             ; Size
.text:0040288F                 push    edi             ; Dst
.text:00402890                 push    esi             ; int
.text:00402891                 call    sub_402AB0
.text:00402896                 mov     ecx, [ebp+arg_0]
.text:00402899                 test    edi, edi
.text:0040289B                 jz      short loc_402902
.text:0040289D
.text:0040289D loc_40289D:                             ; CODE XREF: sub_402830+84↓j
.text:0040289D                 mov     eax, 10h
.text:004028A2                 cmp     [ecx+14h], eax
.text:004028A5                 jb      short loc_4028A9
.text:004028A7                 mov     ecx, [ecx]
.text:004028A9
.text:004028A9 loc_4028A9:                             ; CODE XREF: sub_402830+75↑j
.text:004028A9                 cmp     [esi+14h], eax
.text:004028AC                 jb      short loc_4028D6
.text:004028AE                 mov     eax, [esi]
.text:004028B0                 jmp     short loc_4028D8
.text:004028B2 ; ---------------------------------------------------------------------------
.text:004028B2
.text:004028B2 loc_4028B2:                             ; CODE XREF: sub_402830+59↑j
.text:004028B2                 test    edi, edi
.text:004028B4                 jnz     short loc_40289D
.text:004028B6                 mov     [esi+10h], edi
.text:004028B9                 cmp     eax, 10h
.text:004028BC                 jb      short loc_4028CB
.text:004028BE                 mov     eax, [esi]
.text:004028C0                 mov     byte ptr [eax], 0
.text:004028C3                 pop     edi
.text:004028C4                 mov     eax, esi
.text:004028C6                 pop     esi
.text:004028C7                 pop     ebp
.text:004028C8                 retn    4
.text:004028CB ; ---------------------------------------------------------------------------
.text:004028CB
.text:004028CB loc_4028CB:                             ; CODE XREF: sub_402830+8C↑j
.text:004028CB                 mov     eax, esi
.text:004028CD                 pop     edi
.text:004028CE                 mov     byte ptr [eax], 0
.text:004028D1                 pop     esi
.text:004028D2                 pop     ebp
.text:004028D3                 retn    4
.text:004028D6 ; ---------------------------------------------------------------------------
.text:004028D6
.text:004028D6 loc_4028D6:                             ; CODE XREF: sub_402830+7C↑j
.text:004028D6                 mov     eax, esi
.text:004028D8
.text:004028D8 loc_4028D8:                             ; CODE XREF: sub_402830+80↑j
.text:004028D8                 push    edi             ; Size
.text:004028D9                 add     ecx, ebx
.text:004028DB                 push    ecx             ; Src
.text:004028DC                 push    eax             ; Dst
.text:004028DD                 call    memcpy
.text:004028E2                 add     esp, 0Ch
.text:004028E5                 cmp     dword ptr [esi+14h], 10h
.text:004028E9                 mov     [esi+10h], edi
.text:004028EC                 jb      short loc_4028FC
.text:004028EE                 mov     eax, [esi]
.text:004028F0                 mov     byte ptr [eax+edi], 0
.text:004028F4                 pop     edi
.text:004028F5                 mov     eax, esi
.text:004028F7                 pop     esi
.text:004028F8                 pop     ebp
.text:004028F9                 retn    4
.text:004028FC ; ---------------------------------------------------------------------------
.text:004028FC
.text:004028FC loc_4028FC:                             ; CODE XREF: sub_402830+BC↑j
.text:004028FC                 mov     eax, esi
.text:004028FE                 mov     byte ptr [eax+edi], 0
.text:00402902
.text:00402902 loc_402902:                             ; CODE XREF: sub_402830+6B↑j
.text:00402902                 pop     edi
.text:00402903                 mov     eax, esi
.text:00402905                 pop     esi
.text:00402906                 pop     ebp
.text:00402907                 retn    4
.text:00402907 sub_402830      endp
.text:00402907
.text:00402907 ; ---------------------------------------------------------------------------
.text:0040290A                 align 10h
.text:00402910
.text:00402910 ; =============== S U B R O U T I N E =======================================
.text:00402910
.text:00402910 ; Attributes: bp-based frame
.text:00402910
.text:00402910 sub_402910      proc near               ; CODE XREF: sub_402540+6A↑p
.text:00402910
.text:00402910 var_10          = dword ptr -10h
.text:00402910 var_4           = dword ptr -4
.text:00402910
.text:00402910                 push    ebp
.text:00402911                 mov     ebp, esp
.text:00402913                 sub     esp, 10h
.text:00402916                 xor     eax, eax
.text:00402918                 test    ecx, ecx
.text:0040291A                 jz      short loc_402968
.text:0040291C                 cmp     ecx, 9249249h
.text:00402922                 ja      short loc_40293F
.text:00402924                 lea     eax, ds:0[ecx*8]
.text:0040292B                 sub     eax, ecx
.text:0040292D                 add     eax, eax
.text:0040292F                 add     eax, eax
.text:00402931                 push    eax
.text:00402932                 call    ds:??2@YAPAXI@Z ; operator new(uint)
.text:00402938                 add     esp, 4
.text:0040293B                 test    eax, eax
.text:0040293D                 jnz     short loc_402968
.text:0040293F
.text:0040293F loc_40293F:                             ; CODE XREF: sub_402910+12↑j
.text:0040293F                 lea     ecx, [ebp+var_4]
.text:00402942                 push    ecx
.text:00402943                 lea     ecx, [ebp+var_10]
.text:00402946                 mov     [ebp+var_4], 0
.text:0040294D                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:00402953                 push    offset __TI2?AVbad_alloc@std@@ ; throw info for 'class std::bad_alloc'
.text:00402958                 lea     edx, [ebp+var_10]
.text:0040295B                 push    edx
.text:0040295C                 mov     [ebp+var_10], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:00402963                 call    _CxxThrowException
.text:00402968 ; ---------------------------------------------------------------------------
.text:00402968
.text:00402968 loc_402968:                             ; CODE XREF: sub_402910+A↑j
.text:00402968                                         ; sub_402910+2D↑j
.text:00402968                 mov     esp, ebp
.text:0040296A                 pop     ebp
.text:0040296B                 retn
.text:0040296B sub_402910      endp
.text:0040296B
.text:0040296B ; ---------------------------------------------------------------------------
.text:0040296C                 align 10h
.text:00402970
.text:00402970 ; =============== S U B R O U T I N E =======================================
.text:00402970
.text:00402970 ; Attributes: bp-based frame
.text:00402970
.text:00402970 sub_402970      proc near               ; CODE XREF: sub_4026C0+4F↑p
.text:00402970
.text:00402970 var_10          = dword ptr -10h
.text:00402970 var_4           = dword ptr -4
.text:00402970
.text:00402970                 push    ebp
.text:00402971                 mov     ebp, esp
.text:00402973                 sub     esp, 10h
.text:00402976                 xor     eax, eax
.text:00402978                 test    ecx, ecx
.text:0040297A                 jz      short loc_4029C2
.text:0040297C                 cmp     ecx, 1FFFFFFFh
.text:00402982                 ja      short loc_402999
.text:00402984                 lea     eax, ds:0[ecx*8]
.text:0040298B                 push    eax
.text:0040298C                 call    ds:??2@YAPAXI@Z ; operator new(uint)
.text:00402992                 add     esp, 4
.text:00402995                 test    eax, eax
.text:00402997                 jnz     short loc_4029C2
.text:00402999
.text:00402999 loc_402999:                             ; CODE XREF: sub_402970+12↑j
.text:00402999                 lea     ecx, [ebp+var_4]
.text:0040299C                 push    ecx
.text:0040299D                 lea     ecx, [ebp+var_10]
.text:004029A0                 mov     [ebp+var_4], 0
.text:004029A7                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:004029AD                 push    offset __TI2?AVbad_alloc@std@@ ; throw info for 'class std::bad_alloc'
.text:004029B2                 lea     edx, [ebp+var_10]
.text:004029B5                 push    edx
.text:004029B6                 mov     [ebp+var_10], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:004029BD                 call    _CxxThrowException
.text:004029C2 ; ---------------------------------------------------------------------------
.text:004029C2
.text:004029C2 loc_4029C2:                             ; CODE XREF: sub_402970+A↑j
.text:004029C2                                         ; sub_402970+27↑j
.text:004029C2                 mov     esp, ebp
.text:004029C4                 pop     ebp
.text:004029C5                 retn
.text:004029C5 sub_402970      endp
.text:004029C5
.text:004029C5 ; ---------------------------------------------------------------------------
.text:004029C6                 align 10h
.text:004029D0
.text:004029D0 ; =============== S U B R O U T I N E =======================================
.text:004029D0
.text:004029D0 ; Attributes: bp-based frame
.text:004029D0
.text:004029D0 sub_4029D0      proc near               ; CODE XREF: sub_402790+27↑p
.text:004029D0
.text:004029D0 var_10          = dword ptr -10h
.text:004029D0 var_4           = dword ptr -4
.text:004029D0
.text:004029D0                 push    ebp
.text:004029D1                 mov     ebp, esp
.text:004029D3                 sub     esp, 10h
.text:004029D6                 xor     eax, eax
.text:004029D8                 test    ecx, ecx
.text:004029DA                 jz      short loc_402A22
.text:004029DC                 cmp     ecx, 3FFFFFFFh
.text:004029E2                 ja      short loc_4029F9
.text:004029E4                 lea     eax, ds:0[ecx*4]
.text:004029EB                 push    eax
.text:004029EC                 call    ds:??2@YAPAXI@Z ; operator new(uint)
.text:004029F2                 add     esp, 4
.text:004029F5                 test    eax, eax
.text:004029F7                 jnz     short loc_402A22
.text:004029F9
.text:004029F9 loc_4029F9:                             ; CODE XREF: sub_4029D0+12↑j
.text:004029F9                 lea     ecx, [ebp+var_4]
.text:004029FC                 push    ecx
.text:004029FD                 lea     ecx, [ebp+var_10]
.text:00402A00                 mov     [ebp+var_4], 0
.text:00402A07                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:00402A0D                 push    offset __TI2?AVbad_alloc@std@@ ; throw info for 'class std::bad_alloc'
.text:00402A12                 lea     edx, [ebp+var_10]
.text:00402A15                 push    edx
.text:00402A16                 mov     [ebp+var_10], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:00402A1D                 call    _CxxThrowException
.text:00402A22 ; ---------------------------------------------------------------------------
.text:00402A22
.text:00402A22 loc_402A22:                             ; CODE XREF: sub_4029D0+A↑j
.text:00402A22                                         ; sub_4029D0+27↑j
.text:00402A22                 mov     esp, ebp
.text:00402A24                 pop     ebp
.text:00402A25                 retn
.text:00402A25 sub_4029D0      endp
.text:00402A25
.text:00402A25 ; ---------------------------------------------------------------------------
.text:00402A26                 align 10h
.text:00402A30
.text:00402A30 ; =============== S U B R O U T I N E =======================================
.text:00402A30
.text:00402A30
.text:00402A30 sub_402A30      proc near               ; CODE XREF: sub_402830+2E↑p
.text:00402A30                                         ; sub_402830+37↑p
.text:00402A30                 push    edi
.text:00402A31                 mov     edi, eax
.text:00402A33                 mov     eax, [esi+10h]
.text:00402A36                 cmp     eax, ecx
.text:00402A38                 jnb     short loc_402A45
.text:00402A3A                 push    offset aInvalidStringP ; "invalid string position"
.text:00402A3F                 call    ds:?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text:00402A45
.text:00402A45 loc_402A45:                             ; CODE XREF: sub_402A30+8↑j
.text:00402A45                 sub     eax, ecx
.text:00402A47                 cmp     eax, edi
.text:00402A49                 jnb     short loc_402A4D
.text:00402A4B                 mov     edi, eax
.text:00402A4D
.text:00402A4D loc_402A4D:                             ; CODE XREF: sub_402A30+19↑j
.text:00402A4D                 test    edi, edi
.text:00402A4F                 jz      short loc_402A9E
.text:00402A51                 mov     edx, [esi+14h]
.text:00402A54                 push    ebx
.text:00402A55                 cmp     edx, 10h
.text:00402A58                 jb      short loc_402A5E
.text:00402A5A                 mov     ebx, [esi]
.text:00402A5C                 jmp     short loc_402A60
.text:00402A5E ; ---------------------------------------------------------------------------
.text:00402A5E
.text:00402A5E loc_402A5E:                             ; CODE XREF: sub_402A30+28↑j
.text:00402A5E                 mov     ebx, esi
.text:00402A60
.text:00402A60 loc_402A60:                             ; CODE XREF: sub_402A30+2C↑j
.text:00402A60                 cmp     edx, 10h
.text:00402A63                 jb      short loc_402A69
.text:00402A65                 mov     edx, [esi]
.text:00402A67                 jmp     short loc_402A6B
.text:00402A69 ; ---------------------------------------------------------------------------
.text:00402A69
.text:00402A69 loc_402A69:                             ; CODE XREF: sub_402A30+33↑j
.text:00402A69                 mov     edx, esi
.text:00402A6B
.text:00402A6B loc_402A6B:                             ; CODE XREF: sub_402A30+37↑j
.text:00402A6B                 sub     eax, edi
.text:00402A6D                 add     ebx, ecx
.text:00402A6F                 push    eax             ; Size
.text:00402A70                 add     ebx, edi
.text:00402A72                 add     edx, ecx
.text:00402A74                 push    ebx             ; Src
.text:00402A75                 push    edx             ; Dst
.text:00402A76                 call    ds:memmove
.text:00402A7C                 mov     eax, [esi+10h]
.text:00402A7F                 add     esp, 0Ch
.text:00402A82                 sub     eax, edi
.text:00402A84                 cmp     dword ptr [esi+14h], 10h
.text:00402A88                 mov     [esi+10h], eax
.text:00402A8B                 pop     ebx
.text:00402A8C                 jb      short loc_402A98
.text:00402A8E                 mov     ecx, [esi]
.text:00402A90                 mov     byte ptr [ecx+eax], 0
.text:00402A94                 mov     eax, esi
.text:00402A96                 pop     edi
.text:00402A97                 retn
.text:00402A98 ; ---------------------------------------------------------------------------
.text:00402A98
.text:00402A98 loc_402A98:                             ; CODE XREF: sub_402A30+5C↑j
.text:00402A98                 mov     ecx, esi
.text:00402A9A                 mov     byte ptr [ecx+eax], 0
.text:00402A9E
.text:00402A9E loc_402A9E:                             ; CODE XREF: sub_402A30+1F↑j
.text:00402A9E                 mov     eax, esi
.text:00402AA0                 pop     edi
.text:00402AA1                 retn
.text:00402AA1 sub_402A30      endp
.text:00402AA1
.text:00402AA1 ; ---------------------------------------------------------------------------
.text:00402AA2                 align 10h
.text:00402AB0
.text:00402AB0 ; =============== S U B R O U T I N E =======================================
.text:00402AB0
.text:00402AB0 ; Attributes: bp-based frame
.text:00402AB0
.text:00402AB0 ; int __stdcall sub_402AB0(int, void *Dst, size_t Size)
.text:00402AB0 sub_402AB0      proc near               ; CODE XREF: sub_402470+6F↑p
.text:00402AB0                                         ; sub_402830+61↑p
.text:00402AB0
.text:00402AB0 var_24          = dword ptr -24h
.text:00402AB0 var_18          = dword ptr -18h
.text:00402AB0 var_14          = dword ptr -14h
.text:00402AB0 var_10          = dword ptr -10h
.text:00402AB0 var_C           = dword ptr -0Ch
.text:00402AB0 var_4           = dword ptr -4
.text:00402AB0 arg_0           = dword ptr  8
.text:00402AB0 Dst             = dword ptr  0Ch
.text:00402AB0 Size            = dword ptr  10h
.text:00402AB0
.text:00402AB0 ; FUNCTION CHUNK AT .text:00405C00 SIZE 0000001B BYTES
.text:00402AB0
.text:00402AB0 ; __unwind { // SEH_402AB0
.text:00402AB0                 push    ebp
.text:00402AB1                 mov     ebp, esp
.text:00402AB3                 push    0FFFFFFFFh
.text:00402AB5                 push    offset SEH_402AB0
.text:00402ABA                 mov     eax, large fs:0
.text:00402AC0                 push    eax
.text:00402AC1                 sub     esp, 18h
.text:00402AC4                 push    ebx
.text:00402AC5                 push    esi
.text:00402AC6                 push    edi
.text:00402AC7                 mov     eax, ___security_cookie
.text:00402ACC                 xor     eax, ebp
.text:00402ACE                 push    eax
.text:00402ACF                 lea     eax, [ebp+var_C]
.text:00402AD2                 mov     large fs:0, eax
.text:00402AD8                 mov     [ebp+var_10], esp
.text:00402ADB                 mov     eax, [ebp+Dst]
.text:00402ADE                 mov     edi, [ebp+arg_0]
.text:00402AE1                 mov     esi, eax
.text:00402AE3                 or      esi, 0Fh
.text:00402AE6                 cmp     esi, 0FFFFFFFEh
.text:00402AE9                 jbe     short loc_402AEF
.text:00402AEB                 mov     esi, eax
.text:00402AED                 jmp     short loc_402B16
.text:00402AEF ; ---------------------------------------------------------------------------
.text:00402AEF
.text:00402AEF loc_402AEF:                             ; CODE XREF: sub_402AB0+39↑j
.text:00402AEF                 mov     ebx, [edi+14h]
.text:00402AF2                 mov     eax, 0AAAAAAABh
.text:00402AF7                 mul     esi
.text:00402AF9                 mov     ecx, ebx
.text:00402AFB                 shr     ecx, 1
.text:00402AFD                 shr     edx, 1
.text:00402AFF                 cmp     ecx, edx
.text:00402B01                 jbe     short loc_402B16
.text:00402B03                 mov     eax, 0FFFFFFFEh
.text:00402B08                 sub     eax, ecx
.text:00402B0A                 lea     esi, [ecx+ebx]
.text:00402B0D                 cmp     ebx, eax
.text:00402B0F                 jbe     short loc_402B16
.text:00402B11                 mov     esi, 0FFFFFFFEh
.text:00402B16
.text:00402B16 loc_402B16:                             ; CODE XREF: sub_402AB0+3D↑j
.text:00402B16                                         ; sub_402AB0+51↑j ...
.text:00402B16                 xor     eax, eax
.text:00402B18                 lea     ecx, [esi+1]
.text:00402B1B ;   try {
.text:00402B1B                 mov     [ebp+var_4], eax
.text:00402B1E                 cmp     ecx, eax
.text:00402B20                 jbe     short loc_402B35
.text:00402B22                 cmp     ecx, 0FFFFFFFFh
.text:00402B25                 ja      short loc_402B3A
.text:00402B27                 push    ecx
.text:00402B28                 call    ds:??2@YAPAXI@Z ; operator new(uint)
.text:00402B2E                 add     esp, 4
.text:00402B31                 test    eax, eax
.text:00402B33                 jz      short loc_402B3A
.text:00402B35
.text:00402B35 loc_402B35:                             ; CODE XREF: sub_402AB0+70↑j
.text:00402B35                 mov     [ebp+Dst], eax
.text:00402B38                 jmp     short loc_402B87
.text:00402B3A ; ---------------------------------------------------------------------------
.text:00402B3A
.text:00402B3A loc_402B3A:                             ; CODE XREF: sub_402AB0+75↑j
.text:00402B3A                                         ; sub_402AB0+83↑j
.text:00402B3A                 lea     ecx, [ebp+var_14]
.text:00402B3D                 push    ecx
.text:00402B3E                 lea     ecx, [ebp+var_24]
.text:00402B41                 mov     [ebp+var_14], 0
.text:00402B48                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:00402B4E                 push    offset __TI2?AVbad_alloc@std@@ ; throw info for 'class std::bad_alloc'
.text:00402B53                 lea     edx, [ebp+var_24]
.text:00402B56                 push    edx
.text:00402B57                 mov     [ebp+var_24], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:00402B5E                 call    _CxxThrowException
.text:00402B63 ; ---------------------------------------------------------------------------
.text:00402B63
.text:00402B63 loc_402B63:                             ; DATA XREF: .rdata:stru_40665C↓o
.text:00402B63 ;   catch(...) // owned by 402B1B
.text:00402B63                 mov     eax, [ebp+Dst]
.text:00402B66                 lea     ecx, [eax+1]
.text:00402B69                 mov     [ebp+var_10], esp
.text:00402B6C                 mov     [ebp+var_18], eax
.text:00402B6C ;   } // starts at 402B1B
.text:00402B6F ;   try {
.text:00402B6F                 mov     byte ptr [ebp+var_4], 2
.text:00402B73                 call    sub_402C20
.text:00402B78                 mov     [ebp+Dst], eax
.text:00402B7B                 mov     eax, offset loc_402B81
.text:00402B80                 retn
.text:00402B81 ; ---------------------------------------------------------------------------
.text:00402B81
.text:00402B81 loc_402B81:                             ; CODE XREF: sub_402AB0+D0↑j
.text:00402B81                                         ; DATA XREF: sub_402AB0+CB↑o
.text:00402B81                 mov     edi, [ebp+arg_0]
.text:00402B84                 mov     esi, [ebp+var_18]
.text:00402B87
.text:00402B87 loc_402B87:                             ; CODE XREF: sub_402AB0+88↑j
.text:00402B87                 mov     ebx, [ebp+Size]
.text:00402B8A                 test    ebx, ebx
.text:00402B8C                 jz      short loc_402BA8
.text:00402B8E                 cmp     dword ptr [edi+14h], 10h
.text:00402B92                 jb      short loc_402B98
.text:00402B94                 mov     eax, [edi]
.text:00402B96                 jmp     short loc_402B9A
.text:00402B98 ; ---------------------------------------------------------------------------
.text:00402B98
.text:00402B98 loc_402B98:                             ; CODE XREF: sub_402AB0+E2↑j
.text:00402B98                 mov     eax, edi
.text:00402B9A
.text:00402B9A loc_402B9A:                             ; CODE XREF: sub_402AB0+E6↑j
.text:00402B9A                 push    ebx             ; Size
.text:00402B9B                 push    eax             ; Src
.text:00402B9C                 mov     eax, [ebp+Dst]
.text:00402B9F                 push    eax             ; Dst
.text:00402BA0                 call    memcpy
.text:00402BA5                 add     esp, 0Ch
.text:00402BA8
.text:00402BA8 loc_402BA8:                             ; CODE XREF: sub_402AB0+DC↑j
.text:00402BA8                 cmp     dword ptr [edi+14h], 10h
.text:00402BAC                 jb      short loc_402BBA
.text:00402BAE                 mov     ecx, [edi]
.text:00402BB0                 push    ecx
.text:00402BB1                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00402BB7                 add     esp, 4
.text:00402BBA
.text:00402BBA loc_402BBA:                             ; CODE XREF: sub_402AB0+FC↑j
.text:00402BBA                 mov     eax, [ebp+Dst]
.text:00402BBD                 mov     byte ptr [edi], 0
.text:00402BC0                 mov     [edi], eax
.text:00402BC2                 mov     [edi+14h], esi
.text:00402BC5                 mov     [edi+10h], ebx
.text:00402BC8                 cmp     esi, 10h
.text:00402BCB                 jb      short loc_402BCF
.text:00402BCD                 mov     edi, eax
.text:00402BCF
.text:00402BCF loc_402BCF:                             ; CODE XREF: sub_402AB0+11B↑j
.text:00402BCF                 mov     byte ptr [edi+ebx], 0
.text:00402BD3                 mov     ecx, [ebp+var_C]
.text:00402BD6                 mov     large fs:0, ecx
.text:00402BDD                 pop     ecx
.text:00402BDE                 pop     edi
.text:00402BDF                 pop     esi
.text:00402BE0                 pop     ebx
.text:00402BE1                 mov     esp, ebp
.text:00402BE3                 pop     ebp
.text:00402BE4                 retn    0Ch
.text:00402BE7 ; ---------------------------------------------------------------------------
.text:00402BE7
.text:00402BE7 loc_402BE7:                             ; DATA XREF: .rdata:stru_40664C↓o
.text:00402BE7 ;   catch(...) // owned by 402B6F
.text:00402BE7                 mov     esi, [ebp+arg_0]
.text:00402BEA                 cmp     dword ptr [esi+14h], 10h
.text:00402BEE                 jb      short loc_402BFC
.text:00402BF0                 mov     edx, [esi]
.text:00402BF2                 push    edx
.text:00402BF3                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00402BF9                 add     esp, 4
.text:00402BFC
.text:00402BFC loc_402BFC:                             ; CODE XREF: sub_402AB0+13E↑j
.text:00402BFC                 push    0
.text:00402BFE                 mov     dword ptr [esi+14h], 0Fh
.text:00402C05                 mov     dword ptr [esi+10h], 0
.text:00402C0C                 push    0
.text:00402C0E                 mov     byte ptr [esi], 0
.text:00402C11                 call    _CxxThrowException
.text:00402C11 ;   } // starts at 402B6F
.text:00402C11 ; } // starts at 402AB0
.text:00402C11 sub_402AB0      endp
.text:00402C11
.text:00402C11 ; ---------------------------------------------------------------------------
.text:00402C16                 align 10h
.text:00402C20
.text:00402C20 ; =============== S U B R O U T I N E =======================================
.text:00402C20
.text:00402C20 ; Attributes: bp-based frame
.text:00402C20
.text:00402C20 sub_402C20      proc near               ; CODE XREF: sub_402AB0+C3↑p
.text:00402C20
.text:00402C20 var_10          = dword ptr -10h
.text:00402C20 var_4           = dword ptr -4
.text:00402C20
.text:00402C20                 push    ebp
.text:00402C21                 mov     ebp, esp
.text:00402C23                 sub     esp, 10h
.text:00402C26                 xor     eax, eax
.text:00402C28                 test    ecx, ecx
.text:00402C2A                 jz      short loc_402C68
.text:00402C2C                 cmp     ecx, 0FFFFFFFFh
.text:00402C2F                 ja      short loc_402C3F
.text:00402C31                 push    ecx
.text:00402C32                 call    ds:??2@YAPAXI@Z ; operator new(uint)
.text:00402C38                 add     esp, 4
.text:00402C3B                 test    eax, eax
.text:00402C3D                 jnz     short loc_402C68
.text:00402C3F
.text:00402C3F loc_402C3F:                             ; CODE XREF: sub_402C20+F↑j
.text:00402C3F                 lea     eax, [ebp+var_4]
.text:00402C42                 push    eax
.text:00402C43                 lea     ecx, [ebp+var_10]
.text:00402C46                 mov     [ebp+var_4], 0
.text:00402C4D                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:00402C53                 push    offset __TI2?AVbad_alloc@std@@ ; throw info for 'class std::bad_alloc'
.text:00402C58                 lea     ecx, [ebp+var_10]
.text:00402C5B                 push    ecx
.text:00402C5C                 mov     [ebp+var_10], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:00402C63                 call    _CxxThrowException
.text:00402C68 ; ---------------------------------------------------------------------------
.text:00402C68
.text:00402C68 loc_402C68:                             ; CODE XREF: sub_402C20+A↑j
.text:00402C68                                         ; sub_402C20+1D↑j
.text:00402C68                 mov     esp, ebp
.text:00402C6A                 pop     ebp
.text:00402C6B                 retn
.text:00402C6B sub_402C20      endp
.text:00402C6B
.text:00402C6B ; ---------------------------------------------------------------------------
.text:00402C6C                 align 10h
.text:00402C70
.text:00402C70 ; =============== S U B R O U T I N E =======================================
.text:00402C70
.text:00402C70 ; Attributes: bp-based frame
.text:00402C70
.text:00402C70 sub_402C70      proc near               ; CODE XREF: _main+4F↑p
.text:00402C70                                         ; _main+104↑p
.text:00402C70
.text:00402C70 var_20          = dword ptr -20h
.text:00402C70 var_1C          = byte ptr -1Ch
.text:00402C70 var_18          = dword ptr -18h
.text:00402C70 var_14          = dword ptr -14h
.text:00402C70 var_10          = dword ptr -10h
.text:00402C70 var_C           = dword ptr -0Ch
.text:00402C70 var_4           = dword ptr -4
.text:00402C70 arg_0           = dword ptr  8
.text:00402C70 arg_4           = dword ptr  0Ch
.text:00402C70
.text:00402C70 ; FUNCTION CHUNK AT .text:00402810 SIZE 00000019 BYTES
.text:00402C70 ; FUNCTION CHUNK AT .text:00405BC0 SIZE 00000035 BYTES
.text:00402C70
.text:00402C70 ; __unwind { // SEH_402C70
.text:00402C70                 push    ebp
.text:00402C71                 mov     ebp, esp
.text:00402C73                 push    0FFFFFFFFh
.text:00402C75                 push    offset SEH_402C70
.text:00402C7A                 mov     eax, large fs:0
.text:00402C80                 push    eax
.text:00402C81                 sub     esp, 14h
.text:00402C84                 push    ebx
.text:00402C85                 push    esi
.text:00402C86                 push    edi
.text:00402C87                 mov     eax, ___security_cookie
.text:00402C8C                 xor     eax, ebp
.text:00402C8E                 push    eax
.text:00402C8F                 lea     eax, [ebp+var_C]
.text:00402C92                 mov     large fs:0, eax
.text:00402C98                 mov     [ebp+var_10], esp
.text:00402C9B                 mov     esi, [ebp+arg_0]
.text:00402C9E                 mov     eax, [esi]
.text:00402CA0                 mov     edx, [eax+4]
.text:00402CA3                 mov     ecx, [edx+esi+24h]
.text:00402CA7                 mov     eax, [edx+esi+20h]
.text:00402CAB                 xor     ebx, ebx
.text:00402CAD                 mov     [ebp+var_14], ebx
.text:00402CB0                 cmp     ecx, ebx
.text:00402CB2                 jl      short loc_402CD0
.text:00402CB4                 jg      short loc_402CC5
.text:00402CB6                 cmp     eax, ebx
.text:00402CB8                 jbe     short loc_402CD0
.text:00402CBA                 cmp     ecx, ebx
.text:00402CBC                 jl      short loc_402CD0
.text:00402CBE                 jg      short loc_402CC5
.text:00402CC0                 cmp     eax, 1
.text:00402CC3                 jbe     short loc_402CD0
.text:00402CC5
.text:00402CC5 loc_402CC5:                             ; CODE XREF: sub_402C70+44↑j
.text:00402CC5                                         ; sub_402C70+4E↑j
.text:00402CC5                 sub     eax, 1
.text:00402CC8                 sbb     ecx, ebx
.text:00402CCA                 mov     edi, eax
.text:00402CCC                 mov     ebx, ecx
.text:00402CCE                 jmp     short loc_402CD2
.text:00402CD0 ; ---------------------------------------------------------------------------
.text:00402CD0
.text:00402CD0 loc_402CD0:                             ; CODE XREF: sub_402C70+42↑j
.text:00402CD0                                         ; sub_402C70+48↑j ...
.text:00402CD0                 xor     edi, edi
.text:00402CD2
.text:00402CD2 loc_402CD2:                             ; CODE XREF: sub_402C70+5E↑j
.text:00402CD2                 mov     ecx, [edx+esi+38h]
.text:00402CD6                 mov     [ebp+var_20], esi
.text:00402CD9                 test    ecx, ecx
.text:00402CDB                 jz      short loc_402CE4
.text:00402CDD                 mov     edx, [ecx]
.text:00402CDF                 mov     eax, [edx+4]
.text:00402CE2                 call    eax
.text:00402CE4
.text:00402CE4 loc_402CE4:                             ; CODE XREF: sub_402C70+6B↑j
.text:00402CE4 ;   try {
.text:00402CE4                 mov     [ebp+var_4], 0
.text:00402CEB                 mov     ecx, [esi]
.text:00402CED                 mov     eax, [ecx+4]
.text:00402CF0                 cmp     dword ptr [eax+esi+0Ch], 0
.text:00402CF5                 jnz     short loc_402D07
.text:00402CF7                 mov     eax, [eax+esi+3Ch]
.text:00402CFB                 test    eax, eax
.text:00402CFD                 jz      short loc_402D07
.text:00402CFF                 mov     ecx, eax
.text:00402D01                 call    ds:?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char>>::flush(void)
.text:00402D07
.text:00402D07 loc_402D07:                             ; CODE XREF: sub_402C70+85↑j
.text:00402D07                                         ; sub_402C70+8D↑j
.text:00402D07                 mov     eax, [esi]
.text:00402D09                 mov     eax, [eax+4]
.text:00402D0C                 cmp     dword ptr [eax+esi+0Ch], 0
.text:00402D11                 setz    cl
.text:00402D14                 mov     [ebp+var_1C], cl
.text:00402D14 ;   } // starts at 402CE4
.text:00402D17 ;   try {
.text:00402D17                 mov     [ebp+var_4], 1
.text:00402D1E                 test    cl, cl
.text:00402D20                 jnz     short loc_402D2E
.text:00402D22                 mov     [ebp+var_14], 4
.text:00402D29                 jmp     loc_402DC5
.text:00402D29 ;   } // starts at 402D17
.text:00402D2E ; ---------------------------------------------------------------------------
.text:00402D2E
.text:00402D2E loc_402D2E:                             ; CODE XREF: sub_402C70+B0↑j
.text:00402D2E ;   try {
.text:00402D2E                 mov     byte ptr [ebp+var_4], 2
.text:00402D32                 mov     eax, [eax+esi+14h]
.text:00402D36                 and     eax, 1C0h
.text:00402D3B                 cmp     eax, 40h ; '@'
.text:00402D3E                 jz      short loc_402D77
.text:00402D40
.text:00402D40 loc_402D40:                             ; CODE XREF: sub_402C70+1B9↓j
.text:00402D40                 test    ebx, ebx
.text:00402D42                 jl      short loc_402D71
.text:00402D44                 jg      short loc_402D4A
.text:00402D46                 test    edi, edi
.text:00402D48                 jz      short loc_402D71
.text:00402D4A
.text:00402D4A loc_402D4A:                             ; CODE XREF: sub_402C70+D4↑j
.text:00402D4A                 mov     edx, [esi]
.text:00402D4C                 mov     eax, [edx+4]
.text:00402D4F                 mov     cl, [eax+esi+40h]
.text:00402D53                 mov     byte ptr [ebp+var_18], cl
.text:00402D56                 mov     edx, [ebp+var_18]
.text:00402D59                 mov     ecx, [eax+esi+38h]
.text:00402D5D                 push    edx
.text:00402D5E                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:00402D64                 cmp     eax, 0FFFFFFFFh
.text:00402D67                 jnz     loc_402E23
.text:00402D6D                 or      [ebp+var_14], 4
.text:00402D71
.text:00402D71 loc_402D71:                             ; CODE XREF: sub_402C70+D2↑j
.text:00402D71                                         ; sub_402C70+D8↑j
.text:00402D71                 cmp     [ebp+var_14], 0
.text:00402D75                 jnz     short loc_402DAF
.text:00402D77
.text:00402D77 loc_402D77:                             ; CODE XREF: sub_402C70+CE↑j
.text:00402D77                 mov     eax, [esi]
.text:00402D79                 mov     ecx, [eax+4]
.text:00402D7C                 mov     ecx, [ecx+esi+38h]
.text:00402D80                 xor     eax, eax
.text:00402D82                 push    eax
.text:00402D83                 mov     eax, 1
.text:00402D88                 push    eax
.text:00402D89                 mov     eax, offset asc_4061EC ; "/"
.text:00402D8E                 push    eax
.text:00402D8F                 call    ds:?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputn(char const *,__int64)
.text:00402D95                 mov     ecx, 1
.text:00402D9A                 cmp     eax, ecx
.text:00402D9C                 jnz     short loc_402DA8
.text:00402D9E                 xor     eax, eax
.text:00402DA0                 cmp     edx, eax
.text:00402DA2                 jz      loc_402E30
.text:00402DA8
.text:00402DA8 loc_402DA8:                             ; CODE XREF: sub_402C70+12C↑j
.text:00402DA8                 mov     [ebp+var_14], 4
.text:00402DAF
.text:00402DAF loc_402DAF:                             ; CODE XREF: sub_402C70+105↑j
.text:00402DAF                                         ; sub_402C70+1C2↓j ...
.text:00402DAF                 mov     edx, [esi]
.text:00402DB1                 mov     eax, [edx+4]
.text:00402DB4                 xor     ecx, ecx
.text:00402DB6                 mov     [eax+esi+20h], ecx
.text:00402DBA                 mov     [eax+esi+24h], ecx
.text:00402DBA ;   } // starts at 402D2E
.text:00402DBE ;   try {
.text:00402DBE                 mov     [ebp+var_4], 1
.text:00402DC5
.text:00402DC5 loc_402DC5:                             ; CODE XREF: sub_402C70+B9↑j
.text:00402DC5                                         ; sub_402C70+226↓j
.text:00402DC5                 mov     ecx, [esi]
.text:00402DC7                 mov     eax, [ebp+var_14]
.text:00402DCA                 mov     ecx, [ecx+4]
.text:00402DCD                 push    0
.text:00402DCF                 push    eax
.text:00402DD0                 add     ecx, esi
.text:00402DD2                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:00402DD2 ;   } // starts at 402DBE
.text:00402DD8 ;   try {
.text:00402DD8                 mov     [ebp+var_4], 4
.text:00402DDF                 call    ds:?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
.text:00402DE5                 mov     edi, [ebp+var_20]
.text:00402DE8                 test    al, al
.text:00402DEA                 jnz     short loc_402DF4
.text:00402DEC                 mov     ecx, edi
.text:00402DEE                 call    ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
.text:00402DEE ;   } // starts at 402DD8
.text:00402DF4
.text:00402DF4 loc_402DF4:                             ; CODE XREF: sub_402C70+17A↑j
.text:00402DF4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00402DFB                 mov     edx, [edi]
.text:00402DFD                 mov     eax, [edx+4]
.text:00402E00                 mov     ecx, [eax+edi+38h]
.text:00402E04                 test    ecx, ecx
.text:00402E06                 jz      short loc_402E0F
.text:00402E08                 mov     edx, [ecx]
.text:00402E0A                 mov     eax, [edx+8]
.text:00402E0D                 call    eax
.text:00402E0F
.text:00402E0F loc_402E0F:                             ; CODE XREF: sub_402C70+196↑j
.text:00402E0F                 mov     eax, esi
.text:00402E11                 mov     ecx, [ebp+var_C]
.text:00402E14                 mov     large fs:0, ecx
.text:00402E1B                 pop     ecx
.text:00402E1C                 pop     edi
.text:00402E1D                 pop     esi
.text:00402E1E                 pop     ebx
.text:00402E1F                 mov     esp, ebp
.text:00402E21                 pop     ebp
.text:00402E22                 retn
.text:00402E23 ; ---------------------------------------------------------------------------
.text:00402E23
.text:00402E23 loc_402E23:                             ; CODE XREF: sub_402C70+F7↑j
.text:00402E23                 add     edi, 0FFFFFFFFh
.text:00402E26                 adc     ebx, 0FFFFFFFFh
.text:00402E29                 jmp     loc_402D40
.text:00402E29 ; ---------------------------------------------------------------------------
.text:00402E2E                 align 10h
.text:00402E30
.text:00402E30 loc_402E30:                             ; CODE XREF: sub_402C70+132↑j
.text:00402E30                                         ; sub_402C70+200↓j
.text:00402E30                 test    ebx, ebx
.text:00402E32                 jl      loc_402DAF
.text:00402E38                 jg      short loc_402E42
.text:00402E3A                 test    edi, edi
.text:00402E3C                 jz      loc_402DAF
.text:00402E42
.text:00402E42 loc_402E42:                             ; CODE XREF: sub_402C70+1C8↑j
.text:00402E42                 mov     edx, [esi]
.text:00402E44                 mov     eax, [edx+4]
.text:00402E47                 mov     cl, [eax+esi+40h]
.text:00402E4B                 mov     byte ptr [ebp+var_18], cl
.text:00402E4E                 mov     edx, [ebp+var_18]
.text:00402E51                 mov     ecx, [eax+esi+38h]
.text:00402E55                 push    edx
.text:00402E56                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:00402E5C                 cmp     eax, 0FFFFFFFFh
.text:00402E5F                 jnz     short loc_402E6A
.text:00402E61                 or      [ebp+var_14], 4
.text:00402E65                 jmp     loc_402DAF
.text:00402E6A ; ---------------------------------------------------------------------------
.text:00402E6A
.text:00402E6A loc_402E6A:                             ; CODE XREF: sub_402C70+1EF↑j
.text:00402E6A                 add     edi, 0FFFFFFFFh
.text:00402E6D                 adc     ebx, 0FFFFFFFFh
.text:00402E70                 jmp     short loc_402E30
.text:00402E72 ; ---------------------------------------------------------------------------
.text:00402E72
.text:00402E72 loc_402E72:                             ; DATA XREF: .rdata:stru_4065E4↓o
.text:00402E72 ;   catch(...) // owned by 402D2E
.text:00402E72                 mov     eax, [ebp+arg_0]
.text:00402E75                 mov     ecx, [eax]
.text:00402E77                 mov     ecx, [ecx+4]
.text:00402E7A                 push    1
.text:00402E7C                 push    4
.text:00402E7E                 add     ecx, eax
.text:00402E80                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:00402E86 ;   try {
.text:00402E86                 mov     [ebp+var_4], 1
.text:00402E8D                 mov     eax, offset loc_402E93
.text:00402E92                 retn
.text:00402E93 ; ---------------------------------------------------------------------------
.text:00402E93
.text:00402E93 loc_402E93:                             ; CODE XREF: sub_402C70+222↑j
.text:00402E93                                         ; DATA XREF: sub_402C70+21D↑o
.text:00402E93                 mov     esi, [ebp+arg_0]
.text:00402E96                 jmp     loc_402DC5
.text:00402E96 ;   } // starts at 402E86
.text:00402E96 ; } // starts at 402C70
.text:00402E96 sub_402C70      endp
.text:00402E96
.text:00402E96 ; ---------------------------------------------------------------------------
.text:00402E9B                 align 10h
.text:00402EA0
.text:00402EA0 ; =============== S U B R O U T I N E =======================================
.text:00402EA0
.text:00402EA0 ; Attributes: bp-based frame
.text:00402EA0
.text:00402EA0 sub_402EA0      proc near               ; CODE XREF: _main+60↑p
.text:00402EA0                                         ; _main+115↑p
.text:00402EA0
.text:00402EA0 var_24          = dword ptr -24h
.text:00402EA0 var_20          = byte ptr -20h
.text:00402EA0 var_1C          = dword ptr -1Ch
.text:00402EA0 var_18          = dword ptr -18h
.text:00402EA0 var_14          = dword ptr -14h
.text:00402EA0 var_10          = dword ptr -10h
.text:00402EA0 var_C           = dword ptr -0Ch
.text:00402EA0 var_4           = dword ptr -4
.text:00402EA0 arg_0           = dword ptr  8
.text:00402EA0 arg_4           = dword ptr  0Ch
.text:00402EA0
.text:00402EA0 ; FUNCTION CHUNK AT .text:00402810 SIZE 00000019 BYTES
.text:00402EA0 ; FUNCTION CHUNK AT .text:00405B80 SIZE 00000035 BYTES
.text:00402EA0
.text:00402EA0 ; __unwind { // SEH_402EA0
.text:00402EA0                 push    ebp
.text:00402EA1                 mov     ebp, esp
.text:00402EA3                 push    0FFFFFFFFh
.text:00402EA5                 push    offset SEH_402EA0
.text:00402EAA                 mov     eax, large fs:0
.text:00402EB0                 push    eax
.text:00402EB1                 sub     esp, 18h
.text:00402EB4                 push    ebx
.text:00402EB5                 push    esi
.text:00402EB6                 push    edi
.text:00402EB7                 mov     eax, ___security_cookie
.text:00402EBC                 xor     eax, ebp
.text:00402EBE                 push    eax
.text:00402EBF                 lea     eax, [ebp+var_C]
.text:00402EC2                 mov     large fs:0, eax
.text:00402EC8                 mov     [ebp+var_10], esp
.text:00402ECB                 mov     esi, [ebp+arg_0]
.text:00402ECE                 mov     eax, [esi]
.text:00402ED0                 mov     ecx, [eax+4]
.text:00402ED3                 mov     ecx, [ecx+esi+38h]
.text:00402ED7                 xor     ebx, ebx
.text:00402ED9                 mov     edi, esi
.text:00402EDB                 mov     byte ptr [ebp+var_1C], 20h ; ' '
.text:00402EDF                 mov     [ebp+var_14], ebx
.text:00402EE2                 mov     [ebp+var_24], edi
.text:00402EE5                 cmp     ecx, ebx
.text:00402EE7                 jz      short loc_402EF0
.text:00402EE9                 mov     edx, [ecx]
.text:00402EEB                 mov     eax, [edx+4]
.text:00402EEE                 call    eax
.text:00402EF0
.text:00402EF0 loc_402EF0:                             ; CODE XREF: sub_402EA0+47↑j
.text:00402EF0 ;   try {
.text:00402EF0                 mov     [ebp+var_4], ebx
.text:00402EF3                 mov     ecx, [esi]
.text:00402EF5                 mov     eax, [ecx+4]
.text:00402EF8                 cmp     [eax+esi+0Ch], ebx
.text:00402EFC                 jnz     short loc_402F0E
.text:00402EFE                 mov     eax, [eax+esi+3Ch]
.text:00402F02                 cmp     eax, ebx
.text:00402F04                 jz      short loc_402F0E
.text:00402F06                 mov     ecx, eax
.text:00402F08                 call    ds:?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char>>::flush(void)
.text:00402F0E
.text:00402F0E loc_402F0E:                             ; CODE XREF: sub_402EA0+5C↑j
.text:00402F0E                                         ; sub_402EA0+64↑j
.text:00402F0E                 mov     eax, [esi]
.text:00402F10                 mov     edx, [eax+4]
.text:00402F13                 add     edx, esi
.text:00402F15                 cmp     [edx+0Ch], ebx
.text:00402F18                 setz    al
.text:00402F1B                 mov     [ebp+var_20], al
.text:00402F1B ;   } // starts at 402EF0
.text:00402F1E ;   try {
.text:00402F1E                 mov     [ebp+var_4], 1
.text:00402F25                 test    al, al
.text:00402F27                 jz      loc_403033
.text:00402F2D                 mov     ecx, [edx+24h]
.text:00402F30                 mov     eax, [edx+20h]
.text:00402F33                 cmp     ecx, ebx
.text:00402F35                 jg      short loc_402F42
.text:00402F37                 jl      short loc_402F3E
.text:00402F39                 cmp     eax, 1
.text:00402F3C                 ja      short loc_402F42
.text:00402F3E
.text:00402F3E loc_402F3E:                             ; CODE XREF: sub_402EA0+97↑j
.text:00402F3E                 xor     edi, edi
.text:00402F40                 jmp     short loc_402F4B
.text:00402F42 ; ---------------------------------------------------------------------------
.text:00402F42
.text:00402F42 loc_402F42:                             ; CODE XREF: sub_402EA0+95↑j
.text:00402F42                                         ; sub_402EA0+9C↑j
.text:00402F42                 sub     eax, 1
.text:00402F45                 sbb     ecx, ebx
.text:00402F47                 mov     edi, eax
.text:00402F49                 mov     ebx, ecx
.text:00402F49 ;   } // starts at 402F1E
.text:00402F4B
.text:00402F4B loc_402F4B:                             ; CODE XREF: sub_402EA0+A0↑j
.text:00402F4B ;   try {
.text:00402F4B                 mov     byte ptr [ebp+var_4], 2
.text:00402F4F                 mov     edx, [edx+14h]
.text:00402F52                 and     edx, 1C0h
.text:00402F58                 cmp     edx, 40h ; '@'
.text:00402F5B                 jz      short loc_402FA2
.text:00402F5D                 lea     ecx, [ecx+0]
.text:00402F60
.text:00402F60 loc_402F60:                             ; CODE XREF: sub_402EA0+100↓j
.text:00402F60                 cmp     [ebp+var_14], 0
.text:00402F64                 jnz     loc_403027
.text:00402F6A                 test    ebx, ebx
.text:00402F6C                 jl      short loc_402FA2
.text:00402F6E                 jg      short loc_402F74
.text:00402F70                 test    edi, edi
.text:00402F72                 jz      short loc_402FA2
.text:00402F74
.text:00402F74 loc_402F74:                             ; CODE XREF: sub_402EA0+CE↑j
.text:00402F74                 mov     edx, [esi]
.text:00402F76                 mov     eax, [edx+4]
.text:00402F79                 mov     cl, [eax+esi+40h]
.text:00402F7D                 mov     byte ptr [ebp+var_18], cl
.text:00402F80                 mov     edx, [ebp+var_18]
.text:00402F83                 mov     ecx, [eax+esi+38h]
.text:00402F87                 push    edx
.text:00402F88                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:00402F8E                 cmp     eax, 0FFFFFFFFh
.text:00402F91                 jnz     short loc_402F9A
.text:00402F93                 mov     [ebp+var_14], 4
.text:00402F9A
.text:00402F9A loc_402F9A:                             ; CODE XREF: sub_402EA0+F1↑j
.text:00402F9A                 add     edi, 0FFFFFFFFh
.text:00402F9D                 adc     ebx, 0FFFFFFFFh
.text:00402FA0                 jmp     short loc_402F60
.text:00402FA2 ; ---------------------------------------------------------------------------
.text:00402FA2
.text:00402FA2 loc_402FA2:                             ; CODE XREF: sub_402EA0+BB↑j
.text:00402FA2                                         ; sub_402EA0+CC↑j ...
.text:00402FA2                 mov     eax, [esi]
.text:00402FA4                 mov     ecx, [eax+4]
.text:00402FA7                 mov     edx, [ebp+var_1C]
.text:00402FAA                 mov     ecx, [ecx+esi+38h]
.text:00402FAE                 push    edx
.text:00402FAF                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:00402FB5                 cmp     eax, 0FFFFFFFFh
.text:00402FB8                 jnz     short loc_402FC1
.text:00402FBA                 mov     [ebp+var_14], 4
.text:00402FC1
.text:00402FC1 loc_402FC1:                             ; CODE XREF: sub_402EA0+118↑j
.text:00402FC1                                         ; sub_402EA0+15F↓j
.text:00402FC1                 cmp     [ebp+var_14], 0
.text:00402FC5                 jnz     short loc_403027
.text:00402FC7                 test    ebx, ebx
.text:00402FC9                 jl      short loc_403027
.text:00402FCB                 jg      short loc_402FD1
.text:00402FCD                 test    edi, edi
.text:00402FCF                 jz      short loc_403027
.text:00402FD1
.text:00402FD1 loc_402FD1:                             ; CODE XREF: sub_402EA0+12B↑j
.text:00402FD1                 mov     eax, [esi]
.text:00402FD3                 mov     eax, [eax+4]
.text:00402FD6                 mov     dl, [eax+esi+40h]
.text:00402FDA                 mov     eax, [eax+esi+38h]
.text:00402FDE                 mov     byte ptr [ebp+var_18], dl
.text:00402FE1                 mov     ecx, [ebp+var_18]
.text:00402FE4                 push    ecx
.text:00402FE5                 mov     ecx, eax
.text:00402FE7                 call    ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text:00402FED                 cmp     eax, 0FFFFFFFFh
.text:00402FF0                 jnz     short loc_402FF9
.text:00402FF2                 mov     [ebp+var_14], 4
.text:00402FF9
.text:00402FF9 loc_402FF9:                             ; CODE XREF: sub_402EA0+150↑j
.text:00402FF9                 add     edi, 0FFFFFFFFh
.text:00402FFC                 adc     ebx, 0FFFFFFFFh
.text:00402FFF                 jmp     short loc_402FC1
.text:00403001 ; ---------------------------------------------------------------------------
.text:00403001
.text:00403001 loc_403001:                             ; DATA XREF: .rdata:stru_406574↓o
.text:00403001 ;   catch(...) // owned by 402F4B
.text:00403001                 mov     eax, [ebp+arg_0]
.text:00403004                 mov     edx, [eax]
.text:00403006                 mov     ecx, [edx+4]
.text:00403009                 push    1
.text:0040300B                 push    4
.text:0040300D                 add     ecx, eax
.text:0040300F                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:0040300F ;   } // starts at 402F4B
.text:00403015 ;   try {
.text:00403015                 mov     [ebp+var_4], 1
.text:0040301C                 mov     eax, offset loc_403022
.text:00403021                 retn
.text:00403022 ; ---------------------------------------------------------------------------
.text:00403022
.text:00403022 loc_403022:                             ; CODE XREF: sub_402EA0+181↑j
.text:00403022                                         ; DATA XREF: sub_402EA0+17C↑o
.text:00403022                 mov     esi, [ebp+arg_0]
.text:00403025                 jmp     short loc_40302E
.text:00403025 ;   } // starts at 403015
.text:00403027 ; ---------------------------------------------------------------------------
.text:00403027
.text:00403027 loc_403027:                             ; CODE XREF: sub_402EA0+C4↑j
.text:00403027                                         ; sub_402EA0+125↑j ...
.text:00403027 ;   try {
.text:00403027                 mov     [ebp+var_4], 1
.text:0040302E
.text:0040302E loc_40302E:                             ; CODE XREF: sub_402EA0+185↑j
.text:0040302E                 mov     edi, [ebp+var_24]
.text:00403031                 xor     ebx, ebx
.text:00403033
.text:00403033 loc_403033:                             ; CODE XREF: sub_402EA0+87↑j
.text:00403033                 mov     eax, [esi]
.text:00403035                 mov     eax, [eax+4]
.text:00403038                 mov     ecx, [ebp+var_14]
.text:0040303B                 mov     [eax+esi+20h], ebx
.text:0040303F                 mov     [eax+esi+24h], ebx
.text:00403043                 mov     edx, [esi]
.text:00403045                 push    ebx
.text:00403046                 push    ecx
.text:00403047                 mov     ecx, [edx+4]
.text:0040304A                 add     ecx, esi
.text:0040304C                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:0040304C ;   } // starts at 403027
.text:00403052 ;   try {
.text:00403052                 mov     [ebp+var_4], 4
.text:00403059                 call    ds:?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
.text:0040305F                 test    al, al
.text:00403061                 jnz     short loc_40306B
.text:00403063                 mov     ecx, edi
.text:00403065                 call    ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
.text:00403065 ;   } // starts at 403052
.text:0040306B
.text:0040306B loc_40306B:                             ; CODE XREF: sub_402EA0+1C1↑j
.text:0040306B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00403072                 mov     eax, [edi]
.text:00403074                 mov     ecx, [eax+4]
.text:00403077                 mov     ecx, [ecx+edi+38h]
.text:0040307B                 cmp     ecx, ebx
.text:0040307D                 jz      short loc_403086
.text:0040307F                 mov     edx, [ecx]
.text:00403081                 mov     eax, [edx+8]
.text:00403084                 call    eax
.text:00403086
.text:00403086 loc_403086:                             ; CODE XREF: sub_402EA0+1DD↑j
.text:00403086                 mov     eax, esi
.text:00403088                 mov     ecx, [ebp+var_C]
.text:0040308B                 mov     large fs:0, ecx
.text:00403092                 pop     ecx
.text:00403093                 pop     edi
.text:00403094                 pop     esi
.text:00403095                 pop     ebx
.text:00403096                 mov     esp, ebp
.text:00403098                 pop     ebp
.text:00403099                 retn
.text:00403099 ; } // starts at 402EA0
.text:00403099 sub_402EA0      endp
.text:00403099
.text:00403099 ; ---------------------------------------------------------------------------
.text:0040309A                 align 10h
.text:004030A0
.text:004030A0 ; =============== S U B R O U T I N E =======================================
.text:004030A0
.text:004030A0 ; Attributes: bp-based frame
.text:004030A0
.text:004030A0 sub_4030A0      proc near               ; DATA XREF: .rdata:00406500↓o
.text:004030A0
.text:004030A0 arg_0           = dword ptr  8
.text:004030A0
.text:004030A0                 push    ebp
.text:004030A1                 mov     ebp, esp
.text:004030A3                 mov     eax, [ebp+arg_0]
.text:004030A6                 push    esi
.text:004030A7                 push    eax
.text:004030A8                 mov     esi, ecx
.text:004030AA                 call    ds:__imp_??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.text:004030B0                 mov     dword ptr [esi], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:004030B6                 mov     eax, esi
.text:004030B8                 pop     esi
.text:004030B9                 pop     ebp
.text:004030BA                 retn    4
.text:004030BA sub_4030A0      endp
.text:004030BA
.text:004030BA ; ---------------------------------------------------------------------------
.text:004030BD                 align 10h
.text:004030C0
.text:004030C0 ; =============== S U B R O U T I N E =======================================
.text:004030C0
.text:004030C0 ; Attributes: bp-based frame
.text:004030C0
.text:004030C0 sub_4030C0      proc near               ; CODE XREF: sub_401340+194↑p
.text:004030C0                                         ; sub_401AB0+33E↑p ...
.text:004030C0
.text:004030C0 var_C           = dword ptr -0Ch
.text:004030C0 var_8           = dword ptr -8
.text:004030C0 arg_0           = dword ptr  8
.text:004030C0 arg_4           = dword ptr  0Ch
.text:004030C0 arg_8           = dword ptr  10h
.text:004030C0
.text:004030C0                 push    ebp
.text:004030C1                 mov     ebp, esp
.text:004030C3                 sub     esp, 10h
.text:004030C6                 push    ebx
.text:004030C7                 mov     ebx, [ebp+arg_4]
.text:004030CA                 push    esi
.text:004030CB                 push    edi
.text:004030CC                 mov     edi, [ebp+arg_0]
.text:004030CF                 mov     eax, ebx
.text:004030D1                 sub     eax, edi
.text:004030D3                 sar     eax, 3
.text:004030D6                 cmp     eax, 20h ; ' '
.text:004030D9                 jle     short loc_40313F
.text:004030DB                 mov     esi, [ebp+arg_8]
.text:004030DE
.text:004030DE loc_4030DE:                             ; CODE XREF: sub_4030C0+7D↓j
.text:004030DE                 test    esi, esi
.text:004030E0                 jle     short loc_403159
.text:004030E2                 push    ebx
.text:004030E3                 lea     eax, [ebp+var_C]
.text:004030E6                 push    edi
.text:004030E7                 push    eax
.text:004030E8                 call    sub_403350
.text:004030ED                 mov     eax, esi
.text:004030EF                 cdq
.text:004030F0                 sub     eax, edx
.text:004030F2                 sar     eax, 1
.text:004030F4                 mov     esi, eax
.text:004030F6                 cdq
.text:004030F7                 sub     eax, edx
.text:004030F9                 mov     edx, [ebp+var_C]
.text:004030FC                 sar     eax, 1
.text:004030FE                 add     esi, eax
.text:00403100                 mov     eax, [ebp+var_8]
.text:00403103                 mov     ecx, ebx
.text:00403105                 sub     ecx, eax
.text:00403107                 sub     edx, edi
.text:00403109                 add     esp, 0Ch
.text:0040310C                 and     ecx, 0FFFFFFF8h
.text:0040310F                 and     edx, 0FFFFFFF8h
.text:00403112                 push    esi
.text:00403113                 cmp     edx, ecx
.text:00403115                 jge     short loc_403126
.text:00403117                 mov     eax, [ebp+var_C]
.text:0040311A                 push    eax
.text:0040311B                 push    edi
.text:0040311C                 call    sub_4030C0
.text:00403121                 mov     edi, [ebp+var_8]
.text:00403124                 jmp     short loc_403130
.text:00403126 ; ---------------------------------------------------------------------------
.text:00403126
.text:00403126 loc_403126:                             ; CODE XREF: sub_4030C0+55↑j
.text:00403126                 push    ebx
.text:00403127                 push    eax
.text:00403128                 call    sub_4030C0
.text:0040312D                 mov     ebx, [ebp+var_C]
.text:00403130
.text:00403130 loc_403130:                             ; CODE XREF: sub_4030C0+64↑j
.text:00403130                 mov     eax, ebx
.text:00403132                 sub     eax, edi
.text:00403134                 sar     eax, 3
.text:00403137                 add     esp, 0Ch
.text:0040313A                 cmp     eax, 20h ; ' '
.text:0040313D                 jg      short loc_4030DE
.text:0040313F
.text:0040313F loc_40313F:                             ; CODE XREF: sub_4030C0+19↑j
.text:0040313F                                         ; sub_4030C0+9C↓j
.text:0040313F                 cmp     eax, 1
.text:00403142                 jle     short loc_403152
.text:00403144                 cmp     edi, ebx
.text:00403146                 jz      short loc_403152
.text:00403148                 push    ebx
.text:00403149                 push    edi
.text:0040314A                 call    sub_4042C0
.text:0040314F                 add     esp, 8
.text:00403152
.text:00403152 loc_403152:                             ; CODE XREF: sub_4030C0+82↑j
.text:00403152                                         ; sub_4030C0+86↑j
.text:00403152                 pop     edi
.text:00403153                 pop     esi
.text:00403154                 pop     ebx
.text:00403155                 mov     esp, ebp
.text:00403157                 pop     ebp
.text:00403158                 retn
.text:00403159 ; ---------------------------------------------------------------------------
.text:00403159
.text:00403159 loc_403159:                             ; CODE XREF: sub_4030C0+20↑j
.text:00403159                 cmp     eax, 20h ; ' '
.text:0040315C                 jle     short loc_40313F
.text:0040315E                 mov     ecx, ebx
.text:00403160                 sub     ecx, edi
.text:00403162                 and     ecx, 0FFFFFFF8h
.text:00403165                 cmp     ecx, 8
.text:00403168                 jle     short loc_403173
.text:0040316A                 mov     eax, ebx
.text:0040316C                 mov     ecx, edi
.text:0040316E                 call    sub_404160
.text:00403173
.text:00403173 loc_403173:                             ; CODE XREF: sub_4030C0+A8↑j
.text:00403173                 mov     eax, ebx
.text:00403175                 call    sub_404250
.text:0040317A                 pop     edi
.text:0040317B                 pop     esi
.text:0040317C                 pop     ebx
.text:0040317D                 mov     esp, ebp
.text:0040317F                 pop     ebp
.text:00403180                 retn
.text:00403180 sub_4030C0      endp
.text:00403180
.text:00403180 ; ---------------------------------------------------------------------------
.text:00403181                 align 10h
.text:00403190
.text:00403190 ; =============== S U B R O U T I N E =======================================
.text:00403190
.text:00403190 ; Attributes: bp-based frame
.text:00403190
.text:00403190 sub_403190      proc near               ; CODE XREF: sub_401AB0+38A↑p
.text:00403190                                         ; sub_403190+9E↓p ...
.text:00403190
.text:00403190 var_14          = dword ptr -14h
.text:00403190 var_10          = dword ptr -10h
.text:00403190 var_C           = dword ptr -0Ch
.text:00403190 var_8           = dword ptr -8
.text:00403190 arg_0           = dword ptr  8
.text:00403190 arg_4           = dword ptr  0Ch
.text:00403190 arg_8           = dword ptr  10h
.text:00403190
.text:00403190                 push    ebp
.text:00403191                 mov     ebp, esp
.text:00403193                 sub     esp, 18h
.text:00403196                 push    ebx
.text:00403197                 mov     ebx, [ebp+arg_0]
.text:0040319A                 push    esi
.text:0040319B                 push    edi
.text:0040319C                 mov     edi, [ebp+arg_4]
.text:0040319F                 mov     ecx, edi
.text:004031A1                 sub     ecx, ebx
.text:004031A3                 mov     eax, 92492493h
.text:004031A8                 imul    ecx
.text:004031AA                 add     edx, ecx
.text:004031AC                 sar     edx, 4
.text:004031AF                 mov     eax, edx
.text:004031B1                 shr     eax, 1Fh
.text:004031B4                 add     eax, edx
.text:004031B6                 mov     [ebp+var_8], ebx
.text:004031B9                 cmp     eax, 20h ; ' '
.text:004031BC                 jle     loc_40326E
.text:004031C2                 mov     esi, [ebp+arg_8]
.text:004031C5
.text:004031C5 loc_4031C5:                             ; CODE XREF: sub_403190+D8↓j
.text:004031C5                 test    esi, esi
.text:004031C7                 jle     loc_403289
.text:004031CD                 lea     eax, [ebp+var_10]
.text:004031D0                 push    eax
.text:004031D1                 mov     edx, edi
.text:004031D3                 mov     ecx, ebx
.text:004031D5                 call    sub_403580
.text:004031DA                 mov     eax, esi
.text:004031DC                 cdq
.text:004031DD                 sub     eax, edx
.text:004031DF                 sar     eax, 1
.text:004031E1                 mov     esi, eax
.text:004031E3                 cdq
.text:004031E4                 sub     eax, edx
.text:004031E6                 sar     eax, 1
.text:004031E8                 add     esi, eax
.text:004031EA                 mov     ecx, edi
.text:004031EC                 sub     ecx, [ebp+var_C]
.text:004031EF                 mov     eax, 92492493h
.text:004031F4                 imul    ecx
.text:004031F6                 add     edx, ecx
.text:004031F8                 mov     ecx, [ebp+var_10]
.text:004031FB                 sar     edx, 4
.text:004031FE                 mov     eax, edx
.text:00403200                 shr     eax, 1Fh
.text:00403203                 add     eax, edx
.text:00403205                 sub     ecx, ebx
.text:00403207                 mov     [ebp+var_14], eax
.text:0040320A                 mov     eax, 92492493h
.text:0040320F                 imul    ecx
.text:00403211                 add     edx, ecx
.text:00403213                 sar     edx, 4
.text:00403216                 mov     ecx, edx
.text:00403218                 shr     ecx, 1Fh
.text:0040321B                 add     esp, 4
.text:0040321E                 add     ecx, edx
.text:00403220                 push    esi
.text:00403221                 cmp     ecx, [ebp+var_14]
.text:00403224                 jge     short loc_40323B
.text:00403226                 mov     edx, [ebp+var_10]
.text:00403229                 mov     eax, [ebp+var_8]
.text:0040322C                 push    edx
.text:0040322D                 push    eax
.text:0040322E                 call    sub_403190
.text:00403233                 mov     ebx, [ebp+var_C]
.text:00403236                 mov     [ebp+var_8], ebx
.text:00403239                 jmp     short loc_40324B
.text:0040323B ; ---------------------------------------------------------------------------
.text:0040323B
.text:0040323B loc_40323B:                             ; CODE XREF: sub_403190+94↑j
.text:0040323B                 mov     ecx, [ebp+var_C]
.text:0040323E                 push    edi
.text:0040323F                 push    ecx
.text:00403240                 call    sub_403190
.text:00403245                 mov     edi, [ebp+var_10]
.text:00403248                 mov     ebx, [ebp+var_8]
.text:0040324B
.text:0040324B loc_40324B:                             ; CODE XREF: sub_403190+A9↑j
.text:0040324B                 mov     ecx, edi
.text:0040324D                 sub     ecx, ebx
.text:0040324F                 mov     eax, 92492493h
.text:00403254                 imul    ecx
.text:00403256                 add     edx, ecx
.text:00403258                 sar     edx, 4
.text:0040325B                 mov     eax, edx
.text:0040325D                 shr     eax, 1Fh
.text:00403260                 add     eax, edx
.text:00403262                 add     esp, 0Ch
.text:00403265                 cmp     eax, 20h ; ' '
.text:00403268                 jg      loc_4031C5
.text:0040326E
.text:0040326E loc_40326E:                             ; CODE XREF: sub_403190+2C↑j
.text:0040326E                                         ; sub_403190+FC↓j
.text:0040326E                 cmp     eax, 1
.text:00403271                 jle     short loc_403282
.text:00403273                 cmp     ebx, edi
.text:00403275                 jz      short loc_403282
.text:00403277                 push    edi
.text:00403278                 mov     ecx, ebx
.text:0040327A                 call    sub_404580
.text:0040327F                 add     esp, 4
.text:00403282
.text:00403282 loc_403282:                             ; CODE XREF: sub_403190+E1↑j
.text:00403282                                         ; sub_403190+E5↑j
.text:00403282                 pop     edi
.text:00403283                 pop     esi
.text:00403284                 pop     ebx
.text:00403285                 mov     esp, ebp
.text:00403287                 pop     ebp
.text:00403288                 retn
.text:00403289 ; ---------------------------------------------------------------------------
.text:00403289
.text:00403289 loc_403289:                             ; CODE XREF: sub_403190+37↑j
.text:00403289                 cmp     eax, 20h ; ' '
.text:0040328C                 jle     short loc_40326E
.text:0040328E                 mov     ecx, edi
.text:00403290                 sub     ecx, ebx
.text:00403292                 mov     eax, 92492493h
.text:00403297                 imul    ecx
.text:00403299                 add     edx, ecx
.text:0040329B                 sar     edx, 4
.text:0040329E                 mov     eax, edx
.text:004032A0                 shr     eax, 1Fh
.text:004032A3                 add     eax, edx
.text:004032A5                 cmp     eax, 1
.text:004032A8                 jle     short loc_4032B5
.text:004032AA                 push    edi
.text:004032AB                 mov     ecx, ebx
.text:004032AD                 call    sub_404400
.text:004032B2                 add     esp, 4
.text:004032B5
.text:004032B5 loc_4032B5:                             ; CODE XREF: sub_403190+118↑j
.text:004032B5                 mov     eax, edi
.text:004032B7                 call    sub_404530
.text:004032BC                 pop     edi
.text:004032BD                 pop     esi
.text:004032BE                 pop     ebx
.text:004032BF                 mov     esp, ebp
.text:004032C1                 pop     ebp
.text:004032C2                 retn
.text:004032C2 sub_403190      endp
.text:004032C2
.text:004032C2 ; ---------------------------------------------------------------------------
.text:004032C3                 align 10h
.text:004032D0
.text:004032D0 ; =============== S U B R O U T I N E =======================================
.text:004032D0
.text:004032D0 ; Attributes: bp-based frame
.text:004032D0
.text:004032D0 ; int __usercall sub_4032D0@<eax>(void *Dst@<ecx>, int)
.text:004032D0 sub_4032D0      proc near               ; CODE XREF: sub_4021D0+20↑p
.text:004032D0
.text:004032D0 arg_0           = dword ptr  8
.text:004032D0
.text:004032D0                 push    ebp
.text:004032D1                 mov     ebp, esp
.text:004032D3                 push    edi
.text:004032D4                 mov     edi, ecx
.text:004032D6                 cmp     eax, [ebp+arg_0]
.text:004032D9                 jz      short loc_403349
.text:004032DB                 push    ebx
.text:004032DC                 push    esi
.text:004032DD                 lea     esi, [eax+14h]
.text:004032E0                 xor     ebx, ebx
.text:004032E2
.text:004032E2 loc_4032E2:                             ; CODE XREF: sub_4032D0+75↓j
.text:004032E2                 lea     eax, [esi-14h]
.text:004032E5                 cmp     edi, eax
.text:004032E7                 jz      short loc_403339
.text:004032E9                 cmp     dword ptr [edi+14h], 10h
.text:004032ED                 jb      short loc_4032FB
.text:004032EF                 mov     ecx, [edi]
.text:004032F1                 push    ecx
.text:004032F2                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004032F8                 add     esp, 4
.text:004032FB
.text:004032FB loc_4032FB:                             ; CODE XREF: sub_4032D0+1D↑j
.text:004032FB                 mov     dword ptr [edi+14h], 0Fh
.text:00403302                 mov     [edi+10h], ebx
.text:00403305                 mov     [edi], bl
.text:00403307                 cmp     dword ptr [esi], 10h
.text:0040330A                 jnb     short loc_403321
.text:0040330C                 mov     edx, [esi-4]
.text:0040330F                 inc     edx
.text:00403310                 push    edx             ; Size
.text:00403311                 lea     eax, [esi-14h]
.text:00403314                 push    eax             ; Src
.text:00403315                 push    edi             ; Dst
.text:00403316                 call    ds:memmove
.text:0040331C                 add     esp, 0Ch
.text:0040331F                 jmp     short loc_403329
.text:00403321 ; ---------------------------------------------------------------------------
.text:00403321
.text:00403321 loc_403321:                             ; CODE XREF: sub_4032D0+3A↑j
.text:00403321                 mov     ecx, [esi-14h]
.text:00403324                 mov     [edi], ecx
.text:00403326                 mov     [esi-14h], ebx
.text:00403329
.text:00403329 loc_403329:                             ; CODE XREF: sub_4032D0+4F↑j
.text:00403329                 mov     edx, [esi-4]
.text:0040332C                 mov     [edi+10h], edx
.text:0040332F                 mov     eax, [esi]
.text:00403331                 mov     [edi+14h], eax
.text:00403334                 mov     [esi-4], ebx
.text:00403337                 mov     [esi], ebx
.text:00403339
.text:00403339 loc_403339:                             ; CODE XREF: sub_4032D0+17↑j
.text:00403339                 add     esi, 1Ch
.text:0040333C                 lea     ecx, [esi-14h]
.text:0040333F                 add     edi, 1Ch
.text:00403342                 cmp     ecx, [ebp+arg_0]
.text:00403345                 jnz     short loc_4032E2
.text:00403347                 pop     esi
.text:00403348                 pop     ebx
.text:00403349
.text:00403349 loc_403349:                             ; CODE XREF: sub_4032D0+9↑j
.text:00403349                 mov     eax, edi
.text:0040334B                 pop     edi
.text:0040334C                 pop     ebp
.text:0040334D                 retn
.text:0040334D sub_4032D0      endp
.text:0040334D
.text:0040334D ; ---------------------------------------------------------------------------
.text:0040334E                 align 10h
.text:00403350
.text:00403350 ; =============== S U B R O U T I N E =======================================
.text:00403350
.text:00403350 ; Attributes: bp-based frame
.text:00403350
.text:00403350 sub_403350      proc near               ; CODE XREF: sub_4030C0+28↑p
.text:00403350
.text:00403350 var_C           = dword ptr -0Ch
.text:00403350 var_8           = dword ptr -8
.text:00403350 var_4           = dword ptr -4
.text:00403350 arg_0           = dword ptr  8
.text:00403350 arg_4           = dword ptr  0Ch
.text:00403350 arg_8           = dword ptr  10h
.text:00403350
.text:00403350                 push    ebp
.text:00403351                 mov     ebp, esp
.text:00403353                 sub     esp, 0Ch
.text:00403356                 mov     ecx, [ebp+arg_8]
.text:00403359                 push    ebx
.text:0040335A                 push    esi
.text:0040335B                 mov     esi, [ebp+arg_4]
.text:0040335E                 mov     eax, ecx
.text:00403360                 sub     eax, esi
.text:00403362                 sar     eax, 3
.text:00403365                 cdq
.text:00403366                 sub     eax, edx
.text:00403368                 add     ecx, 0FFFFFFF8h
.text:0040336B                 push    edi
.text:0040336C                 sar     eax, 1
.text:0040336E                 push    ecx
.text:0040336F                 lea     ebx, [esi+eax*8]
.text:00403372                 mov     ecx, esi
.text:00403374                 call    sub_4040E0
.text:00403379                 add     esp, 4
.text:0040337C                 lea     edi, [ebx+8]
.text:0040337F                 mov     eax, ebx
.text:00403381                 mov     [ebp+var_4], edi
.text:00403384                 cmp     esi, ebx
.text:00403386                 jnb     short loc_4033AD
.text:00403388
.text:00403388 loc_403388:                             ; CODE XREF: sub_403350+5B↓j
.text:00403388                 mov     ecx, [eax]
.text:0040338A                 mov     edx, [eax-8]
.text:0040338D                 cmp     ecx, edx
.text:0040338F                 jg      short loc_4033AD
.text:00403391                 jl      short loc_4033AD
.text:00403393                 mov     ebx, [eax-4]
.text:00403396                 cmp     ebx, [eax+4]
.text:00403399                 jl      short loc_4033AD
.text:0040339B                 cmp     ecx, edx
.text:0040339D                 jl      short loc_4033AD
.text:0040339F                 mov     ecx, [eax+4]
.text:004033A2                 cmp     ecx, ebx
.text:004033A4                 jl      short loc_4033AD
.text:004033A6                 add     eax, 0FFFFFFF8h
.text:004033A9                 cmp     esi, eax
.text:004033AB                 jb      short loc_403388
.text:004033AD
.text:004033AD loc_4033AD:                             ; CODE XREF: sub_403350+36↑j
.text:004033AD                                         ; sub_403350+3F↑j ...
.text:004033AD                 mov     esi, [ebp+arg_8]
.text:004033B0                 cmp     edi, esi
.text:004033B2                 jnb     short loc_4033DB
.text:004033B4                 mov     edx, [eax]
.text:004033B6
.text:004033B6 loc_4033B6:                             ; CODE XREF: sub_403350+86↓j
.text:004033B6                 mov     ecx, [edi]
.text:004033B8                 cmp     edx, ecx
.text:004033BA                 jg      short loc_4033D8
.text:004033BC                 jl      short loc_4033D8
.text:004033BE                 mov     ebx, [edi+4]
.text:004033C1                 cmp     ebx, [eax+4]
.text:004033C4                 jl      short loc_4033D8
.text:004033C6                 cmp     edx, ecx
.text:004033C8                 jl      short loc_4033D8
.text:004033CA                 mov     ecx, [eax+4]
.text:004033CD                 cmp     ecx, ebx
.text:004033CF                 jl      short loc_4033D8
.text:004033D1                 add     edi, 8
.text:004033D4                 cmp     edi, esi
.text:004033D6                 jb      short loc_4033B6
.text:004033D8
.text:004033D8 loc_4033D8:                             ; CODE XREF: sub_403350+6A↑j
.text:004033D8                                         ; sub_403350+6C↑j ...
.text:004033D8                 mov     [ebp+var_4], edi
.text:004033DB
.text:004033DB loc_4033DB:                             ; CODE XREF: sub_403350+62↑j
.text:004033DB                 mov     ebx, eax
.text:004033DD                 mov     ecx, edi
.text:004033DF                 mov     [ebp+var_8], ebx
.text:004033E2
.text:004033E2 loc_4033E2:                             ; CODE XREF: sub_403350+17A↓j
.text:004033E2                                         ; sub_403350+1A3↓j ...
.text:004033E2                 cmp     ecx, [ebp+arg_8]
.text:004033E5                 jnb     short loc_403431
.text:004033E7
.text:004033E7 loc_4033E7:                             ; CODE XREF: sub_403350+DC↓j
.text:004033E7                 mov     esi, [ecx]
.text:004033E9                 mov     edx, [eax]
.text:004033EB                 cmp     esi, edx
.text:004033ED                 jg      short loc_403426
.text:004033EF                 jl      short loc_40342E
.text:004033F1                 mov     ebx, [eax+4]
.text:004033F4                 cmp     ebx, [ecx+4]
.text:004033F7                 mov     ebx, [ebp+var_8]
.text:004033FA                 jl      short loc_403426
.text:004033FC                 cmp     esi, edx
.text:004033FE                 jl      short loc_40342E
.text:00403400                 mov     edx, [ecx+4]
.text:00403403                 cmp     edx, [eax+4]
.text:00403406                 jl      short loc_40342E
.text:00403408                 mov     edx, edi
.text:0040340A                 add     edi, 8
.text:0040340D                 cmp     edx, ecx
.text:0040340F                 jz      short loc_403426
.text:00403411                 mov     ebx, [edx]
.text:00403413                 mov     [edx], esi
.text:00403415                 mov     [ecx], ebx
.text:00403417                 mov     ebx, [ecx+4]
.text:0040341A                 mov     esi, [edx+4]
.text:0040341D                 mov     [edx+4], ebx
.text:00403420                 mov     ebx, [ebp+var_8]
.text:00403423                 mov     [ecx+4], esi
.text:00403426
.text:00403426 loc_403426:                             ; CODE XREF: sub_403350+9D↑j
.text:00403426                                         ; sub_403350+AA↑j ...
.text:00403426                 add     ecx, 8
.text:00403429                 cmp     ecx, [ebp+arg_8]
.text:0040342C                 jb      short loc_4033E7
.text:0040342E
.text:0040342E loc_40342E:                             ; CODE XREF: sub_403350+9F↑j
.text:0040342E                                         ; sub_403350+AE↑j ...
.text:0040342E                 mov     [ebp+var_4], edi
.text:00403431
.text:00403431 loc_403431:                             ; CODE XREF: sub_403350+95↑j
.text:00403431                 cmp     ebx, [ebp+arg_4]
.text:00403434                 jbe     short loc_403491
.text:00403436                 lea     edx, [ebx-8]
.text:00403439                 lea     esp, [esp+0]
.text:00403440
.text:00403440 loc_403440:                             ; CODE XREF: sub_403350+139↓j
.text:00403440                 mov     esi, [eax]
.text:00403442                 mov     ebx, [edx]
.text:00403444                 cmp     esi, ebx
.text:00403446                 jg      short loc_40347A
.text:00403448                 jl      short loc_40348B
.text:0040344A                 mov     edi, [edx+4]
.text:0040344D                 cmp     edi, [eax+4]
.text:00403450                 mov     edi, [ebp+var_4]
.text:00403453                 jl      short loc_40347A
.text:00403455                 cmp     esi, ebx
.text:00403457                 jl      short loc_40348B
.text:00403459                 mov     esi, [eax+4]
.text:0040345C                 cmp     esi, [edx+4]
.text:0040345F                 jl      short loc_40348B
.text:00403461                 sub     eax, 8
.text:00403464                 cmp     eax, edx
.text:00403466                 jz      short loc_40347A
.text:00403468                 mov     esi, [eax]
.text:0040346A                 mov     [eax], ebx
.text:0040346C                 mov     [edx], esi
.text:0040346E                 mov     ebx, [edx+4]
.text:00403471                 mov     esi, [eax+4]
.text:00403474                 mov     [eax+4], ebx
.text:00403477                 mov     [edx+4], esi
.text:0040347A
.text:0040347A loc_40347A:                             ; CODE XREF: sub_403350+F6↑j
.text:0040347A                                         ; sub_403350+103↑j ...
.text:0040347A                 mov     esi, [ebp+var_8]
.text:0040347D                 sub     esi, 8
.text:00403480                 sub     edx, 8
.text:00403483                 mov     [ebp+var_8], esi
.text:00403486                 cmp     [ebp+arg_4], esi
.text:00403489                 jb      short loc_403440
.text:0040348B
.text:0040348B loc_40348B:                             ; CODE XREF: sub_403350+F8↑j
.text:0040348B                                         ; sub_403350+107↑j ...
.text:0040348B                 mov     ebx, [ebp+var_8]
.text:0040348E                 cmp     ebx, [ebp+arg_4]
.text:00403491
.text:00403491 loc_403491:                             ; CODE XREF: sub_403350+E4↑j
.text:00403491                 jnz     short loc_4034F8
.text:00403493                 cmp     ecx, [ebp+arg_8]
.text:00403496                 jz      loc_403565
.text:0040349C                 cmp     edi, ecx
.text:0040349E                 jz      short loc_4034B8
.text:004034A0                 cmp     eax, edi
.text:004034A2                 jz      short loc_4034B8
.text:004034A4                 mov     esi, [edi]
.text:004034A6                 mov     edx, [eax]
.text:004034A8                 mov     [eax], esi
.text:004034AA                 mov     [edi], edx
.text:004034AC                 mov     esi, [edi+4]
.text:004034AF                 mov     edx, [eax+4]
.text:004034B2                 mov     [eax+4], esi
.text:004034B5                 mov     [edi+4], edx
.text:004034B8
.text:004034B8 loc_4034B8:                             ; CODE XREF: sub_403350+14E↑j
.text:004034B8                                         ; sub_403350+152↑j
.text:004034B8                 mov     edx, ecx
.text:004034BA                 mov     esi, eax
.text:004034BC                 add     edi, 8
.text:004034BF                 add     eax, 8
.text:004034C2                 add     ecx, 8
.text:004034C5                 mov     [ebp+var_4], edi
.text:004034C8                 cmp     esi, edx
.text:004034CA                 jz      loc_4033E2
.text:004034D0                 mov     ebx, [esi]
.text:004034D2                 mov     [ebp+var_C], ebx
.text:004034D5                 mov     ebx, [edx]
.text:004034D7                 mov     [esi], ebx
.text:004034D9                 mov     ebx, [ebp+var_C]
.text:004034DC                 mov     [edx], ebx
.text:004034DE                 mov     ebx, [esi+4]
.text:004034E1                 mov     [ebp+var_C], ebx
.text:004034E4                 mov     ebx, [edx+4]
.text:004034E7                 mov     [esi+4], ebx
.text:004034EA                 mov     esi, [ebp+var_C]
.text:004034ED                 mov     ebx, [ebp+var_8]
.text:004034F0                 mov     [edx+4], esi
.text:004034F3                 jmp     loc_4033E2
.text:004034F8 ; ---------------------------------------------------------------------------
.text:004034F8
.text:004034F8 loc_4034F8:                             ; CODE XREF: sub_403350:loc_403491↑j
.text:004034F8                 sub     ebx, 8
.text:004034FB                 mov     [ebp+var_8], ebx
.text:004034FE                 cmp     ecx, [ebp+arg_8]
.text:00403501                 jnz     short loc_403545
.text:00403503                 sub     eax, 8
.text:00403506                 cmp     ebx, eax
.text:00403508                 jz      short loc_40351E
.text:0040350A                 mov     esi, [eax]
.text:0040350C                 mov     edx, [ebx]
.text:0040350E                 mov     [ebx], esi
.text:00403510                 mov     [eax], edx
.text:00403512                 mov     esi, [eax+4]
.text:00403515                 mov     edx, [ebx+4]
.text:00403518                 mov     [ebx+4], esi
.text:0040351B                 mov     [eax+4], edx
.text:0040351E
.text:0040351E loc_40351E:                             ; CODE XREF: sub_403350+1B8↑j
.text:0040351E                 sub     edi, 8
.text:00403521                 mov     [ebp+var_4], edi
.text:00403524                 cmp     eax, edi
.text:00403526                 jz      loc_4033E2
.text:0040352C                 mov     esi, [edi]
.text:0040352E                 mov     edx, [eax]
.text:00403530                 mov     [eax], esi
.text:00403532                 mov     [edi], edx
.text:00403534                 mov     esi, [edi+4]
.text:00403537                 mov     edx, [eax+4]
.text:0040353A                 mov     [eax+4], esi
.text:0040353D                 mov     [edi+4], edx
.text:00403540                 jmp     loc_4033E2
.text:00403545 ; ---------------------------------------------------------------------------
.text:00403545
.text:00403545 loc_403545:                             ; CODE XREF: sub_403350+1B1↑j
.text:00403545                 cmp     ecx, ebx
.text:00403547                 jz      short loc_40355D
.text:00403549                 mov     esi, [ebx]
.text:0040354B                 mov     edx, [ecx]
.text:0040354D                 mov     [ecx], esi
.text:0040354F                 mov     [ebx], edx
.text:00403551                 mov     esi, [ebx+4]
.text:00403554                 mov     edx, [ecx+4]
.text:00403557                 mov     [ecx+4], esi
.text:0040355A                 mov     [ebx+4], edx
.text:0040355D
.text:0040355D loc_40355D:                             ; CODE XREF: sub_403350+1F7↑j
.text:0040355D                 add     ecx, 8
.text:00403560                 jmp     loc_4033E2
.text:00403565 ; ---------------------------------------------------------------------------
.text:00403565
.text:00403565 loc_403565:                             ; CODE XREF: sub_403350+146↑j
.text:00403565                 mov     ecx, [ebp+arg_0]
.text:00403568                 mov     [ecx+4], edi
.text:0040356B                 pop     edi
.text:0040356C                 pop     esi
.text:0040356D                 mov     [ecx], eax
.text:0040356F                 mov     eax, ecx
.text:00403571                 pop     ebx
.text:00403572                 mov     esp, ebp
.text:00403574                 pop     ebp
.text:00403575                 retn
.text:00403575 sub_403350      endp
.text:00403575
.text:00403575 ; ---------------------------------------------------------------------------
.text:00403576                 align 10h
.text:00403580
.text:00403580 ; =============== S U B R O U T I N E =======================================
.text:00403580
.text:00403580 ; Attributes: bp-based frame
.text:00403580
.text:00403580 sub_403580      proc near               ; CODE XREF: sub_403190+45↑p
.text:00403580
.text:00403580 var_A0          = dword ptr -0A0h
.text:00403580 var_9C          = dword ptr -9Ch
.text:00403580 var_90          = dword ptr -90h
.text:00403580 var_8C          = dword ptr -8Ch
.text:00403580 var_80          = dword ptr -80h
.text:00403580 var_7C          = dword ptr -7Ch
.text:00403580 var_70          = dword ptr -70h
.text:00403580 var_6C          = dword ptr -6Ch
.text:00403580 var_60          = dword ptr -60h
.text:00403580 var_5C          = dword ptr -5Ch
.text:00403580 var_54          = dword ptr -54h
.text:00403580 var_50          = dword ptr -50h
.text:00403580 var_4C          = dword ptr -4Ch
.text:00403580 var_44          = dword ptr -44h
.text:00403580 var_40          = dword ptr -40h
.text:00403580 var_3C          = dword ptr -3Ch
.text:00403580 var_38          = dword ptr -38h
.text:00403580 var_34          = dword ptr -34h
.text:00403580 var_30          = dword ptr -30h
.text:00403580 var_2C          = dword ptr -2Ch
.text:00403580 var_28          = dword ptr -28h
.text:00403580 var_24          = dword ptr -24h
.text:00403580 var_20          = dword ptr -20h
.text:00403580 var_1C          = dword ptr -1Ch
.text:00403580 var_18          = dword ptr -18h
.text:00403580 var_14          = dword ptr -14h
.text:00403580 var_10          = dword ptr -10h
.text:00403580 var_C           = dword ptr -0Ch
.text:00403580 arg_0           = dword ptr  8
.text:00403580 arg_4           = dword ptr  0Ch
.text:00403580
.text:00403580 ; FUNCTION CHUNK AT .text:00405E00 SIZE 00000028 BYTES
.text:00403580
.text:00403580 ; __unwind { // SEH_403580
.text:00403580                 push    ebp
.text:00403581                 mov     ebp, esp
.text:00403583                 push    0FFFFFFFFh
.text:00403585                 push    offset SEH_403580
.text:0040358A                 mov     eax, large fs:0
.text:00403590                 push    eax
.text:00403591                 sub     esp, 9Ch
.text:00403597                 mov     eax, ___security_cookie
.text:0040359C                 xor     eax, ebp
.text:0040359E                 mov     [ebp+var_10], eax
.text:004035A1                 push    ebx
.text:004035A2                 push    esi
.text:004035A3                 push    edi
.text:004035A4                 push    eax
.text:004035A5                 lea     eax, [ebp+var_C]
.text:004035A8                 mov     large fs:0, eax
.text:004035AE                 mov     eax, [ebp+arg_0]
.text:004035B1                 mov     ebx, edx
.text:004035B3                 mov     [ebp+var_38], eax
.text:004035B6                 mov     edi, ecx
.text:004035B8                 mov     ecx, ebx
.text:004035BA                 sub     ecx, edi
.text:004035BC                 mov     eax, 92492493h
.text:004035C1                 imul    ecx
.text:004035C3                 add     edx, ecx
.text:004035C5                 sar     edx, 4
.text:004035C8                 mov     eax, edx
.text:004035CA                 shr     eax, 1Fh
.text:004035CD                 add     eax, edx
.text:004035CF                 cdq
.text:004035D0                 sub     eax, edx
.text:004035D2                 sar     eax, 1
.text:004035D4                 lea     ecx, ds:0[eax*8]
.text:004035DB                 sub     ecx, eax
.text:004035DD                 mov     [ebp+var_2C], ebx
.text:004035E0                 add     ebx, 0FFFFFFE4h
.text:004035E3                 lea     esi, [edi+ecx*4]
.text:004035E6                 push    ebx
.text:004035E7                 push    esi
.text:004035E8                 mov     eax, edi
.text:004035EA                 mov     [ebp+var_34], edi
.text:004035ED                 call    sub_404350
.text:004035F2                 add     esp, 8
.text:004035F5                 lea     edx, [esi+1Ch]
.text:004035F8                 mov     ecx, esi
.text:004035FA                 mov     [ebp+var_1C], edx
.text:004035FD                 cmp     edi, esi
.text:004035FF                 jnb     loc_40379A
.text:00403605                 lea     ebx, [esi-0Ch]
.text:00403608                 mov     [ebp+var_20], ebx
.text:0040360B
.text:0040360B loc_40360B:                             ; CODE XREF: sub_403580+214↓j
.text:0040360B                 cmp     dword ptr [ebx+20h], 10h
.text:0040360F                 mov     edi, [ebx+1Ch]
.text:00403612                 jb      short loc_403618
.text:00403614                 mov     edx, [ecx]
.text:00403616                 jmp     short loc_40361A
.text:00403618 ; ---------------------------------------------------------------------------
.text:00403618
.text:00403618 loc_403618:                             ; CODE XREF: sub_403580+92↑j
.text:00403618                 mov     edx, ecx
.text:0040361A
.text:0040361A loc_40361A:                             ; CODE XREF: sub_403580+96↑j
.text:0040361A                 mov     esi, [ebx]
.text:0040361C                 mov     eax, esi
.text:0040361E                 mov     [ebp+var_18], esi
.text:00403621                 cmp     eax, esi
.text:00403623                 jnb     short loc_403628
.text:00403625                 mov     [ebp+var_18], eax
.text:00403628
.text:00403628 loc_403628:                             ; CODE XREF: sub_403580+A3↑j
.text:00403628                 cmp     esi, edi
.text:0040362A                 jb      short loc_40362E
.text:0040362C                 mov     esi, edi
.text:0040362E
.text:0040362E loc_40362E:                             ; CODE XREF: sub_403580+AA↑j
.text:0040362E                 cmp     dword ptr [ebx+4], 10h
.text:00403632                 jb      short loc_403639
.text:00403634                 mov     edi, [ebx-10h]
.text:00403637                 jmp     short loc_40363C
.text:00403639 ; ---------------------------------------------------------------------------
.text:00403639
.text:00403639 loc_403639:                             ; CODE XREF: sub_403580+B2↑j
.text:00403639                 lea     edi, [ebx-10h]
.text:0040363C
.text:0040363C loc_40363C:                             ; CODE XREF: sub_403580+B7↑j
.text:0040363C                 cmp     esi, 4
.text:0040363F                 jb      short loc_403655
.text:00403641
.text:00403641 loc_403641:                             ; CODE XREF: sub_403580+D3↓j
.text:00403641                 mov     eax, [edi]
.text:00403643                 cmp     eax, [edx]
.text:00403645                 jnz     short loc_403659
.text:00403647                 sub     esi, 4
.text:0040364A                 add     edx, 4
.text:0040364D                 add     edi, 4
.text:00403650                 cmp     esi, 4
.text:00403653                 jnb     short loc_403641
.text:00403655
.text:00403655 loc_403655:                             ; CODE XREF: sub_403580+BF↑j
.text:00403655                 test    esi, esi
.text:00403657                 jz      short loc_4036A2
.text:00403659
.text:00403659 loc_403659:                             ; CODE XREF: sub_403580+C5↑j
.text:00403659                 movzx   eax, byte ptr [edi]
.text:0040365C                 movzx   ebx, byte ptr [edx]
.text:0040365F                 sub     eax, ebx
.text:00403661                 jnz     short loc_403694
.text:00403663                 cmp     esi, 1
.text:00403666                 jbe     short loc_40369F
.text:00403668                 movzx   eax, byte ptr [edi+1]
.text:0040366C                 movzx   ebx, byte ptr [edx+1]
.text:00403670                 sub     eax, ebx
.text:00403672                 jnz     short loc_403694
.text:00403674                 cmp     esi, 2
.text:00403677                 jbe     short loc_40369F
.text:00403679                 movzx   eax, byte ptr [edi+2]
.text:0040367D                 movzx   ebx, byte ptr [edx+2]
.text:00403681                 sub     eax, ebx
.text:00403683                 jnz     short loc_403694
.text:00403685                 cmp     esi, 3
.text:00403688                 jbe     short loc_40369F
.text:0040368A                 movzx   eax, byte ptr [edi+3]
.text:0040368E                 movzx   edx, byte ptr [edx+3]
.text:00403692                 sub     eax, edx
.text:00403694
.text:00403694 loc_403694:                             ; CODE XREF: sub_403580+E1↑j
.text:00403694                                         ; sub_403580+F2↑j ...
.text:00403694                 mov     ebx, [ebp+var_20]
.text:00403697                 sar     eax, 1Fh
.text:0040369A                 or      eax, 1
.text:0040369D                 jmp     short loc_4036A4
.text:0040369F ; ---------------------------------------------------------------------------
.text:0040369F
.text:0040369F loc_40369F:                             ; CODE XREF: sub_403580+E6↑j
.text:0040369F                                         ; sub_403580+F7↑j ...
.text:0040369F                 mov     ebx, [ebp+var_20]
.text:004036A2
.text:004036A2 loc_4036A2:                             ; CODE XREF: sub_403580+D7↑j
.text:004036A2                 xor     eax, eax
.text:004036A4
.text:004036A4 loc_4036A4:                             ; CODE XREF: sub_403580+11D↑j
.text:004036A4                 test    eax, eax
.text:004036A6                 jnz     short loc_4036C1
.text:004036A8                 mov     eax, [ebx+1Ch]
.text:004036AB                 cmp     [ebp+var_18], eax
.text:004036AE                 jnb     short loc_4036B5
.text:004036B0                 or      eax, 0FFFFFFFFh
.text:004036B3                 jmp     short loc_4036BF
.text:004036B5 ; ---------------------------------------------------------------------------
.text:004036B5
.text:004036B5 loc_4036B5:                             ; CODE XREF: sub_403580+12E↑j
.text:004036B5                 xor     edx, edx
.text:004036B7                 cmp     [ebp+var_18], eax
.text:004036BA                 setnz   dl
.text:004036BD                 mov     eax, edx
.text:004036BF
.text:004036BF loc_4036BF:                             ; CODE XREF: sub_403580+133↑j
.text:004036BF                 test    eax, eax
.text:004036C1
.text:004036C1 loc_4036C1:                             ; CODE XREF: sub_403580+126↑j
.text:004036C1                 sets    al
.text:004036C4                 test    al, al
.text:004036C6                 jnz     loc_40379A
.text:004036CC                 cmp     dword ptr [ebx+4], 10h
.text:004036D0                 jb      short loc_4036D7
.text:004036D2                 mov     edx, [ebx-10h]
.text:004036D5                 jmp     short loc_4036DA
.text:004036D7 ; ---------------------------------------------------------------------------
.text:004036D7
.text:004036D7 loc_4036D7:                             ; CODE XREF: sub_403580+150↑j
.text:004036D7                 lea     edx, [ebx-10h]
.text:004036DA
.text:004036DA loc_4036DA:                             ; CODE XREF: sub_403580+155↑j
.text:004036DA                 mov     esi, [ebx+1Ch]
.text:004036DD                 mov     eax, esi
.text:004036DF                 mov     [ebp+var_18], esi
.text:004036E2                 cmp     eax, esi
.text:004036E4                 jnb     short loc_4036E9
.text:004036E6                 mov     [ebp+var_18], eax
.text:004036E9
.text:004036E9 loc_4036E9:                             ; CODE XREF: sub_403580+164↑j
.text:004036E9                 mov     edi, [ebx]
.text:004036EB                 cmp     esi, edi
.text:004036ED                 jnb     short loc_4036F1
.text:004036EF                 mov     edi, esi
.text:004036F1
.text:004036F1 loc_4036F1:                             ; CODE XREF: sub_403580+16D↑j
.text:004036F1                 cmp     dword ptr [ebx+20h], 10h
.text:004036F5                 jb      short loc_4036FB
.text:004036F7                 mov     esi, [ecx]
.text:004036F9                 jmp     short loc_4036FD
.text:004036FB ; ---------------------------------------------------------------------------
.text:004036FB
.text:004036FB loc_4036FB:                             ; CODE XREF: sub_403580+175↑j
.text:004036FB                 mov     esi, ecx
.text:004036FD
.text:004036FD loc_4036FD:                             ; CODE XREF: sub_403580+179↑j
.text:004036FD                 cmp     edi, 4
.text:00403700                 jb      short loc_403716
.text:00403702
.text:00403702 loc_403702:                             ; CODE XREF: sub_403580+194↓j
.text:00403702                 mov     eax, [esi]
.text:00403704                 cmp     eax, [edx]
.text:00403706                 jnz     short loc_40371A
.text:00403708                 sub     edi, 4
.text:0040370B                 add     edx, 4
.text:0040370E                 add     esi, 4
.text:00403711                 cmp     edi, 4
.text:00403714                 jnb     short loc_403702
.text:00403716
.text:00403716 loc_403716:                             ; CODE XREF: sub_403580+180↑j
.text:00403716                 test    edi, edi
.text:00403718                 jz      short loc_403763
.text:0040371A
.text:0040371A loc_40371A:                             ; CODE XREF: sub_403580+186↑j
.text:0040371A                 movzx   eax, byte ptr [esi]
.text:0040371D                 movzx   ebx, byte ptr [edx]
.text:00403720                 sub     eax, ebx
.text:00403722                 jnz     short loc_403755
.text:00403724                 cmp     edi, 1
.text:00403727                 jbe     short loc_403760
.text:00403729                 movzx   eax, byte ptr [esi+1]
.text:0040372D                 movzx   ebx, byte ptr [edx+1]
.text:00403731                 sub     eax, ebx
.text:00403733                 jnz     short loc_403755
.text:00403735                 cmp     edi, 2
.text:00403738                 jbe     short loc_403760
.text:0040373A                 movzx   eax, byte ptr [esi+2]
.text:0040373E                 movzx   ebx, byte ptr [edx+2]
.text:00403742                 sub     eax, ebx
.text:00403744                 jnz     short loc_403755
.text:00403746                 cmp     edi, 3
.text:00403749                 jbe     short loc_403760
.text:0040374B                 movzx   eax, byte ptr [esi+3]
.text:0040374F                 movzx   edx, byte ptr [edx+3]
.text:00403753                 sub     eax, edx
.text:00403755
.text:00403755 loc_403755:                             ; CODE XREF: sub_403580+1A2↑j
.text:00403755                                         ; sub_403580+1B3↑j ...
.text:00403755                 mov     ebx, [ebp+var_20]
.text:00403758                 sar     eax, 1Fh
.text:0040375B                 or      eax, 1
.text:0040375E                 jmp     short loc_403765
.text:00403760 ; ---------------------------------------------------------------------------
.text:00403760
.text:00403760 loc_403760:                             ; CODE XREF: sub_403580+1A7↑j
.text:00403760                                         ; sub_403580+1B8↑j ...
.text:00403760                 mov     ebx, [ebp+var_20]
.text:00403763
.text:00403763 loc_403763:                             ; CODE XREF: sub_403580+198↑j
.text:00403763                 xor     eax, eax
.text:00403765
.text:00403765 loc_403765:                             ; CODE XREF: sub_403580+1DE↑j
.text:00403765                 test    eax, eax
.text:00403767                 jnz     short loc_403781
.text:00403769                 mov     eax, [ebx]
.text:0040376B                 cmp     [ebp+var_18], eax
.text:0040376E                 jnb     short loc_403775
.text:00403770                 or      eax, 0FFFFFFFFh
.text:00403773                 jmp     short loc_40377F
.text:00403775 ; ---------------------------------------------------------------------------
.text:00403775
.text:00403775 loc_403775:                             ; CODE XREF: sub_403580+1EE↑j
.text:00403775                 xor     edx, edx
.text:00403777                 cmp     [ebp+var_18], eax
.text:0040377A                 setnz   dl
.text:0040377D                 mov     eax, edx
.text:0040377F
.text:0040377F loc_40377F:                             ; CODE XREF: sub_403580+1F3↑j
.text:0040377F                 test    eax, eax
.text:00403781
.text:00403781 loc_403781:                             ; CODE XREF: sub_403580+1E7↑j
.text:00403781                 sets    al
.text:00403784                 test    al, al
.text:00403786                 jnz     short loc_40379A
.text:00403788                 sub     ecx, 1Ch
.text:0040378B                 sub     ebx, 1Ch
.text:0040378E                 mov     [ebp+var_20], ebx
.text:00403791                 cmp     [ebp+var_34], ecx
.text:00403794                 jb      loc_40360B
.text:0040379A
.text:0040379A loc_40379A:                             ; CODE XREF: sub_403580+7F↑j
.text:0040379A                                         ; sub_403580+146↑j ...
.text:0040379A                 mov     edi, [ebp+var_1C]
.text:0040379D                 cmp     edi, [ebp+var_2C]
.text:004037A0                 jnb     loc_40394E
.text:004037A6                 jmp     short loc_4037B3
.text:004037A8 ; ---------------------------------------------------------------------------
.text:004037A8                 jmp     short loc_4037B0
.text:004037A8 ; ---------------------------------------------------------------------------
.text:004037AA                 align 10h
.text:004037B0
.text:004037B0 loc_4037B0:                             ; CODE XREF: sub_403580+228↑j
.text:004037B0                                         ; sub_403580+3C8↓j
.text:004037B0                 mov     edi, [ebp+var_1C]
.text:004037B3
.text:004037B3 loc_4037B3:                             ; CODE XREF: sub_403580+226↑j
.text:004037B3                 cmp     dword ptr [ecx+14h], 10h
.text:004037B7                 jb      short loc_4037BD
.text:004037B9                 mov     edx, [ecx]
.text:004037BB                 jmp     short loc_4037BF
.text:004037BD ; ---------------------------------------------------------------------------
.text:004037BD
.text:004037BD loc_4037BD:                             ; CODE XREF: sub_403580+237↑j
.text:004037BD                 mov     edx, ecx
.text:004037BF
.text:004037BF loc_4037BF:                             ; CODE XREF: sub_403580+23B↑j
.text:004037BF                 mov     ebx, [edi+10h]
.text:004037C2                 mov     eax, ebx
.text:004037C4                 mov     [ebp+var_18], ebx
.text:004037C7                 cmp     eax, ebx
.text:004037C9                 jnb     short loc_4037CE
.text:004037CB                 mov     [ebp+var_18], eax
.text:004037CE
.text:004037CE loc_4037CE:                             ; CODE XREF: sub_403580+249↑j
.text:004037CE                 mov     esi, [ecx+10h]
.text:004037D1                 cmp     ebx, esi
.text:004037D3                 jnb     short loc_4037D7
.text:004037D5                 mov     esi, ebx
.text:004037D7
.text:004037D7 loc_4037D7:                             ; CODE XREF: sub_403580+253↑j
.text:004037D7                 cmp     dword ptr [edi+14h], 10h
.text:004037DB                 jb      short loc_4037E4
.text:004037DD                 mov     eax, [ebp+var_1C]
.text:004037E0                 mov     edi, [eax]
.text:004037E2                 jmp     short loc_4037E7
.text:004037E4 ; ---------------------------------------------------------------------------
.text:004037E4
.text:004037E4 loc_4037E4:                             ; CODE XREF: sub_403580+25B↑j
.text:004037E4                 mov     edi, [ebp+var_1C]
.text:004037E7
.text:004037E7 loc_4037E7:                             ; CODE XREF: sub_403580+262↑j
.text:004037E7                 cmp     esi, 4
.text:004037EA                 jb      short loc_403804
.text:004037EC                 lea     esp, [esp+0]
.text:004037F0
.text:004037F0 loc_4037F0:                             ; CODE XREF: sub_403580+282↓j
.text:004037F0                 mov     eax, [edi]
.text:004037F2                 cmp     eax, [edx]
.text:004037F4                 jnz     short loc_403808
.text:004037F6                 sub     esi, 4
.text:004037F9                 add     edx, 4
.text:004037FC                 add     edi, 4
.text:004037FF                 cmp     esi, 4
.text:00403802                 jnb     short loc_4037F0
.text:00403804
.text:00403804 loc_403804:                             ; CODE XREF: sub_403580+26A↑j
.text:00403804                 test    esi, esi
.text:00403806                 jz      short loc_403851
.text:00403808
.text:00403808 loc_403808:                             ; CODE XREF: sub_403580+274↑j
.text:00403808                 movzx   eax, byte ptr [edi]
.text:0040380B                 movzx   ebx, byte ptr [edx]
.text:0040380E                 sub     eax, ebx
.text:00403810                 jnz     short loc_403843
.text:00403812                 cmp     esi, 1
.text:00403815                 jbe     short loc_40384E
.text:00403817                 movzx   eax, byte ptr [edi+1]
.text:0040381B                 movzx   ebx, byte ptr [edx+1]
.text:0040381F                 sub     eax, ebx
.text:00403821                 jnz     short loc_403843
.text:00403823                 cmp     esi, 2
.text:00403826                 jbe     short loc_40384E
.text:00403828                 movzx   eax, byte ptr [edi+2]
.text:0040382C                 movzx   ebx, byte ptr [edx+2]
.text:00403830                 sub     eax, ebx
.text:00403832                 jnz     short loc_403843
.text:00403834                 cmp     esi, 3
.text:00403837                 jbe     short loc_40384E
.text:00403839                 movzx   eax, byte ptr [edi+3]
.text:0040383D                 movzx   edx, byte ptr [edx+3]
.text:00403841                 sub     eax, edx
.text:00403843
.text:00403843 loc_403843:                             ; CODE XREF: sub_403580+290↑j
.text:00403843                                         ; sub_403580+2A1↑j ...
.text:00403843                 mov     ebx, [ebp+var_18]
.text:00403846                 sar     eax, 1Fh
.text:00403849                 or      eax, 1
.text:0040384C                 jmp     short loc_403853
.text:0040384E ; ---------------------------------------------------------------------------
.text:0040384E
.text:0040384E loc_40384E:                             ; CODE XREF: sub_403580+295↑j
.text:0040384E                                         ; sub_403580+2A6↑j ...
.text:0040384E                 mov     ebx, [ebp+var_18]
.text:00403851
.text:00403851 loc_403851:                             ; CODE XREF: sub_403580+286↑j
.text:00403851                 xor     eax, eax
.text:00403853
.text:00403853 loc_403853:                             ; CODE XREF: sub_403580+2CC↑j
.text:00403853                 test    eax, eax
.text:00403855                 jnz     short loc_40386E
.text:00403857                 mov     eax, [ecx+10h]
.text:0040385A                 cmp     ebx, eax
.text:0040385C                 jnb     short loc_403863
.text:0040385E                 or      eax, 0FFFFFFFFh
.text:00403861                 jmp     short loc_40386C
.text:00403863 ; ---------------------------------------------------------------------------
.text:00403863
.text:00403863 loc_403863:                             ; CODE XREF: sub_403580+2DC↑j
.text:00403863                 xor     edx, edx
.text:00403865                 cmp     ebx, eax
.text:00403867                 setnz   dl
.text:0040386A                 mov     eax, edx
.text:0040386C
.text:0040386C loc_40386C:                             ; CODE XREF: sub_403580+2E1↑j
.text:0040386C                 test    eax, eax
.text:0040386E
.text:0040386E loc_40386E:                             ; CODE XREF: sub_403580+2D5↑j
.text:0040386E                 sets    al
.text:00403871                 test    al, al
.text:00403873                 jnz     loc_40394E
.text:00403879                 mov     esi, [ebp+var_1C]
.text:0040387C                 mov     edi, 10h
.text:00403881                 cmp     [esi+14h], edi
.text:00403884                 jb      short loc_40388A
.text:00403886                 mov     edx, [esi]
.text:00403888                 jmp     short loc_40388C
.text:0040388A ; ---------------------------------------------------------------------------
.text:0040388A
.text:0040388A loc_40388A:                             ; CODE XREF: sub_403580+304↑j
.text:0040388A                 mov     edx, esi
.text:0040388C
.text:0040388C loc_40388C:                             ; CODE XREF: sub_403580+308↑j
.text:0040388C                 mov     ebx, [ecx+10h]
.text:0040388F                 mov     eax, ebx
.text:00403891                 mov     [ebp+var_18], ebx
.text:00403894                 cmp     eax, ebx
.text:00403896                 jnb     short loc_40389B
.text:00403898                 mov     [ebp+var_18], eax
.text:0040389B
.text:0040389B loc_40389B:                             ; CODE XREF: sub_403580+316↑j
.text:0040389B                 mov     esi, [esi+10h]
.text:0040389E                 cmp     ebx, esi
.text:004038A0                 jnb     short loc_4038A4
.text:004038A2                 mov     esi, ebx
.text:004038A4
.text:004038A4 loc_4038A4:                             ; CODE XREF: sub_403580+320↑j
.text:004038A4                 cmp     [ecx+14h], edi
.text:004038A7                 jb      short loc_4038AD
.text:004038A9                 mov     edi, [ecx]
.text:004038AB                 jmp     short loc_4038AF
.text:004038AD ; ---------------------------------------------------------------------------
.text:004038AD
.text:004038AD loc_4038AD:                             ; CODE XREF: sub_403580+327↑j
.text:004038AD                 mov     edi, ecx
.text:004038AF
.text:004038AF loc_4038AF:                             ; CODE XREF: sub_403580+32B↑j
.text:004038AF                 cmp     esi, 4
.text:004038B2                 jb      short loc_4038C8
.text:004038B4
.text:004038B4 loc_4038B4:                             ; CODE XREF: sub_403580+346↓j
.text:004038B4                 mov     eax, [edi]
.text:004038B6                 cmp     eax, [edx]
.text:004038B8                 jnz     short loc_4038CC
.text:004038BA                 sub     esi, 4
.text:004038BD                 add     edx, 4
.text:004038C0                 add     edi, 4
.text:004038C3                 cmp     esi, 4
.text:004038C6                 jnb     short loc_4038B4
.text:004038C8
.text:004038C8 loc_4038C8:                             ; CODE XREF: sub_403580+332↑j
.text:004038C8                 test    esi, esi
.text:004038CA                 jz      short loc_403915
.text:004038CC
.text:004038CC loc_4038CC:                             ; CODE XREF: sub_403580+338↑j
.text:004038CC                 movzx   ebx, byte ptr [edx]
.text:004038CF                 movzx   eax, byte ptr [edi]
.text:004038D2                 sub     eax, ebx
.text:004038D4                 jnz     short loc_403907
.text:004038D6                 cmp     esi, 1
.text:004038D9                 jbe     short loc_403912
.text:004038DB                 movzx   eax, byte ptr [edi+1]
.text:004038DF                 movzx   ebx, byte ptr [edx+1]
.text:004038E3                 sub     eax, ebx
.text:004038E5                 jnz     short loc_403907
.text:004038E7                 cmp     esi, 2
.text:004038EA                 jbe     short loc_403912
.text:004038EC                 movzx   eax, byte ptr [edi+2]
.text:004038F0                 movzx   ebx, byte ptr [edx+2]
.text:004038F4                 sub     eax, ebx
.text:004038F6                 jnz     short loc_403907
.text:004038F8                 cmp     esi, 3
.text:004038FB                 jbe     short loc_403912
.text:004038FD                 movzx   eax, byte ptr [edi+3]
.text:00403901                 movzx   edx, byte ptr [edx+3]
.text:00403905                 sub     eax, edx
.text:00403907
.text:00403907 loc_403907:                             ; CODE XREF: sub_403580+354↑j
.text:00403907                                         ; sub_403580+365↑j ...
.text:00403907                 mov     ebx, [ebp+var_18]
.text:0040390A                 sar     eax, 1Fh
.text:0040390D                 or      eax, 1
.text:00403910                 jmp     short loc_403917
.text:00403912 ; ---------------------------------------------------------------------------
.text:00403912
.text:00403912 loc_403912:                             ; CODE XREF: sub_403580+359↑j
.text:00403912                                         ; sub_403580+36A↑j ...
.text:00403912                 mov     ebx, [ebp+var_18]
.text:00403915
.text:00403915 loc_403915:                             ; CODE XREF: sub_403580+34A↑j
.text:00403915                 xor     eax, eax
.text:00403917
.text:00403917 loc_403917:                             ; CODE XREF: sub_403580+390↑j
.text:00403917                 test    eax, eax
.text:00403919                 jnz     short loc_403935
.text:0040391B                 mov     eax, [ebp+var_1C]
.text:0040391E                 mov     eax, [eax+10h]
.text:00403921                 cmp     ebx, eax
.text:00403923                 jnb     short loc_40392A
.text:00403925                 or      eax, 0FFFFFFFFh
.text:00403928                 jmp     short loc_403933
.text:0040392A ; ---------------------------------------------------------------------------
.text:0040392A
.text:0040392A loc_40392A:                             ; CODE XREF: sub_403580+3A3↑j
.text:0040392A                 xor     edx, edx
.text:0040392C                 cmp     ebx, eax
.text:0040392E                 setnz   dl
.text:00403931                 mov     eax, edx
.text:00403933
.text:00403933 loc_403933:                             ; CODE XREF: sub_403580+3A8↑j
.text:00403933                 test    eax, eax
.text:00403935
.text:00403935 loc_403935:                             ; CODE XREF: sub_403580+399↑j
.text:00403935                 sets    al
.text:00403938                 test    al, al
.text:0040393A                 jnz     short loc_40394E
.text:0040393C                 mov     eax, [ebp+var_1C]
.text:0040393F                 add     eax, 1Ch
.text:00403942                 mov     [ebp+var_1C], eax
.text:00403945                 cmp     eax, [ebp+var_2C]
.text:00403948                 jb      loc_4037B0
.text:0040394E
.text:0040394E loc_40394E:                             ; CODE XREF: sub_403580+220↑j
.text:0040394E                                         ; sub_403580+2F3↑j ...
.text:0040394E                 mov     ebx, [ebp+var_1C]
.text:00403951                 mov     [ebp+var_18], ecx
.text:00403954
.text:00403954 loc_403954:                             ; CODE XREF: sub_403580+A4A↓j
.text:00403954                 mov     [ebp+var_20], ebx
.text:00403957
.text:00403957 loc_403957:                             ; CODE XREF: sub_403580+8B7↓j
.text:00403957                                         ; sub_403580+913↓j ...
.text:00403957                 cmp     ebx, [ebp+var_2C]
.text:0040395A                 jnb     loc_403B54
.text:00403960
.text:00403960 loc_403960:                             ; CODE XREF: sub_403580+5CB↓j
.text:00403960                 mov     esi, [ebx+10h]
.text:00403963                 mov     edi, 10h
.text:00403968                 cmp     [ebx+14h], edi
.text:0040396B                 jb      short loc_403971
.text:0040396D                 mov     edx, [ebx]
.text:0040396F                 jmp     short loc_403973
.text:00403971 ; ---------------------------------------------------------------------------
.text:00403971
.text:00403971 loc_403971:                             ; CODE XREF: sub_403580+3EB↑j
.text:00403971                 mov     edx, ebx
.text:00403973
.text:00403973 loc_403973:                             ; CODE XREF: sub_403580+3EF↑j
.text:00403973                 mov     eax, [ecx+10h]
.text:00403976                 cmp     eax, esi
.text:00403978                 jnb     short loc_40397C
.text:0040397A                 mov     esi, eax
.text:0040397C
.text:0040397C loc_40397C:                             ; CODE XREF: sub_403580+3F8↑j
.text:0040397C                 cmp     [ecx+14h], edi
.text:0040397F                 jb      short loc_403988
.text:00403981                 mov     eax, [ecx]
.text:00403983                 mov     [ebp+var_14], eax
.text:00403986                 jmp     short loc_40398D
.text:00403988 ; ---------------------------------------------------------------------------
.text:00403988
.text:00403988 loc_403988:                             ; CODE XREF: sub_403580+3FF↑j
.text:00403988                 mov     eax, ecx
.text:0040398A                 mov     [ebp+var_14], ecx
.text:0040398D
.text:0040398D loc_40398D:                             ; CODE XREF: sub_403580+406↑j
.text:0040398D                 cmp     esi, 4
.text:00403990                 jb      short loc_4039A9
.text:00403992
.text:00403992 loc_403992:                             ; CODE XREF: sub_403580+424↓j
.text:00403992                 mov     edi, [eax]
.text:00403994                 cmp     edi, [edx]
.text:00403996                 jnz     short loc_4039C2
.text:00403998                 sub     esi, 4
.text:0040399B                 add     edx, 4
.text:0040399E                 add     eax, 4
.text:004039A1                 cmp     esi, 4
.text:004039A4                 jnb     short loc_403992
.text:004039A6                 mov     [ebp+var_14], eax
.text:004039A9
.text:004039A9 loc_4039A9:                             ; CODE XREF: sub_403580+410↑j
.text:004039A9                 test    esi, esi
.text:004039AB                 jnz     short loc_4039C5
.text:004039AD
.text:004039AD loc_4039AD:                             ; CODE XREF: sub_403580+452↓j
.text:004039AD                                         ; sub_403580+466↓j ...
.text:004039AD                 xor     eax, eax
.text:004039AF
.text:004039AF loc_4039AF:                             ; CODE XREF: sub_403580+48F↓j
.text:004039AF                 test    eax, eax
.text:004039B1                 jnz     short loc_403A1A
.text:004039B3                 mov     edi, [ebx+10h]
.text:004039B6                 mov     esi, [ecx+10h]
.text:004039B9                 cmp     esi, edi
.text:004039BB                 jnb     short loc_403A11
.text:004039BD                 or      eax, 0FFFFFFFFh
.text:004039C0                 jmp     short loc_403A18
.text:004039C2 ; ---------------------------------------------------------------------------
.text:004039C2
.text:004039C2 loc_4039C2:                             ; CODE XREF: sub_403580+416↑j
.text:004039C2                 mov     [ebp+var_14], eax
.text:004039C5
.text:004039C5 loc_4039C5:                             ; CODE XREF: sub_403580+42B↑j
.text:004039C5                 movzx   eax, byte ptr [eax]
.text:004039C8                 movzx   edi, byte ptr [edx]
.text:004039CB                 sub     eax, edi
.text:004039CD                 jnz     short loc_403A09
.text:004039CF                 cmp     esi, 1
.text:004039D2                 jbe     short loc_4039AD
.text:004039D4                 mov     eax, [ebp+var_14]
.text:004039D7                 movzx   eax, byte ptr [eax+1]
.text:004039DB                 movzx   edi, byte ptr [edx+1]
.text:004039DF                 sub     eax, edi
.text:004039E1                 jnz     short loc_403A09
.text:004039E3                 cmp     esi, 2
.text:004039E6                 jbe     short loc_4039AD
.text:004039E8                 mov     eax, [ebp+var_14]
.text:004039EB                 movzx   eax, byte ptr [eax+2]
.text:004039EF                 movzx   edi, byte ptr [edx+2]
.text:004039F3                 sub     eax, edi
.text:004039F5                 jnz     short loc_403A09
.text:004039F7                 cmp     esi, 3
.text:004039FA                 jbe     short loc_4039AD
.text:004039FC                 mov     eax, [ebp+var_14]
.text:004039FF                 movzx   eax, byte ptr [eax+3]
.text:00403A03                 movzx   edx, byte ptr [edx+3]
.text:00403A07                 sub     eax, edx
.text:00403A09
.text:00403A09 loc_403A09:                             ; CODE XREF: sub_403580+44D↑j
.text:00403A09                                         ; sub_403580+461↑j ...
.text:00403A09                 sar     eax, 1Fh
.text:00403A0C                 or      eax, 1
.text:00403A0F                 jmp     short loc_4039AF
.text:00403A11 ; ---------------------------------------------------------------------------
.text:00403A11
.text:00403A11 loc_403A11:                             ; CODE XREF: sub_403580+43B↑j
.text:00403A11                 xor     eax, eax
.text:00403A13                 cmp     esi, edi
.text:00403A15                 setnz   al
.text:00403A18
.text:00403A18 loc_403A18:                             ; CODE XREF: sub_403580+440↑j
.text:00403A18                 test    eax, eax
.text:00403A1A
.text:00403A1A loc_403A1A:                             ; CODE XREF: sub_403580+431↑j
.text:00403A1A                 sets    al
.text:00403A1D                 test    al, al
.text:00403A1F                 jnz     loc_403B45
.text:00403A25                 mov     edi, 10h
.text:00403A2A                 cmp     [ecx+14h], edi
.text:00403A2D                 jb      short loc_403A33
.text:00403A2F                 mov     edx, [ecx]
.text:00403A31                 jmp     short loc_403A35
.text:00403A33 ; ---------------------------------------------------------------------------
.text:00403A33
.text:00403A33 loc_403A33:                             ; CODE XREF: sub_403580+4AD↑j
.text:00403A33                 mov     edx, ecx
.text:00403A35
.text:00403A35 loc_403A35:                             ; CODE XREF: sub_403580+4B1↑j
.text:00403A35                 mov     esi, [ebx+10h]
.text:00403A38                 mov     eax, [ecx+10h]
.text:00403A3B                 cmp     esi, eax
.text:00403A3D                 jb      short loc_403A41
.text:00403A3F                 mov     esi, eax
.text:00403A41
.text:00403A41 loc_403A41:                             ; CODE XREF: sub_403580+4BD↑j
.text:00403A41                 cmp     [ebx+14h], edi
.text:00403A44                 jb      short loc_403A4D
.text:00403A46                 mov     eax, [ebx]
.text:00403A48                 mov     [ebp+var_14], eax
.text:00403A4B                 jmp     short loc_403A52
.text:00403A4D ; ---------------------------------------------------------------------------
.text:00403A4D
.text:00403A4D loc_403A4D:                             ; CODE XREF: sub_403580+4C4↑j
.text:00403A4D                 mov     eax, ebx
.text:00403A4F                 mov     [ebp+var_14], ebx
.text:00403A52
.text:00403A52 loc_403A52:                             ; CODE XREF: sub_403580+4CB↑j
.text:00403A52                 cmp     esi, 4
.text:00403A55                 jb      short loc_403A6E
.text:00403A57
.text:00403A57 loc_403A57:                             ; CODE XREF: sub_403580+4E9↓j
.text:00403A57                 mov     edi, [eax]
.text:00403A59                 cmp     edi, [edx]
.text:00403A5B                 jnz     short loc_403A87
.text:00403A5D                 sub     esi, 4
.text:00403A60                 add     edx, 4
.text:00403A63                 add     eax, 4
.text:00403A66                 cmp     esi, 4
.text:00403A69                 jnb     short loc_403A57
.text:00403A6B                 mov     [ebp+var_14], eax
.text:00403A6E
.text:00403A6E loc_403A6E:                             ; CODE XREF: sub_403580+4D5↑j
.text:00403A6E                 test    esi, esi
.text:00403A70                 jnz     short loc_403A8A
.text:00403A72
.text:00403A72 loc_403A72:                             ; CODE XREF: sub_403580+517↓j
.text:00403A72                                         ; sub_403580+52B↓j ...
.text:00403A72                 xor     eax, eax
.text:00403A74
.text:00403A74 loc_403A74:                             ; CODE XREF: sub_403580+554↓j
.text:00403A74                 test    eax, eax
.text:00403A76                 jnz     short loc_403ADF
.text:00403A78                 mov     edi, [ebx+10h]
.text:00403A7B                 mov     esi, [ecx+10h]
.text:00403A7E                 cmp     edi, esi
.text:00403A80                 jnb     short loc_403AD6
.text:00403A82                 or      eax, 0FFFFFFFFh
.text:00403A85                 jmp     short loc_403ADD
.text:00403A87 ; ---------------------------------------------------------------------------
.text:00403A87
.text:00403A87 loc_403A87:                             ; CODE XREF: sub_403580+4DB↑j
.text:00403A87                 mov     [ebp+var_14], eax
.text:00403A8A
.text:00403A8A loc_403A8A:                             ; CODE XREF: sub_403580+4F0↑j
.text:00403A8A                 movzx   eax, byte ptr [eax]
.text:00403A8D                 movzx   edi, byte ptr [edx]
.text:00403A90                 sub     eax, edi
.text:00403A92                 jnz     short loc_403ACE
.text:00403A94                 cmp     esi, 1
.text:00403A97                 jbe     short loc_403A72
.text:00403A99                 mov     eax, [ebp+var_14]
.text:00403A9C                 movzx   eax, byte ptr [eax+1]
.text:00403AA0                 movzx   edi, byte ptr [edx+1]
.text:00403AA4                 sub     eax, edi
.text:00403AA6                 jnz     short loc_403ACE
.text:00403AA8                 cmp     esi, 2
.text:00403AAB                 jbe     short loc_403A72
.text:00403AAD                 mov     eax, [ebp+var_14]
.text:00403AB0                 movzx   eax, byte ptr [eax+2]
.text:00403AB4                 movzx   edi, byte ptr [edx+2]
.text:00403AB8                 sub     eax, edi
.text:00403ABA                 jnz     short loc_403ACE
.text:00403ABC                 cmp     esi, 3
.text:00403ABF                 jbe     short loc_403A72
.text:00403AC1                 mov     eax, [ebp+var_14]
.text:00403AC4                 movzx   eax, byte ptr [eax+3]
.text:00403AC8                 movzx   edx, byte ptr [edx+3]
.text:00403ACC                 sub     eax, edx
.text:00403ACE
.text:00403ACE loc_403ACE:                             ; CODE XREF: sub_403580+512↑j
.text:00403ACE                                         ; sub_403580+526↑j ...
.text:00403ACE                 sar     eax, 1Fh
.text:00403AD1                 or      eax, 1
.text:00403AD4                 jmp     short loc_403A74
.text:00403AD6 ; ---------------------------------------------------------------------------
.text:00403AD6
.text:00403AD6 loc_403AD6:                             ; CODE XREF: sub_403580+500↑j
.text:00403AD6                 xor     eax, eax
.text:00403AD8                 cmp     edi, esi
.text:00403ADA                 setnz   al
.text:00403ADD
.text:00403ADD loc_403ADD:                             ; CODE XREF: sub_403580+505↑j
.text:00403ADD                 test    eax, eax
.text:00403ADF
.text:00403ADF loc_403ADF:                             ; CODE XREF: sub_403580+4F6↑j
.text:00403ADF                 sets    al
.text:00403AE2                 test    al, al
.text:00403AE4                 jnz     short loc_403B51
.text:00403AE6                 mov     edx, [ebp+var_1C]
.text:00403AE9                 mov     eax, edx
.text:00403AEB                 add     edx, 1Ch
.text:00403AEE                 mov     [ebp+var_1C], edx
.text:00403AF1                 cmp     eax, ebx
.text:00403AF3                 jz      short loc_403B45
.text:00403AF5                 mov     edi, [eax+8]
.text:00403AF8                 mov     edx, [eax]
.text:00403AFA                 mov     esi, [eax+4]
.text:00403AFD                 mov     [ebp+var_60], edi
.text:00403B00                 mov     edi, [eax+0Ch]
.text:00403B03                 mov     [ebp+var_5C], edi
.text:00403B06                 mov     edi, [ebx]
.text:00403B08                 mov     [eax], edi
.text:00403B0A                 mov     edi, [ebx+4]
.text:00403B0D                 mov     [eax+4], edi
.text:00403B10                 mov     edi, [ebx+8]
.text:00403B13                 mov     [eax+8], edi
.text:00403B16                 mov     edi, [ebx+0Ch]
.text:00403B19                 mov     [eax+0Ch], edi
.text:00403B1C                 mov     [ebx], edx
.text:00403B1E                 mov     edx, [ebp+var_60]
.text:00403B21                 mov     [ebx+4], esi
.text:00403B24                 mov     [ebx+8], edx
.text:00403B27                 mov     edx, [ebp+var_5C]
.text:00403B2A                 mov     [ebx+0Ch], edx
.text:00403B2D                 mov     esi, [ebx+10h]
.text:00403B30                 mov     edx, [eax+10h]
.text:00403B33                 mov     [eax+10h], esi
.text:00403B36                 mov     [ebx+10h], edx
.text:00403B39                 mov     esi, [ebx+14h]
.text:00403B3C                 mov     edx, [eax+14h]
.text:00403B3F                 mov     [eax+14h], esi
.text:00403B42                 mov     [ebx+14h], edx
.text:00403B45
.text:00403B45 loc_403B45:                             ; CODE XREF: sub_403580+49F↑j
.text:00403B45                                         ; sub_403580+573↑j
.text:00403B45                 add     ebx, 1Ch
.text:00403B48                 cmp     ebx, [ebp+var_2C]
.text:00403B4B                 jb      loc_403960
.text:00403B51
.text:00403B51 loc_403B51:                             ; CODE XREF: sub_403580+564↑j
.text:00403B51                 mov     [ebp+var_20], ebx
.text:00403B54
.text:00403B54 loc_403B54:                             ; CODE XREF: sub_403580+3DA↑j
.text:00403B54                 mov     eax, [ebp+var_18]
.text:00403B57                 cmp     [ebp+var_34], eax
.text:00403B5A                 jnb     loc_403DA6
.text:00403B60                 mov     edx, eax
.text:00403B62                 add     edx, 0FFFFFFF4h
.text:00403B65                 mov     [ebp+var_28], edx
.text:00403B68                 jmp     short loc_403B70
.text:00403B68 ; ---------------------------------------------------------------------------
.text:00403B6A                 align 10h
.text:00403B70
.text:00403B70 loc_403B70:                             ; CODE XREF: sub_403580+5E8↑j
.text:00403B70                                         ; sub_403580+820↓j
.text:00403B70                 cmp     dword ptr [ecx+14h], 10h
.text:00403B74                 mov     edx, [ecx+10h]
.text:00403B77                 jb      short loc_403B80
.text:00403B79                 mov     eax, [ecx]
.text:00403B7B                 mov     [ebp+var_30], eax
.text:00403B7E                 jmp     short loc_403B83
.text:00403B80 ; ---------------------------------------------------------------------------
.text:00403B80
.text:00403B80 loc_403B80:                             ; CODE XREF: sub_403580+5F7↑j
.text:00403B80                 mov     [ebp+var_30], ecx
.text:00403B83
.text:00403B83 loc_403B83:                             ; CODE XREF: sub_403580+5FE↑j
.text:00403B83                 mov     edi, [ebp+var_28]
.text:00403B86                 mov     eax, [edi]
.text:00403B88                 mov     esi, eax
.text:00403B8A                 mov     [ebp+var_24], eax
.text:00403B8D                 cmp     esi, eax
.text:00403B8F                 jnb     short loc_403B94
.text:00403B91                 mov     [ebp+var_24], esi
.text:00403B94
.text:00403B94 loc_403B94:                             ; CODE XREF: sub_403580+60F↑j
.text:00403B94                 cmp     eax, edx
.text:00403B96                 jb      short loc_403B9A
.text:00403B98                 mov     eax, edx
.text:00403B9A
.text:00403B9A loc_403B9A:                             ; CODE XREF: sub_403580+616↑j
.text:00403B9A                 mov     esi, [ebp+var_28]
.text:00403B9D                 add     esi, 0FFFFFFF0h
.text:00403BA0                 cmp     dword ptr [edi+4], 10h
.text:00403BA4                 jb      short loc_403BAA
.text:00403BA6                 mov     edi, [esi]
.text:00403BA8                 jmp     short loc_403BAC
.text:00403BAA ; ---------------------------------------------------------------------------
.text:00403BAA
.text:00403BAA loc_403BAA:                             ; CODE XREF: sub_403580+624↑j
.text:00403BAA                 mov     edi, esi
.text:00403BAC
.text:00403BAC loc_403BAC:                             ; CODE XREF: sub_403580+628↑j
.text:00403BAC                 mov     edx, [ebp+var_30]
.text:00403BAF                 mov     [ebp+var_14], eax
.text:00403BB2                 cmp     eax, 4
.text:00403BB5                 jb      short loc_403BD1
.text:00403BB7
.text:00403BB7 loc_403BB7:                             ; CODE XREF: sub_403580+64F↓j
.text:00403BB7                 mov     eax, [edi]
.text:00403BB9                 cmp     eax, [edx]
.text:00403BBB                 jnz     short loc_403BD7
.text:00403BBD                 mov     eax, [ebp+var_14]
.text:00403BC0                 sub     eax, 4
.text:00403BC3                 add     edx, 4
.text:00403BC6                 add     edi, 4
.text:00403BC9                 mov     [ebp+var_14], eax
.text:00403BCC                 cmp     eax, 4
.text:00403BCF                 jnb     short loc_403BB7
.text:00403BD1
.text:00403BD1 loc_403BD1:                             ; CODE XREF: sub_403580+635↑j
.text:00403BD1                 cmp     [ebp+var_14], 0
.text:00403BD5                 jz      short loc_403C23
.text:00403BD7
.text:00403BD7 loc_403BD7:                             ; CODE XREF: sub_403580+63B↑j
.text:00403BD7                 movzx   eax, byte ptr [edi]
.text:00403BDA                 movzx   ebx, byte ptr [edx]
.text:00403BDD                 sub     eax, ebx
.text:00403BDF                 jnz     short loc_403C15
.text:00403BE1                 cmp     [ebp+var_14], 1
.text:00403BE5                 jbe     short loc_403C20
.text:00403BE7                 movzx   eax, byte ptr [edi+1]
.text:00403BEB                 movzx   ebx, byte ptr [edx+1]
.text:00403BEF                 sub     eax, ebx
.text:00403BF1                 jnz     short loc_403C15
.text:00403BF3                 cmp     [ebp+var_14], 2
.text:00403BF7                 jbe     short loc_403C20
.text:00403BF9                 movzx   eax, byte ptr [edi+2]
.text:00403BFD                 movzx   ebx, byte ptr [edx+2]
.text:00403C01                 sub     eax, ebx
.text:00403C03                 jnz     short loc_403C15
.text:00403C05                 cmp     [ebp+var_14], 3
.text:00403C09                 jbe     short loc_403C20
.text:00403C0B                 movzx   eax, byte ptr [edi+3]
.text:00403C0F                 movzx   edx, byte ptr [edx+3]
.text:00403C13                 sub     eax, edx
.text:00403C15
.text:00403C15 loc_403C15:                             ; CODE XREF: sub_403580+65F↑j
.text:00403C15                                         ; sub_403580+671↑j ...
.text:00403C15                 mov     ebx, [ebp+var_20]
.text:00403C18                 sar     eax, 1Fh
.text:00403C1B                 or      eax, 1
.text:00403C1E                 jmp     short loc_403C25
.text:00403C20 ; ---------------------------------------------------------------------------
.text:00403C20
.text:00403C20 loc_403C20:                             ; CODE XREF: sub_403580+665↑j
.text:00403C20                                         ; sub_403580+677↑j ...
.text:00403C20                 mov     ebx, [ebp+var_20]
.text:00403C23
.text:00403C23 loc_403C23:                             ; CODE XREF: sub_403580+655↑j
.text:00403C23                 xor     eax, eax
.text:00403C25
.text:00403C25 loc_403C25:                             ; CODE XREF: sub_403580+69E↑j
.text:00403C25                 mov     edi, [ebp+var_28]
.text:00403C28                 test    eax, eax
.text:00403C2A                 jnz     short loc_403C48
.text:00403C2C                 mov     eax, [ecx+10h]
.text:00403C2F                 cmp     [ebp+var_24], eax
.text:00403C32                 jnb     short loc_403C39
.text:00403C34                 or      eax, 0FFFFFFFFh
.text:00403C37                 jmp     short loc_403C46
.text:00403C39 ; ---------------------------------------------------------------------------
.text:00403C39
.text:00403C39 loc_403C39:                             ; CODE XREF: sub_403580+6B2↑j
.text:00403C39                 mov     edi, [ebp+var_28]
.text:00403C3C                 xor     edx, edx
.text:00403C3E                 cmp     [ebp+var_24], eax
.text:00403C41                 setnz   dl
.text:00403C44                 mov     eax, edx
.text:00403C46
.text:00403C46 loc_403C46:                             ; CODE XREF: sub_403580+6B7↑j
.text:00403C46                 test    eax, eax
.text:00403C48
.text:00403C48 loc_403C48:                             ; CODE XREF: sub_403580+6AA↑j
.text:00403C48                 sets    al
.text:00403C4B                 test    al, al
.text:00403C4D                 jnz     loc_403D8E
.text:00403C53                 cmp     dword ptr [edi+4], 10h
.text:00403C57                 jb      short loc_403C60
.text:00403C59                 mov     eax, [esi]
.text:00403C5B                 mov     [ebp+var_30], eax
.text:00403C5E                 jmp     short loc_403C63
.text:00403C60 ; ---------------------------------------------------------------------------
.text:00403C60
.text:00403C60 loc_403C60:                             ; CODE XREF: sub_403580+6D7↑j
.text:00403C60                 mov     [ebp+var_30], esi
.text:00403C63
.text:00403C63 loc_403C63:                             ; CODE XREF: sub_403580+6DE↑j
.text:00403C63                 mov     edx, [ecx+10h]
.text:00403C66                 mov     eax, [edi]
.text:00403C68                 cmp     edx, eax
.text:00403C6A                 jnb     short loc_403C6E
.text:00403C6C                 mov     eax, edx
.text:00403C6E
.text:00403C6E loc_403C6E:                             ; CODE XREF: sub_403580+6EA↑j
.text:00403C6E                 cmp     dword ptr [ecx+14h], 10h
.text:00403C72                 jb      short loc_403C7B
.text:00403C74                 mov     edx, [ecx]
.text:00403C76                 mov     [ebp+var_24], edx
.text:00403C79                 jmp     short loc_403C7E
.text:00403C7B ; ---------------------------------------------------------------------------
.text:00403C7B
.text:00403C7B loc_403C7B:                             ; CODE XREF: sub_403580+6F2↑j
.text:00403C7B                 mov     [ebp+var_24], ecx
.text:00403C7E
.text:00403C7E loc_403C7E:                             ; CODE XREF: sub_403580+6F9↑j
.text:00403C7E                 mov     edx, [ebp+var_30]
.text:00403C81                 mov     [ebp+var_14], eax
.text:00403C84                 cmp     eax, 4
.text:00403C87                 jb      short loc_403CAA
.text:00403C89                 lea     esp, [esp+0]
.text:00403C90
.text:00403C90 loc_403C90:                             ; CODE XREF: sub_403580+728↓j
.text:00403C90                 mov     eax, [ebp+var_24]
.text:00403C93                 mov     eax, [eax]
.text:00403C95                 cmp     eax, [edx]
.text:00403C97                 jnz     short loc_403CB0
.text:00403C99                 sub     [ebp+var_14], 4
.text:00403C9D                 add     [ebp+var_24], 4
.text:00403CA1                 add     edx, 4
.text:00403CA4                 cmp     [ebp+var_14], 4
.text:00403CA8                 jnb     short loc_403C90
.text:00403CAA
.text:00403CAA loc_403CAA:                             ; CODE XREF: sub_403580+707↑j
.text:00403CAA                 cmp     [ebp+var_14], 0
.text:00403CAE                 jz      short loc_403D08
.text:00403CB0
.text:00403CB0 loc_403CB0:                             ; CODE XREF: sub_403580+717↑j
.text:00403CB0                 mov     eax, [ebp+var_24]
.text:00403CB3                 movzx   eax, byte ptr [eax]
.text:00403CB6                 movzx   edi, byte ptr [edx]
.text:00403CB9                 sub     eax, edi
.text:00403CBB                 jnz     short loc_403CFA
.text:00403CBD                 cmp     [ebp+var_14], 1
.text:00403CC1                 jbe     short loc_403D05
.text:00403CC3                 mov     eax, [ebp+var_24]
.text:00403CC6                 movzx   eax, byte ptr [eax+1]
.text:00403CCA                 movzx   edi, byte ptr [edx+1]
.text:00403CCE                 sub     eax, edi
.text:00403CD0                 jnz     short loc_403CFA
.text:00403CD2                 cmp     [ebp+var_14], 2
.text:00403CD6                 jbe     short loc_403D05
.text:00403CD8                 mov     eax, [ebp+var_24]
.text:00403CDB                 movzx   eax, byte ptr [eax+2]
.text:00403CDF                 movzx   edi, byte ptr [edx+2]
.text:00403CE3                 sub     eax, edi
.text:00403CE5                 jnz     short loc_403CFA
.text:00403CE7                 cmp     [ebp+var_14], 3
.text:00403CEB                 jbe     short loc_403D05
.text:00403CED                 mov     eax, [ebp+var_24]
.text:00403CF0                 movzx   eax, byte ptr [eax+3]
.text:00403CF4                 movzx   edx, byte ptr [edx+3]
.text:00403CF8                 sub     eax, edx
.text:00403CFA
.text:00403CFA loc_403CFA:                             ; CODE XREF: sub_403580+73B↑j
.text:00403CFA                                         ; sub_403580+750↑j ...
.text:00403CFA                 mov     edi, [ebp+var_28]
.text:00403CFD                 sar     eax, 1Fh
.text:00403D00                 or      eax, 1
.text:00403D03                 jmp     short loc_403D0A
.text:00403D05 ; ---------------------------------------------------------------------------
.text:00403D05
.text:00403D05 loc_403D05:                             ; CODE XREF: sub_403580+741↑j
.text:00403D05                                         ; sub_403580+756↑j ...
.text:00403D05                 mov     edi, [ebp+var_28]
.text:00403D08
.text:00403D08 loc_403D08:                             ; CODE XREF: sub_403580+72E↑j
.text:00403D08                 xor     eax, eax
.text:00403D0A
.text:00403D0A loc_403D0A:                             ; CODE XREF: sub_403580+783↑j
.text:00403D0A                 test    eax, eax
.text:00403D0C                 jnz     short loc_403D29
.text:00403D0E                 mov     eax, [edi]
.text:00403D10                 cmp     [ecx+10h], eax
.text:00403D13                 jnb     short loc_403D1A
.text:00403D15                 or      eax, 0FFFFFFFFh
.text:00403D18                 jmp     short loc_403D27
.text:00403D1A ; ---------------------------------------------------------------------------
.text:00403D1A
.text:00403D1A loc_403D1A:                             ; CODE XREF: sub_403580+793↑j
.text:00403D1A                 mov     edi, [ebp+var_28]
.text:00403D1D                 xor     edx, edx
.text:00403D1F                 cmp     [ecx+10h], eax
.text:00403D22                 setnz   dl
.text:00403D25                 mov     eax, edx
.text:00403D27
.text:00403D27 loc_403D27:                             ; CODE XREF: sub_403580+798↑j
.text:00403D27                 test    eax, eax
.text:00403D29
.text:00403D29 loc_403D29:                             ; CODE XREF: sub_403580+78C↑j
.text:00403D29                 sets    al
.text:00403D2C                 test    al, al
.text:00403D2E                 jnz     short loc_403DA6
.text:00403D30                 sub     ecx, 1Ch
.text:00403D33                 lea     eax, [edi-10h]
.text:00403D36                 cmp     ecx, eax
.text:00403D38                 jz      short loc_403D8E
.text:00403D3A                 mov     edx, [ecx+4]
.text:00403D3D                 mov     eax, [ecx]
.text:00403D3F                 mov     [ebp+var_44], edx
.text:00403D42                 mov     edx, [ecx+8]
.text:00403D45                 mov     [ebp+var_40], edx
.text:00403D48                 mov     edx, [ecx+0Ch]
.text:00403D4B                 mov     [ebp+var_3C], edx
.text:00403D4E                 mov     edx, [esi]
.text:00403D50                 mov     [ecx], edx
.text:00403D52                 mov     edx, [esi+4]
.text:00403D55                 mov     [ecx+4], edx
.text:00403D58                 mov     edx, [esi+8]
.text:00403D5B                 mov     [ecx+8], edx
.text:00403D5E                 mov     edx, [esi+0Ch]
.text:00403D61                 mov     [ecx+0Ch], edx
.text:00403D64                 mov     edx, [ebp+var_40]
.text:00403D67                 mov     [esi], eax
.text:00403D69                 mov     eax, [ebp+var_44]
.text:00403D6C                 mov     [esi+4], eax
.text:00403D6F                 mov     eax, [ebp+var_3C]
.text:00403D72                 mov     [esi+8], edx
.text:00403D75                 mov     [esi+0Ch], eax
.text:00403D78                 mov     edx, [edi]
.text:00403D7A                 mov     eax, [ecx+10h]
.text:00403D7D                 mov     [ecx+10h], edx
.text:00403D80                 mov     [edi], eax
.text:00403D82                 mov     edx, [edi+4]
.text:00403D85                 mov     eax, [ecx+14h]
.text:00403D88                 mov     [ecx+14h], edx
.text:00403D8B                 mov     [edi+4], eax
.text:00403D8E
.text:00403D8E loc_403D8E:                             ; CODE XREF: sub_403580+6CD↑j
.text:00403D8E                                         ; sub_403580+7B8↑j
.text:00403D8E                 mov     eax, [ebp+var_18]
.text:00403D91                 sub     eax, 1Ch
.text:00403D94                 sub     edi, 1Ch
.text:00403D97                 mov     [ebp+var_18], eax
.text:00403D9A                 mov     [ebp+var_28], edi
.text:00403D9D                 cmp     [ebp+var_34], eax
.text:00403DA0                 jb      loc_403B70
.text:00403DA6
.text:00403DA6 loc_403DA6:                             ; CODE XREF: sub_403580+5DA↑j
.text:00403DA6                                         ; sub_403580+7AE↑j
.text:00403DA6                 mov     eax, [ebp+var_18]
.text:00403DA9                 cmp     eax, [ebp+var_34]
.text:00403DAC                 jnz     loc_403E98
.text:00403DB2                 cmp     ebx, [ebp+var_2C]
.text:00403DB5                 jz      loc_403FCF
.text:00403DBB                 mov     eax, [ebp+var_1C]
.text:00403DBE                 cmp     eax, ebx
.text:00403DC0                 jz      short loc_403E22
.text:00403DC2                 cmp     ecx, eax
.text:00403DC4                 jz      short loc_403E22
.text:00403DC6                 mov     edi, [ecx+8]
.text:00403DC9                 mov     edx, [ecx]
.text:00403DCB                 mov     esi, [ecx+4]
.text:00403DCE                 mov     [ebp+var_90], edi
.text:00403DD4                 mov     edi, [ecx+0Ch]
.text:00403DD7                 mov     [ebp+var_8C], edi
.text:00403DDD                 mov     edi, [eax]
.text:00403DDF                 mov     [ecx], edi
.text:00403DE1                 mov     edi, [eax+4]
.text:00403DE4                 mov     [ecx+4], edi
.text:00403DE7                 mov     edi, [eax+8]
.text:00403DEA                 mov     [ecx+8], edi
.text:00403DED                 mov     edi, [eax+0Ch]
.text:00403DF0                 mov     [ecx+0Ch], edi
.text:00403DF3                 mov     [eax], edx
.text:00403DF5                 mov     edx, [ebp+var_90]
.text:00403DFB                 mov     [eax+4], esi
.text:00403DFE                 mov     [eax+8], edx
.text:00403E01                 mov     edx, [ebp+var_8C]
.text:00403E07                 mov     [eax+0Ch], edx
.text:00403E0A                 mov     esi, [eax+10h]
.text:00403E0D                 mov     edx, [ecx+10h]
.text:00403E10                 mov     [ecx+10h], esi
.text:00403E13                 mov     [eax+10h], edx
.text:00403E16                 mov     esi, [eax+14h]
.text:00403E19                 mov     edx, [ecx+14h]
.text:00403E1C                 mov     [ecx+14h], esi
.text:00403E1F                 mov     [eax+14h], edx
.text:00403E22
.text:00403E22 loc_403E22:                             ; CODE XREF: sub_403580+840↑j
.text:00403E22                                         ; sub_403580+844↑j
.text:00403E22                 add     eax, 1Ch
.text:00403E25                 mov     [ebp+var_1C], eax
.text:00403E28                 mov     eax, ebx
.text:00403E2A                 mov     edx, ecx
.text:00403E2C                 add     ebx, 1Ch
.text:00403E2F                 add     ecx, 1Ch
.text:00403E32                 mov     [ebp+var_20], ebx
.text:00403E35                 cmp     edx, eax
.text:00403E37                 jz      loc_403957
.text:00403E3D                 mov     edi, [edx+4]
.text:00403E40                 mov     esi, [edx]
.text:00403E42                 mov     [ebp+var_54], edi
.text:00403E45                 mov     edi, [edx+8]
.text:00403E48                 mov     [ebp+var_50], edi
.text:00403E4B                 mov     edi, [edx+0Ch]
.text:00403E4E                 mov     [ebp+var_4C], edi
.text:00403E51                 mov     edi, [eax]
.text:00403E53                 mov     [edx], edi
.text:00403E55                 mov     edi, [eax+4]
.text:00403E58                 mov     [edx+4], edi
.text:00403E5B                 mov     edi, [eax+8]
.text:00403E5E                 mov     [edx+8], edi
.text:00403E61                 mov     edi, [eax+0Ch]
.text:00403E64                 mov     [edx+0Ch], edi
.text:00403E67                 mov     [eax], esi
.text:00403E69                 mov     esi, [ebp+var_54]
.text:00403E6C                 mov     [eax+4], esi
.text:00403E6F                 mov     esi, [ebp+var_50]
.text:00403E72                 mov     [eax+8], esi
.text:00403E75                 mov     esi, [ebp+var_4C]
.text:00403E78                 mov     [eax+0Ch], esi
.text:00403E7B                 mov     edi, [eax+10h]
.text:00403E7E                 mov     esi, [edx+10h]
.text:00403E81                 mov     [edx+10h], edi
.text:00403E84                 mov     [eax+10h], esi
.text:00403E87                 mov     edi, [eax+14h]
.text:00403E8A                 mov     esi, [edx+14h]
.text:00403E8D                 mov     [edx+14h], edi
.text:00403E90                 mov     [eax+14h], esi
.text:00403E93                 jmp     loc_403957
.text:00403E98 ; ---------------------------------------------------------------------------
.text:00403E98
.text:00403E98 loc_403E98:                             ; CODE XREF: sub_403580+82C↑j
.text:00403E98                 sub     eax, 1Ch
.text:00403E9B                 mov     [ebp+var_18], eax
.text:00403E9E                 cmp     ebx, [ebp+var_2C]
.text:00403EA1                 jnz     loc_403F67
.text:00403EA7                 sub     ecx, 1Ch
.text:00403EAA                 cmp     eax, ecx
.text:00403EAC                 jz      short loc_403EFE
.text:00403EAE                 mov     edi, [eax+8]
.text:00403EB1                 mov     edx, [eax]
.text:00403EB3                 mov     esi, [eax+4]
.text:00403EB6                 mov     [ebp+var_70], edi
.text:00403EB9                 mov     edi, [eax+0Ch]
.text:00403EBC                 mov     [ebp+var_6C], edi
.text:00403EBF                 mov     edi, [ecx]
.text:00403EC1                 mov     [eax], edi
.text:00403EC3                 mov     edi, [ecx+4]
.text:00403EC6                 mov     [eax+4], edi
.text:00403EC9                 mov     edi, [ecx+8]
.text:00403ECC                 mov     [eax+8], edi
.text:00403ECF                 mov     edi, [ecx+0Ch]
.text:00403ED2                 mov     [eax+0Ch], edi
.text:00403ED5                 mov     [ecx], edx
.text:00403ED7                 mov     edx, [ebp+var_70]
.text:00403EDA                 mov     [ecx+4], esi
.text:00403EDD                 mov     [ecx+8], edx
.text:00403EE0                 mov     edx, [ebp+var_6C]
.text:00403EE3                 mov     [ecx+0Ch], edx
.text:00403EE6                 mov     esi, [ecx+10h]
.text:00403EE9                 mov     edx, [eax+10h]
.text:00403EEC                 mov     [eax+10h], esi
.text:00403EEF                 mov     [ecx+10h], edx
.text:00403EF2                 mov     esi, [ecx+14h]
.text:00403EF5                 mov     edx, [eax+14h]
.text:00403EF8                 mov     [eax+14h], esi
.text:00403EFB                 mov     [ecx+14h], edx
.text:00403EFE
.text:00403EFE loc_403EFE:                             ; CODE XREF: sub_403580+92C↑j
.text:00403EFE                 mov     eax, [ebp+var_1C]
.text:00403F01                 sub     eax, 1Ch
.text:00403F04                 mov     [ebp+var_1C], eax
.text:00403F07                 cmp     ecx, eax
.text:00403F09                 jz      loc_403957
.text:00403F0F                 mov     eax, [ecx+8]
.text:00403F12                 mov     edx, [ecx]
.text:00403F14                 mov     esi, [ecx+4]
.text:00403F17                 mov     [ebp+var_80], eax
.text:00403F1A                 mov     eax, [ecx+0Ch]
.text:00403F1D                 mov     [ebp+var_7C], eax
.text:00403F20                 mov     eax, [ebp+var_1C]
.text:00403F23                 mov     edi, [eax]
.text:00403F25                 mov     [ecx], edi
.text:00403F27                 mov     edi, [eax+4]
.text:00403F2A                 mov     [ecx+4], edi
.text:00403F2D                 mov     edi, [eax+8]
.text:00403F30                 mov     [ecx+8], edi
.text:00403F33                 mov     edi, [eax+0Ch]
.text:00403F36                 mov     [ecx+0Ch], edi
.text:00403F39                 mov     [eax], edx
.text:00403F3B                 mov     edx, [ebp+var_80]
.text:00403F3E                 mov     [eax+4], esi
.text:00403F41                 mov     [eax+8], edx
.text:00403F44                 mov     edx, [ebp+var_7C]
.text:00403F47                 mov     [eax+0Ch], edx
.text:00403F4A                 mov     esi, [eax+10h]
.text:00403F4D                 mov     edx, [ecx+10h]
.text:00403F50                 mov     [ecx+10h], esi
.text:00403F53                 mov     [eax+10h], edx
.text:00403F56                 mov     esi, [eax+14h]
.text:00403F59                 mov     edx, [ecx+14h]
.text:00403F5C                 mov     [ecx+14h], esi
.text:00403F5F                 mov     [eax+14h], edx
.text:00403F62                 jmp     loc_403957
.text:00403F67 ; ---------------------------------------------------------------------------
.text:00403F67
.text:00403F67 loc_403F67:                             ; CODE XREF: sub_403580+921↑j
.text:00403F67                 cmp     ebx, eax
.text:00403F69                 jz      short loc_403FC7
.text:00403F6B                 mov     edi, [ebx+8]
.text:00403F6E                 mov     edx, [ebx]
.text:00403F70                 mov     esi, [ebx+4]
.text:00403F73                 mov     [ebp+var_A0], edi
.text:00403F79                 mov     edi, [ebx+0Ch]
.text:00403F7C                 mov     [ebp+var_9C], edi
.text:00403F82                 mov     edi, [eax]
.text:00403F84                 mov     [ebx], edi
.text:00403F86                 mov     edi, [eax+4]
.text:00403F89                 mov     [ebx+4], edi
.text:00403F8C                 mov     edi, [eax+8]
.text:00403F8F                 mov     [ebx+8], edi
.text:00403F92                 mov     edi, [eax+0Ch]
.text:00403F95                 mov     [ebx+0Ch], edi
.text:00403F98                 mov     [eax], edx
.text:00403F9A                 mov     edx, [ebp+var_A0]
.text:00403FA0                 mov     [eax+4], esi
.text:00403FA3                 mov     [eax+8], edx
.text:00403FA6                 mov     edx, [ebp+var_9C]
.text:00403FAC                 mov     [eax+0Ch], edx
.text:00403FAF                 mov     esi, [eax+10h]
.text:00403FB2                 mov     edx, [ebx+10h]
.text:00403FB5                 mov     [ebx+10h], esi
.text:00403FB8                 mov     [eax+10h], edx
.text:00403FBB                 mov     esi, [eax+14h]
.text:00403FBE                 mov     edx, [ebx+14h]
.text:00403FC1                 mov     [ebx+14h], esi
.text:00403FC4                 mov     [eax+14h], edx
.text:00403FC7
.text:00403FC7 loc_403FC7:                             ; CODE XREF: sub_403580+9E9↑j
.text:00403FC7                 add     ebx, 1Ch
.text:00403FCA                 jmp     loc_403954
.text:00403FCF ; ---------------------------------------------------------------------------
.text:00403FCF
.text:00403FCF loc_403FCF:                             ; CODE XREF: sub_403580+835↑j
.text:00403FCF                 mov     eax, [ebp+var_38]
.text:00403FD2                 mov     [eax], ecx
.text:00403FD4                 mov     ecx, [ebp+var_1C]
.text:00403FD7                 mov     [eax+4], ecx
.text:00403FDA                 mov     ecx, [ebp+var_C]
.text:00403FDD                 mov     large fs:0, ecx
.text:00403FE4                 pop     ecx
.text:00403FE5                 pop     edi
.text:00403FE6                 pop     esi
.text:00403FE7                 pop     ebx
.text:00403FE8                 mov     ecx, [ebp+var_10]
.text:00403FEB                 xor     ecx, ebp
.text:00403FED                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00403FF2                 mov     esp, ebp
.text:00403FF4                 pop     ebp
.text:00403FF5                 retn
.text:00403FF5 ; } // starts at 403580
.text:00403FF5 sub_403580      endp
.text:00403FF5
.text:00403FF5 ; ---------------------------------------------------------------------------
.text:00403FF6                 align 10h
.text:00404000
.text:00404000 ; =============== S U B R O U T I N E =======================================
.text:00404000
.text:00404000 ; Attributes: bp-based frame
.text:00404000
.text:00404000 ; int __usercall sub_404000@<eax>(void *Dst@<ecx>, int, int)
.text:00404000 sub_404000      proc near               ; CODE XREF: sub_402540+8E↑p
.text:00404000
.text:00404000 var_C           = dword ptr -0Ch
.text:00404000 arg_0           = dword ptr  8
.text:00404000 arg_4           = dword ptr  0Ch
.text:00404000
.text:00404000 ; FUNCTION CHUNK AT .text:00405C80 SIZE 00000020 BYTES
.text:00404000
.text:00404000 ; __unwind { // SEH_404000
.text:00404000                 push    ebp
.text:00404001                 mov     ebp, esp
.text:00404003                 push    0FFFFFFFFh
.text:00404005                 push    offset SEH_404000
.text:0040400A                 mov     eax, large fs:0
.text:00404010                 push    eax
.text:00404011                 push    ebx
.text:00404012                 push    esi
.text:00404013                 push    edi
.text:00404014                 mov     eax, ___security_cookie
.text:00404019                 xor     eax, ebp
.text:0040401B                 push    eax
.text:0040401C                 lea     eax, [ebp+var_C]
.text:0040401F                 mov     large fs:0, eax
.text:00404025                 mov     esi, ecx
.text:00404027                 lea     edi, [edx+14h]
.text:0040402A                 xor     ebx, ebx
.text:0040402C                 lea     esp, [esp+0]
.text:00404030
.text:00404030 loc_404030:                             ; CODE XREF: sub_404000+A2↓j
.text:00404030                 lea     eax, [edi-14h]
.text:00404033                 cmp     eax, [ebp+arg_0]
.text:00404036                 jz      short loc_4040A4
.text:00404038                 cmp     esi, ebx
.text:0040403A                 jz      short loc_40409C
.text:0040403C                 mov     dword ptr [esi+14h], 0Fh
.text:00404043                 mov     [esi+10h], ebx
.text:00404046                 mov     [esi], bl
.text:00404048                 cmp     esi, eax
.text:0040404A                 jz      short loc_40409C
.text:0040404C                 cmp     dword ptr [esi+14h], 10h
.text:00404050                 jb      short loc_40405E
.text:00404052                 mov     eax, [esi]
.text:00404054                 push    eax
.text:00404055                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040405B                 add     esp, 4
.text:0040405E
.text:0040405E loc_40405E:                             ; CODE XREF: sub_404000+50↑j
.text:0040405E                 mov     dword ptr [esi+14h], 0Fh
.text:00404065                 mov     [esi+10h], ebx
.text:00404068                 mov     [esi], bl
.text:0040406A                 cmp     dword ptr [edi], 10h
.text:0040406D                 jnb     short loc_404084
.text:0040406F                 mov     eax, [edi-4]
.text:00404072                 inc     eax
.text:00404073                 push    eax             ; Size
.text:00404074                 lea     eax, [edi-14h]
.text:00404077                 push    eax             ; Src
.text:00404078                 push    esi             ; Dst
.text:00404079                 call    ds:memmove
.text:0040407F                 add     esp, 0Ch
.text:00404082                 jmp     short loc_40408C
.text:00404084 ; ---------------------------------------------------------------------------
.text:00404084
.text:00404084 loc_404084:                             ; CODE XREF: sub_404000+6D↑j
.text:00404084                 mov     ecx, [edi-14h]
.text:00404087                 mov     [esi], ecx
.text:00404089                 mov     [edi-14h], ebx
.text:0040408C
.text:0040408C loc_40408C:                             ; CODE XREF: sub_404000+82↑j
.text:0040408C                 mov     edx, [edi-4]
.text:0040408F                 mov     [esi+10h], edx
.text:00404092                 mov     eax, [edi]
.text:00404094                 mov     [esi+14h], eax
.text:00404097                 mov     [edi-4], ebx
.text:0040409A                 mov     [edi], ebx
.text:0040409C
.text:0040409C loc_40409C:                             ; CODE XREF: sub_404000+3A↑j
.text:0040409C                                         ; sub_404000+4A↑j
.text:0040409C                 add     esi, 1Ch
.text:0040409F                 add     edi, 1Ch
.text:004040A2                 jmp     short loc_404030
.text:004040A4 ; ---------------------------------------------------------------------------
.text:004040A4
.text:004040A4 loc_4040A4:                             ; CODE XREF: sub_404000+36↑j
.text:004040A4                 mov     eax, esi
.text:004040A6                 mov     ecx, [ebp+var_C]
.text:004040A9                 mov     large fs:0, ecx
.text:004040B0                 pop     ecx
.text:004040B1                 pop     edi
.text:004040B2                 pop     esi
.text:004040B3                 pop     ebx
.text:004040B4                 mov     esp, ebp
.text:004040B6                 pop     ebp
.text:004040B7                 retn
.text:004040B7 ; } // starts at 404000
.text:004040B7 sub_404000      endp
.text:004040B7
.text:004040B7 ; ---------------------------------------------------------------------------
.text:004040B8                 align 10h
.text:004040C0
.text:004040C0 ; =============== S U B R O U T I N E =======================================
.text:004040C0
.text:004040C0
.text:004040C0 sub_4040C0      proc near               ; CODE XREF: sub_4026C0+6B↑p
.text:004040C0                 cmp     ecx, edx
.text:004040C2                 jz      short locret_4040DE
.text:004040C4                 push    esi
.text:004040C5
.text:004040C5 loc_4040C5:                             ; CODE XREF: sub_4040C0+1B↓j
.text:004040C5                 test    eax, eax
.text:004040C7                 jz      short loc_4040D3
.text:004040C9                 mov     esi, [ecx]
.text:004040CB                 mov     [eax], esi
.text:004040CD                 mov     esi, [ecx+4]
.text:004040D0                 mov     [eax+4], esi
.text:004040D3
.text:004040D3 loc_4040D3:                             ; CODE XREF: sub_4040C0+7↑j
.text:004040D3                 add     ecx, 8
.text:004040D6                 add     eax, 8
.text:004040D9                 cmp     ecx, edx
.text:004040DB                 jnz     short loc_4040C5
.text:004040DD                 pop     esi
.text:004040DE
.text:004040DE locret_4040DE:                          ; CODE XREF: sub_4040C0+2↑j
.text:004040DE                 retn
.text:004040DE sub_4040C0      endp
.text:004040DE
.text:004040DE ; ---------------------------------------------------------------------------
.text:004040DF                 align 10h
.text:004040E0
.text:004040E0 ; =============== S U B R O U T I N E =======================================
.text:004040E0
.text:004040E0 ; Attributes: bp-based frame
.text:004040E0
.text:004040E0 sub_4040E0      proc near               ; CODE XREF: sub_403350+24↑p
.text:004040E0
.text:004040E0 var_4           = dword ptr -4
.text:004040E0 arg_0           = dword ptr  8
.text:004040E0
.text:004040E0                 push    ebp
.text:004040E1                 mov     ebp, esp
.text:004040E3                 push    ecx
.text:004040E4                 mov     edx, [ebp+arg_0]
.text:004040E7                 mov     eax, edx
.text:004040E9                 sub     eax, ecx
.text:004040EB                 sar     eax, 3
.text:004040EE                 cmp     eax, 28h ; '('
.text:004040F1                 jle     short loc_40414D
.text:004040F3                 inc     eax
.text:004040F4                 cdq
.text:004040F5                 and     edx, 7
.text:004040F8                 add     eax, edx
.text:004040FA                 sar     eax, 3
.text:004040FD                 push    esi
.text:004040FE                 mov     esi, eax
.text:00404100                 push    edi
.text:00404101                 lea     edi, ds:0[eax*8]
.text:00404108                 shl     esi, 4
.text:0040410B                 lea     eax, [edi+ecx]
.text:0040410E                 lea     edx, [esi+ecx]
.text:00404111                 mov     [ebp+var_4], eax
.text:00404114                 call    sub_404920
.text:00404119                 mov     ecx, ebx
.text:0040411B                 lea     edx, [edi+ebx]
.text:0040411E                 sub     ecx, edi
.text:00404120                 mov     eax, ebx
.text:00404122                 call    sub_404920
.text:00404127                 mov     edx, [ebp+arg_0]
.text:0040412A                 mov     eax, edx
.text:0040412C                 mov     ecx, edx
.text:0040412E                 sub     eax, edi
.text:00404130                 sub     ecx, esi
.text:00404132                 mov     [ebp+arg_0], eax
.text:00404135                 call    sub_404920
.text:0040413A                 mov     edx, [ebp+arg_0]
.text:0040413D                 mov     ecx, [ebp+var_4]
.text:00404140                 mov     eax, ebx
.text:00404142                 call    sub_404920
.text:00404147                 pop     edi
.text:00404148                 pop     esi
.text:00404149                 mov     esp, ebp
.text:0040414B                 pop     ebp
.text:0040414C                 retn
.text:0040414D ; ---------------------------------------------------------------------------
.text:0040414D
.text:0040414D loc_40414D:                             ; CODE XREF: sub_4040E0+11↑j
.text:0040414D                 mov     eax, ebx
.text:0040414F                 call    sub_404920
.text:00404154                 mov     esp, ebp
.text:00404156                 pop     ebp
.text:00404157                 retn
.text:00404157 sub_4040E0      endp
.text:00404157
.text:00404157 ; ---------------------------------------------------------------------------
.text:00404158                 align 10h
.text:00404160
.text:00404160 ; =============== S U B R O U T I N E =======================================
.text:00404160
.text:00404160 ; Attributes: bp-based frame
.text:00404160
.text:00404160 sub_404160      proc near               ; CODE XREF: sub_4030C0+AE↑p
.text:00404160
.text:00404160 var_10          = dword ptr -10h
.text:00404160 var_C           = dword ptr -0Ch
.text:00404160 var_8           = dword ptr -8
.text:00404160 var_4           = dword ptr -4
.text:00404160
.text:00404160                 push    ebp
.text:00404161                 mov     ebp, esp
.text:00404163                 sub     esp, 10h
.text:00404166                 push    ebx
.text:00404167                 mov     ebx, eax
.text:00404169                 sub     ebx, ecx
.text:0040416B                 sar     ebx, 3
.text:0040416E                 mov     eax, ebx
.text:00404170                 cdq
.text:00404171                 push    esi
.text:00404172                 sub     eax, edx
.text:00404174                 push    edi
.text:00404175                 mov     edi, eax
.text:00404177                 sar     edi, 1
.text:00404179                 mov     [ebp+var_4], ebx
.text:0040417C                 test    edi, edi
.text:0040417E                 jle     loc_404247
.text:00404184                 lea     eax, [edi+edi+2]
.text:00404188                 jmp     short loc_404193
.text:00404188 ; ---------------------------------------------------------------------------
.text:0040418A                 align 10h
.text:00404190
.text:00404190 loc_404190:                             ; CODE XREF: sub_404160+E1↓j
.text:00404190                 mov     eax, [ebp+var_8]
.text:00404193
.text:00404193 loc_404193:                             ; CODE XREF: sub_404160+28↑j
.text:00404193                 mov     edx, [ecx+edi*8-8]
.text:00404197                 dec     edi
.text:00404198                 sub     eax, 2
.text:0040419B                 mov     [ebp+var_10], edx
.text:0040419E                 mov     edx, [ecx+edi*8+4]
.text:004041A2                 mov     [ebp+var_8], eax
.text:004041A5                 mov     [ebp+var_C], edx
.text:004041A8                 mov     esi, edi
.text:004041AA                 cmp     eax, ebx
.text:004041AC                 jge     short loc_4041E3
.text:004041AE                 mov     edi, edi
.text:004041B0
.text:004041B0 loc_4041B0:                             ; CODE XREF: sub_404160+81↓j
.text:004041B0                 mov     edx, [ecx+eax*8]
.text:004041B3                 mov     ebx, [ecx+eax*8-8]
.text:004041B7                 cmp     ebx, edx
.text:004041B9                 jg      short loc_4041C7
.text:004041BB                 jl      short loc_4041C8
.text:004041BD                 mov     edx, [ecx+eax*8+4]
.text:004041C1                 cmp     edx, [ecx+eax*8-4]
.text:004041C5                 jge     short loc_4041C8
.text:004041C7
.text:004041C7 loc_4041C7:                             ; CODE XREF: sub_404160+59↑j
.text:004041C7                 dec     eax
.text:004041C8
.text:004041C8 loc_4041C8:                             ; CODE XREF: sub_404160+5B↑j
.text:004041C8                                         ; sub_404160+65↑j
.text:004041C8                 mov     edx, [ecx+eax*8]
.text:004041CB                 mov     ebx, [ebp+var_4]
.text:004041CE                 mov     [ecx+esi*8], edx
.text:004041D1                 mov     edx, [ecx+eax*8+4]
.text:004041D5                 mov     [ecx+esi*8+4], edx
.text:004041D9                 mov     esi, eax
.text:004041DB                 lea     eax, [eax+eax+2]
.text:004041DF                 cmp     eax, ebx
.text:004041E1                 jl      short loc_4041B0
.text:004041E3
.text:004041E3 loc_4041E3:                             ; CODE XREF: sub_404160+4C↑j
.text:004041E3                 jnz     short loc_4041F7
.text:004041E5                 mov     eax, [ecx+ebx*8-8]
.text:004041E9                 mov     [ecx+esi*8], eax
.text:004041EC                 mov     edx, [ecx+ebx*8-4]
.text:004041F0                 mov     [ecx+esi*8+4], edx
.text:004041F4                 lea     esi, [ebx-1]
.text:004041F7
.text:004041F7 loc_4041F7:                             ; CODE XREF: sub_404160:loc_4041E3↑j
.text:004041F7                 lea     eax, [esi-1]
.text:004041FA                 cdq
.text:004041FB                 sub     eax, edx
.text:004041FD                 sar     eax, 1
.text:004041FF                 cmp     edi, esi
.text:00404201                 jge     short loc_40422F
.text:00404203
.text:00404203 loc_404203:                             ; CODE XREF: sub_404160+CD↓j
.text:00404203                 mov     edx, [ecx+eax*8]
.text:00404206                 mov     ebx, [ebp+var_10]
.text:00404209                 cmp     ebx, edx
.text:0040420B                 jg      short loc_404218
.text:0040420D                 jl      short loc_40422F
.text:0040420F                 mov     ebx, [ebp+var_C]
.text:00404212                 cmp     [ecx+eax*8+4], ebx
.text:00404216                 jge     short loc_40422F
.text:00404218
.text:00404218 loc_404218:                             ; CODE XREF: sub_404160+AB↑j
.text:00404218                 mov     [ecx+esi*8], edx
.text:0040421B                 mov     edx, [ecx+eax*8+4]
.text:0040421F                 mov     [ecx+esi*8+4], edx
.text:00404223                 mov     esi, eax
.text:00404225                 dec     eax
.text:00404226                 cdq
.text:00404227                 sub     eax, edx
.text:00404229                 sar     eax, 1
.text:0040422B                 cmp     edi, esi
.text:0040422D                 jl      short loc_404203
.text:0040422F
.text:0040422F loc_40422F:                             ; CODE XREF: sub_404160+A1↑j
.text:0040422F                                         ; sub_404160+AD↑j ...
.text:0040422F                 mov     eax, [ebp+var_10]
.text:00404232                 mov     edx, [ebp+var_C]
.text:00404235                 mov     ebx, [ebp+var_4]
.text:00404238                 mov     [ecx+esi*8], eax
.text:0040423B                 mov     [ecx+esi*8+4], edx
.text:0040423F                 test    edi, edi
.text:00404241                 jg      loc_404190
.text:00404247
.text:00404247 loc_404247:                             ; CODE XREF: sub_404160+1E↑j
.text:00404247                 pop     edi
.text:00404248                 pop     esi
.text:00404249                 pop     ebx
.text:0040424A                 mov     esp, ebp
.text:0040424C                 pop     ebp
.text:0040424D                 retn
.text:0040424D sub_404160      endp
.text:0040424D
.text:0040424D ; ---------------------------------------------------------------------------
.text:0040424E                 align 10h
.text:00404250
.text:00404250 ; =============== S U B R O U T I N E =======================================
.text:00404250
.text:00404250 ; Attributes: bp-based frame
.text:00404250
.text:00404250 sub_404250      proc near               ; CODE XREF: sub_4030C0+B5↑p
.text:00404250
.text:00404250 var_C           = dword ptr -0Ch
.text:00404250 var_8           = dword ptr -8
.text:00404250 var_4           = dword ptr -4
.text:00404250
.text:00404250                 push    ebp
.text:00404251                 mov     ebp, esp
.text:00404253                 sub     esp, 10h
.text:00404256                 push    ebx
.text:00404257                 push    esi
.text:00404258                 mov     esi, eax
.text:0040425A                 sub     eax, edi
.text:0040425C                 and     eax, 0FFFFFFF8h
.text:0040425F                 cmp     eax, 8
.text:00404262                 jle     short loc_4042B3
.text:00404264                 mov     ebx, 0FFFFFFFCh
.text:00404269                 mov     eax, 4
.text:0040426E                 add     esi, 0FFFFFFFCh
.text:00404271                 sub     ebx, edi
.text:00404273                 sub     eax, edi
.text:00404275                 mov     [ebp+var_4], eax
.text:00404278
.text:00404278 loc_404278:                             ; CODE XREF: sub_404250+61↓j
.text:00404278                 mov     ecx, [esi-4]
.text:0040427B                 mov     edx, [esi]
.text:0040427D                 mov     eax, [edi]
.text:0040427F                 mov     [esi-4], eax
.text:00404282                 mov     [ebp+var_C], ecx
.text:00404285                 mov     ecx, [edi+4]
.text:00404288                 mov     [ebp+var_8], edx
.text:0040428B                 lea     edx, [ebp+var_C]
.text:0040428E                 mov     [esi], ecx
.text:00404290                 push    edx
.text:00404291                 lea     eax, [ebx+esi]
.text:00404294                 sar     eax, 3
.text:00404297                 xor     edx, edx
.text:00404299                 mov     ecx, edi
.text:0040429B                 call    sub_4049A0
.text:004042A0                 mov     eax, [ebp+var_4]
.text:004042A3                 sub     esi, 8
.text:004042A6                 add     eax, esi
.text:004042A8                 and     eax, 0FFFFFFF8h
.text:004042AB                 add     esp, 4
.text:004042AE                 cmp     eax, 8
.text:004042B1                 jg      short loc_404278
.text:004042B3
.text:004042B3 loc_4042B3:                             ; CODE XREF: sub_404250+12↑j
.text:004042B3                 pop     esi
.text:004042B4                 pop     ebx
.text:004042B5                 mov     esp, ebp
.text:004042B7                 pop     ebp
.text:004042B8                 retn
.text:004042B8 sub_404250      endp
.text:004042B8
.text:004042B8 ; ---------------------------------------------------------------------------
.text:004042B9                 align 10h
.text:004042C0
.text:004042C0 ; =============== S U B R O U T I N E =======================================
.text:004042C0
.text:004042C0 ; Attributes: bp-based frame
.text:004042C0
.text:004042C0 sub_4042C0      proc near               ; CODE XREF: sub_4030C0+8A↑p
.text:004042C0
.text:004042C0 var_4           = dword ptr -4
.text:004042C0 arg_0           = dword ptr  8
.text:004042C0 arg_4           = dword ptr  0Ch
.text:004042C0
.text:004042C0                 push    ebp
.text:004042C1                 mov     ebp, esp
.text:004042C3                 sub     esp, 8
.text:004042C6                 push    ebx
.text:004042C7                 mov     ebx, [ebp+arg_0]
.text:004042CA                 push    esi
.text:004042CB                 push    edi
.text:004042CC                 lea     edi, [ebx+8]
.text:004042CF                 cmp     edi, [ebp+arg_4]
.text:004042D2                 jz      short loc_404349
.text:004042D4
.text:004042D4 loc_4042D4:                             ; CODE XREF: sub_4042C0+87↓j
.text:004042D4                 mov     ecx, [edi+4]
.text:004042D7                 mov     edx, [edi]
.text:004042D9                 lea     eax, [edi+4]
.text:004042DC                 mov     [ebp+var_4], ecx
.text:004042DF                 mov     ecx, [ebx]
.text:004042E1                 mov     esi, edi
.text:004042E3                 cmp     ecx, edx
.text:004042E5                 jg      short loc_4042F1
.text:004042E7                 jl      short loc_404314
.text:004042E9                 mov     ecx, [ebp+var_4]
.text:004042EC                 cmp     ecx, [ebx+4]
.text:004042EF                 jge     short loc_404314
.text:004042F1
.text:004042F1 loc_4042F1:                             ; CODE XREF: sub_4042C0+25↑j
.text:004042F1                 cmp     ebx, edi
.text:004042F3                 jz      short loc_40430A
.text:004042F5
.text:004042F5 loc_4042F5:                             ; CODE XREF: sub_4042C0+48↓j
.text:004042F5                 mov     ecx, [eax-0Ch]
.text:004042F8                 sub     eax, 8
.text:004042FB                 mov     [eax+4], ecx
.text:004042FE                 mov     ecx, [eax]
.text:00404300                 mov     [eax+8], ecx
.text:00404303                 lea     ecx, [eax-4]
.text:00404306                 cmp     ecx, ebx
.text:00404308                 jnz     short loc_4042F5
.text:0040430A
.text:0040430A loc_40430A:                             ; CODE XREF: sub_4042C0+33↑j
.text:0040430A                 mov     [ebx], edx
.text:0040430C                 mov     edx, [ebp+var_4]
.text:0040430F                 mov     [ebx+4], edx
.text:00404312                 jmp     short loc_404341
.text:00404314 ; ---------------------------------------------------------------------------
.text:00404314
.text:00404314 loc_404314:                             ; CODE XREF: sub_4042C0+27↑j
.text:00404314                                         ; sub_4042C0+2F↑j
.text:00404314                 mov     eax, edi
.text:00404316
.text:00404316 loc_404316:                             ; CODE XREF: sub_4042C0+77↓j
.text:00404316                 mov     ecx, [eax-8]
.text:00404319                 sub     eax, 8
.text:0040431C                 cmp     ecx, edx
.text:0040431E                 jg      short loc_40432D
.text:00404320                 jl      short loc_404339
.text:00404322                 mov     ebx, [ebp+var_4]
.text:00404325                 cmp     ebx, [eax+4]
.text:00404328                 mov     ebx, [ebp+arg_0]
.text:0040432B                 jge     short loc_404339
.text:0040432D
.text:0040432D loc_40432D:                             ; CODE XREF: sub_4042C0+5E↑j
.text:0040432D                 mov     [esi], ecx
.text:0040432F                 mov     ecx, [eax+4]
.text:00404332                 mov     [esi+4], ecx
.text:00404335                 mov     esi, eax
.text:00404337                 jmp     short loc_404316
.text:00404339 ; ---------------------------------------------------------------------------
.text:00404339
.text:00404339 loc_404339:                             ; CODE XREF: sub_4042C0+60↑j
.text:00404339                                         ; sub_4042C0+6B↑j
.text:00404339                 mov     [esi], edx
.text:0040433B                 mov     edx, [ebp+var_4]
.text:0040433E                 mov     [esi+4], edx
.text:00404341
.text:00404341 loc_404341:                             ; CODE XREF: sub_4042C0+52↑j
.text:00404341                 add     edi, 8
.text:00404344                 cmp     edi, [ebp+arg_4]
.text:00404347                 jnz     short loc_4042D4
.text:00404349
.text:00404349 loc_404349:                             ; CODE XREF: sub_4042C0+12↑j
.text:00404349                 pop     edi
.text:0040434A                 pop     esi
.text:0040434B                 pop     ebx
.text:0040434C                 mov     esp, ebp
.text:0040434E                 pop     ebp
.text:0040434F                 retn
.text:0040434F sub_4042C0      endp
.text:0040434F
.text:00404350
.text:00404350 ; =============== S U B R O U T I N E =======================================
.text:00404350
.text:00404350 ; Attributes: bp-based frame
.text:00404350
.text:00404350 sub_404350      proc near               ; CODE XREF: sub_403580+6D↑p
.text:00404350
.text:00404350 var_8           = dword ptr -8
.text:00404350 var_4           = dword ptr -4
.text:00404350 arg_0           = dword ptr  8
.text:00404350 arg_4           = dword ptr  0Ch
.text:00404350
.text:00404350                 push    ebp
.text:00404351                 mov     ebp, esp
.text:00404353                 mov     ecx, [ebp+arg_4]
.text:00404356                 sub     esp, 8
.text:00404359                 push    esi
.text:0040435A                 push    edi
.text:0040435B                 mov     edi, eax
.text:0040435D                 mov     esi, ecx
.text:0040435F                 sub     esi, edi
.text:00404361                 mov     eax, 92492493h
.text:00404366                 imul    esi
.text:00404368                 add     edx, esi
.text:0040436A                 sar     edx, 4
.text:0040436D                 mov     eax, edx
.text:0040436F                 shr     eax, 1Fh
.text:00404372                 add     eax, edx
.text:00404374                 cmp     eax, 28h ; '('
.text:00404377                 jle     short loc_4043E4
.text:00404379                 inc     eax
.text:0040437A                 cdq
.text:0040437B                 and     edx, 7
.text:0040437E                 add     eax, edx
.text:00404380                 sar     eax, 3
.text:00404383                 push    ebx
.text:00404384                 lea     ecx, ds:0[eax*8]
.text:0040438B                 sub     ecx, eax
.text:0040438D                 add     ecx, ecx
.text:0040438F                 lea     ebx, ds:0[eax*8]
.text:00404396                 sub     ebx, eax
.text:00404398                 add     ecx, ecx
.text:0040439A                 add     ecx, ecx
.text:0040439C                 add     ebx, ebx
.text:0040439E                 add     ebx, ebx
.text:004043A0                 mov     [ebp+var_4], ecx
.text:004043A3                 lea     esi, [ebx+edi]
.text:004043A6                 add     ecx, edi
.text:004043A8                 mov     [ebp+var_8], esi
.text:004043AB                 call    sub_404A60
.text:004043B0                 mov     esi, [ebp+arg_0]
.text:004043B3                 mov     edi, esi
.text:004043B5                 lea     ecx, [ebx+esi]
.text:004043B8                 sub     edi, ebx
.text:004043BA                 call    sub_404A60
.text:004043BF                 mov     ecx, [ebp+arg_4]
.text:004043C2                 mov     edi, ecx
.text:004043C4                 sub     edi, [ebp+var_4]
.text:004043C7                 mov     esi, ecx
.text:004043C9                 sub     esi, ebx
.text:004043CB                 call    sub_404A60
.text:004043D0                 mov     edi, [ebp+var_8]
.text:004043D3                 mov     ecx, esi
.text:004043D5                 mov     esi, [ebp+arg_0]
.text:004043D8                 call    sub_404A60
.text:004043DD                 pop     ebx
.text:004043DE                 pop     edi
.text:004043DF                 pop     esi
.text:004043E0                 mov     esp, ebp
.text:004043E2                 pop     ebp
.text:004043E3                 retn
.text:004043E4 ; ---------------------------------------------------------------------------
.text:004043E4
.text:004043E4 loc_4043E4:                             ; CODE XREF: sub_404350+27↑j
.text:004043E4                 mov     esi, [ebp+arg_0]
.text:004043E7                 call    sub_404A60
.text:004043EC                 pop     edi
.text:004043ED                 pop     esi
.text:004043EE                 mov     esp, ebp
.text:004043F0                 pop     ebp
.text:004043F1                 retn
.text:004043F1 sub_404350      endp
.text:004043F1
.text:004043F1 ; ---------------------------------------------------------------------------
.text:004043F2                 align 10h
.text:00404400
.text:00404400 ; =============== S U B R O U T I N E =======================================
.text:00404400
.text:00404400 ; Attributes: bp-based frame
.text:00404400
.text:00404400 sub_404400      proc near               ; CODE XREF: sub_403190+11D↑p
.text:00404400
.text:00404400 var_30          = dword ptr -30h
.text:00404400 Dst             = dword ptr -2Ch
.text:00404400 var_1C          = dword ptr -1Ch
.text:00404400 var_18          = dword ptr -18h
.text:00404400 var_10          = dword ptr -10h
.text:00404400 var_C           = dword ptr -0Ch
.text:00404400 var_4           = dword ptr -4
.text:00404400 arg_0           = dword ptr  8
.text:00404400 arg_4           = dword ptr  0Ch
.text:00404400
.text:00404400 ; FUNCTION CHUNK AT .text:00402020 SIZE 00000024 BYTES
.text:00404400 ; FUNCTION CHUNK AT .text:00405D70 SIZE 0000002D BYTES
.text:00404400
.text:00404400 ; __unwind { // SEH_404400
.text:00404400                 push    ebp
.text:00404401                 mov     ebp, esp
.text:00404403                 push    0FFFFFFFFh
.text:00404405                 push    offset SEH_404400
.text:0040440A                 mov     eax, large fs:0
.text:00404410                 push    eax
.text:00404411                 sub     esp, 24h
.text:00404414                 mov     eax, ___security_cookie
.text:00404419                 xor     eax, ebp
.text:0040441B                 mov     [ebp+var_10], eax
.text:0040441E                 push    ebx
.text:0040441F                 push    esi
.text:00404420                 push    edi
.text:00404421                 push    eax
.text:00404422                 lea     eax, [ebp+var_C]
.text:00404425                 mov     large fs:0, eax
.text:0040442B                 mov     esi, ecx
.text:0040442D                 mov     ecx, [ebp+arg_0]
.text:00404430                 sub     ecx, esi
.text:00404432                 mov     eax, 92492493h
.text:00404437                 imul    ecx
.text:00404439                 add     edx, ecx
.text:0040443B                 sar     edx, 4
.text:0040443E                 mov     ebx, edx
.text:00404440                 shr     ebx, 1Fh
.text:00404443                 add     ebx, edx
.text:00404445                 mov     eax, ebx
.text:00404447                 cdq
.text:00404448                 sub     eax, edx
.text:0040444A                 mov     edi, eax
.text:0040444C                 sar     edi, 1
.text:0040444E                 xor     eax, eax
.text:00404450                 mov     [ebp+var_30], esi
.text:00404453                 cmp     edi, eax
.text:00404455                 jle     loc_40450A
.text:0040445B                 lea     ecx, ds:0[edi*8]
.text:00404462                 sub     ecx, edi
.text:00404464                 lea     esi, [esi+ecx*4+14h]
.text:00404468                 jmp     short loc_404472
.text:00404468 ; ---------------------------------------------------------------------------
.text:0040446A                 align 10h
.text:00404470
.text:00404470 loc_404470:                             ; CODE XREF: sub_404400+104↓j
.text:00404470                 xor     eax, eax
.text:00404472
.text:00404472 loc_404472:                             ; CODE XREF: sub_404400+68↑j
.text:00404472                 sub     esi, 1Ch
.text:00404475                 lea     edx, [esi-14h]
.text:00404478                 lea     ecx, [ebp+Dst]
.text:0040447B                 dec     edi
.text:0040447C                 mov     [ebp+var_18], 0Fh
.text:00404483                 mov     [ebp+var_1C], eax
.text:00404486                 mov     byte ptr [ebp+Dst], 0
.text:0040448A                 cmp     ecx, edx
.text:0040448C                 jz      short loc_4044D3
.text:0040448E                 cmp     dword ptr [esi], 10h
.text:00404491                 mov     [ebp+var_18], 0Fh
.text:00404498                 mov     [ebp+var_1C], eax
.text:0040449B                 mov     byte ptr [ebp+Dst], 0
.text:0040449F                 jnb     short loc_4044BA
.text:004044A1                 mov     eax, [esi-4]
.text:004044A4                 inc     eax
.text:004044A5                 push    eax             ; Size
.text:004044A6                 lea     edx, [esi-14h]
.text:004044A9                 push    edx             ; Src
.text:004044AA                 mov     eax, ecx
.text:004044AC                 push    eax             ; Dst
.text:004044AD                 call    ds:memmove
.text:004044B3                 add     esp, 0Ch
.text:004044B6                 xor     eax, eax
.text:004044B8                 jmp     short loc_4044C3
.text:004044BA ; ---------------------------------------------------------------------------
.text:004044BA
.text:004044BA loc_4044BA:                             ; CODE XREF: sub_404400+9F↑j
.text:004044BA                 mov     ecx, [esi-14h]
.text:004044BD                 mov     [ebp+Dst], ecx
.text:004044C0                 mov     [esi-14h], eax
.text:004044C3
.text:004044C3 loc_4044C3:                             ; CODE XREF: sub_404400+B8↑j
.text:004044C3                 mov     edx, [esi-4]
.text:004044C6                 mov     ecx, [esi]
.text:004044C8                 mov     [ebp+var_1C], edx
.text:004044CB                 mov     [ebp+var_18], ecx
.text:004044CE                 mov     [esi-4], eax
.text:004044D1                 mov     [esi], eax
.text:004044D3
.text:004044D3 loc_4044D3:                             ; CODE XREF: sub_404400+8C↑j
.text:004044D3                 lea     edx, [ebp+Dst]
.text:004044D6                 push    edx             ; Src
.text:004044D7                 push    ebx             ; int
.text:004044D8 ;   try {
.text:004044D8                 mov     [ebp+var_4], eax
.text:004044DB                 mov     eax, [ebp+var_30]
.text:004044DE                 push    edi             ; int
.text:004044DF                 push    eax             ; int
.text:004044E0                 call    sub_404C90
.text:004044E5                 add     esp, 10h
.text:004044E5 ;   } // starts at 4044D8
.text:004044E8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:004044EF                 cmp     [ebp+var_18], 10h
.text:004044F3                 jb      short loc_404502
.text:004044F5                 mov     ecx, [ebp+Dst]
.text:004044F8                 push    ecx
.text:004044F9                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004044FF                 add     esp, 4
.text:00404502
.text:00404502 loc_404502:                             ; CODE XREF: sub_404400+F3↑j
.text:00404502                 test    edi, edi
.text:00404504                 jg      loc_404470
.text:0040450A
.text:0040450A loc_40450A:                             ; CODE XREF: sub_404400+55↑j
.text:0040450A                 mov     ecx, [ebp+var_C]
.text:0040450D                 mov     large fs:0, ecx
.text:00404514                 pop     ecx
.text:00404515                 pop     edi
.text:00404516                 pop     esi
.text:00404517                 pop     ebx
.text:00404518                 mov     ecx, [ebp+var_10]
.text:0040451B                 xor     ecx, ebp
.text:0040451D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00404522                 mov     esp, ebp
.text:00404524                 pop     ebp
.text:00404525                 retn
.text:00404525 ; } // starts at 404400
.text:00404525 sub_404400      endp
.text:00404525
.text:00404525 ; ---------------------------------------------------------------------------
.text:00404526                 align 10h
.text:00404530
.text:00404530 ; =============== S U B R O U T I N E =======================================
.text:00404530
.text:00404530
.text:00404530 sub_404530      proc near               ; CODE XREF: sub_403190+127↑p
.text:00404530                 push    esi             ; int
.text:00404531                 push    edi             ; int
.text:00404532                 mov     edi, eax
.text:00404534                 mov     esi, edi
.text:00404536                 sub     esi, ebx
.text:00404538                 mov     eax, 92492493h
.text:0040453D                 imul    esi
.text:0040453F                 add     edx, esi
.text:00404541                 sar     edx, 4
.text:00404544                 mov     eax, edx
.text:00404546                 shr     eax, 1Fh
.text:00404549                 add     eax, edx
.text:0040454B                 cmp     eax, 1
.text:0040454E                 jle     short loc_404577
.text:00404550
.text:00404550 loc_404550:                             ; CODE XREF: sub_404530+45↓j
.text:00404550                 mov     edx, edi
.text:00404552                 mov     ecx, ebx        ; int
.text:00404554                 call    sub_4050B0
.text:00404559                 sub     esi, 1Ch
.text:0040455C                 mov     eax, 92492493h
.text:00404561                 imul    esi
.text:00404563                 add     edx, esi
.text:00404565                 sar     edx, 4
.text:00404568                 mov     ecx, edx
.text:0040456A                 shr     ecx, 1Fh
.text:0040456D                 add     ecx, edx
.text:0040456F                 sub     edi, 1Ch
.text:00404572                 cmp     ecx, 1
.text:00404575                 jg      short loc_404550
.text:00404577
.text:00404577 loc_404577:                             ; CODE XREF: sub_404530+1E↑j
.text:00404577                 pop     edi
.text:00404578                 pop     esi
.text:00404579                 retn
.text:00404579 sub_404530      endp
.text:00404579
.text:00404579 ; ---------------------------------------------------------------------------
.text:0040457A                 align 10h
.text:00404580
.text:00404580 ; =============== S U B R O U T I N E =======================================
.text:00404580
.text:00404580 ; Attributes: bp-based frame
.text:00404580
.text:00404580 sub_404580      proc near               ; CODE XREF: sub_403190+EA↑p
.text:00404580
.text:00404580 var_38          = dword ptr -38h
.text:00404580 var_34          = dword ptr -34h
.text:00404580 var_30          = dword ptr -30h
.text:00404580 Dst             = dword ptr -2Ch
.text:00404580 var_1C          = dword ptr -1Ch
.text:00404580 var_18          = dword ptr -18h
.text:00404580 var_10          = dword ptr -10h
.text:00404580 var_C           = dword ptr -0Ch
.text:00404580 var_4           = dword ptr -4
.text:00404580 arg_0           = dword ptr  8
.text:00404580 arg_4           = dword ptr  0Ch
.text:00404580
.text:00404580 ; FUNCTION CHUNK AT .text:00402020 SIZE 00000024 BYTES
.text:00404580 ; FUNCTION CHUNK AT .text:00405D40 SIZE 0000002D BYTES
.text:00404580
.text:00404580 ; __unwind { // SEH_404580
.text:00404580                 push    ebp
.text:00404581                 mov     ebp, esp
.text:00404583                 push    0FFFFFFFFh
.text:00404585                 push    offset SEH_404580
.text:0040458A                 mov     eax, large fs:0
.text:00404590                 push    eax
.text:00404591                 sub     esp, 2Ch
.text:00404594                 mov     eax, ___security_cookie
.text:00404599                 xor     eax, ebp
.text:0040459B                 mov     [ebp+var_10], eax
.text:0040459E                 push    ebx
.text:0040459F                 push    esi
.text:004045A0                 push    edi
.text:004045A1                 push    eax
.text:004045A2                 lea     eax, [ebp+var_C]
.text:004045A5                 mov     large fs:0, eax
.text:004045AB                 lea     edi, [ecx+1Ch]
.text:004045AE                 mov     [ebp+var_34], ecx
.text:004045B1                 mov     [ebp+var_30], edi
.text:004045B4                 cmp     edi, [ebp+arg_0]
.text:004045B7                 jz      loc_404904
.text:004045BD                 jmp     short loc_4045C3
.text:004045BD ; ---------------------------------------------------------------------------
.text:004045BF                 align 10h
.text:004045C0
.text:004045C0 loc_4045C0:                             ; CODE XREF: sub_404580+37E↓j
.text:004045C0                 mov     ecx, [ebp+var_34]
.text:004045C3
.text:004045C3 loc_4045C3:                             ; CODE XREF: sub_404580+3D↑j
.text:004045C3                 xor     edx, edx
.text:004045C5                 lea     eax, [ebp+Dst]
.text:004045C8                 mov     ebx, edi
.text:004045CA                 xor     esi, esi
.text:004045CC                 mov     [ebp+var_38], ebx
.text:004045CF                 mov     [ebp+var_18], 0Fh
.text:004045D6                 mov     [ebp+var_1C], edx
.text:004045D9                 mov     byte ptr [ebp+Dst], dl
.text:004045DC                 cmp     eax, edi
.text:004045DE                 jz      short loc_404626
.text:004045E0                 cmp     dword ptr [edi+14h], 10h
.text:004045E4                 mov     [ebp+var_18], 0Fh
.text:004045EB                 mov     [ebp+var_1C], esi
.text:004045EE                 mov     byte ptr [ebp+Dst], dl
.text:004045F1                 jnb     short loc_40460B
.text:004045F3                 mov     eax, [edi+10h]
.text:004045F6                 inc     eax
.text:004045F7                 push    eax             ; Size
.text:004045F8                 lea     ecx, [ebp+Dst]
.text:004045FB                 push    edi             ; Src
.text:004045FC                 push    ecx             ; Dst
.text:004045FD                 call    ds:memmove
.text:00404603                 mov     ecx, [ebp+var_34]
.text:00404606                 add     esp, 0Ch
.text:00404609                 jmp     short loc_404612
.text:0040460B ; ---------------------------------------------------------------------------
.text:0040460B
.text:0040460B loc_40460B:                             ; CODE XREF: sub_404580+71↑j
.text:0040460B                 mov     edx, [edi]
.text:0040460D                 mov     [ebp+Dst], edx
.text:00404610                 mov     [edi], esi
.text:00404612
.text:00404612 loc_404612:                             ; CODE XREF: sub_404580+89↑j
.text:00404612                 mov     edx, [edi+14h]
.text:00404615                 mov     eax, [edi+10h]
.text:00404618                 mov     [ebp+var_18], edx
.text:0040461B                 mov     [ebp+var_1C], eax
.text:0040461E                 mov     [edi+10h], esi
.text:00404621                 mov     [edi+14h], esi
.text:00404624                 mov     edx, eax
.text:00404626
.text:00404626 loc_404626:                             ; CODE XREF: sub_404580+5E↑j
.text:00404626 ;   try {
.text:00404626                 mov     [ebp+var_4], esi
.text:00404629                 cmp     dword ptr [ecx+14h], 10h
.text:0040462D                 mov     eax, [ecx+10h]
.text:00404630                 jb      short loc_404634
.text:00404632                 mov     ecx, [ecx]
.text:00404634
.text:00404634 loc_404634:                             ; CODE XREF: sub_404580+B0↑j
.text:00404634                 mov     esi, edx
.text:00404636                 cmp     edx, eax
.text:00404638                 jb      short loc_40463C
.text:0040463A                 mov     esi, eax
.text:0040463C
.text:0040463C loc_40463C:                             ; CODE XREF: sub_404580+B8↑j
.text:0040463C                 cmp     [ebp+var_18], 10h
.text:00404640                 mov     edx, [ebp+Dst]
.text:00404643                 jnb     short loc_404648
.text:00404645                 lea     edx, [ebp+Dst]
.text:00404648
.text:00404648 loc_404648:                             ; CODE XREF: sub_404580+C3↑j
.text:00404648                 cmp     esi, 4
.text:0040464B                 jb      short loc_404664
.text:0040464D                 lea     ecx, [ecx+0]
.text:00404650
.text:00404650 loc_404650:                             ; CODE XREF: sub_404580+E2↓j
.text:00404650                 mov     eax, [edx]
.text:00404652                 cmp     eax, [ecx]
.text:00404654                 jnz     short loc_404668
.text:00404656                 sub     esi, 4
.text:00404659                 add     ecx, 4
.text:0040465C                 add     edx, 4
.text:0040465F                 cmp     esi, 4
.text:00404662                 jnb     short loc_404650
.text:00404664
.text:00404664 loc_404664:                             ; CODE XREF: sub_404580+CB↑j
.text:00404664                 test    esi, esi
.text:00404666                 jz      short loc_4046B1
.text:00404668
.text:00404668 loc_404668:                             ; CODE XREF: sub_404580+D4↑j
.text:00404668                 movzx   edi, byte ptr [ecx]
.text:0040466B                 movzx   eax, byte ptr [edx]
.text:0040466E                 sub     eax, edi
.text:00404670                 jnz     short loc_4046A3
.text:00404672                 cmp     esi, 1
.text:00404675                 jbe     short loc_4046AE
.text:00404677                 movzx   eax, byte ptr [edx+1]
.text:0040467B                 movzx   edi, byte ptr [ecx+1]
.text:0040467F                 sub     eax, edi
.text:00404681                 jnz     short loc_4046A3
.text:00404683                 cmp     esi, 2
.text:00404686                 jbe     short loc_4046AE
.text:00404688                 movzx   eax, byte ptr [edx+2]
.text:0040468C                 movzx   edi, byte ptr [ecx+2]
.text:00404690                 sub     eax, edi
.text:00404692                 jnz     short loc_4046A3
.text:00404694                 cmp     esi, 3
.text:00404697                 jbe     short loc_4046AE
.text:00404699                 movzx   eax, byte ptr [edx+3]
.text:0040469D                 movzx   ecx, byte ptr [ecx+3]
.text:004046A1                 sub     eax, ecx
.text:004046A3
.text:004046A3 loc_4046A3:                             ; CODE XREF: sub_404580+F0↑j
.text:004046A3                                         ; sub_404580+101↑j ...
.text:004046A3                 mov     edi, [ebp+var_30]
.text:004046A6                 sar     eax, 1Fh
.text:004046A9                 or      eax, 1
.text:004046AC                 jmp     short loc_4046B3
.text:004046AE ; ---------------------------------------------------------------------------
.text:004046AE
.text:004046AE loc_4046AE:                             ; CODE XREF: sub_404580+F5↑j
.text:004046AE                                         ; sub_404580+106↑j ...
.text:004046AE                 mov     edi, [ebp+var_30]
.text:004046B1
.text:004046B1 loc_4046B1:                             ; CODE XREF: sub_404580+E6↑j
.text:004046B1                 xor     eax, eax
.text:004046B3
.text:004046B3 loc_4046B3:                             ; CODE XREF: sub_404580+12C↑j
.text:004046B3                 mov     esi, [ebp+var_34]
.text:004046B6                 test    eax, eax
.text:004046B8                 jnz     short loc_4046D4
.text:004046BA                 mov     eax, [esi+10h]
.text:004046BD                 mov     ecx, [ebp+var_1C]
.text:004046C0                 cmp     ecx, eax
.text:004046C2                 jnb     short loc_4046C9
.text:004046C4                 or      eax, 0FFFFFFFFh
.text:004046C7                 jmp     short loc_4046D2
.text:004046C9 ; ---------------------------------------------------------------------------
.text:004046C9
.text:004046C9 loc_4046C9:                             ; CODE XREF: sub_404580+142↑j
.text:004046C9                 xor     edx, edx
.text:004046CB                 cmp     ecx, eax
.text:004046CD                 setnz   dl
.text:004046D0                 mov     eax, edx
.text:004046D2
.text:004046D2 loc_4046D2:                             ; CODE XREF: sub_404580+147↑j
.text:004046D2                 test    eax, eax
.text:004046D4
.text:004046D4 loc_4046D4:                             ; CODE XREF: sub_404580+138↑j
.text:004046D4                 sets    al
.text:004046D7                 test    al, al
.text:004046D9                 jz      short loc_404752
.text:004046DB                 mov     eax, [ebp+var_34]
.text:004046DE                 push    eax
.text:004046DF                 lea     ecx, [edi+1Ch]
.text:004046E2                 push    esi
.text:004046E3                 mov     eax, edi
.text:004046E5                 call    sub_4051A0
.text:004046EA                 lea     ecx, [ebp+Dst]
.text:004046ED                 add     esp, 8
.text:004046F0                 cmp     esi, ecx
.text:004046F2                 jz      loc_4048DB
.text:004046F8                 cmp     dword ptr [esi+14h], 10h
.text:004046FC                 jb      short loc_40470A
.text:004046FE                 mov     eax, [esi]
.text:00404700                 push    eax
.text:00404701                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00404707                 add     esp, 4
.text:0040470A
.text:0040470A loc_40470A:                             ; CODE XREF: sub_404580+17C↑j
.text:0040470A                 xor     ebx, ebx
.text:0040470C                 mov     dword ptr [esi+14h], 0Fh
.text:00404713                 mov     [esi+10h], ebx
.text:00404716                 mov     [esi], bl
.text:00404718                 cmp     [ebp+var_18], 10h
.text:0040471C                 jnb     short loc_404733
.text:0040471E                 mov     eax, [ebp+var_1C]
.text:00404721                 inc     eax
.text:00404722                 push    eax             ; Size
.text:00404723                 lea     edx, [ebp+Dst]
.text:00404726                 push    edx             ; Src
.text:00404727                 push    esi             ; Dst
.text:00404728                 call    ds:memmove
.text:0040472E                 add     esp, 0Ch
.text:00404731                 jmp     short loc_40473B
.text:00404733 ; ---------------------------------------------------------------------------
.text:00404733
.text:00404733 loc_404733:                             ; CODE XREF: sub_404580+19C↑j
.text:00404733                 mov     eax, [ebp+Dst]
.text:00404736                 mov     [esi], eax
.text:00404738                 mov     [ebp+Dst], ebx
.text:0040473B
.text:0040473B loc_40473B:                             ; CODE XREF: sub_404580+1B1↑j
.text:0040473B                 mov     ecx, [ebp+var_1C]
.text:0040473E                 mov     edx, [ebp+var_18]
.text:00404741                 mov     [esi+10h], ecx
.text:00404744                 mov     [esi+14h], edx
.text:00404747                 mov     [ebp+var_1C], ebx
.text:0040474A                 mov     [ebp+var_18], ebx
.text:0040474D                 jmp     loc_4048DB
.text:00404752 ; ---------------------------------------------------------------------------
.text:00404752
.text:00404752 loc_404752:                             ; CODE XREF: sub_404580+159↑j
.text:00404752                 add     edi, 14h
.text:00404755
.text:00404755 loc_404755:                             ; CODE XREF: sub_404580+2F3↓j
.text:00404755                 mov     ecx, [edi-20h]
.text:00404758                 sub     edi, 1Ch
.text:0040475B                 cmp     dword ptr [edi], 10h
.text:0040475E                 jb      short loc_404765
.text:00404760                 mov     eax, [edi-14h]
.text:00404763                 jmp     short loc_404768
.text:00404765 ; ---------------------------------------------------------------------------
.text:00404765
.text:00404765 loc_404765:                             ; CODE XREF: sub_404580+1DE↑j
.text:00404765                 lea     eax, [edi-14h]
.text:00404768
.text:00404768 loc_404768:                             ; CODE XREF: sub_404580+1E3↑j
.text:00404768                 mov     edx, [ebp+var_1C]
.text:0040476B                 cmp     edx, ecx
.text:0040476D                 jb      short loc_404771
.text:0040476F                 mov     edx, ecx
.text:00404771
.text:00404771 loc_404771:                             ; CODE XREF: sub_404580+1ED↑j
.text:00404771                 cmp     [ebp+var_18], 10h
.text:00404775                 mov     esi, [ebp+Dst]
.text:00404778                 jnb     short loc_40477D
.text:0040477A                 lea     esi, [ebp+Dst]
.text:0040477D
.text:0040477D loc_40477D:                             ; CODE XREF: sub_404580+1F8↑j
.text:0040477D                 mov     ecx, eax
.text:0040477F                 cmp     edx, 4
.text:00404782                 jb      short loc_404798
.text:00404784
.text:00404784 loc_404784:                             ; CODE XREF: sub_404580+216↓j
.text:00404784                 mov     eax, [esi]
.text:00404786                 cmp     eax, [ecx]
.text:00404788                 jnz     short loc_40479C
.text:0040478A                 sub     edx, 4
.text:0040478D                 add     ecx, 4
.text:00404790                 add     esi, 4
.text:00404793                 cmp     edx, 4
.text:00404796                 jnb     short loc_404784
.text:00404798
.text:00404798 loc_404798:                             ; CODE XREF: sub_404580+202↑j
.text:00404798                 test    edx, edx
.text:0040479A                 jz      short loc_4047E5
.text:0040479C
.text:0040479C loc_40479C:                             ; CODE XREF: sub_404580+208↑j
.text:0040479C                 movzx   eax, byte ptr [esi]
.text:0040479F                 movzx   ebx, byte ptr [ecx]
.text:004047A2                 sub     eax, ebx
.text:004047A4                 jnz     short loc_4047D7
.text:004047A6                 cmp     edx, 1
.text:004047A9                 jbe     short loc_4047E2
.text:004047AB                 movzx   eax, byte ptr [esi+1]
.text:004047AF                 movzx   ebx, byte ptr [ecx+1]
.text:004047B3                 sub     eax, ebx
.text:004047B5                 jnz     short loc_4047D7
.text:004047B7                 cmp     edx, 2
.text:004047BA                 jbe     short loc_4047E2
.text:004047BC                 movzx   eax, byte ptr [esi+2]
.text:004047C0                 movzx   ebx, byte ptr [ecx+2]
.text:004047C4                 sub     eax, ebx
.text:004047C6                 jnz     short loc_4047D7
.text:004047C8                 cmp     edx, 3
.text:004047CB                 jbe     short loc_4047E2
.text:004047CD                 movzx   eax, byte ptr [esi+3]
.text:004047D1                 movzx   ecx, byte ptr [ecx+3]
.text:004047D5                 sub     eax, ecx
.text:004047D7
.text:004047D7 loc_4047D7:                             ; CODE XREF: sub_404580+224↑j
.text:004047D7                                         ; sub_404580+235↑j ...
.text:004047D7                 mov     ebx, [ebp+var_38]
.text:004047DA                 sar     eax, 1Fh
.text:004047DD                 or      eax, 1
.text:004047E0                 jmp     short loc_4047E7
.text:004047E2 ; ---------------------------------------------------------------------------
.text:004047E2
.text:004047E2 loc_4047E2:                             ; CODE XREF: sub_404580+229↑j
.text:004047E2                                         ; sub_404580+23A↑j ...
.text:004047E2                 mov     ebx, [ebp+var_38]
.text:004047E5
.text:004047E5 loc_4047E5:                             ; CODE XREF: sub_404580+21A↑j
.text:004047E5                 xor     eax, eax
.text:004047E7
.text:004047E7 loc_4047E7:                             ; CODE XREF: sub_404580+260↑j
.text:004047E7                 test    eax, eax
.text:004047E9                 jnz     short loc_404805
.text:004047EB                 mov     eax, [edi-4]
.text:004047EE                 mov     esi, [ebp+var_1C]
.text:004047F1                 cmp     esi, eax
.text:004047F3                 jnb     short loc_4047FA
.text:004047F5                 or      eax, 0FFFFFFFFh
.text:004047F8                 jmp     short loc_404803
.text:004047FA ; ---------------------------------------------------------------------------
.text:004047FA
.text:004047FA loc_4047FA:                             ; CODE XREF: sub_404580+273↑j
.text:004047FA                 xor     edx, edx
.text:004047FC                 cmp     esi, eax
.text:004047FE                 setnz   dl
.text:00404801                 mov     eax, edx
.text:00404803
.text:00404803 loc_404803:                             ; CODE XREF: sub_404580+278↑j
.text:00404803                 test    eax, eax
.text:00404805
.text:00404805 loc_404805:                             ; CODE XREF: sub_404580+269↑j
.text:00404805                 sets    al
.text:00404808                 test    al, al
.text:0040480A                 jz      short loc_404878
.text:0040480C                 lea     eax, [edi-14h]
.text:0040480F                 cmp     ebx, eax
.text:00404811                 jz      short loc_40486D
.text:00404813                 cmp     dword ptr [ebx+14h], 10h
.text:00404817                 jb      short loc_404825
.text:00404819                 mov     ecx, [ebx]
.text:0040481B                 push    ecx
.text:0040481C                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00404822                 add     esp, 4
.text:00404825
.text:00404825 loc_404825:                             ; CODE XREF: sub_404580+297↑j
.text:00404825                 xor     eax, eax
.text:00404827                 mov     dword ptr [ebx+14h], 0Fh
.text:0040482E                 mov     [ebx+10h], eax
.text:00404831                 mov     [ebx], al
.text:00404833                 cmp     dword ptr [edi], 10h
.text:00404836                 jnb     short loc_40484D
.text:00404838                 mov     edx, [edi-4]
.text:0040483B                 inc     edx
.text:0040483C                 push    edx             ; Size
.text:0040483D                 lea     eax, [edi-14h]
.text:00404840                 push    eax             ; Src
.text:00404841                 push    ebx             ; Dst
.text:00404842                 call    ds:memmove
.text:00404848                 add     esp, 0Ch
.text:0040484B                 jmp     short loc_404855
.text:0040484D ; ---------------------------------------------------------------------------
.text:0040484D
.text:0040484D loc_40484D:                             ; CODE XREF: sub_404580+2B6↑j
.text:0040484D                 mov     ecx, [edi-14h]
.text:00404850                 mov     [ebx], ecx
.text:00404852                 mov     [edi-14h], eax
.text:00404855
.text:00404855 loc_404855:                             ; CODE XREF: sub_404580+2CB↑j
.text:00404855                 mov     edx, [edi-4]
.text:00404858                 mov     [ebx+10h], edx
.text:0040485B                 mov     eax, [edi]
.text:0040485D                 mov     [ebx+14h], eax
.text:00404860                 mov     dword ptr [edi-4], 0
.text:00404867                 mov     dword ptr [edi], 0
.text:0040486D
.text:0040486D loc_40486D:                             ; CODE XREF: sub_404580+291↑j
.text:0040486D                 lea     ebx, [edi-14h]
.text:00404870                 mov     [ebp+var_38], ebx
.text:00404873                 jmp     loc_404755
.text:00404878 ; ---------------------------------------------------------------------------
.text:00404878
.text:00404878 loc_404878:                             ; CODE XREF: sub_404580+28A↑j
.text:00404878                 lea     ecx, [ebp+Dst]
.text:0040487B                 cmp     ebx, ecx
.text:0040487D                 jz      short loc_4048D8
.text:0040487F                 mov     edi, 10h
.text:00404884                 cmp     [ebx+14h], edi
.text:00404887                 jb      short loc_404895
.text:00404889                 mov     eax, [ebx]
.text:0040488B                 push    eax
.text:0040488C                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00404892                 add     esp, 4
.text:00404895
.text:00404895 loc_404895:                             ; CODE XREF: sub_404580+307↑j
.text:00404895                 xor     esi, esi
.text:00404897                 mov     dword ptr [ebx+14h], 0Fh
.text:0040489E                 mov     [ebx+10h], esi
.text:004048A1                 mov     byte ptr [ebx], 0
.text:004048A4                 cmp     [ebp+var_18], edi
.text:004048A7                 jnb     short loc_4048BE
.text:004048A9                 mov     eax, [ebp+var_1C]
.text:004048AC                 inc     eax
.text:004048AD                 push    eax             ; Size
.text:004048AE                 lea     edx, [ebp+Dst]
.text:004048B1                 push    edx             ; Src
.text:004048B2                 push    ebx             ; Dst
.text:004048B3                 call    ds:memmove
.text:004048B9                 add     esp, 0Ch
.text:004048BC                 jmp     short loc_4048C6
.text:004048BE ; ---------------------------------------------------------------------------
.text:004048BE
.text:004048BE loc_4048BE:                             ; CODE XREF: sub_404580+327↑j
.text:004048BE                 mov     eax, [ebp+Dst]
.text:004048C1                 mov     [ebx], eax
.text:004048C3                 mov     [ebp+Dst], esi
.text:004048C6
.text:004048C6 loc_4048C6:                             ; CODE XREF: sub_404580+33C↑j
.text:004048C6                 mov     ecx, [ebp+var_1C]
.text:004048C9                 mov     edx, [ebp+var_18]
.text:004048CC                 mov     [ebx+10h], ecx
.text:004048CF                 mov     [ebx+14h], edx
.text:004048D2                 mov     [ebp+var_1C], esi
.text:004048D5                 mov     [ebp+var_18], esi
.text:004048D8
.text:004048D8 loc_4048D8:                             ; CODE XREF: sub_404580+2FD↑j
.text:004048D8                 mov     edi, [ebp+var_30]
.text:004048D8 ;   } // starts at 404626
.text:004048DB
.text:004048DB loc_4048DB:                             ; CODE XREF: sub_404580+172↑j
.text:004048DB                                         ; sub_404580+1CD↑j
.text:004048DB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:004048E2                 cmp     [ebp+var_18], 10h
.text:004048E6                 jb      short loc_4048F5
.text:004048E8                 mov     eax, [ebp+Dst]
.text:004048EB                 push    eax
.text:004048EC                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004048F2                 add     esp, 4
.text:004048F5
.text:004048F5 loc_4048F5:                             ; CODE XREF: sub_404580+366↑j
.text:004048F5                 add     edi, 1Ch
.text:004048F8                 mov     [ebp+var_30], edi
.text:004048FB                 cmp     edi, [ebp+arg_0]
.text:004048FE                 jnz     loc_4045C0
.text:00404904
.text:00404904 loc_404904:                             ; CODE XREF: sub_404580+37↑j
.text:00404904                 mov     ecx, [ebp+var_C]
.text:00404907                 mov     large fs:0, ecx
.text:0040490E                 pop     ecx
.text:0040490F                 pop     edi
.text:00404910                 pop     esi
.text:00404911                 pop     ebx
.text:00404912                 mov     ecx, [ebp+var_10]
.text:00404915                 xor     ecx, ebp
.text:00404917                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040491C                 mov     esp, ebp
.text:0040491E                 pop     ebp
.text:0040491F                 retn
.text:0040491F ; } // starts at 404580
.text:0040491F sub_404580      endp
.text:0040491F
.text:00404920
.text:00404920 ; =============== S U B R O U T I N E =======================================
.text:00404920
.text:00404920
.text:00404920 sub_404920      proc near               ; CODE XREF: sub_4040E0+34↑p
.text:00404920                                         ; sub_4040E0+42↑p ...
.text:00404920                 push    ebx
.text:00404921                 push    esi
.text:00404922                 mov     esi, [eax]
.text:00404924                 push    edi
.text:00404925                 mov     edi, [ecx]
.text:00404927                 cmp     edi, esi
.text:00404929                 jg      short loc_404935
.text:0040492B                 jl      short loc_404949
.text:0040492D                 mov     ebx, [eax+4]
.text:00404930                 cmp     ebx, [ecx+4]
.text:00404933                 jge     short loc_404949
.text:00404935
.text:00404935 loc_404935:                             ; CODE XREF: sub_404920+9↑j
.text:00404935                 cmp     eax, ecx
.text:00404937                 jz      short loc_404949
.text:00404939                 mov     [eax], edi
.text:0040493B                 mov     [ecx], esi
.text:0040493D                 mov     edi, [ecx+4]
.text:00404940                 mov     esi, [eax+4]
.text:00404943                 mov     [eax+4], edi
.text:00404946                 mov     [ecx+4], esi
.text:00404949
.text:00404949 loc_404949:                             ; CODE XREF: sub_404920+B↑j
.text:00404949                                         ; sub_404920+13↑j ...
.text:00404949                 mov     esi, [edx]
.text:0040494B                 mov     edi, [eax]
.text:0040494D                 cmp     edi, esi
.text:0040494F                 jg      short loc_40495B
.text:00404951                 jl      short loc_40496F
.text:00404953                 mov     ebx, [edx+4]
.text:00404956                 cmp     ebx, [eax+4]
.text:00404959                 jge     short loc_40496F
.text:0040495B
.text:0040495B loc_40495B:                             ; CODE XREF: sub_404920+2F↑j
.text:0040495B                 cmp     edx, eax
.text:0040495D                 jz      short loc_40496F
.text:0040495F                 mov     [edx], edi
.text:00404961                 mov     [eax], esi
.text:00404963                 mov     edi, [eax+4]
.text:00404966                 mov     esi, [edx+4]
.text:00404969                 mov     [edx+4], edi
.text:0040496C                 mov     [eax+4], esi
.text:0040496F
.text:0040496F loc_40496F:                             ; CODE XREF: sub_404920+31↑j
.text:0040496F                                         ; sub_404920+39↑j ...
.text:0040496F                 mov     edx, [eax]
.text:00404971                 mov     esi, [ecx]
.text:00404973                 cmp     esi, edx
.text:00404975                 jg      short loc_404981
.text:00404977                 jl      short loc_404995
.text:00404979                 mov     edi, [eax+4]
.text:0040497C                 cmp     edi, [ecx+4]
.text:0040497F                 jge     short loc_404995
.text:00404981
.text:00404981 loc_404981:                             ; CODE XREF: sub_404920+55↑j
.text:00404981                 cmp     eax, ecx
.text:00404983                 jz      short loc_404995
.text:00404985                 mov     [eax], esi
.text:00404987                 mov     [ecx], edx
.text:00404989                 mov     esi, [ecx+4]
.text:0040498C                 mov     edx, [eax+4]
.text:0040498F                 mov     [eax+4], esi
.text:00404992                 mov     [ecx+4], edx
.text:00404995
.text:00404995 loc_404995:                             ; CODE XREF: sub_404920+57↑j
.text:00404995                                         ; sub_404920+5F↑j ...
.text:00404995                 pop     edi
.text:00404996                 pop     esi
.text:00404997                 pop     ebx
.text:00404998                 retn
.text:00404998 sub_404920      endp
.text:00404998
.text:00404998 ; ---------------------------------------------------------------------------
.text:00404999                 align 10h
.text:004049A0
.text:004049A0 ; =============== S U B R O U T I N E =======================================
.text:004049A0
.text:004049A0 ; Attributes: bp-based frame
.text:004049A0
.text:004049A0 sub_4049A0      proc near               ; CODE XREF: sub_404250+4B↑p
.text:004049A0
.text:004049A0 var_4           = dword ptr -4
.text:004049A0 arg_0           = dword ptr  8
.text:004049A0
.text:004049A0                 push    ebp
.text:004049A1                 mov     ebp, esp
.text:004049A3                 push    ecx
.text:004049A4                 push    ebx
.text:004049A5                 push    esi
.text:004049A6                 mov     esi, edx
.text:004049A8                 mov     ebx, eax
.text:004049AA                 lea     eax, [esi+esi+2]
.text:004049AE                 push    edi
.text:004049AF                 mov     [ebp+var_4], esi
.text:004049B2                 cmp     eax, ebx
.text:004049B4                 jge     short loc_4049E6
.text:004049B6
.text:004049B6 loc_4049B6:                             ; CODE XREF: sub_4049A0+44↓j
.text:004049B6                 mov     edx, [ecx+eax*8]
.text:004049B9                 mov     edi, [ecx+eax*8-8]
.text:004049BD                 cmp     edi, edx
.text:004049BF                 jg      short loc_4049CD
.text:004049C1                 jl      short loc_4049CE
.text:004049C3                 mov     edx, [ecx+eax*8+4]
.text:004049C7                 cmp     edx, [ecx+eax*8-4]
.text:004049CB                 jge     short loc_4049CE
.text:004049CD
.text:004049CD loc_4049CD:                             ; CODE XREF: sub_4049A0+1F↑j
.text:004049CD                 dec     eax
.text:004049CE
.text:004049CE loc_4049CE:                             ; CODE XREF: sub_4049A0+21↑j
.text:004049CE                                         ; sub_4049A0+2B↑j
.text:004049CE                 mov     edx, [ecx+eax*8]
.text:004049D1                 mov     [ecx+esi*8], edx
.text:004049D4                 mov     edx, [ecx+eax*8+4]
.text:004049D8                 mov     [ecx+esi*8+4], edx
.text:004049DC                 mov     esi, eax
.text:004049DE                 lea     eax, [eax+eax+2]
.text:004049E2                 cmp     eax, ebx
.text:004049E4                 jl      short loc_4049B6
.text:004049E6
.text:004049E6 loc_4049E6:                             ; CODE XREF: sub_4049A0+14↑j
.text:004049E6                 jnz     short loc_4049FA
.text:004049E8                 mov     eax, [ecx+ebx*8-8]
.text:004049EC                 mov     [ecx+esi*8], eax
.text:004049EF                 mov     edx, [ecx+ebx*8-4]
.text:004049F3                 mov     [ecx+esi*8+4], edx
.text:004049F7                 lea     esi, [ebx-1]
.text:004049FA
.text:004049FA loc_4049FA:                             ; CODE XREF: sub_4049A0:loc_4049E6↑j
.text:004049FA                 lea     eax, [esi-1]
.text:004049FD                 cdq
.text:004049FE                 sub     eax, edx
.text:00404A00                 sar     eax, 1
.text:00404A02                 cmp     [ebp+var_4], esi
.text:00404A05                 jge     short loc_404A49
.text:00404A07
.text:00404A07 loc_404A07:                             ; CODE XREF: sub_4049A0+94↓j
.text:00404A07                 mov     ebx, [ebp+arg_0]
.text:00404A0A                 mov     edx, [ecx+eax*8]
.text:00404A0D                 mov     edi, [ebx]
.text:00404A0F                 cmp     edi, edx
.text:00404A11                 jg      short loc_404A1E
.text:00404A13                 jl      short loc_404A4C
.text:00404A15                 mov     edi, [ecx+eax*8+4]
.text:00404A19                 cmp     edi, [ebx+4]
.text:00404A1C                 jge     short loc_404A4C
.text:00404A1E
.text:00404A1E loc_404A1E:                             ; CODE XREF: sub_4049A0+71↑j
.text:00404A1E                 mov     [ecx+esi*8], edx
.text:00404A21                 mov     edx, [ecx+eax*8+4]
.text:00404A25                 mov     [ecx+esi*8+4], edx
.text:00404A29                 mov     esi, eax
.text:00404A2B                 dec     eax
.text:00404A2C                 cdq
.text:00404A2D                 sub     eax, edx
.text:00404A2F                 sar     eax, 1
.text:00404A31                 cmp     [ebp+var_4], esi
.text:00404A34                 jl      short loc_404A07
.text:00404A36                 mov     eax, [ebx]
.text:00404A38                 mov     [ecx+esi*8], eax
.text:00404A3B                 mov     edx, [ebx+4]
.text:00404A3E                 pop     edi
.text:00404A3F                 mov     [ecx+esi*8+4], edx
.text:00404A43                 pop     esi
.text:00404A44                 pop     ebx
.text:00404A45                 mov     esp, ebp
.text:00404A47                 pop     ebp
.text:00404A48                 retn
.text:00404A49 ; ---------------------------------------------------------------------------
.text:00404A49
.text:00404A49 loc_404A49:                             ; CODE XREF: sub_4049A0+65↑j
.text:00404A49                 mov     ebx, [ebp+arg_0]
.text:00404A4C
.text:00404A4C loc_404A4C:                             ; CODE XREF: sub_4049A0+73↑j
.text:00404A4C                                         ; sub_4049A0+7C↑j
.text:00404A4C                 mov     eax, [ebx]
.text:00404A4E                 mov     [ecx+esi*8], eax
.text:00404A51                 mov     edx, [ebx+4]
.text:00404A54                 pop     edi
.text:00404A55                 mov     [ecx+esi*8+4], edx
.text:00404A59                 pop     esi
.text:00404A5A                 pop     ebx
.text:00404A5B                 mov     esp, ebp
.text:00404A5D                 pop     ebp
.text:00404A5E                 retn
.text:00404A5E sub_4049A0      endp
.text:00404A5E
.text:00404A5E ; ---------------------------------------------------------------------------
.text:00404A5F                 align 10h
.text:00404A60
.text:00404A60 ; =============== S U B R O U T I N E =======================================
.text:00404A60
.text:00404A60 ; Attributes: bp-based frame
.text:00404A60
.text:00404A60 sub_404A60      proc near               ; CODE XREF: sub_404350+5B↑p
.text:00404A60                                         ; sub_404350+6A↑p ...
.text:00404A60
.text:00404A60 var_18          = dword ptr -18h
.text:00404A60 var_14          = dword ptr -14h
.text:00404A60 var_10          = dword ptr -10h
.text:00404A60 var_C           = dword ptr -0Ch
.text:00404A60 arg_4           = dword ptr  0Ch
.text:00404A60
.text:00404A60 ; FUNCTION CHUNK AT .text:00405DD0 SIZE 00000025 BYTES
.text:00404A60
.text:00404A60 ; __unwind { // SEH_404A60
.text:00404A60                 push    ebp
.text:00404A61                 mov     ebp, esp
.text:00404A63                 push    0FFFFFFFFh
.text:00404A65                 push    offset SEH_404A60
.text:00404A6A                 mov     eax, large fs:0
.text:00404A70                 push    eax
.text:00404A71                 sub     esp, 14h
.text:00404A74                 mov     eax, ___security_cookie
.text:00404A79                 xor     eax, ebp
.text:00404A7B                 mov     [ebp+var_10], eax
.text:00404A7E                 push    ebx
.text:00404A7F                 push    eax
.text:00404A80                 lea     eax, [ebp+var_C]
.text:00404A83                 mov     large fs:0, eax
.text:00404A89                 cmp     dword ptr [edi+14h], 10h
.text:00404A8D                 mov     edx, [edi+10h]
.text:00404A90                 mov     ebx, ecx
.text:00404A92                 jb      short loc_404A98
.text:00404A94                 mov     ecx, [edi]
.text:00404A96                 jmp     short loc_404A9A
.text:00404A98 ; ---------------------------------------------------------------------------
.text:00404A98
.text:00404A98 loc_404A98:                             ; CODE XREF: sub_404A60+32↑j
.text:00404A98                 mov     ecx, edi
.text:00404A9A
.text:00404A9A loc_404A9A:                             ; CODE XREF: sub_404A60+36↑j
.text:00404A9A                 mov     eax, [esi+10h]
.text:00404A9D                 cmp     eax, edx
.text:00404A9F                 jb      short loc_404AA3
.text:00404AA1                 mov     eax, edx
.text:00404AA3
.text:00404AA3 loc_404AA3:                             ; CODE XREF: sub_404A60+3F↑j
.text:00404AA3                 cmp     dword ptr [esi+14h], 10h
.text:00404AA7                 jb      short loc_404AAD
.text:00404AA9                 mov     edx, [esi]
.text:00404AAB                 jmp     short loc_404AAF
.text:00404AAD ; ---------------------------------------------------------------------------
.text:00404AAD
.text:00404AAD loc_404AAD:                             ; CODE XREF: sub_404A60+47↑j
.text:00404AAD                 mov     edx, esi
.text:00404AAF
.text:00404AAF loc_404AAF:                             ; CODE XREF: sub_404A60+4B↑j
.text:00404AAF                 call    sub_401050
.text:00404AB4                 test    eax, eax
.text:00404AB6                 jnz     short loc_404AD2
.text:00404AB8                 mov     ecx, [edi+10h]
.text:00404ABB                 mov     eax, [esi+10h]
.text:00404ABE                 cmp     eax, ecx
.text:00404AC0                 jnb     short loc_404AC7
.text:00404AC2                 or      eax, 0FFFFFFFFh
.text:00404AC5                 jmp     short loc_404AD0
.text:00404AC7 ; ---------------------------------------------------------------------------
.text:00404AC7
.text:00404AC7 loc_404AC7:                             ; CODE XREF: sub_404A60+60↑j
.text:00404AC7                 xor     edx, edx
.text:00404AC9                 cmp     eax, ecx
.text:00404ACB                 setnz   dl
.text:00404ACE                 mov     eax, edx
.text:00404AD0
.text:00404AD0 loc_404AD0:                             ; CODE XREF: sub_404A60+65↑j
.text:00404AD0                 test    eax, eax
.text:00404AD2
.text:00404AD2 loc_404AD2:                             ; CODE XREF: sub_404A60+56↑j
.text:00404AD2                 sets    al
.text:00404AD5                 test    al, al
.text:00404AD7                 jz      short loc_404B2D
.text:00404AD9                 cmp     esi, edi
.text:00404ADB                 jz      short loc_404B2D
.text:00404ADD                 mov     edx, [esi+8]
.text:00404AE0                 mov     eax, [esi]
.text:00404AE2                 mov     ecx, [esi+4]
.text:00404AE5                 mov     [ebp+var_18], edx
.text:00404AE8                 mov     edx, [esi+0Ch]
.text:00404AEB                 mov     [ebp+var_14], edx
.text:00404AEE                 mov     edx, [edi]
.text:00404AF0                 mov     [esi], edx
.text:00404AF2                 mov     edx, [edi+4]
.text:00404AF5                 mov     [esi+4], edx
.text:00404AF8                 mov     edx, [edi+8]
.text:00404AFB                 mov     [esi+8], edx
.text:00404AFE                 mov     edx, [edi+0Ch]
.text:00404B01                 mov     [esi+0Ch], edx
.text:00404B04                 mov     [edi], eax
.text:00404B06                 mov     eax, [ebp+var_18]
.text:00404B09                 mov     [edi+4], ecx
.text:00404B0C                 mov     ecx, [ebp+var_14]
.text:00404B0F                 mov     [edi+8], eax
.text:00404B12                 mov     [edi+0Ch], ecx
.text:00404B15                 mov     eax, [esi+10h]
.text:00404B18                 mov     edx, [edi+10h]
.text:00404B1B                 mov     [esi+10h], edx
.text:00404B1E                 mov     [edi+10h], eax
.text:00404B21                 mov     ecx, [edi+14h]
.text:00404B24                 mov     eax, [esi+14h]
.text:00404B27                 mov     [esi+14h], ecx
.text:00404B2A                 mov     [edi+14h], eax
.text:00404B2D
.text:00404B2D loc_404B2D:                             ; CODE XREF: sub_404A60+77↑j
.text:00404B2D                                         ; sub_404A60+7B↑j
.text:00404B2D                 cmp     dword ptr [esi+14h], 10h
.text:00404B31                 mov     edx, [esi+10h]
.text:00404B34                 jb      short loc_404B3A
.text:00404B36                 mov     ecx, [esi]
.text:00404B38                 jmp     short loc_404B3C
.text:00404B3A ; ---------------------------------------------------------------------------
.text:00404B3A
.text:00404B3A loc_404B3A:                             ; CODE XREF: sub_404A60+D4↑j
.text:00404B3A                 mov     ecx, esi
.text:00404B3C
.text:00404B3C loc_404B3C:                             ; CODE XREF: sub_404A60+D8↑j
.text:00404B3C                 mov     eax, [ebx+10h]
.text:00404B3F                 cmp     eax, edx
.text:00404B41                 jb      short loc_404B45
.text:00404B43                 mov     eax, edx
.text:00404B45
.text:00404B45 loc_404B45:                             ; CODE XREF: sub_404A60+E1↑j
.text:00404B45                 cmp     dword ptr [ebx+14h], 10h
.text:00404B49                 jb      short loc_404B4F
.text:00404B4B                 mov     edx, [ebx]
.text:00404B4D                 jmp     short loc_404B51
.text:00404B4F ; ---------------------------------------------------------------------------
.text:00404B4F
.text:00404B4F loc_404B4F:                             ; CODE XREF: sub_404A60+E9↑j
.text:00404B4F                 mov     edx, ebx
.text:00404B51
.text:00404B51 loc_404B51:                             ; CODE XREF: sub_404A60+ED↑j
.text:00404B51                 call    sub_401050
.text:00404B56                 test    eax, eax
.text:00404B58                 jnz     short loc_404B74
.text:00404B5A                 mov     ecx, [esi+10h]
.text:00404B5D                 mov     eax, [ebx+10h]
.text:00404B60                 cmp     eax, ecx
.text:00404B62                 jnb     short loc_404B69
.text:00404B64                 or      eax, 0FFFFFFFFh
.text:00404B67                 jmp     short loc_404B72
.text:00404B69 ; ---------------------------------------------------------------------------
.text:00404B69
.text:00404B69 loc_404B69:                             ; CODE XREF: sub_404A60+102↑j
.text:00404B69                 xor     edx, edx
.text:00404B6B                 cmp     eax, ecx
.text:00404B6D                 setnz   dl
.text:00404B70                 mov     eax, edx
.text:00404B72
.text:00404B72 loc_404B72:                             ; CODE XREF: sub_404A60+107↑j
.text:00404B72                 test    eax, eax
.text:00404B74
.text:00404B74 loc_404B74:                             ; CODE XREF: sub_404A60+F8↑j
.text:00404B74                 sets    al
.text:00404B77                 test    al, al
.text:00404B79                 jz      short loc_404BCF
.text:00404B7B                 cmp     ebx, esi
.text:00404B7D                 jz      short loc_404BCF
.text:00404B7F                 mov     edx, [ebx+8]
.text:00404B82                 mov     eax, [ebx]
.text:00404B84                 mov     ecx, [ebx+4]
.text:00404B87                 mov     [ebp+var_18], edx
.text:00404B8A                 mov     edx, [ebx+0Ch]
.text:00404B8D                 mov     [ebp+var_14], edx
.text:00404B90                 mov     edx, [esi]
.text:00404B92                 mov     [ebx], edx
.text:00404B94                 mov     edx, [esi+4]
.text:00404B97                 mov     [ebx+4], edx
.text:00404B9A                 mov     edx, [esi+8]
.text:00404B9D                 mov     [ebx+8], edx
.text:00404BA0                 mov     edx, [esi+0Ch]
.text:00404BA3                 mov     [ebx+0Ch], edx
.text:00404BA6                 mov     [esi], eax
.text:00404BA8                 mov     eax, [ebp+var_18]
.text:00404BAB                 mov     [esi+4], ecx
.text:00404BAE                 mov     ecx, [ebp+var_14]
.text:00404BB1                 mov     [esi+8], eax
.text:00404BB4                 mov     [esi+0Ch], ecx
.text:00404BB7                 mov     eax, [ebx+10h]
.text:00404BBA                 mov     edx, [esi+10h]
.text:00404BBD                 mov     [ebx+10h], edx
.text:00404BC0                 mov     [esi+10h], eax
.text:00404BC3                 mov     ecx, [esi+14h]
.text:00404BC6                 mov     eax, [ebx+14h]
.text:00404BC9                 mov     [ebx+14h], ecx
.text:00404BCC                 mov     [esi+14h], eax
.text:00404BCF
.text:00404BCF loc_404BCF:                             ; CODE XREF: sub_404A60+119↑j
.text:00404BCF                                         ; sub_404A60+11D↑j
.text:00404BCF                 mov     eax, [edi+10h]
.text:00404BD2                 mov     edx, 10h
.text:00404BD7                 cmp     [edi+14h], edx
.text:00404BDA                 jb      short loc_404BE0
.text:00404BDC                 mov     ecx, [edi]
.text:00404BDE                 jmp     short loc_404BE2
.text:00404BE0 ; ---------------------------------------------------------------------------
.text:00404BE0
.text:00404BE0 loc_404BE0:                             ; CODE XREF: sub_404A60+17A↑j
.text:00404BE0                 mov     ecx, edi
.text:00404BE2
.text:00404BE2 loc_404BE2:                             ; CODE XREF: sub_404A60+17E↑j
.text:00404BE2                 mov     ebx, [esi+10h]
.text:00404BE5                 cmp     ebx, eax
.text:00404BE7                 jnb     short loc_404BEB
.text:00404BE9                 mov     eax, ebx
.text:00404BEB
.text:00404BEB loc_404BEB:                             ; CODE XREF: sub_404A60+187↑j
.text:00404BEB                 cmp     [esi+14h], edx
.text:00404BEE                 jb      short loc_404BF4
.text:00404BF0                 mov     edx, [esi]
.text:00404BF2                 jmp     short loc_404BF6
.text:00404BF4 ; ---------------------------------------------------------------------------
.text:00404BF4
.text:00404BF4 loc_404BF4:                             ; CODE XREF: sub_404A60+18E↑j
.text:00404BF4                 mov     edx, esi
.text:00404BF6
.text:00404BF6 loc_404BF6:                             ; CODE XREF: sub_404A60+192↑j
.text:00404BF6                 call    sub_401050
.text:00404BFB                 test    eax, eax
.text:00404BFD                 jnz     short loc_404C16
.text:00404BFF                 mov     eax, [edi+10h]
.text:00404C02                 cmp     ebx, eax
.text:00404C04                 jnb     short loc_404C0B
.text:00404C06                 or      eax, 0FFFFFFFFh
.text:00404C09                 jmp     short loc_404C14
.text:00404C0B ; ---------------------------------------------------------------------------
.text:00404C0B
.text:00404C0B loc_404C0B:                             ; CODE XREF: sub_404A60+1A4↑j
.text:00404C0B                 xor     edx, edx
.text:00404C0D                 cmp     ebx, eax
.text:00404C0F                 setnz   dl
.text:00404C12                 mov     eax, edx
.text:00404C14
.text:00404C14 loc_404C14:                             ; CODE XREF: sub_404A60+1A9↑j
.text:00404C14                 test    eax, eax
.text:00404C16
.text:00404C16 loc_404C16:                             ; CODE XREF: sub_404A60+19D↑j
.text:00404C16                 sets    al
.text:00404C19                 test    al, al
.text:00404C1B                 jz      short loc_404C6B
.text:00404C1D                 cmp     esi, edi
.text:00404C1F                 jz      short loc_404C6B
.text:00404C21                 mov     ebx, [esi+0Ch]
.text:00404C24                 mov     eax, [esi]
.text:00404C26                 mov     ecx, [esi+4]
.text:00404C29                 mov     edx, [esi+8]
.text:00404C2C                 mov     [ebp+var_14], ebx
.text:00404C2F                 mov     ebx, [edi]
.text:00404C31                 mov     [esi], ebx
.text:00404C33                 mov     ebx, [edi+4]
.text:00404C36                 mov     [esi+4], ebx
.text:00404C39                 mov     ebx, [edi+8]
.text:00404C3C                 mov     [esi+8], ebx
.text:00404C3F                 mov     ebx, [edi+0Ch]
.text:00404C42                 mov     [esi+0Ch], ebx
.text:00404C45                 mov     [edi], eax
.text:00404C47                 mov     eax, [ebp+var_14]
.text:00404C4A                 mov     [edi+4], ecx
.text:00404C4D                 mov     [edi+8], edx
.text:00404C50                 mov     [edi+0Ch], eax
.text:00404C53                 mov     eax, [esi+10h]
.text:00404C56                 mov     ecx, [edi+10h]
.text:00404C59                 mov     [esi+10h], ecx
.text:00404C5C                 mov     [edi+10h], eax
.text:00404C5F                 mov     edx, [edi+14h]
.text:00404C62                 mov     eax, [esi+14h]
.text:00404C65                 mov     [esi+14h], edx
.text:00404C68                 mov     [edi+14h], eax
.text:00404C6B
.text:00404C6B loc_404C6B:                             ; CODE XREF: sub_404A60+1BB↑j
.text:00404C6B                                         ; sub_404A60+1BF↑j
.text:00404C6B                 mov     ecx, [ebp+var_C]
.text:00404C6E                 mov     large fs:0, ecx
.text:00404C75                 pop     ecx
.text:00404C76                 pop     ebx
.text:00404C77                 mov     ecx, [ebp+var_10]
.text:00404C7A                 xor     ecx, ebp
.text:00404C7C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00404C81                 mov     esp, ebp
.text:00404C83                 pop     ebp
.text:00404C84                 retn
.text:00404C84 ; } // starts at 404A60
.text:00404C84 sub_404A60      endp
.text:00404C84
.text:00404C84 ; ---------------------------------------------------------------------------
.text:00404C85                 align 10h
.text:00404C90
.text:00404C90 ; =============== S U B R O U T I N E =======================================
.text:00404C90
.text:00404C90 ; Attributes: bp-based frame
.text:00404C90
.text:00404C90 ; int __cdecl sub_404C90(int, int, int, void *Src)
.text:00404C90 sub_404C90      proc near               ; CODE XREF: sub_404400+E0↑p
.text:00404C90                                         ; sub_4050B0+AF↓p
.text:00404C90
.text:00404C90 var_C           = dword ptr -0Ch
.text:00404C90 var_8           = dword ptr -8
.text:00404C90 var_4           = dword ptr -4
.text:00404C90 arg_0           = dword ptr  8
.text:00404C90 arg_4           = dword ptr  0Ch
.text:00404C90 arg_8           = dword ptr  10h
.text:00404C90 Src             = dword ptr  14h
.text:00404C90
.text:00404C90                 push    ebp
.text:00404C91                 mov     ebp, esp
.text:00404C93                 sub     esp, 0Ch
.text:00404C96                 mov     eax, [ebp+arg_4]
.text:00404C99                 mov     ecx, [ebp+arg_8]
.text:00404C9C                 push    ebx
.text:00404C9D                 lea     ebx, [eax+eax+2]
.text:00404CA1                 push    esi
.text:00404CA2                 push    edi
.text:00404CA3                 mov     [ebp+var_C], eax
.text:00404CA6                 cmp     ebx, ecx
.text:00404CA8                 jge     loc_404E00
.text:00404CAE                 mov     edi, edi
.text:00404CB0
.text:00404CB0 loc_404CB0:                             ; CODE XREF: sub_404C90+162↓j
.text:00404CB0                 mov     ecx, [ebp+arg_0]
.text:00404CB3                 lea     eax, ds:0[ebx*8]
.text:00404CBA                 sub     eax, ebx
.text:00404CBC                 lea     esi, [ecx+eax*4]
.text:00404CBF                 cmp     dword ptr [esi-8], 10h
.text:00404CC3                 mov     ecx, [esi-0Ch]
.text:00404CC6                 lea     eax, [esi-1Ch]
.text:00404CC9                 mov     [ebp+var_8], ecx
.text:00404CCC                 jb      short loc_404CD0
.text:00404CCE                 mov     eax, [eax]
.text:00404CD0
.text:00404CD0 loc_404CD0:                             ; CODE XREF: sub_404C90+3C↑j
.text:00404CD0                 mov     edi, [esi+10h]
.text:00404CD3                 mov     edx, edi
.text:00404CD5                 mov     [ebp+var_4], edi
.text:00404CD8                 cmp     edx, edi
.text:00404CDA                 jnb     short loc_404CDF
.text:00404CDC                 mov     [ebp+var_4], edx
.text:00404CDF
.text:00404CDF loc_404CDF:                             ; CODE XREF: sub_404C90+4A↑j
.text:00404CDF                 mov     edx, edi
.text:00404CE1                 cmp     edi, ecx
.text:00404CE3                 jb      short loc_404CE7
.text:00404CE5                 mov     edx, ecx
.text:00404CE7
.text:00404CE7 loc_404CE7:                             ; CODE XREF: sub_404C90+53↑j
.text:00404CE7                 cmp     dword ptr [esi+14h], 10h
.text:00404CEB                 jb      short loc_404CEF
.text:00404CED                 mov     esi, [esi]
.text:00404CEF
.text:00404CEF loc_404CEF:                             ; CODE XREF: sub_404C90+5B↑j
.text:00404CEF                 mov     ecx, eax
.text:00404CF1                 cmp     edx, 4
.text:00404CF4                 jb      short loc_404D0A
.text:00404CF6
.text:00404CF6 loc_404CF6:                             ; CODE XREF: sub_404C90+78↓j
.text:00404CF6                 mov     eax, [esi]
.text:00404CF8                 cmp     eax, [ecx]
.text:00404CFA                 jnz     short loc_404D0E
.text:00404CFC                 sub     edx, 4
.text:00404CFF                 add     ecx, 4
.text:00404D02                 add     esi, 4
.text:00404D05                 cmp     edx, 4
.text:00404D08                 jnb     short loc_404CF6
.text:00404D0A
.text:00404D0A loc_404D0A:                             ; CODE XREF: sub_404C90+64↑j
.text:00404D0A                 test    edx, edx
.text:00404D0C                 jz      short loc_404D57
.text:00404D0E
.text:00404D0E loc_404D0E:                             ; CODE XREF: sub_404C90+6A↑j
.text:00404D0E                 movzx   edi, byte ptr [ecx]
.text:00404D11                 movzx   eax, byte ptr [esi]
.text:00404D14                 sub     eax, edi
.text:00404D16                 jnz     short loc_404D49
.text:00404D18                 cmp     edx, 1
.text:00404D1B                 jbe     short loc_404D54
.text:00404D1D                 movzx   eax, byte ptr [esi+1]
.text:00404D21                 movzx   edi, byte ptr [ecx+1]
.text:00404D25                 sub     eax, edi
.text:00404D27                 jnz     short loc_404D49
.text:00404D29                 cmp     edx, 2
.text:00404D2C                 jbe     short loc_404D54
.text:00404D2E                 movzx   eax, byte ptr [esi+2]
.text:00404D32                 movzx   edi, byte ptr [ecx+2]
.text:00404D36                 sub     eax, edi
.text:00404D38                 jnz     short loc_404D49
.text:00404D3A                 cmp     edx, 3
.text:00404D3D                 jbe     short loc_404D54
.text:00404D3F                 movzx   eax, byte ptr [esi+3]
.text:00404D43                 movzx   ecx, byte ptr [ecx+3]
.text:00404D47                 sub     eax, ecx
.text:00404D49
.text:00404D49 loc_404D49:                             ; CODE XREF: sub_404C90+86↑j
.text:00404D49                                         ; sub_404C90+97↑j ...
.text:00404D49                 mov     edi, [ebp+var_4]
.text:00404D4C                 sar     eax, 1Fh
.text:00404D4F                 or      eax, 1
.text:00404D52                 jmp     short loc_404D59
.text:00404D54 ; ---------------------------------------------------------------------------
.text:00404D54
.text:00404D54 loc_404D54:                             ; CODE XREF: sub_404C90+8B↑j
.text:00404D54                                         ; sub_404C90+9C↑j ...
.text:00404D54                 mov     edi, [ebp+var_4]
.text:00404D57
.text:00404D57 loc_404D57:                             ; CODE XREF: sub_404C90+7C↑j
.text:00404D57                 xor     eax, eax
.text:00404D59
.text:00404D59 loc_404D59:                             ; CODE XREF: sub_404C90+C2↑j
.text:00404D59                 test    eax, eax
.text:00404D5B                 jnz     short loc_404D6F
.text:00404D5D                 mov     eax, [ebp+var_8]
.text:00404D60                 cmp     edi, eax
.text:00404D62                 jb      short loc_404D71
.text:00404D64                 xor     edx, edx
.text:00404D66                 cmp     edi, eax
.text:00404D68                 setnz   dl
.text:00404D6B                 mov     eax, edx
.text:00404D6D                 test    eax, eax
.text:00404D6F
.text:00404D6F loc_404D6F:                             ; CODE XREF: sub_404C90+CB↑j
.text:00404D6F                 jns     short loc_404D72
.text:00404D71
.text:00404D71 loc_404D71:                             ; CODE XREF: sub_404C90+D2↑j
.text:00404D71                 dec     ebx
.text:00404D72
.text:00404D72 loc_404D72:                             ; CODE XREF: sub_404C90:loc_404D6F↑j
.text:00404D72                 mov     ecx, [ebp+arg_0]
.text:00404D75                 lea     eax, ds:0[ebx*8]
.text:00404D7C                 sub     eax, ebx
.text:00404D7E                 lea     edi, [ecx+eax*4]
.text:00404D81                 mov     eax, [ebp+arg_4]
.text:00404D84                 lea     edx, ds:0[eax*8]
.text:00404D8B                 sub     edx, eax
.text:00404D8D                 mov     eax, ecx
.text:00404D8F                 lea     esi, [eax+edx*4]
.text:00404D92                 cmp     esi, edi
.text:00404D94                 jz      short loc_404DE8
.text:00404D96                 cmp     dword ptr [esi+14h], 10h
.text:00404D9A                 jb      short loc_404DA8
.text:00404D9C                 mov     ecx, [esi]
.text:00404D9E                 push    ecx
.text:00404D9F                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00404DA5                 add     esp, 4
.text:00404DA8
.text:00404DA8 loc_404DA8:                             ; CODE XREF: sub_404C90+10A↑j
.text:00404DA8                 xor     eax, eax
.text:00404DAA                 mov     dword ptr [esi+14h], 0Fh
.text:00404DB1                 mov     [esi+10h], eax
.text:00404DB4                 mov     [esi], al
.text:00404DB6                 cmp     dword ptr [edi+14h], 10h
.text:00404DBA                 jnb     short loc_404DD0
.text:00404DBC                 mov     edx, [edi+10h]
.text:00404DBF                 inc     edx
.text:00404DC0                 push    edx             ; Size
.text:00404DC1                 push    edi             ; Src
.text:00404DC2                 push    esi             ; Dst
.text:00404DC3                 call    ds:memmove
.text:00404DC9                 add     esp, 0Ch
.text:00404DCC                 xor     eax, eax
.text:00404DCE                 jmp     short loc_404DD6
.text:00404DD0 ; ---------------------------------------------------------------------------
.text:00404DD0
.text:00404DD0 loc_404DD0:                             ; CODE XREF: sub_404C90+12A↑j
.text:00404DD0                 mov     ecx, [edi]
.text:00404DD2                 mov     [esi], ecx
.text:00404DD4                 mov     [edi], eax
.text:00404DD6
.text:00404DD6 loc_404DD6:                             ; CODE XREF: sub_404C90+13E↑j
.text:00404DD6                 mov     edx, [edi+10h]
.text:00404DD9                 mov     [esi+10h], edx
.text:00404DDC                 mov     ecx, [edi+14h]
.text:00404DDF                 mov     [esi+14h], ecx
.text:00404DE2                 mov     [edi+10h], eax
.text:00404DE5                 mov     [edi+14h], eax
.text:00404DE8
.text:00404DE8 loc_404DE8:                             ; CODE XREF: sub_404C90+104↑j
.text:00404DE8                 mov     [ebp+arg_4], ebx
.text:00404DEB                 lea     ebx, [ebx+ebx+2]
.text:00404DEF                 cmp     ebx, [ebp+arg_8]
.text:00404DF2                 jl      loc_404CB0
.text:00404DF8                 mov     ecx, [ebp+arg_8]
.text:00404DFB                 mov     eax, [ebp+arg_4]
.text:00404DFE                 cmp     ebx, ecx
.text:00404E00
.text:00404E00 loc_404E00:                             ; CODE XREF: sub_404C90+18↑j
.text:00404E00                 jnz     loc_404E82
.text:00404E06                 mov     esi, [ebp+arg_0]
.text:00404E09                 lea     edx, ds:0[ecx*8]
.text:00404E10                 sub     edx, ecx
.text:00404E12                 lea     edi, [esi+edx*4-1Ch]
.text:00404E16                 lea     edx, ds:0[eax*8]
.text:00404E1D                 sub     edx, eax
.text:00404E1F                 lea     esi, [esi+edx*4]
.text:00404E22                 cmp     esi, edi
.text:00404E24                 jz      short loc_404E7C
.text:00404E26                 cmp     dword ptr [esi+14h], 10h
.text:00404E2A                 jb      short loc_404E3B
.text:00404E2C                 mov     eax, [esi]
.text:00404E2E                 push    eax
.text:00404E2F                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00404E35                 mov     ecx, [ebp+arg_8]
.text:00404E38                 add     esp, 4
.text:00404E3B
.text:00404E3B loc_404E3B:                             ; CODE XREF: sub_404C90+19A↑j
.text:00404E3B                 xor     ebx, ebx
.text:00404E3D                 mov     dword ptr [esi+14h], 0Fh
.text:00404E44                 mov     [esi+10h], ebx
.text:00404E47                 mov     [esi], bl
.text:00404E49                 cmp     dword ptr [edi+14h], 10h
.text:00404E4D                 jnb     short loc_404E64
.text:00404E4F                 mov     ecx, [edi+10h]
.text:00404E52                 inc     ecx
.text:00404E53                 push    ecx             ; Size
.text:00404E54                 push    edi             ; Src
.text:00404E55                 push    esi             ; Dst
.text:00404E56                 call    ds:memmove
.text:00404E5C                 mov     ecx, [ebp+arg_8]
.text:00404E5F                 add     esp, 0Ch
.text:00404E62                 jmp     short loc_404E6A
.text:00404E64 ; ---------------------------------------------------------------------------
.text:00404E64
.text:00404E64 loc_404E64:                             ; CODE XREF: sub_404C90+1BD↑j
.text:00404E64                 mov     edx, [edi]
.text:00404E66                 mov     [esi], edx
.text:00404E68                 mov     [edi], ebx
.text:00404E6A
.text:00404E6A loc_404E6A:                             ; CODE XREF: sub_404C90+1D2↑j
.text:00404E6A                 mov     eax, [edi+10h]
.text:00404E6D                 mov     [esi+10h], eax
.text:00404E70                 mov     edx, [edi+14h]
.text:00404E73                 mov     [esi+14h], edx
.text:00404E76                 mov     [edi+10h], ebx
.text:00404E79                 mov     [edi+14h], ebx
.text:00404E7C
.text:00404E7C loc_404E7C:                             ; CODE XREF: sub_404C90+194↑j
.text:00404E7C                 dec     ecx
.text:00404E7D                 mov     [ebp+arg_4], ecx
.text:00404E80                 mov     eax, ecx
.text:00404E82
.text:00404E82 loc_404E82:                             ; CODE XREF: sub_404C90:loc_404E00↑j
.text:00404E82                 mov     ecx, [ebp+Src]
.text:00404E85                 mov     edx, [ebp+var_C]
.text:00404E88                 push    ecx             ; Src
.text:00404E89                 push    edx             ; int
.text:00404E8A                 push    eax             ; int
.text:00404E8B                 mov     eax, [ebp+arg_0]
.text:00404E8E                 push    eax             ; int
.text:00404E8F                 call    sub_404EA0
.text:00404E94                 add     esp, 10h
.text:00404E97                 pop     edi
.text:00404E98                 pop     esi
.text:00404E99                 pop     ebx
.text:00404E9A                 mov     esp, ebp
.text:00404E9C                 pop     ebp
.text:00404E9D                 retn
.text:00404E9D sub_404C90      endp
.text:00404E9D
.text:00404E9D ; ---------------------------------------------------------------------------
.text:00404E9E                 align 10h
.text:00404EA0
.text:00404EA0 ; =============== S U B R O U T I N E =======================================
.text:00404EA0
.text:00404EA0 ; Attributes: bp-based frame
.text:00404EA0
.text:00404EA0 ; int __cdecl sub_404EA0(int, int, int, void *Src)
.text:00404EA0 sub_404EA0      proc near               ; CODE XREF: sub_404C90+1FF↑p
.text:00404EA0
.text:00404EA0 var_8           = dword ptr -8
.text:00404EA0 var_4           = dword ptr -4
.text:00404EA0 arg_0           = dword ptr  8
.text:00404EA0 arg_4           = dword ptr  0Ch
.text:00404EA0 arg_8           = dword ptr  10h
.text:00404EA0 Src             = dword ptr  14h
.text:00404EA0
.text:00404EA0                 push    ebp
.text:00404EA1                 mov     ebp, esp
.text:00404EA3                 sub     esp, 8
.text:00404EA6                 push    esi
.text:00404EA7                 mov     esi, [ebp+arg_4]
.text:00404EAA                 lea     eax, [esi-1]
.text:00404EAD                 cdq
.text:00404EAE                 sub     eax, edx
.text:00404EB0                 sar     eax, 1
.text:00404EB2                 push    edi
.text:00404EB3                 mov     [ebp+var_8], eax
.text:00404EB6                 cmp     [ebp+arg_8], esi
.text:00404EB9                 jge     loc_40507C
.text:00404EBF                 push    ebx
.text:00404EC0                 jmp     short loc_404EC5
.text:00404EC2 ; ---------------------------------------------------------------------------
.text:00404EC2
.text:00404EC2 loc_404EC2:                             ; CODE XREF: sub_404EA0+178↓j
.text:00404EC2                 mov     eax, [ebp+var_8]
.text:00404EC5
.text:00404EC5 loc_404EC5:                             ; CODE XREF: sub_404EA0+20↑j
.text:00404EC5                 mov     edx, [ebp+arg_0]
.text:00404EC8                 lea     ecx, ds:0[eax*8]
.text:00404ECF                 sub     ecx, eax
.text:00404ED1                 mov     eax, [ebp+Src]
.text:00404ED4                 mov     esi, 10h
.text:00404ED9                 lea     edi, [edx+ecx*4]
.text:00404EDC                 mov     edx, [eax+10h]
.text:00404EDF                 cmp     [eax+14h], esi
.text:00404EE2                 jb      short loc_404EE8
.text:00404EE4                 mov     ecx, [eax]
.text:00404EE6                 jmp     short loc_404EEA
.text:00404EE8 ; ---------------------------------------------------------------------------
.text:00404EE8
.text:00404EE8 loc_404EE8:                             ; CODE XREF: sub_404EA0+42↑j
.text:00404EE8                 mov     ecx, eax
.text:00404EEA
.text:00404EEA loc_404EEA:                             ; CODE XREF: sub_404EA0+46↑j
.text:00404EEA                 mov     ebx, [edi+10h]
.text:00404EED                 mov     eax, ebx
.text:00404EEF                 mov     [ebp+var_4], ebx
.text:00404EF2                 cmp     eax, ebx
.text:00404EF4                 jnb     short loc_404EF9
.text:00404EF6                 mov     [ebp+var_4], eax
.text:00404EF9
.text:00404EF9 loc_404EF9:                             ; CODE XREF: sub_404EA0+54↑j
.text:00404EF9                 cmp     ebx, edx
.text:00404EFB                 jnb     short loc_404EFF
.text:00404EFD                 mov     edx, ebx
.text:00404EFF
.text:00404EFF loc_404EFF:                             ; CODE XREF: sub_404EA0+5B↑j
.text:00404EFF                 cmp     [edi+14h], esi
.text:00404F02                 jb      short loc_404F08
.text:00404F04                 mov     esi, [edi]
.text:00404F06                 jmp     short loc_404F0A
.text:00404F08 ; ---------------------------------------------------------------------------
.text:00404F08
.text:00404F08 loc_404F08:                             ; CODE XREF: sub_404EA0+62↑j
.text:00404F08                 mov     esi, edi
.text:00404F0A
.text:00404F0A loc_404F0A:                             ; CODE XREF: sub_404EA0+66↑j
.text:00404F0A                 cmp     edx, 4
.text:00404F0D                 jb      short loc_404F24
.text:00404F0F                 nop
.text:00404F10
.text:00404F10 loc_404F10:                             ; CODE XREF: sub_404EA0+82↓j
.text:00404F10                 mov     eax, [esi]
.text:00404F12                 cmp     eax, [ecx]
.text:00404F14                 jnz     short loc_404F28
.text:00404F16                 sub     edx, 4
.text:00404F19                 add     ecx, 4
.text:00404F1C                 add     esi, 4
.text:00404F1F                 cmp     edx, 4
.text:00404F22                 jnb     short loc_404F10
.text:00404F24
.text:00404F24 loc_404F24:                             ; CODE XREF: sub_404EA0+6D↑j
.text:00404F24                 test    edx, edx
.text:00404F26                 jz      short loc_404F71
.text:00404F28
.text:00404F28 loc_404F28:                             ; CODE XREF: sub_404EA0+74↑j
.text:00404F28                 movzx   eax, byte ptr [esi]
.text:00404F2B                 movzx   ebx, byte ptr [ecx]
.text:00404F2E                 sub     eax, ebx
.text:00404F30                 jnz     short loc_404F63
.text:00404F32                 cmp     edx, 1
.text:00404F35                 jbe     short loc_404F6E
.text:00404F37                 movzx   eax, byte ptr [esi+1]
.text:00404F3B                 movzx   ebx, byte ptr [ecx+1]
.text:00404F3F                 sub     eax, ebx
.text:00404F41                 jnz     short loc_404F63
.text:00404F43                 cmp     edx, 2
.text:00404F46                 jbe     short loc_404F6E
.text:00404F48                 movzx   eax, byte ptr [esi+2]
.text:00404F4C                 movzx   ebx, byte ptr [ecx+2]
.text:00404F50                 sub     eax, ebx
.text:00404F52                 jnz     short loc_404F63
.text:00404F54                 cmp     edx, 3
.text:00404F57                 jbe     short loc_404F6E
.text:00404F59                 movzx   eax, byte ptr [esi+3]
.text:00404F5D                 movzx   ecx, byte ptr [ecx+3]
.text:00404F61                 sub     eax, ecx
.text:00404F63
.text:00404F63 loc_404F63:                             ; CODE XREF: sub_404EA0+90↑j
.text:00404F63                                         ; sub_404EA0+A1↑j ...
.text:00404F63                 mov     ebx, [ebp+var_4]
.text:00404F66                 sar     eax, 1Fh
.text:00404F69                 or      eax, 1
.text:00404F6C                 jmp     short loc_404F73
.text:00404F6E ; ---------------------------------------------------------------------------
.text:00404F6E
.text:00404F6E loc_404F6E:                             ; CODE XREF: sub_404EA0+95↑j
.text:00404F6E                                         ; sub_404EA0+A6↑j ...
.text:00404F6E                 mov     ebx, [ebp+var_4]
.text:00404F71
.text:00404F71 loc_404F71:                             ; CODE XREF: sub_404EA0+86↑j
.text:00404F71                 xor     eax, eax
.text:00404F73
.text:00404F73 loc_404F73:                             ; CODE XREF: sub_404EA0+CC↑j
.text:00404F73                 mov     ecx, [ebp+Src]
.text:00404F76                 test    eax, eax
.text:00404F78                 jnz     short loc_404F8C
.text:00404F7A                 mov     eax, [ecx+10h]
.text:00404F7D                 cmp     ebx, eax
.text:00404F7F                 jb      short loc_404F92
.text:00404F81                 xor     edx, edx
.text:00404F83                 cmp     ebx, eax
.text:00404F85                 setnz   dl
.text:00404F88                 mov     eax, edx
.text:00404F8A                 test    eax, eax
.text:00404F8C
.text:00404F8C loc_404F8C:                             ; CODE XREF: sub_404EA0+D8↑j
.text:00404F8C                 jns     loc_405021
.text:00404F92
.text:00404F92 loc_404F92:                             ; CODE XREF: sub_404EA0+DF↑j
.text:00404F92                 mov     eax, [ebp+arg_4]
.text:00404F95                 mov     edx, [ebp+arg_0]
.text:00404F98                 lea     ecx, ds:0[eax*8]
.text:00404F9F                 sub     ecx, eax
.text:00404FA1                 lea     esi, [edx+ecx*4]
.text:00404FA4                 cmp     esi, edi
.text:00404FA6                 jz      short loc_405004
.text:00404FA8                 mov     ebx, 10h
.text:00404FAD                 cmp     [esi+14h], ebx
.text:00404FB0                 jb      short loc_404FBE
.text:00404FB2                 mov     eax, [esi]
.text:00404FB4                 push    eax
.text:00404FB5                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00404FBB                 add     esp, 4
.text:00404FBE
.text:00404FBE loc_404FBE:                             ; CODE XREF: sub_404EA0+110↑j
.text:00404FBE                 mov     dword ptr [esi+14h], 0Fh
.text:00404FC5                 mov     dword ptr [esi+10h], 0
.text:00404FCC                 mov     byte ptr [esi], 0
.text:00404FCF                 cmp     [edi+14h], ebx
.text:00404FD2                 jnb     short loc_404FE6
.text:00404FD4                 mov     ecx, [edi+10h]
.text:00404FD7                 inc     ecx
.text:00404FD8                 push    ecx             ; Size
.text:00404FD9                 push    edi             ; Src
.text:00404FDA                 push    esi             ; Dst
.text:00404FDB                 call    ds:memmove
.text:00404FE1                 add     esp, 0Ch
.text:00404FE4                 jmp     short loc_404FF0
.text:00404FE6 ; ---------------------------------------------------------------------------
.text:00404FE6
.text:00404FE6 loc_404FE6:                             ; CODE XREF: sub_404EA0+132↑j
.text:00404FE6                 mov     edx, [edi]
.text:00404FE8                 mov     [esi], edx
.text:00404FEA                 mov     dword ptr [edi], 0
.text:00404FF0
.text:00404FF0 loc_404FF0:                             ; CODE XREF: sub_404EA0+144↑j
.text:00404FF0                 mov     eax, [edi+10h]
.text:00404FF3                 mov     [esi+10h], eax
.text:00404FF6                 mov     ecx, [edi+14h]
.text:00404FF9                 xor     eax, eax
.text:00404FFB                 mov     [esi+14h], ecx
.text:00404FFE                 mov     [edi+10h], eax
.text:00405001                 mov     [edi+14h], eax
.text:00405004
.text:00405004 loc_405004:                             ; CODE XREF: sub_404EA0+106↑j
.text:00405004                 mov     ecx, [ebp+var_8]
.text:00405007                 lea     eax, [ecx-1]
.text:0040500A                 cdq
.text:0040500B                 sub     eax, edx
.text:0040500D                 sar     eax, 1
.text:0040500F                 mov     [ebp+arg_4], ecx
.text:00405012                 mov     [ebp+var_8], eax
.text:00405015                 cmp     [ebp+arg_8], ecx
.text:00405018                 jl      loc_404EC2
.text:0040501E                 mov     ecx, [ebp+Src]
.text:00405021
.text:00405021 loc_405021:                             ; CODE XREF: sub_404EA0:loc_404F8C↑j
.text:00405021                 mov     esi, [ebp+arg_4]
.text:00405024                 pop     ebx
.text:00405025
.text:00405025 loc_405025:                             ; CODE XREF: sub_404EA0+1DF↓j
.text:00405025                 mov     eax, [ebp+arg_0]
.text:00405028                 lea     edx, ds:0[esi*8]
.text:0040502F                 sub     edx, esi
.text:00405031                 lea     esi, [eax+edx*4]
.text:00405034                 cmp     esi, ecx
.text:00405036                 jz      short loc_40509F
.text:00405038                 mov     edi, 10h
.text:0040503D                 cmp     [esi+14h], edi
.text:00405040                 jb      short loc_405051
.text:00405042                 mov     ecx, [esi]
.text:00405044                 push    ecx
.text:00405045                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040504B                 mov     ecx, [ebp+Src]
.text:0040504E                 add     esp, 4
.text:00405051
.text:00405051 loc_405051:                             ; CODE XREF: sub_404EA0+1A0↑j
.text:00405051                 mov     dword ptr [esi+14h], 0Fh
.text:00405058                 mov     dword ptr [esi+10h], 0
.text:0040505F                 mov     byte ptr [esi], 0
.text:00405062                 cmp     [ecx+14h], edi
.text:00405065                 jnb     short loc_405081
.text:00405067                 mov     edx, [ecx+10h]
.text:0040506A                 inc     edx
.text:0040506B                 push    edx             ; Size
.text:0040506C                 push    ecx             ; Src
.text:0040506D                 push    esi             ; Dst
.text:0040506E                 call    ds:memmove
.text:00405074                 mov     ecx, [ebp+Src]
.text:00405077                 add     esp, 0Ch
.text:0040507A                 jmp     short loc_40508B
.text:0040507C ; ---------------------------------------------------------------------------
.text:0040507C
.text:0040507C loc_40507C:                             ; CODE XREF: sub_404EA0+19↑j
.text:0040507C                 mov     ecx, [ebp+Src]
.text:0040507F                 jmp     short loc_405025
.text:00405081 ; ---------------------------------------------------------------------------
.text:00405081
.text:00405081 loc_405081:                             ; CODE XREF: sub_404EA0+1C5↑j
.text:00405081                 mov     eax, [ecx]
.text:00405083                 mov     [esi], eax
.text:00405085                 mov     dword ptr [ecx], 0
.text:0040508B
.text:0040508B loc_40508B:                             ; CODE XREF: sub_404EA0+1DA↑j
.text:0040508B                 mov     edx, [ecx+10h]
.text:0040508E                 mov     [esi+10h], edx
.text:00405091                 mov     eax, [ecx+14h]
.text:00405094                 mov     [esi+14h], eax
.text:00405097                 xor     eax, eax
.text:00405099                 mov     [ecx+10h], eax
.text:0040509C                 mov     [ecx+14h], eax
.text:0040509F
.text:0040509F loc_40509F:                             ; CODE XREF: sub_404EA0+196↑j
.text:0040509F                 pop     edi
.text:004050A0                 pop     esi
.text:004050A1                 mov     esp, ebp
.text:004050A3                 pop     ebp
.text:004050A4                 retn
.text:004050A4 sub_404EA0      endp
.text:004050A4
.text:004050A4 ; ---------------------------------------------------------------------------
.text:004050A5                 align 10h
.text:004050B0
.text:004050B0 ; =============== S U B R O U T I N E =======================================
.text:004050B0
.text:004050B0 ; Attributes: bp-based frame
.text:004050B0
.text:004050B0 ; int __usercall sub_4050B0@<eax>(int@<ecx>, int, int)
.text:004050B0 sub_4050B0      proc near               ; CODE XREF: sub_404530+24↑p
.text:004050B0
.text:004050B0 Dst             = dword ptr -2Ch
.text:004050B0 var_1C          = dword ptr -1Ch
.text:004050B0 var_18          = dword ptr -18h
.text:004050B0 var_10          = dword ptr -10h
.text:004050B0 var_C           = dword ptr -0Ch
.text:004050B0 var_4           = dword ptr -4
.text:004050B0 arg_4           = dword ptr  0Ch
.text:004050B0
.text:004050B0 ; FUNCTION CHUNK AT .text:00402020 SIZE 00000024 BYTES
.text:004050B0 ; FUNCTION CHUNK AT .text:00405DA0 SIZE 0000002D BYTES
.text:004050B0
.text:004050B0 ; __unwind { // SEH_4050B0
.text:004050B0                 push    ebp
.text:004050B1                 mov     ebp, esp
.text:004050B3                 push    0FFFFFFFFh
.text:004050B5                 push    offset SEH_4050B0
.text:004050BA                 mov     eax, large fs:0
.text:004050C0                 push    eax
.text:004050C1                 sub     esp, 20h
.text:004050C4                 mov     eax, ___security_cookie
.text:004050C9                 xor     eax, ebp
.text:004050CB                 mov     [ebp+var_10], eax
.text:004050CE                 push    ebx
.text:004050CF                 push    esi
.text:004050D0                 push    edi
.text:004050D1                 push    eax
.text:004050D2                 lea     eax, [ebp+var_C]
.text:004050D5                 mov     large fs:0, eax
.text:004050DB                 mov     ebx, edx
.text:004050DD                 xor     eax, eax
.text:004050DF                 mov     edi, ecx
.text:004050E1                 lea     esi, [ebx-1Ch]
.text:004050E4                 lea     edx, [ebp+Dst]
.text:004050E7                 mov     ecx, 0Fh
.text:004050EC                 mov     [ebp+var_18], ecx
.text:004050EF                 mov     [ebp+var_1C], eax
.text:004050F2                 mov     byte ptr [ebp+Dst], al
.text:004050F5                 cmp     edx, esi
.text:004050F7                 jz      short loc_405137
.text:004050F9                 cmp     dword ptr [esi+14h], 10h
.text:004050FD                 mov     [ebp+var_18], ecx
.text:00405100                 mov     [ebp+var_1C], eax
.text:00405103                 mov     byte ptr [ebp+Dst], al
.text:00405106                 jnb     short loc_40511E
.text:00405108                 mov     eax, [esi+10h]
.text:0040510B                 inc     eax
.text:0040510C                 push    eax             ; Size
.text:0040510D                 mov     eax, edx
.text:0040510F                 push    esi             ; Src
.text:00405110                 push    eax             ; Dst
.text:00405111                 call    ds:memmove
.text:00405117                 add     esp, 0Ch
.text:0040511A                 xor     eax, eax
.text:0040511C                 jmp     short loc_405125
.text:0040511E ; ---------------------------------------------------------------------------
.text:0040511E
.text:0040511E loc_40511E:                             ; CODE XREF: sub_4050B0+56↑j
.text:0040511E                 mov     ecx, [esi]
.text:00405120                 mov     [ebp+Dst], ecx
.text:00405123                 mov     [esi], eax
.text:00405125
.text:00405125 loc_405125:                             ; CODE XREF: sub_4050B0+6C↑j
.text:00405125                 mov     edx, [esi+10h]
.text:00405128                 mov     ecx, [esi+14h]
.text:0040512B                 mov     [ebp+var_1C], edx
.text:0040512E                 mov     [ebp+var_18], ecx
.text:00405131                 mov     [esi+10h], eax
.text:00405134                 mov     [esi+14h], eax
.text:00405137
.text:00405137 loc_405137:                             ; CODE XREF: sub_4050B0+47↑j
.text:00405137 ;   try {
.text:00405137                 mov     [ebp+var_4], eax
.text:0040513A                 call    sub_402160
.text:0040513F                 lea     edx, [ebp+Dst]
.text:00405142                 push    edx             ; Src
.text:00405143                 sub     ebx, edi
.text:00405145                 sub     ebx, 1Ch
.text:00405148                 mov     eax, 92492493h
.text:0040514D                 imul    ebx
.text:0040514F                 add     edx, ebx
.text:00405151                 sar     edx, 4
.text:00405154                 mov     eax, edx
.text:00405156                 shr     eax, 1Fh
.text:00405159                 add     eax, edx
.text:0040515B                 push    eax             ; int
.text:0040515C                 push    0               ; int
.text:0040515E                 push    edi             ; int
.text:0040515F                 call    sub_404C90
.text:00405164                 add     esp, 10h
.text:00405167                 cmp     [ebp+var_18], 10h
.text:0040516B                 jb      short loc_40517A
.text:0040516D                 mov     ecx, [ebp+Dst]
.text:00405170                 push    ecx
.text:00405171                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00405177                 add     esp, 4
.text:0040517A
.text:0040517A loc_40517A:                             ; CODE XREF: sub_4050B0+BB↑j
.text:0040517A                 mov     ecx, [ebp+var_C]
.text:0040517D                 mov     large fs:0, ecx
.text:00405184                 pop     ecx
.text:00405185                 pop     edi
.text:00405186                 pop     esi
.text:00405187                 pop     ebx
.text:00405188                 mov     ecx, [ebp+var_10]
.text:0040518B                 xor     ecx, ebp
.text:0040518D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405192                 mov     esp, ebp
.text:00405194                 pop     ebp
.text:00405195                 retn
.text:00405195 ;   } // starts at 405137
.text:00405195 ; } // starts at 4050B0
.text:00405195 sub_4050B0      endp
.text:00405195
.text:00405195 ; ---------------------------------------------------------------------------
.text:00405196                 align 10h
.text:004051A0
.text:004051A0 ; =============== S U B R O U T I N E =======================================
.text:004051A0
.text:004051A0 ; Attributes: bp-based frame
.text:004051A0
.text:004051A0 sub_4051A0      proc near               ; CODE XREF: sub_404580+165↑p
.text:004051A0
.text:004051A0 arg_0           = dword ptr  8
.text:004051A0
.text:004051A0                 push    ebp
.text:004051A1                 mov     ebp, esp
.text:004051A3                 push    esi
.text:004051A4                 mov     esi, ecx
.text:004051A6                 cmp     [ebp+arg_0], eax
.text:004051A9                 jz      short loc_405218
.text:004051AB                 push    ebx
.text:004051AC                 push    edi
.text:004051AD                 lea     edi, [eax+14h]
.text:004051B0
.text:004051B0 loc_4051B0:                             ; CODE XREF: sub_4051A0+74↓j
.text:004051B0                 sub     edi, 1Ch
.text:004051B3                 sub     esi, 1Ch
.text:004051B6                 lea     ebx, [edi-14h]
.text:004051B9                 cmp     esi, ebx
.text:004051BB                 jz      short loc_405211
.text:004051BD                 cmp     dword ptr [esi+14h], 10h
.text:004051C1                 jb      short loc_4051CF
.text:004051C3                 mov     eax, [esi]
.text:004051C5                 push    eax
.text:004051C6                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004051CC                 add     esp, 4
.text:004051CF
.text:004051CF loc_4051CF:                             ; CODE XREF: sub_4051A0+21↑j
.text:004051CF                 xor     eax, eax
.text:004051D1                 mov     dword ptr [esi+14h], 0Fh
.text:004051D8                 mov     [esi+10h], eax
.text:004051DB                 mov     [esi], al
.text:004051DD                 cmp     dword ptr [edi], 10h
.text:004051E0                 jnb     short loc_4051F9
.text:004051E2                 mov     ecx, [edi-4]
.text:004051E5                 inc     ecx
.text:004051E6                 push    ecx             ; Size
.text:004051E7                 lea     edx, [edi-14h]
.text:004051EA                 push    edx             ; Src
.text:004051EB                 push    esi             ; Dst
.text:004051EC                 call    ds:memmove
.text:004051F2                 add     esp, 0Ch
.text:004051F5                 xor     eax, eax
.text:004051F7                 jmp     short loc_405201
.text:004051F9 ; ---------------------------------------------------------------------------
.text:004051F9
.text:004051F9 loc_4051F9:                             ; CODE XREF: sub_4051A0+40↑j
.text:004051F9                 mov     ecx, [edi-14h]
.text:004051FC                 mov     [esi], ecx
.text:004051FE                 mov     [edi-14h], eax
.text:00405201
.text:00405201 loc_405201:                             ; CODE XREF: sub_4051A0+57↑j
.text:00405201                 mov     edx, [edi-4]
.text:00405204                 mov     [esi+10h], edx
.text:00405207                 mov     ecx, [edi]
.text:00405209                 mov     [esi+14h], ecx
.text:0040520C                 mov     [edi-4], eax
.text:0040520F                 mov     [edi], eax
.text:00405211
.text:00405211 loc_405211:                             ; CODE XREF: sub_4051A0+1B↑j
.text:00405211                 cmp     ebx, [ebp+arg_0]
.text:00405214                 jnz     short loc_4051B0
.text:00405216                 pop     edi
.text:00405217                 pop     ebx
.text:00405218
.text:00405218 loc_405218:                             ; CODE XREF: sub_4051A0+9↑j
.text:00405218                 mov     eax, esi
.text:0040521A                 pop     esi
.text:0040521B                 pop     ebp
.text:0040521C                 retn
.text:0040521C sub_4051A0      endp
.text:0040521C
.text:0040521D ; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040522C ; [00000006 BYTES: COLLAPSED FUNCTION std::exception::what(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405232 ; [00000006 BYTES: COLLAPSED FUNCTION std::exception::exception(std::exception const &). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405238 ; [000000A1 BYTES: COLLAPSED FUNCTION __onexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004052D9 ; [00000017 BYTES: COLLAPSED FUNCTION _atexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004052F0 ; [00000006 BYTES: COLLAPSED FUNCTION operator delete(void *). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004052F6 ; [0000004C BYTES: COLLAPSED FUNCTION type_info::`vector deleting destructor'(uint). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405342 ; [0000004B BYTES: COLLAPSED FUNCTION _pre_cpp_init. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040538D ; [00000189 BYTES: COLLAPSED FUNCTION ___tmainCRTStartup. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405516 ; [000000BA BYTES: COLLAPSED FUNCTION _pre_c_init. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004055D0 ; [0000000A BYTES: COLLAPSED FUNCTION start. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004055DA ; [00000106 BYTES: COLLAPSED FUNCTION ___report_gsfailure. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004056E0 ; [00000006 BYTES: COLLAPSED FUNCTION _unlock. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004056E6 ; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004056EC ; [00000006 BYTES: COLLAPSED FUNCTION _lock. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004056F2                 align 10h
.text:00405700 ; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405745 ; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405759 ; [00000025 BYTES: COLLAPSED FUNCTION SEH_405980. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040577E ; [0000005E BYTES: COLLAPSED FUNCTION __ArrayUnwind(void *,uint,int,void (*)(void *)). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004057DC ; [00000063 BYTES: COLLAPSED FUNCTION `eh vector destructor iterator'(void *,uint,int,void (*)(void *)). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040583F ; [00000042 BYTES: COLLAPSED FUNCTION __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405881
.text:00405881 ; =============== S U B R O U T I N E =======================================
.text:00405881
.text:00405881
.text:00405881 sub_405881      proc near               ; DATA XREF: .rdata:00406140↓o
.text:00405881                 push    offset ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; lpTopLevelExceptionFilter
.text:00405886                 call    ds:SetUnhandledExceptionFilter
.text:0040588C                 xor     eax, eax
.text:0040588E                 retn
.text:0040588E sub_405881      endp
.text:0040588E
.text:0040588E ; ---------------------------------------------------------------------------
.text:0040588F                 align 10h
.text:00405890 ; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405896
.text:00405896 ; =============== S U B R O U T I N E =======================================
.text:00405896
.text:00405896
.text:00405896 sub_405896      proc near               ; CODE XREF: _pre_c_init+81↑p
.text:00405896                 mov     edi, edi
.text:00405898                 push    esi
.text:00405899                 mov     eax, offset unk_406424
.text:0040589E                 mov     esi, offset unk_406424
.text:004058A3                 push    edi
.text:004058A4                 mov     edi, eax
.text:004058A6                 cmp     eax, esi
.text:004058A8                 jnb     short loc_4058B9
.text:004058AA
.text:004058AA loc_4058AA:                             ; CODE XREF: sub_405896+21↓j
.text:004058AA                 mov     eax, [edi]
.text:004058AC                 test    eax, eax
.text:004058AE                 jz      short loc_4058B2
.text:004058B0                 call    eax
.text:004058B2
.text:004058B2 loc_4058B2:                             ; CODE XREF: sub_405896+18↑j
.text:004058B2                 add     edi, 4
.text:004058B5                 cmp     edi, esi
.text:004058B7                 jb      short loc_4058AA
.text:004058B9
.text:004058B9 loc_4058B9:                             ; CODE XREF: sub_405896+12↑j
.text:004058B9                 pop     edi
.text:004058BA                 pop     esi
.text:004058BB                 retn
.text:004058BB sub_405896      endp
.text:004058BB
.text:004058BC
.text:004058BC ; =============== S U B R O U T I N E =======================================
.text:004058BC
.text:004058BC
.text:004058BC ; void __cdecl sub_4058BC()
.text:004058BC sub_4058BC      proc near               ; DATA XREF: _pre_cpp_init↑o
.text:004058BC                 mov     edi, edi
.text:004058BE                 push    esi
.text:004058BF                 mov     eax, offset unk_40642C
.text:004058C4                 mov     esi, offset unk_40642C
.text:004058C9                 push    edi
.text:004058CA                 mov     edi, eax
.text:004058CC                 cmp     eax, esi
.text:004058CE                 jnb     short loc_4058DF
.text:004058D0
.text:004058D0 loc_4058D0:                             ; CODE XREF: sub_4058BC+21↓j
.text:004058D0                 mov     eax, [edi]
.text:004058D2                 test    eax, eax
.text:004058D4                 jz      short loc_4058D8
.text:004058D6                 call    eax
.text:004058D8
.text:004058D8 loc_4058D8:                             ; CODE XREF: sub_4058BC+18↑j
.text:004058D8                 add     edi, 4
.text:004058DB                 cmp     edi, esi
.text:004058DD                 jb      short loc_4058D0
.text:004058DF
.text:004058DF loc_4058DF:                             ; CODE XREF: sub_4058BC+12↑j
.text:004058DF                 pop     edi
.text:004058E0                 pop     esi
.text:004058E1                 retn
.text:004058E1 sub_4058BC      endp
.text:004058E1
.text:004058E2 ; [00000006 BYTES: COLLAPSED FUNCTION _XcptFilter. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004058E8                 align 10h
.text:004058F0 ; [00000035 BYTES: COLLAPSED FUNCTION __ValidateImageBase. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405925                 align 10h
.text:00405930 ; [00000044 BYTES: COLLAPSED FUNCTION __FindPESection. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405974                 align 10h
.text:00405980 ; [000000BC BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405A3C ; [00000006 BYTES: COLLAPSED FUNCTION _initterm. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405A42 ; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405A48 ; [00000028 BYTES: COLLAPSED FUNCTION __setdefaultprecision. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405A70
.text:00405A70 ; =============== S U B R O U T I N E =======================================
.text:00405A70
.text:00405A70
.text:00405A70 sub_405A70      proc near               ; CODE XREF: _pre_c_init+86↑p
.text:00405A70                                         ; DATA XREF: _pre_c_init+94↑o
.text:00405A70                 xor     eax, eax
.text:00405A72                 retn
.text:00405A72 sub_405A70      endp
.text:00405A72
.text:00405A73 ; [0000009B BYTES: COLLAPSED FUNCTION ___security_init_cookie. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405B0E ; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405B14 ; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405B1A ; [00000006 BYTES: COLLAPSED FUNCTION terminate(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405B20 ; [00000006 BYTES: COLLAPSED FUNCTION type_info::_type_info_dtor_internal_method(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405B26 ; [00000006 BYTES: COLLAPSED FUNCTION _invoke_watson. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405B2C ; [00000006 BYTES: COLLAPSED FUNCTION _controlfp_s. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405B32 ; [00000006 BYTES: COLLAPSED FUNCTION __CxxFrameHandler3. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405B38 ; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405B3E ; [00000006 BYTES: COLLAPSED FUNCTION _CxxThrowException. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405B44                 align 10h
.text:00405B50 ; START OF FUNCTION CHUNK FOR sub_402400
.text:00405B50
.text:00405B50 loc_405B50:                             ; DATA XREF: .rdata:stru_406520↓o
.text:00405B50 ; __unwind { // SEH_402400
.text:00405B50 ;   cleanup() // owned by 402426
.text:00405B50                 mov     eax, [ebp+arg_0]
.text:00405B53                 jmp     loc_402810
.text:00405B58 ; ---------------------------------------------------------------------------
.text:00405B58
.text:00405B58 SEH_402400:                             ; DATA XREF: sub_402400+5↑o
.text:00405B58                                         ; .rdata:004063E4↓o
.text:00405B58                 mov     edx, [esp-4+arg_4]
.text:00405B5C                 lea     eax, [edx+0Ch]
.text:00405B5F                 mov     ecx, [edx-8]
.text:00405B62                 xor     ecx, eax
.text:00405B64                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405B69                 mov     eax, offset stru_406528
.text:00405B6E                 jmp     __CxxFrameHandler3
.text:00405B6E ; } // starts at 405B50
.text:00405B6E ; END OF FUNCTION CHUNK FOR sub_402400
.text:00405B6E ; ---------------------------------------------------------------------------
.text:00405B73                 align 10h
.text:00405B80 ; START OF FUNCTION CHUNK FOR sub_402EA0
.text:00405B80
.text:00405B80 loc_405B80:                             ; DATA XREF: .rdata:stru_40654C↓o
.text:00405B80 ; __unwind { // SEH_402EA0
.text:00405B80                 lea     eax, [ebp+var_24]
.text:00405B83                 jmp     loc_402810
.text:00405B88 ; ---------------------------------------------------------------------------
.text:00405B88
.text:00405B88 loc_405B88:                             ; DATA XREF: .rdata:00406554↓o
.text:00405B88                 lea     eax, [ebp+var_24]
.text:00405B8B                 push    eax
.text:00405B8C                 call    sub_402400
.text:00405B91                 retn
.text:00405B92 ; ---------------------------------------------------------------------------
.text:00405B92
.text:00405B92 loc_405B92:                             ; DATA XREF: .rdata:0040656C↓o
.text:00405B92 ;   cleanup() // owned by 402EF0
.text:00405B92 ;   cleanup() // owned by 402F1E
.text:00405B92 ;   cleanup() // owned by 402F4B
.text:00405B92 ;   cleanup() // owned by 403015
.text:00405B92 ;   cleanup() // owned by 403027
.text:00405B92 ;   cleanup() // owned by 403052
.text:00405B92                 lea     eax, [ebp+var_24]
.text:00405B95                 jmp     loc_402810
.text:00405B9A ; ---------------------------------------------------------------------------
.text:00405B9A
.text:00405B9A SEH_402EA0:                             ; DATA XREF: sub_402EA0+5↑o
.text:00405B9A                                         ; .rdata:004063E8↓o
.text:00405B9A                 mov     edx, [esp-4+arg_4]
.text:00405B9E                 lea     eax, [edx+0Ch]
.text:00405BA1                 mov     ecx, [edx-28h]
.text:00405BA4                 xor     ecx, eax
.text:00405BA6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405BAB                 mov     eax, offset stru_406598
.text:00405BB0                 jmp     __CxxFrameHandler3
.text:00405BB0 ; } // starts at 405B80
.text:00405BB0 ; END OF FUNCTION CHUNK FOR sub_402EA0
.text:00405BB0 ; ---------------------------------------------------------------------------
.text:00405BB5                 align 10h
.text:00405BC0 ; START OF FUNCTION CHUNK FOR sub_402C70
.text:00405BC0
.text:00405BC0 loc_405BC0:                             ; DATA XREF: .rdata:stru_4065BC↓o
.text:00405BC0 ; __unwind { // SEH_402C70
.text:00405BC0                 lea     eax, [ebp+var_20]
.text:00405BC3                 jmp     loc_402810
.text:00405BC8 ; ---------------------------------------------------------------------------
.text:00405BC8
.text:00405BC8 loc_405BC8:                             ; DATA XREF: .rdata:004065C4↓o
.text:00405BC8                 lea     eax, [ebp+var_20]
.text:00405BCB                 push    eax
.text:00405BCC                 call    sub_402400
.text:00405BD1                 retn
.text:00405BD2 ; ---------------------------------------------------------------------------
.text:00405BD2
.text:00405BD2 loc_405BD2:                             ; DATA XREF: .rdata:004065DC↓o
.text:00405BD2 ;   cleanup() // owned by 402CE4
.text:00405BD2 ;   cleanup() // owned by 402D17
.text:00405BD2 ;   cleanup() // owned by 402D2E
.text:00405BD2 ;   cleanup() // owned by 402DBE
.text:00405BD2 ;   cleanup() // owned by 402DD8
.text:00405BD2 ;   cleanup() // owned by 402E86
.text:00405BD2                 lea     eax, [ebp+var_20]
.text:00405BD5                 jmp     loc_402810
.text:00405BDA ; ---------------------------------------------------------------------------
.text:00405BDA
.text:00405BDA SEH_402C70:                             ; DATA XREF: sub_402C70+5↑o
.text:00405BDA                                         ; .rdata:004063EC↓o
.text:00405BDA                 mov     edx, [esp-4+arg_4]
.text:00405BDE                 lea     eax, [edx+0Ch]
.text:00405BE1                 mov     ecx, [edx-24h]
.text:00405BE4                 xor     ecx, eax
.text:00405BE6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405BEB                 mov     eax, offset stru_406608
.text:00405BF0                 jmp     __CxxFrameHandler3
.text:00405BF0 ; } // starts at 405BC0
.text:00405BF0 ; END OF FUNCTION CHUNK FOR sub_402C70
.text:00405BF0 ; ---------------------------------------------------------------------------
.text:00405BF5                 align 10h
.text:00405C00 ; START OF FUNCTION CHUNK FOR sub_402AB0
.text:00405C00
.text:00405C00 SEH_402AB0:                             ; DATA XREF: sub_402AB0+5↑o
.text:00405C00                                         ; .rdata:004063F0↓o
.text:00405C00 ; __unwind { // SEH_402AB0
.text:00405C00                 mov     edx, [esp-4+Dst]
.text:00405C04                 lea     eax, [edx+0Ch]
.text:00405C07                 mov     ecx, [edx-28h]
.text:00405C0A                 xor     ecx, eax
.text:00405C0C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405C11                 mov     eax, offset stru_406694
.text:00405C16                 jmp     __CxxFrameHandler3
.text:00405C16 ; } // starts at 405C00
.text:00405C16 ; END OF FUNCTION CHUNK FOR sub_402AB0
.text:00405C16 ; ---------------------------------------------------------------------------
.text:00405C1B                 align 10h
.text:00405C20 ; START OF FUNCTION CHUNK FOR sub_4026C0
.text:00405C20
.text:00405C20 SEH_4026C0:                             ; DATA XREF: sub_4026C0+5↑o
.text:00405C20                                         ; .rdata:004063F4↓o
.text:00405C20 ; __unwind { // SEH_4026C0
.text:00405C20                 mov     edx, [esp-4+arg_4]
.text:00405C24                 lea     eax, [edx+0Ch]
.text:00405C27                 mov     ecx, [edx-18h]
.text:00405C2A                 xor     ecx, eax
.text:00405C2C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405C31                 mov     eax, offset stru_4066EC
.text:00405C36                 jmp     __CxxFrameHandler3
.text:00405C36 ; } // starts at 405C20
.text:00405C36 ; END OF FUNCTION CHUNK FOR sub_4026C0
.text:00405C36 ; ---------------------------------------------------------------------------
.text:00405C3B                 align 10h
.text:00405C40 ; START OF FUNCTION CHUNK FOR sub_4010D0
.text:00405C40
.text:00405C40 loc_405C40:                             ; DATA XREF: .rdata:stru_406710↓o
.text:00405C40 ; __unwind { // SEH_4010D0
.text:00405C40 ;   cleanup() // owned by 401108
.text:00405C40                 mov     eax, [ebp+var_1C]
.text:00405C43                 and     eax, 1
.text:00405C46                 jz      locret_405C58
.text:00405C4C                 and     [ebp+var_1C], 0FFFFFFFEh
.text:00405C50                 mov     esi, [ebp+arg_0]
.text:00405C53                 jmp     loc_402130
.text:00405C58 ; ---------------------------------------------------------------------------
.text:00405C58
.text:00405C58 locret_405C58:                          ; CODE XREF: sub_4010D0+4B76↑j
.text:00405C58                 retn
.text:00405C59 ; ---------------------------------------------------------------------------
.text:00405C59
.text:00405C59 SEH_4010D0:                             ; DATA XREF: sub_4010D0+5↑o
.text:00405C59                                         ; .rdata:004063F8↓o
.text:00405C59                 mov     edx, [esp-4+arg_4]
.text:00405C5D                 lea     eax, [edx+0Ch]
.text:00405C60                 mov     ecx, [edx-20h]
.text:00405C63                 xor     ecx, eax
.text:00405C65                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405C6A                 mov     eax, offset stru_406718
.text:00405C6F                 jmp     __CxxFrameHandler3
.text:00405C6F ; } // starts at 405C40
.text:00405C6F ; END OF FUNCTION CHUNK FOR sub_4010D0
.text:00405C6F ; ---------------------------------------------------------------------------
.text:00405C74                 align 10h
.text:00405C80 ; START OF FUNCTION CHUNK FOR sub_404000
.text:00405C80
.text:00405C80 loc_405C80:                             ; DATA XREF: .rdata:00406744↓o
.text:00405C80 ; __unwind { // SEH_404000
.text:00405C80                 jmp     nullsub_1
.text:00405C85 ; ---------------------------------------------------------------------------
.text:00405C85
.text:00405C85 SEH_404000:                             ; DATA XREF: sub_404000+5↑o
.text:00405C85                                         ; .rdata:004063FC↓o
.text:00405C85                 mov     edx, [esp-4+arg_4]
.text:00405C89                 lea     eax, [edx+0Ch]
.text:00405C8C                 mov     ecx, [edx-10h]
.text:00405C8F                 xor     ecx, eax
.text:00405C91                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405C96                 mov     eax, offset stru_406754
.text:00405C9B                 jmp     __CxxFrameHandler3
.text:00405C9B ; } // starts at 405C80
.text:00405C9B ; END OF FUNCTION CHUNK FOR sub_404000
.text:00405CA0 ; ---------------------------------------------------------------------------
.text:00405CA0 ; START OF FUNCTION CHUNK FOR sub_402540
.text:00405CA0
.text:00405CA0 SEH_402540:                             ; DATA XREF: sub_402540+5↑o
.text:00405CA0                                         ; .rdata:00406400↓o
.text:00405CA0 ; __unwind { // SEH_402540
.text:00405CA0                 mov     edx, [esp-4+arg_4]
.text:00405CA4                 lea     eax, [edx+0Ch]
.text:00405CA7                 mov     ecx, [edx-18h]
.text:00405CAA                 xor     ecx, eax
.text:00405CAC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405CB1                 mov     eax, offset stru_4067AC
.text:00405CB6                 jmp     __CxxFrameHandler3
.text:00405CB6 ; } // starts at 405CA0
.text:00405CB6 ; END OF FUNCTION CHUNK FOR sub_402540
.text:00405CB6 ; ---------------------------------------------------------------------------
.text:00405CBB                 align 10h
.text:00405CC0 ; START OF FUNCTION CHUNK FOR sub_402050
.text:00405CC0
.text:00405CC0 loc_405CC0:                             ; DATA XREF: .rdata:stru_4067D0↓o
.text:00405CC0 ; __unwind { // SEH_402050
.text:00405CC0                 jmp     nullsub_1
.text:00405CC5 ; ---------------------------------------------------------------------------
.text:00405CC5
.text:00405CC5 loc_405CC5:                             ; DATA XREF: .rdata:004067D8↓o
.text:00405CC5 ;   cleanup() // owned by 4020C7
.text:00405CC5 ;   cleanup() // owned by 4020E6
.text:00405CC5                 jmp     nullsub_1
.text:00405CCA ; ---------------------------------------------------------------------------
.text:00405CCA
.text:00405CCA SEH_402050:                             ; DATA XREF: sub_402050+5↑o
.text:00405CCA                                         ; .rdata:00406404↓o
.text:00405CCA                 mov     edx, [esp-4+arg_4]
.text:00405CCE                 lea     eax, [edx+0Ch]
.text:00405CD1                 mov     ecx, [edx-10h]
.text:00405CD4                 xor     ecx, eax
.text:00405CD6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405CDB                 mov     eax, offset stru_4067E0
.text:00405CE0                 jmp     __CxxFrameHandler3
.text:00405CE0 ; } // starts at 405CC0
.text:00405CE0 ; END OF FUNCTION CHUNK FOR sub_402050
.text:00405CE0 ; ---------------------------------------------------------------------------
.text:00405CE5                 align 10h
.text:00405CF0 ; START OF FUNCTION CHUNK FOR sub_401340
.text:00405CF0
.text:00405CF0 loc_405CF0:                             ; DATA XREF: .rdata:stru_406804↓o
.text:00405CF0 ; __unwind { // SEH_401340
.text:00405CF0                 lea     esi, [ebp+var_20]
.text:00405CF3                 jmp     loc_402130
.text:00405CF8 ; ---------------------------------------------------------------------------
.text:00405CF8
.text:00405CF8 loc_405CF8:                             ; DATA XREF: .rdata:0040680C↓o
.text:00405CF8                 lea     esi, [ebp+var_2C]
.text:00405CFB                 jmp     loc_402020
.text:00405D00 ; ---------------------------------------------------------------------------
.text:00405D00
.text:00405D00 loc_405D00:                             ; DATA XREF: .rdata:00406814↓o
.text:00405D00                 lea     esi, [ebp+var_2C]
.text:00405D03                 jmp     loc_402020
.text:00405D08 ; ---------------------------------------------------------------------------
.text:00405D08
.text:00405D08 loc_405D08:                             ; DATA XREF: .rdata:0040681C↓o
.text:00405D08 ;   cleanup() // owned by 4016C2
.text:00405D08 ;   cleanup() // owned by 4019B9
.text:00405D08 ;   cleanup() // owned by 401A19
.text:00405D08 ;   cleanup() // owned by 401A6D
.text:00405D08                 lea     esi, [ebp+var_48]
.text:00405D0B                 jmp     loc_402020
.text:00405D10 ; ---------------------------------------------------------------------------
.text:00405D10
.text:00405D10 SEH_401340:                             ; DATA XREF: sub_401340+5↑o
.text:00405D10                                         ; .rdata:00406408↓o
.text:00405D10                 mov     edx, [esp-4+arg_4]
.text:00405D14                 lea     eax, [edx+0Ch]
.text:00405D17                 mov     ecx, [edx-74h]
.text:00405D1A                 xor     ecx, eax
.text:00405D1C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405D21                 mov     ecx, [edx-4]
.text:00405D24                 xor     ecx, eax
.text:00405D26                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405D2B                 mov     eax, offset stru_406824
.text:00405D30                 jmp     __CxxFrameHandler3
.text:00405D30 ; } // starts at 405CF0
.text:00405D30 ; END OF FUNCTION CHUNK FOR sub_401340
.text:00405D30 ; ---------------------------------------------------------------------------
.text:00405D35                 align 10h
.text:00405D40 ; START OF FUNCTION CHUNK FOR sub_404580
.text:00405D40
.text:00405D40 loc_405D40:                             ; DATA XREF: .rdata:stru_406848↓o
.text:00405D40 ; __unwind { // SEH_404580
.text:00405D40 ;   cleanup() // owned by 404626
.text:00405D40                 lea     esi, [ebp+Dst]
.text:00405D43                 jmp     loc_402020
.text:00405D48 ; ---------------------------------------------------------------------------
.text:00405D48
.text:00405D48 SEH_404580:                             ; DATA XREF: sub_404580+5↑o
.text:00405D48                                         ; .rdata:0040640C↓o
.text:00405D48                 mov     edx, [esp-4+arg_4]
.text:00405D4C                 lea     eax, [edx+0Ch]
.text:00405D4F                 mov     ecx, [edx-3Ch]
.text:00405D52                 xor     ecx, eax
.text:00405D54                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405D59                 mov     ecx, [edx-4]
.text:00405D5C                 xor     ecx, eax
.text:00405D5E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405D63                 mov     eax, offset stru_406850
.text:00405D68                 jmp     __CxxFrameHandler3
.text:00405D68 ; } // starts at 405D40
.text:00405D68 ; END OF FUNCTION CHUNK FOR sub_404580
.text:00405D68 ; ---------------------------------------------------------------------------
.text:00405D6D                 align 10h
.text:00405D70 ; START OF FUNCTION CHUNK FOR sub_404400
.text:00405D70
.text:00405D70 loc_405D70:                             ; DATA XREF: .rdata:stru_406874↓o
.text:00405D70 ; __unwind { // SEH_404400
.text:00405D70 ;   cleanup() // owned by 4044D8
.text:00405D70                 lea     esi, [ebp+Dst]
.text:00405D73                 jmp     loc_402020
.text:00405D78 ; ---------------------------------------------------------------------------
.text:00405D78
.text:00405D78 SEH_404400:                             ; DATA XREF: sub_404400+5↑o
.text:00405D78                                         ; .rdata:00406410↓o
.text:00405D78                 mov     edx, [esp-4+arg_4]
.text:00405D7C                 lea     eax, [edx+0Ch]
.text:00405D7F                 mov     ecx, [edx-34h]
.text:00405D82                 xor     ecx, eax
.text:00405D84                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405D89                 mov     ecx, [edx-4]
.text:00405D8C                 xor     ecx, eax
.text:00405D8E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405D93                 mov     eax, offset stru_40687C
.text:00405D98                 jmp     __CxxFrameHandler3
.text:00405D98 ; } // starts at 405D70
.text:00405D98 ; END OF FUNCTION CHUNK FOR sub_404400
.text:00405D98 ; ---------------------------------------------------------------------------
.text:00405D9D                 align 10h
.text:00405DA0 ; START OF FUNCTION CHUNK FOR sub_4050B0
.text:00405DA0
.text:00405DA0 loc_405DA0:                             ; DATA XREF: .rdata:stru_4068A0↓o
.text:00405DA0 ; __unwind { // SEH_4050B0
.text:00405DA0 ;   cleanup() // owned by 405137
.text:00405DA0                 lea     esi, [ebp+Dst]
.text:00405DA3                 jmp     loc_402020
.text:00405DA8 ; ---------------------------------------------------------------------------
.text:00405DA8
.text:00405DA8 SEH_4050B0:                             ; DATA XREF: sub_4050B0+5↑o
.text:00405DA8                                         ; .rdata:00406414↓o
.text:00405DA8                 mov     edx, [esp-4+arg_4]
.text:00405DAC                 lea     eax, [edx+0Ch]
.text:00405DAF                 mov     ecx, [edx-30h]
.text:00405DB2                 xor     ecx, eax
.text:00405DB4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405DB9                 mov     ecx, [edx-4]
.text:00405DBC                 xor     ecx, eax
.text:00405DBE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405DC3                 mov     eax, offset stru_4068A8
.text:00405DC8                 jmp     __CxxFrameHandler3
.text:00405DC8 ; } // starts at 405DA0
.text:00405DC8 ; END OF FUNCTION CHUNK FOR sub_4050B0
.text:00405DC8 ; ---------------------------------------------------------------------------
.text:00405DCD                 align 10h
.text:00405DD0 ; START OF FUNCTION CHUNK FOR sub_404A60
.text:00405DD0
.text:00405DD0 SEH_404A60:                             ; DATA XREF: sub_404A60+5↑o
.text:00405DD0                                         ; .rdata:00406418↓o
.text:00405DD0 ; __unwind { // SEH_404A60
.text:00405DD0                 mov     edx, [esp-4+arg_4]
.text:00405DD4                 lea     eax, [edx+0Ch]
.text:00405DD7                 mov     ecx, [edx-1Ch]
.text:00405DDA                 xor     ecx, eax
.text:00405DDC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405DE1                 mov     ecx, [edx-4]
.text:00405DE4                 xor     ecx, eax
.text:00405DE6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405DEB                 mov     eax, offset stru_4068E4
.text:00405DF0                 jmp     __CxxFrameHandler3
.text:00405DF0 ; } // starts at 405DD0
.text:00405DF0 ; END OF FUNCTION CHUNK FOR sub_404A60
.text:00405DF0 ; ---------------------------------------------------------------------------
.text:00405DF5                 align 10h
.text:00405E00 ; START OF FUNCTION CHUNK FOR sub_403580
.text:00405E00
.text:00405E00 SEH_403580:                             ; DATA XREF: sub_403580+5↑o
.text:00405E00                                         ; .rdata:0040641C↓o
.text:00405E00 ; __unwind { // SEH_403580
.text:00405E00                 mov     edx, [esp-4+arg_4]
.text:00405E04                 lea     eax, [edx+0Ch]
.text:00405E07                 mov     ecx, [edx-0ACh]
.text:00405E0D                 xor     ecx, eax
.text:00405E0F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405E14                 mov     ecx, [edx-4]
.text:00405E17                 xor     ecx, eax
.text:00405E19                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405E1E                 mov     eax, offset stru_406940
.text:00405E23                 jmp     __CxxFrameHandler3
.text:00405E23 ; } // starts at 405E00
.text:00405E23 ; END OF FUNCTION CHUNK FOR sub_403580
.text:00405E23 ; ---------------------------------------------------------------------------
.text:00405E28                 align 10h
.text:00405E30
.text:00405E30 ; =============== S U B R O U T I N E =======================================
.text:00405E30
.text:00405E30
.text:00405E30 sub_405E30      proc near               ; DATA XREF: .rdata:00406128↓o
.text:00405E30                 push    offset sub_405E60 ; void (__cdecl *)()
.text:00405E35                 call    _atexit
.text:00405E3A                 pop     ecx
.text:00405E3B                 retn
.text:00405E3B sub_405E30      endp
.text:00405E3B
.text:00405E3B ; ---------------------------------------------------------------------------
.text:00405E3C                 align 10h
.text:00405E40
.text:00405E40 ; =============== S U B R O U T I N E =======================================
.text:00405E40
.text:00405E40
.text:00405E40 sub_405E40      proc near               ; DATA XREF: .rdata:0040612C↓o
.text:00405E40                 push    offset sub_405E70 ; void (__cdecl *)()
.text:00405E45                 call    _atexit
.text:00405E4A                 pop     ecx
.text:00405E4B                 retn
.text:00405E4B sub_405E40      endp
.text:00405E4B
.text:00405E4B ; ---------------------------------------------------------------------------
.text:00405E4C                 align 10h
.text:00405E50
.text:00405E50 ; =============== S U B R O U T I N E =======================================
.text:00405E50
.text:00405E50
.text:00405E50 sub_405E50      proc near               ; DATA XREF: .rdata:00406130↓o
.text:00405E50                 push    offset sub_405EB0 ; void (__cdecl *)()
.text:00405E55                 call    _atexit
.text:00405E5A                 pop     ecx
.text:00405E5B                 retn
.text:00405E5B sub_405E50      endp
.text:00405E5B
.text:00405E5B ; ---------------------------------------------------------------------------
.text:00405E5C                 align 10h
.text:00405E60
.text:00405E60 ; =============== S U B R O U T I N E =======================================
.text:00405E60
.text:00405E60 ; Attributes: thunk
.text:00405E60
.text:00405E60 ; void __cdecl sub_405E60()
.text:00405E60 sub_405E60      proc near               ; DATA XREF: sub_405E30↑o
.text:00405E60                 jmp     sub_4022D0
.text:00405E60 sub_405E60      endp
.text:00405E60
.text:00405E60 ; ---------------------------------------------------------------------------
.text:00405E65                 align 10h
.text:00405E70
.text:00405E70 ; =============== S U B R O U T I N E =======================================
.text:00405E70
.text:00405E70
.text:00405E70 ; void __cdecl sub_405E70()
.text:00405E70 sub_405E70      proc near               ; DATA XREF: sub_405E40↑o
.text:00405E70                 mov     eax, dword_6F8310
.text:00405E75                 test    eax, eax
.text:00405E77                 jz      short loc_405E83
.text:00405E79                 push    eax
.text:00405E7A                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00405E80                 add     esp, 4
.text:00405E83
.text:00405E83 loc_405E83:                             ; CODE XREF: sub_405E70+7↑j
.text:00405E83                 mov     dword_6F8310, 0
.text:00405E8D                 mov     dword_6F8314, 0
.text:00405E97                 mov     dword_6F8318, 0
.text:00405EA1                 retn
.text:00405EA1 sub_405E70      endp
.text:00405EA1
.text:00405EA1 ; ---------------------------------------------------------------------------
.text:00405EA2                 align 10h
.text:00405EB0
.text:00405EB0 ; =============== S U B R O U T I N E =======================================
.text:00405EB0
.text:00405EB0
.text:00405EB0 ; void __cdecl sub_405EB0()
.text:00405EB0 sub_405EB0      proc near               ; DATA XREF: sub_405E50↑o
.text:00405EB0                 mov     eax, dword_6F8320
.text:00405EB5                 test    eax, eax
.text:00405EB7                 jz      short loc_405EC3
.text:00405EB9                 push    eax
.text:00405EBA                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00405EC0                 add     esp, 4
.text:00405EC3
.text:00405EC3 loc_405EC3:                             ; CODE XREF: sub_405EB0+7↑j
.text:00405EC3                 mov     dword_6F8320, 0
.text:00405ECD                 mov     dword_6F8324, 0
.text:00405ED7                 mov     dword_6F8328, 0
.text:00405EE1                 retn
.text:00405EE1 sub_405EB0      endp
.text:00405EE1
.text:00405EE1 ; ---------------------------------------------------------------------------
.text:00405EE2                 align 200h
.text:00405EE2 _text           ends
.text:00405EE2