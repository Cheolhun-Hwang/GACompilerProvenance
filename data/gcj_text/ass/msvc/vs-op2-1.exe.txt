.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000
.text:00401000 sub_401000      proc near               ; DATA XREF: .rdata:0040459C↓o
.text:00401000                 mov     dword ptr [ecx], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:00401006                 jmp     ds:??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text:00401006 sub_401000      endp
.text:00401006
.text:00401006 ; ---------------------------------------------------------------------------
.text:0040100C                 align 10h
.text:00401010
.text:00401010 ; =============== S U B R O U T I N E =======================================
.text:00401010
.text:00401010 ; Attributes: bp-based frame
.text:00401010
.text:00401010 sub_401010      proc near               ; DATA XREF: .rdata:const std::bad_alloc::`vftable'↓o
.text:00401010
.text:00401010 arg_0           = byte ptr  8
.text:00401010
.text:00401010                 push    ebp
.text:00401011                 mov     ebp, esp
.text:00401013                 push    esi
.text:00401014                 mov     esi, ecx
.text:00401016                 mov     dword ptr [esi], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:0040101C                 call    ds:??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text:00401022                 test    [ebp+arg_0], 1
.text:00401026                 jz      short loc_401032
.text:00401028                 push    esi
.text:00401029                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040102F                 add     esp, 4
.text:00401032
.text:00401032 loc_401032:                             ; CODE XREF: sub_401010+16↑j
.text:00401032                 mov     eax, esi
.text:00401034                 pop     esi
.text:00401035                 pop     ebp
.text:00401036                 retn    4
.text:00401036 sub_401010      endp
.text:00401036
.text:00401036 ; ---------------------------------------------------------------------------
.text:00401039                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00401040 _main           proc near               ; CODE XREF: ___tmainCRTStartup+11D↓p
.text:00401040
.text:00401040 var_78          = dword ptr -78h
.text:00401040 var_74          = dword ptr -74h
.text:00401040 var_70          = dword ptr -70h
.text:00401040 var_6C          = dword ptr -6Ch
.text:00401040 var_66          = byte ptr -66h
.text:00401040 var_65          = byte ptr -65h
.text:00401040 var_64          = dword ptr -64h
.text:00401040 var_54          = dword ptr -54h
.text:00401040 var_50          = dword ptr -50h
.text:00401040 var_48          = dword ptr -48h
.text:00401040 var_38          = dword ptr -38h
.text:00401040 var_34          = dword ptr -34h
.text:00401040 var_2C          = dword ptr -2Ch
.text:00401040 var_1C          = dword ptr -1Ch
.text:00401040 var_18          = dword ptr -18h
.text:00401040 var_10          = dword ptr -10h
.text:00401040 var_C           = dword ptr -0Ch
.text:00401040 var_4           = dword ptr -4
.text:00401040 argc            = dword ptr  8
.text:00401040 argv            = dword ptr  0Ch
.text:00401040 envp            = dword ptr  10h
.text:00401040
.text:00401040 ; FUNCTION CHUNK AT .text:00402CE0 SIZE 0000003D BYTES
.text:00401040
.text:00401040 ; __unwind { // _main_SEH
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 push    0FFFFFFFFh
.text:00401045                 push    offset _main_SEH
.text:0040104A                 mov     eax, large fs:0
.text:00401050                 push    eax
.text:00401051                 sub     esp, 6Ch
.text:00401054                 mov     eax, ___security_cookie
.text:00401059                 xor     eax, ebp
.text:0040105B                 mov     [ebp+var_10], eax
.text:0040105E                 push    ebx
.text:0040105F                 push    esi
.text:00401060                 push    edi
.text:00401061                 push    eax
.text:00401062                 lea     eax, [ebp+var_C]
.text:00401065                 mov     large fs:0, eax
.text:0040106B                 mov     esi, offset byte_4050F4
.text:00401070                 mov     [ebp+var_6C], esi
.text:00401073
.text:00401073 loc_401073:                             ; CODE XREF: _main+16F↓j
.text:00401073                 xor     eax, eax
.text:00401075                 mov     [ebp+var_38], eax
.text:00401078                 mov     byte ptr [ebp+var_48], al
.text:0040107B                 lea     eax, [esi-8Ch]
.text:00401081                 push    eax             ; int
.text:00401082                 mov     edi, 0Fh
.text:00401087                 or      eax, 0FFFFFFFFh
.text:0040108A                 xor     ebx, ebx
.text:0040108C                 lea     ecx, [ebp+var_48] ; int
.text:0040108F                 mov     [ebp+var_34], edi
.text:00401092                 call    sub_401370
.text:00401097                 xor     eax, eax
.text:00401099 ;   try {
.text:00401099                 mov     [ebp+var_4], eax
.text:0040109C                 mov     [ebp+var_54], eax
.text:0040109F                 mov     byte ptr [ebp+var_64], al
.text:004010A2                 push    esi             ; int
.text:004010A3                 or      eax, 0FFFFFFFFh
.text:004010A6                 lea     ecx, [ebp+var_64] ; int
.text:004010A9                 mov     [ebp+var_50], edi
.text:004010AC                 call    sub_401370
.text:004010B1                 xor     edi, edi
.text:004010B1 ;   } // starts at 401099
.text:004010B3 ;   try {
.text:004010B3                 mov     byte ptr [ebp+var_4], 1
.text:004010B7                 cmp     [ebp+var_38], edi
.text:004010BA                 jle     loc_401164
.text:004010C0
.text:004010C0 loc_4010C0:                             ; CODE XREF: _main+11E↓j
.text:004010C0                 mov     ecx, [ebp+var_34]
.text:004010C3                 mov     eax, [ebp+var_48]
.text:004010C6                 cmp     ecx, 10h
.text:004010C9                 jnb     short loc_4010CE
.text:004010CB                 lea     eax, [ebp+var_48]
.text:004010CE
.text:004010CE loc_4010CE:                             ; CODE XREF: _main+89↑j
.text:004010CE                 cmp     byte ptr [eax+edi], 20h ; ' '
.text:004010D2                 jz      loc_40115A
.text:004010D8                 cmp     [ebp+var_50], 10h
.text:004010DC                 jb      short loc_4010E6
.text:004010DE                 mov     edx, [ebp+var_64]
.text:004010E1                 mov     [ebp+var_78], edx
.text:004010E4                 jmp     short loc_4010EC
.text:004010E6 ; ---------------------------------------------------------------------------
.text:004010E6
.text:004010E6 loc_4010E6:                             ; CODE XREF: _main+9C↑j
.text:004010E6                 lea     eax, [ebp+var_64]
.text:004010E9                 mov     [ebp+var_78], eax
.text:004010EC
.text:004010EC loc_4010EC:                             ; CODE XREF: _main+A4↑j
.text:004010EC                 mov     esi, [ebp+var_48]
.text:004010EF                 cmp     ecx, 10h
.text:004010F2                 jnb     short loc_4010F7
.text:004010F4                 lea     esi, [ebp+var_48]
.text:004010F7
.text:004010F7 loc_4010F7:                             ; CODE XREF: _main+B2↑j
.text:004010F7                 mov     ecx, dword_4054D8
.text:004010FD                 mov     eax, [ecx+4]
.text:00401100                 cmp     byte ptr [eax+0Fh], 0
.text:00401104                 mov     ebx, ecx
.text:00401106                 jnz     short loc_401124
.text:00401108                 mov     dl, [esi+edi]
.text:0040110B                 jmp     short loc_401110
.text:0040110B ; ---------------------------------------------------------------------------
.text:0040110D                 align 10h
.text:00401110
.text:00401110 loc_401110:                             ; CODE XREF: _main+CB↑j
.text:00401110                                         ; _main+E2↓j
.text:00401110                 cmp     [eax+0Ch], dl
.text:00401113                 jge     short loc_40111A
.text:00401115                 mov     eax, [eax+8]
.text:00401118                 jmp     short loc_40111E
.text:0040111A ; ---------------------------------------------------------------------------
.text:0040111A
.text:0040111A loc_40111A:                             ; CODE XREF: _main+D3↑j
.text:0040111A                 mov     ebx, eax
.text:0040111C                 mov     eax, [eax]
.text:0040111E
.text:0040111E loc_40111E:                             ; CODE XREF: _main+D8↑j
.text:0040111E                 cmp     byte ptr [eax+0Fh], 0
.text:00401122                 jz      short loc_401110
.text:00401124
.text:00401124 loc_401124:                             ; CODE XREF: _main+C6↑j
.text:00401124                 cmp     ebx, ecx
.text:00401126                 jz      short loc_401130
.text:00401128                 mov     cl, [esi+edi]
.text:0040112B                 cmp     cl, [ebx+0Ch]
.text:0040112E                 jge     short loc_40114E
.text:00401130
.text:00401130 loc_401130:                             ; CODE XREF: _main+E6↑j
.text:00401130                 mov     dl, [esi+edi]
.text:00401133                 lea     esi, [ebp+var_66]
.text:00401136                 mov     [ebp+var_66], dl
.text:00401139                 mov     [ebp+var_65], 0
.text:0040113D                 call    sub_402300
.text:00401142                 push    ebx
.text:00401143                 lea     ebx, [ebp+var_70]
.text:00401146                 call    sub_401CE0
.text:0040114B                 mov     ebx, [ebp+var_70]
.text:0040114E
.text:0040114E loc_40114E:                             ; CODE XREF: _main+EE↑j
.text:0040114E                 mov     eax, [ebp+var_78]
.text:00401151                 mov     cl, [eax+edi]
.text:00401154                 mov     esi, [ebp+var_6C]
.text:00401157                 mov     [ebx+0Dh], cl
.text:0040115A
.text:0040115A loc_40115A:                             ; CODE XREF: _main+92↑j
.text:0040115A                 inc     edi
.text:0040115B                 cmp     edi, [ebp+var_38]
.text:0040115E                 jl      loc_4010C0
.text:00401164
.text:00401164 loc_401164:                             ; CODE XREF: _main+7A↑j
.text:00401164                 mov     edi, 10h
.text:00401169                 cmp     [ebp+var_50], edi
.text:0040116C                 jb      short loc_40117B
.text:0040116E                 mov     edx, [ebp+var_64]
.text:00401171                 push    edx
.text:00401172                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00401178                 add     esp, 4
.text:0040117B
.text:0040117B loc_40117B:                             ; CODE XREF: _main+12C↑j
.text:0040117B                 xor     ebx, ebx
.text:0040117B ;   } // starts at 4010B3
.text:0040117D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00401184                 mov     [ebp+var_50], 0Fh
.text:0040118B                 mov     [ebp+var_54], ebx
.text:0040118E                 mov     byte ptr [ebp+var_64], bl
.text:00401191                 cmp     [ebp+var_34], edi
.text:00401194                 jb      short loc_4011A3
.text:00401196                 mov     eax, [ebp+var_48]
.text:00401199                 push    eax
.text:0040119A                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004011A0                 add     esp, 4
.text:004011A3
.text:004011A3 loc_4011A3:                             ; CODE XREF: _main+154↑j
.text:004011A3                 add     esi, 1Ch
.text:004011A6                 mov     [ebp+var_6C], esi
.text:004011A9                 cmp     esi, offset argc
.text:004011AF                 jl      loc_401073
.text:004011B5                 lea     ecx, [ebp+var_74]
.text:004011B8                 push    ecx
.text:004011B9                 push    offset Format   ; "%d\n"
.text:004011BE                 call    ds:scanf
.text:004011C4                 add     esp, 8
.text:004011C7                 mov     [ebp+var_6C], ebx
.text:004011CA                 cmp     [ebp+var_74], ebx
.text:004011CD                 jle     loc_4012F3
.text:004011D3
.text:004011D3 loc_4011D3:                             ; CODE XREF: _main+2AD↓j
.text:004011D3                 mov     [ebp+var_18], 0Fh
.text:004011DA                 mov     [ebp+var_1C], 0
.text:004011E1                 mov     byte ptr [ebp+var_2C], 0
.text:004011E5 ;   try {
.text:004011E5                 mov     [ebp+var_4], 2
.text:004011EC                 mov     eax, ds:?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A ; std::basic_istream<char,std::char_traits<char>> std::cin
.text:004011F1                 mov     edx, [eax]
.text:004011F3                 mov     ecx, [edx+4]
.text:004011F6                 push    0Ah
.text:004011F8                 add     ecx, eax
.text:004011FA                 mov     esi, eax
.text:004011FC                 call    ds:?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char>>::widen(char)
.text:00401202                 movzx   eax, al
.text:00401205                 push    eax
.text:00401206                 push    esi
.text:00401207                 lea     ecx, [ebp+var_2C]
.text:0040120A                 call    sub_402190
.text:0040120F                 xor     edi, edi
.text:00401211                 add     esp, 8
.text:00401214                 cmp     [ebp+var_1C], edi
.text:00401217                 jle     loc_4012AD
.text:0040121D                 lea     ecx, [ecx+0]
.text:00401220
.text:00401220 loc_401220:                             ; CODE XREF: _main+267↓j
.text:00401220                 mov     ecx, [ebp+var_18]
.text:00401223                 mov     eax, [ebp+var_2C]
.text:00401226                 cmp     ecx, 10h
.text:00401229                 jnb     short loc_40122E
.text:0040122B                 lea     eax, [ebp+var_2C]
.text:0040122E
.text:0040122E loc_40122E:                             ; CODE XREF: _main+1E9↑j
.text:0040122E                 cmp     byte ptr [eax+edi], 20h ; ' '
.text:00401232                 jz      short loc_4012A3
.text:00401234                 mov     esi, [ebp+var_2C]
.text:00401237                 cmp     ecx, 10h
.text:0040123A                 jnb     short loc_40123F
.text:0040123C                 lea     esi, [ebp+var_2C]
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: _main+1FA↑j
.text:0040123F                 mov     ecx, dword_4054D8
.text:00401245                 mov     eax, [ecx+4]
.text:00401248                 cmp     byte ptr [eax+0Fh], 0
.text:0040124C                 mov     ebx, ecx
.text:0040124E                 jnz     short loc_401267
.text:00401250                 mov     dl, [esi+edi]
.text:00401253
.text:00401253 loc_401253:                             ; CODE XREF: _main+225↓j
.text:00401253                 cmp     [eax+0Ch], dl
.text:00401256                 jge     short loc_40125D
.text:00401258                 mov     eax, [eax+8]
.text:0040125B                 jmp     short loc_401261
.text:0040125D ; ---------------------------------------------------------------------------
.text:0040125D
.text:0040125D loc_40125D:                             ; CODE XREF: _main+216↑j
.text:0040125D                 mov     ebx, eax
.text:0040125F                 mov     eax, [eax]
.text:00401261
.text:00401261 loc_401261:                             ; CODE XREF: _main+21B↑j
.text:00401261                 cmp     byte ptr [eax+0Fh], 0
.text:00401265                 jz      short loc_401253
.text:00401267
.text:00401267 loc_401267:                             ; CODE XREF: _main+20E↑j
.text:00401267                 cmp     ebx, ecx
.text:00401269                 jz      short loc_401273
.text:0040126B                 mov     cl, [esi+edi]
.text:0040126E                 cmp     cl, [ebx+0Ch]
.text:00401271                 jge     short loc_401291
.text:00401273
.text:00401273 loc_401273:                             ; CODE XREF: _main+229↑j
.text:00401273                 mov     dl, [esi+edi]
.text:00401276                 lea     esi, [ebp+var_66]
.text:00401279                 mov     [ebp+var_66], dl
.text:0040127C                 mov     [ebp+var_65], 0
.text:00401280                 call    sub_402300
.text:00401285                 push    ebx
.text:00401286                 lea     ebx, [ebp+var_70]
.text:00401289                 call    sub_401CE0
.text:0040128E                 mov     ebx, [ebp+var_70]
.text:00401291
.text:00401291 loc_401291:                             ; CODE XREF: _main+231↑j
.text:00401291                 cmp     [ebp+var_18], 10h
.text:00401295                 mov     eax, [ebp+var_2C]
.text:00401298                 jnb     short loc_40129D
.text:0040129A                 lea     eax, [ebp+var_2C]
.text:0040129D
.text:0040129D loc_40129D:                             ; CODE XREF: _main+258↑j
.text:0040129D                 mov     cl, [ebx+0Dh]
.text:004012A0                 mov     [eax+edi], cl
.text:004012A3
.text:004012A3 loc_4012A3:                             ; CODE XREF: _main+1F2↑j
.text:004012A3                 inc     edi
.text:004012A4                 cmp     edi, [ebp+var_1C]
.text:004012A7                 jl      loc_401220
.text:004012AD
.text:004012AD loc_4012AD:                             ; CODE XREF: _main+1D7↑j
.text:004012AD                 cmp     [ebp+var_18], 10h
.text:004012B1                 mov     eax, [ebp+var_2C]
.text:004012B4                 jnb     short loc_4012B9
.text:004012B6                 lea     eax, [ebp+var_2C]
.text:004012B9
.text:004012B9 loc_4012B9:                             ; CODE XREF: _main+274↑j
.text:004012B9                 mov     esi, [ebp+var_6C]
.text:004012BC                 push    eax
.text:004012BD                 inc     esi
.text:004012BE                 push    esi
.text:004012BF                 push    offset aCaseDS  ; "Case #%d: %s\n"
.text:004012C4                 call    ds:printf
.text:004012CA                 add     esp, 0Ch
.text:004012CA ;   } // starts at 4011E5
.text:004012CD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:004012D4                 cmp     [ebp+var_18], 10h
.text:004012D8                 jb      short loc_4012E7
.text:004012DA                 mov     edx, [ebp+var_2C]
.text:004012DD                 push    edx
.text:004012DE                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004012E4                 add     esp, 4
.text:004012E7
.text:004012E7 loc_4012E7:                             ; CODE XREF: _main+298↑j
.text:004012E7                 mov     [ebp+var_6C], esi
.text:004012EA                 cmp     esi, [ebp+var_74]
.text:004012ED                 jl      loc_4011D3
.text:004012F3
.text:004012F3 loc_4012F3:                             ; CODE XREF: _main+18D↑j
.text:004012F3                 xor     eax, eax
.text:004012F5                 mov     ecx, [ebp+var_C]
.text:004012F8                 mov     large fs:0, ecx
.text:004012FF                 pop     ecx
.text:00401300                 pop     edi
.text:00401301                 pop     esi
.text:00401302                 pop     ebx
.text:00401303                 mov     ecx, [ebp+var_10]
.text:00401306                 xor     ecx, ebp
.text:00401308                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040130D                 mov     esp, ebp
.text:0040130F                 pop     ebp
.text:00401310                 retn
.text:00401310 ; } // starts at 401040
.text:00401310 _main           endp
.text:00401310
.text:00401310 ; ---------------------------------------------------------------------------
.text:00401311                 align 10h
.text:00401320
.text:00401320 ; =============== S U B R O U T I N E =======================================
.text:00401320
.text:00401320
.text:00401320 ; void __thiscall sub_401320(void *)
.text:00401320 sub_401320      proc near               ; CODE XREF: _main+1CA3↓j
.text:00401320                                         ; _main+1CAB↓j ...
.text:00401320                 push    esi
.text:00401321                 mov     esi, ecx
.text:00401323                 cmp     dword ptr [esi+14h], 10h
.text:00401327                 jb      short loc_401335
.text:00401329                 mov     eax, [esi]
.text:0040132B                 push    eax
.text:0040132C                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00401332                 add     esp, 4
.text:00401335
.text:00401335 loc_401335:                             ; CODE XREF: sub_401320+7↑j
.text:00401335                 mov     dword ptr [esi+14h], 0Fh
.text:0040133C                 mov     dword ptr [esi+10h], 0
.text:00401343                 mov     byte ptr [esi], 0
.text:00401346                 pop     esi
.text:00401347                 retn
.text:00401347 sub_401320      endp
.text:00401347
.text:00401347 ; ---------------------------------------------------------------------------
.text:00401348                 align 10h
.text:00401350 ; START OF FUNCTION CHUNK FOR sub_402190
.text:00401350
.text:00401350 loc_401350:                             ; CODE XREF: sub_402190+B23↓j
.text:00401350                                         ; sub_402190+B2B↓j
.text:00401350 ; __unwind { // SEH_402190
.text:00401350                 mov     eax, [eax]
.text:00401352                 mov     ecx, [eax]
.text:00401354                 mov     edx, [ecx+4]
.text:00401357                 mov     eax, [edx+eax+38h]
.text:0040135B                 test    eax, eax
.text:0040135D                 jz      short locret_401368
.text:0040135F                 mov     edx, [eax]
.text:00401361                 mov     ecx, eax
.text:00401363                 mov     eax, [edx+8]
.text:00401366                 jmp     eax
.text:00401368 ; ---------------------------------------------------------------------------
.text:00401368
.text:00401368 locret_401368:                          ; CODE XREF: sub_402190-E33↑j
.text:00401368                 retn
.text:00401368 ; } // starts at 401350
.text:00401368 ; END OF FUNCTION CHUNK FOR sub_402190
.text:00401368 ; ---------------------------------------------------------------------------
.text:00401369                 align 10h
.text:00401370
.text:00401370 ; =============== S U B R O U T I N E =======================================
.text:00401370
.text:00401370 ; Attributes: bp-based frame
.text:00401370
.text:00401370 ; int __thiscall sub_401370(int, int)
.text:00401370 sub_401370      proc near               ; CODE XREF: _main+52↑p
.text:00401370                                         ; _main+6C↑p ...
.text:00401370
.text:00401370 arg_0           = dword ptr  8
.text:00401370
.text:00401370                 push    ebp
.text:00401371                 mov     ebp, esp
.text:00401373                 push    esi
.text:00401374                 mov     esi, ecx
.text:00401376                 mov     ecx, [ebp+arg_0]
.text:00401379                 push    edi
.text:0040137A                 mov     edi, [ecx+10h]
.text:0040137D                 cmp     edi, ebx
.text:0040137F                 jnb     short loc_40138C
.text:00401381                 push    offset aInvalidStringP ; "invalid string position"
.text:00401386                 call    ds:?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text:0040138C
.text:0040138C loc_40138C:                             ; CODE XREF: sub_401370+F↑j
.text:0040138C                 sub     edi, ebx
.text:0040138E                 cmp     eax, edi
.text:00401390                 jnb     short loc_401394
.text:00401392                 mov     edi, eax
.text:00401394
.text:00401394 loc_401394:                             ; CODE XREF: sub_401370+20↑j
.text:00401394                 cmp     esi, ecx
.text:00401396                 jnz     short loc_4013B4
.text:00401398                 lea     ecx, [edi+ebx]
.text:0040139B                 or      eax, 0FFFFFFFFh
.text:0040139E                 call    sub_4015C0
.text:004013A3                 mov     eax, ebx
.text:004013A5                 xor     ecx, ecx
.text:004013A7                 call    sub_4015C0
.text:004013AC                 pop     edi
.text:004013AD                 mov     eax, esi
.text:004013AF                 pop     esi
.text:004013B0                 pop     ebp
.text:004013B1                 retn    4
.text:004013B4 ; ---------------------------------------------------------------------------
.text:004013B4
.text:004013B4 loc_4013B4:                             ; CODE XREF: sub_401370+26↑j
.text:004013B4                 cmp     edi, 0FFFFFFFEh
.text:004013B7                 jbe     short loc_4013C4
.text:004013B9                 push    offset aStringTooLong ; "string too long"
.text:004013BE                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:004013C4
.text:004013C4 loc_4013C4:                             ; CODE XREF: sub_401370+47↑j
.text:004013C4                 mov     eax, [esi+14h]
.text:004013C7                 cmp     eax, edi
.text:004013C9                 jnb     short loc_4013F2
.text:004013CB                 mov     eax, [esi+10h]
.text:004013CE                 push    eax             ; Size
.text:004013CF                 push    edi             ; Dst
.text:004013D0                 push    esi             ; int
.text:004013D1                 call    sub_4016E0
.text:004013D6                 mov     ecx, [ebp+arg_0]
.text:004013D9                 test    edi, edi
.text:004013DB                 jz      short loc_401442
.text:004013DD
.text:004013DD loc_4013DD:                             ; CODE XREF: sub_401370+84↓j
.text:004013DD                 mov     eax, 10h
.text:004013E2                 cmp     [ecx+14h], eax
.text:004013E5                 jb      short loc_4013E9
.text:004013E7                 mov     ecx, [ecx]
.text:004013E9
.text:004013E9 loc_4013E9:                             ; CODE XREF: sub_401370+75↑j
.text:004013E9                 cmp     [esi+14h], eax
.text:004013EC                 jb      short loc_401416
.text:004013EE                 mov     eax, [esi]
.text:004013F0                 jmp     short loc_401418
.text:004013F2 ; ---------------------------------------------------------------------------
.text:004013F2
.text:004013F2 loc_4013F2:                             ; CODE XREF: sub_401370+59↑j
.text:004013F2                 test    edi, edi
.text:004013F4                 jnz     short loc_4013DD
.text:004013F6                 mov     [esi+10h], edi
.text:004013F9                 cmp     eax, 10h
.text:004013FC                 jb      short loc_40140B
.text:004013FE                 mov     eax, [esi]
.text:00401400                 mov     byte ptr [eax], 0
.text:00401403                 pop     edi
.text:00401404                 mov     eax, esi
.text:00401406                 pop     esi
.text:00401407                 pop     ebp
.text:00401408                 retn    4
.text:0040140B ; ---------------------------------------------------------------------------
.text:0040140B
.text:0040140B loc_40140B:                             ; CODE XREF: sub_401370+8C↑j
.text:0040140B                 mov     eax, esi
.text:0040140D                 pop     edi
.text:0040140E                 mov     byte ptr [eax], 0
.text:00401411                 pop     esi
.text:00401412                 pop     ebp
.text:00401413                 retn    4
.text:00401416 ; ---------------------------------------------------------------------------
.text:00401416
.text:00401416 loc_401416:                             ; CODE XREF: sub_401370+7C↑j
.text:00401416                 mov     eax, esi
.text:00401418
.text:00401418 loc_401418:                             ; CODE XREF: sub_401370+80↑j
.text:00401418                 push    edi             ; Size
.text:00401419                 add     ecx, ebx
.text:0040141B                 push    ecx             ; Src
.text:0040141C                 push    eax             ; Dst
.text:0040141D                 call    memcpy
.text:00401422                 add     esp, 0Ch
.text:00401425                 cmp     dword ptr [esi+14h], 10h
.text:00401429                 mov     [esi+10h], edi
.text:0040142C                 jb      short loc_40143C
.text:0040142E                 mov     eax, [esi]
.text:00401430                 mov     byte ptr [eax+edi], 0
.text:00401434                 pop     edi
.text:00401435                 mov     eax, esi
.text:00401437                 pop     esi
.text:00401438                 pop     ebp
.text:00401439                 retn    4
.text:0040143C ; ---------------------------------------------------------------------------
.text:0040143C
.text:0040143C loc_40143C:                             ; CODE XREF: sub_401370+BC↑j
.text:0040143C                 mov     eax, esi
.text:0040143E                 mov     byte ptr [eax+edi], 0
.text:00401442
.text:00401442 loc_401442:                             ; CODE XREF: sub_401370+6B↑j
.text:00401442                 pop     edi
.text:00401443                 mov     eax, esi
.text:00401445                 pop     esi
.text:00401446                 pop     ebp
.text:00401447                 retn    4
.text:00401447 sub_401370      endp
.text:00401447
.text:00401447 ; ---------------------------------------------------------------------------
.text:0040144A                 align 10h
.text:00401450 ; START OF FUNCTION CHUNK FOR sub_403050
.text:00401450
.text:00401450 loc_401450:                             ; CODE XREF: sub_403050:loc_402DA0↓j
.text:00401450 ; __unwind { // SEH_403050
.text:00401450                 mov     eax, dword_4054D8
.text:00401455                 push    eax
.text:00401456                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040145C                 pop     ecx
.text:0040145D                 retn
.text:0040145D ; } // starts at 401450
.text:0040145D ; END OF FUNCTION CHUNK FOR sub_403050
.text:0040145D ; ---------------------------------------------------------------------------
.text:0040145E                 align 10h
.text:00401460
.text:00401460 ; =============== S U B R O U T I N E =======================================
.text:00401460
.text:00401460
.text:00401460 sub_401460      proc near               ; CODE XREF: sub_402190+DC↓p
.text:00401460                 mov     ecx, [esi+10h]
.text:00401463                 or      eax, 0FFFFFFFFh
.text:00401466                 sub     eax, ecx
.text:00401468                 cmp     eax, 1
.text:0040146B                 ja      short loc_401478
.text:0040146D                 push    offset aStringTooLong ; "string too long"
.text:00401472                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:00401478
.text:00401478 loc_401478:                             ; CODE XREF: sub_401460+B↑j
.text:00401478                 push    edi
.text:00401479                 lea     edi, [ecx+1]
.text:0040147C                 cmp     edi, 0FFFFFFFEh
.text:0040147F                 jbe     short loc_40148C
.text:00401481                 push    offset aStringTooLong ; "string too long"
.text:00401486                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:0040148C
.text:0040148C loc_40148C:                             ; CODE XREF: sub_401460+1F↑j
.text:0040148C                 mov     eax, [esi+14h]
.text:0040148F                 cmp     eax, edi
.text:00401491                 jnb     short loc_4014B0
.text:00401493                 push    ecx             ; Size
.text:00401494                 push    edi             ; Dst
.text:00401495                 push    esi             ; int
.text:00401496                 call    sub_4016E0
.text:0040149B                 test    edi, edi
.text:0040149D                 jz      short loc_4014E9
.text:0040149F
.text:0040149F loc_40149F:                             ; CODE XREF: sub_401460+52↓j
.text:0040149F                 mov     ecx, [esi+10h]
.text:004014A2                 mov     edx, 10h
.text:004014A7                 cmp     [esi+14h], edx
.text:004014AA                 jb      short loc_4014CC
.text:004014AC                 mov     eax, [esi]
.text:004014AE                 jmp     short loc_4014CE
.text:004014B0 ; ---------------------------------------------------------------------------
.text:004014B0
.text:004014B0 loc_4014B0:                             ; CODE XREF: sub_401460+31↑j
.text:004014B0                 test    edi, edi
.text:004014B2                 jnz     short loc_40149F
.text:004014B4                 mov     [esi+10h], edi
.text:004014B7                 cmp     eax, 10h
.text:004014BA                 jb      short loc_4014C5
.text:004014BC                 mov     eax, [esi]
.text:004014BE                 mov     byte ptr [eax], 0
.text:004014C1                 mov     eax, esi
.text:004014C3                 pop     edi
.text:004014C4                 retn
.text:004014C5 ; ---------------------------------------------------------------------------
.text:004014C5
.text:004014C5 loc_4014C5:                             ; CODE XREF: sub_401460+5A↑j
.text:004014C5                 mov     eax, esi
.text:004014C7                 mov     byte ptr [eax], 0
.text:004014CA                 pop     edi
.text:004014CB                 retn
.text:004014CC ; ---------------------------------------------------------------------------
.text:004014CC
.text:004014CC loc_4014CC:                             ; CODE XREF: sub_401460+4A↑j
.text:004014CC                 mov     eax, esi
.text:004014CE
.text:004014CE loc_4014CE:                             ; CODE XREF: sub_401460+4E↑j
.text:004014CE                 mov     [eax+ecx], bl
.text:004014D1                 mov     [esi+10h], edi
.text:004014D4                 cmp     [esi+14h], edx
.text:004014D7                 jb      short loc_4014E3
.text:004014D9                 mov     eax, [esi]
.text:004014DB                 mov     byte ptr [eax+edi], 0
.text:004014DF                 mov     eax, esi
.text:004014E1                 pop     edi
.text:004014E2                 retn
.text:004014E3 ; ---------------------------------------------------------------------------
.text:004014E3
.text:004014E3 loc_4014E3:                             ; CODE XREF: sub_401460+77↑j
.text:004014E3                 mov     eax, esi
.text:004014E5                 mov     byte ptr [eax+edi], 0
.text:004014E9
.text:004014E9 loc_4014E9:                             ; CODE XREF: sub_401460+3D↑j
.text:004014E9                 mov     eax, esi
.text:004014EB                 pop     edi
.text:004014EC                 retn
.text:004014EC sub_401460      endp
.text:004014EC
.text:004014EC ; ---------------------------------------------------------------------------
.text:004014ED                 align 10h
.text:004014F0
.text:004014F0 ; =============== S U B R O U T I N E =======================================
.text:004014F0
.text:004014F0
.text:004014F0 sub_4014F0      proc near               ; CODE XREF: sub_402DC0+34↓p
.text:004014F0                                         ; sub_402DC0+61↓p ...
.text:004014F0                 push    ebx
.text:004014F1                 mov     ebx, eax
.text:004014F3                 test    ebx, ebx
.text:004014F5                 jz      short loc_401542
.text:004014F7                 mov     ecx, [esi+14h]
.text:004014FA                 cmp     ecx, 10h
.text:004014FD                 jb      short loc_401503
.text:004014FF                 mov     eax, [esi]
.text:00401501                 jmp     short loc_401505
.text:00401503 ; ---------------------------------------------------------------------------
.text:00401503
.text:00401503 loc_401503:                             ; CODE XREF: sub_4014F0+D↑j
.text:00401503                 mov     eax, esi
.text:00401505
.text:00401505 loc_401505:                             ; CODE XREF: sub_4014F0+11↑j
.text:00401505                 cmp     ebx, eax
.text:00401507                 jb      short loc_401542
.text:00401509                 cmp     ecx, 10h
.text:0040150C                 jb      short loc_401512
.text:0040150E                 mov     eax, [esi]
.text:00401510                 jmp     short loc_401514
.text:00401512 ; ---------------------------------------------------------------------------
.text:00401512
.text:00401512 loc_401512:                             ; CODE XREF: sub_4014F0+1C↑j
.text:00401512                 mov     eax, esi
.text:00401514
.text:00401514 loc_401514:                             ; CODE XREF: sub_4014F0+20↑j
.text:00401514                 mov     edx, [esi+10h]
.text:00401517                 add     edx, eax
.text:00401519                 cmp     edx, ebx
.text:0040151B                 jbe     short loc_401542
.text:0040151D                 cmp     ecx, 10h
.text:00401520                 jb      short loc_401532
.text:00401522                 mov     eax, [esi]
.text:00401524                 sub     ebx, eax
.text:00401526                 push    esi             ; int
.text:00401527                 mov     eax, edi
.text:00401529                 mov     ecx, esi        ; int
.text:0040152B                 call    sub_401370
.text:00401530                 pop     ebx
.text:00401531                 retn
.text:00401532 ; ---------------------------------------------------------------------------
.text:00401532
.text:00401532 loc_401532:                             ; CODE XREF: sub_4014F0+30↑j
.text:00401532                 mov     eax, esi
.text:00401534                 sub     ebx, eax
.text:00401536                 push    esi             ; int
.text:00401537                 mov     eax, edi
.text:00401539                 mov     ecx, esi        ; int
.text:0040153B                 call    sub_401370
.text:00401540                 pop     ebx
.text:00401541                 retn
.text:00401542 ; ---------------------------------------------------------------------------
.text:00401542
.text:00401542 loc_401542:                             ; CODE XREF: sub_4014F0+5↑j
.text:00401542                                         ; sub_4014F0+17↑j ...
.text:00401542                 cmp     edi, 0FFFFFFFEh
.text:00401545                 jbe     short loc_401552
.text:00401547                 push    offset aStringTooLong ; "string too long"
.text:0040154C                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:00401552
.text:00401552 loc_401552:                             ; CODE XREF: sub_4014F0+55↑j
.text:00401552                 mov     eax, [esi+14h]
.text:00401555                 cmp     eax, edi
.text:00401557                 jnb     short loc_401572
.text:00401559                 mov     eax, [esi+10h]
.text:0040155C                 push    eax             ; Size
.text:0040155D                 push    edi             ; Dst
.text:0040155E                 push    esi             ; int
.text:0040155F                 call    sub_4016E0
.text:00401564                 test    edi, edi
.text:00401566                 jz      short loc_4015B4
.text:00401568
.text:00401568 loc_401568:                             ; CODE XREF: sub_4014F0+84↓j
.text:00401568                 cmp     dword ptr [esi+14h], 10h
.text:0040156C                 jb      short loc_40158E
.text:0040156E                 mov     eax, [esi]
.text:00401570                 jmp     short loc_401590
.text:00401572 ; ---------------------------------------------------------------------------
.text:00401572
.text:00401572 loc_401572:                             ; CODE XREF: sub_4014F0+67↑j
.text:00401572                 test    edi, edi
.text:00401574                 jnz     short loc_401568
.text:00401576                 mov     [esi+10h], edi
.text:00401579                 cmp     eax, 10h
.text:0040157C                 jb      short loc_401587
.text:0040157E                 mov     eax, [esi]
.text:00401580                 mov     byte ptr [eax], 0
.text:00401583                 mov     eax, esi
.text:00401585                 pop     ebx
.text:00401586                 retn
.text:00401587 ; ---------------------------------------------------------------------------
.text:00401587
.text:00401587 loc_401587:                             ; CODE XREF: sub_4014F0+8C↑j
.text:00401587                 mov     eax, esi
.text:00401589                 mov     byte ptr [eax], 0
.text:0040158C                 pop     ebx
.text:0040158D                 retn
.text:0040158E ; ---------------------------------------------------------------------------
.text:0040158E
.text:0040158E loc_40158E:                             ; CODE XREF: sub_4014F0+7C↑j
.text:0040158E                 mov     eax, esi
.text:00401590
.text:00401590 loc_401590:                             ; CODE XREF: sub_4014F0+80↑j
.text:00401590                 push    edi             ; Size
.text:00401591                 push    ebx             ; Src
.text:00401592                 push    eax             ; Dst
.text:00401593                 call    memcpy
.text:00401598                 add     esp, 0Ch
.text:0040159B                 cmp     dword ptr [esi+14h], 10h
.text:0040159F                 mov     [esi+10h], edi
.text:004015A2                 jb      short loc_4015AE
.text:004015A4                 mov     eax, [esi]
.text:004015A6                 mov     byte ptr [eax+edi], 0
.text:004015AA                 mov     eax, esi
.text:004015AC                 pop     ebx
.text:004015AD                 retn
.text:004015AE ; ---------------------------------------------------------------------------
.text:004015AE
.text:004015AE loc_4015AE:                             ; CODE XREF: sub_4014F0+B2↑j
.text:004015AE                 mov     eax, esi
.text:004015B0                 mov     byte ptr [eax+edi], 0
.text:004015B4
.text:004015B4 loc_4015B4:                             ; CODE XREF: sub_4014F0+76↑j
.text:004015B4                 mov     eax, esi
.text:004015B6                 pop     ebx
.text:004015B7                 retn
.text:004015B7 sub_4014F0      endp
.text:004015B7
.text:004015B7 ; ---------------------------------------------------------------------------
.text:004015B8                 align 10h
.text:004015C0
.text:004015C0 ; =============== S U B R O U T I N E =======================================
.text:004015C0
.text:004015C0
.text:004015C0 sub_4015C0      proc near               ; CODE XREF: sub_401370+2E↑p
.text:004015C0                                         ; sub_401370+37↑p ...
.text:004015C0                 push    edi
.text:004015C1                 mov     edi, eax
.text:004015C3                 mov     eax, [esi+10h]
.text:004015C6                 cmp     eax, ecx
.text:004015C8                 jnb     short loc_4015D5
.text:004015CA                 push    offset aInvalidStringP ; "invalid string position"
.text:004015CF                 call    ds:?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text:004015D5
.text:004015D5 loc_4015D5:                             ; CODE XREF: sub_4015C0+8↑j
.text:004015D5                 sub     eax, ecx
.text:004015D7                 cmp     eax, edi
.text:004015D9                 jnb     short loc_4015DD
.text:004015DB                 mov     edi, eax
.text:004015DD
.text:004015DD loc_4015DD:                             ; CODE XREF: sub_4015C0+19↑j
.text:004015DD                 test    edi, edi
.text:004015DF                 jz      short loc_40162E
.text:004015E1                 mov     edx, [esi+14h]
.text:004015E4                 push    ebx
.text:004015E5                 cmp     edx, 10h
.text:004015E8                 jb      short loc_4015EE
.text:004015EA                 mov     ebx, [esi]
.text:004015EC                 jmp     short loc_4015F0
.text:004015EE ; ---------------------------------------------------------------------------
.text:004015EE
.text:004015EE loc_4015EE:                             ; CODE XREF: sub_4015C0+28↑j
.text:004015EE                 mov     ebx, esi
.text:004015F0
.text:004015F0 loc_4015F0:                             ; CODE XREF: sub_4015C0+2C↑j
.text:004015F0                 cmp     edx, 10h
.text:004015F3                 jb      short loc_4015F9
.text:004015F5                 mov     edx, [esi]
.text:004015F7                 jmp     short loc_4015FB
.text:004015F9 ; ---------------------------------------------------------------------------
.text:004015F9
.text:004015F9 loc_4015F9:                             ; CODE XREF: sub_4015C0+33↑j
.text:004015F9                 mov     edx, esi
.text:004015FB
.text:004015FB loc_4015FB:                             ; CODE XREF: sub_4015C0+37↑j
.text:004015FB                 sub     eax, edi
.text:004015FD                 add     ebx, ecx
.text:004015FF                 push    eax             ; Size
.text:00401600                 add     ebx, edi
.text:00401602                 add     edx, ecx
.text:00401604                 push    ebx             ; Src
.text:00401605                 push    edx             ; Dst
.text:00401606                 call    ds:memmove
.text:0040160C                 mov     eax, [esi+10h]
.text:0040160F                 add     esp, 0Ch
.text:00401612                 sub     eax, edi
.text:00401614                 cmp     dword ptr [esi+14h], 10h
.text:00401618                 mov     [esi+10h], eax
.text:0040161B                 pop     ebx
.text:0040161C                 jb      short loc_401628
.text:0040161E                 mov     ecx, [esi]
.text:00401620                 mov     byte ptr [ecx+eax], 0
.text:00401624                 mov     eax, esi
.text:00401626                 pop     edi
.text:00401627                 retn
.text:00401628 ; ---------------------------------------------------------------------------
.text:00401628
.text:00401628 loc_401628:                             ; CODE XREF: sub_4015C0+5C↑j
.text:00401628                 mov     ecx, esi
.text:0040162A                 mov     byte ptr [ecx+eax], 0
.text:0040162E
.text:0040162E loc_40162E:                             ; CODE XREF: sub_4015C0+1F↑j
.text:0040162E                 mov     eax, esi
.text:00401630                 pop     edi
.text:00401631                 retn
.text:00401631 sub_4015C0      endp
.text:00401631
.text:00401631 ; ---------------------------------------------------------------------------
.text:00401632                 align 10h
.text:00401640
.text:00401640 ; =============== S U B R O U T I N E =======================================
.text:00401640
.text:00401640 ; Attributes: bp-based frame
.text:00401640
.text:00401640 sub_401640      proc near               ; CODE XREF: sub_403050+37↓p
.text:00401640
.text:00401640 var_4           = byte ptr -4
.text:00401640 arg_0           = dword ptr  8
.text:00401640 arg_4           = dword ptr  0Ch
.text:00401640
.text:00401640                 push    ebp
.text:00401641                 mov     ebp, esp
.text:00401643                 push    ecx
.text:00401644                 mov     ecx, [ebp+arg_0]
.text:00401647                 mov     eax, dword_4054D8
.text:0040164C                 mov     edx, [ebp+arg_4]
.text:0040164F                 cmp     ecx, [eax]
.text:00401651                 jnz     short loc_40166D
.text:00401653                 cmp     edx, eax
.text:00401655                 jnz     short loc_40166D
.text:00401657                 call    sub_401AB0
.text:0040165C                 mov     eax, dword_4054D8
.text:00401661                 mov     ecx, [eax]
.text:00401663                 mov     eax, esi
.text:00401665                 mov     [esi], ecx
.text:00401667                 mov     esp, ebp
.text:00401669                 pop     ebp
.text:0040166A                 retn    8
.text:0040166D ; ---------------------------------------------------------------------------
.text:0040166D
.text:0040166D loc_40166D:                             ; CODE XREF: sub_401640+11↑j
.text:0040166D                                         ; sub_401640+15↑j
.text:0040166D                 cmp     ecx, edx
.text:0040166F                 jz      short loc_4016D0
.text:00401671
.text:00401671 loc_401671:                             ; CODE XREF: sub_401640+8E↓j
.text:00401671                 cmp     byte ptr [ecx+0Fh], 0
.text:00401675                 mov     edx, ecx
.text:00401677                 jnz     short loc_4016BE
.text:00401679                 mov     eax, [ecx+8]
.text:0040167C                 cmp     byte ptr [eax+0Fh], 0
.text:00401680                 jnz     short loc_40169F
.text:00401682                 mov     ecx, eax
.text:00401684                 mov     eax, [ecx]
.text:00401686                 cmp     byte ptr [eax+0Fh], 0
.text:0040168A                 jnz     short loc_40169A
.text:0040168C                 lea     esp, [esp+0]
.text:00401690
.text:00401690 loc_401690:                             ; CODE XREF: sub_401640+58↓j
.text:00401690                 mov     ecx, eax
.text:00401692                 mov     eax, [ecx]
.text:00401694                 cmp     byte ptr [eax+0Fh], 0
.text:00401698                 jz      short loc_401690
.text:0040169A
.text:0040169A loc_40169A:                             ; CODE XREF: sub_401640+4A↑j
.text:0040169A                 mov     [ebp+arg_0], ecx
.text:0040169D                 jmp     short loc_4016BE
.text:0040169F ; ---------------------------------------------------------------------------
.text:0040169F
.text:0040169F loc_40169F:                             ; CODE XREF: sub_401640+40↑j
.text:0040169F                 mov     eax, [ecx+4]
.text:004016A2                 cmp     byte ptr [eax+0Fh], 0
.text:004016A6                 jnz     short loc_4016BB
.text:004016A8
.text:004016A8 loc_4016A8:                             ; CODE XREF: sub_401640+79↓j
.text:004016A8                 cmp     ecx, [eax+8]
.text:004016AB                 jnz     short loc_4016BB
.text:004016AD                 mov     ecx, eax
.text:004016AF                 mov     [ebp+arg_0], ecx
.text:004016B2                 mov     eax, [eax+4]
.text:004016B5                 cmp     byte ptr [eax+0Fh], 0
.text:004016B9                 jz      short loc_4016A8
.text:004016BB
.text:004016BB loc_4016BB:                             ; CODE XREF: sub_401640+66↑j
.text:004016BB                                         ; sub_401640+6B↑j
.text:004016BB                 mov     [ebp+arg_0], eax
.text:004016BE
.text:004016BE loc_4016BE:                             ; CODE XREF: sub_401640+37↑j
.text:004016BE                                         ; sub_401640+5D↑j
.text:004016BE                 push    edx
.text:004016BF                 lea     edx, [ebp+var_4]
.text:004016C2                 push    edx
.text:004016C3                 call    sub_401850
.text:004016C8                 mov     ecx, [ebp+arg_0]
.text:004016CB                 cmp     ecx, [ebp+arg_4]
.text:004016CE                 jnz     short loc_401671
.text:004016D0
.text:004016D0 loc_4016D0:                             ; CODE XREF: sub_401640+2F↑j
.text:004016D0                 mov     eax, esi
.text:004016D2                 mov     [esi], ecx
.text:004016D4                 mov     esp, ebp
.text:004016D6                 pop     ebp
.text:004016D7                 retn    8
.text:004016D7 sub_401640      endp
.text:004016D7
.text:004016D7 ; ---------------------------------------------------------------------------
.text:004016DA                 align 10h
.text:004016E0
.text:004016E0 ; =============== S U B R O U T I N E =======================================
.text:004016E0
.text:004016E0 ; Attributes: bp-based frame
.text:004016E0
.text:004016E0 ; int __stdcall sub_4016E0(int, void *Dst, size_t Size)
.text:004016E0 sub_4016E0      proc near               ; CODE XREF: sub_401370+61↑p
.text:004016E0                                         ; sub_401460+36↑p ...
.text:004016E0
.text:004016E0 var_24          = dword ptr -24h
.text:004016E0 var_18          = dword ptr -18h
.text:004016E0 var_14          = dword ptr -14h
.text:004016E0 var_10          = dword ptr -10h
.text:004016E0 var_C           = dword ptr -0Ch
.text:004016E0 var_4           = dword ptr -4
.text:004016E0 arg_0           = dword ptr  8
.text:004016E0 Dst             = dword ptr  0Ch
.text:004016E0 Size            = dword ptr  10h
.text:004016E0
.text:004016E0 ; FUNCTION CHUNK AT .text:00402C90 SIZE 0000001B BYTES
.text:004016E0
.text:004016E0 ; __unwind { // SEH_4016E0
.text:004016E0                 push    ebp
.text:004016E1                 mov     ebp, esp
.text:004016E3                 push    0FFFFFFFFh
.text:004016E5                 push    offset SEH_4016E0
.text:004016EA                 mov     eax, large fs:0
.text:004016F0                 push    eax
.text:004016F1                 sub     esp, 18h
.text:004016F4                 push    ebx
.text:004016F5                 push    esi
.text:004016F6                 push    edi
.text:004016F7                 mov     eax, ___security_cookie
.text:004016FC                 xor     eax, ebp
.text:004016FE                 push    eax
.text:004016FF                 lea     eax, [ebp+var_C]
.text:00401702                 mov     large fs:0, eax
.text:00401708                 mov     [ebp+var_10], esp
.text:0040170B                 mov     eax, [ebp+Dst]
.text:0040170E                 mov     edi, [ebp+arg_0]
.text:00401711                 mov     esi, eax
.text:00401713                 or      esi, 0Fh
.text:00401716                 cmp     esi, 0FFFFFFFEh
.text:00401719                 jbe     short loc_40171F
.text:0040171B                 mov     esi, eax
.text:0040171D                 jmp     short loc_401746
.text:0040171F ; ---------------------------------------------------------------------------
.text:0040171F
.text:0040171F loc_40171F:                             ; CODE XREF: sub_4016E0+39↑j
.text:0040171F                 mov     ebx, [edi+14h]
.text:00401722                 mov     eax, 0AAAAAAABh
.text:00401727                 mul     esi
.text:00401729                 mov     ecx, ebx
.text:0040172B                 shr     ecx, 1
.text:0040172D                 shr     edx, 1
.text:0040172F                 cmp     ecx, edx
.text:00401731                 jbe     short loc_401746
.text:00401733                 mov     eax, 0FFFFFFFEh
.text:00401738                 sub     eax, ecx
.text:0040173A                 lea     esi, [ecx+ebx]
.text:0040173D                 cmp     ebx, eax
.text:0040173F                 jbe     short loc_401746
.text:00401741                 mov     esi, 0FFFFFFFEh
.text:00401746
.text:00401746 loc_401746:                             ; CODE XREF: sub_4016E0+3D↑j
.text:00401746                                         ; sub_4016E0+51↑j ...
.text:00401746                 xor     eax, eax
.text:00401748                 lea     ecx, [esi+1]
.text:0040174B ;   try {
.text:0040174B                 mov     [ebp+var_4], eax
.text:0040174E                 cmp     ecx, eax
.text:00401750                 jbe     short loc_401765
.text:00401752                 cmp     ecx, 0FFFFFFFFh
.text:00401755                 ja      short loc_40176A
.text:00401757                 push    ecx
.text:00401758                 call    ds:??2@YAPAXI@Z ; operator new(uint)
.text:0040175E                 add     esp, 4
.text:00401761                 test    eax, eax
.text:00401763                 jz      short loc_40176A
.text:00401765
.text:00401765 loc_401765:                             ; CODE XREF: sub_4016E0+70↑j
.text:00401765                 mov     [ebp+Dst], eax
.text:00401768                 jmp     short loc_4017B7
.text:0040176A ; ---------------------------------------------------------------------------
.text:0040176A
.text:0040176A loc_40176A:                             ; CODE XREF: sub_4016E0+75↑j
.text:0040176A                                         ; sub_4016E0+83↑j
.text:0040176A                 lea     ecx, [ebp+var_14]
.text:0040176D                 push    ecx
.text:0040176E                 lea     ecx, [ebp+var_24]
.text:00401771                 mov     [ebp+var_14], 0
.text:00401778                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:0040177E                 push    offset __TI2?AVbad_alloc@std@@ ; throw info for 'class std::bad_alloc'
.text:00401783                 lea     edx, [ebp+var_24]
.text:00401786                 push    edx
.text:00401787                 mov     [ebp+var_24], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:0040178E                 call    _CxxThrowException
.text:00401793 ; ---------------------------------------------------------------------------
.text:00401793
.text:00401793 loc_401793:                             ; DATA XREF: .rdata:stru_4045D8↓o
.text:00401793 ;   catch(...) // owned by 40174B
.text:00401793                 mov     eax, [ebp+Dst]
.text:00401796                 lea     ecx, [eax+1]
.text:00401799                 mov     [ebp+var_10], esp
.text:0040179C                 mov     [ebp+var_18], eax
.text:0040179C ;   } // starts at 40174B
.text:0040179F ;   try {
.text:0040179F                 mov     byte ptr [ebp+var_4], 2
.text:004017A3                 call    sub_401B20
.text:004017A8                 mov     [ebp+Dst], eax
.text:004017AB                 mov     eax, offset loc_4017B1
.text:004017B0                 retn
.text:004017B1 ; ---------------------------------------------------------------------------
.text:004017B1
.text:004017B1 loc_4017B1:                             ; CODE XREF: sub_4016E0+D0↑j
.text:004017B1                                         ; DATA XREF: sub_4016E0+CB↑o
.text:004017B1                 mov     edi, [ebp+arg_0]
.text:004017B4                 mov     esi, [ebp+var_18]
.text:004017B7
.text:004017B7 loc_4017B7:                             ; CODE XREF: sub_4016E0+88↑j
.text:004017B7                 mov     ebx, [ebp+Size]
.text:004017BA                 test    ebx, ebx
.text:004017BC                 jz      short loc_4017D8
.text:004017BE                 cmp     dword ptr [edi+14h], 10h
.text:004017C2                 jb      short loc_4017C8
.text:004017C4                 mov     eax, [edi]
.text:004017C6                 jmp     short loc_4017CA
.text:004017C8 ; ---------------------------------------------------------------------------
.text:004017C8
.text:004017C8 loc_4017C8:                             ; CODE XREF: sub_4016E0+E2↑j
.text:004017C8                 mov     eax, edi
.text:004017CA
.text:004017CA loc_4017CA:                             ; CODE XREF: sub_4016E0+E6↑j
.text:004017CA                 push    ebx             ; Size
.text:004017CB                 push    eax             ; Src
.text:004017CC                 mov     eax, [ebp+Dst]
.text:004017CF                 push    eax             ; Dst
.text:004017D0                 call    memcpy
.text:004017D5                 add     esp, 0Ch
.text:004017D8
.text:004017D8 loc_4017D8:                             ; CODE XREF: sub_4016E0+DC↑j
.text:004017D8                 cmp     dword ptr [edi+14h], 10h
.text:004017DC                 jb      short loc_4017EA
.text:004017DE                 mov     ecx, [edi]
.text:004017E0                 push    ecx
.text:004017E1                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004017E7                 add     esp, 4
.text:004017EA
.text:004017EA loc_4017EA:                             ; CODE XREF: sub_4016E0+FC↑j
.text:004017EA                 mov     eax, [ebp+Dst]
.text:004017ED                 mov     byte ptr [edi], 0
.text:004017F0                 mov     [edi], eax
.text:004017F2                 mov     [edi+14h], esi
.text:004017F5                 mov     [edi+10h], ebx
.text:004017F8                 cmp     esi, 10h
.text:004017FB                 jb      short loc_4017FF
.text:004017FD                 mov     edi, eax
.text:004017FF
.text:004017FF loc_4017FF:                             ; CODE XREF: sub_4016E0+11B↑j
.text:004017FF                 mov     byte ptr [edi+ebx], 0
.text:00401803                 mov     ecx, [ebp+var_C]
.text:00401806                 mov     large fs:0, ecx
.text:0040180D                 pop     ecx
.text:0040180E                 pop     edi
.text:0040180F                 pop     esi
.text:00401810                 pop     ebx
.text:00401811                 mov     esp, ebp
.text:00401813                 pop     ebp
.text:00401814                 retn    0Ch
.text:00401817 ; ---------------------------------------------------------------------------
.text:00401817
.text:00401817 loc_401817:                             ; DATA XREF: .rdata:stru_4045C8↓o
.text:00401817 ;   catch(...) // owned by 40179F
.text:00401817                 mov     esi, [ebp+arg_0]
.text:0040181A                 cmp     dword ptr [esi+14h], 10h
.text:0040181E                 jb      short loc_40182C
.text:00401820                 mov     edx, [esi]
.text:00401822                 push    edx
.text:00401823                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00401829                 add     esp, 4
.text:0040182C
.text:0040182C loc_40182C:                             ; CODE XREF: sub_4016E0+13E↑j
.text:0040182C                 push    0
.text:0040182E                 mov     dword ptr [esi+14h], 0Fh
.text:00401835                 mov     dword ptr [esi+10h], 0
.text:0040183C                 push    0
.text:0040183E                 mov     byte ptr [esi], 0
.text:00401841                 call    _CxxThrowException
.text:00401841 ;   } // starts at 40179F
.text:00401841 ; } // starts at 4016E0
.text:00401841 sub_4016E0      endp
.text:00401841
.text:00401841 ; ---------------------------------------------------------------------------
.text:00401846                 align 10h
.text:00401850
.text:00401850 ; =============== S U B R O U T I N E =======================================
.text:00401850
.text:00401850 ; Attributes: bp-based frame
.text:00401850
.text:00401850 sub_401850      proc near               ; CODE XREF: sub_401640+83↑p
.text:00401850
.text:00401850 var_4           = dword ptr -4
.text:00401850 arg_0           = dword ptr  8
.text:00401850 arg_4           = dword ptr  0Ch
.text:00401850
.text:00401850                 push    ebp
.text:00401851                 mov     ebp, esp
.text:00401853                 push    ecx
.text:00401854                 mov     eax, [ebp+arg_4]
.text:00401857                 cmp     byte ptr [eax+0Fh], 0
.text:0040185B                 jz      short loc_401868
.text:0040185D                 push    offset aInvalidMapSetT ; "invalid map/set<T> iterator"
.text:00401862                 call    ds:?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text:00401868
.text:00401868 loc_401868:                             ; CODE XREF: sub_401850+B↑j
.text:00401868                 push    ebx
.text:00401869                 push    esi
.text:0040186A                 mov     ebx, eax
.text:0040186C                 push    edi
.text:0040186D                 lea     eax, [ebp+arg_4]
.text:00401870                 mov     [ebp+var_4], ebx
.text:00401873                 call    sub_401C70
.text:00401878                 mov     ecx, [ebx]
.text:0040187A                 cmp     byte ptr [ecx+0Fh], 0
.text:0040187E                 jz      short loc_401885
.text:00401880                 mov     edi, [ebx+8]
.text:00401883                 jmp     short loc_40189C
.text:00401885 ; ---------------------------------------------------------------------------
.text:00401885
.text:00401885 loc_401885:                             ; CODE XREF: sub_401850+2E↑j
.text:00401885                 mov     eax, [ebx+8]
.text:00401888                 cmp     byte ptr [eax+0Fh], 0
.text:0040188C                 jz      short loc_401892
.text:0040188E                 mov     edi, ecx
.text:00401890                 jmp     short loc_40189C
.text:00401892 ; ---------------------------------------------------------------------------
.text:00401892
.text:00401892 loc_401892:                             ; CODE XREF: sub_401850+3C↑j
.text:00401892                 mov     eax, [ebp+arg_4]
.text:00401895                 mov     edi, [eax+8]
.text:00401898                 cmp     eax, ebx
.text:0040189A                 jnz     short loc_401918
.text:0040189C
.text:0040189C loc_40189C:                             ; CODE XREF: sub_401850+33↑j
.text:0040189C                                         ; sub_401850+40↑j
.text:0040189C                 cmp     byte ptr [edi+0Fh], 0
.text:004018A0                 mov     esi, [ebx+4]
.text:004018A3                 jnz     short loc_4018A8
.text:004018A5                 mov     [edi+4], esi
.text:004018A8
.text:004018A8 loc_4018A8:                             ; CODE XREF: sub_401850+53↑j
.text:004018A8                 mov     eax, dword_4054D8
.text:004018AD                 cmp     [eax+4], ebx
.text:004018B0                 jnz     short loc_4018B7
.text:004018B2                 mov     [eax+4], edi
.text:004018B5                 jmp     short loc_4018C2
.text:004018B7 ; ---------------------------------------------------------------------------
.text:004018B7
.text:004018B7 loc_4018B7:                             ; CODE XREF: sub_401850+60↑j
.text:004018B7                 cmp     [esi], ebx
.text:004018B9                 jnz     short loc_4018BF
.text:004018BB                 mov     [esi], edi
.text:004018BD                 jmp     short loc_4018C2
.text:004018BF ; ---------------------------------------------------------------------------
.text:004018BF
.text:004018BF loc_4018BF:                             ; CODE XREF: sub_401850+69↑j
.text:004018BF                 mov     [esi+8], edi
.text:004018C2
.text:004018C2 loc_4018C2:                             ; CODE XREF: sub_401850+65↑j
.text:004018C2                                         ; sub_401850+6D↑j
.text:004018C2                 mov     edx, dword_4054D8
.text:004018C8                 cmp     [edx], ebx
.text:004018CA                 jnz     short loc_4018EC
.text:004018CC                 cmp     byte ptr [edi+0Fh], 0
.text:004018D0                 jz      short loc_4018D6
.text:004018D2                 mov     ecx, esi
.text:004018D4                 jmp     short loc_4018EA
.text:004018D6 ; ---------------------------------------------------------------------------
.text:004018D6
.text:004018D6 loc_4018D6:                             ; CODE XREF: sub_401850+80↑j
.text:004018D6                 mov     eax, [edi]
.text:004018D8                 cmp     byte ptr [eax+0Fh], 0
.text:004018DC                 mov     ecx, edi
.text:004018DE                 jnz     short loc_4018EA
.text:004018E0
.text:004018E0 loc_4018E0:                             ; CODE XREF: sub_401850+98↓j
.text:004018E0                 mov     ecx, eax
.text:004018E2                 mov     eax, [ecx]
.text:004018E4                 cmp     byte ptr [eax+0Fh], 0
.text:004018E8                 jz      short loc_4018E0
.text:004018EA
.text:004018EA loc_4018EA:                             ; CODE XREF: sub_401850+84↑j
.text:004018EA                                         ; sub_401850+8E↑j
.text:004018EA                 mov     [edx], ecx
.text:004018EC
.text:004018EC loc_4018EC:                             ; CODE XREF: sub_401850+7A↑j
.text:004018EC                 mov     ecx, dword_4054D8
.text:004018F2                 cmp     [ecx+8], ebx
.text:004018F5                 jnz     short loc_401972
.text:004018F7                 cmp     byte ptr [edi+0Fh], 0
.text:004018FB                 jz      short loc_401906
.text:004018FD                 mov     eax, esi
.text:004018FF                 mov     edx, ecx
.text:00401901                 mov     [edx+8], eax
.text:00401904                 jmp     short loc_401972
.text:00401906 ; ---------------------------------------------------------------------------
.text:00401906
.text:00401906 loc_401906:                             ; CODE XREF: sub_401850+AB↑j
.text:00401906                 mov     eax, edi
.text:00401908                 call    sub_401C50
.text:0040190D                 mov     edx, dword_4054D8
.text:00401913                 mov     [edx+8], eax
.text:00401916                 jmp     short loc_401972
.text:00401918 ; ---------------------------------------------------------------------------
.text:00401918
.text:00401918 loc_401918:                             ; CODE XREF: sub_401850+4A↑j
.text:00401918                 mov     [ecx+4], eax
.text:0040191B                 mov     ecx, [ebx]
.text:0040191D                 mov     [eax], ecx
.text:0040191F                 cmp     eax, [ebx+8]
.text:00401922                 jnz     short loc_401928
.text:00401924                 mov     esi, eax
.text:00401926                 jmp     short loc_401942
.text:00401928 ; ---------------------------------------------------------------------------
.text:00401928
.text:00401928 loc_401928:                             ; CODE XREF: sub_401850+D2↑j
.text:00401928                 cmp     byte ptr [edi+0Fh], 0
.text:0040192C                 mov     esi, [eax+4]
.text:0040192F                 jnz     short loc_401934
.text:00401931                 mov     [edi+4], esi
.text:00401934
.text:00401934 loc_401934:                             ; CODE XREF: sub_401850+DF↑j
.text:00401934                 mov     [esi], edi
.text:00401936                 mov     ecx, [ebx+8]
.text:00401939                 mov     [eax+8], ecx
.text:0040193C                 mov     edx, [ebx+8]
.text:0040193F                 mov     [edx+4], eax
.text:00401942
.text:00401942 loc_401942:                             ; CODE XREF: sub_401850+D6↑j
.text:00401942                 mov     ecx, dword_4054D8
.text:00401948                 cmp     [ecx+4], ebx
.text:0040194B                 jnz     short loc_401952
.text:0040194D                 mov     [ecx+4], eax
.text:00401950                 jmp     short loc_401960
.text:00401952 ; ---------------------------------------------------------------------------
.text:00401952
.text:00401952 loc_401952:                             ; CODE XREF: sub_401850+FB↑j
.text:00401952                 mov     ecx, [ebx+4]
.text:00401955                 cmp     [ecx], ebx
.text:00401957                 jnz     short loc_40195D
.text:00401959                 mov     [ecx], eax
.text:0040195B                 jmp     short loc_401960
.text:0040195D ; ---------------------------------------------------------------------------
.text:0040195D
.text:0040195D loc_40195D:                             ; CODE XREF: sub_401850+107↑j
.text:0040195D                 mov     [ecx+8], eax
.text:00401960
.text:00401960 loc_401960:                             ; CODE XREF: sub_401850+100↑j
.text:00401960                                         ; sub_401850+10B↑j
.text:00401960                 mov     ecx, [ebx+4]
.text:00401963                 mov     [eax+4], ecx
.text:00401966                 mov     dl, [ebx+0Eh]
.text:00401969                 mov     cl, [eax+0Eh]
.text:0040196C                 mov     [eax+0Eh], dl
.text:0040196F                 mov     [ebx+0Eh], cl
.text:00401972
.text:00401972 loc_401972:                             ; CODE XREF: sub_401850+A5↑j
.text:00401972                                         ; sub_401850+B4↑j ...
.text:00401972                 mov     eax, [ebp+var_4]
.text:00401975                 mov     ebx, 1
.text:0040197A                 cmp     [eax+0Eh], bl
.text:0040197D                 jnz     loc_401A76
.text:00401983                 mov     ecx, dword_4054D8
.text:00401989                 cmp     edi, [ecx+4]
.text:0040198C                 jz      loc_401A73
.text:00401992
.text:00401992 loc_401992:                             ; CODE XREF: sub_401850+1EE↓j
.text:00401992                 cmp     [edi+0Eh], bl
.text:00401995                 jnz     loc_401A73
.text:0040199B                 mov     ecx, [esi]
.text:0040199D                 cmp     edi, ecx
.text:0040199F                 jnz     short loc_401A01
.text:004019A1                 mov     ecx, [esi+8]
.text:004019A4                 cmp     byte ptr [ecx+0Eh], 0
.text:004019A8                 jnz     short loc_4019BB
.text:004019AA                 mov     [ecx+0Eh], bl
.text:004019AD                 mov     ecx, esi
.text:004019AF                 mov     byte ptr [esi+0Eh], 0
.text:004019B3                 call    sub_401BB0
.text:004019B8                 mov     ecx, [esi+8]
.text:004019BB
.text:004019BB loc_4019BB:                             ; CODE XREF: sub_401850+158↑j
.text:004019BB                 cmp     byte ptr [ecx+0Fh], 0
.text:004019BF                 jnz     short loc_401A30
.text:004019C1                 mov     edx, [ecx]
.text:004019C3                 cmp     [edx+0Eh], bl
.text:004019C6                 jnz     short loc_4019D0
.text:004019C8                 mov     eax, [ecx+8]
.text:004019CB                 cmp     [eax+0Eh], bl
.text:004019CE                 jz      short loc_401A2C
.text:004019D0
.text:004019D0 loc_4019D0:                             ; CODE XREF: sub_401850+176↑j
.text:004019D0                 mov     edx, [ecx+8]
.text:004019D3                 cmp     [edx+0Eh], bl
.text:004019D6                 jnz     short loc_4019E9
.text:004019D8                 mov     eax, [ecx]
.text:004019DA                 mov     [eax+0Eh], bl
.text:004019DD                 mov     byte ptr [ecx+0Eh], 0
.text:004019E1                 call    sub_401C00
.text:004019E6                 mov     ecx, [esi+8]
.text:004019E9
.text:004019E9 loc_4019E9:                             ; CODE XREF: sub_401850+186↑j
.text:004019E9                 mov     dl, [esi+0Eh]
.text:004019EC                 mov     [ecx+0Eh], dl
.text:004019EF                 mov     [esi+0Eh], bl
.text:004019F2                 mov     eax, [ecx+8]
.text:004019F5                 mov     ecx, esi
.text:004019F7                 mov     [eax+0Eh], bl
.text:004019FA                 call    sub_401BB0
.text:004019FF                 jmp     short loc_401A73
.text:00401A01 ; ---------------------------------------------------------------------------
.text:00401A01
.text:00401A01 loc_401A01:                             ; CODE XREF: sub_401850+14F↑j
.text:00401A01                 cmp     byte ptr [ecx+0Eh], 0
.text:00401A05                 jnz     short loc_401A17
.text:00401A07                 mov     [ecx+0Eh], bl
.text:00401A0A                 mov     ecx, esi
.text:00401A0C                 mov     byte ptr [esi+0Eh], 0
.text:00401A10                 call    sub_401C00
.text:00401A15                 mov     ecx, [esi]
.text:00401A17
.text:00401A17 loc_401A17:                             ; CODE XREF: sub_401850+1B5↑j
.text:00401A17                 cmp     byte ptr [ecx+0Fh], 0
.text:00401A1B                 jnz     short loc_401A30
.text:00401A1D                 mov     edx, [ecx+8]
.text:00401A20                 cmp     [edx+0Eh], bl
.text:00401A23                 jnz     short loc_401A46
.text:00401A25                 mov     eax, [ecx]
.text:00401A27                 cmp     [eax+0Eh], bl
.text:00401A2A                 jnz     short loc_401A46
.text:00401A2C
.text:00401A2C loc_401A2C:                             ; CODE XREF: sub_401850+17E↑j
.text:00401A2C                 mov     byte ptr [ecx+0Eh], 0
.text:00401A30
.text:00401A30 loc_401A30:                             ; CODE XREF: sub_401850+16F↑j
.text:00401A30                                         ; sub_401850+1CB↑j
.text:00401A30                 mov     ecx, dword_4054D8
.text:00401A36                 mov     edi, esi
.text:00401A38                 mov     esi, [esi+4]
.text:00401A3B                 cmp     edi, [ecx+4]
.text:00401A3E                 jnz     loc_401992
.text:00401A44                 jmp     short loc_401A73
.text:00401A46 ; ---------------------------------------------------------------------------
.text:00401A46
.text:00401A46 loc_401A46:                             ; CODE XREF: sub_401850+1D3↑j
.text:00401A46                                         ; sub_401850+1DA↑j
.text:00401A46                 mov     edx, [ecx]
.text:00401A48                 cmp     [edx+0Eh], bl
.text:00401A4B                 jnz     short loc_401A5E
.text:00401A4D                 mov     eax, [ecx+8]
.text:00401A50                 mov     [eax+0Eh], bl
.text:00401A53                 mov     byte ptr [ecx+0Eh], 0
.text:00401A57                 call    sub_401BB0
.text:00401A5C                 mov     ecx, [esi]
.text:00401A5E
.text:00401A5E loc_401A5E:                             ; CODE XREF: sub_401850+1FB↑j
.text:00401A5E                 mov     dl, [esi+0Eh]
.text:00401A61                 mov     [ecx+0Eh], dl
.text:00401A64                 mov     [esi+0Eh], bl
.text:00401A67                 mov     eax, [ecx]
.text:00401A69                 mov     ecx, esi
.text:00401A6B                 mov     [eax+0Eh], bl
.text:00401A6E                 call    sub_401C00
.text:00401A73
.text:00401A73 loc_401A73:                             ; CODE XREF: sub_401850+13C↑j
.text:00401A73                                         ; sub_401850+145↑j ...
.text:00401A73                 mov     [edi+0Eh], bl
.text:00401A76
.text:00401A76 loc_401A76:                             ; CODE XREF: sub_401850+12D↑j
.text:00401A76                 mov     ecx, [ebp+var_4]
.text:00401A79                 push    ecx
.text:00401A7A                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00401A80                 add     esp, 4
.text:00401A83                 cmp     dword_4054DC, 0
.text:00401A8A                 jbe     short loc_401A92
.text:00401A8C                 sub     dword_4054DC, ebx
.text:00401A92
.text:00401A92 loc_401A92:                             ; CODE XREF: sub_401850+23A↑j
.text:00401A92                 mov     edx, [ebp+arg_4]
.text:00401A95                 mov     eax, [ebp+arg_0]
.text:00401A98                 pop     edi
.text:00401A99                 pop     esi
.text:00401A9A                 mov     [eax], edx
.text:00401A9C                 pop     ebx
.text:00401A9D                 mov     esp, ebp
.text:00401A9F                 pop     ebp
.text:00401AA0                 retn    8
.text:00401AA0 sub_401850      endp
.text:00401AA0
.text:00401AA0 ; ---------------------------------------------------------------------------
.text:00401AA3                 align 10h
.text:00401AB0
.text:00401AB0 ; =============== S U B R O U T I N E =======================================
.text:00401AB0
.text:00401AB0
.text:00401AB0 sub_401AB0      proc near               ; CODE XREF: sub_401640+17↑p
.text:00401AB0                 mov     eax, dword_4054D8
.text:00401AB5                 push    esi
.text:00401AB6                 push    edi
.text:00401AB7                 mov     edi, [eax+4]
.text:00401ABA                 cmp     byte ptr [edi+0Fh], 0
.text:00401ABE                 mov     esi, edi
.text:00401AC0                 jnz     short loc_401AF4
.text:00401AC2                 push    ebx
.text:00401AC3                 mov     ebx, ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00401AC9                 lea     esp, [esp+0]
.text:00401AD0
.text:00401AD0 loc_401AD0:                             ; CODE XREF: sub_401AB0+3C↓j
.text:00401AD0                 mov     eax, [esi+8]
.text:00401AD3                 push    eax
.text:00401AD4                 mov     ecx, offset unk_4054D4
.text:00401AD9                 call    sub_401B70
.text:00401ADE                 mov     esi, [esi]
.text:00401AE0                 push    edi
.text:00401AE1                 call    ebx ; operator delete(void *) ; operator delete(void *)
.text:00401AE3                 add     esp, 4
.text:00401AE6                 cmp     byte ptr [esi+0Fh], 0
.text:00401AEA                 mov     edi, esi
.text:00401AEC                 jz      short loc_401AD0
.text:00401AEE                 mov     eax, dword_4054D8
.text:00401AF3                 pop     ebx
.text:00401AF4
.text:00401AF4 loc_401AF4:                             ; CODE XREF: sub_401AB0+10↑j
.text:00401AF4                 mov     [eax+4], eax
.text:00401AF7                 mov     eax, dword_4054D8
.text:00401AFC                 mov     [eax], eax
.text:00401AFE                 mov     eax, dword_4054D8
.text:00401B03                 pop     edi
.text:00401B04                 mov     [eax+8], eax
.text:00401B07                 mov     dword_4054DC, 0
.text:00401B11                 pop     esi
.text:00401B12                 retn
.text:00401B12 sub_401AB0      endp
.text:00401B12
.text:00401B12 ; ---------------------------------------------------------------------------
.text:00401B13                 align 10h
.text:00401B20
.text:00401B20 ; =============== S U B R O U T I N E =======================================
.text:00401B20
.text:00401B20 ; Attributes: bp-based frame
.text:00401B20
.text:00401B20 sub_401B20      proc near               ; CODE XREF: sub_4016E0+C3↑p
.text:00401B20
.text:00401B20 var_10          = dword ptr -10h
.text:00401B20 var_4           = dword ptr -4
.text:00401B20
.text:00401B20                 push    ebp
.text:00401B21                 mov     ebp, esp
.text:00401B23                 sub     esp, 10h
.text:00401B26                 xor     eax, eax
.text:00401B28                 test    ecx, ecx
.text:00401B2A                 jz      short loc_401B68
.text:00401B2C                 cmp     ecx, 0FFFFFFFFh
.text:00401B2F                 ja      short loc_401B3F
.text:00401B31                 push    ecx
.text:00401B32                 call    ds:??2@YAPAXI@Z ; operator new(uint)
.text:00401B38                 add     esp, 4
.text:00401B3B                 test    eax, eax
.text:00401B3D                 jnz     short loc_401B68
.text:00401B3F
.text:00401B3F loc_401B3F:                             ; CODE XREF: sub_401B20+F↑j
.text:00401B3F                 lea     eax, [ebp+var_4]
.text:00401B42                 push    eax
.text:00401B43                 lea     ecx, [ebp+var_10]
.text:00401B46                 mov     [ebp+var_4], 0
.text:00401B4D                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:00401B53                 push    offset __TI2?AVbad_alloc@std@@ ; throw info for 'class std::bad_alloc'
.text:00401B58                 lea     ecx, [ebp+var_10]
.text:00401B5B                 push    ecx
.text:00401B5C                 mov     [ebp+var_10], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:00401B63                 call    _CxxThrowException
.text:00401B68 ; ---------------------------------------------------------------------------
.text:00401B68
.text:00401B68 loc_401B68:                             ; CODE XREF: sub_401B20+A↑j
.text:00401B68                                         ; sub_401B20+1D↑j
.text:00401B68                 mov     esp, ebp
.text:00401B6A                 pop     ebp
.text:00401B6B                 retn
.text:00401B6B sub_401B20      endp
.text:00401B6B
.text:00401B6B ; ---------------------------------------------------------------------------
.text:00401B6C                 align 10h
.text:00401B70
.text:00401B70 ; =============== S U B R O U T I N E =======================================
.text:00401B70
.text:00401B70 ; Attributes: bp-based frame
.text:00401B70
.text:00401B70 sub_401B70      proc near               ; CODE XREF: sub_401AB0+29↑p
.text:00401B70                                         ; sub_401B70+19↓p
.text:00401B70
.text:00401B70 arg_0           = dword ptr  8
.text:00401B70
.text:00401B70                 push    ebp
.text:00401B71                 mov     ebp, esp
.text:00401B73                 push    ebx
.text:00401B74                 push    esi
.text:00401B75                 push    edi
.text:00401B76                 mov     edi, [ebp+arg_0]
.text:00401B79                 cmp     byte ptr [edi+0Fh], 0
.text:00401B7D                 mov     ebx, ecx
.text:00401B7F                 mov     esi, edi
.text:00401B81                 jnz     short loc_401BA2
.text:00401B83
.text:00401B83 loc_401B83:                             ; CODE XREF: sub_401B70+30↓j
.text:00401B83                 mov     eax, [esi+8]
.text:00401B86                 push    eax
.text:00401B87                 mov     ecx, ebx
.text:00401B89                 call    sub_401B70
.text:00401B8E                 mov     esi, [esi]
.text:00401B90                 push    edi
.text:00401B91                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00401B97                 add     esp, 4
.text:00401B9A                 cmp     byte ptr [esi+0Fh], 0
.text:00401B9E                 mov     edi, esi
.text:00401BA0                 jz      short loc_401B83
.text:00401BA2
.text:00401BA2 loc_401BA2:                             ; CODE XREF: sub_401B70+11↑j
.text:00401BA2                 pop     edi
.text:00401BA3                 pop     esi
.text:00401BA4                 pop     ebx
.text:00401BA5                 pop     ebp
.text:00401BA6                 retn    4
.text:00401BA6 sub_401B70      endp
.text:00401BA6
.text:00401BA6 ; ---------------------------------------------------------------------------
.text:00401BA9                 align 10h
.text:00401BB0
.text:00401BB0 ; =============== S U B R O U T I N E =======================================
.text:00401BB0
.text:00401BB0
.text:00401BB0 sub_401BB0      proc near               ; CODE XREF: sub_401850+163↑p
.text:00401BB0                                         ; sub_401850+1AA↑p ...
.text:00401BB0                 mov     eax, [ecx+8]
.text:00401BB3                 mov     edx, [eax]
.text:00401BB5                 mov     [ecx+8], edx
.text:00401BB8                 mov     edx, [eax]
.text:00401BBA                 cmp     byte ptr [edx+0Fh], 0
.text:00401BBE                 jnz     short loc_401BC3
.text:00401BC0                 mov     [edx+4], ecx
.text:00401BC3
.text:00401BC3 loc_401BC3:                             ; CODE XREF: sub_401BB0+E↑j
.text:00401BC3                 mov     edx, [ecx+4]
.text:00401BC6                 mov     [eax+4], edx
.text:00401BC9                 mov     edx, dword_4054D8
.text:00401BCF                 cmp     ecx, [edx+4]
.text:00401BD2                 jnz     short loc_401BDD
.text:00401BD4                 mov     [edx+4], eax
.text:00401BD7                 mov     [eax], ecx
.text:00401BD9                 mov     [ecx+4], eax
.text:00401BDC                 retn
.text:00401BDD ; ---------------------------------------------------------------------------
.text:00401BDD
.text:00401BDD loc_401BDD:                             ; CODE XREF: sub_401BB0+22↑j
.text:00401BDD                 mov     edx, [ecx+4]
.text:00401BE0                 cmp     ecx, [edx]
.text:00401BE2                 jnz     short loc_401BEC
.text:00401BE4                 mov     [edx], eax
.text:00401BE6                 mov     [eax], ecx
.text:00401BE8                 mov     [ecx+4], eax
.text:00401BEB                 retn
.text:00401BEC ; ---------------------------------------------------------------------------
.text:00401BEC
.text:00401BEC loc_401BEC:                             ; CODE XREF: sub_401BB0+32↑j
.text:00401BEC                 mov     [edx+8], eax
.text:00401BEF                 mov     [eax], ecx
.text:00401BF1                 mov     [ecx+4], eax
.text:00401BF4                 retn
.text:00401BF4 sub_401BB0      endp
.text:00401BF4
.text:00401BF4 ; ---------------------------------------------------------------------------
.text:00401BF5                 align 10h
.text:00401C00
.text:00401C00 ; =============== S U B R O U T I N E =======================================
.text:00401C00
.text:00401C00
.text:00401C00 sub_401C00      proc near               ; CODE XREF: sub_401850+191↑p
.text:00401C00                                         ; sub_401850+1C0↑p ...
.text:00401C00                 mov     eax, [ecx]
.text:00401C02                 mov     edx, [eax+8]
.text:00401C05                 mov     [ecx], edx
.text:00401C07                 mov     edx, [eax+8]
.text:00401C0A                 cmp     byte ptr [edx+0Fh], 0
.text:00401C0E                 jnz     short loc_401C13
.text:00401C10                 mov     [edx+4], ecx
.text:00401C13
.text:00401C13 loc_401C13:                             ; CODE XREF: sub_401C00+E↑j
.text:00401C13                 mov     edx, [ecx+4]
.text:00401C16                 mov     [eax+4], edx
.text:00401C19                 mov     edx, dword_4054D8
.text:00401C1F                 cmp     ecx, [edx+4]
.text:00401C22                 jnz     short loc_401C2E
.text:00401C24                 mov     [edx+4], eax
.text:00401C27                 mov     [eax+8], ecx
.text:00401C2A                 mov     [ecx+4], eax
.text:00401C2D                 retn
.text:00401C2E ; ---------------------------------------------------------------------------
.text:00401C2E
.text:00401C2E loc_401C2E:                             ; CODE XREF: sub_401C00+22↑j
.text:00401C2E                 mov     edx, [ecx+4]
.text:00401C31                 cmp     ecx, [edx+8]
.text:00401C34                 jnz     short loc_401C40
.text:00401C36                 mov     [edx+8], eax
.text:00401C39                 mov     [eax+8], ecx
.text:00401C3C                 mov     [ecx+4], eax
.text:00401C3F                 retn
.text:00401C40 ; ---------------------------------------------------------------------------
.text:00401C40
.text:00401C40 loc_401C40:                             ; CODE XREF: sub_401C00+34↑j
.text:00401C40                 mov     [edx], eax
.text:00401C42                 mov     [eax+8], ecx
.text:00401C45                 mov     [ecx+4], eax
.text:00401C48                 retn
.text:00401C48 sub_401C00      endp
.text:00401C48
.text:00401C48 ; ---------------------------------------------------------------------------
.text:00401C49                 align 10h
.text:00401C50
.text:00401C50 ; =============== S U B R O U T I N E =======================================
.text:00401C50
.text:00401C50
.text:00401C50 sub_401C50      proc near               ; CODE XREF: sub_401850+B8↑p
.text:00401C50                 mov     ecx, [eax+8]
.text:00401C53                 cmp     byte ptr [ecx+0Fh], 0
.text:00401C57                 jnz     short locret_401C6B
.text:00401C59                 lea     esp, [esp+0]
.text:00401C60
.text:00401C60 loc_401C60:                             ; CODE XREF: sub_401C50+19↓j
.text:00401C60                 mov     eax, ecx
.text:00401C62                 mov     ecx, [eax+8]
.text:00401C65                 cmp     byte ptr [ecx+0Fh], 0
.text:00401C69                 jz      short loc_401C60
.text:00401C6B
.text:00401C6B locret_401C6B:                          ; CODE XREF: sub_401C50+7↑j
.text:00401C6B                 retn
.text:00401C6B sub_401C50      endp
.text:00401C6B
.text:00401C6B ; ---------------------------------------------------------------------------
.text:00401C6C                 align 10h
.text:00401C70
.text:00401C70 ; =============== S U B R O U T I N E =======================================
.text:00401C70
.text:00401C70
.text:00401C70 sub_401C70      proc near               ; CODE XREF: sub_401850+23↑p
.text:00401C70                                         ; sub_401CE0+120↓p
.text:00401C70                 mov     ecx, [eax]
.text:00401C72                 cmp     byte ptr [ecx+0Fh], 0
.text:00401C76                 jnz     short locret_401CBA
.text:00401C78                 mov     edx, [ecx+8]
.text:00401C7B                 cmp     byte ptr [edx+0Fh], 0
.text:00401C7F                 jnz     short loc_401C9D
.text:00401C81                 mov     ecx, [edx]
.text:00401C83                 cmp     byte ptr [ecx+0Fh], 0
.text:00401C87                 jnz     short loc_401C9A
.text:00401C89                 lea     esp, [esp+0]
.text:00401C90
.text:00401C90 loc_401C90:                             ; CODE XREF: sub_401C70+28↓j
.text:00401C90                 mov     edx, ecx
.text:00401C92                 mov     ecx, [edx]
.text:00401C94                 cmp     byte ptr [ecx+0Fh], 0
.text:00401C98                 jz      short loc_401C90
.text:00401C9A
.text:00401C9A loc_401C9A:                             ; CODE XREF: sub_401C70+17↑j
.text:00401C9A                 mov     [eax], edx
.text:00401C9C                 retn
.text:00401C9D ; ---------------------------------------------------------------------------
.text:00401C9D
.text:00401C9D loc_401C9D:                             ; CODE XREF: sub_401C70+F↑j
.text:00401C9D                 mov     ecx, [ecx+4]
.text:00401CA0                 cmp     byte ptr [ecx+0Fh], 0
.text:00401CA4                 jnz     short loc_401CB8
.text:00401CA6
.text:00401CA6 loc_401CA6:                             ; CODE XREF: sub_401C70+46↓j
.text:00401CA6                 mov     edx, [eax]
.text:00401CA8                 cmp     edx, [ecx+8]
.text:00401CAB                 jnz     short loc_401CB8
.text:00401CAD                 mov     [eax], ecx
.text:00401CAF                 mov     ecx, [ecx+4]
.text:00401CB2                 cmp     byte ptr [ecx+0Fh], 0
.text:00401CB6                 jz      short loc_401CA6
.text:00401CB8
.text:00401CB8 loc_401CB8:                             ; CODE XREF: sub_401C70+34↑j
.text:00401CB8                                         ; sub_401C70+3B↑j
.text:00401CB8                 mov     [eax], ecx
.text:00401CBA
.text:00401CBA locret_401CBA:                          ; CODE XREF: sub_401C70+6↑j
.text:00401CBA                 retn
.text:00401CBA sub_401C70      endp
.text:00401CBA
.text:00401CBA ; ---------------------------------------------------------------------------
.text:00401CBB                 align 10h
.text:00401CC0
.text:00401CC0 ; =============== S U B R O U T I N E =======================================
.text:00401CC0
.text:00401CC0 ; Attributes: bp-based frame
.text:00401CC0
.text:00401CC0 sub_401CC0      proc near               ; DATA XREF: .rdata:00404588↓o
.text:00401CC0
.text:00401CC0 arg_0           = dword ptr  8
.text:00401CC0
.text:00401CC0                 push    ebp
.text:00401CC1                 mov     ebp, esp
.text:00401CC3                 mov     eax, [ebp+arg_0]
.text:00401CC6                 push    esi
.text:00401CC7                 push    eax
.text:00401CC8                 mov     esi, ecx
.text:00401CCA                 call    ds:__imp_??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.text:00401CD0                 mov     dword ptr [esi], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:00401CD6                 mov     eax, esi
.text:00401CD8                 pop     esi
.text:00401CD9                 pop     ebp
.text:00401CDA                 retn    4
.text:00401CDA sub_401CC0      endp
.text:00401CDA
.text:00401CDA ; ---------------------------------------------------------------------------
.text:00401CDD                 align 10h
.text:00401CE0
.text:00401CE0 ; =============== S U B R O U T I N E =======================================
.text:00401CE0
.text:00401CE0 ; Attributes: bp-based frame
.text:00401CE0
.text:00401CE0 sub_401CE0      proc near               ; CODE XREF: _main+106↑p
.text:00401CE0                                         ; _main+249↑p
.text:00401CE0
.text:00401CE0 var_C           = byte ptr -0Ch
.text:00401CE0 var_4           = dword ptr -4
.text:00401CE0 arg_0           = dword ptr  8
.text:00401CE0
.text:00401CE0                 push    ebp
.text:00401CE1                 mov     ebp, esp
.text:00401CE3                 sub     esp, 0Ch
.text:00401CE6                 cmp     dword_4054DC, 0
.text:00401CED                 push    edi
.text:00401CEE                 mov     edi, eax
.text:00401CF0                 mov     [ebp+var_4], 0
.text:00401CF7                 jnz     short loc_401D11
.text:00401CF9                 mov     ecx, dword_4054D8
.text:00401CFF                 push    edi
.text:00401D00                 push    1
.text:00401D02                 push    ebx
.text:00401D03                 call    sub_401F60
.text:00401D08                 mov     eax, ebx
.text:00401D0A                 pop     edi
.text:00401D0B                 mov     esp, ebp
.text:00401D0D                 pop     ebp
.text:00401D0E                 retn    4
.text:00401D11 ; ---------------------------------------------------------------------------
.text:00401D11
.text:00401D11 loc_401D11:                             ; CODE XREF: sub_401CE0+17↑j
.text:00401D11                 mov     eax, dword_4054D8
.text:00401D16                 push    esi
.text:00401D17                 mov     esi, [ebp+arg_0]
.text:00401D1A                 cmp     esi, [eax]
.text:00401D1C                 jnz     short loc_401D3F
.text:00401D1E                 mov     al, [edi+0Ch]
.text:00401D21                 cmp     al, [esi+0Ch]
.text:00401D24                 jge     loc_401E4A
.text:00401D2A                 push    edi
.text:00401D2B
.text:00401D2B loc_401D2B:                             ; CODE XREF: sub_401CE0+FD↓j
.text:00401D2B                 push    1
.text:00401D2D                 push    ebx
.text:00401D2E                 mov     ecx, esi
.text:00401D30                 call    sub_401F60
.text:00401D35                 pop     esi
.text:00401D36                 mov     eax, ebx
.text:00401D38                 pop     edi
.text:00401D39                 mov     esp, ebp
.text:00401D3B                 pop     ebp
.text:00401D3C                 retn    4
.text:00401D3F ; ---------------------------------------------------------------------------
.text:00401D3F
.text:00401D3F loc_401D3F:                             ; CODE XREF: sub_401CE0+3C↑j
.text:00401D3F                 cmp     esi, eax
.text:00401D41                 jnz     short loc_401D65
.text:00401D43                 mov     ecx, [eax+8]
.text:00401D46                 mov     dl, [ecx+0Ch]
.text:00401D49                 cmp     dl, [edi+0Ch]
.text:00401D4C                 jge     loc_401E4A
.text:00401D52                 push    edi
.text:00401D53                 push    0
.text:00401D55                 push    ebx
.text:00401D56                 call    sub_401F60
.text:00401D5B                 pop     esi
.text:00401D5C                 mov     eax, ebx
.text:00401D5E                 pop     edi
.text:00401D5F                 mov     esp, ebp
.text:00401D61                 pop     ebp
.text:00401D62                 retn    4
.text:00401D65 ; ---------------------------------------------------------------------------
.text:00401D65
.text:00401D65 loc_401D65:                             ; CODE XREF: sub_401CE0+61↑j
.text:00401D65                 mov     al, [edi+0Ch]
.text:00401D68                 cmp     [esi+0Ch], al
.text:00401D6B                 jle     loc_401DF8
.text:00401D71                 mov     ecx, esi
.text:00401D73                 mov     [ebp+var_4], ecx
.text:00401D76                 cmp     byte ptr [esi+0Fh], 0
.text:00401D7A                 jz      short loc_401D81
.text:00401D7C                 mov     ecx, [esi+8]
.text:00401D7F                 jmp     short loc_401DCA
.text:00401D81 ; ---------------------------------------------------------------------------
.text:00401D81
.text:00401D81 loc_401D81:                             ; CODE XREF: sub_401CE0+9A↑j
.text:00401D81                 mov     eax, [esi]
.text:00401D83                 cmp     byte ptr [eax+0Fh], 0
.text:00401D87                 jnz     short loc_401DA1
.text:00401D89                 mov     ecx, eax
.text:00401D8B                 mov     eax, [ecx+8]
.text:00401D8E                 cmp     byte ptr [eax+0Fh], 0
.text:00401D92                 jnz     short loc_401DCA
.text:00401D94
.text:00401D94 loc_401D94:                             ; CODE XREF: sub_401CE0+BD↓j
.text:00401D94                 mov     ecx, eax
.text:00401D96                 mov     eax, [ecx+8]
.text:00401D99                 cmp     byte ptr [eax+0Fh], 0
.text:00401D9D                 jz      short loc_401D94
.text:00401D9F                 jmp     short loc_401DCA
.text:00401DA1 ; ---------------------------------------------------------------------------
.text:00401DA1
.text:00401DA1 loc_401DA1:                             ; CODE XREF: sub_401CE0+A7↑j
.text:00401DA1                 mov     eax, [esi+4]
.text:00401DA4                 cmp     byte ptr [eax+0Fh], 0
.text:00401DA8                 jnz     short loc_401DC2
.text:00401DAA                 lea     ebx, [ebx+0]
.text:00401DB0
.text:00401DB0 loc_401DB0:                             ; CODE XREF: sub_401CE0+E0↓j
.text:00401DB0                 cmp     ecx, [eax]
.text:00401DB2                 jnz     short loc_401DC2
.text:00401DB4                 mov     ecx, eax
.text:00401DB6                 mov     [ebp+var_4], ecx
.text:00401DB9                 mov     eax, [eax+4]
.text:00401DBC                 cmp     byte ptr [eax+0Fh], 0
.text:00401DC0                 jz      short loc_401DB0
.text:00401DC2
.text:00401DC2 loc_401DC2:                             ; CODE XREF: sub_401CE0+C8↑j
.text:00401DC2                                         ; sub_401CE0+D2↑j
.text:00401DC2                 cmp     byte ptr [ecx+0Fh], 0
.text:00401DC6                 jnz     short loc_401DCD
.text:00401DC8                 mov     ecx, eax
.text:00401DCA
.text:00401DCA loc_401DCA:                             ; CODE XREF: sub_401CE0+9F↑j
.text:00401DCA                                         ; sub_401CE0+B2↑j ...
.text:00401DCA                 mov     [ebp+var_4], ecx
.text:00401DCD
.text:00401DCD loc_401DCD:                             ; CODE XREF: sub_401CE0+E6↑j
.text:00401DCD                 mov     al, [edi+0Ch]
.text:00401DD0                 cmp     [ecx+0Ch], al
.text:00401DD3                 jge     short loc_401DF5
.text:00401DD5                 mov     eax, [ecx+8]
.text:00401DD8                 cmp     byte ptr [eax+0Fh], 0
.text:00401DDC                 push    edi
.text:00401DDD                 jz      loc_401D2B
.text:00401DE3                 push    0
.text:00401DE5                 push    ebx
.text:00401DE6                 call    sub_401F60
.text:00401DEB                 pop     esi
.text:00401DEC                 mov     eax, ebx
.text:00401DEE                 pop     edi
.text:00401DEF                 mov     esp, ebp
.text:00401DF1                 pop     ebp
.text:00401DF2                 retn    4
.text:00401DF5 ; ---------------------------------------------------------------------------
.text:00401DF5
.text:00401DF5 loc_401DF5:                             ; CODE XREF: sub_401CE0+F3↑j
.text:00401DF5                 cmp     [esi+0Ch], al
.text:00401DF8
.text:00401DF8 loc_401DF8:                             ; CODE XREF: sub_401CE0+8B↑j
.text:00401DF8                 jge     short loc_401E4A
.text:00401DFA                 lea     eax, [ebp+var_4]
.text:00401DFD                 mov     [ebp+var_4], esi
.text:00401E00                 call    sub_401C70
.text:00401E05                 mov     ecx, dword_4054D8
.text:00401E0B                 cmp     [eax], ecx
.text:00401E0D                 mov     ecx, [ebp+var_4]
.text:00401E10                 jz      short loc_401E1A
.text:00401E12                 mov     al, [edi+0Ch]
.text:00401E15                 cmp     al, [ecx+0Ch]
.text:00401E18                 jge     short loc_401E4A
.text:00401E1A
.text:00401E1A loc_401E1A:                             ; CODE XREF: sub_401CE0+130↑j
.text:00401E1A                 mov     edx, [esi+8]
.text:00401E1D                 cmp     byte ptr [edx+0Fh], 0
.text:00401E21                 push    edi
.text:00401E22                 jz      short loc_401E38
.text:00401E24                 push    0
.text:00401E26                 push    ebx
.text:00401E27                 mov     ecx, esi
.text:00401E29                 call    sub_401F60
.text:00401E2E                 pop     esi
.text:00401E2F                 mov     eax, ebx
.text:00401E31                 pop     edi
.text:00401E32                 mov     esp, ebp
.text:00401E34                 pop     ebp
.text:00401E35                 retn    4
.text:00401E38 ; ---------------------------------------------------------------------------
.text:00401E38
.text:00401E38 loc_401E38:                             ; CODE XREF: sub_401CE0+142↑j
.text:00401E38                 push    1
.text:00401E3A                 push    ebx
.text:00401E3B                 call    sub_401F60
.text:00401E40                 pop     esi
.text:00401E41                 mov     eax, ebx
.text:00401E43                 pop     edi
.text:00401E44                 mov     esp, ebp
.text:00401E46                 pop     ebp
.text:00401E47                 retn    4
.text:00401E4A ; ---------------------------------------------------------------------------
.text:00401E4A
.text:00401E4A loc_401E4A:                             ; CODE XREF: sub_401CE0+44↑j
.text:00401E4A                                         ; sub_401CE0+6C↑j ...
.text:00401E4A                 push    edi
.text:00401E4B                 lea     edi, [ebp+var_C]
.text:00401E4E                 call    sub_401E70
.text:00401E53                 mov     eax, [eax]
.text:00401E55                 pop     esi
.text:00401E56                 mov     [ebx], eax
.text:00401E58                 mov     eax, ebx
.text:00401E5A                 pop     edi
.text:00401E5B                 mov     esp, ebp
.text:00401E5D                 pop     ebp
.text:00401E5E                 retn    4
.text:00401E5E sub_401CE0      endp
.text:00401E5E
.text:00401E5E ; ---------------------------------------------------------------------------
.text:00401E61                 align 10h
.text:00401E70
.text:00401E70 ; =============== S U B R O U T I N E =======================================
.text:00401E70
.text:00401E70 ; Attributes: bp-based frame
.text:00401E70
.text:00401E70 sub_401E70      proc near               ; CODE XREF: sub_401CE0+16E↑p
.text:00401E70
.text:00401E70 var_4           = dword ptr -4
.text:00401E70 arg_0           = dword ptr  8
.text:00401E70
.text:00401E70                 push    ebp
.text:00401E71                 mov     ebp, esp
.text:00401E73                 push    ecx
.text:00401E74                 mov     ecx, dword_4054D8
.text:00401E7A                 mov     eax, [ecx+4]
.text:00401E7D                 cmp     byte ptr [eax+0Fh], 0
.text:00401E81                 mov     dl, 1
.text:00401E83                 mov     byte ptr [ebp+var_4], dl
.text:00401E86                 jnz     short loc_401EAD
.text:00401E88                 mov     ecx, [ebp+arg_0]
.text:00401E8B                 push    ebx
.text:00401E8C                 mov     bl, [ecx+0Ch]
.text:00401E8F                 nop
.text:00401E90
.text:00401E90 loc_401E90:                             ; CODE XREF: sub_401E70+3A↓j
.text:00401E90                 cmp     bl, [eax+0Ch]
.text:00401E93                 mov     ecx, eax
.text:00401E95                 setl    dl
.text:00401E98                 mov     byte ptr [ebp+var_4], dl
.text:00401E9B                 test    dl, dl
.text:00401E9D                 jz      short loc_401EA3
.text:00401E9F                 mov     eax, [eax]
.text:00401EA1                 jmp     short loc_401EA6
.text:00401EA3 ; ---------------------------------------------------------------------------
.text:00401EA3
.text:00401EA3 loc_401EA3:                             ; CODE XREF: sub_401E70+2D↑j
.text:00401EA3                 mov     eax, [eax+8]
.text:00401EA6
.text:00401EA6 loc_401EA6:                             ; CODE XREF: sub_401E70+31↑j
.text:00401EA6                 cmp     byte ptr [eax+0Fh], 0
.text:00401EAA                 jz      short loc_401E90
.text:00401EAC                 pop     ebx
.text:00401EAD
.text:00401EAD loc_401EAD:                             ; CODE XREF: sub_401E70+16↑j
.text:00401EAD                 push    esi
.text:00401EAE                 mov     esi, ecx
.text:00401EB0                 test    dl, dl
.text:00401EB2                 jz      short loc_401F2D
.text:00401EB4                 mov     edx, dword_4054D8
.text:00401EBA                 cmp     ecx, [edx]
.text:00401EBC                 jnz     short loc_401EDE
.text:00401EBE                 mov     eax, [ebp+arg_0]
.text:00401EC1                 push    eax
.text:00401EC2                 push    1
.text:00401EC4
.text:00401EC4 loc_401EC4:                             ; CODE XREF: sub_401E70+CD↓j
.text:00401EC4                 lea     edx, [ebp+arg_0]
.text:00401EC7                 push    edx
.text:00401EC8                 call    sub_401F60
.text:00401ECD                 mov     eax, [eax]
.text:00401ECF                 mov     [edi], eax
.text:00401ED1                 mov     byte ptr [edi+4], 1
.text:00401ED5                 mov     eax, edi
.text:00401ED7                 pop     esi
.text:00401ED8                 mov     esp, ebp
.text:00401EDA                 pop     ebp
.text:00401EDB                 retn    4
.text:00401EDE ; ---------------------------------------------------------------------------
.text:00401EDE
.text:00401EDE loc_401EDE:                             ; CODE XREF: sub_401E70+4C↑j
.text:00401EDE                 cmp     byte ptr [ecx+0Fh], 0
.text:00401EE2                 jz      short loc_401EE9
.text:00401EE4                 mov     esi, [ecx+8]
.text:00401EE7                 jmp     short loc_401F2D
.text:00401EE9 ; ---------------------------------------------------------------------------
.text:00401EE9
.text:00401EE9 loc_401EE9:                             ; CODE XREF: sub_401E70+72↑j
.text:00401EE9                 mov     eax, [ecx]
.text:00401EEB                 cmp     byte ptr [eax+0Fh], 0
.text:00401EEF                 jnz     short loc_401F0D
.text:00401EF1                 mov     esi, eax
.text:00401EF3                 mov     eax, [esi+8]
.text:00401EF6                 cmp     byte ptr [eax+0Fh], 0
.text:00401EFA                 jnz     short loc_401F2D
.text:00401EFC                 lea     esp, [esp+0]
.text:00401F00
.text:00401F00 loc_401F00:                             ; CODE XREF: sub_401E70+99↓j
.text:00401F00                 mov     esi, eax
.text:00401F02                 mov     eax, [esi+8]
.text:00401F05                 cmp     byte ptr [eax+0Fh], 0
.text:00401F09                 jz      short loc_401F00
.text:00401F0B                 jmp     short loc_401F2D
.text:00401F0D ; ---------------------------------------------------------------------------
.text:00401F0D
.text:00401F0D loc_401F0D:                             ; CODE XREF: sub_401E70+7F↑j
.text:00401F0D                 mov     eax, [ecx+4]
.text:00401F10                 cmp     byte ptr [eax+0Fh], 0
.text:00401F14                 jnz     short loc_401F25
.text:00401F16
.text:00401F16 loc_401F16:                             ; CODE XREF: sub_401E70+B3↓j
.text:00401F16                 cmp     esi, [eax]
.text:00401F18                 jnz     short loc_401F25
.text:00401F1A                 mov     esi, eax
.text:00401F1C                 mov     eax, [eax+4]
.text:00401F1F                 cmp     byte ptr [eax+0Fh], 0
.text:00401F23                 jz      short loc_401F16
.text:00401F25
.text:00401F25 loc_401F25:                             ; CODE XREF: sub_401E70+A4↑j
.text:00401F25                                         ; sub_401E70+A8↑j
.text:00401F25                 cmp     byte ptr [esi+0Fh], 0
.text:00401F29                 jnz     short loc_401F2D
.text:00401F2B                 mov     esi, eax
.text:00401F2D
.text:00401F2D loc_401F2D:                             ; CODE XREF: sub_401E70+42↑j
.text:00401F2D                                         ; sub_401E70+77↑j ...
.text:00401F2D                 mov     eax, [ebp+arg_0]
.text:00401F30                 mov     dl, [esi+0Ch]
.text:00401F33                 push    eax
.text:00401F34                 cmp     dl, [eax+0Ch]
.text:00401F37                 jge     short loc_401F3F
.text:00401F39                 mov     eax, [ebp+var_4]
.text:00401F3C                 push    eax
.text:00401F3D                 jmp     short loc_401EC4
.text:00401F3F ; ---------------------------------------------------------------------------
.text:00401F3F
.text:00401F3F loc_401F3F:                             ; CODE XREF: sub_401E70+C7↑j
.text:00401F3F                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00401F45                 add     esp, 4
.text:00401F48                 mov     [edi], esi
.text:00401F4A                 mov     byte ptr [edi+4], 0
.text:00401F4E                 mov     eax, edi
.text:00401F50                 pop     esi
.text:00401F51                 mov     esp, ebp
.text:00401F53                 pop     ebp
.text:00401F54                 retn    4
.text:00401F54 sub_401E70      endp
.text:00401F54
.text:00401F54 ; ---------------------------------------------------------------------------
.text:00401F57                 align 10h
.text:00401F60
.text:00401F60 ; =============== S U B R O U T I N E =======================================
.text:00401F60
.text:00401F60 ; Attributes: bp-based frame
.text:00401F60
.text:00401F60 sub_401F60      proc near               ; CODE XREF: sub_401CE0+23↑p
.text:00401F60                                         ; sub_401CE0+50↑p ...
.text:00401F60
.text:00401F60 arg_0           = dword ptr  8
.text:00401F60 arg_4           = byte ptr  0Ch
.text:00401F60 arg_8           = dword ptr  10h
.text:00401F60
.text:00401F60                 push    ebp
.text:00401F61                 mov     ebp, esp
.text:00401F63                 cmp     dword_4054DC, 7FFFFFFEh
.text:00401F6D                 jb      short loc_401F87
.text:00401F6F                 mov     eax, [ebp+arg_8]
.text:00401F72                 push    eax
.text:00401F73                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00401F79                 add     esp, 4
.text:00401F7C                 push    offset aMapSetTTooLong ; "map/set<T> too long"
.text:00401F81                 call    ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text:00401F87
.text:00401F87 loc_401F87:                             ; CODE XREF: sub_401F60+D↑j
.text:00401F87                 push    ebx
.text:00401F88                 push    edi
.text:00401F89                 mov     edi, [ebp+arg_8]
.text:00401F8C                 mov     eax, 1
.text:00401F91                 add     dword_4054DC, eax
.text:00401F97                 mov     [edi+4], ecx
.text:00401F9A                 mov     edx, dword_4054D8
.text:00401FA0                 xor     bl, bl
.text:00401FA2                 cmp     ecx, edx
.text:00401FA4                 jnz     short loc_401FB9
.text:00401FA6                 mov     [edx+4], edi
.text:00401FA9                 mov     ecx, dword_4054D8
.text:00401FAF                 mov     [ecx], edi
.text:00401FB1                 mov     edx, dword_4054D8
.text:00401FB7                 jmp     short loc_401FDC
.text:00401FB9 ; ---------------------------------------------------------------------------
.text:00401FB9
.text:00401FB9 loc_401FB9:                             ; CODE XREF: sub_401F60+44↑j
.text:00401FB9                 cmp     [ebp+arg_4], bl
.text:00401FBC                 jz      short loc_401FCE
.text:00401FBE                 mov     [ecx], edi
.text:00401FC0                 mov     edx, dword_4054D8
.text:00401FC6                 cmp     ecx, [edx]
.text:00401FC8                 jnz     short loc_401FDF
.text:00401FCA                 mov     [edx], edi
.text:00401FCC                 jmp     short loc_401FDF
.text:00401FCE ; ---------------------------------------------------------------------------
.text:00401FCE
.text:00401FCE loc_401FCE:                             ; CODE XREF: sub_401F60+5C↑j
.text:00401FCE                 mov     [ecx+8], edi
.text:00401FD1                 mov     edx, dword_4054D8
.text:00401FD7                 cmp     ecx, [edx+8]
.text:00401FDA                 jnz     short loc_401FDF
.text:00401FDC
.text:00401FDC loc_401FDC:                             ; CODE XREF: sub_401F60+57↑j
.text:00401FDC                 mov     [edx+8], edi
.text:00401FDF
.text:00401FDF loc_401FDF:                             ; CODE XREF: sub_401F60+68↑j
.text:00401FDF                                         ; sub_401F60+6C↑j ...
.text:00401FDF                 mov     edx, [edi+4]
.text:00401FE2                 mov     ecx, edi
.text:00401FE4                 cmp     [edx+0Eh], bl
.text:00401FE7                 jnz     loc_402170
.text:00401FED                 push    esi
.text:00401FEE                 mov     edi, edi
.text:00401FF0
.text:00401FF0 loc_401FF0:                             ; CODE XREF: sub_401F60+209↓j
.text:00401FF0                 mov     edx, [ecx+4]
.text:00401FF3                 mov     esi, [edx+4]
.text:00401FF6                 cmp     edx, [esi]
.text:00401FF8                 jnz     loc_4020AC
.text:00401FFE                 mov     esi, [esi+8]
.text:00402001                 cmp     [esi+0Eh], bl
.text:00402004                 jz      loc_4020B3
.text:0040200A                 cmp     ecx, [edx+8]
.text:0040200D                 jnz     short loc_40204C
.text:0040200F                 mov     ecx, edx
.text:00402011                 mov     edx, [ecx+8]
.text:00402014                 mov     esi, [edx]
.text:00402016                 mov     [ecx+8], esi
.text:00402019                 mov     esi, [edx]
.text:0040201B                 cmp     [esi+0Fh], bl
.text:0040201E                 jnz     short loc_402023
.text:00402020                 mov     [esi+4], ecx
.text:00402023
.text:00402023 loc_402023:                             ; CODE XREF: sub_401F60+BE↑j
.text:00402023                 mov     esi, [ecx+4]
.text:00402026                 mov     [edx+4], esi
.text:00402029                 mov     esi, dword_4054D8
.text:0040202F                 cmp     ecx, [esi+4]
.text:00402032                 jnz     short loc_402039
.text:00402034                 mov     [esi+4], edx
.text:00402037                 jmp     short loc_402047
.text:00402039 ; ---------------------------------------------------------------------------
.text:00402039
.text:00402039 loc_402039:                             ; CODE XREF: sub_401F60+D2↑j
.text:00402039                 mov     esi, [ecx+4]
.text:0040203C                 cmp     ecx, [esi]
.text:0040203E                 jnz     short loc_402044
.text:00402040                 mov     [esi], edx
.text:00402042                 jmp     short loc_402047
.text:00402044 ; ---------------------------------------------------------------------------
.text:00402044
.text:00402044 loc_402044:                             ; CODE XREF: sub_401F60+DE↑j
.text:00402044                 mov     [esi+8], edx
.text:00402047
.text:00402047 loc_402047:                             ; CODE XREF: sub_401F60+D7↑j
.text:00402047                                         ; sub_401F60+E2↑j
.text:00402047                 mov     [edx], ecx
.text:00402049                 mov     [ecx+4], edx
.text:0040204C
.text:0040204C loc_40204C:                             ; CODE XREF: sub_401F60+AD↑j
.text:0040204C                 mov     edx, [ecx+4]
.text:0040204F                 mov     [edx+0Eh], al
.text:00402052                 mov     edx, [ecx+4]
.text:00402055                 mov     edx, [edx+4]
.text:00402058                 mov     [edx+0Eh], bl
.text:0040205B                 mov     edx, [ecx+4]
.text:0040205E                 mov     edx, [edx+4]
.text:00402061                 mov     esi, [edx]
.text:00402063                 mov     edi, [esi+8]
.text:00402066                 mov     [edx], edi
.text:00402068                 mov     edi, [esi+8]
.text:0040206B                 cmp     [edi+0Fh], bl
.text:0040206E                 jnz     short loc_402073
.text:00402070                 mov     [edi+4], edx
.text:00402073
.text:00402073 loc_402073:                             ; CODE XREF: sub_401F60+10E↑j
.text:00402073                 mov     edi, [edx+4]
.text:00402076                 mov     [esi+4], edi
.text:00402079                 mov     edi, dword_4054D8
.text:0040207F                 cmp     edx, [edi+4]
.text:00402082                 jnz     short loc_40208F
.text:00402084                 mov     [edi+4], esi
.text:00402087                 mov     [esi+8], edx
.text:0040208A                 jmp     loc_40215D
.text:0040208F ; ---------------------------------------------------------------------------
.text:0040208F
.text:0040208F loc_40208F:                             ; CODE XREF: sub_401F60+122↑j
.text:0040208F                 mov     edi, [edx+4]
.text:00402092                 cmp     edx, [edi+8]
.text:00402095                 jnz     short loc_4020A2
.text:00402097                 mov     [edi+8], esi
.text:0040209A                 mov     [esi+8], edx
.text:0040209D                 jmp     loc_40215D
.text:004020A2 ; ---------------------------------------------------------------------------
.text:004020A2
.text:004020A2 loc_4020A2:                             ; CODE XREF: sub_401F60+135↑j
.text:004020A2                 mov     [edi], esi
.text:004020A4                 mov     [esi+8], edx
.text:004020A7                 jmp     loc_40215D
.text:004020AC ; ---------------------------------------------------------------------------
.text:004020AC
.text:004020AC loc_4020AC:                             ; CODE XREF: sub_401F60+98↑j
.text:004020AC                 mov     esi, [esi]
.text:004020AE                 cmp     [esi+0Eh], bl
.text:004020B1                 jnz     short loc_4020CD
.text:004020B3
.text:004020B3 loc_4020B3:                             ; CODE XREF: sub_401F60+A4↑j
.text:004020B3                 mov     [edx+0Eh], al
.text:004020B6                 mov     [esi+0Eh], al
.text:004020B9                 mov     edx, [ecx+4]
.text:004020BC                 mov     edx, [edx+4]
.text:004020BF                 mov     [edx+0Eh], bl
.text:004020C2                 mov     ecx, [ecx+4]
.text:004020C5                 mov     ecx, [ecx+4]
.text:004020C8                 jmp     loc_402163
.text:004020CD ; ---------------------------------------------------------------------------
.text:004020CD
.text:004020CD loc_4020CD:                             ; CODE XREF: sub_401F60+151↑j
.text:004020CD                 cmp     ecx, [edx]
.text:004020CF                 jnz     short loc_402110
.text:004020D1                 mov     ecx, edx
.text:004020D3                 mov     edx, [ecx]
.text:004020D5                 mov     esi, [edx+8]
.text:004020D8                 mov     [ecx], esi
.text:004020DA                 mov     esi, [edx+8]
.text:004020DD                 cmp     [esi+0Fh], bl
.text:004020E0                 jnz     short loc_4020E5
.text:004020E2                 mov     [esi+4], ecx
.text:004020E5
.text:004020E5 loc_4020E5:                             ; CODE XREF: sub_401F60+180↑j
.text:004020E5                 mov     esi, [ecx+4]
.text:004020E8                 mov     [edx+4], esi
.text:004020EB                 mov     esi, dword_4054D8
.text:004020F1                 cmp     ecx, [esi+4]
.text:004020F4                 jnz     short loc_4020FB
.text:004020F6                 mov     [esi+4], edx
.text:004020F9                 jmp     short loc_40210A
.text:004020FB ; ---------------------------------------------------------------------------
.text:004020FB
.text:004020FB loc_4020FB:                             ; CODE XREF: sub_401F60+194↑j
.text:004020FB                 mov     esi, [ecx+4]
.text:004020FE                 cmp     ecx, [esi+8]
.text:00402101                 jnz     short loc_402108
.text:00402103                 mov     [esi+8], edx
.text:00402106                 jmp     short loc_40210A
.text:00402108 ; ---------------------------------------------------------------------------
.text:00402108
.text:00402108 loc_402108:                             ; CODE XREF: sub_401F60+1A1↑j
.text:00402108                 mov     [esi], edx
.text:0040210A
.text:0040210A loc_40210A:                             ; CODE XREF: sub_401F60+199↑j
.text:0040210A                                         ; sub_401F60+1A6↑j
.text:0040210A                 mov     [edx+8], ecx
.text:0040210D                 mov     [ecx+4], edx
.text:00402110
.text:00402110 loc_402110:                             ; CODE XREF: sub_401F60+16F↑j
.text:00402110                 mov     edx, [ecx+4]
.text:00402113                 mov     [edx+0Eh], al
.text:00402116                 mov     edx, [ecx+4]
.text:00402119                 mov     edx, [edx+4]
.text:0040211C                 mov     [edx+0Eh], bl
.text:0040211F                 mov     edx, [ecx+4]
.text:00402122                 mov     edx, [edx+4]
.text:00402125                 mov     esi, [edx+8]
.text:00402128                 mov     edi, [esi]
.text:0040212A                 mov     [edx+8], edi
.text:0040212D                 mov     edi, [esi]
.text:0040212F                 cmp     [edi+0Fh], bl
.text:00402132                 jnz     short loc_402137
.text:00402134                 mov     [edi+4], edx
.text:00402137
.text:00402137 loc_402137:                             ; CODE XREF: sub_401F60+1D2↑j
.text:00402137                 mov     edi, [edx+4]
.text:0040213A                 mov     [esi+4], edi
.text:0040213D                 mov     edi, dword_4054D8
.text:00402143                 cmp     edx, [edi+4]
.text:00402146                 jnz     short loc_40214D
.text:00402148                 mov     [edi+4], esi
.text:0040214B                 jmp     short loc_40215B
.text:0040214D ; ---------------------------------------------------------------------------
.text:0040214D
.text:0040214D loc_40214D:                             ; CODE XREF: sub_401F60+1E6↑j
.text:0040214D                 mov     edi, [edx+4]
.text:00402150                 cmp     edx, [edi]
.text:00402152                 jnz     short loc_402158
.text:00402154                 mov     [edi], esi
.text:00402156                 jmp     short loc_40215B
.text:00402158 ; ---------------------------------------------------------------------------
.text:00402158
.text:00402158 loc_402158:                             ; CODE XREF: sub_401F60+1F2↑j
.text:00402158                 mov     [edi+8], esi
.text:0040215B
.text:0040215B loc_40215B:                             ; CODE XREF: sub_401F60+1EB↑j
.text:0040215B                                         ; sub_401F60+1F6↑j
.text:0040215B                 mov     [esi], edx
.text:0040215D
.text:0040215D loc_40215D:                             ; CODE XREF: sub_401F60+12A↑j
.text:0040215D                                         ; sub_401F60+13D↑j ...
.text:0040215D                 mov     edi, [ebp+arg_8]
.text:00402160                 mov     [edx+4], esi
.text:00402163
.text:00402163 loc_402163:                             ; CODE XREF: sub_401F60+168↑j
.text:00402163                 mov     edx, [ecx+4]
.text:00402166                 cmp     [edx+0Eh], bl
.text:00402169                 jz      loc_401FF0
.text:0040216F                 pop     esi
.text:00402170
.text:00402170 loc_402170:                             ; CODE XREF: sub_401F60+87↑j
.text:00402170                 mov     ecx, dword_4054D8
.text:00402176                 mov     edx, [ecx+4]
.text:00402179                 mov     [edx+0Eh], al
.text:0040217C                 mov     eax, [ebp+arg_0]
.text:0040217F                 mov     [eax], edi
.text:00402181                 pop     edi
.text:00402182                 pop     ebx
.text:00402183                 pop     ebp
.text:00402184                 retn    0Ch
.text:00402184 sub_401F60      endp
.text:00402184
.text:00402184 ; ---------------------------------------------------------------------------
.text:00402187                 align 10h
.text:00402190
.text:00402190 ; =============== S U B R O U T I N E =======================================
.text:00402190
.text:00402190 ; Attributes: bp-based frame
.text:00402190
.text:00402190 sub_402190      proc near               ; CODE XREF: _main+1CA↑p
.text:00402190
.text:00402190 var_20          = dword ptr -20h
.text:00402190 var_1C          = byte ptr -1Ch
.text:00402190 var_18          = dword ptr -18h
.text:00402190 var_11          = byte ptr -11h
.text:00402190 var_10          = dword ptr -10h
.text:00402190 var_C           = dword ptr -0Ch
.text:00402190 var_4           = dword ptr -4
.text:00402190 arg_0           = dword ptr  8
.text:00402190 arg_4           = byte ptr  0Ch
.text:00402190
.text:00402190 ; FUNCTION CHUNK AT .text:00401350 SIZE 00000019 BYTES
.text:00402190 ; FUNCTION CHUNK AT .text:00402CB0 SIZE 0000002B BYTES
.text:00402190
.text:00402190 ; __unwind { // SEH_402190
.text:00402190                 push    ebp
.text:00402191                 mov     ebp, esp
.text:00402193                 push    0FFFFFFFFh
.text:00402195                 push    offset SEH_402190
.text:0040219A                 mov     eax, large fs:0
.text:004021A0                 push    eax
.text:004021A1                 sub     esp, 14h
.text:004021A4                 push    ebx
.text:004021A5                 push    esi
.text:004021A6                 push    edi
.text:004021A7                 mov     eax, ___security_cookie
.text:004021AC                 xor     eax, ebp
.text:004021AE                 push    eax
.text:004021AF                 lea     eax, [ebp+var_C]
.text:004021B2                 mov     large fs:0, eax
.text:004021B8                 mov     [ebp+var_10], esp
.text:004021BB                 mov     esi, ecx
.text:004021BD                 mov     edi, [ebp+arg_0]
.text:004021C0                 mov     eax, [edi]
.text:004021C2                 mov     ecx, [eax+4]
.text:004021C5                 mov     ecx, [ecx+edi+38h]
.text:004021C9                 xor     ebx, ebx
.text:004021CB                 mov     [ebp+var_18], ebx
.text:004021CE                 mov     [ebp+var_11], bl
.text:004021D1                 mov     [ebp+var_20], edi
.text:004021D4                 test    ecx, ecx
.text:004021D6                 jz      short loc_4021DF
.text:004021D8                 mov     edx, [ecx]
.text:004021DA                 mov     eax, [edx+4]
.text:004021DD                 call    eax
.text:004021DF
.text:004021DF loc_4021DF:                             ; CODE XREF: sub_402190+46↑j
.text:004021DF                 push    1
.text:004021E1                 mov     ecx, edi
.text:004021E3 ;   try {
.text:004021E3                 mov     [ebp+var_4], 0
.text:004021EA                 call    ds:?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z ; std::basic_istream<char,std::char_traits<char>>::_Ipfx(bool)
.text:004021F0                 mov     [ebp+var_1C], al
.text:004021F0 ;   } // starts at 4021E3
.text:004021F3 ;   try {
.text:004021F3                 mov     [ebp+var_4], 1
.text:004021FA                 test    al, al
.text:004021FC                 jz      loc_4022B6
.text:00402202                 or      eax, 0FFFFFFFFh
.text:00402205                 xor     ecx, ecx
.text:00402205 ;   } // starts at 4021F3
.text:00402207 ;   try {
.text:00402207                 mov     byte ptr [ebp+var_4], 2
.text:0040220B                 call    sub_4015C0
.text:00402210                 mov     ecx, [edi]
.text:00402212                 mov     edx, [ecx+4]
.text:00402215                 mov     ecx, [edx+edi+38h]
.text:00402219                 call    ds:?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char>>::sgetc(void)
.text:0040221F                 nop
.text:00402220
.text:00402220 loc_402220:                             ; CODE XREF: sub_402190+F7↓j
.text:00402220                 cmp     eax, 0FFFFFFFFh
.text:00402223                 jnz     short loc_402234
.text:00402225                 or      ebx, 1
.text:00402225 ;   } // starts at 402207
.text:00402228 ;   try {
.text:00402228                 mov     [ebp+var_4], 1
.text:0040222F                 jmp     loc_4022B0
.text:00402234 ; ---------------------------------------------------------------------------
.text:00402234
.text:00402234 loc_402234:                             ; CODE XREF: sub_402190+93↑j
.text:00402234                 movzx   ecx, [ebp+arg_4]
.text:00402238                 cmp     eax, ecx
.text:0040223A                 jnz     short loc_402258
.text:0040223C                 mov     eax, [edi]
.text:0040223E                 mov     ecx, [eax+4]
.text:00402241                 mov     ecx, [ecx+edi+38h]
.text:00402245                 mov     [ebp+var_11], 1
.text:00402249                 call    ds:?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char>>::sbumpc(void)
.text:00402249 ;   } // starts at 402228
.text:0040224F ;   try {
.text:0040224F                 mov     [ebp+var_4], 1
.text:00402256                 jmp     short loc_4022B0
.text:00402258 ; ---------------------------------------------------------------------------
.text:00402258
.text:00402258 loc_402258:                             ; CODE XREF: sub_402190+AA↑j
.text:00402258                 cmp     dword ptr [esi+10h], 0FFFFFFFEh
.text:0040225C                 jb      short loc_40226A
.text:0040225E                 or      ebx, 2
.text:0040225E ;   } // starts at 40224F
.text:00402261 ;   try {
.text:00402261                 mov     [ebp+var_4], 1
.text:00402268                 jmp     short loc_4022B0
.text:0040226A ; ---------------------------------------------------------------------------
.text:0040226A
.text:0040226A loc_40226A:                             ; CODE XREF: sub_402190+CC↑j
.text:0040226A                 mov     bl, al
.text:0040226C                 call    sub_401460
.text:00402271                 mov     edx, [edi]
.text:00402273                 mov     eax, [edx+4]
.text:00402276                 mov     ecx, [eax+edi+38h]
.text:0040227A                 mov     [ebp+var_11], 1
.text:0040227E                 call    ds:?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char>>::snextc(void)
.text:00402284                 mov     ebx, [ebp+var_18]
.text:00402287                 jmp     short loc_402220
.text:00402289 ; ---------------------------------------------------------------------------
.text:00402289
.text:00402289 loc_402289:                             ; DATA XREF: .rdata:stru_404654↓o
.text:00402289 ;   catch(...) // owned by 402207
.text:00402289                 mov     eax, [ebp+arg_0]
.text:0040228C                 mov     ecx, [eax]
.text:0040228E                 mov     ecx, [ecx+4]
.text:00402291                 push    1
.text:00402293                 push    4
.text:00402295                 add     ecx, eax
.text:00402297                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:00402297 ;   } // starts at 402261
.text:0040229D ;   try {
.text:0040229D                 mov     [ebp+var_4], 1
.text:004022A4                 mov     eax, offset loc_4022AA
.text:004022A9                 retn
.text:004022AA ; ---------------------------------------------------------------------------
.text:004022AA
.text:004022AA loc_4022AA:                             ; CODE XREF: sub_402190+119↑j
.text:004022AA                                         ; DATA XREF: sub_402190+114↑o
.text:004022AA                 mov     edi, [ebp+arg_0]
.text:004022AD                 mov     ebx, [ebp+var_18]
.text:004022B0
.text:004022B0 loc_4022B0:                             ; CODE XREF: sub_402190+9F↑j
.text:004022B0                                         ; sub_402190+C6↑j ...
.text:004022B0                 cmp     [ebp+var_11], 0
.text:004022B4                 jnz     short loc_4022B9
.text:004022B6
.text:004022B6 loc_4022B6:                             ; CODE XREF: sub_402190+6C↑j
.text:004022B6                 or      ebx, 2
.text:004022B9
.text:004022B9 loc_4022B9:                             ; CODE XREF: sub_402190+124↑j
.text:004022B9                 mov     edx, [edi]
.text:004022BB                 mov     ecx, [edx+4]
.text:004022BE                 push    0
.text:004022C0                 push    ebx
.text:004022C1                 add     ecx, edi
.text:004022C3                 call    ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text:004022C3 ;   } // starts at 40229D
.text:004022C9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:004022D0                 mov     eax, [ebp+var_20]
.text:004022D3                 mov     ecx, [eax]
.text:004022D5                 mov     edx, [ecx+4]
.text:004022D8                 mov     ecx, [edx+eax+38h]
.text:004022DC                 test    ecx, ecx
.text:004022DE                 jz      short loc_4022E7
.text:004022E0                 mov     eax, [ecx]
.text:004022E2                 mov     edx, [eax+8]
.text:004022E5                 call    edx
.text:004022E7
.text:004022E7 loc_4022E7:                             ; CODE XREF: sub_402190+14E↑j
.text:004022E7                 mov     eax, edi
.text:004022E9                 mov     ecx, [ebp+var_C]
.text:004022EC                 mov     large fs:0, ecx
.text:004022F3                 pop     ecx
.text:004022F4                 pop     edi
.text:004022F5                 pop     esi
.text:004022F6                 pop     ebx
.text:004022F7                 mov     esp, ebp
.text:004022F9                 pop     ebp
.text:004022FA                 retn
.text:004022FA ; } // starts at 402190
.text:004022FA sub_402190      endp
.text:004022FA
.text:004022FA ; ---------------------------------------------------------------------------
.text:004022FB                 align 10h
.text:00402300
.text:00402300 ; =============== S U B R O U T I N E =======================================
.text:00402300
.text:00402300 ; Attributes: bp-based frame
.text:00402300
.text:00402300 sub_402300      proc near               ; CODE XREF: _main+FD↑p
.text:00402300                                         ; _main+240↑p
.text:00402300
.text:00402300 var_10          = dword ptr -10h
.text:00402300 var_4           = dword ptr -4
.text:00402300
.text:00402300                 push    ebp
.text:00402301                 mov     ebp, esp
.text:00402303                 sub     esp, 10h
.text:00402306                 push    10h
.text:00402308                 call    ds:??2@YAPAXI@Z ; operator new(uint)
.text:0040230E                 xor     edx, edx
.text:00402310                 add     esp, 4
.text:00402313                 cmp     eax, edx
.text:00402315                 jz      short loc_40234C
.text:00402317                 mov     ecx, dword_4054D8
.text:0040231D                 mov     [eax], ecx
.text:0040231F                 mov     ecx, dword_4054D8
.text:00402325                 mov     [eax+4], ecx
.text:00402328                 mov     ecx, dword_4054D8
.text:0040232E                 mov     [eax+8], ecx
.text:00402331                 lea     ecx, [eax+0Ch]
.text:00402334                 mov     [eax+0Eh], dx
.text:00402338                 cmp     ecx, edx
.text:0040233A                 jz      short loc_402348
.text:0040233C                 movzx   edx, byte ptr [esi]
.text:0040233F                 mov     [ecx], dl
.text:00402341                 movzx   edx, byte ptr [esi+1]
.text:00402345                 mov     [ecx+1], dl
.text:00402348
.text:00402348 loc_402348:                             ; CODE XREF: sub_402300+3A↑j
.text:00402348                 mov     esp, ebp
.text:0040234A                 pop     ebp
.text:0040234B                 retn
.text:0040234C ; ---------------------------------------------------------------------------
.text:0040234C
.text:0040234C loc_40234C:                             ; CODE XREF: sub_402300+15↑j
.text:0040234C                 lea     eax, [ebp+var_4]
.text:0040234F                 push    eax
.text:00402350                 lea     ecx, [ebp+var_10]
.text:00402353                 mov     [ebp+var_4], edx
.text:00402356                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:0040235C                 push    offset __TI2?AVbad_alloc@std@@ ; throw info for 'class std::bad_alloc'
.text:00402361                 lea     ecx, [ebp+var_10]
.text:00402364                 push    ecx
.text:00402365                 mov     [ebp+var_10], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:0040236C                 call    _CxxThrowException
.text:0040236C sub_402300      endp
.text:0040236C
.text:0040236C ; ---------------------------------------------------------------------------
.text:00402371                 align 2
.text:00402372 ; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402381                 align 2
.text:00402382 ; [00000006 BYTES: COLLAPSED FUNCTION std::exception::what(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402388 ; [00000006 BYTES: COLLAPSED FUNCTION std::exception::exception(std::exception const &). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040238E ; [0000005E BYTES: COLLAPSED FUNCTION __ArrayUnwind(void *,uint,int,void (*)(void *)). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004023EC ; [00000063 BYTES: COLLAPSED FUNCTION `eh vector destructor iterator'(void *,uint,int,void (*)(void *)). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040244F ; [000000A1 BYTES: COLLAPSED FUNCTION __onexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004024F0 ; [00000017 BYTES: COLLAPSED FUNCTION _atexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402507                 align 4
.text:00402508 ; [00000006 BYTES: COLLAPSED FUNCTION operator delete(void *). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040250E ; [0000004C BYTES: COLLAPSED FUNCTION type_info::`vector deleting destructor'(uint). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040255A ; [0000004B BYTES: COLLAPSED FUNCTION _pre_cpp_init. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004025A5 ; [00000189 BYTES: COLLAPSED FUNCTION ___tmainCRTStartup. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040272E ; [000000BA BYTES: COLLAPSED FUNCTION _pre_c_init. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004027E8 ; [0000000A BYTES: COLLAPSED FUNCTION start. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004027F2 ; [00000106 BYTES: COLLAPSED FUNCTION ___report_gsfailure. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004028F8 ; [00000006 BYTES: COLLAPSED FUNCTION terminate(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004028FE                 align 10h
.text:00402900 ; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402945 ; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402959 ; [00000025 BYTES: COLLAPSED FUNCTION SEH_402AD0. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040297E ; [00000006 BYTES: COLLAPSED FUNCTION _unlock. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402984 ; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040298A ; [00000006 BYTES: COLLAPSED FUNCTION _lock. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402990 ; [00000042 BYTES: COLLAPSED FUNCTION __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004029D2
.text:004029D2 ; =============== S U B R O U T I N E =======================================
.text:004029D2
.text:004029D2
.text:004029D2 sub_4029D2      proc near               ; DATA XREF: .rdata:0040411C↓o
.text:004029D2                 push    offset ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; lpTopLevelExceptionFilter
.text:004029D7                 call    ds:SetUnhandledExceptionFilter
.text:004029DD                 xor     eax, eax
.text:004029DF                 retn
.text:004029DF sub_4029D2      endp
.text:004029DF
.text:004029E0 ; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004029E6
.text:004029E6 ; =============== S U B R O U T I N E =======================================
.text:004029E6
.text:004029E6
.text:004029E6 sub_4029E6      proc near               ; CODE XREF: _pre_c_init+81↑p
.text:004029E6                 mov     edi, edi
.text:004029E8                 push    esi
.text:004029E9                 mov     eax, offset unk_4044AC
.text:004029EE                 mov     esi, offset unk_4044AC
.text:004029F3                 push    edi
.text:004029F4                 mov     edi, eax
.text:004029F6                 cmp     eax, esi
.text:004029F8                 jnb     short loc_402A09
.text:004029FA
.text:004029FA loc_4029FA:                             ; CODE XREF: sub_4029E6+21↓j
.text:004029FA                 mov     eax, [edi]
.text:004029FC                 test    eax, eax
.text:004029FE                 jz      short loc_402A02
.text:00402A00                 call    eax
.text:00402A02
.text:00402A02 loc_402A02:                             ; CODE XREF: sub_4029E6+18↑j
.text:00402A02                 add     edi, 4
.text:00402A05                 cmp     edi, esi
.text:00402A07                 jb      short loc_4029FA
.text:00402A09
.text:00402A09 loc_402A09:                             ; CODE XREF: sub_4029E6+12↑j
.text:00402A09                 pop     edi
.text:00402A0A                 pop     esi
.text:00402A0B                 retn
.text:00402A0B sub_4029E6      endp
.text:00402A0B
.text:00402A0C
.text:00402A0C ; =============== S U B R O U T I N E =======================================
.text:00402A0C
.text:00402A0C
.text:00402A0C ; void __cdecl sub_402A0C()
.text:00402A0C sub_402A0C      proc near               ; DATA XREF: _pre_cpp_init↑o
.text:00402A0C                 mov     edi, edi
.text:00402A0E                 push    esi
.text:00402A0F                 mov     eax, offset unk_4044B4
.text:00402A14                 mov     esi, offset unk_4044B4
.text:00402A19                 push    edi
.text:00402A1A                 mov     edi, eax
.text:00402A1C                 cmp     eax, esi
.text:00402A1E                 jnb     short loc_402A2F
.text:00402A20
.text:00402A20 loc_402A20:                             ; CODE XREF: sub_402A0C+21↓j
.text:00402A20                 mov     eax, [edi]
.text:00402A22                 test    eax, eax
.text:00402A24                 jz      short loc_402A28
.text:00402A26                 call    eax
.text:00402A28
.text:00402A28 loc_402A28:                             ; CODE XREF: sub_402A0C+18↑j
.text:00402A28                 add     edi, 4
.text:00402A2B                 cmp     edi, esi
.text:00402A2D                 jb      short loc_402A20
.text:00402A2F
.text:00402A2F loc_402A2F:                             ; CODE XREF: sub_402A0C+12↑j
.text:00402A2F                 pop     edi
.text:00402A30                 pop     esi
.text:00402A31                 retn
.text:00402A31 sub_402A0C      endp
.text:00402A31
.text:00402A32 ; [00000006 BYTES: COLLAPSED FUNCTION _XcptFilter. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402A38                 align 10h
.text:00402A40 ; [00000035 BYTES: COLLAPSED FUNCTION __ValidateImageBase. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402A75                 align 10h
.text:00402A80 ; [00000044 BYTES: COLLAPSED FUNCTION __FindPESection. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402AC4                 align 10h
.text:00402AD0 ; [000000BC BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402B8C ; [00000006 BYTES: COLLAPSED FUNCTION _initterm. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402B92 ; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402B98 ; [00000028 BYTES: COLLAPSED FUNCTION __setdefaultprecision. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402BC0
.text:00402BC0 ; =============== S U B R O U T I N E =======================================
.text:00402BC0
.text:00402BC0
.text:00402BC0 sub_402BC0      proc near               ; CODE XREF: _pre_c_init+86↑p
.text:00402BC0                                         ; DATA XREF: _pre_c_init+94↑o
.text:00402BC0                 xor     eax, eax
.text:00402BC2                 retn
.text:00402BC2 sub_402BC0      endp
.text:00402BC2
.text:00402BC3 ; [0000009B BYTES: COLLAPSED FUNCTION ___security_init_cookie. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402C5E ; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402C64 ; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402C6A ; [00000006 BYTES: COLLAPSED FUNCTION type_info::_type_info_dtor_internal_method(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402C70 ; [00000006 BYTES: COLLAPSED FUNCTION _invoke_watson. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402C76 ; [00000006 BYTES: COLLAPSED FUNCTION _controlfp_s. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402C7C ; [00000006 BYTES: COLLAPSED FUNCTION __CxxFrameHandler3. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402C82 ; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402C88 ; [00000006 BYTES: COLLAPSED FUNCTION _CxxThrowException. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402C8E                 align 10h
.text:00402C90 ; START OF FUNCTION CHUNK FOR sub_4016E0
.text:00402C90
.text:00402C90 SEH_4016E0:                             ; DATA XREF: sub_4016E0+5↑o
.text:00402C90                                         ; .rdata:00404494↓o
.text:00402C90 ; __unwind { // SEH_4016E0
.text:00402C90                 mov     edx, [esp-4+Dst]
.text:00402C94                 lea     eax, [edx+0Ch]
.text:00402C97                 mov     ecx, [edx-28h]
.text:00402C9A                 xor     ecx, eax
.text:00402C9C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00402CA1                 mov     eax, offset stru_404610
.text:00402CA6                 jmp     __CxxFrameHandler3
.text:00402CA6 ; } // starts at 402C90
.text:00402CA6 ; END OF FUNCTION CHUNK FOR sub_4016E0
.text:00402CA6 ; ---------------------------------------------------------------------------
.text:00402CAB                 align 10h
.text:00402CB0 ; START OF FUNCTION CHUNK FOR sub_402190
.text:00402CB0
.text:00402CB0 loc_402CB0:                             ; DATA XREF: .rdata:stru_404634↓o
.text:00402CB0 ; __unwind { // SEH_402190
.text:00402CB0                 lea     eax, [ebp+var_20]
.text:00402CB3                 jmp     loc_401350
.text:00402CB8 ; ---------------------------------------------------------------------------
.text:00402CB8
.text:00402CB8 loc_402CB8:                             ; DATA XREF: .rdata:0040463C↓o
.text:00402CB8 ;   cleanup() // owned by 4021E3
.text:00402CB8 ;   cleanup() // owned by 4021F3
.text:00402CB8 ;   cleanup() // owned by 402207
.text:00402CB8 ;   cleanup() // owned by 402228
.text:00402CB8 ;   cleanup() // owned by 40224F
.text:00402CB8 ;   cleanup() // owned by 402261
.text:00402CB8 ;   cleanup() // owned by 40229D
.text:00402CB8                 lea     eax, [ebp+var_20]
.text:00402CBB                 jmp     loc_401350
.text:00402CC0 ; ---------------------------------------------------------------------------
.text:00402CC0
.text:00402CC0 SEH_402190:                             ; DATA XREF: sub_402190+5↑o
.text:00402CC0                                         ; .rdata:00404498↓o
.text:00402CC0                 mov     edx, dword ptr [esp-4+arg_4]
.text:00402CC4                 lea     eax, [edx+0Ch]
.text:00402CC7                 mov     ecx, [edx-24h]
.text:00402CCA                 xor     ecx, eax
.text:00402CCC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00402CD1                 mov     eax, offset stru_404678
.text:00402CD6                 jmp     __CxxFrameHandler3
.text:00402CD6 ; } // starts at 402CB0
.text:00402CD6 ; END OF FUNCTION CHUNK FOR sub_402190
.text:00402CD6 ; ---------------------------------------------------------------------------
.text:00402CDB                 align 10h
.text:00402CE0 ; START OF FUNCTION CHUNK FOR _main
.text:00402CE0
.text:00402CE0 loc_402CE0:                             ; DATA XREF: .rdata:stru_40469C↓o
.text:00402CE0 ; __unwind { // _main_SEH               ; void *
.text:00402CE0                 lea     ecx, [ebp+var_48]
.text:00402CE3                 jmp     sub_401320
.text:00402CE8 ; ---------------------------------------------------------------------------
.text:00402CE8
.text:00402CE8 loc_402CE8:                             ; DATA XREF: .rdata:004046A4↓o
.text:00402CE8                 lea     ecx, [ebp+var_64] ; void *
.text:00402CEB                 jmp     sub_401320
.text:00402CF0 ; ---------------------------------------------------------------------------
.text:00402CF0
.text:00402CF0 loc_402CF0:                             ; DATA XREF: .rdata:004046AC↓o
.text:00402CF0 ;   cleanup() // owned by 401099        ; void *
.text:00402CF0 ;   cleanup() // owned by 4010B3
.text:00402CF0 ;   cleanup() // owned by 4011E5
.text:00402CF0                 lea     ecx, [ebp+var_2C]
.text:00402CF3                 jmp     sub_401320
.text:00402CF8 ; ---------------------------------------------------------------------------
.text:00402CF8
.text:00402CF8 _main_SEH:                              ; DATA XREF: _main+5↑o
.text:00402CF8                                         ; .rdata:0040449C↓o
.text:00402CF8                 mov     edx, [esp-4+argv]
.text:00402CFC                 lea     eax, [edx+0Ch]
.text:00402CFF                 mov     ecx, [edx-7Ch]
.text:00402D02                 xor     ecx, eax
.text:00402D04                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00402D09                 mov     ecx, [edx-4]
.text:00402D0C                 xor     ecx, eax
.text:00402D0E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00402D13                 mov     eax, offset stru_4046B4
.text:00402D18                 jmp     __CxxFrameHandler3
.text:00402D18 ; } // starts at 402CE0
.text:00402D18 ; END OF FUNCTION CHUNK FOR _main
.text:00402D18 ; ---------------------------------------------------------------------------
.text:00402D1D                 align 10h
.text:00402D20 ; START OF FUNCTION CHUNK FOR sub_402DC0
.text:00402D20
.text:00402D20 loc_402D20:                             ; DATA XREF: .rdata:stru_4046D8↓o
.text:00402D20 ; __unwind { // SEH_402DC0              ; void *
.text:00402D20 ;   cleanup() // owned by 402DFB
.text:00402D20                 mov     ecx, offset unk_405068
.text:00402D25                 jmp     sub_401320
.text:00402D2A ; ---------------------------------------------------------------------------
.text:00402D2A
.text:00402D2A loc_402D2A:                             ; DATA XREF: .rdata:004046E0↓o
.text:00402D2A ;   cleanup() // owned by 402E26        ; void *
.text:00402D2A                 mov     ecx, offset byte_405084
.text:00402D2F                 jmp     sub_401320
.text:00402D34 ; ---------------------------------------------------------------------------
.text:00402D34
.text:00402D34 loc_402D34:                             ; DATA XREF: .rdata:004046E8↓o
.text:00402D34 ;   cleanup() // owned by 402E52        ; void *
.text:00402D34                 mov     ecx, offset byte_4050A0
.text:00402D39                 jmp     sub_401320
.text:00402D3E ; ---------------------------------------------------------------------------
.text:00402D3E
.text:00402D3E loc_402D3E:                             ; DATA XREF: .rdata:004046F0↓o
.text:00402D3E ;   cleanup() // owned by 402E7E        ; void *
.text:00402D3E                 mov     ecx, offset byte_4050BC
.text:00402D43                 jmp     sub_401320
.text:00402D48 ; ---------------------------------------------------------------------------
.text:00402D48
.text:00402D48 loc_402D48:                             ; DATA XREF: .rdata:004046F8↓o
.text:00402D48 ;   cleanup() // owned by 402EAA        ; void *
.text:00402D48                 mov     ecx, offset byte_4050D8
.text:00402D4D                 jmp     sub_401320
.text:00402D52 ; ---------------------------------------------------------------------------
.text:00402D52
.text:00402D52 loc_402D52:                             ; DATA XREF: .rdata:00404700↓o
.text:00402D52 ;   cleanup() // owned by 402ED6        ; void *
.text:00402D52                 mov     ecx, offset byte_4050F4
.text:00402D57                 jmp     sub_401320
.text:00402D5C ; ---------------------------------------------------------------------------
.text:00402D5C
.text:00402D5C loc_402D5C:                             ; DATA XREF: .rdata:00404708↓o
.text:00402D5C ;   cleanup() // owned by 402F02        ; void *
.text:00402D5C                 mov     ecx, offset byte_405110
.text:00402D61                 jmp     sub_401320
.text:00402D66 ; ---------------------------------------------------------------------------
.text:00402D66
.text:00402D66 loc_402D66:                             ; DATA XREF: .rdata:00404710↓o
.text:00402D66 ;   cleanup() // owned by 402F2E        ; void *
.text:00402D66                 mov     ecx, offset byte_40512C
.text:00402D6B                 jmp     sub_401320
.text:00402D70 ; ---------------------------------------------------------------------------
.text:00402D70
.text:00402D70 loc_402D70:                             ; DATA XREF: .rdata:00404718↓o
.text:00402D70 ;   cleanup() // owned by 402F5A        ; void *
.text:00402D70                 mov     ecx, offset byte_405148
.text:00402D75                 jmp     sub_401320
.text:00402D7A ; ---------------------------------------------------------------------------
.text:00402D7A
.text:00402D7A SEH_402DC0:                             ; DATA XREF: sub_402DC0+5↓o
.text:00402D7A                                         ; .rdata:004044A0↓o
.text:00402D7A                 mov     edx, [esp-4+arg_4]
.text:00402D7E                 lea     eax, [edx+0Ch]
.text:00402D81                 mov     ecx, [edx-10h]
.text:00402D84                 xor     ecx, eax
.text:00402D86                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00402D8B                 mov     eax, offset stru_404720
.text:00402D90                 jmp     __CxxFrameHandler3
.text:00402D90 ; } // starts at 402D20
.text:00402D90 ; END OF FUNCTION CHUNK FOR sub_402DC0
.text:00402D90 ; ---------------------------------------------------------------------------
.text:00402D95                 align 10h
.text:00402DA0 ; START OF FUNCTION CHUNK FOR sub_403050
.text:00402DA0
.text:00402DA0 loc_402DA0:                             ; DATA XREF: .rdata:stru_404744↓o
.text:00402DA0 ; __unwind { // SEH_403050
.text:00402DA0 ;   cleanup() // owned by 403074
.text:00402DA0                 jmp     loc_401450
.text:00402DA5 ; ---------------------------------------------------------------------------
.text:00402DA5
.text:00402DA5 SEH_403050:                             ; DATA XREF: sub_403050+5↓o
.text:00402DA5                                         ; .rdata:004044A4↓o
.text:00402DA5                 mov     edx, [esp-4+arg_4]
.text:00402DA9                 lea     eax, [edx+0Ch]
.text:00402DAC                 mov     ecx, [edx-0Ch]
.text:00402DAF                 xor     ecx, eax
.text:00402DB1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00402DB6                 mov     eax, offset stru_40474C
.text:00402DBB                 jmp     __CxxFrameHandler3
.text:00402DBB ; } // starts at 402DA0
.text:00402DBB ; END OF FUNCTION CHUNK FOR sub_403050
.text:00402DC0
.text:00402DC0 ; =============== S U B R O U T I N E =======================================
.text:00402DC0
.text:00402DC0 ; Attributes: bp-based frame
.text:00402DC0
.text:00402DC0 sub_402DC0      proc near               ; DATA XREF: .rdata:00404108↓o
.text:00402DC0
.text:00402DC0 var_C           = dword ptr -0Ch
.text:00402DC0 var_4           = dword ptr -4
.text:00402DC0 arg_4           = dword ptr  0Ch
.text:00402DC0
.text:00402DC0 ; FUNCTION CHUNK AT .text:00402D20 SIZE 00000075 BYTES
.text:00402DC0
.text:00402DC0 ; __unwind { // SEH_402DC0
.text:00402DC0                 push    ebp
.text:00402DC1                 mov     ebp, esp
.text:00402DC3                 push    0FFFFFFFFh
.text:00402DC5                 push    offset SEH_402DC0
.text:00402DCA                 mov     eax, large fs:0
.text:00402DD0                 push    eax
.text:00402DD1                 push    ebx
.text:00402DD2                 push    esi
.text:00402DD3                 push    edi
.text:00402DD4                 mov     eax, ___security_cookie
.text:00402DD9                 xor     eax, ebp
.text:00402DDB                 push    eax
.text:00402DDC                 lea     eax, [ebp+var_C]
.text:00402DDF                 mov     large fs:0, eax
.text:00402DE5                 mov     edi, 28h ; '('
.text:00402DEA                 mov     eax, offset aEjpMysljylcKdK ; "ejp mysljylc kd kxveddknmc re jsicpdrys"...
.text:00402DEF                 mov     esi, offset unk_405068
.text:00402DF4                 call    sub_4014F0
.text:00402DF9                 xor     ebx, ebx
.text:00402DFB ;   try {
.text:00402DFB                 mov     [ebp+var_4], ebx
.text:00402DFE                 lea     edi, [ebx+2Ch]
.text:00402E01                 mov     eax, offset aRbcpcYpcRtcsra ; "rbcpc ypc rtcsra dkh wyfrepkym veddknkm"...
.text:00402E06                 mov     esi, offset byte_405084
.text:00402E0B                 mov     dword_405098, 0Fh
.text:00402E15                 mov     dword_405094, ebx
.text:00402E1B                 mov     byte_405084, bl
.text:00402E21                 call    sub_4014F0
.text:00402E21 ;   } // starts at 402DFB
.text:00402E26 ;   try {
.text:00402E26                 mov     byte ptr [ebp+var_4], 1
.text:00402E2A                 lea     edi, [ebx+29h]
.text:00402E2D                 mov     eax, offset aDeKrKdEoyaKwAe ; "de kr kd eoya kw aej tysr re ujdr lkgc "...
.text:00402E32                 mov     esi, offset byte_4050A0
.text:00402E37                 mov     dword_4050B4, 0Fh
.text:00402E41                 mov     dword_4050B0, ebx
.text:00402E47                 mov     byte_4050A0, bl
.text:00402E4D                 call    sub_4014F0
.text:00402E4D ;   } // starts at 402E26
.text:00402E52 ;   try {
.text:00402E52                 mov     byte ptr [ebp+var_4], 2
.text:00402E56                 lea     edi, [ebx+5]
.text:00402E59                 mov     eax, offset aYQee ; "y qee"
.text:00402E5E                 mov     esi, offset byte_4050BC
.text:00402E63                 mov     dword_4050D0, 0Fh
.text:00402E6D                 mov     dword_4050CC, ebx
.text:00402E73                 mov     byte_4050BC, bl
.text:00402E79                 call    sub_4014F0
.text:00402E79 ;   } // starts at 402E52
.text:00402E7E ;   try {
.text:00402E7E                 mov     byte ptr [ebp+var_4], 3
.text:00402E82                 lea     edi, [ebx+1]
.text:00402E85                 mov     eax, offset aZ  ; "z"
.text:00402E8A                 mov     esi, offset byte_4050D8
.text:00402E8F                 mov     dword_4050EC, 0Fh
.text:00402E99                 mov     dword_4050E8, ebx
.text:00402E9F                 mov     byte_4050D8, bl
.text:00402EA5                 call    sub_4014F0
.text:00402EA5 ;   } // starts at 402E7E
.text:00402EAA ;   try {
.text:00402EAA                 mov     byte ptr [ebp+var_4], 4
.text:00402EAE                 lea     edi, [ebx+28h]
.text:00402EB1                 mov     eax, offset aOurLanguageIsI ; "our language is impossible to understan"...
.text:00402EB6                 mov     esi, offset byte_4050F4
.text:00402EBB                 mov     dword_405108, 0Fh
.text:00402EC5                 mov     dword_405104, ebx
.text:00402ECB                 mov     byte_4050F4, bl
.text:00402ED1                 call    sub_4014F0
.text:00402ED1 ;   } // starts at 402EAA
.text:00402ED6 ;   try {
.text:00402ED6                 mov     byte ptr [ebp+var_4], 5
.text:00402EDA                 lea     edi, [ebx+2Ch]
.text:00402EDD                 mov     eax, offset aThereAreTwenty ; "there are twenty six factorial possibil"...
.text:00402EE2                 mov     esi, offset byte_405110
.text:00402EE7                 mov     dword_405124, 0Fh
.text:00402EF1                 mov     dword_405120, ebx
.text:00402EF7                 mov     byte_405110, bl
.text:00402EFD                 call    sub_4014F0
.text:00402EFD ;   } // starts at 402ED6
.text:00402F02 ;   try {
.text:00402F02                 mov     byte ptr [ebp+var_4], 6
.text:00402F06                 lea     edi, [ebx+29h]
.text:00402F09                 mov     eax, offset aSoItIsOkayIfYo ; "so it is okay if you want to just give "...
.text:00402F0E                 mov     esi, offset byte_40512C
.text:00402F13                 mov     dword_405140, 0Fh
.text:00402F1D                 mov     dword_40513C, ebx
.text:00402F23                 mov     byte_40512C, bl
.text:00402F29                 call    sub_4014F0
.text:00402F29 ;   } // starts at 402F02
.text:00402F2E ;   try {
.text:00402F2E                 mov     byte ptr [ebp+var_4], 7
.text:00402F32                 lea     edi, [ebx+5]
.text:00402F35                 mov     eax, offset aAZoo ; "a zoo"
.text:00402F3A                 mov     esi, offset byte_405148
.text:00402F3F                 mov     dword_40515C, 0Fh
.text:00402F49                 mov     dword_405158, ebx
.text:00402F4F                 mov     byte_405148, bl
.text:00402F55                 call    sub_4014F0
.text:00402F55 ;   } // starts at 402F2E
.text:00402F5A ;   try {
.text:00402F5A                 mov     byte ptr [ebp+var_4], 8
.text:00402F5E                 mov     dword_405178, 0Fh
.text:00402F68                 mov     dword_405174, ebx
.text:00402F6E                 lea     edi, [ebx+1]
.text:00402F71                 mov     eax, offset unk_40415C
.text:00402F76                 mov     esi, offset byte_405164
.text:00402F7B                 mov     byte_405164, bl
.text:00402F81                 call    sub_4014F0
.text:00402F86                 push    offset sub_403030 ; void (__cdecl *)()
.text:00402F8B                 call    _atexit
.text:00402F90                 add     esp, 4
.text:00402F93                 mov     ecx, [ebp+var_C]
.text:00402F96                 mov     large fs:0, ecx
.text:00402F9D                 pop     ecx
.text:00402F9E                 pop     edi
.text:00402F9F                 pop     esi
.text:00402FA0                 pop     ebx
.text:00402FA1                 mov     esp, ebp
.text:00402FA3                 pop     ebp
.text:00402FA4                 retn
.text:00402FA4 ;   } // starts at 402F5A
.text:00402FA4 ; } // starts at 402DC0
.text:00402FA4 sub_402DC0      endp
.text:00402FA4
.text:00402FA4 ; ---------------------------------------------------------------------------
.text:00402FA5                 align 10h
.text:00402FB0
.text:00402FB0 ; =============== S U B R O U T I N E =======================================
.text:00402FB0
.text:00402FB0 ; Attributes: bp-based frame
.text:00402FB0
.text:00402FB0 sub_402FB0      proc near               ; DATA XREF: .rdata:0040410C↓o
.text:00402FB0
.text:00402FB0 var_10          = dword ptr -10h
.text:00402FB0 var_4           = dword ptr -4
.text:00402FB0
.text:00402FB0                 push    ebp
.text:00402FB1                 mov     ebp, esp
.text:00402FB3                 sub     esp, 10h
.text:00402FB6                 push    10h
.text:00402FB8                 call    ds:??2@YAPAXI@Z ; operator new(uint)
.text:00402FBE                 add     esp, 4
.text:00402FC1                 test    eax, eax
.text:00402FC3                 jz      short loc_403001
.text:00402FC5                 mov     dword_4054D8, eax
.text:00402FCA                 mov     [eax], eax
.text:00402FCC                 mov     eax, dword_4054D8
.text:00402FD1                 mov     [eax+4], eax
.text:00402FD4                 mov     eax, dword_4054D8
.text:00402FD9                 mov     [eax+8], eax
.text:00402FDC                 mov     ecx, dword_4054D8
.text:00402FE2                 mov     al, 1
.text:00402FE4                 mov     [ecx+0Eh], al
.text:00402FE7                 mov     edx, dword_4054D8
.text:00402FED                 push    offset sub_403050 ; void (__cdecl *)()
.text:00402FF2                 mov     [edx+0Fh], al
.text:00402FF5                 call    _atexit
.text:00402FFA                 add     esp, 4
.text:00402FFD                 mov     esp, ebp
.text:00402FFF                 pop     ebp
.text:00403000                 retn
.text:00403001 ; ---------------------------------------------------------------------------
.text:00403001
.text:00403001 loc_403001:                             ; CODE XREF: sub_402FB0+13↑j
.text:00403001                 lea     eax, [ebp+var_4]
.text:00403004                 push    eax
.text:00403005                 lea     ecx, [ebp+var_10]
.text:00403008                 mov     [ebp+var_4], 0
.text:0040300F                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:00403015                 push    offset __TI2?AVbad_alloc@std@@ ; throw info for 'class std::bad_alloc'
.text:0040301A                 lea     ecx, [ebp+var_10]
.text:0040301D                 push    ecx
.text:0040301E                 mov     [ebp+var_10], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:00403025                 call    _CxxThrowException
.text:00403025 sub_402FB0      endp
.text:00403025
.text:00403025 ; ---------------------------------------------------------------------------
.text:0040302A                 align 10h
.text:00403030
.text:00403030 ; =============== S U B R O U T I N E =======================================
.text:00403030
.text:00403030
.text:00403030 ; void __cdecl sub_403030()
.text:00403030 sub_403030      proc near               ; DATA XREF: sub_402DC0+1C6↑o
.text:00403030                 push    offset sub_401320 ; void (__thiscall *)(void *)
.text:00403035                 push    0Ah             ; int
.text:00403037                 push    1Ch             ; unsigned int
.text:00403039                 push    offset unk_405068 ; void *
.text:0040303E                 call    ??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
.text:00403043                 retn
.text:00403043 sub_403030      endp
.text:00403043
.text:00403043 ; ---------------------------------------------------------------------------
.text:00403044                 align 10h
.text:00403050
.text:00403050 ; =============== S U B R O U T I N E =======================================
.text:00403050
.text:00403050 ; Attributes: bp-based frame
.text:00403050
.text:00403050 ; void __cdecl sub_403050()
.text:00403050 sub_403050      proc near               ; DATA XREF: sub_402FB0+3D↑o
.text:00403050
.text:00403050 var_10          = byte ptr -10h
.text:00403050 var_C           = dword ptr -0Ch
.text:00403050 var_4           = dword ptr -4
.text:00403050 arg_4           = dword ptr  0Ch
.text:00403050
.text:00403050 ; FUNCTION CHUNK AT .text:00401450 SIZE 0000000E BYTES
.text:00403050 ; FUNCTION CHUNK AT .text:00402DA0 SIZE 00000020 BYTES
.text:00403050
.text:00403050 ; __unwind { // SEH_403050
.text:00403050                 push    ebp
.text:00403051                 mov     ebp, esp
.text:00403053                 push    0FFFFFFFFh
.text:00403055                 push    offset SEH_403050
.text:0040305A                 mov     eax, large fs:0
.text:00403060                 push    eax
.text:00403061                 push    ecx
.text:00403062                 push    esi
.text:00403063                 mov     eax, ___security_cookie
.text:00403068                 xor     eax, ebp
.text:0040306A                 push    eax
.text:0040306B                 lea     eax, [ebp+var_C]
.text:0040306E                 mov     large fs:0, eax
.text:00403074 ;   try {
.text:00403074                 mov     [ebp+var_4], 0
.text:0040307B                 mov     eax, dword_4054D8
.text:00403080                 mov     ecx, [eax]
.text:00403082                 push    eax
.text:00403083                 push    ecx
.text:00403084                 lea     esi, [ebp+var_10]
.text:00403087                 call    sub_401640
.text:0040308C                 mov     eax, dword_4054D8
.text:00403091                 push    eax
.text:00403092                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00403098                 add     esp, 4
.text:0040309B                 mov     ecx, [ebp+var_C]
.text:0040309E                 mov     large fs:0, ecx
.text:004030A5                 pop     ecx
.text:004030A6                 pop     esi
.text:004030A7                 mov     esp, ebp
.text:004030A9                 pop     ebp
.text:004030AA                 retn
.text:004030AA ;   } // starts at 403074
.text:004030AA ; } // starts at 403050
.text:004030AA sub_403050      endp
.text:004030AA
.text:004030AA ; ---------------------------------------------------------------------------
.text:004030AB                 align 200h
.text:00403200                 dd 380h dup(?)
.text:00403200 _text           ends
.text:00403200