__text:00000001000011D0 ; =============== S U B R O U T I N E =======================================
__text:00000001000011D0
__text:00000001000011D0 ; Attributes: bp-based frame
__text:00000001000011D0
__text:00000001000011D0 ; __int64 __fastcall go(int, int, int)
__text:00000001000011D0                 public __Z2goiii
__text:00000001000011D0 __Z2goiii       proc near               ; CODE XREF: go(int,int,int)+2F1↓p
__text:00000001000011D0                                         ; _main+50C↓p
__text:00000001000011D0
__text:00000001000011D0 var_134         = dword ptr -134h
__text:00000001000011D0 var_130         = qword ptr -130h
__text:00000001000011D0 var_128         = dword ptr -128h
__text:00000001000011D0 var_124         = dword ptr -124h
__text:00000001000011D0 var_120         = qword ptr -120h
__text:00000001000011D0 var_118         = qword ptr -118h
__text:00000001000011D0 var_110         = dword ptr -110h
__text:00000001000011D0 var_10C         = dword ptr -10Ch
__text:00000001000011D0 var_108         = dword ptr -108h
__text:00000001000011D0 var_104         = dword ptr -104h
__text:00000001000011D0 var_100         = qword ptr -100h
__text:00000001000011D0 var_F8          = qword ptr -0F8h
__text:00000001000011D0 var_F0          = qword ptr -0F0h
__text:00000001000011D0 var_E8          = qword ptr -0E8h
__text:00000001000011D0 var_E0          = qword ptr -0E0h
__text:00000001000011D0 var_D8          = qword ptr -0D8h
__text:00000001000011D0 var_D0          = qword ptr -0D0h
__text:00000001000011D0 var_C8          = qword ptr -0C8h
__text:00000001000011D0 var_C0          = qword ptr -0C0h
__text:00000001000011D0 var_B8          = qword ptr -0B8h
__text:00000001000011D0 var_B0          = qword ptr -0B0h
__text:00000001000011D0 var_A8          = qword ptr -0A8h
__text:00000001000011D0 var_A0          = qword ptr -0A0h
__text:00000001000011D0 var_98          = qword ptr -98h
__text:00000001000011D0 var_90          = qword ptr -90h
__text:00000001000011D0 var_88          = qword ptr -88h
__text:00000001000011D0 var_78          = qword ptr -78h
__text:00000001000011D0 var_70          = qword ptr -70h
__text:00000001000011D0 var_68          = byte ptr -68h
__text:00000001000011D0 var_60          = qword ptr -60h
__text:00000001000011D0 var_58          = qword ptr -58h
__text:00000001000011D0 var_50          = qword ptr -50h
__text:00000001000011D0 var_48          = qword ptr -48h
__text:00000001000011D0 var_40          = qword ptr -40h
__text:00000001000011D0 var_38          = qword ptr -38h
__text:00000001000011D0 var_30          = qword ptr -30h
__text:00000001000011D0 var_28          = qword ptr -28h
__text:00000001000011D0 var_20          = qword ptr -20h
__text:00000001000011D0 var_18          = qword ptr -18h
__text:00000001000011D0 var_10          = qword ptr -10h
__text:00000001000011D0 var_8           = qword ptr -8
__text:00000001000011D0
__text:00000001000011D0                 push    rbp
__text:00000001000011D1                 mov     rbp, rsp
__text:00000001000011D4                 sub     rsp, 140h
__text:00000001000011DB                 lea     rax, _v
__text:00000001000011E2                 mov     [rbp+var_108], edi
__text:00000001000011E8                 mov     [rbp+var_10C], esi
__text:00000001000011EE                 mov     [rbp+var_110], edx
__text:00000001000011F4                 movsxd  rcx, [rbp+var_108]
__text:00000001000011FB                 imul    rcx, 18h
__text:0000000100001202                 add     rax, rcx
__text:0000000100001205                 mov     [rbp+var_100], rax
__text:000000010000120C                 mov     rax, [rbp+var_100]
__text:0000000100001213                 mov     rcx, [rax+8]
__text:0000000100001217                 mov     rax, [rax]
__text:000000010000121A                 sub     rcx, rax
__text:000000010000121D                 sar     rcx, 2
__text:0000000100001221                 mov     edx, ecx
__text:0000000100001223                 cmp     edx, 0
__text:0000000100001229                 jnz     loc_10000123E
__text:000000010000122F                 mov     [rbp+var_104], 0
__text:0000000100001239                 jmp     loc_100001521
__text:000000010000123E ; ---------------------------------------------------------------------------
__text:000000010000123E
__text:000000010000123E loc_10000123E:                          ; CODE XREF: go(int,int,int)+59↑j
__text:000000010000123E                 lea     rdx, [rbp+var_68]
__text:0000000100001242                 lea     rax, [rbp+var_98]
__text:0000000100001249                 lea     rcx, [rbp+var_90]
__text:0000000100001250                 lea     rsi, [rbp+var_28]
__text:0000000100001254                 lea     rdi, _v
__text:000000010000125B                 lea     r8, [rbp+var_D8]
__text:0000000100001262                 movsxd  r9, [rbp+var_108]
__text:0000000100001269                 imul    r9, 18h
__text:0000000100001270                 mov     r10, rdi
__text:0000000100001273                 add     r10, r9
__text:0000000100001276                 mov     [rbp+var_F8], r10
__text:000000010000127D                 mov     r9, [rbp+var_F8]
__text:0000000100001284                 mov     r10, [r9]
__text:0000000100001287                 mov     [rbp+var_E0], r9
__text:000000010000128E                 mov     [rbp+var_E8], r10
__text:0000000100001295                 mov     r9, [rbp+var_E8]
__text:000000010000129C                 mov     [rbp+var_C8], r8
__text:00000001000012A3                 mov     [rbp+var_D0], r9
__text:00000001000012AA                 mov     r8, [rbp+var_C8]
__text:00000001000012B1                 mov     r9, [rbp+var_D0]
__text:00000001000012B8                 mov     [rbp+var_B8], r8
__text:00000001000012BF                 mov     [rbp+var_C0], r9
__text:00000001000012C6                 mov     r8, [rbp+var_B8]
__text:00000001000012CD                 mov     r9, [rbp+var_C0]
__text:00000001000012D4                 mov     [r8], r9
__text:00000001000012D7                 mov     r8, [rbp+var_D8]
__text:00000001000012DE                 mov     [rbp+var_F0], r8
__text:00000001000012E5                 mov     r8, [rbp+var_F0]
__text:00000001000012EC                 mov     [rbp+var_118], r8
__text:00000001000012F3                 movsxd  r8, [rbp+var_108]
__text:00000001000012FA                 imul    r8, 18h
__text:0000000100001301                 add     rdi, r8
__text:0000000100001304                 mov     [rbp+var_48], rdi
__text:0000000100001308                 mov     rdi, [rbp+var_48]
__text:000000010000130C                 mov     r8, [rdi+8]
__text:0000000100001310                 mov     [rbp+var_30], rdi
__text:0000000100001314                 mov     [rbp+var_38], r8
__text:0000000100001318                 mov     rdi, [rbp+var_38]
__text:000000010000131C                 mov     [rbp+var_18], rsi
__text:0000000100001320                 mov     [rbp+var_20], rdi
__text:0000000100001324                 mov     rsi, [rbp+var_18]
__text:0000000100001328                 mov     rdi, [rbp+var_20]
__text:000000010000132C                 mov     [rbp+var_8], rsi
__text:0000000100001330                 mov     [rbp+var_10], rdi
__text:0000000100001334                 mov     rsi, [rbp+var_8]
__text:0000000100001338                 mov     rdi, [rbp+var_10]
__text:000000010000133C                 mov     [rsi], rdi
__text:000000010000133F                 mov     rsi, [rbp+var_28]
__text:0000000100001343                 mov     [rbp+var_40], rsi
__text:0000000100001347                 mov     rsi, [rbp+var_40]
__text:000000010000134B                 mov     [rbp+var_120], rsi
__text:0000000100001352                 mov     rsi, [rbp+var_118]
__text:0000000100001359                 mov     rdi, [rbp+var_120]
__text:0000000100001360                 mov     [rbp+var_90], rsi
__text:0000000100001367                 mov     [rbp+var_98], rdi
__text:000000010000136E                 mov     [rbp+var_88], rcx
__text:0000000100001375                 mov     rcx, [rbp+var_88]
__text:000000010000137C                 mov     rcx, [rcx]
__text:000000010000137F                 mov     [rbp+var_50], rax
__text:0000000100001383                 mov     rax, [rbp+var_50]
__text:0000000100001387                 mov     rax, [rax]
__text:000000010000138A                 mov     [rbp+var_70], rcx
__text:000000010000138E                 mov     [rbp+var_78], rax
__text:0000000100001392                 mov     rax, [rbp+var_70]
__text:0000000100001396                 mov     rcx, [rbp+var_78]
__text:000000010000139A                 mov     [rbp+var_58], rax
__text:000000010000139E                 mov     [rbp+var_60], rcx
__text:00000001000013A2                 mov     rdi, [rbp+var_58]
__text:00000001000013A6                 mov     rsi, [rbp+var_60]
__text:00000001000013AA                 call    __ZNSt3__16__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_ ; std::__1::__sort<std::__1::__less<int,int> &,int *>(int *,int *,std::__1::__less<int,int> &)
__text:00000001000013AF                 mov     [rbp+var_124], 0
__text:00000001000013B9
__text:00000001000013B9 loc_1000013B9:                          ; CODE XREF: go(int,int,int)+342↓j
__text:00000001000013B9                 lea     rax, _v
__text:00000001000013C0                 mov     ecx, [rbp+var_124]
__text:00000001000013C6                 movsxd  rdx, [rbp+var_108]
__text:00000001000013CD                 imul    rdx, 18h
__text:00000001000013D4                 add     rax, rdx
__text:00000001000013D7                 mov     [rbp+var_A0], rax
__text:00000001000013DE                 mov     rax, [rbp+var_A0]
__text:00000001000013E5                 mov     rdx, [rax+8]
__text:00000001000013E9                 mov     rax, [rax]
__text:00000001000013EC                 sub     rdx, rax
__text:00000001000013EF                 sar     rdx, 2
__text:00000001000013F3                 mov     esi, edx
__text:00000001000013F5                 cmp     ecx, esi
__text:00000001000013F7                 jge     loc_100001517
__text:00000001000013FD                 lea     rax, _y
__text:0000000100001404                 lea     rcx, _v
__text:000000010000140B                 movsxd  rdx, [rbp+var_108]
__text:0000000100001412                 imul    rdx, 18h
__text:0000000100001419                 add     rcx, rdx
__text:000000010000141C                 movsxd  rdx, [rbp+var_124]
__text:0000000100001423                 mov     [rbp+var_A8], rcx
__text:000000010000142A                 mov     [rbp+var_B0], rdx
__text:0000000100001431                 mov     rcx, [rbp+var_A8]
__text:0000000100001438                 mov     rdx, [rbp+var_B0]
__text:000000010000143F                 mov     rcx, [rcx]
__text:0000000100001442                 mov     esi, [rcx+rdx*4]
__text:0000000100001445                 mov     [rbp+var_128], esi
__text:000000010000144B                 movsxd  rcx, [rbp+var_108]
__text:0000000100001452                 mov     esi, [rax+rcx*4]
__text:0000000100001455                 mov     edi, [rbp+var_110]
__text:000000010000145B                 mov     r8d, [rbp+var_108]
__text:0000000100001462                 sub     r8d, [rbp+var_128]
__text:0000000100001469                 imul    edi, r8d
__text:000000010000146D                 mov     [rbp+var_130], rax
__text:0000000100001474                 mov     eax, edi
__text:0000000100001476                 cdq
__text:0000000100001477                 idiv    [rbp+var_10C]
__text:000000010000147D                 sub     esi, eax
__text:000000010000147F                 sub     esi, 1
__text:0000000100001485                 movsxd  rcx, [rbp+var_128]
__text:000000010000148C                 mov     r9, [rbp+var_130]
__text:0000000100001493                 mov     [r9+rcx*4], esi
__text:0000000100001497                 mov     edi, [rbp+var_128] ; int
__text:000000010000149D                 mov     eax, [rbp+var_108]
__text:00000001000014A3                 sub     eax, [rbp+var_128]
__text:00000001000014A9                 movsxd  rcx, [rbp+var_108]
__text:00000001000014B0                 mov     edx, [r9+rcx*4]
__text:00000001000014B4                 movsxd  rcx, [rbp+var_128]
__text:00000001000014BB                 sub     edx, [r9+rcx*4] ; int
__text:00000001000014BF                 mov     esi, eax        ; int
__text:00000001000014C1                 call    __Z2goiii       ; go(int,int,int)
__text:00000001000014C6                 lea     rcx, _y
__text:00000001000014CD                 mov     edx, [rbp+var_108]
__text:00000001000014D3                 sub     edx, [rbp+var_128]
__text:00000001000014D9                 mov     [rbp+var_10C], edx
__text:00000001000014DF                 movsxd  r9, [rbp+var_108]
__text:00000001000014E6                 mov     edx, [rcx+r9*4]
__text:00000001000014EA                 movsxd  r9, [rbp+var_128]
__text:00000001000014F1                 sub     edx, [rcx+r9*4]
__text:00000001000014F5                 mov     [rbp+var_110], edx
__text:00000001000014FB                 mov     [rbp+var_134], eax
__text:0000000100001501                 mov     eax, [rbp+var_124]
__text:0000000100001507                 add     eax, 1
__text:000000010000150C                 mov     [rbp+var_124], eax
__text:0000000100001512                 jmp     loc_1000013B9
__text:0000000100001517 ; ---------------------------------------------------------------------------
__text:0000000100001517
__text:0000000100001517 loc_100001517:                          ; CODE XREF: go(int,int,int)+227↑j
__text:0000000100001517                 mov     [rbp+var_104], 0
__text:0000000100001521
__text:0000000100001521 loc_100001521:                          ; CODE XREF: go(int,int,int)+69↑j
__text:0000000100001521                 mov     eax, [rbp+var_104]
__text:0000000100001527                 add     rsp, 140h
__text:000000010000152E                 pop     rbp
__text:000000010000152F                 retn
__text:000000010000152F __Z2goiii       endp
__text:000000010000152F
__text:0000000100001530
__text:0000000100001530 ; =============== S U B R O U T I N E =======================================
__text:0000000100001530
__text:0000000100001530 ; Attributes: bp-based frame
__text:0000000100001530
__text:0000000100001530 ; __int64 __fastcall vect(__int64, __int64, __int64, __int64)
__text:0000000100001530                 public __Z4vectxxxx
__text:0000000100001530 __Z4vectxxxx    proc near               ; CODE XREF: _main+761↓p
__text:0000000100001530
__text:0000000100001530 var_20          = qword ptr -20h
__text:0000000100001530 var_18          = qword ptr -18h
__text:0000000100001530 var_10          = qword ptr -10h
__text:0000000100001530 var_8           = qword ptr -8
__text:0000000100001530
__text:0000000100001530                 push    rbp
__text:0000000100001531                 mov     rbp, rsp
__text:0000000100001534                 mov     [rbp+var_8], rdi
__text:0000000100001538                 mov     [rbp+var_10], rsi
__text:000000010000153C                 mov     [rbp+var_18], rdx
__text:0000000100001540                 mov     [rbp+var_20], rcx
__text:0000000100001544                 mov     rcx, [rbp+var_8]
__text:0000000100001548                 imul    rcx, [rbp+var_20]
__text:000000010000154D                 mov     rdx, [rbp+var_18]
__text:0000000100001551                 imul    rdx, [rbp+var_10]
__text:0000000100001556                 sub     rcx, rdx
__text:0000000100001559                 mov     rax, rcx
__text:000000010000155C                 pop     rbp
__text:000000010000155D                 retn
__text:000000010000155D __Z4vectxxxx    endp
__text:000000010000155D
__text:000000010000155D ; ---------------------------------------------------------------------------
__text:000000010000155E                 align 20h
__text:0000000100001560
__text:0000000100001560 ; =============== S U B R O U T I N E =======================================
__text:0000000100001560
__text:0000000100001560 ; Attributes: bp-based frame
__text:0000000100001560
__text:0000000100001560 ; int __cdecl main(int argc, const char **argv, const char **envp)
__text:0000000100001560                 public _main
__text:0000000100001560 _main           proc near
__text:0000000100001560
__text:0000000100001560 var_218         = qword ptr -218h
__text:0000000100001560 var_210         = qword ptr -210h
__text:0000000100001560 var_204         = dword ptr -204h
__text:0000000100001560 var_200         = qword ptr -200h
__text:0000000100001560 var_1F8         = dword ptr -1F8h
__text:0000000100001560 var_1F4         = dword ptr -1F4h
__text:0000000100001560 var_1F0         = qword ptr -1F0h
__text:0000000100001560 var_1E1         = byte ptr -1E1h
__text:0000000100001560 var_1E0         = qword ptr -1E0h
__text:0000000100001560 var_1D8         = qword ptr -1D8h
__text:0000000100001560 var_1D0         = qword ptr -1D0h
__text:0000000100001560 var_1C4         = dword ptr -1C4h
__text:0000000100001560 var_1C0         = qword ptr -1C0h
__text:0000000100001560 var_1B8         = qword ptr -1B8h
__text:0000000100001560 var_1AC         = dword ptr -1ACh
__text:0000000100001560 var_1A8         = qword ptr -1A8h
__text:0000000100001560 var_1A0         = dword ptr -1A0h
__text:0000000100001560 var_19C         = dword ptr -19Ch
__text:0000000100001560 var_198         = dword ptr -198h
__text:0000000100001560 var_194         = dword ptr -194h
__text:0000000100001560 var_190         = dword ptr -190h
__text:0000000100001560 var_18C         = dword ptr -18Ch
__text:0000000100001560 var_188         = dword ptr -188h
__text:0000000100001560 var_184         = dword ptr -184h
__text:0000000100001560 var_180         = dword ptr -180h
__text:0000000100001560 var_17C         = dword ptr -17Ch
__text:0000000100001560 var_178         = dword ptr -178h
__text:0000000100001560 var_174         = dword ptr -174h
__text:0000000100001560 var_170         = dword ptr -170h
__text:0000000100001560 var_16C         = dword ptr -16Ch
__text:0000000100001560 var_168         = dword ptr -168h
__text:0000000100001560 var_164         = dword ptr -164h
__text:0000000100001560 var_160         = dword ptr -160h
__text:0000000100001560 var_150         = qword ptr -150h
__text:0000000100001560 var_148         = qword ptr -148h
__text:0000000100001560 var_130         = qword ptr -130h
__text:0000000100001560 var_128         = qword ptr -128h
__text:0000000100001560 var_120         = qword ptr -120h
__text:0000000100001560 var_118         = qword ptr -118h
__text:0000000100001560 var_110         = qword ptr -110h
__text:0000000100001560 var_F8          = qword ptr -0F8h
__text:0000000100001560 var_F0          = qword ptr -0F0h
__text:0000000100001560 var_E8          = qword ptr -0E8h
__text:0000000100001560 var_E0          = qword ptr -0E0h
__text:0000000100001560 var_D8          = qword ptr -0D8h
__text:0000000100001560 var_D0          = qword ptr -0D0h
__text:0000000100001560 var_C8          = qword ptr -0C8h
__text:0000000100001560 var_C0          = qword ptr -0C0h
__text:0000000100001560 var_B8          = qword ptr -0B8h
__text:0000000100001560 var_B0          = qword ptr -0B0h
__text:0000000100001560 var_A8          = qword ptr -0A8h
__text:0000000100001560 var_A0          = qword ptr -0A0h
__text:0000000100001560 var_98          = qword ptr -98h
__text:0000000100001560 var_90          = qword ptr -90h
__text:0000000100001560 var_88          = qword ptr -88h
__text:0000000100001560 var_80          = qword ptr -80h
__text:0000000100001560 var_78          = qword ptr -78h
__text:0000000100001560 var_70          = qword ptr -70h
__text:0000000100001560 var_68          = qword ptr -68h
__text:0000000100001560 var_60          = qword ptr -60h
__text:0000000100001560 var_50          = qword ptr -50h
__text:0000000100001560 var_48          = qword ptr -48h
__text:0000000100001560 var_40          = byte ptr -40h
__text:0000000100001560 var_38          = qword ptr -38h
__text:0000000100001560 var_30          = qword ptr -30h
__text:0000000100001560 var_28          = qword ptr -28h
__text:0000000100001560 var_20          = qword ptr -20h
__text:0000000100001560 var_18          = qword ptr -18h
__text:0000000100001560 var_10          = qword ptr -10h
__text:0000000100001560 var_8           = qword ptr -8
__text:0000000100001560
__text:0000000100001560                 push    rbp
__text:0000000100001561                 mov     rbp, rsp
__text:0000000100001564                 sub     rsp, 220h
__text:000000010000156B                 mov     rdi, cs:__ZNSt3__13cinE_ptr
__text:0000000100001572                 lea     rsi, [rbp+var_164]
__text:0000000100001579                 mov     [rbp+var_160], 0
__text:0000000100001583                 call    __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi ; std::__1::basic_istream<char,std::__1::char_traits<char>>::operator>>(int &)
__text:0000000100001588                 mov     [rbp+var_168], 1
__text:0000000100001592                 mov     [rbp+var_1A8], rax
__text:0000000100001599
__text:0000000100001599 loc_100001599:                          ; CODE XREF: _main+86F↓j
__text:0000000100001599                 mov     eax, [rbp+var_168]
__text:000000010000159F                 cmp     eax, [rbp+var_164]
__text:00000001000015A5                 jg      loc_100001DD4
__text:00000001000015AB                 lea     rdi, aD         ; "%d"
__text:00000001000015B2                 lea     rsi, _n
__text:00000001000015B9                 mov     al, 0
__text:00000001000015BB                 call    _scanf
__text:00000001000015C0                 mov     [rbp+var_16C], 0
__text:00000001000015CA                 mov     [rbp+var_1AC], eax
__text:00000001000015D0
__text:00000001000015D0 loc_1000015D0:                          ; CODE XREF: _main+19A↓j
__text:00000001000015D0                 mov     eax, [rbp+var_16C]
__text:00000001000015D6                 cmp     eax, cs:_n
__text:00000001000015DC                 jge     loc_1000016FF
__text:00000001000015E2                 lea     rax, _v
__text:00000001000015E9                 movsxd  rcx, [rbp+var_16C]
__text:00000001000015F0                 imul    rcx, 18h
__text:00000001000015F7                 add     rax, rcx
__text:00000001000015FA                 mov     [rbp+var_150], rax
__text:0000000100001601                 mov     rax, [rbp+var_150]
__text:0000000100001608                 mov     rcx, rax
__text:000000010000160B                 mov     [rbp+var_148], rcx
__text:0000000100001612                 mov     rcx, [rbp+var_148]
__text:0000000100001619                 mov     rdx, [rcx]
__text:000000010000161C                 mov     [rbp+var_128], rcx
__text:0000000100001623                 mov     [rbp+var_130], rdx
__text:000000010000162A                 mov     rcx, [rbp+var_128]
__text:0000000100001631                 mov     [rbp+var_1B8], rax
__text:0000000100001638                 mov     [rbp+var_1C0], rcx
__text:000000010000163F
__text:000000010000163F loc_10000163F:                          ; CODE XREF: _main+176↓j
__text:000000010000163F                 mov     rax, [rbp+var_130]
__text:0000000100001646                 mov     rcx, [rbp+var_1C0]
__text:000000010000164D                 cmp     rax, [rcx+8]
__text:0000000100001651                 jz      loc_1000016DB
__text:0000000100001657                 mov     rax, [rbp+var_1C0]
__text:000000010000165E                 mov     [rbp+var_120], rax
__text:0000000100001665                 mov     rcx, [rbp+var_120]
__text:000000010000166C                 add     rcx, 10h
__text:0000000100001673                 mov     [rbp+var_118], rcx
__text:000000010000167A                 mov     rcx, [rbp+var_118]
__text:0000000100001681                 mov     [rbp+var_110], rcx
__text:0000000100001688                 mov     rcx, [rbp+var_110]
__text:000000010000168F                 mov     rdx, [rax+8]
__text:0000000100001693                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:000000010000169A                 mov     [rax+8], rdx
__text:000000010000169E                 mov     [rbp+var_D8], rdx
__text:00000001000016A5                 mov     rdx, [rbp+var_D8]
__text:00000001000016AC                 mov     [rbp+var_F0], rcx
__text:00000001000016B3                 mov     [rbp+var_F8], rdx
__text:00000001000016BA                 mov     rcx, [rbp+var_F0]
__text:00000001000016C1                 mov     rdx, [rbp+var_F8]
__text:00000001000016C8                 mov     [rbp+var_E0], rcx
__text:00000001000016CF                 mov     [rbp+var_E8], rdx
__text:00000001000016D6                 jmp     loc_10000163F
__text:00000001000016DB ; ---------------------------------------------------------------------------
__text:00000001000016DB
__text:00000001000016DB loc_1000016DB:                          ; CODE XREF: _main+F1↑j
__text:00000001000016DB                 mov     rax, [rbp+var_1B8]
__text:00000001000016E2                 mov     [rbp+var_D0], rax
__text:00000001000016E9                 mov     eax, [rbp+var_16C]
__text:00000001000016EF                 add     eax, 1
__text:00000001000016F4                 mov     [rbp+var_16C], eax
__text:00000001000016FA                 jmp     loc_1000015D0
__text:00000001000016FF ; ---------------------------------------------------------------------------
__text:00000001000016FF
__text:00000001000016FF loc_1000016FF:                          ; CODE XREF: _main+7C↑j
__text:00000001000016FF                 mov     [rbp+var_170], 0
__text:0000000100001709
__text:0000000100001709 loc_100001709:                          ; CODE XREF: _main+358↓j
__text:0000000100001709                 mov     eax, [rbp+var_170]
__text:000000010000170F                 add     eax, 1
__text:0000000100001714                 cmp     eax, cs:_n
__text:000000010000171A                 jge     loc_1000018BD
__text:0000000100001720                 lea     rdi, aD         ; "%d"
__text:0000000100001727                 lea     rax, _p
__text:000000010000172E                 movsxd  rcx, [rbp+var_170]
__text:0000000100001735                 shl     rcx, 2
__text:0000000100001739                 add     rax, rcx
__text:000000010000173C                 mov     rsi, rax
__text:000000010000173F                 mov     al, 0
__text:0000000100001741                 call    _scanf
__text:0000000100001746                 lea     rcx, [rbp+var_170]
__text:000000010000174D                 lea     rsi, _v
__text:0000000100001754                 lea     rdi, _p
__text:000000010000175B                 movsxd  rdx, [rbp+var_170]
__text:0000000100001762                 mov     r8d, [rdi+rdx*4]
__text:0000000100001766                 add     r8d, 0FFFFFFFFh
__text:000000010000176D                 mov     [rdi+rdx*4], r8d
__text:0000000100001771                 movsxd  rdx, [rbp+var_170]
__text:0000000100001778                 movsxd  rdx, dword ptr [rdi+rdx*4]
__text:000000010000177C                 imul    rdx, 18h
__text:0000000100001783                 add     rsi, rdx
__text:0000000100001786                 mov     [rbp+var_B0], rsi
__text:000000010000178D                 mov     [rbp+var_B8], rcx
__text:0000000100001794                 mov     rcx, [rbp+var_B0]
__text:000000010000179B                 mov     rdx, [rcx+8]
__text:000000010000179F                 mov     rsi, rcx
__text:00000001000017A2                 mov     [rbp+var_A8], rsi
__text:00000001000017A9                 mov     rsi, [rbp+var_A8]
__text:00000001000017B0                 add     rsi, 10h
__text:00000001000017B7                 mov     [rbp+var_A0], rsi
__text:00000001000017BE                 mov     rsi, [rbp+var_A0]
__text:00000001000017C5                 mov     [rbp+var_98], rsi
__text:00000001000017CC                 mov     rsi, [rbp+var_98]
__text:00000001000017D3                 cmp     rdx, [rsi]
__text:00000001000017D6                 mov     [rbp+var_1C4], eax
__text:00000001000017DC                 mov     [rbp+var_1D0], rcx
__text:00000001000017E3                 jz      loc_10000188F
__text:00000001000017E9                 mov     rax, [rbp+var_1D0]
__text:00000001000017F0                 mov     [rbp+var_90], rax
__text:00000001000017F7                 mov     rax, [rbp+var_90]
__text:00000001000017FE                 add     rax, 10h
__text:0000000100001804                 mov     [rbp+var_88], rax
__text:000000010000180B                 mov     rax, [rbp+var_88]
__text:0000000100001812                 mov     [rbp+var_80], rax
__text:0000000100001816                 mov     rax, [rbp+var_80]
__text:000000010000181A                 mov     rcx, [rbp+var_1D0]
__text:0000000100001821                 mov     rdx, [rcx+8]
__text:0000000100001825                 mov     [rbp+var_60], rdx
__text:0000000100001829                 mov     rdx, [rbp+var_60]
__text:000000010000182D                 mov     rsi, [rbp+var_B8]
__text:0000000100001834                 mov     [rbp+var_68], rax
__text:0000000100001838                 mov     [rbp+var_70], rdx
__text:000000010000183C                 mov     [rbp+var_78], rsi
__text:0000000100001840                 mov     rax, [rbp+var_70]
__text:0000000100001844                 cmp     rax, 0
__text:000000010000184A                 mov     [rbp+var_1D8], rax
__text:0000000100001851                 jz      loc_100001874
__text:0000000100001857                 mov     rax, [rbp+var_1D8]
__text:000000010000185E                 mov     rcx, [rbp+var_78]
__text:0000000100001862                 mov     edx, [rcx]
__text:0000000100001864                 mov     rcx, [rbp+var_1D8]
__text:000000010000186B                 mov     [rcx], edx
__text:000000010000186D                 mov     [rbp+var_1E0], rax
__text:0000000100001874
__text:0000000100001874 loc_100001874:                          ; CODE XREF: _main+2F1↑j
__text:0000000100001874                 mov     rax, [rbp+var_1D0]
__text:000000010000187B                 mov     rcx, [rax+8]
__text:000000010000187F                 add     rcx, 4
__text:0000000100001886                 mov     [rax+8], rcx
__text:000000010000188A                 jmp     loc_1000018A2
__text:000000010000188F ; ---------------------------------------------------------------------------
__text:000000010000188F
__text:000000010000188F loc_10000188F:                          ; CODE XREF: _main+283↑j
__text:000000010000188F                 mov     rsi, [rbp+var_B8]
__text:0000000100001896                 mov     rdi, [rbp+var_1D0]
__text:000000010000189D                 call    j___ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_ ; std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)
__text:00000001000018A2
__text:00000001000018A2 loc_1000018A2:                          ; CODE XREF: _main+32A↑j
__text:00000001000018A2                 jmp     $+5
__text:00000001000018A7 ; ---------------------------------------------------------------------------
__text:00000001000018A7
__text:00000001000018A7 loc_1000018A7:                          ; CODE XREF: _main:loc_1000018A2↑j
__text:00000001000018A7                 mov     eax, [rbp+var_170]
__text:00000001000018AD                 add     eax, 1
__text:00000001000018B2                 mov     [rbp+var_170], eax
__text:00000001000018B8                 jmp     loc_100001709
__text:00000001000018BD ; ---------------------------------------------------------------------------
__text:00000001000018BD
__text:00000001000018BD loc_1000018BD:                          ; CODE XREF: _main+1BA↑j
__text:00000001000018BD                 mov     [rbp+var_174], 1
__text:00000001000018C7                 mov     [rbp+var_178], 0
__text:00000001000018D1
__text:00000001000018D1 loc_1000018D1:                          ; CODE XREF: _main+472↓j
__text:00000001000018D1                 mov     al, 0
__text:00000001000018D3                 mov     ecx, [rbp+var_178]
__text:00000001000018D9                 add     ecx, 1
__text:00000001000018DF                 cmp     ecx, cs:_n
__text:00000001000018E5                 mov     [rbp+var_1E1], al
__text:00000001000018EB                 jge     loc_100001904
__text:00000001000018F1                 cmp     [rbp+var_174], 0
__text:00000001000018FB                 setnz   al
__text:00000001000018FE                 mov     [rbp+var_1E1], al
__text:0000000100001904
__text:0000000100001904 loc_100001904:                          ; CODE XREF: _main+38B↑j
__text:0000000100001904                 mov     al, [rbp+var_1E1]
__text:000000010000190A                 test    al, 1
__text:000000010000190C                 jnz     loc_100001917
__text:0000000100001912                 jmp     loc_1000019D7
__text:0000000100001917 ; ---------------------------------------------------------------------------
__text:0000000100001917
__text:0000000100001917 loc_100001917:                          ; CODE XREF: _main+3AC↑j
__text:0000000100001917                 lea     rax, _p
__text:000000010000191E                 movsxd  rcx, [rbp+var_178]
__text:0000000100001925                 mov     edx, [rax+rcx*4]
__text:0000000100001928                 cmp     edx, [rbp+var_178]
__text:000000010000192E                 jg      loc_100001943
__text:0000000100001934                 mov     [rbp+var_174], 0
__text:000000010000193E                 jmp     loc_1000019D7
__text:0000000100001943 ; ---------------------------------------------------------------------------
__text:0000000100001943
__text:0000000100001943 loc_100001943:                          ; CODE XREF: _main+3CE↑j
__text:0000000100001943                 mov     eax, [rbp+var_178]
__text:0000000100001949                 add     eax, 1
__text:000000010000194E                 mov     [rbp+var_17C], eax
__text:0000000100001954
__text:0000000100001954 loc_100001954:                          ; CODE XREF: _main+457↓j
__text:0000000100001954                 lea     rax, _p
__text:000000010000195B                 mov     ecx, [rbp+var_17C]
__text:0000000100001961                 movsxd  rdx, [rbp+var_178]
__text:0000000100001968                 cmp     ecx, [rax+rdx*4]
__text:000000010000196B                 jge     loc_1000019BC
__text:0000000100001971                 lea     rax, _p
__text:0000000100001978                 movsxd  rcx, [rbp+var_17C]
__text:000000010000197F                 mov     edx, [rax+rcx*4]
__text:0000000100001982                 movsxd  rcx, [rbp+var_178]
__text:0000000100001989                 cmp     edx, [rax+rcx*4]
__text:000000010000198C                 jle     loc_1000019A1
__text:0000000100001992                 mov     [rbp+var_174], 0
__text:000000010000199C                 jmp     loc_1000019BC
__text:00000001000019A1 ; ---------------------------------------------------------------------------
__text:00000001000019A1
__text:00000001000019A1 loc_1000019A1:                          ; CODE XREF: _main+42C↑j
__text:00000001000019A1                 jmp     $+5
__text:00000001000019A6 ; ---------------------------------------------------------------------------
__text:00000001000019A6
__text:00000001000019A6 loc_1000019A6:                          ; CODE XREF: _main:loc_1000019A1↑j
__text:00000001000019A6                 mov     eax, [rbp+var_17C]
__text:00000001000019AC                 add     eax, 1
__text:00000001000019B1                 mov     [rbp+var_17C], eax
__text:00000001000019B7                 jmp     loc_100001954
__text:00000001000019BC ; ---------------------------------------------------------------------------
__text:00000001000019BC
__text:00000001000019BC loc_1000019BC:                          ; CODE XREF: _main+40B↑j
__text:00000001000019BC                                         ; _main+43C↑j
__text:00000001000019BC                 jmp     $+5
__text:00000001000019C1 ; ---------------------------------------------------------------------------
__text:00000001000019C1
__text:00000001000019C1 loc_1000019C1:                          ; CODE XREF: _main:loc_1000019BC↑j
__text:00000001000019C1                 mov     eax, [rbp+var_178]
__text:00000001000019C7                 add     eax, 1
__text:00000001000019CC                 mov     [rbp+var_178], eax
__text:00000001000019D2                 jmp     loc_1000018D1
__text:00000001000019D7 ; ---------------------------------------------------------------------------
__text:00000001000019D7
__text:00000001000019D7 loc_1000019D7:                          ; CODE XREF: _main+3B2↑j
__text:00000001000019D7                                         ; _main+3DE↑j
__text:00000001000019D7                 mov     rdi, cs:__ZNSt3__14coutE_ptr
__text:00000001000019DE                 lea     rsi, aCase      ; "Case #"
__text:00000001000019E5                 call    j___ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)
__text:00000001000019EA                 mov     esi, [rbp+var_168]
__text:00000001000019F0                 mov     rdi, rax
__text:00000001000019F3                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::operator<<(int)
__text:00000001000019F8                 lea     rsi, asc_100003F0A ; ": "
__text:00000001000019FF                 mov     rdi, rax
__text:0000000100001A02                 call    j___ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)
__text:0000000100001A07                 cmp     [rbp+var_174], 0
__text:0000000100001A11                 mov     [rbp+var_1F0], rax
__text:0000000100001A18                 jnz     loc_100001A37
__text:0000000100001A1E                 lea     rdi, aImpossible ; "Impossible"
__text:0000000100001A25                 mov     al, 0
__text:0000000100001A27                 call    _printf
__text:0000000100001A2C                 mov     [rbp+var_1F4], eax
__text:0000000100001A32                 jmp     loc_100001D8E
__text:0000000100001A37 ; ---------------------------------------------------------------------------
__text:0000000100001A37
__text:0000000100001A37 loc_100001A37:                          ; CODE XREF: _main+4B8↑j
__text:0000000100001A37                 mov     esi, 1          ; int
__text:0000000100001A3C                 mov     edx, 0          ; int
__text:0000000100001A41                 lea     rax, _y
__text:0000000100001A48                 mov     ecx, cs:_n
__text:0000000100001A4E                 sub     ecx, 1
__text:0000000100001A54                 movsxd  rdi, ecx
__text:0000000100001A57                 mov     dword ptr [rax+rdi*4], 0
__text:0000000100001A5E                 mov     ecx, cs:_n
__text:0000000100001A64                 sub     ecx, 1
__text:0000000100001A6A                 mov     edi, ecx        ; int
__text:0000000100001A6C                 call    __Z2goiii       ; go(int,int,int)
__text:0000000100001A71                 mov     [rbp+var_180], 0
__text:0000000100001A7B                 mov     [rbp+var_184], 0
__text:0000000100001A85                 mov     [rbp+var_1F8], eax
__text:0000000100001A8B
__text:0000000100001A8B loc_100001A8B:                          ; CODE XREF: _main+5E5↓j
__text:0000000100001A8B                 mov     eax, [rbp+var_184]
__text:0000000100001A91                 cmp     eax, cs:_n
__text:0000000100001A97                 jge     loc_100001B4A
__text:0000000100001A9D                 lea     rax, [rbp+var_40]
__text:0000000100001AA1                 lea     rcx, [rbp+var_188]
__text:0000000100001AA8                 lea     rdx, [rbp+var_180]
__text:0000000100001AAF                 mov     esi, 0
__text:0000000100001AB4                 lea     rdi, _y
__text:0000000100001ABB                 movsxd  r8, [rbp+var_184]
__text:0000000100001AC2                 sub     esi, [rdi+r8*4]
__text:0000000100001AC6                 mov     [rbp+var_188], esi
__text:0000000100001ACC                 mov     [rbp+var_48], rdx
__text:0000000100001AD0                 mov     [rbp+var_50], rcx
__text:0000000100001AD4                 mov     rcx, [rbp+var_48]
__text:0000000100001AD8                 mov     rdx, [rbp+var_50]
__text:0000000100001ADC                 mov     [rbp+var_30], rcx
__text:0000000100001AE0                 mov     [rbp+var_38], rdx
__text:0000000100001AE4                 mov     rcx, [rbp+var_30]
__text:0000000100001AE8                 mov     rdx, [rbp+var_38]
__text:0000000100001AEC                 mov     [rbp+var_18], rax
__text:0000000100001AF0                 mov     [rbp+var_20], rcx
__text:0000000100001AF4                 mov     [rbp+var_28], rdx
__text:0000000100001AF8                 mov     rax, [rbp+var_20]
__text:0000000100001AFC                 mov     esi, [rax]
__text:0000000100001AFE                 mov     rax, [rbp+var_28]
__text:0000000100001B02                 cmp     esi, [rax]
__text:0000000100001B04                 jge     loc_100001B1A
__text:0000000100001B0A                 mov     rax, [rbp+var_38]
__text:0000000100001B0E                 mov     [rbp+var_200], rax
__text:0000000100001B15                 jmp     loc_100001B25
__text:0000000100001B1A ; ---------------------------------------------------------------------------
__text:0000000100001B1A
__text:0000000100001B1A loc_100001B1A:                          ; CODE XREF: _main+5A4↑j
__text:0000000100001B1A                 mov     rax, [rbp+var_30]
__text:0000000100001B1E                 mov     [rbp+var_200], rax
__text:0000000100001B25
__text:0000000100001B25 loc_100001B25:                          ; CODE XREF: _main+5B5↑j
__text:0000000100001B25                 mov     rax, [rbp+var_200]
__text:0000000100001B2C                 mov     ecx, [rax]
__text:0000000100001B2E                 mov     [rbp+var_180], ecx
__text:0000000100001B34                 mov     eax, [rbp+var_184]
__text:0000000100001B3A                 add     eax, 1
__text:0000000100001B3F                 mov     [rbp+var_184], eax
__text:0000000100001B45                 jmp     loc_100001A8B
__text:0000000100001B4A ; ---------------------------------------------------------------------------
__text:0000000100001B4A
__text:0000000100001B4A loc_100001B4A:                          ; CODE XREF: _main+537↑j
__text:0000000100001B4A                 mov     [rbp+var_18C], 0
__text:0000000100001B54
__text:0000000100001B54 loc_100001B54:                          ; CODE XREF: _main+644↓j
__text:0000000100001B54                 mov     eax, [rbp+var_18C]
__text:0000000100001B5A                 cmp     eax, cs:_n
__text:0000000100001B60                 jge     loc_100001BA9
__text:0000000100001B66                 lea     rdi, aD_0       ; "%d "
__text:0000000100001B6D                 lea     rax, _y
__text:0000000100001B74                 movsxd  rcx, [rbp+var_18C]
__text:0000000100001B7B                 mov     edx, [rax+rcx*4]
__text:0000000100001B7E                 add     edx, [rbp+var_180]
__text:0000000100001B84                 mov     esi, edx
__text:0000000100001B86                 mov     al, 0
__text:0000000100001B88                 call    _printf
__text:0000000100001B8D                 mov     [rbp+var_204], eax
__text:0000000100001B93                 mov     eax, [rbp+var_18C]
__text:0000000100001B99                 add     eax, 1
__text:0000000100001B9E                 mov     [rbp+var_18C], eax
__text:0000000100001BA4                 jmp     loc_100001B54
__text:0000000100001BA9 ; ---------------------------------------------------------------------------
__text:0000000100001BA9
__text:0000000100001BA9 loc_100001BA9:                          ; CODE XREF: _main+600↑j
__text:0000000100001BA9                 mov     [rbp+var_190], 1
__text:0000000100001BB3                 mov     [rbp+var_194], 0
__text:0000000100001BBD
__text:0000000100001BBD loc_100001BBD:                          ; CODE XREF: _main+6B2↓j
__text:0000000100001BBD                 mov     eax, [rbp+var_194]
__text:0000000100001BC3                 cmp     eax, cs:_n
__text:0000000100001BC9                 jge     loc_100001C17
__text:0000000100001BCF                 lea     rax, _y
__text:0000000100001BD6                 movsxd  rcx, [rbp+var_194]
__text:0000000100001BDD                 mov     edx, [rax+rcx*4]
__text:0000000100001BE0                 add     edx, [rbp+var_180]
__text:0000000100001BE6                 cmp     edx, 3B9ACA00h
__text:0000000100001BEC                 jle     loc_100001BFC
__text:0000000100001BF2                 mov     [rbp+var_190], 0
__text:0000000100001BFC
__text:0000000100001BFC loc_100001BFC:                          ; CODE XREF: _main+68C↑j
__text:0000000100001BFC                 jmp     $+5
__text:0000000100001C01 ; ---------------------------------------------------------------------------
__text:0000000100001C01
__text:0000000100001C01 loc_100001C01:                          ; CODE XREF: _main:loc_100001BFC↑j
__text:0000000100001C01                 mov     eax, [rbp+var_194]
__text:0000000100001C07                 add     eax, 1
__text:0000000100001C0C                 mov     [rbp+var_194], eax
__text:0000000100001C12                 jmp     loc_100001BBD
__text:0000000100001C17 ; ---------------------------------------------------------------------------
__text:0000000100001C17
__text:0000000100001C17 loc_100001C17:                          ; CODE XREF: _main+669↑j
__text:0000000100001C17                 mov     [rbp+var_198], 0
__text:0000000100001C21
__text:0000000100001C21 loc_100001C21:                          ; CODE XREF: _main+7D6↓j
__text:0000000100001C21                 mov     eax, [rbp+var_198]
__text:0000000100001C27                 add     eax, 1
__text:0000000100001C2C                 cmp     eax, cs:_n
__text:0000000100001C32                 jge     loc_100001D3B
__text:0000000100001C38                 mov     eax, [rbp+var_198]
__text:0000000100001C3E                 add     eax, 1
__text:0000000100001C43                 mov     [rbp+var_19C], eax
__text:0000000100001C49                 mov     eax, [rbp+var_198]
__text:0000000100001C4F                 add     eax, 2
__text:0000000100001C54                 mov     [rbp+var_1A0], eax
__text:0000000100001C5A
__text:0000000100001C5A loc_100001C5A:                          ; CODE XREF: _main+794↓j
__text:0000000100001C5A                 mov     eax, [rbp+var_1A0]
__text:0000000100001C60                 cmp     eax, cs:_n
__text:0000000100001C66                 jge     loc_100001CF9
__text:0000000100001C6C                 lea     rax, _y
__text:0000000100001C73                 mov     ecx, [rbp+var_1A0]
__text:0000000100001C79                 sub     ecx, [rbp+var_198]
__text:0000000100001C7F                 movsxd  rdi, ecx        ; __int64
__text:0000000100001C82                 movsxd  rdx, [rbp+var_1A0]
__text:0000000100001C89                 mov     ecx, [rax+rdx*4]
__text:0000000100001C8C                 movsxd  rdx, [rbp+var_198]
__text:0000000100001C93                 sub     ecx, [rax+rdx*4]
__text:0000000100001C96                 movsxd  rsi, ecx        ; __int64
__text:0000000100001C99                 mov     ecx, [rbp+var_19C]
__text:0000000100001C9F                 sub     ecx, [rbp+var_198]
__text:0000000100001CA5                 movsxd  rdx, ecx        ; __int64
__text:0000000100001CA8                 movsxd  r8, [rbp+var_19C]
__text:0000000100001CAF                 mov     ecx, [rax+r8*4]
__text:0000000100001CB3                 movsxd  r8, [rbp+var_198]
__text:0000000100001CBA                 sub     ecx, [rax+r8*4]
__text:0000000100001CBE                 movsxd  rcx, ecx        ; __int64
__text:0000000100001CC1                 call    __Z4vectxxxx    ; vect(long long,long long,long long,long long)
__text:0000000100001CC6                 cmp     rax, 0
__text:0000000100001CCC                 jge     loc_100001CDE
__text:0000000100001CD2                 mov     eax, [rbp+var_1A0]
__text:0000000100001CD8                 mov     [rbp+var_19C], eax
__text:0000000100001CDE
__text:0000000100001CDE loc_100001CDE:                          ; CODE XREF: _main+76C↑j
__text:0000000100001CDE                 jmp     $+5
__text:0000000100001CE3 ; ---------------------------------------------------------------------------
__text:0000000100001CE3
__text:0000000100001CE3 loc_100001CE3:                          ; CODE XREF: _main:loc_100001CDE↑j
__text:0000000100001CE3                 mov     eax, [rbp+var_1A0]
__text:0000000100001CE9                 add     eax, 1
__text:0000000100001CEE                 mov     [rbp+var_1A0], eax
__text:0000000100001CF4                 jmp     loc_100001C5A
__text:0000000100001CF9 ; ---------------------------------------------------------------------------
__text:0000000100001CF9
__text:0000000100001CF9 loc_100001CF9:                          ; CODE XREF: _main+706↑j
__text:0000000100001CF9                 lea     rax, _p
__text:0000000100001D00                 movsxd  rcx, [rbp+var_198]
__text:0000000100001D07                 mov     edx, [rax+rcx*4]
__text:0000000100001D0A                 cmp     edx, [rbp+var_19C]
__text:0000000100001D10                 jz      loc_100001D20
__text:0000000100001D16                 mov     [rbp+var_190], 0
__text:0000000100001D20
__text:0000000100001D20 loc_100001D20:                          ; CODE XREF: _main+7B0↑j
__text:0000000100001D20                 jmp     $+5
__text:0000000100001D25 ; ---------------------------------------------------------------------------
__text:0000000100001D25
__text:0000000100001D25 loc_100001D25:                          ; CODE XREF: _main:loc_100001D20↑j
__text:0000000100001D25                 mov     eax, [rbp+var_198]
__text:0000000100001D2B                 add     eax, 1
__text:0000000100001D30                 mov     [rbp+var_198], eax
__text:0000000100001D36                 jmp     loc_100001C21
__text:0000000100001D3B ; ---------------------------------------------------------------------------
__text:0000000100001D3B
__text:0000000100001D3B loc_100001D3B:                          ; CODE XREF: _main+6D2↑j
__text:0000000100001D3B                 cmp     [rbp+var_190], 0
__text:0000000100001D45                 jnz     loc_100001D89
__text:0000000100001D4B                 mov     rdi, cs:__ZNSt3__14cerrE_ptr
__text:0000000100001D52                 mov     esi, [rbp+var_168]
__text:0000000100001D58                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::operator<<(int)
__text:0000000100001D5D                 lea     rsi, aBad       ; " bad"
__text:0000000100001D64                 mov     rdi, rax
__text:0000000100001D67                 call    j___ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)
__text:0000000100001D6C                 lea     rsi, __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ ; std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)
__text:0000000100001D73                 mov     [rbp+var_8], rax
__text:0000000100001D77                 mov     [rbp+var_10], rsi
__text:0000000100001D7B                 mov     rdi, [rbp+var_8]
__text:0000000100001D7F                 call    [rbp+var_10]
__text:0000000100001D82                 mov     [rbp+var_210], rax
__text:0000000100001D89
__text:0000000100001D89 loc_100001D89:                          ; CODE XREF: _main+7E5↑j
__text:0000000100001D89                 jmp     $+5
__text:0000000100001D8E ; ---------------------------------------------------------------------------
__text:0000000100001D8E
__text:0000000100001D8E loc_100001D8E:                          ; CODE XREF: _main+4D2↑j
__text:0000000100001D8E                                         ; _main:loc_100001D89↑j
__text:0000000100001D8E                 lea     rax, __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ ; std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)
__text:0000000100001D95                 mov     rcx, cs:__ZNSt3__14coutE_ptr
__text:0000000100001D9C                 mov     [rbp+var_C0], rcx
__text:0000000100001DA3                 mov     [rbp+var_C8], rax
__text:0000000100001DAA                 mov     rdi, [rbp+var_C0]
__text:0000000100001DB1                 call    [rbp+var_C8]
__text:0000000100001DB7                 mov     [rbp+var_218], rax
__text:0000000100001DBE                 mov     eax, [rbp+var_168]
__text:0000000100001DC4                 add     eax, 1
__text:0000000100001DC9                 mov     [rbp+var_168], eax
__text:0000000100001DCF                 jmp     loc_100001599
__text:0000000100001DD4 ; ---------------------------------------------------------------------------
__text:0000000100001DD4
__text:0000000100001DD4 loc_100001DD4:                          ; CODE XREF: _main+45↑j
__text:0000000100001DD4                 mov     eax, 0
__text:0000000100001DD9                 add     rsp, 220h
__text:0000000100001DE0                 pop     rbp
__text:0000000100001DE1                 retn
__text:0000000100001DE1 _main           endp
__text:0000000100001DE1
__text:0000000100001DE1 ; ---------------------------------------------------------------------------
__text:0000000100001DE2                 align 10h
__text:0000000100001DF0
__text:0000000100001DF0 ; =============== S U B R O U T I N E =======================================
__text:0000000100001DF0
__text:0000000100001DF0 ; Attributes: bp-based frame
__text:0000000100001DF0
__text:0000000100001DF0 ___cxx_global_var_init proc near        ; CODE XREF: `global constructor keyed to'_a+4↓p
__text:0000000100001DF0
__text:0000000100001DF0 var_144         = dword ptr -144h
__text:0000000100001DF0 var_140         = qword ptr -140h
__text:0000000100001DF0 var_138         = qword ptr -138h
__text:0000000100001DF0 var_120         = qword ptr -120h
__text:0000000100001DF0 var_118         = qword ptr -118h
__text:0000000100001DF0 var_110         = qword ptr -110h
__text:0000000100001DF0 var_108         = qword ptr -108h
__text:0000000100001DF0 var_100         = qword ptr -100h
__text:0000000100001DF0 var_F8          = qword ptr -0F8h
__text:0000000100001DF0 var_F0          = qword ptr -0F0h
__text:0000000100001DF0 var_E8          = qword ptr -0E8h
__text:0000000100001DF0 var_E0          = qword ptr -0E0h
__text:0000000100001DF0 var_D8          = qword ptr -0D8h
__text:0000000100001DF0 var_D0          = qword ptr -0D0h
__text:0000000100001DF0 var_C8          = qword ptr -0C8h
__text:0000000100001DF0 var_C0          = qword ptr -0C0h
__text:0000000100001DF0 var_B8          = qword ptr -0B8h
__text:0000000100001DF0 var_B0          = qword ptr -0B0h
__text:0000000100001DF0 var_A8          = qword ptr -0A8h
__text:0000000100001DF0 var_A0          = qword ptr -0A0h
__text:0000000100001DF0 var_98          = qword ptr -98h
__text:0000000100001DF0 var_90          = qword ptr -90h
__text:0000000100001DF0 var_88          = qword ptr -88h
__text:0000000100001DF0 var_80          = qword ptr -80h
__text:0000000100001DF0 var_78          = qword ptr -78h
__text:0000000100001DF0 var_70          = qword ptr -70h
__text:0000000100001DF0 var_68          = qword ptr -68h
__text:0000000100001DF0 var_60          = qword ptr -60h
__text:0000000100001DF0 var_58          = qword ptr -58h
__text:0000000100001DF0 var_50          = qword ptr -50h
__text:0000000100001DF0 var_48          = qword ptr -48h
__text:0000000100001DF0 var_40          = qword ptr -40h
__text:0000000100001DF0 var_38          = qword ptr -38h
__text:0000000100001DF0 var_30          = qword ptr -30h
__text:0000000100001DF0 var_28          = qword ptr -28h
__text:0000000100001DF0 var_20          = qword ptr -20h
__text:0000000100001DF0 var_18          = qword ptr -18h
__text:0000000100001DF0
__text:0000000100001DF0                 push    rbp
__text:0000000100001DF1                 mov     rbp, rsp
__text:0000000100001DF4                 push    r14
__text:0000000100001DF6                 push    rbx
__text:0000000100001DF7                 sub     rsp, 140h
__text:0000000100001DFE                 lea     rax, _v
__text:0000000100001E05                 mov     [rbp+var_138], rax
__text:0000000100001E0C
__text:0000000100001E0C loc_100001E0C:                          ; CODE XREF: ___cxx_global_var_init+1F8↓j
__text:0000000100001E0C                 mov     rax, [rbp+var_138]
__text:0000000100001E13                 lea     rcx, [rbp+var_C0]
__text:0000000100001E1A                 lea     rdx, [rbp+var_D8]
__text:0000000100001E21                 lea     rsi, [rbp+var_110]
__text:0000000100001E28                 lea     rdi, [rbp+var_98]
__text:0000000100001E2F                 lea     r8, [rbp+var_108]
__text:0000000100001E36                 lea     r9, [rbp+var_68]
__text:0000000100001E3A                 lea     r10, [rbp+var_100]
__text:0000000100001E41                 lea     r11, [rbp+var_38]
__text:0000000100001E45                 mov     [rbp+var_120], rax
__text:0000000100001E4C                 mov     rbx, [rbp+var_120]
__text:0000000100001E53                 mov     [rbp+var_118], rbx
__text:0000000100001E5A                 mov     rbx, [rbp+var_118]
__text:0000000100001E61                 mov     [rbp+var_F8], rbx
__text:0000000100001E68                 mov     rbx, [rbp+var_F8]
__text:0000000100001E6F                 mov     r14, rbx
__text:0000000100001E72                 mov     [rbp+var_F0], r14
__text:0000000100001E79                 mov     [rbp+var_28], r11
__text:0000000100001E7D                 mov     [rbp+var_30], 0FFFFFFFFFFFFFFFFh
__text:0000000100001E85                 mov     r11, [rbp+var_28]
__text:0000000100001E89                 mov     r14, [rbp+var_30]
__text:0000000100001E8D                 mov     [rbp+var_18], r11
__text:0000000100001E91                 mov     [rbp+var_20], r14
__text:0000000100001E95                 mov     r11, [rbp+var_18]
__text:0000000100001E99                 mov     qword ptr [r11], 0
__text:0000000100001EA0                 mov     r11, [rbp+var_38]
__text:0000000100001EA4                 mov     [rbp+var_100], r11
__text:0000000100001EAB                 mov     [rbp+var_40], r10
__text:0000000100001EAF                 mov     qword ptr [rbx], 0
__text:0000000100001EB6                 mov     [rbp+var_58], r9
__text:0000000100001EBA                 mov     [rbp+var_60], 0FFFFFFFFFFFFFFFFh
__text:0000000100001EC2                 mov     r9, [rbp+var_58]
__text:0000000100001EC6                 mov     r10, [rbp+var_60]
__text:0000000100001ECA                 mov     [rbp+var_48], r9
__text:0000000100001ECE                 mov     [rbp+var_50], r10
__text:0000000100001ED2                 mov     r9, [rbp+var_48]
__text:0000000100001ED6                 mov     qword ptr [r9], 0
__text:0000000100001EDD                 mov     r9, [rbp+var_68]
__text:0000000100001EE1                 mov     [rbp+var_108], r9
__text:0000000100001EE8                 mov     [rbp+var_70], r8
__text:0000000100001EEC                 mov     qword ptr [rbx+8], 0
__text:0000000100001EF4                 add     rbx, 10h
__text:0000000100001EFB                 mov     [rbp+var_88], rdi
__text:0000000100001F02                 mov     [rbp+var_90], 0FFFFFFFFFFFFFFFFh
__text:0000000100001F0D                 mov     rdi, [rbp+var_88]
__text:0000000100001F14                 mov     r8, [rbp+var_90]
__text:0000000100001F1B                 mov     [rbp+var_78], rdi
__text:0000000100001F1F                 mov     [rbp+var_80], r8
__text:0000000100001F23                 mov     rdi, [rbp+var_78]
__text:0000000100001F27                 mov     qword ptr [rdi], 0
__text:0000000100001F2E                 mov     rdi, [rbp+var_98]
__text:0000000100001F35                 mov     [rbp+var_110], rdi
__text:0000000100001F3C                 mov     [rbp+var_A0], rsi
__text:0000000100001F43                 mov     [rbp+var_E0], rbx
__text:0000000100001F4A                 mov     [rbp+var_E8], 0
__text:0000000100001F55                 mov     rsi, [rbp+var_E0]
__text:0000000100001F5C                 mov     rdi, [rbp+var_E8]
__text:0000000100001F63                 mov     [rbp+var_D0], rsi
__text:0000000100001F6A                 mov     [rbp+var_D8], rdi
__text:0000000100001F71                 mov     rsi, [rbp+var_D0]
__text:0000000100001F78                 mov     [rbp+var_C8], rdx
__text:0000000100001F7F                 mov     rdx, [rbp+var_C8]
__text:0000000100001F86                 mov     rdx, [rdx]
__text:0000000100001F89                 mov     [rbp+var_B8], rsi
__text:0000000100001F90                 mov     [rbp+var_C0], rdx
__text:0000000100001F97                 mov     rdx, [rbp+var_B8]
__text:0000000100001F9E                 mov     rsi, rdx
__text:0000000100001FA1                 mov     [rbp+var_B0], rsi
__text:0000000100001FA8                 mov     [rbp+var_A8], rcx
__text:0000000100001FAF                 mov     rcx, [rbp+var_A8]
__text:0000000100001FB6                 mov     rcx, [rcx]
__text:0000000100001FB9                 mov     [rdx], rcx
__text:0000000100001FBC                 mov     [rbp+var_140], rax
__text:0000000100001FC3                 lea     rax, _v
__text:0000000100001FCA                 add     rax, 0BB80h
__text:0000000100001FD0                 mov     rcx, [rbp+var_140]
__text:0000000100001FD7                 add     rcx, 18h
__text:0000000100001FDE                 cmp     rcx, rax
__text:0000000100001FE1                 mov     [rbp+var_138], rcx
__text:0000000100001FE8                 jnz     loc_100001E0C
__text:0000000100001FEE                 lea     rdi, ___cxx_global_array_dtor ; lpfunc
__text:0000000100001FF5                 mov     rsi, 0          ; obj
__text:0000000100001FFF                 lea     rdx, __mh_execute_header ; lpdso_handle
__text:0000000100002006                 call    ___cxa_atexit
__text:000000010000200B                 mov     [rbp+var_144], eax
__text:0000000100002011                 add     rsp, 140h
__text:0000000100002018                 pop     rbx
__text:0000000100002019                 pop     r14
__text:000000010000201B                 pop     rbp
__text:000000010000201C                 retn
__text:000000010000201C ___cxx_global_var_init endp
__text:000000010000201C
__text:000000010000201C ; ---------------------------------------------------------------------------
__text:000000010000201D                 align 20h
__text:0000000100002020
__text:0000000100002020 ; =============== S U B R O U T I N E =======================================
__text:0000000100002020
__text:0000000100002020 ; Attributes: bp-based frame
__text:0000000100002020
__text:0000000100002020 ; void __cdecl __cxx_global_array_dtor(void *)
__text:0000000100002020 ___cxx_global_array_dtor proc near      ; DATA XREF: ___cxx_global_var_init+1FE↑o
__text:0000000100002020
__text:0000000100002020 var_28          = qword ptr -28h
__text:0000000100002020 var_20          = qword ptr -20h
__text:0000000100002020 var_8           = qword ptr -8
__text:0000000100002020
__text:0000000100002020                 push    rbp
__text:0000000100002021                 mov     rbp, rsp
__text:0000000100002024                 sub     rsp, 40h
__text:0000000100002028                 lea     rax, _v
__text:000000010000202F                 add     rax, 0BB80h
__text:0000000100002035                 mov     [rbp+var_8], rdi
__text:0000000100002039                 mov     [rbp+var_20], rax
__text:000000010000203D
__text:000000010000203D loc_10000203D:                          ; CODE XREF: ___cxx_global_array_dtor+48↓j
__text:000000010000203D                 mov     rax, [rbp+var_20]
__text:0000000100002041                 add     rax, 0FFFFFFFFFFFFFFE8h
__text:0000000100002045                 mov     rdi, rax
__text:0000000100002048                 mov     [rbp+var_28], rax
__text:000000010000204C                 call    j___ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev ; std::__1::vector<int,std::__1::allocator<int>>::~vector()
__text:0000000100002051                 jmp     $+5
__text:0000000100002056 ; ---------------------------------------------------------------------------
__text:0000000100002056
__text:0000000100002056 loc_100002056:                          ; CODE XREF: ___cxx_global_array_dtor+31↑j
__text:0000000100002056                 lea     rax, _v
__text:000000010000205D                 mov     rcx, [rbp+var_28]
__text:0000000100002061                 cmp     rcx, rax
__text:0000000100002064                 mov     [rbp+var_20], rcx
__text:0000000100002068                 jnz     loc_10000203D
__text:000000010000206E                 add     rsp, 40h
__text:0000000100002072                 pop     rbp
__text:0000000100002073                 retn
__text:0000000100002073 ___cxx_global_array_dtor endp
__text:0000000100002073
__text:0000000100002074 ; ---------------------------------------------------------------------------
__text:0000000100002074                 lea     rcx, _v
__text:000000010000207B                 mov     esi, edx
__text:000000010000207D                 mov     [rbp-10h], rax
__text:0000000100002081                 mov     [rbp-14h], esi
__text:0000000100002084                 mov     rax, [rbp-28h]
__text:0000000100002088                 cmp     rcx, rax
__text:000000010000208B                 mov     [rbp-30h], rax
__text:000000010000208F                 jz      loc_1000020C6
__text:0000000100002095
__text:0000000100002095 loc_100002095:                          ; CODE XREF: __text:00000001000020C0↓j
__text:0000000100002095                 mov     rax, [rbp-30h]
__text:0000000100002099                 add     rax, 0FFFFFFFFFFFFFFE8h
__text:000000010000209D                 mov     rdi, rax
__text:00000001000020A0                 mov     [rbp-38h], rax
__text:00000001000020A4                 call    j___ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev ; std::__1::vector<int,std::__1::allocator<int>>::~vector()
__text:00000001000020A9                 jmp     $+5
__text:00000001000020AE ; ---------------------------------------------------------------------------
__text:00000001000020AE
__text:00000001000020AE loc_1000020AE:                          ; CODE XREF: __text:00000001000020A9↑j
__text:00000001000020AE                 lea     rax, _v
__text:00000001000020B5                 mov     rcx, [rbp-38h]
__text:00000001000020B9                 cmp     rcx, rax
__text:00000001000020BC                 mov     [rbp-30h], rcx
__text:00000001000020C0                 jnz     loc_100002095
__text:00000001000020C6
__text:00000001000020C6 loc_1000020C6:                          ; CODE XREF: __text:000000010000208F↑j
__text:00000001000020C6                 jmp     $+5
__text:00000001000020CB ; ---------------------------------------------------------------------------
__text:00000001000020CB
__text:00000001000020CB loc_1000020CB:                          ; CODE XREF: __text:loc_1000020C6↑j
__text:00000001000020CB                 mov     rdi, [rbp-10h]
__text:00000001000020CF                 call    __Unwind_Resume
__text:00000001000020D4 ; ---------------------------------------------------------------------------
__text:00000001000020D4                 mov     ecx, edx
__text:00000001000020D6                 mov     rdi, rax
__text:00000001000020D9                 mov     [rbp-3Ch], ecx
__text:00000001000020DC                 call    ___clang_call_terminate
__text:00000001000020DC ; ---------------------------------------------------------------------------
__text:00000001000020E1                 align 10h
__text:00000001000020F0
__text:00000001000020F0 ; =============== S U B R O U T I N E =======================================
__text:00000001000020F0
__text:00000001000020F0 ; Attributes: bp-based frame
__text:00000001000020F0
__text:00000001000020F0 ; `global constructor keyed to'_a
__text:00000001000020F0                 public __GLOBAL__I_a
__text:00000001000020F0 __GLOBAL__I_a   proc near               ; DATA XREF: __mod_init_func:0000000100004160↓o
__text:00000001000020F0                 push    rbp
__text:00000001000020F1                 mov     rbp, rsp
__text:00000001000020F4                 call    ___cxx_global_var_init
__text:00000001000020F9                 pop     rbp
__text:00000001000020FA                 retn
__text:00000001000020FA __GLOBAL__I_a   endp
__text:00000001000020FA
__text:00000001000020FA ; ---------------------------------------------------------------------------
__text:00000001000020FB                 align 20h
__text:0000000100002100
__text:0000000100002100 ; =============== S U B R O U T I N E =======================================
__text:0000000100002100
__text:0000000100002100 ; Attributes: bp-based frame
__text:0000000100002100
__text:0000000100002100 ; std::__1::vector<int, std::__1::allocator<int>>::~vector()
__text:0000000100002100 __ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev proc near
__text:0000000100002100                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev_ptr↓o
__text:0000000100002100
__text:0000000100002100 var_8           = qword ptr -8
__text:0000000100002100
__text:0000000100002100                 push    rbp
__text:0000000100002101                 mov     rbp, rsp
__text:0000000100002104                 sub     rsp, 10h
__text:0000000100002108                 mov     [rbp+var_8], rdi
__text:000000010000210C                 mov     rdi, [rbp+var_8]
__text:0000000100002110                 call    j___ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev ; std::__1::vector<int,std::__1::allocator<int>>::~vector()
__text:0000000100002115                 add     rsp, 10h
__text:0000000100002119                 pop     rbp
__text:000000010000211A                 retn
__text:000000010000211A __ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev endp
__text:000000010000211A
__text:000000010000211A ; ---------------------------------------------------------------------------
__text:000000010000211B                 align 20h
__text:0000000100002120
__text:0000000100002120 ; =============== S U B R O U T I N E =======================================
__text:0000000100002120
__text:0000000100002120 ; Attributes: noreturn bp-based frame
__text:0000000100002120
__text:0000000100002120 ___clang_call_terminate proc near       ; CODE XREF: __text:00000001000020DC↑p
__text:0000000100002120                                         ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+2BF↓p ...
__text:0000000100002120
__text:0000000100002120 var_8           = qword ptr -8
__text:0000000100002120
__text:0000000100002120                 push    rbp
__text:0000000100002121                 mov     rbp, rsp
__text:0000000100002124                 sub     rsp, 10h
__text:0000000100002128                 call    ___cxa_begin_catch
__text:000000010000212D                 mov     [rbp+var_8], rax
__text:0000000100002131                 call    __ZSt9terminatev ; std::terminate(void)
__text:0000000100002131 ___clang_call_terminate endp
__text:0000000100002131
__text:0000000100002131 ; ---------------------------------------------------------------------------
__text:0000000100002136                 align 20h
__text:0000000100002140
__text:0000000100002140 ; =============== S U B R O U T I N E =======================================
__text:0000000100002140
__text:0000000100002140 ; Attributes: bp-based frame
__text:0000000100002140
__text:0000000100002140 ; std::__1::basic_ostream<char, std::__1::char_traits<char>> & std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, char const*)
__text:0000000100002140 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc proc near
__text:0000000100002140                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc_ptr↓o
__text:0000000100002140
__text:0000000100002140 var_1A8         = qword ptr -1A8h
__text:0000000100002140 var_1A0         = qword ptr -1A0h
__text:0000000100002140 var_191         = byte ptr -191h
__text:0000000100002140 var_190         = dword ptr -190h
__text:0000000100002140 var_18C         = dword ptr -18Ch
__text:0000000100002140 var_188         = qword ptr -188h
__text:0000000100002140 var_179         = byte ptr -179h
__text:0000000100002140 var_178         = qword ptr -178h
__text:0000000100002140 var_16C         = dword ptr -16Ch
__text:0000000100002140 var_168         = qword ptr -168h
__text:0000000100002140 var_160         = qword ptr -160h
__text:0000000100002140 var_158         = qword ptr -158h
__text:0000000100002140 var_150         = qword ptr -150h
__text:0000000100002140 var_148         = qword ptr -148h
__text:0000000100002140 var_140         = qword ptr -140h
__text:0000000100002140 var_134         = dword ptr -134h
__text:0000000100002140 var_130         = qword ptr -130h
__text:0000000100002140 var_128         = qword ptr -128h
__text:0000000100002140 var_119         = byte ptr -119h
__text:0000000100002140 var_118         = qword ptr -118h
__text:0000000100002140 var_110         = qword ptr -110h
__text:0000000100002140 var_108         = qword ptr -108h
__text:0000000100002140 var_FC          = dword ptr -0FCh
__text:0000000100002140 var_F8          = qword ptr -0F8h
__text:0000000100002140 var_F0          = byte ptr -0F0h
__text:0000000100002140 var_E0          = qword ptr -0E0h
__text:0000000100002140 var_D8          = qword ptr -0D8h
__text:0000000100002140 var_D0          = qword ptr -0D0h
__text:0000000100002140 var_C8          = qword ptr -0C8h
__text:0000000100002140 var_C0          = qword ptr -0C0h
__text:0000000100002140 var_B8          = qword ptr -0B8h
__text:0000000100002140 var_A0          = qword ptr -0A0h
__text:0000000100002140 var_98          = qword ptr -98h
__text:0000000100002140 var_90          = qword ptr -90h
__text:0000000100002140 var_88          = qword ptr -88h
__text:0000000100002140 var_7C          = dword ptr -7Ch
__text:0000000100002140 var_78          = qword ptr -78h
__text:0000000100002140 var_6C          = dword ptr -6Ch
__text:0000000100002140 var_68          = qword ptr -68h
__text:0000000100002140 var_60          = qword ptr -60h
__text:0000000100002140 var_58          = qword ptr -58h
__text:0000000100002140 var_50          = qword ptr -50h
__text:0000000100002140 var_44          = dword ptr -44h
__text:0000000100002140 var_40          = qword ptr -40h
__text:0000000100002140 var_38          = byte ptr -38h
__text:0000000100002140 var_29          = byte ptr -29h
__text:0000000100002140 var_28          = qword ptr -28h
__text:0000000100002140 var_20          = qword ptr -20h
__text:0000000100002140 var_11          = byte ptr -11h
__text:0000000100002140 var_10          = qword ptr -10h
__text:0000000100002140 var_8           = dword ptr -8
__text:0000000100002140 var_4           = dword ptr -4
__text:0000000100002140
__text:0000000100002140                 push    rbp
__text:0000000100002141                 mov     rbp, rsp
__text:0000000100002144                 sub     rsp, 1B0h
__text:000000010000214B                 mov     [rbp+var_D8], rdi
__text:0000000100002152                 mov     [rbp+var_E0], rsi
__text:0000000100002159                 mov     rsi, [rbp+var_D8]
__text:0000000100002160                 lea     rdi, [rbp+var_F0]
__text:0000000100002167                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_ ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::sentry::sentry(std::__1::basic_ostream<char,std::__1::char_traits<char>>&)
__text:000000010000216C                 jmp     $+5
__text:0000000100002171 ; ---------------------------------------------------------------------------
__text:0000000100002171
__text:0000000100002171 loc_100002171:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+2C↑j
__text:0000000100002171                 lea     rax, [rbp+var_F0]
__text:0000000100002178                 mov     [rbp+var_D0], rax
__text:000000010000217F                 mov     rax, [rbp+var_D0]
__text:0000000100002186                 mov     cl, [rax]
__text:0000000100002188                 mov     [rbp+var_119], cl
__text:000000010000218E                 mov     al, [rbp+var_119]
__text:0000000100002194                 test    al, 1
__text:0000000100002196                 jnz     loc_1000021A1
__text:000000010000219C                 jmp     loc_100002546
__text:00000001000021A1 ; ---------------------------------------------------------------------------
__text:00000001000021A1
__text:00000001000021A1 loc_1000021A1:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+56↑j
__text:00000001000021A1                 mov     rax, [rbp+var_E0]
__text:00000001000021A8                 mov     [rbp+var_C8], rax
__text:00000001000021AF                 mov     rdi, rax        ; char *
__text:00000001000021B2                 call    _strlen
__text:00000001000021B7                 mov     [rbp+var_128], rax
__text:00000001000021BE                 jmp     $+5
__text:00000001000021C3 ; ---------------------------------------------------------------------------
__text:00000001000021C3
__text:00000001000021C3 loc_1000021C3:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+7E↑j
__text:00000001000021C3                 jmp     $+5
__text:00000001000021C8 ; ---------------------------------------------------------------------------
__text:00000001000021C8
__text:00000001000021C8 loc_1000021C8:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_1000021C3↑j
__text:00000001000021C8                 lea     rax, [rbp+var_110]
__text:00000001000021CF                 mov     rcx, [rbp+var_128]
__text:00000001000021D6                 mov     [rbp+var_108], rcx
__text:00000001000021DD                 mov     rdx, [rbp+var_D8]
__text:00000001000021E4                 mov     [rbp+var_B8], rax
__text:00000001000021EB                 mov     [rbp+var_C0], rdx
__text:00000001000021F2                 mov     rax, [rbp+var_B8]
__text:00000001000021F9                 mov     rdx, [rbp+var_C0]
__text:0000000100002200                 mov     [rbp+var_98], rax
__text:0000000100002207                 mov     [rbp+var_A0], rdx
__text:000000010000220E                 mov     rax, [rbp+var_98]
__text:0000000100002215                 mov     rdx, [rbp+var_A0]
__text:000000010000221C                 mov     rsi, [rdx]
__text:000000010000221F                 mov     rsi, [rsi-18h]
__text:0000000100002223                 add     rdx, rsi
__text:0000000100002226                 mov     [rbp+var_90], rdx
__text:000000010000222D                 mov     rdx, [rbp+var_90]
__text:0000000100002234                 mov     [rbp+var_88], rdx
__text:000000010000223B                 mov     rdx, [rbp+var_88]
__text:0000000100002242                 mov     rdx, [rdx+28h]
__text:0000000100002246                 mov     [rax], rdx
__text:0000000100002249                 mov     rsi, [rbp+var_E0]
__text:0000000100002250                 mov     rax, [rbp+var_D8]
__text:0000000100002257                 mov     rdx, [rax]
__text:000000010000225A                 mov     rdx, [rdx-18h]
__text:000000010000225E                 add     rax, rdx
__text:0000000100002261                 mov     [rbp+var_60], rax
__text:0000000100002265                 mov     rax, [rbp+var_60]
__text:0000000100002269                 mov     edi, [rax+8]
__text:000000010000226C                 mov     [rbp+var_130], rsi
__text:0000000100002273                 mov     [rbp+var_134], edi
__text:0000000100002279                 mov     eax, [rbp+var_134]
__text:000000010000227F                 and     eax, 0B0h
__text:0000000100002284                 cmp     eax, 20h ; ' '
__text:0000000100002289                 jnz     loc_1000022A9
__text:000000010000228F                 mov     rax, [rbp+var_E0]
__text:0000000100002296                 add     rax, [rbp+var_108]
__text:000000010000229D                 mov     [rbp+var_140], rax
__text:00000001000022A4                 jmp     loc_1000022B7
__text:00000001000022A9 ; ---------------------------------------------------------------------------
__text:00000001000022A9
__text:00000001000022A9 loc_1000022A9:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+149↑j
__text:00000001000022A9                 mov     rax, [rbp+var_E0]
__text:00000001000022B0                 mov     [rbp+var_140], rax
__text:00000001000022B7
__text:00000001000022B7 loc_1000022B7:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+164↑j
__text:00000001000022B7                 mov     rax, [rbp+var_140]
__text:00000001000022BE                 mov     rcx, [rbp+var_E0]
__text:00000001000022C5                 add     rcx, [rbp+var_108]
__text:00000001000022CC                 mov     rdx, [rbp+var_D8]
__text:00000001000022D3                 mov     rsi, [rdx]
__text:00000001000022D6                 mov     rsi, [rsi-18h]
__text:00000001000022DA                 add     rdx, rsi
__text:00000001000022DD                 mov     rsi, [rbp+var_D8]
__text:00000001000022E4                 mov     rdi, [rsi]
__text:00000001000022E7                 mov     rdi, [rdi-18h]
__text:00000001000022EB                 add     rsi, rdi
__text:00000001000022EE                 mov     [rbp+var_50], rsi
__text:00000001000022F2                 mov     rsi, [rbp+var_50]
__text:00000001000022F6                 mov     r8d, [rsi+90h]
__text:00000001000022FD                 mov     [rbp+var_4], 0FFFFFFFFh
__text:0000000100002304                 mov     [rbp+var_8], r8d
__text:0000000100002308                 mov     r8d, [rbp+var_4]
__text:000000010000230C                 cmp     r8d, [rbp+var_8]
__text:0000000100002310                 mov     [rbp+var_148], rax
__text:0000000100002317                 mov     [rbp+var_150], rcx
__text:000000010000231E                 mov     [rbp+var_158], rdx
__text:0000000100002325                 mov     [rbp+var_160], rsi
__text:000000010000232C                 jnz     loc_100002428
__text:0000000100002332                 mov     rax, [rbp+var_160]
__text:0000000100002339                 mov     [rbp+var_28], rax
__text:000000010000233D                 mov     [rbp+var_29], 20h ; ' '
__text:0000000100002341                 mov     rsi, [rbp+var_28]
__text:0000000100002345                 lea     rdi, [rbp+var_38] ; this
__text:0000000100002349                 call    __ZNKSt3__18ios_base6getlocEv ; std::__1::ios_base::getloc(void)
__text:000000010000234E                 jmp     $+5
__text:0000000100002353 ; ---------------------------------------------------------------------------
__text:0000000100002353
__text:0000000100002353 loc_100002353:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+20E↑j
__text:0000000100002353                 lea     rax, [rbp+var_38]
__text:0000000100002357                 mov     [rbp+var_20], rax
__text:000000010000235B                 mov     rsi, cs:__ZNSt3__15ctypeIcE2idE_ptr
__text:0000000100002362                 mov     rdi, rax
__text:0000000100002365                 call    __ZNKSt3__16locale9use_facetERNS0_2idE ; std::__1::locale::use_facet(std::__1::locale::id &)
__text:000000010000236A                 mov     [rbp+var_168], rax
__text:0000000100002371                 jmp     $+5
__text:0000000100002376 ; ---------------------------------------------------------------------------
__text:0000000100002376
__text:0000000100002376 loc_100002376:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+231↑j
__text:0000000100002376                 mov     al, [rbp+var_29]
__text:0000000100002379                 mov     rcx, [rbp+var_168]
__text:0000000100002380                 mov     [rbp+var_10], rcx
__text:0000000100002384                 mov     [rbp+var_11], al
__text:0000000100002387                 mov     rdx, [rbp+var_10]
__text:000000010000238B                 mov     rsi, [rdx]
__text:000000010000238E                 mov     rsi, [rsi+38h]
__text:0000000100002392                 movsx   edi, [rbp+var_11]
__text:0000000100002396                 mov     [rbp+var_16C], edi
__text:000000010000239C                 mov     rdi, rdx
__text:000000010000239F                 mov     r8d, [rbp+var_16C]
__text:00000001000023A6                 mov     [rbp+var_178], rsi
__text:00000001000023AD                 mov     esi, r8d
__text:00000001000023B0                 mov     rdx, [rbp+var_178]
__text:00000001000023B7                 call    rdx
__text:00000001000023B9                 mov     [rbp+var_179], al
__text:00000001000023BF                 jmp     loc_100002404
__text:00000001000023C4 ; ---------------------------------------------------------------------------
__text:00000001000023C4                 mov     ecx, edx
__text:00000001000023C6                 mov     [rbp+var_40], rax
__text:00000001000023CA                 mov     [rbp+var_44], ecx
__text:00000001000023CD                 lea     rdi, [rbp+var_38] ; this
__text:00000001000023D1                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:00000001000023D6                 jmp     $+5
__text:00000001000023DB ; ---------------------------------------------------------------------------
__text:00000001000023DB
__text:00000001000023DB loc_1000023DB:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+296↑j
__text:00000001000023DB                 mov     rax, [rbp+var_40]
__text:00000001000023DF                 mov     ecx, [rbp+var_44]
__text:00000001000023E2                 mov     [rbp+var_188], rax
__text:00000001000023E9                 mov     [rbp+var_18C], ecx
__text:00000001000023EF                 jmp     loc_100002516
__text:00000001000023F4 ; ---------------------------------------------------------------------------
__text:00000001000023F4                 mov     ecx, edx
__text:00000001000023F6                 mov     rdi, rax
__text:00000001000023F9                 mov     [rbp+var_190], ecx
__text:00000001000023FF                 call    ___clang_call_terminate
__text:0000000100002404 ; ---------------------------------------------------------------------------
__text:0000000100002404
__text:0000000100002404 loc_100002404:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+27F↑j
__text:0000000100002404                 lea     rdi, [rbp+var_38] ; this
__text:0000000100002408                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:000000010000240D                 jmp     $+5
__text:0000000100002412 ; ---------------------------------------------------------------------------
__text:0000000100002412
__text:0000000100002412 loc_100002412:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+2CD↑j
__text:0000000100002412                 mov     al, [rbp+var_179]
__text:0000000100002418                 movsx   ecx, al
__text:000000010000241B                 mov     rdx, [rbp+var_160]
__text:0000000100002422                 mov     [rdx+90h], ecx
__text:0000000100002428
__text:0000000100002428 loc_100002428:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+1EC↑j
__text:0000000100002428                 mov     rax, [rbp+var_160]
__text:000000010000242F                 mov     ecx, [rax+90h]
__text:0000000100002435                 mov     dl, cl
__text:0000000100002437                 mov     [rbp+var_191], dl
__text:000000010000243D                 mov     rdi, [rbp+var_110]
__text:0000000100002444                 mov     al, [rbp+var_191]
__text:000000010000244A                 movsx   r9d, al
__text:000000010000244E                 mov     rsi, [rbp+var_130]
__text:0000000100002455                 mov     rdx, [rbp+var_148]
__text:000000010000245C                 mov     rcx, [rbp+var_150]
__text:0000000100002463                 mov     r8, [rbp+var_158]
__text:000000010000246A                 call    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)
__text:000000010000246F                 mov     [rbp+var_1A0], rax
__text:0000000100002476                 jmp     $+5
__text:000000010000247B ; ---------------------------------------------------------------------------
__text:000000010000247B
__text:000000010000247B loc_10000247B:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+336↑j
__text:000000010000247B                 lea     rax, [rbp+var_118]
__text:0000000100002482                 mov     rcx, [rbp+var_1A0]
__text:0000000100002489                 mov     [rbp+var_118], rcx
__text:0000000100002490                 mov     [rbp+var_58], rax
__text:0000000100002494                 mov     rax, [rbp+var_58]
__text:0000000100002498                 cmp     qword ptr [rax], 0
__text:000000010000249F                 jnz     loc_100002541
__text:00000001000024A5                 mov     rax, [rbp+var_D8]
__text:00000001000024AC                 mov     rcx, [rax]
__text:00000001000024AF                 mov     rcx, [rcx-18h]
__text:00000001000024B3                 add     rax, rcx
__text:00000001000024B6                 mov     [rbp+var_78], rax
__text:00000001000024BA                 mov     [rbp+var_7C], 5
__text:00000001000024C1                 mov     rax, [rbp+var_78]
__text:00000001000024C5                 mov     [rbp+var_68], rax
__text:00000001000024C9                 mov     [rbp+var_6C], 5
__text:00000001000024D0                 mov     rax, [rbp+var_68]
__text:00000001000024D4                 mov     edx, [rax+20h]
__text:00000001000024D7                 or      edx, 5
__text:00000001000024DA                 mov     rdi, rax        ; this
__text:00000001000024DD                 mov     esi, edx        ; unsigned int
__text:00000001000024DF                 call    __ZNSt3__18ios_base5clearEj ; std::__1::ios_base::clear(uint)
__text:00000001000024E4                 jmp     $+5
__text:00000001000024E9 ; ---------------------------------------------------------------------------
__text:00000001000024E9
__text:00000001000024E9 loc_1000024E9:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+3A4↑j
__text:00000001000024E9                 jmp     $+5
__text:00000001000024EE ; ---------------------------------------------------------------------------
__text:00000001000024EE
__text:00000001000024EE loc_1000024EE:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_1000024E9↑j
__text:00000001000024EE                 jmp     loc_100002541
__text:00000001000024F3 ; ---------------------------------------------------------------------------
__text:00000001000024F3                 mov     ecx, edx
__text:00000001000024F5                 mov     [rbp+var_F8], rax
__text:00000001000024FC                 mov     [rbp+var_FC], ecx
__text:0000000100002502                 jmp     loc_100002561
__text:0000000100002507 ; ---------------------------------------------------------------------------
__text:0000000100002507                 mov     ecx, edx
__text:0000000100002509                 mov     [rbp+var_188], rax
__text:0000000100002510                 mov     [rbp+var_18C], ecx
__text:0000000100002516
__text:0000000100002516 loc_100002516:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+2AF↑j
__text:0000000100002516                 mov     eax, [rbp+var_18C]
__text:000000010000251C                 mov     rcx, [rbp+var_188]
__text:0000000100002523                 mov     [rbp+var_F8], rcx
__text:000000010000252A                 mov     [rbp+var_FC], eax
__text:0000000100002530                 lea     rdi, [rbp+var_F0]
__text:0000000100002537                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::sentry::~sentry()
__text:000000010000253C                 jmp     loc_10000255C
__text:0000000100002541 ; ---------------------------------------------------------------------------
__text:0000000100002541
__text:0000000100002541 loc_100002541:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+35F↑j
__text:0000000100002541                                         ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_1000024EE↑j
__text:0000000100002541                 jmp     $+5
__text:0000000100002546 ; ---------------------------------------------------------------------------
__text:0000000100002546
__text:0000000100002546 loc_100002546:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+5C↑j
__text:0000000100002546                                         ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_100002541↑j
__text:0000000100002546                 lea     rdi, [rbp+var_F0]
__text:000000010000254D                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::sentry::~sentry()
__text:0000000100002552                 jmp     $+5
__text:0000000100002557 ; ---------------------------------------------------------------------------
__text:0000000100002557
__text:0000000100002557 loc_100002557:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+412↑j
__text:0000000100002557                 jmp     loc_100002594
__text:000000010000255C ; ---------------------------------------------------------------------------
__text:000000010000255C
__text:000000010000255C loc_10000255C:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+3FC↑j
__text:000000010000255C                 jmp     $+5
__text:0000000100002561 ; ---------------------------------------------------------------------------
__text:0000000100002561
__text:0000000100002561 loc_100002561:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+3C2↑j
__text:0000000100002561                                         ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_10000255C↑j
__text:0000000100002561                 mov     rdi, [rbp+var_F8] ; void *
__text:0000000100002568                 call    ___cxa_begin_catch
__text:000000010000256D                 mov     rdi, [rbp+var_D8]
__text:0000000100002574                 mov     rcx, [rdi]
__text:0000000100002577                 mov     rcx, [rcx-18h]
__text:000000010000257B                 add     rdi, rcx        ; this
__text:000000010000257E                 mov     [rbp+var_1A8], rax
__text:0000000100002585                 call    __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv ; std::__1::ios_base::__set_badbit_and_consider_rethrow(void)
__text:000000010000258A                 jmp     $+5
__text:000000010000258F ; ---------------------------------------------------------------------------
__text:000000010000258F
__text:000000010000258F loc_10000258F:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+44A↑j
__text:000000010000258F                 call    ___cxa_end_catch
__text:0000000100002594
__text:0000000100002594 loc_100002594:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_100002557↑j
__text:0000000100002594                 mov     rax, [rbp+var_D8]
__text:000000010000259B                 add     rsp, 1B0h
__text:00000001000025A2                 pop     rbp
__text:00000001000025A3                 retn
__text:00000001000025A3 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc endp
__text:00000001000025A3
__text:00000001000025A4 ; ---------------------------------------------------------------------------
__text:00000001000025A4                 mov     ecx, edx
__text:00000001000025A6                 mov     [rbp-0F8h], rax
__text:00000001000025AD                 mov     [rbp-0FCh], ecx
__text:00000001000025B3                 call    ___cxa_end_catch
__text:00000001000025B8                 jmp     $+5
__text:00000001000025BD ; ---------------------------------------------------------------------------
__text:00000001000025BD
__text:00000001000025BD loc_1000025BD:                          ; CODE XREF: __text:00000001000025B8↑j
__text:00000001000025BD                 jmp     $+5
__text:00000001000025C2 ; ---------------------------------------------------------------------------
__text:00000001000025C2
__text:00000001000025C2 loc_1000025C2:                          ; CODE XREF: __text:loc_1000025BD↑j
__text:00000001000025C2                 mov     rdi, [rbp-0F8h]
__text:00000001000025C9                 call    __Unwind_Resume
__text:00000001000025CE ; ---------------------------------------------------------------------------
__text:00000001000025CE                 mov     ecx, edx
__text:00000001000025D0                 mov     rdi, rax
__text:00000001000025D3                 mov     [rbp-1ACh], ecx
__text:00000001000025D9                 call    ___clang_call_terminate
__text:00000001000025D9 ; ---------------------------------------------------------------------------
__text:00000001000025DE                 align 20h
__text:00000001000025E0
__text:00000001000025E0 ; =============== S U B R O U T I N E =======================================
__text:00000001000025E0
__text:00000001000025E0 ; Attributes: bp-based frame
__text:00000001000025E0
__text:00000001000025E0 ; std::__1::basic_ostream<char, std::__1::char_traits<char>> & std::__1::endl<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &)
__text:00000001000025E0 __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ proc near
__text:00000001000025E0                                         ; DATA XREF: _main+80C↑o
__text:00000001000025E0                                         ; _main:loc_100001D8E↑o
__text:00000001000025E0
__text:00000001000025E0 var_88          = qword ptr -88h
__text:00000001000025E0 var_80          = qword ptr -80h
__text:00000001000025E0 var_78          = dword ptr -78h
__text:00000001000025E0 var_71          = byte ptr -71h
__text:00000001000025E0 var_70          = qword ptr -70h
__text:00000001000025E0 var_64          = dword ptr -64h
__text:00000001000025E0 var_60          = qword ptr -60h
__text:00000001000025E0 var_58          = qword ptr -58h
__text:00000001000025E0 var_50          = qword ptr -50h
__text:00000001000025E0 var_48          = qword ptr -48h
__text:00000001000025E0 var_3C          = dword ptr -3Ch
__text:00000001000025E0 var_38          = qword ptr -38h
__text:00000001000025E0 var_30          = byte ptr -30h
__text:00000001000025E0 var_21          = byte ptr -21h
__text:00000001000025E0 var_20          = qword ptr -20h
__text:00000001000025E0 var_18          = qword ptr -18h
__text:00000001000025E0 var_9           = byte ptr -9
__text:00000001000025E0 var_8           = qword ptr -8
__text:00000001000025E0
__text:00000001000025E0                 push    rbp
__text:00000001000025E1                 mov     rbp, rsp
__text:00000001000025E4                 sub     rsp, 90h
__text:00000001000025EB                 mov     [rbp+var_48], rdi
__text:00000001000025EF                 mov     rax, rdi
__text:00000001000025F2                 mov     rcx, [rdi]
__text:00000001000025F5                 mov     rcx, [rcx-18h]
__text:00000001000025F9                 add     rdi, rcx
__text:00000001000025FC                 mov     [rbp+var_20], rdi
__text:0000000100002600                 mov     [rbp+var_21], 0Ah
__text:0000000100002604                 mov     rsi, [rbp+var_20]
__text:0000000100002608                 lea     rcx, [rbp+var_30]
__text:000000010000260C                 mov     rdi, rcx        ; this
__text:000000010000260F                 mov     [rbp+var_50], rax
__text:0000000100002613                 mov     [rbp+var_58], rcx
__text:0000000100002617                 call    __ZNKSt3__18ios_base6getlocEv ; std::__1::ios_base::getloc(void)
__text:000000010000261C                 mov     rax, [rbp+var_58]
__text:0000000100002620                 mov     [rbp+var_18], rax
__text:0000000100002624                 mov     rsi, cs:__ZNSt3__15ctypeIcE2idE_ptr
__text:000000010000262B                 mov     rdi, rax
__text:000000010000262E                 call    __ZNKSt3__16locale9use_facetERNS0_2idE ; std::__1::locale::use_facet(std::__1::locale::id &)
__text:0000000100002633                 mov     [rbp+var_60], rax
__text:0000000100002637                 jmp     $+5
__text:000000010000263C ; ---------------------------------------------------------------------------
__text:000000010000263C
__text:000000010000263C loc_10000263C:                          ; CODE XREF: std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)+57↑j
__text:000000010000263C                 mov     al, [rbp+var_21]
__text:000000010000263F                 mov     rcx, [rbp+var_60]
__text:0000000100002643                 mov     [rbp+var_8], rcx
__text:0000000100002647                 mov     [rbp+var_9], al
__text:000000010000264A                 mov     rdx, [rbp+var_8]
__text:000000010000264E                 mov     rsi, [rdx]
__text:0000000100002651                 mov     rsi, [rsi+38h]
__text:0000000100002655                 movsx   edi, [rbp+var_9]
__text:0000000100002659                 mov     [rbp+var_64], edi
__text:000000010000265C                 mov     rdi, rdx
__text:000000010000265F                 mov     r8d, [rbp+var_64]
__text:0000000100002663                 mov     [rbp+var_70], rsi
__text:0000000100002667                 mov     esi, r8d
__text:000000010000266A                 mov     rdx, [rbp+var_70]
__text:000000010000266E                 call    rdx
__text:0000000100002670                 mov     [rbp+var_71], al
__text:0000000100002673                 jmp     loc_1000026A5
__text:0000000100002678 ; ---------------------------------------------------------------------------
__text:0000000100002678                 mov     ecx, edx
__text:000000010000267A                 mov     [rbp+var_38], rax
__text:000000010000267E                 mov     [rbp+var_3C], ecx
__text:0000000100002681                 lea     rdi, [rbp+var_30] ; this
__text:0000000100002685                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:000000010000268A                 jmp     $+5
__text:000000010000268F ; ---------------------------------------------------------------------------
__text:000000010000268F
__text:000000010000268F loc_10000268F:                          ; CODE XREF: std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)+AA↑j
__text:000000010000268F                 mov     rdi, [rbp+var_38]
__text:0000000100002693                 call    __Unwind_Resume
__text:0000000100002698 ; ---------------------------------------------------------------------------
__text:0000000100002698                 mov     ecx, edx
__text:000000010000269A                 mov     rdi, rax
__text:000000010000269D                 mov     [rbp+var_78], ecx
__text:00000001000026A0                 call    ___clang_call_terminate
__text:00000001000026A5 ; ---------------------------------------------------------------------------
__text:00000001000026A5
__text:00000001000026A5 loc_1000026A5:                          ; CODE XREF: std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)+93↑j
__text:00000001000026A5                 lea     rdi, [rbp+var_30] ; this
__text:00000001000026A9                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:00000001000026AE                 mov     rdi, [rbp+var_50]
__text:00000001000026B2                 mov     al, [rbp+var_71]
__text:00000001000026B5                 movsx   esi, al
__text:00000001000026B8                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::put(char)
__text:00000001000026BD                 mov     rdi, [rbp+var_48]
__text:00000001000026C1                 mov     [rbp+var_80], rax
__text:00000001000026C5                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::flush(void)
__text:00000001000026CA                 mov     rdi, [rbp+var_48]
__text:00000001000026CE                 mov     [rbp+var_88], rax
__text:00000001000026D5                 mov     rax, rdi
__text:00000001000026D8                 add     rsp, 90h
__text:00000001000026DF                 pop     rbp
__text:00000001000026E0                 retn
__text:00000001000026E0 __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ endp
__text:00000001000026E0
__text:00000001000026E0 ; ---------------------------------------------------------------------------
__text:00000001000026E1                 align 10h
__text:00000001000026F0
__text:00000001000026F0 ; =============== S U B R O U T I N E =======================================
__text:00000001000026F0
__text:00000001000026F0 ; Attributes: bp-based frame
__text:00000001000026F0
__text:00000001000026F0 ; std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base &, char)
__text:00000001000026F0 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ proc near
__text:00000001000026F0                                         ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+32A↑p
__text:00000001000026F0
__text:00000001000026F0 var_2CC         = dword ptr -2CCh
__text:00000001000026F0 var_2C8         = dword ptr -2C8h
__text:00000001000026F0 var_2C4         = dword ptr -2C4h
__text:00000001000026F0 var_2C0         = qword ptr -2C0h
__text:00000001000026F0 var_2B8         = qword ptr -2B8h
__text:00000001000026F0 var_2B0         = qword ptr -2B0h
__text:00000001000026F0 var_2A8         = qword ptr -2A8h
__text:00000001000026F0 var_2A0         = qword ptr -2A0h
__text:00000001000026F0 var_298         = qword ptr -298h
__text:00000001000026F0 var_290         = qword ptr -290h
__text:00000001000026F0 var_288         = qword ptr -288h
__text:00000001000026F0 var_27C         = dword ptr -27Ch
__text:00000001000026F0 var_278         = qword ptr -278h
__text:00000001000026F0 var_26C         = dword ptr -26Ch
__text:00000001000026F0 var_268         = qword ptr -268h
__text:00000001000026F0 var_260         = byte ptr -260h
__text:00000001000026F0 var_248         = qword ptr -248h
__text:00000001000026F0 var_240         = qword ptr -240h
__text:00000001000026F0 var_238         = qword ptr -238h
__text:00000001000026F0 var_230         = qword ptr -230h
__text:00000001000026F0 var_228         = qword ptr -228h
__text:00000001000026F0 var_219         = byte ptr -219h
__text:00000001000026F0 var_218         = qword ptr -218h
__text:00000001000026F0 var_210         = qword ptr -210h
__text:00000001000026F0 var_208         = qword ptr -208h
__text:00000001000026F0 var_200         = qword ptr -200h
__text:00000001000026F0 var_1F8         = qword ptr -1F8h
__text:00000001000026F0 var_1F0         = qword ptr -1F0h
__text:00000001000026F0 var_1E8         = qword ptr -1E8h
__text:00000001000026F0 var_1E0         = qword ptr -1E0h
__text:00000001000026F0 var_1D8         = qword ptr -1D8h
__text:00000001000026F0 var_1D0         = qword ptr -1D0h
__text:00000001000026F0 var_1C8         = qword ptr -1C8h
__text:00000001000026F0 var_1C0         = qword ptr -1C0h
__text:00000001000026F0 var_1B8         = qword ptr -1B8h
__text:00000001000026F0 var_1B0         = qword ptr -1B0h
__text:00000001000026F0 var_1A8         = qword ptr -1A8h
__text:00000001000026F0 var_1A0         = qword ptr -1A0h
__text:00000001000026F0 var_198         = qword ptr -198h
__text:00000001000026F0 var_190         = qword ptr -190h
__text:00000001000026F0 var_188         = qword ptr -188h
__text:00000001000026F0 var_180         = qword ptr -180h
__text:00000001000026F0 var_178         = qword ptr -178h
__text:00000001000026F0 var_170         = qword ptr -170h
__text:00000001000026F0 var_168         = qword ptr -168h
__text:00000001000026F0 var_160         = qword ptr -160h
__text:00000001000026F0 var_158         = qword ptr -158h
__text:00000001000026F0 var_150         = qword ptr -150h
__text:00000001000026F0 var_148         = qword ptr -148h
__text:00000001000026F0 var_140         = qword ptr -140h
__text:00000001000026F0 var_138         = qword ptr -138h
__text:00000001000026F0 var_130         = qword ptr -130h
__text:00000001000026F0 var_128         = qword ptr -128h
__text:00000001000026F0 var_120         = qword ptr -120h
__text:00000001000026F0 var_118         = qword ptr -118h
__text:00000001000026F0 var_110         = qword ptr -110h
__text:00000001000026F0 var_108         = qword ptr -108h
__text:00000001000026F0 var_100         = qword ptr -100h
__text:00000001000026F0 var_F8          = qword ptr -0F8h
__text:00000001000026F0 var_F0          = qword ptr -0F0h
__text:00000001000026F0 var_E8          = qword ptr -0E8h
__text:00000001000026F0 var_E0          = qword ptr -0E0h
__text:00000001000026F0 var_D8          = qword ptr -0D8h
__text:00000001000026F0 var_D0          = qword ptr -0D0h
__text:00000001000026F0 var_C8          = qword ptr -0C8h
__text:00000001000026F0 var_C0          = qword ptr -0C0h
__text:00000001000026F0 var_B8          = qword ptr -0B8h
__text:00000001000026F0 var_B0          = qword ptr -0B0h
__text:00000001000026F0 var_A8          = qword ptr -0A8h
__text:00000001000026F0 var_A0          = qword ptr -0A0h
__text:00000001000026F0 var_98          = qword ptr -98h
__text:00000001000026F0 var_90          = qword ptr -90h
__text:00000001000026F0 var_88          = qword ptr -88h
__text:00000001000026F0 var_80          = qword ptr -80h
__text:00000001000026F0 var_78          = qword ptr -78h
__text:00000001000026F0 var_70          = qword ptr -70h
__text:00000001000026F0 var_68          = qword ptr -68h
__text:00000001000026F0 var_60          = qword ptr -60h
__text:00000001000026F0 var_51          = byte ptr -51h
__text:00000001000026F0 var_50          = qword ptr -50h
__text:00000001000026F0 var_48          = qword ptr -48h
__text:00000001000026F0 var_39          = byte ptr -39h
__text:00000001000026F0 var_38          = qword ptr -38h
__text:00000001000026F0 var_30          = qword ptr -30h
__text:00000001000026F0 var_28          = qword ptr -28h
__text:00000001000026F0 var_20          = qword ptr -20h
__text:00000001000026F0 var_18          = qword ptr -18h
__text:00000001000026F0 var_10          = qword ptr -10h
__text:00000001000026F0 var_8           = qword ptr -8
__text:00000001000026F0
__text:00000001000026F0                 push    rbp
__text:00000001000026F1                 mov     rbp, rsp
__text:00000001000026F4                 sub     rsp, 2D0h
__text:00000001000026FB                 mov     al, r9b
__text:00000001000026FE                 lea     r10, [rbp+var_228]
__text:0000000100002705                 lea     r11, [rbp+var_1E8]
__text:000000010000270C                 mov     [rbp+var_1F8], rdi
__text:0000000100002713                 mov     [rbp+var_200], rsi
__text:000000010000271A                 mov     [rbp+var_208], rdx
__text:0000000100002721                 mov     [rbp+var_210], rcx
__text:0000000100002728                 mov     [rbp+var_218], r8
__text:000000010000272F                 mov     [rbp+var_219], al
__text:0000000100002735                 mov     rcx, [rbp+var_1F8]
__text:000000010000273C                 mov     [rbp+var_1D8], r11
__text:0000000100002743                 mov     [rbp+var_1E0], 0FFFFFFFFFFFFFFFFh
__text:000000010000274E                 mov     rdx, [rbp+var_1D8]
__text:0000000100002755                 mov     rsi, [rbp+var_1E0]
__text:000000010000275C                 mov     [rbp+var_1C8], rdx
__text:0000000100002763                 mov     [rbp+var_1D0], rsi
__text:000000010000276A                 mov     rdx, [rbp+var_1C8]
__text:0000000100002771                 mov     qword ptr [rdx], 0
__text:0000000100002778                 mov     rdx, [rbp+var_1E8]
__text:000000010000277F                 mov     [rbp+var_228], rdx
__text:0000000100002786                 mov     [rbp+var_1C0], r10
__text:000000010000278D                 cmp     rcx, 0
__text:0000000100002794                 jnz     loc_1000027AD
__text:000000010000279A                 mov     rax, [rbp+var_1F8]
__text:00000001000027A1                 mov     [rbp+var_1F0], rax
__text:00000001000027A8                 jmp     loc_100002D72
__text:00000001000027AD ; ---------------------------------------------------------------------------
__text:00000001000027AD
__text:00000001000027AD loc_1000027AD:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+A4↑j
__text:00000001000027AD                 mov     rax, [rbp+var_210]
__text:00000001000027B4                 mov     rcx, [rbp+var_200]
__text:00000001000027BB                 sub     rax, rcx
__text:00000001000027BE                 mov     [rbp+var_230], rax
__text:00000001000027C5                 mov     rax, [rbp+var_218]
__text:00000001000027CC                 mov     [rbp+var_158], rax
__text:00000001000027D3                 mov     rax, [rbp+var_158]
__text:00000001000027DA                 mov     rax, [rax+18h]
__text:00000001000027DE                 mov     [rbp+var_238], rax
__text:00000001000027E5                 mov     rax, [rbp+var_238]
__text:00000001000027EC                 cmp     rax, [rbp+var_230]
__text:00000001000027F3                 jle     loc_100002816
__text:00000001000027F9                 mov     rax, [rbp+var_230]
__text:0000000100002800                 mov     rcx, [rbp+var_238]
__text:0000000100002807                 sub     rcx, rax
__text:000000010000280A                 mov     [rbp+var_238], rcx
__text:0000000100002811                 jmp     loc_100002821
__text:0000000100002816 ; ---------------------------------------------------------------------------
__text:0000000100002816
__text:0000000100002816 loc_100002816:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+103↑j
__text:0000000100002816                 mov     [rbp+var_238], 0
__text:0000000100002821
__text:0000000100002821 loc_100002821:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+121↑j
__text:0000000100002821                 mov     rax, [rbp+var_208]
__text:0000000100002828                 mov     rcx, [rbp+var_200]
__text:000000010000282F                 sub     rax, rcx
__text:0000000100002832                 mov     [rbp+var_240], rax
__text:0000000100002839                 cmp     [rbp+var_240], 0
__text:0000000100002844                 jle     loc_100002921
__text:000000010000284A                 mov     rax, [rbp+var_1F8]
__text:0000000100002851                 mov     rcx, [rbp+var_200]
__text:0000000100002858                 mov     rdx, [rbp+var_240]
__text:000000010000285F                 mov     [rbp+var_F8], rax
__text:0000000100002866                 mov     [rbp+var_100], rcx
__text:000000010000286D                 mov     [rbp+var_108], rdx
__text:0000000100002874                 mov     rax, [rbp+var_F8]
__text:000000010000287B                 mov     rcx, [rax]
__text:000000010000287E                 mov     rcx, [rcx+60h]
__text:0000000100002882                 mov     rsi, [rbp+var_100]
__text:0000000100002889                 mov     rdx, [rbp+var_108]
__text:0000000100002890                 mov     rdi, rax
__text:0000000100002893                 call    rcx
__text:0000000100002895                 cmp     rax, [rbp+var_240]
__text:000000010000289C                 jz      loc_10000291C
__text:00000001000028A2                 lea     rax, [rbp+var_248]
__text:00000001000028A9                 lea     rcx, [rbp+var_F0]
__text:00000001000028B0                 mov     [rbp+var_E0], rcx
__text:00000001000028B7                 mov     [rbp+var_E8], 0FFFFFFFFFFFFFFFFh
__text:00000001000028C2                 mov     rcx, [rbp+var_E0]
__text:00000001000028C9                 mov     rdx, [rbp+var_E8]
__text:00000001000028D0                 mov     [rbp+var_D0], rcx
__text:00000001000028D7                 mov     [rbp+var_D8], rdx
__text:00000001000028DE                 mov     rcx, [rbp+var_D0]
__text:00000001000028E5                 mov     qword ptr [rcx], 0
__text:00000001000028EC                 mov     rcx, [rbp+var_F0]
__text:00000001000028F3                 mov     [rbp+var_248], rcx
__text:00000001000028FA                 mov     [rbp+var_8], rax
__text:00000001000028FE                 mov     [rbp+var_1F8], 0
__text:0000000100002909                 mov     rax, [rbp+var_1F8]
__text:0000000100002910                 mov     [rbp+var_1F0], rax
__text:0000000100002917                 jmp     loc_100002D72
__text:000000010000291C ; ---------------------------------------------------------------------------
__text:000000010000291C
__text:000000010000291C loc_10000291C:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+1AC↑j
__text:000000010000291C                 jmp     $+5
__text:0000000100002921 ; ---------------------------------------------------------------------------
__text:0000000100002921
__text:0000000100002921 loc_100002921:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+154↑j
__text:0000000100002921                                         ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_10000291C↑j
__text:0000000100002921                 cmp     [rbp+var_238], 0
__text:000000010000292C                 jle     loc_100002C2B
__text:0000000100002932                 lea     rax, [rbp+var_260]
__text:0000000100002939                 mov     rcx, [rbp+var_238]
__text:0000000100002940                 mov     dl, [rbp+var_219]
__text:0000000100002946                 mov     [rbp+var_48], rax
__text:000000010000294A                 mov     [rbp+var_50], rcx
__text:000000010000294E                 mov     [rbp+var_51], dl
__text:0000000100002951                 mov     rax, [rbp+var_48]
__text:0000000100002955                 mov     rcx, [rbp+var_50]
__text:0000000100002959                 mov     dl, [rbp+var_51]
__text:000000010000295C                 mov     [rbp+var_30], rax
__text:0000000100002960                 mov     [rbp+var_38], rcx
__text:0000000100002964                 mov     [rbp+var_39], dl
__text:0000000100002967                 mov     rax, [rbp+var_30]
__text:000000010000296B                 mov     [rbp+var_28], rax
__text:000000010000296F                 mov     rcx, [rbp+var_28]
__text:0000000100002973                 mov     [rbp+var_20], rcx
__text:0000000100002977                 mov     rcx, [rbp+var_20]
__text:000000010000297B                 mov     [rbp+var_18], rcx
__text:000000010000297F                 mov     rcx, [rbp+var_18]
__text:0000000100002983                 mov     [rbp+var_10], rcx
__text:0000000100002987                 mov     rsi, [rbp+var_38]
__text:000000010000298B                 mov     rdi, rax
__text:000000010000298E                 movsx   edx, [rbp+var_39]
__text:0000000100002992                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::__init(ulong,char)
__text:0000000100002997                 lea     rax, [rbp+var_260]
__text:000000010000299E                 mov     rcx, [rbp+var_1F8]
__text:00000001000029A5                 mov     [rbp+var_C8], rax
__text:00000001000029AC                 mov     rax, [rbp+var_C8]
__text:00000001000029B3                 mov     [rbp+var_C0], rax
__text:00000001000029BA                 mov     rax, [rbp+var_C0]
__text:00000001000029C1                 mov     [rbp+var_B8], rax
__text:00000001000029C8                 mov     rsi, [rbp+var_B8]
__text:00000001000029CF                 mov     [rbp+var_B0], rsi
__text:00000001000029D6                 mov     rsi, [rbp+var_B0]
__text:00000001000029DD                 mov     [rbp+var_A8], rsi
__text:00000001000029E4                 mov     rsi, [rbp+var_A8]
__text:00000001000029EB                 movzx   edx, byte ptr [rsi]
__text:00000001000029EE                 and     edx, 1
__text:00000001000029F4                 cmp     edx, 0
__text:00000001000029FA                 mov     [rbp+var_290], rcx
__text:0000000100002A01                 mov     [rbp+var_298], rax
__text:0000000100002A08                 jz      loc_100002A3D
__text:0000000100002A0E                 mov     rax, [rbp+var_298]
__text:0000000100002A15                 mov     [rbp+var_78], rax
__text:0000000100002A19                 mov     rcx, [rbp+var_78]
__text:0000000100002A1D                 mov     [rbp+var_70], rcx
__text:0000000100002A21                 mov     rcx, [rbp+var_70]
__text:0000000100002A25                 mov     [rbp+var_68], rcx
__text:0000000100002A29                 mov     rcx, [rbp+var_68]
__text:0000000100002A2D                 mov     rcx, [rcx+10h]
__text:0000000100002A31                 mov     [rbp+var_2A0], rcx
__text:0000000100002A38                 jmp     loc_100002A92
__text:0000000100002A3D ; ---------------------------------------------------------------------------
__text:0000000100002A3D
__text:0000000100002A3D loc_100002A3D:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+318↑j
__text:0000000100002A3D                 mov     rax, [rbp+var_298]
__text:0000000100002A44                 mov     [rbp+var_A0], rax
__text:0000000100002A4B                 mov     rcx, [rbp+var_A0]
__text:0000000100002A52                 mov     [rbp+var_98], rcx
__text:0000000100002A59                 mov     rcx, [rbp+var_98]
__text:0000000100002A60                 mov     [rbp+var_90], rcx
__text:0000000100002A67                 mov     rcx, [rbp+var_90]
__text:0000000100002A6E                 add     rcx, 1
__text:0000000100002A75                 mov     [rbp+var_88], rcx
__text:0000000100002A7C                 mov     rcx, [rbp+var_88]
__text:0000000100002A83                 mov     [rbp+var_80], rcx
__text:0000000100002A87                 mov     rcx, [rbp+var_80]
__text:0000000100002A8B                 mov     [rbp+var_2A0], rcx
__text:0000000100002A92
__text:0000000100002A92 loc_100002A92:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+348↑j
__text:0000000100002A92                 mov     rax, [rbp+var_2A0]
__text:0000000100002A99                 mov     [rbp+var_60], rax
__text:0000000100002A9D                 mov     rcx, [rbp+var_238]
__text:0000000100002AA4                 mov     rdx, [rbp+var_290]
__text:0000000100002AAB                 mov     [rbp+var_110], rdx
__text:0000000100002AB2                 mov     [rbp+var_118], rax
__text:0000000100002AB9                 mov     [rbp+var_120], rcx
__text:0000000100002AC0                 mov     rax, [rbp+var_110]
__text:0000000100002AC7                 mov     rsi, [rax]
__text:0000000100002ACA                 mov     rsi, [rsi+60h]
__text:0000000100002ACE                 mov     rdi, [rbp+var_118]
__text:0000000100002AD5                 mov     [rbp+var_2A8], rdi
__text:0000000100002ADC                 mov     rdi, rax
__text:0000000100002ADF                 mov     rax, [rbp+var_2A8]
__text:0000000100002AE6                 mov     [rbp+var_2B0], rsi
__text:0000000100002AED                 mov     rsi, rax
__text:0000000100002AF0                 mov     rdx, rcx
__text:0000000100002AF3                 mov     rcx, [rbp+var_2B0]
__text:0000000100002AFA                 call    rcx
__text:0000000100002AFC                 mov     [rbp+var_2B8], rax
__text:0000000100002B03                 jmp     $+5
__text:0000000100002B08 ; ---------------------------------------------------------------------------
__text:0000000100002B08
__text:0000000100002B08 loc_100002B08:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+413↑j
__text:0000000100002B08                 jmp     $+5
__text:0000000100002B0D ; ---------------------------------------------------------------------------
__text:0000000100002B0D
__text:0000000100002B0D loc_100002B0D:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_100002B08↑j
__text:0000000100002B0D                 mov     rax, [rbp+var_2B8]
__text:0000000100002B14                 cmp     rax, [rbp+var_238]
__text:0000000100002B1B                 jz      loc_100002BD6
__text:0000000100002B21                 lea     rax, [rbp+var_148]
__text:0000000100002B28                 mov     [rbp+var_138], rax
__text:0000000100002B2F                 mov     [rbp+var_140], 0FFFFFFFFFFFFFFFFh
__text:0000000100002B3A                 mov     rax, [rbp+var_138]
__text:0000000100002B41                 mov     rcx, [rbp+var_140]
__text:0000000100002B48                 mov     [rbp+var_128], rax
__text:0000000100002B4F                 mov     [rbp+var_130], rcx
__text:0000000100002B56                 mov     rax, [rbp+var_128]
__text:0000000100002B5D                 mov     qword ptr [rax], 0
__text:0000000100002B64                 mov     rax, [rbp+var_148]
__text:0000000100002B6B                 mov     [rbp+var_2C0], rax
__text:0000000100002B72                 lea     rax, [rbp+var_278]
__text:0000000100002B79                 mov     rcx, [rbp+var_2C0]
__text:0000000100002B80                 mov     [rbp+var_278], rcx
__text:0000000100002B87                 mov     [rbp+var_150], rax
__text:0000000100002B8E                 mov     [rbp+var_1F8], 0
__text:0000000100002B99                 mov     rax, [rbp+var_1F8]
__text:0000000100002BA0                 mov     [rbp+var_1F0], rax
__text:0000000100002BA7                 mov     [rbp+var_27C], 1
__text:0000000100002BB1                 jmp     loc_100002BE0
__text:0000000100002BB6 ; ---------------------------------------------------------------------------
__text:0000000100002BB6                 mov     ecx, edx
__text:0000000100002BB8                 mov     [rbp+var_268], rax
__text:0000000100002BBF                 mov     [rbp+var_26C], ecx
__text:0000000100002BC5                 lea     rdi, [rbp+var_260]
__text:0000000100002BCC                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::~basic_string()
__text:0000000100002BD1                 jmp     loc_100002C26
__text:0000000100002BD6 ; ---------------------------------------------------------------------------
__text:0000000100002BD6
__text:0000000100002BD6 loc_100002BD6:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+42B↑j
__text:0000000100002BD6                 mov     [rbp+var_27C], 0
__text:0000000100002BE0
__text:0000000100002BE0 loc_100002BE0:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+4C1↑j
__text:0000000100002BE0                 lea     rdi, [rbp+var_260]
__text:0000000100002BE7                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::~basic_string()
__text:0000000100002BEC                 mov     eax, [rbp+var_27C]
__text:0000000100002BF2                 mov     ecx, eax
__text:0000000100002BF4                 sub     ecx, 1
__text:0000000100002BF7                 mov     [rbp+var_2C4], eax
__text:0000000100002BFD                 mov     [rbp+var_2C8], ecx
__text:0000000100002C03                 jz      loc_100002D72
__text:0000000100002C09                 jmp     $+5
__text:0000000100002C0E ; ---------------------------------------------------------------------------
__text:0000000100002C0E
__text:0000000100002C0E loc_100002C0E:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+519↑j
__text:0000000100002C0E                 mov     eax, [rbp+var_2C4]
__text:0000000100002C14                 test    eax, eax
__text:0000000100002C16                 jnz     loc_100002D9E
__text:0000000100002C1C                 jmp     $+5
__text:0000000100002C21 ; ---------------------------------------------------------------------------
__text:0000000100002C21
__text:0000000100002C21 loc_100002C21:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+52C↑j
__text:0000000100002C21                 jmp     loc_100002C2B
__text:0000000100002C26 ; ---------------------------------------------------------------------------
__text:0000000100002C26
__text:0000000100002C26 loc_100002C26:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+4E1↑j
__text:0000000100002C26                 jmp     loc_100002D82
__text:0000000100002C2B ; ---------------------------------------------------------------------------
__text:0000000100002C2B
__text:0000000100002C2B loc_100002C2B:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+23C↑j
__text:0000000100002C2B                                         ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_100002C21↑j
__text:0000000100002C2B                 mov     rax, [rbp+var_210]
__text:0000000100002C32                 mov     rcx, [rbp+var_208]
__text:0000000100002C39                 sub     rax, rcx
__text:0000000100002C3C                 mov     [rbp+var_240], rax
__text:0000000100002C43                 cmp     [rbp+var_240], 0
__text:0000000100002C4E                 jle     loc_100002D2E
__text:0000000100002C54                 mov     rax, [rbp+var_1F8]
__text:0000000100002C5B                 mov     rcx, [rbp+var_208]
__text:0000000100002C62                 mov     rdx, [rbp+var_240]
__text:0000000100002C69                 mov     [rbp+var_160], rax
__text:0000000100002C70                 mov     [rbp+var_168], rcx
__text:0000000100002C77                 mov     [rbp+var_170], rdx
__text:0000000100002C7E                 mov     rax, [rbp+var_160]
__text:0000000100002C85                 mov     rcx, [rax]
__text:0000000100002C88                 mov     rcx, [rcx+60h]
__text:0000000100002C8C                 mov     rsi, [rbp+var_168]
__text:0000000100002C93                 mov     rdx, [rbp+var_170]
__text:0000000100002C9A                 mov     rdi, rax
__text:0000000100002C9D                 call    rcx
__text:0000000100002C9F                 cmp     rax, [rbp+var_240]
__text:0000000100002CA6                 jz      loc_100002D29
__text:0000000100002CAC                 lea     rax, [rbp+var_288]
__text:0000000100002CB3                 lea     rcx, [rbp+var_198]
__text:0000000100002CBA                 mov     [rbp+var_188], rcx
__text:0000000100002CC1                 mov     [rbp+var_190], 0FFFFFFFFFFFFFFFFh
__text:0000000100002CCC                 mov     rcx, [rbp+var_188]
__text:0000000100002CD3                 mov     rdx, [rbp+var_190]
__text:0000000100002CDA                 mov     [rbp+var_178], rcx
__text:0000000100002CE1                 mov     [rbp+var_180], rdx
__text:0000000100002CE8                 mov     rcx, [rbp+var_178]
__text:0000000100002CEF                 mov     qword ptr [rcx], 0
__text:0000000100002CF6                 mov     rcx, [rbp+var_198]
__text:0000000100002CFD                 mov     [rbp+var_288], rcx
__text:0000000100002D04                 mov     [rbp+var_1A0], rax
__text:0000000100002D0B                 mov     [rbp+var_1F8], 0
__text:0000000100002D16                 mov     rax, [rbp+var_1F8]
__text:0000000100002D1D                 mov     [rbp+var_1F0], rax
__text:0000000100002D24                 jmp     loc_100002D72
__text:0000000100002D29 ; ---------------------------------------------------------------------------
__text:0000000100002D29
__text:0000000100002D29 loc_100002D29:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+5B6↑j
__text:0000000100002D29                 jmp     $+5
__text:0000000100002D2E ; ---------------------------------------------------------------------------
__text:0000000100002D2E
__text:0000000100002D2E loc_100002D2E:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+55E↑j
__text:0000000100002D2E                                         ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_100002D29↑j
__text:0000000100002D2E                 mov     rax, [rbp+var_218]
__text:0000000100002D35                 mov     [rbp+var_1A8], rax
__text:0000000100002D3C                 mov     [rbp+var_1B0], 0
__text:0000000100002D47                 mov     rax, [rbp+var_1A8]
__text:0000000100002D4E                 mov     rcx, [rax+18h]
__text:0000000100002D52                 mov     [rbp+var_1B8], rcx
__text:0000000100002D59                 mov     rcx, [rbp+var_1B0]
__text:0000000100002D60                 mov     [rax+18h], rcx
__text:0000000100002D64                 mov     rax, [rbp+var_1F8]
__text:0000000100002D6B                 mov     [rbp+var_1F0], rax
__text:0000000100002D72
__text:0000000100002D72 loc_100002D72:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+B8↑j
__text:0000000100002D72                                         ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+227↑j ...
__text:0000000100002D72                 mov     rax, [rbp+var_1F0]
__text:0000000100002D79                 add     rsp, 2D0h
__text:0000000100002D80                 pop     rbp
__text:0000000100002D81                 retn
__text:0000000100002D82 ; ---------------------------------------------------------------------------
__text:0000000100002D82
__text:0000000100002D82 loc_100002D82:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_100002C26↑j
__text:0000000100002D82                 mov     rdi, [rbp+var_268]
__text:0000000100002D89                 call    __Unwind_Resume
__text:0000000100002D8E ; ---------------------------------------------------------------------------
__text:0000000100002D8E                 mov     ecx, edx
__text:0000000100002D90                 mov     rdi, rax
__text:0000000100002D93                 mov     [rbp+var_2CC], ecx
__text:0000000100002D99                 call    ___clang_call_terminate
__text:0000000100002D9E ; ---------------------------------------------------------------------------
__text:0000000100002D9E
__text:0000000100002D9E loc_100002D9E:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+526↑j
__text:0000000100002D9E                 xchg    ax, ax
__text:0000000100002D9E __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ endp ; sp-analysis failed
__text:0000000100002D9E
__text:0000000100002DA0
__text:0000000100002DA0 ; =============== S U B R O U T I N E =======================================
__text:0000000100002DA0
__text:0000000100002DA0 ; Attributes: bp-based frame
__text:0000000100002DA0
__text:0000000100002DA0 ; void std::__1::vector<int, std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)
__text:0000000100002DA0 __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_ proc near
__text:0000000100002DA0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT__ptr↓o
__text:0000000100002DA0
__text:0000000100002DA0 var_168         = qword ptr -168h
__text:0000000100002DA0 var_160         = qword ptr -160h
__text:0000000100002DA0 var_158         = qword ptr -158h
__text:0000000100002DA0 var_150         = qword ptr -150h
__text:0000000100002DA0 var_148         = qword ptr -148h
__text:0000000100002DA0 var_130         = byte ptr -130h
__text:0000000100002DA0 var_120         = qword ptr -120h
__text:0000000100002DA0 var_108         = qword ptr -108h
__text:0000000100002DA0 var_100         = qword ptr -100h
__text:0000000100002DA0 var_F8          = qword ptr -0F8h
__text:0000000100002DA0 var_F0          = qword ptr -0F0h
__text:0000000100002DA0 var_E8          = qword ptr -0E8h
__text:0000000100002DA0 var_E0          = qword ptr -0E0h
__text:0000000100002DA0 var_D8          = qword ptr -0D8h
__text:0000000100002DA0 var_D0          = qword ptr -0D0h
__text:0000000100002DA0 var_C8          = qword ptr -0C8h
__text:0000000100002DA0 var_C0          = qword ptr -0C0h
__text:0000000100002DA0 var_B8          = qword ptr -0B8h
__text:0000000100002DA0 var_B0          = qword ptr -0B0h
__text:0000000100002DA0 var_A8          = qword ptr -0A8h
__text:0000000100002DA0 var_A0          = qword ptr -0A0h
__text:0000000100002DA0 var_98          = qword ptr -98h
__text:0000000100002DA0 var_90          = qword ptr -90h
__text:0000000100002DA0 var_88          = qword ptr -88h
__text:0000000100002DA0 var_80          = qword ptr -80h
__text:0000000100002DA0 var_70          = qword ptr -70h
__text:0000000100002DA0 var_68          = qword ptr -68h
__text:0000000100002DA0 var_60          = byte ptr -60h
__text:0000000100002DA0 var_58          = qword ptr -58h
__text:0000000100002DA0 var_50          = qword ptr -50h
__text:0000000100002DA0 var_48          = qword ptr -48h
__text:0000000100002DA0 var_40          = qword ptr -40h
__text:0000000100002DA0 var_38          = qword ptr -38h
__text:0000000100002DA0 var_30          = qword ptr -30h
__text:0000000100002DA0 var_28          = qword ptr -28h
__text:0000000100002DA0 var_20          = qword ptr -20h
__text:0000000100002DA0 var_18          = qword ptr -18h
__text:0000000100002DA0 var_10          = qword ptr -10h
__text:0000000100002DA0 var_8           = qword ptr -8
__text:0000000100002DA0
__text:0000000100002DA0                 push    rbp
__text:0000000100002DA1                 mov     rbp, rsp
__text:0000000100002DA4                 sub     rsp, 170h
__text:0000000100002DAB                 mov     [rbp+var_F8], rdi
__text:0000000100002DB2                 mov     [rbp+var_100], rsi
__text:0000000100002DB9                 mov     rsi, [rbp+var_F8]
__text:0000000100002DC0                 mov     rdi, rsi
__text:0000000100002DC3                 mov     [rbp+var_F0], rdi
__text:0000000100002DCA                 mov     rdi, [rbp+var_F0]
__text:0000000100002DD1                 add     rdi, 10h
__text:0000000100002DD8                 mov     [rbp+var_E8], rdi
__text:0000000100002DDF                 mov     rdi, [rbp+var_E8]
__text:0000000100002DE6                 mov     [rbp+var_E0], rdi
__text:0000000100002DED                 mov     rdi, [rbp+var_E0]
__text:0000000100002DF4                 mov     [rbp+var_108], rdi
__text:0000000100002DFB                 mov     [rbp+var_D8], rsi
__text:0000000100002E02                 mov     rdi, [rbp+var_D8]
__text:0000000100002E09                 mov     rax, [rdi+8]
__text:0000000100002E0D                 mov     rdi, [rdi]
__text:0000000100002E10                 sub     rax, rdi
__text:0000000100002E13                 sar     rax, 2
__text:0000000100002E17                 add     rax, 1
__text:0000000100002E1D                 mov     [rbp+var_B0], rsi
__text:0000000100002E24                 mov     [rbp+var_B8], rax
__text:0000000100002E2B                 mov     rax, [rbp+var_B0]
__text:0000000100002E32                 mov     rdi, rax
__text:0000000100002E35                 mov     [rbp+var_148], rsi
__text:0000000100002E3C                 mov     [rbp+var_150], rax
__text:0000000100002E43                 call    j___ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv ; std::__1::vector<int,std::__1::allocator<int>>::max_size(void)
__text:0000000100002E48                 mov     [rbp+var_C0], rax
__text:0000000100002E4F                 mov     rax, [rbp+var_B8]
__text:0000000100002E56                 cmp     rax, [rbp+var_C0]
__text:0000000100002E5D                 jbe     loc_100002E72
__text:0000000100002E63                 mov     rax, [rbp+var_150]
__text:0000000100002E6A                 mov     rdi, rax
__text:0000000100002E6D                 call    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
__text:0000000100002E72
__text:0000000100002E72 loc_100002E72:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+BD↑j
__text:0000000100002E72                 mov     rax, [rbp+var_150]
__text:0000000100002E79                 mov     [rbp+var_A0], rax
__text:0000000100002E80                 mov     rcx, [rbp+var_A0]
__text:0000000100002E87                 mov     [rbp+var_98], rcx
__text:0000000100002E8E                 mov     rcx, [rbp+var_98]
__text:0000000100002E95                 mov     [rbp+var_90], rcx
__text:0000000100002E9C                 mov     rdx, [rbp+var_90]
__text:0000000100002EA3                 add     rdx, 10h
__text:0000000100002EAA                 mov     [rbp+var_88], rdx
__text:0000000100002EB1                 mov     rdx, [rbp+var_88]
__text:0000000100002EB8                 mov     [rbp+var_80], rdx
__text:0000000100002EBC                 mov     rdx, [rbp+var_80]
__text:0000000100002EC0                 mov     rdx, [rdx]
__text:0000000100002EC3                 mov     rcx, [rcx]
__text:0000000100002EC6                 sub     rdx, rcx
__text:0000000100002EC9                 sar     rdx, 2
__text:0000000100002ECD                 mov     [rbp+var_C8], rdx
__text:0000000100002ED4                 mov     rcx, [rbp+var_C8]
__text:0000000100002EDB                 mov     rdx, [rbp+var_C0]
__text:0000000100002EE2                 shr     rdx, 1
__text:0000000100002EE6                 cmp     rcx, rdx
__text:0000000100002EE9                 jb      loc_100002F02
__text:0000000100002EEF                 mov     rax, [rbp+var_C0]
__text:0000000100002EF6                 mov     [rbp+var_A8], rax
__text:0000000100002EFD                 jmp     loc_100002F92
__text:0000000100002F02 ; ---------------------------------------------------------------------------
__text:0000000100002F02
__text:0000000100002F02 loc_100002F02:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+149↑j
__text:0000000100002F02                 lea     rax, [rbp+var_60]
__text:0000000100002F06                 lea     rcx, [rbp+var_B8]
__text:0000000100002F0D                 lea     rdx, [rbp+var_D0]
__text:0000000100002F14                 mov     rsi, [rbp+var_C8]
__text:0000000100002F1B                 shl     rsi, 1
__text:0000000100002F1F                 mov     [rbp+var_D0], rsi
__text:0000000100002F26                 mov     [rbp+var_68], rdx
__text:0000000100002F2A                 mov     [rbp+var_70], rcx
__text:0000000100002F2E                 mov     rcx, [rbp+var_68]
__text:0000000100002F32                 mov     rdx, [rbp+var_70]
__text:0000000100002F36                 mov     [rbp+var_50], rcx
__text:0000000100002F3A                 mov     [rbp+var_58], rdx
__text:0000000100002F3E                 mov     rcx, [rbp+var_50]
__text:0000000100002F42                 mov     rdx, [rbp+var_58]
__text:0000000100002F46                 mov     [rbp+var_38], rax
__text:0000000100002F4A                 mov     [rbp+var_40], rcx
__text:0000000100002F4E                 mov     [rbp+var_48], rdx
__text:0000000100002F52                 mov     rax, [rbp+var_40]
__text:0000000100002F56                 mov     rax, [rax]
__text:0000000100002F59                 mov     rcx, [rbp+var_48]
__text:0000000100002F5D                 cmp     rax, [rcx]
__text:0000000100002F60                 jnb     loc_100002F76
__text:0000000100002F66                 mov     rax, [rbp+var_58]
__text:0000000100002F6A                 mov     [rbp+var_158], rax
__text:0000000100002F71                 jmp     loc_100002F81
__text:0000000100002F76 ; ---------------------------------------------------------------------------
__text:0000000100002F76
__text:0000000100002F76 loc_100002F76:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+1C0↑j
__text:0000000100002F76                 mov     rax, [rbp+var_50]
__text:0000000100002F7A                 mov     [rbp+var_158], rax
__text:0000000100002F81
__text:0000000100002F81 loc_100002F81:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+1D1↑j
__text:0000000100002F81                 mov     rax, [rbp+var_158]
__text:0000000100002F88                 mov     rax, [rax]
__text:0000000100002F8B                 mov     [rbp+var_A8], rax
__text:0000000100002F92
__text:0000000100002F92 loc_100002F92:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+15D↑j
__text:0000000100002F92                 lea     rdi, [rbp+var_130]
__text:0000000100002F99                 mov     rsi, [rbp+var_A8]
__text:0000000100002FA0                 mov     rax, [rbp+var_148]
__text:0000000100002FA7                 mov     [rbp+var_30], rax
__text:0000000100002FAB                 mov     rcx, [rbp+var_30]
__text:0000000100002FAF                 mov     rdx, [rcx+8]
__text:0000000100002FB3                 mov     rcx, [rcx]
__text:0000000100002FB6                 sub     rdx, rcx
__text:0000000100002FB9                 sar     rdx, 2
__text:0000000100002FBD                 mov     rcx, [rbp+var_108]
__text:0000000100002FC4                 call    j___ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC1EmmS3_ ; std::__1::__split_buffer<int,std::__1::allocator<int> &>::__split_buffer(ulong,ulong,std::__1::allocator<int> &)
__text:0000000100002FC9                 mov     rax, [rbp+var_108]
__text:0000000100002FD0                 mov     rcx, [rbp+var_120]
__text:0000000100002FD7                 mov     [rbp+var_28], rcx
__text:0000000100002FDB                 mov     rcx, [rbp+var_28]
__text:0000000100002FDF                 mov     rdx, [rbp+var_100]
__text:0000000100002FE6                 mov     [rbp+var_20], rdx
__text:0000000100002FEA                 mov     rdx, [rbp+var_20]
__text:0000000100002FEE                 mov     [rbp+var_8], rax
__text:0000000100002FF2                 mov     [rbp+var_10], rcx
__text:0000000100002FF6                 mov     [rbp+var_18], rdx
__text:0000000100002FFA                 mov     rax, [rbp+var_10]
__text:0000000100002FFE                 cmp     rax, 0
__text:0000000100003004                 mov     [rbp+var_160], rax
__text:000000010000300B                 jz      loc_10000302E
__text:0000000100003011                 mov     rax, [rbp+var_160]
__text:0000000100003018                 mov     rcx, [rbp+var_18]
__text:000000010000301C                 mov     edx, [rcx]
__text:000000010000301E                 mov     rcx, [rbp+var_160]
__text:0000000100003025                 mov     [rcx], edx
__text:0000000100003027                 mov     [rbp+var_168], rax
__text:000000010000302E
__text:000000010000302E loc_10000302E:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+26B↑j
__text:000000010000302E                 mov     rax, [rbp+var_120]
__text:0000000100003035                 add     rax, 4
__text:0000000100003039                 mov     [rbp+var_120], rax
__text:0000000100003040                 lea     rsi, [rbp+var_130]
__text:0000000100003047                 mov     rdi, [rbp+var_148]
__text:000000010000304E                 call    j___ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE ; std::__1::vector<int,std::__1::allocator<int>>::__swap_out_circular_buffer(std::__1::__split_buffer<int,std::__1::allocator<int>&> &)
__text:0000000100003053                 jmp     $+5
__text:0000000100003058 ; ---------------------------------------------------------------------------
__text:0000000100003058
__text:0000000100003058 loc_100003058:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+2B3↑j
__text:0000000100003058                 lea     rdi, [rbp+var_130]
__text:000000010000305F                 call    j___ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev ; std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()
__text:0000000100003064                 add     rsp, 170h
__text:000000010000306B                 pop     rbp
__text:000000010000306C                 retn
__text:000000010000306C __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_ endp
__text:000000010000306C
__text:000000010000306D ; ---------------------------------------------------------------------------
__text:000000010000306D                 mov     ecx, edx
__text:000000010000306F                 mov     [rbp-138h], rax
__text:0000000100003076                 mov     [rbp-13Ch], ecx
__text:000000010000307C                 lea     rdi, [rbp-130h]
__text:0000000100003083                 call    j___ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev ; std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()
__text:0000000100003088                 jmp     $+5
__text:000000010000308D ; ---------------------------------------------------------------------------
__text:000000010000308D
__text:000000010000308D loc_10000308D:                          ; CODE XREF: __text:0000000100003088↑j
__text:000000010000308D                 jmp     $+5
__text:0000000100003092 ; ---------------------------------------------------------------------------
__text:0000000100003092
__text:0000000100003092 loc_100003092:                          ; CODE XREF: __text:loc_10000308D↑j
__text:0000000100003092                 mov     rdi, [rbp-138h]
__text:0000000100003099                 call    __Unwind_Resume
__text:000000010000309E ; ---------------------------------------------------------------------------
__text:000000010000309E                 mov     ecx, edx
__text:00000001000030A0                 mov     rdi, rax
__text:00000001000030A3                 mov     [rbp-16Ch], ecx
__text:00000001000030A9                 call    ___clang_call_terminate
__text:00000001000030A9 ; ---------------------------------------------------------------------------
__text:00000001000030AE                 align 10h
__text:00000001000030B0
__text:00000001000030B0 ; =============== S U B R O U T I N E =======================================
__text:00000001000030B0
__text:00000001000030B0 ; Attributes: bp-based frame
__text:00000001000030B0
__text:00000001000030B0 ; std::__1::__split_buffer<int, std::__1::allocator<int> &>::__split_buffer(unsigned long, unsigned long, std::__1::allocator<int> &)
__text:00000001000030B0 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC1EmmS3_ proc near
__text:00000001000030B0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC1EmmS3__ptr↓o
__text:00000001000030B0
__text:00000001000030B0 var_20          = qword ptr -20h
__text:00000001000030B0 var_18          = qword ptr -18h
__text:00000001000030B0 var_10          = qword ptr -10h
__text:00000001000030B0 var_8           = qword ptr -8
__text:00000001000030B0
__text:00000001000030B0                 push    rbp
__text:00000001000030B1                 mov     rbp, rsp
__text:00000001000030B4                 sub     rsp, 20h
__text:00000001000030B8                 mov     [rbp+var_8], rdi
__text:00000001000030BC                 mov     [rbp+var_10], rsi
__text:00000001000030C0                 mov     [rbp+var_18], rdx
__text:00000001000030C4                 mov     [rbp+var_20], rcx
__text:00000001000030C8                 mov     rdi, [rbp+var_8]
__text:00000001000030CC                 mov     rsi, [rbp+var_10]
__text:00000001000030D0                 mov     rdx, [rbp+var_18]
__text:00000001000030D4                 mov     rcx, [rbp+var_20]
__text:00000001000030D8                 call    j___ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_ ; std::__1::__split_buffer<int,std::__1::allocator<int> &>::__split_buffer(ulong,ulong,std::__1::allocator<int> &)
__text:00000001000030DD                 add     rsp, 20h
__text:00000001000030E1                 pop     rbp
__text:00000001000030E2                 retn
__text:00000001000030E2 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC1EmmS3_ endp
__text:00000001000030E2
__text:00000001000030E2 ; ---------------------------------------------------------------------------
__text:00000001000030E3                 align 10h
__text:00000001000030F0
__text:00000001000030F0 ; =============== S U B R O U T I N E =======================================
__text:00000001000030F0
__text:00000001000030F0 ; Attributes: bp-based frame
__text:00000001000030F0
__text:00000001000030F0 ; std::__1::vector<int, std::__1::allocator<int>>::__swap_out_circular_buffer(std::__1::__split_buffer<int, std::__1::allocator<int>&> &)
__text:00000001000030F0 __ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE proc near
__text:00000001000030F0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE_ptr↓o
__text:00000001000030F0
__text:00000001000030F0 var_138         = qword ptr -138h
__text:00000001000030F0 var_130         = qword ptr -130h
__text:00000001000030F0 var_128         = qword ptr -128h
__text:00000001000030F0 var_120         = qword ptr -120h
__text:00000001000030F0 var_118         = qword ptr -118h
__text:00000001000030F0 var_110         = qword ptr -110h
__text:00000001000030F0 var_108         = qword ptr -108h
__text:00000001000030F0 var_100         = qword ptr -100h
__text:00000001000030F0 var_F8          = qword ptr -0F8h
__text:00000001000030F0 var_F0          = qword ptr -0F0h
__text:00000001000030F0 var_E8          = qword ptr -0E8h
__text:00000001000030F0 var_E0          = qword ptr -0E0h
__text:00000001000030F0 var_D8          = qword ptr -0D8h
__text:00000001000030F0 var_D0          = qword ptr -0D0h
__text:00000001000030F0 var_C8          = qword ptr -0C8h
__text:00000001000030F0 var_C0          = qword ptr -0C0h
__text:00000001000030F0 var_B8          = qword ptr -0B8h
__text:00000001000030F0 var_B0          = qword ptr -0B0h
__text:00000001000030F0 var_A8          = qword ptr -0A8h
__text:00000001000030F0 var_A0          = qword ptr -0A0h
__text:00000001000030F0 var_98          = qword ptr -98h
__text:00000001000030F0 var_90          = qword ptr -90h
__text:00000001000030F0 var_88          = qword ptr -88h
__text:00000001000030F0 var_80          = qword ptr -80h
__text:00000001000030F0 var_78          = qword ptr -78h
__text:00000001000030F0 var_70          = qword ptr -70h
__text:00000001000030F0 var_68          = qword ptr -68h
__text:00000001000030F0 var_60          = qword ptr -60h
__text:00000001000030F0 var_58          = qword ptr -58h
__text:00000001000030F0 var_50          = qword ptr -50h
__text:00000001000030F0 var_48          = qword ptr -48h
__text:00000001000030F0 var_40          = qword ptr -40h
__text:00000001000030F0 var_38          = qword ptr -38h
__text:00000001000030F0 var_30          = qword ptr -30h
__text:00000001000030F0 var_28          = qword ptr -28h
__text:00000001000030F0 var_20          = qword ptr -20h
__text:00000001000030F0 var_18          = qword ptr -18h
__text:00000001000030F0 var_10          = qword ptr -10h
__text:00000001000030F0 var_8           = qword ptr -8
__text:00000001000030F0
__text:00000001000030F0                 push    rbp
__text:00000001000030F1                 mov     rbp, rsp
__text:00000001000030F4                 sub     rsp, 140h
__text:00000001000030FB                 lea     rax, [rbp+var_E8]
__text:0000000100003102                 lea     rcx, [rbp+var_88]
__text:0000000100003109                 lea     rdx, [rbp+var_58]
__text:000000010000310D                 mov     r8, 0
__text:0000000100003117                 mov     [rbp+var_110], rdi
__text:000000010000311E                 mov     [rbp+var_118], rsi
__text:0000000100003125                 mov     rsi, [rbp+var_110]
__text:000000010000312C                 mov     rdi, rsi
__text:000000010000312F                 mov     [rbp+var_108], rdi
__text:0000000100003136                 mov     rdi, [rbp+var_108]
__text:000000010000313D                 add     rdi, 10h
__text:0000000100003144                 mov     [rbp+var_100], rdi
__text:000000010000314B                 mov     rdi, [rbp+var_100]
__text:0000000100003152                 mov     [rbp+var_F8], rdi
__text:0000000100003159                 mov     rdi, [rbp+var_F8]
__text:0000000100003160                 mov     r9, [rsi]
__text:0000000100003163                 mov     r10, [rsi+8]
__text:0000000100003167                 mov     r11, [rbp+var_118]
__text:000000010000316E                 add     r11, 8
__text:0000000100003175                 mov     [rbp+var_8], rdi
__text:0000000100003179                 mov     [rbp+var_10], r9
__text:000000010000317D                 mov     [rbp+var_18], r10
__text:0000000100003181                 mov     [rbp+var_20], r11
__text:0000000100003185                 mov     rdi, [rbp+var_18]
__text:0000000100003189                 mov     r9, [rbp+var_10]
__text:000000010000318D                 sub     rdi, r9
__text:0000000100003190                 sar     rdi, 2
__text:0000000100003194                 mov     [rbp+var_28], rdi
__text:0000000100003198                 mov     rdi, [rbp+var_28]
__text:000000010000319C                 mov     r9, [rbp+var_20]
__text:00000001000031A0                 mov     r10, [r9]
__text:00000001000031A3                 sub     r8, rdi
__text:00000001000031A6                 shl     r8, 2
__text:00000001000031AA                 add     r10, r8
__text:00000001000031AD                 mov     [r9], r10
__text:00000001000031B0                 mov     rdi, [rbp+var_20]
__text:00000001000031B4                 mov     rdi, [rdi]      ; void *
__text:00000001000031B7                 mov     r8, [rbp+var_10]
__text:00000001000031BB                 mov     r9, [rbp+var_28]
__text:00000001000031BF                 shl     r9, 2
__text:00000001000031C3                 mov     [rbp+var_120], rsi
__text:00000001000031CA                 mov     rsi, r8         ; void *
__text:00000001000031CD                 mov     [rbp+var_128], rdx
__text:00000001000031D4                 mov     rdx, r9         ; size_t
__text:00000001000031D7                 mov     [rbp+var_130], rcx
__text:00000001000031DE                 mov     [rbp+var_138], rax
__text:00000001000031E5                 call    _memcpy
__text:00000001000031EA                 mov     rax, [rbp+var_120]
__text:00000001000031F1                 mov     rcx, [rbp+var_118]
__text:00000001000031F8                 add     rcx, 8
__text:00000001000031FF                 mov     [rbp+var_48], rax
__text:0000000100003203                 mov     [rbp+var_50], rcx
__text:0000000100003207                 mov     rax, [rbp+var_48]
__text:000000010000320B                 mov     [rbp+var_40], rax
__text:000000010000320F                 mov     rax, [rbp+var_40]
__text:0000000100003213                 mov     rax, [rax]
__text:0000000100003216                 mov     [rbp+var_58], rax
__text:000000010000321A                 mov     rax, [rbp+var_50]
__text:000000010000321E                 mov     [rbp+var_30], rax
__text:0000000100003222                 mov     rax, [rbp+var_30]
__text:0000000100003226                 mov     rax, [rax]
__text:0000000100003229                 mov     rcx, [rbp+var_48]
__text:000000010000322D                 mov     [rcx], rax
__text:0000000100003230                 mov     rax, [rbp+var_128]
__text:0000000100003237                 mov     [rbp+var_38], rax
__text:000000010000323B                 mov     rcx, [rbp+var_38]
__text:000000010000323F                 mov     rcx, [rcx]
__text:0000000100003242                 mov     rdx, [rbp+var_50]
__text:0000000100003246                 mov     [rdx], rcx
__text:0000000100003249                 mov     rcx, [rbp+var_120]
__text:0000000100003250                 add     rcx, 8
__text:0000000100003257                 mov     rdx, [rbp+var_118]
__text:000000010000325E                 add     rdx, 10h
__text:0000000100003265                 mov     [rbp+var_78], rcx
__text:0000000100003269                 mov     [rbp+var_80], rdx
__text:000000010000326D                 mov     rcx, [rbp+var_78]
__text:0000000100003271                 mov     [rbp+var_70], rcx
__text:0000000100003275                 mov     rcx, [rbp+var_70]
__text:0000000100003279                 mov     rcx, [rcx]
__text:000000010000327C                 mov     [rbp+var_88], rcx
__text:0000000100003283                 mov     rcx, [rbp+var_80]
__text:0000000100003287                 mov     [rbp+var_60], rcx
__text:000000010000328B                 mov     rcx, [rbp+var_60]
__text:000000010000328F                 mov     rcx, [rcx]
__text:0000000100003292                 mov     rdx, [rbp+var_78]
__text:0000000100003296                 mov     [rdx], rcx
__text:0000000100003299                 mov     rcx, [rbp+var_130]
__text:00000001000032A0                 mov     [rbp+var_68], rcx
__text:00000001000032A4                 mov     rdx, [rbp+var_68]
__text:00000001000032A8                 mov     rdx, [rdx]
__text:00000001000032AB                 mov     rsi, [rbp+var_80]
__text:00000001000032AF                 mov     [rsi], rdx
__text:00000001000032B2                 mov     rdx, [rbp+var_120]
__text:00000001000032B9                 mov     [rbp+var_A0], rdx
__text:00000001000032C0                 mov     rdx, [rbp+var_A0]
__text:00000001000032C7                 add     rdx, 10h
__text:00000001000032CE                 mov     [rbp+var_98], rdx
__text:00000001000032D5                 mov     rdx, [rbp+var_98]
__text:00000001000032DC                 mov     [rbp+var_90], rdx
__text:00000001000032E3                 mov     rdx, [rbp+var_90]
__text:00000001000032EA                 mov     rsi, [rbp+var_118]
__text:00000001000032F1                 mov     [rbp+var_B8], rsi
__text:00000001000032F8                 mov     rsi, [rbp+var_B8]
__text:00000001000032FF                 add     rsi, 18h
__text:0000000100003306                 mov     [rbp+var_B0], rsi
__text:000000010000330D                 mov     rsi, [rbp+var_B0]
__text:0000000100003314                 mov     [rbp+var_A8], rsi
__text:000000010000331B                 mov     rsi, [rbp+var_A8]
__text:0000000100003322                 mov     [rbp+var_D8], rdx
__text:0000000100003329                 mov     [rbp+var_E0], rsi
__text:0000000100003330                 mov     rdx, [rbp+var_D8]
__text:0000000100003337                 mov     [rbp+var_D0], rdx
__text:000000010000333E                 mov     rdx, [rbp+var_D0]
__text:0000000100003345                 mov     rdx, [rdx]
__text:0000000100003348                 mov     [rbp+var_E8], rdx
__text:000000010000334F                 mov     rdx, [rbp+var_E0]
__text:0000000100003356                 mov     [rbp+var_C0], rdx
__text:000000010000335D                 mov     rdx, [rbp+var_C0]
__text:0000000100003364                 mov     rdx, [rdx]
__text:0000000100003367                 mov     rsi, [rbp+var_D8]
__text:000000010000336E                 mov     [rsi], rdx
__text:0000000100003371                 mov     rdx, [rbp+var_138]
__text:0000000100003378                 mov     [rbp+var_C8], rdx
__text:000000010000337F                 mov     rsi, [rbp+var_C8]
__text:0000000100003386                 mov     rsi, [rsi]
__text:0000000100003389                 mov     rdi, [rbp+var_E0]
__text:0000000100003390                 mov     [rdi], rsi
__text:0000000100003393                 mov     rsi, [rbp+var_118]
__text:000000010000339A                 mov     rsi, [rsi+8]
__text:000000010000339E                 mov     rdi, [rbp+var_118]
__text:00000001000033A5                 mov     [rdi], rsi
__text:00000001000033A8                 mov     rsi, [rbp+var_120]
__text:00000001000033AF                 mov     [rbp+var_F0], rsi
__text:00000001000033B6                 add     rsp, 140h
__text:00000001000033BD                 pop     rbp
__text:00000001000033BE                 retn
__text:00000001000033BE __ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE endp
__text:00000001000033BE
__text:00000001000033BE ; ---------------------------------------------------------------------------
__text:00000001000033BF                 align 20h
__text:00000001000033C0
__text:00000001000033C0 ; =============== S U B R O U T I N E =======================================
__text:00000001000033C0
__text:00000001000033C0 ; Attributes: bp-based frame
__text:00000001000033C0
__text:00000001000033C0 ; std::__1::__split_buffer<int, std::__1::allocator<int> &>::~__split_buffer()
__text:00000001000033C0 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev proc near
__text:00000001000033C0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev_ptr↓o
__text:00000001000033C0
__text:00000001000033C0 var_8           = qword ptr -8
__text:00000001000033C0
__text:00000001000033C0                 push    rbp
__text:00000001000033C1                 mov     rbp, rsp
__text:00000001000033C4                 sub     rsp, 10h
__text:00000001000033C8                 mov     [rbp+var_8], rdi
__text:00000001000033CC                 mov     rdi, [rbp+var_8]
__text:00000001000033D0                 call    j___ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev ; std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()
__text:00000001000033D5                 add     rsp, 10h
__text:00000001000033D9                 pop     rbp
__text:00000001000033DA                 retn
__text:00000001000033DA __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev endp
__text:00000001000033DA
__text:00000001000033DA ; ---------------------------------------------------------------------------
__text:00000001000033DB                 align 20h
__text:00000001000033E0
__text:00000001000033E0 ; =============== S U B R O U T I N E =======================================
__text:00000001000033E0
__text:00000001000033E0 ; Attributes: bp-based frame
__text:00000001000033E0
__text:00000001000033E0 ; std::__1::__split_buffer<int, std::__1::allocator<int> &>::~__split_buffer()
__text:00000001000033E0 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev proc near
__text:00000001000033E0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev_ptr↓o
__text:00000001000033E0
__text:00000001000033E0 var_118         = qword ptr -118h
__text:00000001000033E0 var_110         = qword ptr -110h
__text:00000001000033E0 var_108         = qword ptr -108h
__text:00000001000033E0 var_100         = qword ptr -100h
__text:00000001000033E0 var_F0          = qword ptr -0F0h
__text:00000001000033E0 var_E8          = qword ptr -0E8h
__text:00000001000033E0 var_C8          = qword ptr -0C8h
__text:00000001000033E0 var_C0          = qword ptr -0C0h
__text:00000001000033E0 var_B8          = qword ptr -0B8h
__text:00000001000033E0 var_B0          = qword ptr -0B0h
__text:00000001000033E0 var_A8          = qword ptr -0A8h
__text:00000001000033E0 var_90          = qword ptr -90h
__text:00000001000033E0 var_88          = qword ptr -88h
__text:00000001000033E0 var_80          = qword ptr -80h
__text:00000001000033E0 var_78          = qword ptr -78h
__text:00000001000033E0 var_70          = qword ptr -70h
__text:00000001000033E0 var_68          = qword ptr -68h
__text:00000001000033E0 var_60          = qword ptr -60h
__text:00000001000033E0 var_58          = qword ptr -58h
__text:00000001000033E0 var_50          = qword ptr -50h
__text:00000001000033E0 var_48          = qword ptr -48h
__text:00000001000033E0 var_40          = qword ptr -40h
__text:00000001000033E0 var_38          = qword ptr -38h
__text:00000001000033E0 var_30          = qword ptr -30h
__text:00000001000033E0 var_28          = qword ptr -28h
__text:00000001000033E0 var_20          = qword ptr -20h
__text:00000001000033E0 var_18          = qword ptr -18h
__text:00000001000033E0 var_10          = qword ptr -10h
__text:00000001000033E0 var_8           = qword ptr -8
__text:00000001000033E0
__text:00000001000033E0                 push    rbp
__text:00000001000033E1                 mov     rbp, rsp
__text:00000001000033E4                 sub     rsp, 120h
__text:00000001000033EB                 mov     [rbp+var_108], rdi
__text:00000001000033F2                 mov     rdi, [rbp+var_108]
__text:00000001000033F9                 mov     [rbp+var_100], rdi
__text:0000000100003400                 mov     rax, [rbp+var_100]
__text:0000000100003407                 mov     rcx, [rax+8]
__text:000000010000340B                 mov     [rbp+var_E8], rax
__text:0000000100003412                 mov     [rbp+var_F0], rcx
__text:0000000100003419                 mov     rax, [rbp+var_E8]
__text:0000000100003420                 mov     rcx, [rbp+var_F0]
__text:0000000100003427                 mov     [rbp+var_C0], rax
__text:000000010000342E                 mov     [rbp+var_C8], rcx
__text:0000000100003435                 mov     rax, [rbp+var_C0]
__text:000000010000343C                 mov     [rbp+var_110], rdi
__text:0000000100003443                 mov     [rbp+var_118], rax
__text:000000010000344A
__text:000000010000344A loc_10000344A:                          ; CODE XREF: std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()+F9↓j
__text:000000010000344A                 mov     rax, [rbp+var_C8]
__text:0000000100003451                 mov     rcx, [rbp+var_118]
__text:0000000100003458                 cmp     rax, [rcx+10h]
__text:000000010000345C                 jz      loc_1000034DE
__text:0000000100003462                 mov     rax, [rbp+var_118]
__text:0000000100003469                 mov     [rbp+var_B8], rax
__text:0000000100003470                 mov     rcx, [rbp+var_B8]
__text:0000000100003477                 add     rcx, 18h
__text:000000010000347E                 mov     [rbp+var_B0], rcx
__text:0000000100003485                 mov     rcx, [rbp+var_B0]
__text:000000010000348C                 mov     [rbp+var_A8], rcx
__text:0000000100003493                 mov     rcx, [rbp+var_A8]
__text:000000010000349A                 mov     rcx, [rcx+8]
__text:000000010000349E                 mov     rdx, [rax+10h]
__text:00000001000034A2                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:00000001000034A9                 mov     [rax+10h], rdx
__text:00000001000034AD                 mov     [rbp+var_70], rdx
__text:00000001000034B1                 mov     rdx, [rbp+var_70]
__text:00000001000034B5                 mov     [rbp+var_88], rcx
__text:00000001000034BC                 mov     [rbp+var_90], rdx
__text:00000001000034C3                 mov     rcx, [rbp+var_88]
__text:00000001000034CA                 mov     rdx, [rbp+var_90]
__text:00000001000034D1                 mov     [rbp+var_78], rcx
__text:00000001000034D5                 mov     [rbp+var_80], rdx
__text:00000001000034D9                 jmp     loc_10000344A
__text:00000001000034DE ; ---------------------------------------------------------------------------
__text:00000001000034DE
__text:00000001000034DE loc_1000034DE:                          ; CODE XREF: std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()+7C↑j
__text:00000001000034DE                 mov     rax, [rbp+var_110]
__text:00000001000034E5                 cmp     qword ptr [rax], 0
__text:00000001000034EC                 jz      loc_100003583
__text:00000001000034F2                 mov     rax, [rbp+var_110]
__text:00000001000034F9                 mov     [rbp+var_38], rax
__text:00000001000034FD                 mov     rcx, [rbp+var_38]
__text:0000000100003501                 add     rcx, 18h
__text:0000000100003508                 mov     [rbp+var_30], rcx
__text:000000010000350C                 mov     rcx, [rbp+var_30]
__text:0000000100003510                 mov     [rbp+var_28], rcx
__text:0000000100003514                 mov     rcx, [rbp+var_28]
__text:0000000100003518                 mov     rcx, [rcx+8]
__text:000000010000351C                 mov     rdx, [rax]
__text:000000010000351F                 mov     [rbp+var_20], rax
__text:0000000100003523                 mov     rsi, [rbp+var_20]
__text:0000000100003527                 mov     [rbp+var_18], rsi
__text:000000010000352B                 mov     rdi, [rbp+var_18]
__text:000000010000352F                 add     rdi, 18h
__text:0000000100003536                 mov     [rbp+var_10], rdi
__text:000000010000353A                 mov     rdi, [rbp+var_10]
__text:000000010000353E                 mov     [rbp+var_8], rdi
__text:0000000100003542                 mov     rdi, [rbp+var_8]
__text:0000000100003546                 mov     rdi, [rdi]
__text:0000000100003549                 mov     rsi, [rsi]
__text:000000010000354C                 sub     rdi, rsi
__text:000000010000354F                 sar     rdi, 2
__text:0000000100003553                 mov     [rbp+var_58], rcx
__text:0000000100003557                 mov     [rbp+var_60], rdx
__text:000000010000355B                 mov     [rbp+var_68], rdi
__text:000000010000355F                 mov     rcx, [rbp+var_58]
__text:0000000100003563                 mov     rdx, [rbp+var_60]
__text:0000000100003567                 mov     rsi, [rbp+var_68]
__text:000000010000356B                 mov     [rbp+var_40], rcx
__text:000000010000356F                 mov     [rbp+var_48], rdx
__text:0000000100003573                 mov     [rbp+var_50], rsi
__text:0000000100003577                 mov     rcx, [rbp+var_48]
__text:000000010000357B                 mov     rdi, rcx        ; void *
__text:000000010000357E                 call    __ZdlPv         ; operator delete(void *)
__text:0000000100003583
__text:0000000100003583 loc_100003583:                          ; CODE XREF: std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()+10C↑j
__text:0000000100003583                 add     rsp, 120h
__text:000000010000358A                 pop     rbp
__text:000000010000358B                 retn
__text:000000010000358B __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev endp
__text:000000010000358B
__text:000000010000358B ; ---------------------------------------------------------------------------
__text:000000010000358C                 align 10h
__text:0000000100003590
__text:0000000100003590 ; =============== S U B R O U T I N E =======================================
__text:0000000100003590
__text:0000000100003590 ; Attributes: bp-based frame
__text:0000000100003590
__text:0000000100003590 ; std::__1::vector<int, std::__1::allocator<int>>::max_size(void)const
__text:0000000100003590 __ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv proc near
__text:0000000100003590                                         ; DATA XREF: __la_symbol_ptr:__ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv_ptr↓o
__text:0000000100003590
__text:0000000100003590 var_D8          = qword ptr -0D8h
__text:0000000100003590 var_D0          = qword ptr -0D0h
__text:0000000100003590 var_B8          = qword ptr -0B8h
__text:0000000100003590 var_B0          = qword ptr -0B0h
__text:0000000100003590 var_A8          = qword ptr -0A8h
__text:0000000100003590 var_A0          = qword ptr -0A0h
__text:0000000100003590 var_98          = qword ptr -98h
__text:0000000100003590 var_90          = qword ptr -90h
__text:0000000100003590 var_80          = qword ptr -80h
__text:0000000100003590 var_78          = qword ptr -78h
__text:0000000100003590 var_70          = byte ptr -70h
__text:0000000100003590 var_68          = qword ptr -68h
__text:0000000100003590 var_60          = qword ptr -60h
__text:0000000100003590 var_58          = qword ptr -58h
__text:0000000100003590 var_50          = qword ptr -50h
__text:0000000100003590 var_48          = qword ptr -48h
__text:0000000100003590 var_20          = qword ptr -20h
__text:0000000100003590 var_18          = qword ptr -18h
__text:0000000100003590 var_8           = qword ptr -8
__text:0000000100003590
__text:0000000100003590                 push    rbp
__text:0000000100003591                 mov     rbp, rsp
__text:0000000100003594                 sub     rsp, 58h
__text:0000000100003598                 lea     rax, [rbp+var_70]
__text:000000010000359C                 lea     rcx, [rbp+var_B8]
__text:00000001000035A3                 lea     rdx, [rbp+var_B0]
__text:00000001000035AA                 mov     rsi, 0FFFFFFFFFFFFFFFFh
__text:00000001000035B4                 mov     r8, 3FFFFFFFFFFFFFFFh
__text:00000001000035BE                 mov     [rbp+var_A8], rdi
__text:00000001000035C5                 mov     rdi, [rbp+var_A8]
__text:00000001000035CC                 mov     [rbp+var_A0], rdi
__text:00000001000035D3                 mov     rdi, [rbp+var_A0]
__text:00000001000035DA                 add     rdi, 10h
__text:00000001000035E1                 mov     [rbp+var_98], rdi
__text:00000001000035E8                 mov     rdi, [rbp+var_98]
__text:00000001000035EF                 mov     [rbp+var_90], rdi
__text:00000001000035F6                 mov     rdi, [rbp+var_90]
__text:00000001000035FD                 mov     [rbp+var_20], rdi
__text:0000000100003601                 mov     rdi, [rbp+var_20]
__text:0000000100003605                 mov     [rbp+var_18], rdi
__text:0000000100003609                 mov     rdi, [rbp+var_18]
__text:000000010000360D                 mov     [rbp+var_8], rdi
__text:0000000100003611                 mov     [rbp+var_B0], r8
__text:0000000100003618                 shr     rsi, 1
__text:000000010000361C                 mov     [rbp+var_B8], rsi
__text:0000000100003623                 mov     [rbp+var_78], rdx
__text:0000000100003627                 mov     [rbp+var_80], rcx
__text:000000010000362B                 mov     rcx, [rbp+var_78]
__text:000000010000362F                 mov     rdx, [rbp+var_80]
__text:0000000100003633                 mov     [rbp+var_60], rcx
__text:0000000100003637                 mov     [rbp+var_68], rdx
__text:000000010000363B                 mov     rcx, [rbp+var_68]
__text:000000010000363F                 mov     rdx, [rbp+var_60]
__text:0000000100003643                 mov     [rbp+var_48], rax
__text:0000000100003647                 mov     [rbp+var_50], rcx
__text:000000010000364B                 mov     [rbp+var_58], rdx
__text:000000010000364F                 mov     rax, [rbp+var_50]
__text:0000000100003653                 mov     rax, [rax]
__text:0000000100003656                 mov     rcx, [rbp+var_58]
__text:000000010000365A                 cmp     rax, [rcx]
__text:000000010000365D                 jnb     loc_100003673
__text:0000000100003663                 mov     rax, [rbp+var_68]
__text:0000000100003667                 mov     [rbp+var_D0], rax
__text:000000010000366E                 jmp     loc_10000367E
__text:0000000100003673 ; ---------------------------------------------------------------------------
__text:0000000100003673
__text:0000000100003673 loc_100003673:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::max_size(void)+CD↑j
__text:0000000100003673                 mov     rax, [rbp+var_60]
__text:0000000100003677                 mov     [rbp+var_D0], rax
__text:000000010000367E
__text:000000010000367E loc_10000367E:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::max_size(void)+DE↑j
__text:000000010000367E                 mov     rax, [rbp+var_D0]
__text:0000000100003685                 mov     [rbp+var_D8], rax
__text:000000010000368C                 mov     rax, [rbp+var_D8]
__text:0000000100003693                 mov     rax, [rax]
__text:0000000100003696                 add     rsp, 58h
__text:000000010000369A                 pop     rbp
__text:000000010000369B                 retn
__text:000000010000369B __ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv endp
__text:000000010000369B
__text:000000010000369B ; ---------------------------------------------------------------------------
__text:000000010000369C                 align 20h
__text:00000001000036A0
__text:00000001000036A0 ; =============== S U B R O U T I N E =======================================
__text:00000001000036A0
__text:00000001000036A0 ; Attributes: bp-based frame
__text:00000001000036A0
__text:00000001000036A0 ; std::__1::__split_buffer<int, std::__1::allocator<int> &>::__split_buffer(unsigned long, unsigned long, std::__1::allocator<int> &)
__text:00000001000036A0 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_ proc near
__text:00000001000036A0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EmmS3__ptr↓o
__text:00000001000036A0
__text:00000001000036A0 var_160         = qword ptr -160h
__text:00000001000036A0 var_158         = qword ptr -158h
__text:00000001000036A0 var_150         = qword ptr -150h
__text:00000001000036A0 var_148         = qword ptr -148h
__text:00000001000036A0 var_140         = qword ptr -140h
__text:00000001000036A0 var_138         = qword ptr -138h
__text:00000001000036A0 var_130         = qword ptr -130h
__text:00000001000036A0 var_128         = qword ptr -128h
__text:00000001000036A0 var_120         = qword ptr -120h
__text:00000001000036A0 var_118         = qword ptr -118h
__text:00000001000036A0 var_110         = qword ptr -110h
__text:00000001000036A0 var_108         = qword ptr -108h
__text:00000001000036A0 var_100         = qword ptr -100h
__text:00000001000036A0 var_F8          = qword ptr -0F8h
__text:00000001000036A0 var_F0          = qword ptr -0F0h
__text:00000001000036A0 var_E8          = qword ptr -0E8h
__text:00000001000036A0 var_E0          = qword ptr -0E0h
__text:00000001000036A0 var_D8          = qword ptr -0D8h
__text:00000001000036A0 var_D0          = qword ptr -0D0h
__text:00000001000036A0 var_C8          = qword ptr -0C8h
__text:00000001000036A0 var_C0          = qword ptr -0C0h
__text:00000001000036A0 var_B8          = qword ptr -0B8h
__text:00000001000036A0 var_B0          = qword ptr -0B0h
__text:00000001000036A0 var_A8          = qword ptr -0A8h
__text:00000001000036A0 var_A0          = qword ptr -0A0h
__text:00000001000036A0 var_98          = qword ptr -98h
__text:00000001000036A0 var_90          = qword ptr -90h
__text:00000001000036A0 var_88          = qword ptr -88h
__text:00000001000036A0 var_80          = qword ptr -80h
__text:00000001000036A0 var_78          = qword ptr -78h
__text:00000001000036A0 var_70          = qword ptr -70h
__text:00000001000036A0 var_68          = qword ptr -68h
__text:00000001000036A0 var_60          = qword ptr -60h
__text:00000001000036A0 var_58          = qword ptr -58h
__text:00000001000036A0 var_50          = qword ptr -50h
__text:00000001000036A0 var_48          = qword ptr -48h
__text:00000001000036A0 var_40          = qword ptr -40h
__text:00000001000036A0 var_38          = qword ptr -38h
__text:00000001000036A0 var_30          = qword ptr -30h
__text:00000001000036A0 var_28          = qword ptr -28h
__text:00000001000036A0 var_20          = qword ptr -20h
__text:00000001000036A0 var_18          = qword ptr -18h
__text:00000001000036A0 var_10          = qword ptr -10h
__text:00000001000036A0 var_8           = qword ptr -8
__text:00000001000036A0
__text:00000001000036A0                 push    rbp
__text:00000001000036A1                 mov     rbp, rsp
__text:00000001000036A4                 sub     rsp, 160h
__text:00000001000036AB                 lea     rax, [rbp+var_28]
__text:00000001000036AF                 lea     r8, [rbp+var_48]
__text:00000001000036B3                 lea     r9, [rbp+var_148]
__text:00000001000036BA                 lea     r10, [rbp+var_120]
__text:00000001000036C1                 mov     [rbp+var_128], rdi
__text:00000001000036C8                 mov     [rbp+var_130], rsi
__text:00000001000036CF                 mov     [rbp+var_138], rdx
__text:00000001000036D6                 mov     [rbp+var_140], rcx
__text:00000001000036DD                 mov     rcx, [rbp+var_128]
__text:00000001000036E4                 mov     rdx, rcx
__text:00000001000036E7                 add     rdx, 18h
__text:00000001000036EE                 mov     [rbp+var_110], r10
__text:00000001000036F5                 mov     [rbp+var_118], 0FFFFFFFFFFFFFFFFh
__text:0000000100003700                 mov     rsi, [rbp+var_110]
__text:0000000100003707                 mov     rdi, [rbp+var_118]
__text:000000010000370E                 mov     [rbp+var_100], rsi
__text:0000000100003715                 mov     [rbp+var_108], rdi
__text:000000010000371C                 mov     rsi, [rbp+var_100]
__text:0000000100003723                 mov     qword ptr [rsi], 0
__text:000000010000372A                 mov     rsi, [rbp+var_120]
__text:0000000100003731                 mov     [rbp+var_148], rsi
__text:0000000100003738                 mov     [rbp+var_88], r9
__text:000000010000373F                 mov     rsi, [rbp+var_140]
__text:0000000100003746                 mov     [rbp+var_58], rdx
__text:000000010000374A                 mov     [rbp+var_60], 0
__text:0000000100003752                 mov     [rbp+var_68], rsi
__text:0000000100003756                 mov     rdx, [rbp+var_58]
__text:000000010000375A                 mov     rsi, [rbp+var_60]
__text:000000010000375E                 mov     rdi, [rbp+var_68]
__text:0000000100003762                 mov     [rbp+var_40], rdx
__text:0000000100003766                 mov     [rbp+var_48], rsi
__text:000000010000376A                 mov     [rbp+var_50], rdi
__text:000000010000376E                 mov     rdx, [rbp+var_40]
__text:0000000100003772                 mov     [rbp+var_38], r8
__text:0000000100003776                 mov     rsi, [rbp+var_38]
__text:000000010000377A                 mov     rsi, [rsi]
__text:000000010000377D                 mov     rdi, [rbp+var_50]
__text:0000000100003781                 mov     [rbp+var_8], rdi
__text:0000000100003785                 mov     rdi, [rbp+var_8]
__text:0000000100003789                 mov     [rbp+var_20], rdx
__text:000000010000378D                 mov     [rbp+var_28], rsi
__text:0000000100003791                 mov     [rbp+var_30], rdi
__text:0000000100003795                 mov     rdx, [rbp+var_20]
__text:0000000100003799                 mov     [rbp+var_18], rax
__text:000000010000379D                 mov     rax, [rbp+var_18]
__text:00000001000037A1                 mov     rax, [rax]
__text:00000001000037A4                 mov     [rdx], rax
__text:00000001000037A7                 mov     rax, [rbp+var_30]
__text:00000001000037AB                 mov     [rbp+var_10], rax
__text:00000001000037AF                 mov     rax, [rbp+var_10]
__text:00000001000037B3                 mov     [rdx+8], rax
__text:00000001000037B7                 cmp     [rbp+var_130], 0
__text:00000001000037C2                 mov     [rbp+var_158], rcx
__text:00000001000037C9                 jz      loc_100003854
__text:00000001000037CF                 mov     rax, [rbp+var_158]
__text:00000001000037D6                 mov     [rbp+var_80], rax
__text:00000001000037DA                 mov     rcx, [rbp+var_80]
__text:00000001000037DE                 add     rcx, 18h
__text:00000001000037E5                 mov     [rbp+var_78], rcx
__text:00000001000037E9                 mov     rcx, [rbp+var_78]
__text:00000001000037ED                 mov     [rbp+var_70], rcx
__text:00000001000037F1                 mov     rcx, [rbp+var_70]
__text:00000001000037F5                 mov     rcx, [rcx+8]
__text:00000001000037F9                 mov     rdx, [rbp+var_130]
__text:0000000100003800                 mov     [rbp+var_A8], rcx
__text:0000000100003807                 mov     [rbp+var_B0], rdx
__text:000000010000380E                 mov     rcx, [rbp+var_A8]
__text:0000000100003815                 mov     rdx, [rbp+var_B0]
__text:000000010000381C                 mov     [rbp+var_90], rcx
__text:0000000100003823                 mov     [rbp+var_98], rdx
__text:000000010000382A                 mov     [rbp+var_A0], 0
__text:0000000100003835                 mov     rcx, [rbp+var_98]
__text:000000010000383C                 shl     rcx, 2
__text:0000000100003840                 mov     rdi, rcx        ; unsigned __int64
__text:0000000100003843                 call    __Znwm          ; operator new(ulong)
__text:0000000100003848                 mov     [rbp+var_160], rax
__text:000000010000384F                 jmp     loc_1000038C4
__text:0000000100003854 ; ---------------------------------------------------------------------------
__text:0000000100003854
__text:0000000100003854 loc_100003854:                          ; CODE XREF: std::__1::__split_buffer<int,std::__1::allocator<int> &>::__split_buffer(ulong,ulong,std::__1::allocator<int> &)+129↑j
__text:0000000100003854                 mov     rax, 0
__text:000000010000385E                 lea     rcx, [rbp+var_150]
__text:0000000100003865                 lea     rdx, [rbp+var_D8]
__text:000000010000386C                 mov     [rbp+var_C8], rdx
__text:0000000100003873                 mov     [rbp+var_D0], 0FFFFFFFFFFFFFFFFh
__text:000000010000387E                 mov     rdx, [rbp+var_C8]
__text:0000000100003885                 mov     rsi, [rbp+var_D0]
__text:000000010000388C                 mov     [rbp+var_B8], rdx
__text:0000000100003893                 mov     [rbp+var_C0], rsi
__text:000000010000389A                 mov     rdx, [rbp+var_B8]
__text:00000001000038A1                 mov     qword ptr [rdx], 0
__text:00000001000038A8                 mov     rdx, [rbp+var_D8]
__text:00000001000038AF                 mov     [rbp+var_150], rdx
__text:00000001000038B6                 mov     [rbp+var_E0], rcx
__text:00000001000038BD                 mov     [rbp+var_160], rax
__text:00000001000038C4
__text:00000001000038C4 loc_1000038C4:                          ; CODE XREF: std::__1::__split_buffer<int,std::__1::allocator<int> &>::__split_buffer(ulong,ulong,std::__1::allocator<int> &)+1AF↑j
__text:00000001000038C4                 mov     rax, [rbp+var_160]
__text:00000001000038CB                 mov     rcx, [rbp+var_158]
__text:00000001000038D2                 mov     [rcx], rax
__text:00000001000038D5                 mov     rax, [rcx]
__text:00000001000038D8                 mov     rdx, [rbp+var_138]
__text:00000001000038DF                 shl     rdx, 2
__text:00000001000038E3                 add     rax, rdx
__text:00000001000038E6                 mov     [rcx+10h], rax
__text:00000001000038EA                 mov     [rcx+8], rax
__text:00000001000038EE                 mov     rax, [rcx]
__text:00000001000038F1                 mov     rdx, [rbp+var_130]
__text:00000001000038F8                 shl     rdx, 2
__text:00000001000038FC                 add     rax, rdx
__text:00000001000038FF                 mov     [rbp+var_F8], rcx
__text:0000000100003906                 mov     rdx, [rbp+var_F8]
__text:000000010000390D                 add     rdx, 18h
__text:0000000100003914                 mov     [rbp+var_F0], rdx
__text:000000010000391B                 mov     rdx, [rbp+var_F0]
__text:0000000100003922                 mov     [rbp+var_E8], rdx
__text:0000000100003929                 mov     rdx, [rbp+var_E8]
__text:0000000100003930                 mov     [rdx], rax
__text:0000000100003933                 add     rsp, 160h
__text:000000010000393A                 pop     rbp
__text:000000010000393B                 retn
__text:000000010000393B __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_ endp
__text:000000010000393B
__text:000000010000393B ; ---------------------------------------------------------------------------
__text:000000010000393C                 align 20h
__text:0000000100003940
__text:0000000100003940 ; =============== S U B R O U T I N E =======================================
__text:0000000100003940
__text:0000000100003940 ; Attributes: bp-based frame
__text:0000000100003940
__text:0000000100003940 ; std::__1::vector<int, std::__1::allocator<int>>::~vector()
__text:0000000100003940 __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev proc near
__text:0000000100003940                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev_ptr↓o
__text:0000000100003940
__text:0000000100003940 var_8           = qword ptr -8
__text:0000000100003940
__text:0000000100003940                 push    rbp
__text:0000000100003941                 mov     rbp, rsp
__text:0000000100003944                 sub     rsp, 10h
__text:0000000100003948                 mov     [rbp+var_8], rdi
__text:000000010000394C                 mov     rdi, [rbp+var_8]
__text:0000000100003950                 call    j___ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev ; std::__1::__vector_base<int,std::__1::allocator<int>>::~__vector_base()
__text:0000000100003955                 add     rsp, 10h
__text:0000000100003959                 pop     rbp
__text:000000010000395A                 retn
__text:000000010000395A __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev endp
__text:000000010000395A
__text:000000010000395A ; ---------------------------------------------------------------------------
__text:000000010000395B                 align 20h
__text:0000000100003960
__text:0000000100003960 ; =============== S U B R O U T I N E =======================================
__text:0000000100003960
__text:0000000100003960 ; Attributes: bp-based frame
__text:0000000100003960
__text:0000000100003960 ; std::__1::__vector_base<int, std::__1::allocator<int>>::~__vector_base()
__text:0000000100003960 __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev proc near
__text:0000000100003960                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev_ptr↓o
__text:0000000100003960
__text:0000000100003960 var_130         = qword ptr -130h
__text:0000000100003960 var_128         = qword ptr -128h
__text:0000000100003960 var_120         = qword ptr -120h
__text:0000000100003960 var_118         = qword ptr -118h
__text:0000000100003960 var_110         = qword ptr -110h
__text:0000000100003960 var_108         = qword ptr -108h
__text:0000000100003960 var_100         = qword ptr -100h
__text:0000000100003960 var_F8          = qword ptr -0F8h
__text:0000000100003960 var_F0          = qword ptr -0F0h
__text:0000000100003960 var_E8          = qword ptr -0E8h
__text:0000000100003960 var_E0          = qword ptr -0E0h
__text:0000000100003960 var_D8          = qword ptr -0D8h
__text:0000000100003960 var_D0          = qword ptr -0D0h
__text:0000000100003960 var_C8          = qword ptr -0C8h
__text:0000000100003960 var_C0          = qword ptr -0C0h
__text:0000000100003960 var_B8          = qword ptr -0B8h
__text:0000000100003960 var_B0          = qword ptr -0B0h
__text:0000000100003960 var_A8          = qword ptr -0A8h
__text:0000000100003960 var_A0          = qword ptr -0A0h
__text:0000000100003960 var_98          = qword ptr -98h
__text:0000000100003960 var_90          = qword ptr -90h
__text:0000000100003960 var_88          = qword ptr -88h
__text:0000000100003960 var_80          = qword ptr -80h
__text:0000000100003960 var_78          = qword ptr -78h
__text:0000000100003960 var_60          = qword ptr -60h
__text:0000000100003960 var_58          = qword ptr -58h
__text:0000000100003960 var_50          = qword ptr -50h
__text:0000000100003960 var_48          = qword ptr -48h
__text:0000000100003960 var_40          = qword ptr -40h
__text:0000000100003960 var_28          = qword ptr -28h
__text:0000000100003960 var_20          = qword ptr -20h
__text:0000000100003960 var_18          = qword ptr -18h
__text:0000000100003960 var_10          = qword ptr -10h
__text:0000000100003960 var_8           = qword ptr -8
__text:0000000100003960
__text:0000000100003960                 push    rbp
__text:0000000100003961                 mov     rbp, rsp
__text:0000000100003964                 sub     rsp, 130h
__text:000000010000396B                 lea     rax, [rbp+var_120]
__text:0000000100003972                 lea     rcx, [rbp+var_110]
__text:0000000100003979                 mov     [rbp+var_118], rdi
__text:0000000100003980                 mov     rdi, [rbp+var_118]
__text:0000000100003987                 mov     rdx, [rdi]
__text:000000010000398A                 mov     [rbp+var_100], rcx
__text:0000000100003991                 mov     [rbp+var_108], 0FFFFFFFFFFFFFFFFh
__text:000000010000399C                 mov     rcx, [rbp+var_100]
__text:00000001000039A3                 mov     rsi, [rbp+var_108]
__text:00000001000039AA                 mov     [rbp+var_F0], rcx
__text:00000001000039B1                 mov     [rbp+var_F8], rsi
__text:00000001000039B8                 mov     rcx, [rbp+var_F0]
__text:00000001000039BF                 mov     qword ptr [rcx], 0
__text:00000001000039C6                 mov     rcx, [rbp+var_110]
__text:00000001000039CD                 mov     [rbp+var_120], rcx
__text:00000001000039D4                 mov     [rbp+var_B8], rax
__text:00000001000039DB                 cmp     rdx, 0
__text:00000001000039E2                 mov     [rbp+var_128], rdi
__text:00000001000039E9                 jz      loc_100003B52
__text:00000001000039EF                 mov     rax, [rbp+var_128]
__text:00000001000039F6                 mov     [rbp+var_78], rax
__text:00000001000039FA                 mov     rcx, [rbp+var_78]
__text:00000001000039FE                 mov     rdx, [rcx]
__text:0000000100003A01                 mov     [rbp+var_58], rcx
__text:0000000100003A05                 mov     [rbp+var_60], rdx
__text:0000000100003A09                 mov     rcx, [rbp+var_58]
__text:0000000100003A0D                 mov     [rbp+var_130], rcx
__text:0000000100003A14
__text:0000000100003A14 loc_100003A14:                          ; CODE XREF: std::__1::__vector_base<int,std::__1::allocator<int>>::~__vector_base()+11E↓j
__text:0000000100003A14                 mov     rax, [rbp+var_60]
__text:0000000100003A18                 mov     rcx, [rbp+var_130]
__text:0000000100003A1F                 cmp     rax, [rcx+8]
__text:0000000100003A23                 jz      loc_100003A83
__text:0000000100003A29                 mov     rax, [rbp+var_130]
__text:0000000100003A30                 mov     [rbp+var_50], rax
__text:0000000100003A34                 mov     rcx, [rbp+var_50]
__text:0000000100003A38                 add     rcx, 10h
__text:0000000100003A3F                 mov     [rbp+var_48], rcx
__text:0000000100003A43                 mov     rcx, [rbp+var_48]
__text:0000000100003A47                 mov     [rbp+var_40], rcx
__text:0000000100003A4B                 mov     rcx, [rbp+var_40]
__text:0000000100003A4F                 mov     rdx, [rax+8]
__text:0000000100003A53                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:0000000100003A5A                 mov     [rax+8], rdx
__text:0000000100003A5E                 mov     [rbp+var_8], rdx
__text:0000000100003A62                 mov     rdx, [rbp+var_8]
__text:0000000100003A66                 mov     [rbp+var_20], rcx
__text:0000000100003A6A                 mov     [rbp+var_28], rdx
__text:0000000100003A6E                 mov     rcx, [rbp+var_20]
__text:0000000100003A72                 mov     rdx, [rbp+var_28]
__text:0000000100003A76                 mov     [rbp+var_10], rcx
__text:0000000100003A7A                 mov     [rbp+var_18], rdx
__text:0000000100003A7E                 jmp     loc_100003A14
__text:0000000100003A83 ; ---------------------------------------------------------------------------
__text:0000000100003A83
__text:0000000100003A83 loc_100003A83:                          ; CODE XREF: std::__1::__vector_base<int,std::__1::allocator<int>>::~__vector_base()+C3↑j
__text:0000000100003A83                 mov     rax, [rbp+var_128]
__text:0000000100003A8A                 mov     [rbp+var_90], rax
__text:0000000100003A91                 mov     rcx, [rbp+var_90]
__text:0000000100003A98                 add     rcx, 10h
__text:0000000100003A9F                 mov     [rbp+var_88], rcx
__text:0000000100003AA6                 mov     rcx, [rbp+var_88]
__text:0000000100003AAD                 mov     [rbp+var_80], rcx
__text:0000000100003AB1                 mov     rcx, [rbp+var_80]
__text:0000000100003AB5                 mov     rdx, [rax]
__text:0000000100003AB8                 mov     [rbp+var_B0], rax
__text:0000000100003ABF                 mov     rsi, [rbp+var_B0]
__text:0000000100003AC6                 mov     [rbp+var_A8], rsi
__text:0000000100003ACD                 mov     rdi, [rbp+var_A8]
__text:0000000100003AD4                 add     rdi, 10h
__text:0000000100003ADB                 mov     [rbp+var_A0], rdi
__text:0000000100003AE2                 mov     rdi, [rbp+var_A0]
__text:0000000100003AE9                 mov     [rbp+var_98], rdi
__text:0000000100003AF0                 mov     rdi, [rbp+var_98]
__text:0000000100003AF7                 mov     rdi, [rdi]
__text:0000000100003AFA                 mov     rsi, [rsi]
__text:0000000100003AFD                 sub     rdi, rsi
__text:0000000100003B00                 sar     rdi, 2
__text:0000000100003B04                 mov     [rbp+var_D8], rcx
__text:0000000100003B0B                 mov     [rbp+var_E0], rdx
__text:0000000100003B12                 mov     [rbp+var_E8], rdi
__text:0000000100003B19                 mov     rcx, [rbp+var_D8]
__text:0000000100003B20                 mov     rdx, [rbp+var_E0]
__text:0000000100003B27                 mov     rsi, [rbp+var_E8]
__text:0000000100003B2E                 mov     [rbp+var_C0], rcx
__text:0000000100003B35                 mov     [rbp+var_C8], rdx
__text:0000000100003B3C                 mov     [rbp+var_D0], rsi
__text:0000000100003B43                 mov     rcx, [rbp+var_C8]
__text:0000000100003B4A                 mov     rdi, rcx        ; void *
__text:0000000100003B4D                 call    __ZdlPv         ; operator delete(void *)
__text:0000000100003B52
__text:0000000100003B52 loc_100003B52:                          ; CODE XREF: std::__1::__vector_base<int,std::__1::allocator<int>>::~__vector_base()+89↑j
__text:0000000100003B52                 add     rsp, 130h
__text:0000000100003B59                 pop     rbp
__text:0000000100003B5A                 retn
__text:0000000100003B5A __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev endp
__text:0000000100003B5A
__text:0000000100003B5A __text          ends
__text:0000000100003B5A