__text:0000000100000C90 ; =============== S U B R O U T I N E =======================================
__text:0000000100000C90
__text:0000000100000C90 ; Attributes: bp-based frame
__text:0000000100000C90
__text:0000000100000C90 ; __int64 __fastcall go(int, int, int)
__text:0000000100000C90                 public __Z2goiii
__text:0000000100000C90 __Z2goiii       proc near               ; CODE XREF: go(int,int,int)+12A↓p
__text:0000000100000C90                                         ; _main+11ED↓p
__text:0000000100000C90
__text:0000000100000C90 var_1C          = dword ptr -1Ch
__text:0000000100000C90 var_18          = dword ptr -18h
__text:0000000100000C90 var_14          = dword ptr -14h
__text:0000000100000C90 var_10          = dword ptr -10h
__text:0000000100000C90 var_C           = dword ptr -0Ch
__text:0000000100000C90 var_8           = dword ptr -8
__text:0000000100000C90 var_4           = dword ptr -4
__text:0000000100000C90
__text:0000000100000C90                 push    rbp
__text:0000000100000C91                 mov     rbp, rsp
__text:0000000100000C94                 sub     rsp, 20h
__text:0000000100000C98                 lea     rax, _use
__text:0000000100000C9F                 lea     rcx, _q
__text:0000000100000CA6                 mov     [rbp+var_4], edi
__text:0000000100000CA9                 mov     [rbp+var_8], esi
__text:0000000100000CAC                 mov     [rbp+var_C], edx
__text:0000000100000CAF                 mov     edx, [rbp+var_C]
__text:0000000100000CB2                 movsxd  r8, [rbp+var_8]
__text:0000000100000CB6                 movsxd  r9, [rbp+var_4]
__text:0000000100000CBA                 imul    r9, 5DC4h
__text:0000000100000CC1                 add     rcx, r9
__text:0000000100000CC4                 mov     [rcx+r8*4], edx
__text:0000000100000CC8                 mov     edx, cs:_ct
__text:0000000100000CCE                 movsxd  rcx, [rbp+var_8]
__text:0000000100000CD2                 movsxd  r8, [rbp+var_4]
__text:0000000100000CD6                 imul    r8, 5DC4h
__text:0000000100000CDD                 add     rax, r8
__text:0000000100000CE0                 mov     [rax+rcx*4], edx
__text:0000000100000CE3                 mov     [rbp+var_10], 0
__text:0000000100000CEA
__text:0000000100000CEA loc_100000CEA:                          ; CODE XREF: go(int,int,int)+142↓j
__text:0000000100000CEA                 cmp     [rbp+var_10], 6
__text:0000000100000CF1                 jge     loc_100000DD7
__text:0000000100000CF7                 lea     rax, __ZL2dj    ; dj
__text:0000000100000CFE                 lea     rcx, __ZL2di    ; di
__text:0000000100000D05                 mov     edx, [rbp+var_4]
__text:0000000100000D08                 movsxd  rsi, [rbp+var_10]
__text:0000000100000D0C                 add     edx, [rcx+rsi*4]
__text:0000000100000D0F                 mov     [rbp+var_14], edx
__text:0000000100000D12                 mov     edx, [rbp+var_8]
__text:0000000100000D15                 movsxd  rcx, [rbp+var_10]
__text:0000000100000D19                 add     edx, [rax+rcx*4]
__text:0000000100000D1C                 mov     [rbp+var_18], edx
__text:0000000100000D1F                 cmp     [rbp+var_14], 0
__text:0000000100000D26                 jl      loc_100000DC2
__text:0000000100000D2C                 cmp     [rbp+var_18], 0
__text:0000000100000D33                 jl      loc_100000DC2
__text:0000000100000D39                 mov     eax, [rbp+var_14]
__text:0000000100000D3C                 mov     ecx, cs:_n
__text:0000000100000D42                 shl     ecx, 1
__text:0000000100000D45                 cmp     eax, ecx
__text:0000000100000D47                 jg      loc_100000DC2
__text:0000000100000D4D                 mov     eax, [rbp+var_18]
__text:0000000100000D50                 mov     ecx, cs:_n
__text:0000000100000D56                 shl     ecx, 1
__text:0000000100000D59                 cmp     eax, ecx
__text:0000000100000D5B                 jg      loc_100000DC2
__text:0000000100000D61                 lea     rax, _use
__text:0000000100000D68                 movsxd  rcx, [rbp+var_18]
__text:0000000100000D6C                 movsxd  rdx, [rbp+var_14]
__text:0000000100000D70                 imul    rdx, 5DC4h
__text:0000000100000D77                 add     rax, rdx
__text:0000000100000D7A                 mov     esi, [rax+rcx*4]
__text:0000000100000D7D                 cmp     esi, cs:_ct
__text:0000000100000D83                 jz      loc_100000DC2
__text:0000000100000D89                 lea     rax, _was
__text:0000000100000D90                 movsxd  rcx, [rbp+var_18]
__text:0000000100000D94                 movsxd  rdx, [rbp+var_14]
__text:0000000100000D98                 imul    rdx, 5DC4h
__text:0000000100000D9F                 add     rax, rdx
__text:0000000100000DA2                 mov     esi, [rax+rcx*4]
__text:0000000100000DA5                 cmp     esi, cs:_ct
__text:0000000100000DAB                 jz      loc_100000DC2
__text:0000000100000DB1                 mov     edi, [rbp+var_14] ; int
__text:0000000100000DB4                 mov     esi, [rbp+var_18] ; int
__text:0000000100000DB7                 mov     edx, [rbp+var_C] ; int
__text:0000000100000DBA                 call    __Z2goiii       ; go(int,int,int)
__text:0000000100000DBF                 mov     [rbp+var_1C], eax
__text:0000000100000DC2
__text:0000000100000DC2 loc_100000DC2:                          ; CODE XREF: go(int,int,int)+96↑j
__text:0000000100000DC2                                         ; go(int,int,int)+A3↑j ...
__text:0000000100000DC2                 jmp     $+5
__text:0000000100000DC7 ; ---------------------------------------------------------------------------
__text:0000000100000DC7
__text:0000000100000DC7 loc_100000DC7:                          ; CODE XREF: go(int,int,int):loc_100000DC2↑j
__text:0000000100000DC7                 mov     eax, [rbp+var_10]
__text:0000000100000DCA                 add     eax, 1
__text:0000000100000DCF                 mov     [rbp+var_10], eax
__text:0000000100000DD2                 jmp     loc_100000CEA
__text:0000000100000DD7 ; ---------------------------------------------------------------------------
__text:0000000100000DD7
__text:0000000100000DD7 loc_100000DD7:                          ; CODE XREF: go(int,int,int)+61↑j
__text:0000000100000DD7                 mov     eax, 0
__text:0000000100000DDC                 add     rsp, 20h
__text:0000000100000DE0                 pop     rbp
__text:0000000100000DE1                 retn
__text:0000000100000DE1 __Z2goiii       endp
__text:0000000100000DE1
__text:0000000100000DE1 ; ---------------------------------------------------------------------------
__text:0000000100000DE2                 align 10h
__text:0000000100000DF0
__text:0000000100000DF0 ; =============== S U B R O U T I N E =======================================
__text:0000000100000DF0
__text:0000000100000DF0 ; Attributes: bp-based frame
__text:0000000100000DF0
__text:0000000100000DF0 ; __int64 __fastcall gp(int)
__text:0000000100000DF0                 public __Z2gpi
__text:0000000100000DF0 __Z2gpi         proc near               ; CODE XREF: gp(int)+30↓p
__text:0000000100000DF0                                         ; _main+1482↓p ...
__text:0000000100000DF0
__text:0000000100000DF0 var_4           = dword ptr -4
__text:0000000100000DF0
__text:0000000100000DF0                 push    rbp
__text:0000000100000DF1                 mov     rbp, rsp
__text:0000000100000DF4                 sub     rsp, 10h
__text:0000000100000DF8                 lea     rax, _p
__text:0000000100000DFF                 mov     [rbp+var_4], edi
__text:0000000100000E02                 movsxd  rcx, [rbp+var_4]
__text:0000000100000E06                 mov     edi, [rax+rcx*4]
__text:0000000100000E09                 cmp     edi, [rbp+var_4]
__text:0000000100000E0C                 jz      loc_100000E33
__text:0000000100000E12                 lea     rax, _p
__text:0000000100000E19                 movsxd  rcx, [rbp+var_4]
__text:0000000100000E1D                 mov     edi, [rax+rcx*4] ; int
__text:0000000100000E20                 call    __Z2gpi         ; gp(int)
__text:0000000100000E25                 lea     rcx, _p
__text:0000000100000E2C                 movsxd  rdx, [rbp+var_4]
__text:0000000100000E30                 mov     [rcx+rdx*4], eax
__text:0000000100000E33
__text:0000000100000E33 loc_100000E33:                          ; CODE XREF: gp(int)+1C↑j
__text:0000000100000E33                 lea     rax, _p
__text:0000000100000E3A                 movsxd  rcx, [rbp+var_4]
__text:0000000100000E3E                 mov     eax, [rax+rcx*4]
__text:0000000100000E41                 add     rsp, 10h
__text:0000000100000E45                 pop     rbp
__text:0000000100000E46                 retn
__text:0000000100000E46 __Z2gpi         endp
__text:0000000100000E46
__text:0000000100000E46 ; ---------------------------------------------------------------------------
__text:0000000100000E47                 align 10h
__text:0000000100000E50
__text:0000000100000E50 ; =============== S U B R O U T I N E =======================================
__text:0000000100000E50
__text:0000000100000E50 ; Attributes: bp-based frame
__text:0000000100000E50
__text:0000000100000E50 ; __int64 __fastcall good(int, int)
__text:0000000100000E50                 public __Z4goodii
__text:0000000100000E50 __Z4goodii      proc near               ; CODE XREF: _main+AE5↓p
__text:0000000100000E50
__text:0000000100000E50 var_C           = dword ptr -0Ch
__text:0000000100000E50 var_8           = dword ptr -8
__text:0000000100000E50 var_4           = dword ptr -4
__text:0000000100000E50
__text:0000000100000E50                 push    rbp
__text:0000000100000E51                 mov     rbp, rsp
__text:0000000100000E54                 mov     [rbp+var_8], edi
__text:0000000100000E57                 mov     [rbp+var_C], esi
__text:0000000100000E5A                 cmp     [rbp+var_8], 1
__text:0000000100000E61                 jl      loc_100000E9C
__text:0000000100000E67                 cmp     [rbp+var_C], 1
__text:0000000100000E6E                 jl      loc_100000E9C
__text:0000000100000E74                 mov     eax, [rbp+var_8]
__text:0000000100000E77                 mov     ecx, cs:_n
__text:0000000100000E7D                 shl     ecx, 1
__text:0000000100000E80                 cmp     eax, ecx
__text:0000000100000E82                 jge     loc_100000E9C
__text:0000000100000E88                 mov     eax, [rbp+var_C]
__text:0000000100000E8B                 mov     ecx, cs:_n
__text:0000000100000E91                 shl     ecx, 1
__text:0000000100000E94                 cmp     eax, ecx
__text:0000000100000E96                 jl      loc_100000EA8
__text:0000000100000E9C
__text:0000000100000E9C loc_100000E9C:                          ; CODE XREF: good(int,int)+11↑j
__text:0000000100000E9C                                         ; good(int,int)+1E↑j ...
__text:0000000100000E9C                 mov     [rbp+var_4], 0
__text:0000000100000EA3                 jmp     loc_100000F43
__text:0000000100000EA8 ; ---------------------------------------------------------------------------
__text:0000000100000EA8
__text:0000000100000EA8 loc_100000EA8:                          ; CODE XREF: good(int,int)+46↑j
__text:0000000100000EA8                 lea     rax, _f
__text:0000000100000EAF                 mov     ecx, [rbp+var_8]
__text:0000000100000EB2                 movsxd  rdx, [rbp+var_C]
__text:0000000100000EB6                 cmp     ecx, [rax+rdx*4]
__text:0000000100000EB9                 jl      loc_100000F3C
__text:0000000100000EBF                 lea     rax, _w
__text:0000000100000EC6                 lea     rcx, _f
__text:0000000100000ECD                 mov     edx, [rbp+var_8]
__text:0000000100000ED0                 movsxd  rsi, [rbp+var_C]
__text:0000000100000ED4                 mov     edi, [rcx+rsi*4]
__text:0000000100000ED7                 movsxd  rcx, [rbp+var_C]
__text:0000000100000EDB                 add     edi, [rax+rcx*4]
__text:0000000100000EDE                 sub     edi, 1
__text:0000000100000EE4                 cmp     edx, edi
__text:0000000100000EE6                 jg      loc_100000F3C
__text:0000000100000EEC                 lea     rax, _f
__text:0000000100000EF3                 mov     ecx, [rbp+var_C]
__text:0000000100000EF6                 movsxd  rdx, [rbp+var_8]
__text:0000000100000EFA                 cmp     ecx, [rax+rdx*4]
__text:0000000100000EFD                 jl      loc_100000F3C
__text:0000000100000F03                 lea     rax, _w
__text:0000000100000F0A                 lea     rcx, _f
__text:0000000100000F11                 mov     edx, [rbp+var_C]
__text:0000000100000F14                 movsxd  rsi, [rbp+var_8]
__text:0000000100000F18                 mov     edi, [rcx+rsi*4]
__text:0000000100000F1B                 movsxd  rcx, [rbp+var_8]
__text:0000000100000F1F                 add     edi, [rax+rcx*4]
__text:0000000100000F22                 sub     edi, 1
__text:0000000100000F28                 cmp     edx, edi
__text:0000000100000F2A                 jg      loc_100000F3C
__text:0000000100000F30                 mov     [rbp+var_4], 1
__text:0000000100000F37                 jmp     loc_100000F43
__text:0000000100000F3C ; ---------------------------------------------------------------------------
__text:0000000100000F3C
__text:0000000100000F3C loc_100000F3C:                          ; CODE XREF: good(int,int)+69↑j
__text:0000000100000F3C                                         ; good(int,int)+96↑j ...
__text:0000000100000F3C                 mov     [rbp+var_4], 0
__text:0000000100000F43
__text:0000000100000F43 loc_100000F43:                          ; CODE XREF: good(int,int)+53↑j
__text:0000000100000F43                                         ; good(int,int)+E7↑j
__text:0000000100000F43                 mov     eax, [rbp+var_4]
__text:0000000100000F46                 pop     rbp
__text:0000000100000F47                 retn
__text:0000000100000F47 __Z4goodii      endp
__text:0000000100000F47
__text:0000000100000F47 ; ---------------------------------------------------------------------------
__text:0000000100000F48                 align 10h
__text:0000000100000F50
__text:0000000100000F50 ; =============== S U B R O U T I N E =======================================
__text:0000000100000F50
__text:0000000100000F50 ; Attributes: bp-based frame
__text:0000000100000F50
__text:0000000100000F50 ; int __cdecl main(int argc, const char **argv, const char **envp)
__text:0000000100000F50                 public _main
__text:0000000100000F50 _main           proc near
__text:0000000100000F50
__text:0000000100000F50 var_978         = qword ptr -978h
__text:0000000100000F50 var_970         = dword ptr -970h
__text:0000000100000F50 var_96C         = dword ptr -96Ch
__text:0000000100000F50 var_968         = qword ptr -968h
__text:0000000100000F50 var_960         = qword ptr -960h
__text:0000000100000F50 var_954         = dword ptr -954h
__text:0000000100000F50 var_950         = dword ptr -950h
__text:0000000100000F50 var_94C         = dword ptr -94Ch
__text:0000000100000F50 var_948         = dword ptr -948h
__text:0000000100000F50 var_944         = dword ptr -944h
__text:0000000100000F50 var_940         = dword ptr -940h
__text:0000000100000F50 var_93C         = dword ptr -93Ch
__text:0000000100000F50 var_938         = dword ptr -938h
__text:0000000100000F50 var_934         = dword ptr -934h
__text:0000000100000F50 var_930         = dword ptr -930h
__text:0000000100000F50 var_92C         = dword ptr -92Ch
__text:0000000100000F50 var_928         = dword ptr -928h
__text:0000000100000F50 var_922         = byte ptr -922h
__text:0000000100000F50 var_921         = byte ptr -921h
__text:0000000100000F50 var_920         = qword ptr -920h
__text:0000000100000F50 var_918         = qword ptr -918h
__text:0000000100000F50 var_90C         = dword ptr -90Ch
__text:0000000100000F50 var_908         = qword ptr -908h
__text:0000000100000F50 var_900         = qword ptr -900h
__text:0000000100000F50 var_8F8         = qword ptr -8F8h
__text:0000000100000F50 var_8F0         = qword ptr -8F0h
__text:0000000100000F50 var_8E4         = dword ptr -8E4h
__text:0000000100000F50 var_8E0         = qword ptr -8E0h
__text:0000000100000F50 var_8D8         = qword ptr -8D8h
__text:0000000100000F50 var_8D0         = qword ptr -8D0h
__text:0000000100000F50 var_8C8         = qword ptr -8C8h
__text:0000000100000F50 var_8C0         = qword ptr -8C0h
__text:0000000100000F50 var_8B8         = dword ptr -8B8h
__text:0000000100000F50 var_8B4         = dword ptr -8B4h
__text:0000000100000F50 var_8B0         = qword ptr -8B0h
__text:0000000100000F50 var_8A8         = dword ptr -8A8h
__text:0000000100000F50 var_8A4         = dword ptr -8A4h
__text:0000000100000F50 var_8A0         = dword ptr -8A0h
__text:0000000100000F50 var_89C         = dword ptr -89Ch
__text:0000000100000F50 var_898         = dword ptr -898h
__text:0000000100000F50 var_894         = dword ptr -894h
__text:0000000100000F50 var_890         = dword ptr -890h
__text:0000000100000F50 var_88C         = dword ptr -88Ch
__text:0000000100000F50 var_888         = dword ptr -888h
__text:0000000100000F50 var_884         = dword ptr -884h
__text:0000000100000F50 var_880         = dword ptr -880h
__text:0000000100000F50 var_87C         = dword ptr -87Ch
__text:0000000100000F50 var_878         = dword ptr -878h
__text:0000000100000F50 var_874         = dword ptr -874h
__text:0000000100000F50 var_870         = dword ptr -870h
__text:0000000100000F50 var_86C         = dword ptr -86Ch
__text:0000000100000F50 var_868         = dword ptr -868h
__text:0000000100000F50 var_864         = dword ptr -864h
__text:0000000100000F50 var_860         = dword ptr -860h
__text:0000000100000F50 var_85C         = dword ptr -85Ch
__text:0000000100000F50 var_858         = dword ptr -858h
__text:0000000100000F50 var_854         = dword ptr -854h
__text:0000000100000F50 var_850         = dword ptr -850h
__text:0000000100000F50 var_84C         = dword ptr -84Ch
__text:0000000100000F50 var_848         = dword ptr -848h
__text:0000000100000F50 var_844         = dword ptr -844h
__text:0000000100000F50 var_840         = dword ptr -840h
__text:0000000100000F50 var_83C         = dword ptr -83Ch
__text:0000000100000F50 var_838         = dword ptr -838h
__text:0000000100000F50 var_834         = dword ptr -834h
__text:0000000100000F50 var_830         = dword ptr -830h
__text:0000000100000F50 var_82C         = dword ptr -82Ch
__text:0000000100000F50 var_828         = dword ptr -828h
__text:0000000100000F50 var_824         = dword ptr -824h
__text:0000000100000F50 var_820         = byte ptr -820h
__text:0000000100000F50 var_818         = byte ptr -818h
__text:0000000100000F50 var_810         = byte ptr -810h
__text:0000000100000F50 var_800         = byte ptr -800h
__text:0000000100000F50 var_7E8         = byte ptr -7E8h
__text:0000000100000F50 var_7E0         = byte ptr -7E0h
__text:0000000100000F50 var_7D8         = byte ptr -7D8h
__text:0000000100000F50 var_7C8         = byte ptr -7C8h
__text:0000000100000F50 var_7B0         = dword ptr -7B0h
__text:0000000100000F50 var_7AC         = dword ptr -7ACh
__text:0000000100000F50 var_7A8         = dword ptr -7A8h
__text:0000000100000F50 var_7A4         = dword ptr -7A4h
__text:0000000100000F50 var_7A0         = dword ptr -7A0h
__text:0000000100000F50 var_79C         = dword ptr -79Ch
__text:0000000100000F50 var_798         = dword ptr -798h
__text:0000000100000F50 var_794         = dword ptr -794h
__text:0000000100000F50 var_790         = dword ptr -790h
__text:0000000100000F50 var_78C         = dword ptr -78Ch
__text:0000000100000F50 var_788         = dword ptr -788h
__text:0000000100000F50 var_784         = dword ptr -784h
__text:0000000100000F50 var_778         = qword ptr -778h
__text:0000000100000F50 var_770         = qword ptr -770h
__text:0000000100000F50 var_768         = byte ptr -768h
__text:0000000100000F50 var_760         = qword ptr -760h
__text:0000000100000F50 var_758         = qword ptr -758h
__text:0000000100000F50 var_750         = qword ptr -750h
__text:0000000100000F50 var_748         = qword ptr -748h
__text:0000000100000F50 var_740         = qword ptr -740h
__text:0000000100000F50 var_738         = qword ptr -738h
__text:0000000100000F50 var_730         = qword ptr -730h
__text:0000000100000F50 var_718         = qword ptr -718h
__text:0000000100000F50 var_710         = qword ptr -710h
__text:0000000100000F50 var_6F8         = qword ptr -6F8h
__text:0000000100000F50 var_6F0         = qword ptr -6F0h
__text:0000000100000F50 var_6E8         = qword ptr -6E8h
__text:0000000100000F50 var_6E0         = qword ptr -6E0h
__text:0000000100000F50 var_6D8         = qword ptr -6D8h
__text:0000000100000F50 var_6C0         = qword ptr -6C0h
__text:0000000100000F50 var_6B8         = qword ptr -6B8h
__text:0000000100000F50 var_6B0         = qword ptr -6B0h
__text:0000000100000F50 var_6A8         = qword ptr -6A8h
__text:0000000100000F50 var_6A0         = qword ptr -6A0h
__text:0000000100000F50 var_698         = qword ptr -698h
__text:0000000100000F50 var_690         = qword ptr -690h
__text:0000000100000F50 var_688         = qword ptr -688h
__text:0000000100000F50 var_680         = qword ptr -680h
__text:0000000100000F50 var_678         = qword ptr -678h
__text:0000000100000F50 var_670         = qword ptr -670h
__text:0000000100000F50 var_668         = qword ptr -668h
__text:0000000100000F50 var_660         = qword ptr -660h
__text:0000000100000F50 var_658         = qword ptr -658h
__text:0000000100000F50 var_650         = qword ptr -650h
__text:0000000100000F50 var_648         = qword ptr -648h
__text:0000000100000F50 var_640         = qword ptr -640h
__text:0000000100000F50 var_638         = qword ptr -638h
__text:0000000100000F50 var_630         = qword ptr -630h
__text:0000000100000F50 var_628         = qword ptr -628h
__text:0000000100000F50 var_620         = qword ptr -620h
__text:0000000100000F50 var_608         = qword ptr -608h
__text:0000000100000F50 var_600         = qword ptr -600h
__text:0000000100000F50 var_5E8         = qword ptr -5E8h
__text:0000000100000F50 var_5E0         = qword ptr -5E0h
__text:0000000100000F50 var_5D8         = qword ptr -5D8h
__text:0000000100000F50 var_5D0         = qword ptr -5D0h
__text:0000000100000F50 var_5C8         = qword ptr -5C8h
__text:0000000100000F50 var_5B0         = qword ptr -5B0h
__text:0000000100000F50 var_5A8         = qword ptr -5A8h
__text:0000000100000F50 var_5A0         = qword ptr -5A0h
__text:0000000100000F50 var_598         = qword ptr -598h
__text:0000000100000F50 var_590         = qword ptr -590h
__text:0000000100000F50 var_588         = qword ptr -588h
__text:0000000100000F50 var_580         = dword ptr -580h
__text:0000000100000F50 var_57C         = dword ptr -57Ch
__text:0000000100000F50 var_578         = qword ptr -578h
__text:0000000100000F50 var_570         = qword ptr -570h
__text:0000000100000F50 var_568         = qword ptr -568h
__text:0000000100000F50 var_560         = qword ptr -560h
__text:0000000100000F50 var_558         = qword ptr -558h
__text:0000000100000F50 var_550         = qword ptr -550h
__text:0000000100000F50 var_548         = dword ptr -548h
__text:0000000100000F50 var_544         = dword ptr -544h
__text:0000000100000F50 var_540         = qword ptr -540h
__text:0000000100000F50 var_538         = qword ptr -538h
__text:0000000100000F50 var_530         = qword ptr -530h
__text:0000000100000F50 var_528         = qword ptr -528h
__text:0000000100000F50 var_520         = qword ptr -520h
__text:0000000100000F50 var_518         = qword ptr -518h
__text:0000000100000F50 var_510         = qword ptr -510h
__text:0000000100000F50 var_508         = qword ptr -508h
__text:0000000100000F50 var_500         = qword ptr -500h
__text:0000000100000F50 var_4F8         = qword ptr -4F8h
__text:0000000100000F50 var_4F0         = qword ptr -4F0h
__text:0000000100000F50 var_4E8         = qword ptr -4E8h
__text:0000000100000F50 var_4E0         = qword ptr -4E0h
__text:0000000100000F50 var_4D8         = qword ptr -4D8h
__text:0000000100000F50 var_4D0         = qword ptr -4D0h
__text:0000000100000F50 var_4C8         = qword ptr -4C8h
__text:0000000100000F50 var_4C0         = qword ptr -4C0h
__text:0000000100000F50 var_4B8         = qword ptr -4B8h
__text:0000000100000F50 var_4B0         = qword ptr -4B0h
__text:0000000100000F50 var_4A8         = qword ptr -4A8h
__text:0000000100000F50 var_49C         = dword ptr -49Ch
__text:0000000100000F50 var_498         = qword ptr -498h
__text:0000000100000F50 var_490         = qword ptr -490h
__text:0000000100000F50 var_488         = qword ptr -488h
__text:0000000100000F50 var_480         = qword ptr -480h
__text:0000000100000F50 var_478         = qword ptr -478h
__text:0000000100000F50 var_470         = qword ptr -470h
__text:0000000100000F50 var_468         = qword ptr -468h
__text:0000000100000F50 var_460         = qword ptr -460h
__text:0000000100000F50 var_458         = qword ptr -458h
__text:0000000100000F50 var_450         = qword ptr -450h
__text:0000000100000F50 var_448         = qword ptr -448h
__text:0000000100000F50 var_440         = qword ptr -440h
__text:0000000100000F50 var_438         = qword ptr -438h
__text:0000000100000F50 var_430         = qword ptr -430h
__text:0000000100000F50 var_428         = qword ptr -428h
__text:0000000100000F50 var_420         = qword ptr -420h
__text:0000000100000F50 var_418         = qword ptr -418h
__text:0000000100000F50 var_410         = qword ptr -410h
__text:0000000100000F50 var_408         = qword ptr -408h
__text:0000000100000F50 var_400         = qword ptr -400h
__text:0000000100000F50 var_3F8         = qword ptr -3F8h
__text:0000000100000F50 var_3F0         = qword ptr -3F0h
__text:0000000100000F50 var_3E8         = qword ptr -3E8h
__text:0000000100000F50 var_3E0         = qword ptr -3E0h
__text:0000000100000F50 var_3D8         = qword ptr -3D8h
__text:0000000100000F50 var_3D0         = qword ptr -3D0h
__text:0000000100000F50 var_3C8         = qword ptr -3C8h
__text:0000000100000F50 var_3C0         = qword ptr -3C0h
__text:0000000100000F50 var_3B8         = qword ptr -3B8h
__text:0000000100000F50 var_3B0         = qword ptr -3B0h
__text:0000000100000F50 var_3A8         = qword ptr -3A8h
__text:0000000100000F50 var_3A0         = qword ptr -3A0h
__text:0000000100000F50 var_398         = qword ptr -398h
__text:0000000100000F50 var_390         = qword ptr -390h
__text:0000000100000F50 var_388         = qword ptr -388h
__text:0000000100000F50 var_380         = qword ptr -380h
__text:0000000100000F50 var_378         = qword ptr -378h
__text:0000000100000F50 var_370         = qword ptr -370h
__text:0000000100000F50 var_368         = qword ptr -368h
__text:0000000100000F50 var_360         = qword ptr -360h
__text:0000000100000F50 var_358         = qword ptr -358h
__text:0000000100000F50 var_350         = qword ptr -350h
__text:0000000100000F50 var_348         = qword ptr -348h
__text:0000000100000F50 var_340         = qword ptr -340h
__text:0000000100000F50 var_338         = qword ptr -338h
__text:0000000100000F50 var_330         = qword ptr -330h
__text:0000000100000F50 var_328         = dword ptr -328h
__text:0000000100000F50 var_324         = dword ptr -324h
__text:0000000100000F50 var_320         = qword ptr -320h
__text:0000000100000F50 var_318         = qword ptr -318h
__text:0000000100000F50 var_310         = qword ptr -310h
__text:0000000100000F50 var_308         = qword ptr -308h
__text:0000000100000F50 var_300         = qword ptr -300h
__text:0000000100000F50 var_2F8         = qword ptr -2F8h
__text:0000000100000F50 var_2F0         = dword ptr -2F0h
__text:0000000100000F50 var_2EC         = dword ptr -2ECh
__text:0000000100000F50 var_2E8         = qword ptr -2E8h
__text:0000000100000F50 var_2E0         = qword ptr -2E0h
__text:0000000100000F50 var_2D8         = qword ptr -2D8h
__text:0000000100000F50 var_2D0         = qword ptr -2D0h
__text:0000000100000F50 var_2C8         = qword ptr -2C8h
__text:0000000100000F50 var_2C0         = qword ptr -2C0h
__text:0000000100000F50 var_2B8         = qword ptr -2B8h
__text:0000000100000F50 var_2B0         = qword ptr -2B0h
__text:0000000100000F50 var_2A8         = qword ptr -2A8h
__text:0000000100000F50 var_2A0         = qword ptr -2A0h
__text:0000000100000F50 var_298         = qword ptr -298h
__text:0000000100000F50 var_290         = qword ptr -290h
__text:0000000100000F50 var_288         = qword ptr -288h
__text:0000000100000F50 var_280         = qword ptr -280h
__text:0000000100000F50 var_278         = qword ptr -278h
__text:0000000100000F50 var_270         = qword ptr -270h
__text:0000000100000F50 var_268         = qword ptr -268h
__text:0000000100000F50 var_260         = qword ptr -260h
__text:0000000100000F50 var_258         = qword ptr -258h
__text:0000000100000F50 var_250         = qword ptr -250h
__text:0000000100000F50 var_244         = dword ptr -244h
__text:0000000100000F50 var_240         = qword ptr -240h
__text:0000000100000F50 var_238         = qword ptr -238h
__text:0000000100000F50 var_230         = qword ptr -230h
__text:0000000100000F50 var_228         = qword ptr -228h
__text:0000000100000F50 var_220         = qword ptr -220h
__text:0000000100000F50 var_218         = qword ptr -218h
__text:0000000100000F50 var_210         = qword ptr -210h
__text:0000000100000F50 var_208         = qword ptr -208h
__text:0000000100000F50 var_200         = qword ptr -200h
__text:0000000100000F50 var_1F8         = qword ptr -1F8h
__text:0000000100000F50 var_1F0         = qword ptr -1F0h
__text:0000000100000F50 var_1E8         = qword ptr -1E8h
__text:0000000100000F50 var_1E0         = qword ptr -1E0h
__text:0000000100000F50 var_1D8         = qword ptr -1D8h
__text:0000000100000F50 var_1D0         = qword ptr -1D0h
__text:0000000100000F50 var_1C8         = qword ptr -1C8h
__text:0000000100000F50 var_1C0         = qword ptr -1C0h
__text:0000000100000F50 var_1B8         = qword ptr -1B8h
__text:0000000100000F50 var_1B0         = qword ptr -1B0h
__text:0000000100000F50 var_1A8         = qword ptr -1A8h
__text:0000000100000F50 var_1A0         = qword ptr -1A0h
__text:0000000100000F50 var_198         = qword ptr -198h
__text:0000000100000F50 var_190         = qword ptr -190h
__text:0000000100000F50 var_188         = qword ptr -188h
__text:0000000100000F50 var_180         = qword ptr -180h
__text:0000000100000F50 var_178         = qword ptr -178h
__text:0000000100000F50 var_170         = qword ptr -170h
__text:0000000100000F50 var_168         = qword ptr -168h
__text:0000000100000F50 var_160         = qword ptr -160h
__text:0000000100000F50 var_158         = qword ptr -158h
__text:0000000100000F50 var_150         = qword ptr -150h
__text:0000000100000F50 var_148         = qword ptr -148h
__text:0000000100000F50 var_140         = qword ptr -140h
__text:0000000100000F50 var_138         = qword ptr -138h
__text:0000000100000F50 var_130         = qword ptr -130h
__text:0000000100000F50 var_128         = qword ptr -128h
__text:0000000100000F50 var_120         = qword ptr -120h
__text:0000000100000F50 var_118         = qword ptr -118h
__text:0000000100000F50 var_110         = qword ptr -110h
__text:0000000100000F50 var_108         = qword ptr -108h
__text:0000000100000F50 var_100         = qword ptr -100h
__text:0000000100000F50 var_F8          = qword ptr -0F8h
__text:0000000100000F50 var_F0          = qword ptr -0F0h
__text:0000000100000F50 var_E8          = qword ptr -0E8h
__text:0000000100000F50 var_E0          = qword ptr -0E0h
__text:0000000100000F50 var_D8          = qword ptr -0D8h
__text:0000000100000F50 var_D0          = qword ptr -0D0h
__text:0000000100000F50 var_C8          = qword ptr -0C8h
__text:0000000100000F50 var_C0          = qword ptr -0C0h
__text:0000000100000F50 var_B8          = qword ptr -0B8h
__text:0000000100000F50 var_B0          = qword ptr -0B0h
__text:0000000100000F50 var_A8          = qword ptr -0A8h
__text:0000000100000F50 var_A0          = qword ptr -0A0h
__text:0000000100000F50 var_98          = qword ptr -98h
__text:0000000100000F50 var_90          = qword ptr -90h
__text:0000000100000F50 var_88          = qword ptr -88h
__text:0000000100000F50 var_80          = qword ptr -80h
__text:0000000100000F50 var_78          = qword ptr -78h
__text:0000000100000F50 var_70          = qword ptr -70h
__text:0000000100000F50 var_68          = qword ptr -68h
__text:0000000100000F50 var_60          = qword ptr -60h
__text:0000000100000F50 var_58          = qword ptr -58h
__text:0000000100000F50 var_50          = qword ptr -50h
__text:0000000100000F50 var_48          = qword ptr -48h
__text:0000000100000F50 var_40          = qword ptr -40h
__text:0000000100000F50 var_38          = qword ptr -38h
__text:0000000100000F50 var_30          = qword ptr -30h
__text:0000000100000F50 var_28          = qword ptr -28h
__text:0000000100000F50
__text:0000000100000F50                 push    rbp
__text:0000000100000F51                 mov     rbp, rsp
__text:0000000100000F54                 push    r15
__text:0000000100000F56                 push    r14
__text:0000000100000F58                 push    r12
__text:0000000100000F5A                 push    rbx
__text:0000000100000F5B                 sub     rsp, 960h
__text:0000000100000F62                 mov     rdi, cs:__ZNSt3__13cinE_ptr
__text:0000000100000F69                 lea     rsi, [rbp+var_788]
__text:0000000100000F70                 mov     [rbp+var_784], 0
__text:0000000100000F7A                 call    __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi ; std::__1::basic_istream<char,std::__1::char_traits<char>>::operator>>(int &)
__text:0000000100000F7F                 mov     [rbp+var_78C], 1
__text:0000000100000F89                 mov     [rbp+var_8B0], rax
__text:0000000100000F90
__text:0000000100000F90 loc_100000F90:                          ; CODE XREF: _main+2275↓j
__text:0000000100000F90                 mov     eax, [rbp+var_78C]
__text:0000000100000F96                 cmp     eax, [rbp+var_788]
__text:0000000100000F9C                 jg      loc_1000031CA
__text:0000000100000FA2                 lea     rdi, aDD        ; "%d%d"
__text:0000000100000FA9                 lea     rsi, _n
__text:0000000100000FB0                 lea     rdx, _m
__text:0000000100000FB7                 mov     al, 0
__text:0000000100000FB9                 call    _scanf
__text:0000000100000FBE                 mov     [rbp+var_790], 1
__text:0000000100000FC8                 mov     [rbp+var_8B4], eax
__text:0000000100000FCE
__text:0000000100000FCE loc_100000FCE:                          ; CODE XREF: _main+1C4↓j
__text:0000000100000FCE                 mov     eax, [rbp+var_790]
__text:0000000100000FD4                 mov     ecx, cs:_n
__text:0000000100000FDA                 shl     ecx, 1
__text:0000000100000FDD                 sub     ecx, 1
__text:0000000100000FE3                 cmp     eax, ecx
__text:0000000100000FE5                 jg      loc_100001119
__text:0000000100000FEB                 mov     eax, cs:_n
__text:0000000100000FF1                 shl     eax, 1
__text:0000000100000FF4                 mov     ecx, cs:_n
__text:0000000100000FFA                 sub     ecx, [rbp+var_790]
__text:0000000100001000                 mov     edi, ecx        ; int
__text:0000000100001002                 mov     [rbp+var_8B8], eax
__text:0000000100001008                 call    _abs
__text:000000010000100D                 lea     rdx, [rbp+var_768]
__text:0000000100001014                 lea     rsi, [rbp+var_798]
__text:000000010000101B                 lea     r8, [rbp+var_794]
__text:0000000100001022                 lea     r9, _w
__text:0000000100001029                 mov     ecx, [rbp+var_8B8]
__text:000000010000102F                 sub     ecx, eax
__text:0000000100001031                 sub     ecx, 1
__text:0000000100001037                 movsxd  r10, [rbp+var_790]
__text:000000010000103E                 mov     [r9+r10*4], ecx
__text:0000000100001042                 mov     [rbp+var_794], 1
__text:000000010000104C                 mov     eax, [rbp+var_790]
__text:0000000100001052                 sub     eax, cs:_n
__text:0000000100001058                 add     eax, 1
__text:000000010000105D                 mov     [rbp+var_798], eax
__text:0000000100001063                 mov     [rbp+var_770], r8
__text:000000010000106A                 mov     [rbp+var_778], rsi
__text:0000000100001071                 mov     rsi, [rbp+var_770]
__text:0000000100001078                 mov     r8, [rbp+var_778]
__text:000000010000107F                 mov     [rbp+var_758], rsi
__text:0000000100001086                 mov     [rbp+var_760], r8
__text:000000010000108D                 mov     rsi, [rbp+var_758]
__text:0000000100001094                 mov     r8, [rbp+var_760]
__text:000000010000109B                 mov     [rbp+var_740], rdx
__text:00000001000010A2                 mov     [rbp+var_748], rsi
__text:00000001000010A9                 mov     [rbp+var_750], r8
__text:00000001000010B0                 mov     rdx, [rbp+var_748]
__text:00000001000010B7                 mov     eax, [rdx]
__text:00000001000010B9                 mov     rdx, [rbp+var_750]
__text:00000001000010C0                 cmp     eax, [rdx]
__text:00000001000010C2                 jge     loc_1000010DB
__text:00000001000010C8                 mov     rax, [rbp+var_760]
__text:00000001000010CF                 mov     [rbp+var_8C0], rax
__text:00000001000010D6                 jmp     loc_1000010E9
__text:00000001000010DB ; ---------------------------------------------------------------------------
__text:00000001000010DB
__text:00000001000010DB loc_1000010DB:                          ; CODE XREF: _main+172↑j
__text:00000001000010DB                 mov     rax, [rbp+var_758]
__text:00000001000010E2                 mov     [rbp+var_8C0], rax
__text:00000001000010E9
__text:00000001000010E9 loc_1000010E9:                          ; CODE XREF: _main+186↑j
__text:00000001000010E9                 mov     rax, [rbp+var_8C0]
__text:00000001000010F0                 lea     rcx, _f
__text:00000001000010F7                 mov     edx, [rax]
__text:00000001000010F9                 movsxd  rax, [rbp+var_790]
__text:0000000100001100                 mov     [rcx+rax*4], edx
__text:0000000100001103                 mov     eax, [rbp+var_790]
__text:0000000100001109                 add     eax, 1
__text:000000010000110E                 mov     [rbp+var_790], eax
__text:0000000100001114                 jmp     loc_100000FCE
__text:0000000100001119 ; ---------------------------------------------------------------------------
__text:0000000100001119
__text:0000000100001119 loc_100001119:                          ; CODE XREF: _main+95↑j
__text:0000000100001119                 lea     rax, _v
__text:0000000100001120                 mov     ecx, cs:_ct
__text:0000000100001126                 add     ecx, 1
__text:000000010000112C                 mov     cs:_ct, ecx
__text:0000000100001132                 mov     [rbp+var_718], rax
__text:0000000100001139                 mov     rax, [rbp+var_718]
__text:0000000100001140                 mov     rdx, rax
__text:0000000100001143                 mov     [rbp+var_710], rdx
__text:000000010000114A                 mov     rdx, [rbp+var_710]
__text:0000000100001151                 mov     rsi, [rdx]
__text:0000000100001154                 mov     [rbp+var_6F0], rdx
__text:000000010000115B                 mov     [rbp+var_6F8], rsi
__text:0000000100001162                 mov     rdx, [rbp+var_6F0]
__text:0000000100001169                 mov     [rbp+var_8C8], rax
__text:0000000100001170                 mov     [rbp+var_8D0], rdx
__text:0000000100001177
__text:0000000100001177 loc_100001177:                          ; CODE XREF: _main+2BE↓j
__text:0000000100001177                 mov     rax, [rbp+var_6F8]
__text:000000010000117E                 mov     rcx, [rbp+var_8D0]
__text:0000000100001185                 cmp     rax, [rcx+8]
__text:0000000100001189                 jz      loc_100001213
__text:000000010000118F                 mov     rax, [rbp+var_8D0]
__text:0000000100001196                 mov     [rbp+var_6E8], rax
__text:000000010000119D                 mov     rcx, [rbp+var_6E8]
__text:00000001000011A4                 add     rcx, 10h
__text:00000001000011AB                 mov     [rbp+var_6E0], rcx
__text:00000001000011B2                 mov     rcx, [rbp+var_6E0]
__text:00000001000011B9                 mov     [rbp+var_6D8], rcx
__text:00000001000011C0                 mov     rcx, [rbp+var_6D8]
__text:00000001000011C7                 mov     rdx, [rax+8]
__text:00000001000011CB                 add     rdx, 0FFFFFFFFFFFFFFECh
__text:00000001000011D2                 mov     [rax+8], rdx
__text:00000001000011D6                 mov     [rbp+var_6A0], rdx
__text:00000001000011DD                 mov     rdx, [rbp+var_6A0]
__text:00000001000011E4                 mov     [rbp+var_6B8], rcx
__text:00000001000011EB                 mov     [rbp+var_6C0], rdx
__text:00000001000011F2                 mov     rcx, [rbp+var_6B8]
__text:00000001000011F9                 mov     rdx, [rbp+var_6C0]
__text:0000000100001200                 mov     [rbp+var_6A8], rcx
__text:0000000100001207                 mov     [rbp+var_6B0], rdx
__text:000000010000120E                 jmp     loc_100001177
__text:0000000100001213 ; ---------------------------------------------------------------------------
__text:0000000100001213
__text:0000000100001213 loc_100001213:                          ; CODE XREF: _main+239↑j
__text:0000000100001213                 lea     rax, _u
__text:000000010000121A                 mov     rcx, [rbp+var_8C8]
__text:0000000100001221                 mov     [rbp+var_698], rcx
__text:0000000100001228                 mov     [rbp+var_608], rax
__text:000000010000122F                 mov     rax, [rbp+var_608]
__text:0000000100001236                 mov     rdx, rax
__text:0000000100001239                 mov     [rbp+var_600], rdx
__text:0000000100001240                 mov     rdx, [rbp+var_600]
__text:0000000100001247                 mov     rsi, [rdx]
__text:000000010000124A                 mov     [rbp+var_5E0], rdx
__text:0000000100001251                 mov     [rbp+var_5E8], rsi
__text:0000000100001258                 mov     rdx, [rbp+var_5E0]
__text:000000010000125F                 mov     [rbp+var_8D8], rax
__text:0000000100001266                 mov     [rbp+var_8E0], rdx
__text:000000010000126D
__text:000000010000126D loc_10000126D:                          ; CODE XREF: _main+3B4↓j
__text:000000010000126D                 mov     rax, [rbp+var_5E8]
__text:0000000100001274                 mov     rcx, [rbp+var_8E0]
__text:000000010000127B                 cmp     rax, [rcx+8]
__text:000000010000127F                 jz      loc_100001309
__text:0000000100001285                 mov     rax, [rbp+var_8E0]
__text:000000010000128C                 mov     [rbp+var_5D8], rax
__text:0000000100001293                 mov     rcx, [rbp+var_5D8]
__text:000000010000129A                 add     rcx, 10h
__text:00000001000012A1                 mov     [rbp+var_5D0], rcx
__text:00000001000012A8                 mov     rcx, [rbp+var_5D0]
__text:00000001000012AF                 mov     [rbp+var_5C8], rcx
__text:00000001000012B6                 mov     rcx, [rbp+var_5C8]
__text:00000001000012BD                 mov     rdx, [rax+8]
__text:00000001000012C1                 add     rdx, 0FFFFFFFFFFFFFFECh
__text:00000001000012C8                 mov     [rax+8], rdx
__text:00000001000012CC                 mov     [rbp+var_590], rdx
__text:00000001000012D3                 mov     rdx, [rbp+var_590]
__text:00000001000012DA                 mov     [rbp+var_5A8], rcx
__text:00000001000012E1                 mov     [rbp+var_5B0], rdx
__text:00000001000012E8                 mov     rcx, [rbp+var_5A8]
__text:00000001000012EF                 mov     rdx, [rbp+var_5B0]
__text:00000001000012F6                 mov     [rbp+var_598], rcx
__text:00000001000012FD                 mov     [rbp+var_5A0], rdx
__text:0000000100001304                 jmp     loc_10000126D
__text:0000000100001309 ; ---------------------------------------------------------------------------
__text:0000000100001309
__text:0000000100001309 loc_100001309:                          ; CODE XREF: _main+32F↑j
__text:0000000100001309                 mov     rax, [rbp+var_8D8]
__text:0000000100001310                 mov     [rbp+var_588], rax
__text:0000000100001317                 mov     [rbp+var_79C], 0
__text:0000000100001321
__text:0000000100001321 loc_100001321:                          ; CODE XREF: _main+10F3↓j
__text:0000000100001321                 mov     eax, [rbp+var_79C]
__text:0000000100001327                 cmp     eax, cs:_m
__text:000000010000132D                 jge     loc_100002048
__text:0000000100001333                 lea     rdi, aDD        ; "%d%d"
__text:000000010000133A                 lea     rsi, [rbp+var_7A0]
__text:0000000100001341                 lea     rdx, [rbp+var_7A4]
__text:0000000100001348                 mov     al, 0
__text:000000010000134A                 call    _scanf
__text:000000010000134F                 lea     rdx, _was
__text:0000000100001356                 lea     rsi, _y
__text:000000010000135D                 lea     rdi, _x
__text:0000000100001364                 mov     ecx, [rbp+var_7A0]
__text:000000010000136A                 movsxd  r8, [rbp+var_79C]
__text:0000000100001371                 mov     [rdi+r8*4], ecx
__text:0000000100001375                 mov     ecx, [rbp+var_7A4]
__text:000000010000137B                 movsxd  rdi, [rbp+var_79C]
__text:0000000100001382                 mov     [rsi+rdi*4], ecx
__text:0000000100001385                 mov     ecx, cs:_ct
__text:000000010000138B                 movsxd  rsi, [rbp+var_7A4]
__text:0000000100001392                 movsxd  rdi, [rbp+var_7A0]
__text:0000000100001399                 imul    rdi, 5DC4h
__text:00000001000013A0                 add     rdx, rdi
__text:00000001000013A3                 mov     [rdx+rsi*4], ecx
__text:00000001000013A6                 mov     [rbp+var_7A8], 0
__text:00000001000013B0                 mov     [rbp+var_8E4], eax
__text:00000001000013B6
__text:00000001000013B6 loc_1000013B6:                          ; CODE XREF: _main+10D8↓j
__text:00000001000013B6                 cmp     [rbp+var_7A8], 6
__text:00000001000013C0                 jge     loc_10000202D
__text:00000001000013C6                 lea     rax, _was
__text:00000001000013CD                 lea     rcx, __ZL2dj    ; dj
__text:00000001000013D4                 lea     rdx, __ZL2di    ; di
__text:00000001000013DB                 mov     esi, [rbp+var_7A0]
__text:00000001000013E1                 movsxd  rdi, [rbp+var_7A8]
__text:00000001000013E8                 add     esi, [rdx+rdi*4]
__text:00000001000013EB                 mov     [rbp+var_7AC], esi
__text:00000001000013F1                 mov     esi, [rbp+var_7A4]
__text:00000001000013F7                 movsxd  rdx, [rbp+var_7A8]
__text:00000001000013FE                 add     esi, [rcx+rdx*4]
__text:0000000100001401                 mov     [rbp+var_7B0], esi
__text:0000000100001407                 movsxd  rcx, [rbp+var_7B0]
__text:000000010000140E                 movsxd  rdx, [rbp+var_7AC]
__text:0000000100001415                 imul    rdx, 5DC4h
__text:000000010000141C                 add     rax, rdx
__text:000000010000141F                 mov     esi, [rax+rcx*4]
__text:0000000100001422                 cmp     esi, cs:_ct
__text:0000000100001428                 jz      loc_1000019FB
__text:000000010000142E                 lea     rax, [rbp+var_7C8]
__text:0000000100001435                 lea     rcx, _v
__text:000000010000143C                 lea     rdx, [rbp+var_49C]
__text:0000000100001443                 lea     rsi, [rbp+var_7D8]
__text:000000010000144A                 lea     rdi, [rbp+var_7E8]
__text:0000000100001451                 lea     r8, [rbp+var_7E0]
__text:0000000100001458                 lea     r9, [rbp+var_548]
__text:000000010000145F                 lea     r10, [rbp+var_544]
__text:0000000100001466                 lea     r11, [rbp+var_580]
__text:000000010000146D                 lea     rbx, [rbp+var_57C]
__text:0000000100001474                 mov     r14d, [rbp+var_7A0]
__text:000000010000147B                 mov     r15d, [rbp+var_7A4]
__text:0000000100001482                 mov     [rbp+var_57C], r14d
__text:0000000100001489                 mov     [rbp+var_580], r15d
__text:0000000100001490                 mov     [rbp+var_568], r8
__text:0000000100001497                 mov     [rbp+var_570], rbx
__text:000000010000149E                 mov     [rbp+var_578], r11
__text:00000001000014A5                 mov     r11, [rbp+var_568]
__text:00000001000014AC                 mov     rbx, [rbp+var_570]
__text:00000001000014B3                 mov     r12, [rbp+var_578]
__text:00000001000014BA                 mov     [rbp+var_550], r11
__text:00000001000014C1                 mov     [rbp+var_558], rbx
__text:00000001000014C8                 mov     [rbp+var_560], r12
__text:00000001000014CF                 mov     r11, [rbp+var_550]
__text:00000001000014D6                 mov     rbx, [rbp+var_558]
__text:00000001000014DD                 mov     r14d, [rbx]
__text:00000001000014E0                 mov     [r11], r14d
__text:00000001000014E3                 mov     rbx, [rbp+var_560]
__text:00000001000014EA                 mov     r14d, [rbx]
__text:00000001000014ED                 mov     [r11+4], r14d
__text:00000001000014F1                 mov     r14d, [rbp+var_7AC]
__text:00000001000014F8                 mov     r15d, [rbp+var_7B0]
__text:00000001000014FF                 mov     [rbp+var_544], r14d
__text:0000000100001506                 mov     [rbp+var_548], r15d
__text:000000010000150D                 mov     [rbp+var_530], rdi
__text:0000000100001514                 mov     [rbp+var_538], r10
__text:000000010000151B                 mov     [rbp+var_540], r9
__text:0000000100001522                 mov     r9, [rbp+var_530]
__text:0000000100001529                 mov     r10, [rbp+var_538]
__text:0000000100001530                 mov     r11, [rbp+var_540]
__text:0000000100001537                 mov     [rbp+var_518], r9
__text:000000010000153E                 mov     [rbp+var_520], r10
__text:0000000100001545                 mov     [rbp+var_528], r11
__text:000000010000154C                 mov     r9, [rbp+var_518]
__text:0000000100001553                 mov     r10, [rbp+var_520]
__text:000000010000155A                 mov     r14d, [r10]
__text:000000010000155D                 mov     [r9], r14d
__text:0000000100001560                 mov     r10, [rbp+var_528]
__text:0000000100001567                 mov     r14d, [r10]
__text:000000010000156A                 mov     [r9+4], r14d
__text:000000010000156E                 mov     [rbp+var_500], rsi
__text:0000000100001575                 mov     [rbp+var_508], r8
__text:000000010000157C                 mov     [rbp+var_510], rdi
__text:0000000100001583                 mov     rdi, [rbp+var_500]
__text:000000010000158A                 mov     r8, [rbp+var_508]
__text:0000000100001591                 mov     r9, [rbp+var_510]
__text:0000000100001598                 mov     [rbp+var_4E8], rdi
__text:000000010000159F                 mov     [rbp+var_4F0], r8
__text:00000001000015A6                 mov     [rbp+var_4F8], r9
__text:00000001000015AD                 mov     rdi, [rbp+var_4E8]
__text:00000001000015B4                 mov     r8, [rbp+var_4F0]
__text:00000001000015BB                 mov     [rbp+var_4D8], rdi
__text:00000001000015C2                 mov     [rbp+var_4E0], r8
__text:00000001000015C9                 mov     r8, [rbp+var_4D8]
__text:00000001000015D0                 mov     r9, [rbp+var_4E0]
__text:00000001000015D7                 mov     [rbp+var_4C8], r8
__text:00000001000015DE                 mov     [rbp+var_4D0], r9
__text:00000001000015E5                 mov     r8, [rbp+var_4C8]
__text:00000001000015EC                 mov     r9, [rbp+var_4D0]
__text:00000001000015F3                 mov     r14d, [r9]
__text:00000001000015F6                 mov     [r8], r14d
__text:00000001000015F9                 mov     r9, [rbp+var_4D0]
__text:0000000100001600                 mov     r14d, [r9+4]
__text:0000000100001604                 mov     [r8+4], r14d
__text:0000000100001608                 add     rdi, 8
__text:000000010000160F                 mov     r8, [rbp+var_4F8]
__text:0000000100001616                 mov     [rbp+var_4B8], rdi
__text:000000010000161D                 mov     [rbp+var_4C0], r8
__text:0000000100001624                 mov     rdi, [rbp+var_4B8]
__text:000000010000162B                 mov     r8, [rbp+var_4C0]
__text:0000000100001632                 mov     [rbp+var_4A8], rdi
__text:0000000100001639                 mov     [rbp+var_4B0], r8
__text:0000000100001640                 mov     rdi, [rbp+var_4A8]
__text:0000000100001647                 mov     r8, [rbp+var_4B0]
__text:000000010000164E                 mov     r14d, [r8]
__text:0000000100001651                 mov     [rdi], r14d
__text:0000000100001654                 mov     r8, [rbp+var_4B0]
__text:000000010000165B                 mov     r14d, [r8+4]
__text:000000010000165F                 mov     [rdi+4], r14d
__text:0000000100001663                 mov     r14d, [rbp+var_79C]
__text:000000010000166A                 mov     [rbp+var_49C], r14d
__text:0000000100001671                 mov     [rbp+var_488], rax
__text:0000000100001678                 mov     [rbp+var_490], rsi
__text:000000010000167F                 mov     [rbp+var_498], rdx
__text:0000000100001686                 mov     rdx, [rbp+var_488]
__text:000000010000168D                 mov     rsi, [rbp+var_498]
__text:0000000100001694                 mov     rdi, [rbp+var_490]
__text:000000010000169B                 mov     [rbp+var_470], rdx
__text:00000001000016A2                 mov     [rbp+var_478], rdi
__text:00000001000016A9                 mov     [rbp+var_480], rsi
__text:00000001000016B0                 mov     rdx, [rbp+var_470]
__text:00000001000016B7                 mov     rsi, [rbp+var_478]
__text:00000001000016BE                 mov     [rbp+var_460], rdx
__text:00000001000016C5                 mov     [rbp+var_468], rsi
__text:00000001000016CC                 mov     rsi, [rbp+var_460]
__text:00000001000016D3                 mov     rdi, [rbp+var_468]
__text:00000001000016DA                 mov     [rbp+var_450], rsi
__text:00000001000016E1                 mov     [rbp+var_458], rdi
__text:00000001000016E8                 mov     rsi, [rbp+var_450]
__text:00000001000016EF                 mov     rdi, [rbp+var_458]
__text:00000001000016F6                 mov     [rbp+var_440], rsi
__text:00000001000016FD                 mov     [rbp+var_448], rdi
__text:0000000100001704                 mov     rdi, [rbp+var_440]
__text:000000010000170B                 mov     r8, [rbp+var_448]
__text:0000000100001712                 mov     [rbp+var_430], rdi
__text:0000000100001719                 mov     [rbp+var_438], r8
__text:0000000100001720                 mov     rdi, [rbp+var_430]
__text:0000000100001727                 mov     r8, [rbp+var_438]
__text:000000010000172E                 mov     r14d, [r8]
__text:0000000100001731                 mov     [rdi], r14d
__text:0000000100001734                 mov     r8, [rbp+var_438]
__text:000000010000173B                 mov     r14d, [r8+4]
__text:000000010000173F                 mov     [rdi+4], r14d
__text:0000000100001743                 add     rsi, 8
__text:000000010000174A                 mov     rdi, [rbp+var_458]
__text:0000000100001751                 add     rdi, 8
__text:0000000100001758                 mov     [rbp+var_420], rsi
__text:000000010000175F                 mov     [rbp+var_428], rdi
__text:0000000100001766                 mov     rsi, [rbp+var_420]
__text:000000010000176D                 mov     rdi, [rbp+var_428]
__text:0000000100001774                 mov     [rbp+var_410], rsi
__text:000000010000177B                 mov     [rbp+var_418], rdi
__text:0000000100001782                 mov     rsi, [rbp+var_410]
__text:0000000100001789                 mov     rdi, [rbp+var_418]
__text:0000000100001790                 mov     r14d, [rdi]
__text:0000000100001793                 mov     [rsi], r14d
__text:0000000100001796                 mov     rdi, [rbp+var_418]
__text:000000010000179D                 mov     r14d, [rdi+4]
__text:00000001000017A1                 mov     [rsi+4], r14d
__text:00000001000017A5                 mov     rsi, [rbp+var_480]
__text:00000001000017AC                 mov     r14d, [rsi]
__text:00000001000017AF                 mov     [rdx+10h], r14d
__text:00000001000017B3                 mov     [rbp+var_400], rcx
__text:00000001000017BA                 mov     [rbp+var_408], rax
__text:00000001000017C1                 mov     rax, [rbp+var_400]
__text:00000001000017C8                 mov     rcx, [rax+8]
__text:00000001000017CC                 mov     rdx, rax
__text:00000001000017CF                 mov     [rbp+var_3F8], rdx
__text:00000001000017D6                 mov     rdx, [rbp+var_3F8]
__text:00000001000017DD                 add     rdx, 10h
__text:00000001000017E4                 mov     [rbp+var_3F0], rdx
__text:00000001000017EB                 mov     rdx, [rbp+var_3F0]
__text:00000001000017F2                 mov     [rbp+var_3E8], rdx
__text:00000001000017F9                 mov     rdx, [rbp+var_3E8]
__text:0000000100001800                 cmp     rcx, [rdx]
__text:0000000100001803                 mov     [rbp+var_8F0], rax
__text:000000010000180A                 jz      loc_1000019E3
__text:0000000100001810                 mov     rax, [rbp+var_8F0]
__text:0000000100001817                 mov     [rbp+var_3E0], rax
__text:000000010000181E                 mov     rax, [rbp+var_3E0]
__text:0000000100001825                 add     rax, 10h
__text:000000010000182B                 mov     [rbp+var_3D8], rax
__text:0000000100001832                 mov     rax, [rbp+var_3D8]
__text:0000000100001839                 mov     [rbp+var_3D0], rax
__text:0000000100001840                 mov     rax, [rbp+var_3D0]
__text:0000000100001847                 mov     rcx, [rbp+var_8F0]
__text:000000010000184E                 mov     rdx, [rcx+8]
__text:0000000100001852                 mov     [rbp+var_330], rdx
__text:0000000100001859                 mov     rdx, [rbp+var_330]
__text:0000000100001860                 mov     rsi, [rbp+var_408]
__text:0000000100001867                 mov     [rbp+var_3B8], rax
__text:000000010000186E                 mov     [rbp+var_3C0], rdx
__text:0000000100001875                 mov     [rbp+var_3C8], rsi
__text:000000010000187C                 mov     rax, [rbp+var_3C0]
__text:0000000100001883                 cmp     rax, 0
__text:0000000100001889                 mov     [rbp+var_8F8], rax
__text:0000000100001890                 jz      loc_1000019C8
__text:0000000100001896                 mov     rax, [rbp+var_8F8]
__text:000000010000189D                 mov     rcx, [rbp+var_3C8]
__text:00000001000018A4                 mov     [rbp+var_3A8], rax
__text:00000001000018AB                 mov     [rbp+var_3B0], rcx
__text:00000001000018B2                 mov     rax, [rbp+var_3A8]
__text:00000001000018B9                 mov     rcx, [rbp+var_3B0]
__text:00000001000018C0                 mov     [rbp+var_398], rax
__text:00000001000018C7                 mov     [rbp+var_3A0], rcx
__text:00000001000018CE                 mov     rax, [rbp+var_398]
__text:00000001000018D5                 mov     rcx, [rbp+var_3A0]
__text:00000001000018DC                 mov     [rbp+var_388], rax
__text:00000001000018E3                 mov     [rbp+var_390], rcx
__text:00000001000018EA                 mov     rcx, [rbp+var_388]
__text:00000001000018F1                 mov     rdx, [rbp+var_390]
__text:00000001000018F8                 mov     [rbp+var_378], rcx
__text:00000001000018FF                 mov     [rbp+var_380], rdx
__text:0000000100001906                 mov     rcx, [rbp+var_378]
__text:000000010000190D                 mov     rdx, [rbp+var_380]
__text:0000000100001914                 mov     [rbp+var_368], rcx
__text:000000010000191B                 mov     [rbp+var_370], rdx
__text:0000000100001922                 mov     rdx, [rbp+var_368]
__text:0000000100001929                 mov     rsi, [rbp+var_370]
__text:0000000100001930                 mov     [rbp+var_358], rdx
__text:0000000100001937                 mov     [rbp+var_360], rsi
__text:000000010000193E                 mov     rdx, [rbp+var_358]
__text:0000000100001945                 mov     rsi, [rbp+var_360]
__text:000000010000194C                 mov     edi, [rsi]
__text:000000010000194E                 mov     [rdx], edi
__text:0000000100001950                 mov     rsi, [rbp+var_360]
__text:0000000100001957                 mov     edi, [rsi+4]
__text:000000010000195A                 mov     [rdx+4], edi
__text:000000010000195D                 add     rcx, 8
__text:0000000100001964                 mov     rdx, [rbp+var_380]
__text:000000010000196B                 add     rdx, 8
__text:0000000100001972                 mov     [rbp+var_348], rcx
__text:0000000100001979                 mov     [rbp+var_350], rdx
__text:0000000100001980                 mov     rcx, [rbp+var_348]
__text:0000000100001987                 mov     rdx, [rbp+var_350]
__text:000000010000198E                 mov     [rbp+var_338], rcx
__text:0000000100001995                 mov     [rbp+var_340], rdx
__text:000000010000199C                 mov     rcx, [rbp+var_338]
__text:00000001000019A3                 mov     rdx, [rbp+var_340]
__text:00000001000019AA                 mov     edi, [rdx]
__text:00000001000019AC                 mov     [rcx], edi
__text:00000001000019AE                 mov     rdx, [rbp+var_340]
__text:00000001000019B5                 mov     edi, [rdx+4]
__text:00000001000019B8                 mov     [rcx+4], edi
__text:00000001000019BB                 mov     rcx, [rbp+var_3A0]
__text:00000001000019C2                 mov     edi, [rcx+10h]
__text:00000001000019C5                 mov     [rax+10h], edi
__text:00000001000019C8
__text:00000001000019C8 loc_1000019C8:                          ; CODE XREF: _main+940↑j
__text:00000001000019C8                 mov     rax, [rbp+var_8F0]
__text:00000001000019CF                 mov     rcx, [rax+8]
__text:00000001000019D3                 add     rcx, 14h
__text:00000001000019DA                 mov     [rax+8], rcx
__text:00000001000019DE                 jmp     loc_1000019F6
__text:00000001000019E3 ; ---------------------------------------------------------------------------
__text:00000001000019E3
__text:00000001000019E3 loc_1000019E3:                          ; CODE XREF: _main+8BA↑j
__text:00000001000019E3                 mov     rsi, [rbp+var_408]
__text:00000001000019EA                 mov     rdi, [rbp+var_8F0]
__text:00000001000019F1                 call    j___ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEE21__push_back_slow_pathIKS4_EEvRT_ ; std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::__push_back_slow_path<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const>(std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const &)
__text:00000001000019F6
__text:00000001000019F6 loc_1000019F6:                          ; CODE XREF: _main+A8E↑j
__text:00000001000019F6                 jmp     $+5
__text:00000001000019FB ; ---------------------------------------------------------------------------
__text:00000001000019FB
__text:00000001000019FB loc_1000019FB:                          ; CODE XREF: _main+4D8↑j
__text:00000001000019FB                                         ; _main:loc_1000019F6↑j
__text:00000001000019FB                 lea     rax, _was
__text:0000000100001A02                 movsxd  rcx, [rbp+var_7B0]
__text:0000000100001A09                 movsxd  rdx, [rbp+var_7AC]
__text:0000000100001A10                 imul    rdx, 5DC4h
__text:0000000100001A17                 add     rax, rdx
__text:0000000100001A1A                 mov     esi, [rax+rcx*4]
__text:0000000100001A1D                 cmp     esi, cs:_ct
__text:0000000100001A23                 jnz     loc_100002012
__text:0000000100001A29                 mov     edi, [rbp+var_7AC] ; int
__text:0000000100001A2F                 mov     esi, [rbp+var_7B0] ; int
__text:0000000100001A35                 call    __Z4goodii      ; good(int,int)
__text:0000000100001A3A                 cmp     eax, 0
__text:0000000100001A3F                 jz      loc_100002012
__text:0000000100001A45                 lea     rax, [rbp+var_800]
__text:0000000100001A4C                 lea     rcx, _u
__text:0000000100001A53                 lea     rdx, [rbp+var_244]
__text:0000000100001A5A                 lea     rsi, [rbp+var_810]
__text:0000000100001A61                 lea     rdi, [rbp+var_820]
__text:0000000100001A68                 lea     r8, [rbp+var_818]
__text:0000000100001A6F                 lea     r9, [rbp+var_2F0]
__text:0000000100001A76                 lea     r10, [rbp+var_2EC]
__text:0000000100001A7D                 lea     r11, [rbp+var_328]
__text:0000000100001A84                 lea     rbx, [rbp+var_324]
__text:0000000100001A8B                 mov     r14d, [rbp+var_7A0]
__text:0000000100001A92                 mov     r15d, [rbp+var_7A4]
__text:0000000100001A99                 mov     [rbp+var_324], r14d
__text:0000000100001AA0                 mov     [rbp+var_328], r15d
__text:0000000100001AA7                 mov     [rbp+var_310], r8
__text:0000000100001AAE                 mov     [rbp+var_318], rbx
__text:0000000100001AB5                 mov     [rbp+var_320], r11
__text:0000000100001ABC                 mov     r11, [rbp+var_310]
__text:0000000100001AC3                 mov     rbx, [rbp+var_318]
__text:0000000100001ACA                 mov     r12, [rbp+var_320]
__text:0000000100001AD1                 mov     [rbp+var_2F8], r11
__text:0000000100001AD8                 mov     [rbp+var_300], rbx
__text:0000000100001ADF                 mov     [rbp+var_308], r12
__text:0000000100001AE6                 mov     r11, [rbp+var_2F8]
__text:0000000100001AED                 mov     rbx, [rbp+var_300]
__text:0000000100001AF4                 mov     r14d, [rbx]
__text:0000000100001AF7                 mov     [r11], r14d
__text:0000000100001AFA                 mov     rbx, [rbp+var_308]
__text:0000000100001B01                 mov     r14d, [rbx]
__text:0000000100001B04                 mov     [r11+4], r14d
__text:0000000100001B08                 mov     r14d, [rbp+var_7AC]
__text:0000000100001B0F                 mov     r15d, [rbp+var_7B0]
__text:0000000100001B16                 mov     [rbp+var_2EC], r14d
__text:0000000100001B1D                 mov     [rbp+var_2F0], r15d
__text:0000000100001B24                 mov     [rbp+var_2D8], rdi
__text:0000000100001B2B                 mov     [rbp+var_2E0], r10
__text:0000000100001B32                 mov     [rbp+var_2E8], r9
__text:0000000100001B39                 mov     r9, [rbp+var_2D8]
__text:0000000100001B40                 mov     r10, [rbp+var_2E0]
__text:0000000100001B47                 mov     r11, [rbp+var_2E8]
__text:0000000100001B4E                 mov     [rbp+var_2C0], r9
__text:0000000100001B55                 mov     [rbp+var_2C8], r10
__text:0000000100001B5C                 mov     [rbp+var_2D0], r11
__text:0000000100001B63                 mov     r9, [rbp+var_2C0]
__text:0000000100001B6A                 mov     r10, [rbp+var_2C8]
__text:0000000100001B71                 mov     r14d, [r10]
__text:0000000100001B74                 mov     [r9], r14d
__text:0000000100001B77                 mov     r10, [rbp+var_2D0]
__text:0000000100001B7E                 mov     r14d, [r10]
__text:0000000100001B81                 mov     [r9+4], r14d
__text:0000000100001B85                 mov     [rbp+var_2A8], rsi
__text:0000000100001B8C                 mov     [rbp+var_2B0], r8
__text:0000000100001B93                 mov     [rbp+var_2B8], rdi
__text:0000000100001B9A                 mov     rdi, [rbp+var_2A8]
__text:0000000100001BA1                 mov     r8, [rbp+var_2B0]
__text:0000000100001BA8                 mov     r9, [rbp+var_2B8]
__text:0000000100001BAF                 mov     [rbp+var_290], rdi
__text:0000000100001BB6                 mov     [rbp+var_298], r8
__text:0000000100001BBD                 mov     [rbp+var_2A0], r9
__text:0000000100001BC4                 mov     rdi, [rbp+var_290]
__text:0000000100001BCB                 mov     r8, [rbp+var_298]
__text:0000000100001BD2                 mov     [rbp+var_280], rdi
__text:0000000100001BD9                 mov     [rbp+var_288], r8
__text:0000000100001BE0                 mov     r8, [rbp+var_280]
__text:0000000100001BE7                 mov     r9, [rbp+var_288]
__text:0000000100001BEE                 mov     [rbp+var_270], r8
__text:0000000100001BF5                 mov     [rbp+var_278], r9
__text:0000000100001BFC                 mov     r8, [rbp+var_270]
__text:0000000100001C03                 mov     r9, [rbp+var_278]
__text:0000000100001C0A                 mov     r14d, [r9]
__text:0000000100001C0D                 mov     [r8], r14d
__text:0000000100001C10                 mov     r9, [rbp+var_278]
__text:0000000100001C17                 mov     r14d, [r9+4]
__text:0000000100001C1B                 mov     [r8+4], r14d
__text:0000000100001C1F                 add     rdi, 8
__text:0000000100001C26                 mov     r8, [rbp+var_2A0]
__text:0000000100001C2D                 mov     [rbp+var_260], rdi
__text:0000000100001C34                 mov     [rbp+var_268], r8
__text:0000000100001C3B                 mov     rdi, [rbp+var_260]
__text:0000000100001C42                 mov     r8, [rbp+var_268]
__text:0000000100001C49                 mov     [rbp+var_250], rdi
__text:0000000100001C50                 mov     [rbp+var_258], r8
__text:0000000100001C57                 mov     rdi, [rbp+var_250]
__text:0000000100001C5E                 mov     r8, [rbp+var_258]
__text:0000000100001C65                 mov     r14d, [r8]
__text:0000000100001C68                 mov     [rdi], r14d
__text:0000000100001C6B                 mov     r8, [rbp+var_258]
__text:0000000100001C72                 mov     r14d, [r8+4]
__text:0000000100001C76                 mov     [rdi+4], r14d
__text:0000000100001C7A                 mov     r14d, [rbp+var_79C]
__text:0000000100001C81                 mov     [rbp+var_244], r14d
__text:0000000100001C88                 mov     [rbp+var_230], rax
__text:0000000100001C8F                 mov     [rbp+var_238], rsi
__text:0000000100001C96                 mov     [rbp+var_240], rdx
__text:0000000100001C9D                 mov     rdx, [rbp+var_230]
__text:0000000100001CA4                 mov     rsi, [rbp+var_240]
__text:0000000100001CAB                 mov     rdi, [rbp+var_238]
__text:0000000100001CB2                 mov     [rbp+var_218], rdx
__text:0000000100001CB9                 mov     [rbp+var_220], rdi
__text:0000000100001CC0                 mov     [rbp+var_228], rsi
__text:0000000100001CC7                 mov     rdx, [rbp+var_218]
__text:0000000100001CCE                 mov     rsi, [rbp+var_220]
__text:0000000100001CD5                 mov     [rbp+var_208], rdx
__text:0000000100001CDC                 mov     [rbp+var_210], rsi
__text:0000000100001CE3                 mov     rsi, [rbp+var_208]
__text:0000000100001CEA                 mov     rdi, [rbp+var_210]
__text:0000000100001CF1                 mov     [rbp+var_1F8], rsi
__text:0000000100001CF8                 mov     [rbp+var_200], rdi
__text:0000000100001CFF                 mov     rsi, [rbp+var_1F8]
__text:0000000100001D06                 mov     rdi, [rbp+var_200]
__text:0000000100001D0D                 mov     [rbp+var_1E8], rsi
__text:0000000100001D14                 mov     [rbp+var_1F0], rdi
__text:0000000100001D1B                 mov     rdi, [rbp+var_1E8]
__text:0000000100001D22                 mov     r8, [rbp+var_1F0]
__text:0000000100001D29                 mov     [rbp+var_1D8], rdi
__text:0000000100001D30                 mov     [rbp+var_1E0], r8
__text:0000000100001D37                 mov     rdi, [rbp+var_1D8]
__text:0000000100001D3E                 mov     r8, [rbp+var_1E0]
__text:0000000100001D45                 mov     r14d, [r8]
__text:0000000100001D48                 mov     [rdi], r14d
__text:0000000100001D4B                 mov     r8, [rbp+var_1E0]
__text:0000000100001D52                 mov     r14d, [r8+4]
__text:0000000100001D56                 mov     [rdi+4], r14d
__text:0000000100001D5A                 add     rsi, 8
__text:0000000100001D61                 mov     rdi, [rbp+var_200]
__text:0000000100001D68                 add     rdi, 8
__text:0000000100001D6F                 mov     [rbp+var_1C8], rsi
__text:0000000100001D76                 mov     [rbp+var_1D0], rdi
__text:0000000100001D7D                 mov     rsi, [rbp+var_1C8]
__text:0000000100001D84                 mov     rdi, [rbp+var_1D0]
__text:0000000100001D8B                 mov     [rbp+var_1B8], rsi
__text:0000000100001D92                 mov     [rbp+var_1C0], rdi
__text:0000000100001D99                 mov     rsi, [rbp+var_1B8]
__text:0000000100001DA0                 mov     rdi, [rbp+var_1C0]
__text:0000000100001DA7                 mov     r14d, [rdi]
__text:0000000100001DAA                 mov     [rsi], r14d
__text:0000000100001DAD                 mov     rdi, [rbp+var_1C0]
__text:0000000100001DB4                 mov     r14d, [rdi+4]
__text:0000000100001DB8                 mov     [rsi+4], r14d
__text:0000000100001DBC                 mov     rsi, [rbp+var_228]
__text:0000000100001DC3                 mov     r14d, [rsi]
__text:0000000100001DC6                 mov     [rdx+10h], r14d
__text:0000000100001DCA                 mov     [rbp+var_1A8], rcx
__text:0000000100001DD1                 mov     [rbp+var_1B0], rax
__text:0000000100001DD8                 mov     rax, [rbp+var_1A8]
__text:0000000100001DDF                 mov     rcx, [rax+8]
__text:0000000100001DE3                 mov     rdx, rax
__text:0000000100001DE6                 mov     [rbp+var_1A0], rdx
__text:0000000100001DED                 mov     rdx, [rbp+var_1A0]
__text:0000000100001DF4                 add     rdx, 10h
__text:0000000100001DFB                 mov     [rbp+var_198], rdx
__text:0000000100001E02                 mov     rdx, [rbp+var_198]
__text:0000000100001E09                 mov     [rbp+var_190], rdx
__text:0000000100001E10                 mov     rdx, [rbp+var_190]
__text:0000000100001E17                 cmp     rcx, [rdx]
__text:0000000100001E1A                 mov     [rbp+var_900], rax
__text:0000000100001E21                 jz      loc_100001FFA
__text:0000000100001E27                 mov     rax, [rbp+var_900]
__text:0000000100001E2E                 mov     [rbp+var_188], rax
__text:0000000100001E35                 mov     rax, [rbp+var_188]
__text:0000000100001E3C                 add     rax, 10h
__text:0000000100001E42                 mov     [rbp+var_180], rax
__text:0000000100001E49                 mov     rax, [rbp+var_180]
__text:0000000100001E50                 mov     [rbp+var_178], rax
__text:0000000100001E57                 mov     rax, [rbp+var_178]
__text:0000000100001E5E                 mov     rcx, [rbp+var_900]
__text:0000000100001E65                 mov     rdx, [rcx+8]
__text:0000000100001E69                 mov     [rbp+var_D8], rdx
__text:0000000100001E70                 mov     rdx, [rbp+var_D8]
__text:0000000100001E77                 mov     rsi, [rbp+var_1B0]
__text:0000000100001E7E                 mov     [rbp+var_160], rax
__text:0000000100001E85                 mov     [rbp+var_168], rdx
__text:0000000100001E8C                 mov     [rbp+var_170], rsi
__text:0000000100001E93                 mov     rax, [rbp+var_168]
__text:0000000100001E9A                 cmp     rax, 0
__text:0000000100001EA0                 mov     [rbp+var_908], rax
__text:0000000100001EA7                 jz      loc_100001FDF
__text:0000000100001EAD                 mov     rax, [rbp+var_908]
__text:0000000100001EB4                 mov     rcx, [rbp+var_170]
__text:0000000100001EBB                 mov     [rbp+var_150], rax
__text:0000000100001EC2                 mov     [rbp+var_158], rcx
__text:0000000100001EC9                 mov     rax, [rbp+var_150]
__text:0000000100001ED0                 mov     rcx, [rbp+var_158]
__text:0000000100001ED7                 mov     [rbp+var_140], rax
__text:0000000100001EDE                 mov     [rbp+var_148], rcx
__text:0000000100001EE5                 mov     rax, [rbp+var_140]
__text:0000000100001EEC                 mov     rcx, [rbp+var_148]
__text:0000000100001EF3                 mov     [rbp+var_130], rax
__text:0000000100001EFA                 mov     [rbp+var_138], rcx
__text:0000000100001F01                 mov     rcx, [rbp+var_130]
__text:0000000100001F08                 mov     rdx, [rbp+var_138]
__text:0000000100001F0F                 mov     [rbp+var_120], rcx
__text:0000000100001F16                 mov     [rbp+var_128], rdx
__text:0000000100001F1D                 mov     rcx, [rbp+var_120]
__text:0000000100001F24                 mov     rdx, [rbp+var_128]
__text:0000000100001F2B                 mov     [rbp+var_110], rcx
__text:0000000100001F32                 mov     [rbp+var_118], rdx
__text:0000000100001F39                 mov     rdx, [rbp+var_110]
__text:0000000100001F40                 mov     rsi, [rbp+var_118]
__text:0000000100001F47                 mov     [rbp+var_100], rdx
__text:0000000100001F4E                 mov     [rbp+var_108], rsi
__text:0000000100001F55                 mov     rdx, [rbp+var_100]
__text:0000000100001F5C                 mov     rsi, [rbp+var_108]
__text:0000000100001F63                 mov     edi, [rsi]
__text:0000000100001F65                 mov     [rdx], edi
__text:0000000100001F67                 mov     rsi, [rbp+var_108]
__text:0000000100001F6E                 mov     edi, [rsi+4]
__text:0000000100001F71                 mov     [rdx+4], edi
__text:0000000100001F74                 add     rcx, 8
__text:0000000100001F7B                 mov     rdx, [rbp+var_128]
__text:0000000100001F82                 add     rdx, 8
__text:0000000100001F89                 mov     [rbp+var_F0], rcx
__text:0000000100001F90                 mov     [rbp+var_F8], rdx
__text:0000000100001F97                 mov     rcx, [rbp+var_F0]
__text:0000000100001F9E                 mov     rdx, [rbp+var_F8]
__text:0000000100001FA5                 mov     [rbp+var_E0], rcx
__text:0000000100001FAC                 mov     [rbp+var_E8], rdx
__text:0000000100001FB3                 mov     rcx, [rbp+var_E0]
__text:0000000100001FBA                 mov     rdx, [rbp+var_E8]
__text:0000000100001FC1                 mov     edi, [rdx]
__text:0000000100001FC3                 mov     [rcx], edi
__text:0000000100001FC5                 mov     rdx, [rbp+var_E8]
__text:0000000100001FCC                 mov     edi, [rdx+4]
__text:0000000100001FCF                 mov     [rcx+4], edi
__text:0000000100001FD2                 mov     rcx, [rbp+var_148]
__text:0000000100001FD9                 mov     edi, [rcx+10h]
__text:0000000100001FDC                 mov     [rax+10h], edi
__text:0000000100001FDF
__text:0000000100001FDF loc_100001FDF:                          ; CODE XREF: _main+F57↑j
__text:0000000100001FDF                 mov     rax, [rbp+var_900]
__text:0000000100001FE6                 mov     rcx, [rax+8]
__text:0000000100001FEA                 add     rcx, 14h
__text:0000000100001FF1                 mov     [rax+8], rcx
__text:0000000100001FF5                 jmp     loc_10000200D
__text:0000000100001FFA ; ---------------------------------------------------------------------------
__text:0000000100001FFA
__text:0000000100001FFA loc_100001FFA:                          ; CODE XREF: _main+ED1↑j
__text:0000000100001FFA                 mov     rsi, [rbp+var_1B0]
__text:0000000100002001                 mov     rdi, [rbp+var_900]
__text:0000000100002008                 call    j___ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEE21__push_back_slow_pathIKS4_EEvRT_ ; std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::__push_back_slow_path<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const>(std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const &)
__text:000000010000200D
__text:000000010000200D loc_10000200D:                          ; CODE XREF: _main+10A5↑j
__text:000000010000200D                 jmp     $+5
__text:0000000100002012 ; ---------------------------------------------------------------------------
__text:0000000100002012
__text:0000000100002012 loc_100002012:                          ; CODE XREF: _main+AD3↑j
__text:0000000100002012                                         ; _main+AEF↑j ...
__text:0000000100002012                 jmp     $+5
__text:0000000100002017 ; ---------------------------------------------------------------------------
__text:0000000100002017
__text:0000000100002017 loc_100002017:                          ; CODE XREF: _main:loc_100002012↑j
__text:0000000100002017                 mov     eax, [rbp+var_7A8]
__text:000000010000201D                 add     eax, 1
__text:0000000100002022                 mov     [rbp+var_7A8], eax
__text:0000000100002028                 jmp     loc_1000013B6
__text:000000010000202D ; ---------------------------------------------------------------------------
__text:000000010000202D
__text:000000010000202D loc_10000202D:                          ; CODE XREF: _main+470↑j
__text:000000010000202D                 jmp     $+5
__text:0000000100002032 ; ---------------------------------------------------------------------------
__text:0000000100002032
__text:0000000100002032 loc_100002032:                          ; CODE XREF: _main:loc_10000202D↑j
__text:0000000100002032                 mov     eax, [rbp+var_79C]
__text:0000000100002038                 add     eax, 1
__text:000000010000203D                 mov     [rbp+var_79C], eax
__text:0000000100002043                 jmp     loc_100001321
__text:0000000100002048 ; ---------------------------------------------------------------------------
__text:0000000100002048
__text:0000000100002048 loc_100002048:                          ; CODE XREF: _main+3DD↑j
__text:0000000100002048                 mov     [rbp+var_824], 0
__text:0000000100002052                 mov     [rbp+var_828], 0
__text:000000010000205C
__text:000000010000205C loc_10000205C:                          ; CODE XREF: _main+1240↓j
__text:000000010000205C                 mov     eax, [rbp+var_828]
__text:0000000100002062                 mov     ecx, cs:_n
__text:0000000100002068                 shl     ecx, 1
__text:000000010000206B                 cmp     eax, ecx
__text:000000010000206D                 jg      loc_100002195
__text:0000000100002073                 mov     [rbp+var_82C], 0
__text:000000010000207D
__text:000000010000207D loc_10000207D:                          ; CODE XREF: _main+1225↓j
__text:000000010000207D                 mov     eax, [rbp+var_82C]
__text:0000000100002083                 mov     ecx, cs:_n
__text:0000000100002089                 shl     ecx, 1
__text:000000010000208C                 cmp     eax, ecx
__text:000000010000208E                 jg      loc_10000217A
__text:0000000100002094                 lea     rax, _was
__text:000000010000209B                 movsxd  rcx, [rbp+var_82C]
__text:00000001000020A2                 movsxd  rdx, [rbp+var_828]
__text:00000001000020A9                 imul    rdx, 5DC4h
__text:00000001000020B0                 add     rax, rdx
__text:00000001000020B3                 mov     esi, [rax+rcx*4]
__text:00000001000020B6                 cmp     esi, cs:_ct
__text:00000001000020BC                 jnz     loc_1000020FD
__text:00000001000020C2                 lea     rax, _q
__text:00000001000020C9                 mov     ecx, [rbp+var_824]
__text:00000001000020CF                 mov     edx, ecx
__text:00000001000020D1                 add     edx, 1
__text:00000001000020D7                 mov     [rbp+var_824], edx
__text:00000001000020DD                 movsxd  rsi, [rbp+var_82C]
__text:00000001000020E4                 movsxd  rdi, [rbp+var_828]
__text:00000001000020EB                 imul    rdi, 5DC4h
__text:00000001000020F2                 add     rax, rdi
__text:00000001000020F5                 mov     [rax+rsi*4], ecx
__text:00000001000020F8                 jmp     loc_10000215F
__text:00000001000020FD ; ---------------------------------------------------------------------------
__text:00000001000020FD
__text:00000001000020FD loc_1000020FD:                          ; CODE XREF: _main+116C↑j
__text:00000001000020FD                 lea     rax, _use
__text:0000000100002104                 movsxd  rcx, [rbp+var_82C]
__text:000000010000210B                 movsxd  rdx, [rbp+var_828]
__text:0000000100002112                 imul    rdx, 5DC4h
__text:0000000100002119                 add     rax, rdx
__text:000000010000211C                 mov     esi, [rax+rcx*4]
__text:000000010000211F                 cmp     esi, cs:_ct
__text:0000000100002125                 jz      loc_10000215A
__text:000000010000212B                 mov     edi, [rbp+var_828] ; int
__text:0000000100002131                 mov     esi, [rbp+var_82C] ; int
__text:0000000100002137                 mov     edx, [rbp+var_824] ; int
__text:000000010000213D                 call    __Z2goiii       ; go(int,int,int)
__text:0000000100002142                 mov     edx, [rbp+var_824]
__text:0000000100002148                 add     edx, 1
__text:000000010000214E                 mov     [rbp+var_824], edx
__text:0000000100002154                 mov     [rbp+var_90C], eax
__text:000000010000215A
__text:000000010000215A loc_10000215A:                          ; CODE XREF: _main+11D5↑j
__text:000000010000215A                 jmp     $+5
__text:000000010000215F ; ---------------------------------------------------------------------------
__text:000000010000215F
__text:000000010000215F loc_10000215F:                          ; CODE XREF: _main+11A8↑j
__text:000000010000215F                                         ; _main:loc_10000215A↑j
__text:000000010000215F                 jmp     $+5
__text:0000000100002164 ; ---------------------------------------------------------------------------
__text:0000000100002164
__text:0000000100002164 loc_100002164:                          ; CODE XREF: _main:loc_10000215F↑j
__text:0000000100002164                 mov     eax, [rbp+var_82C]
__text:000000010000216A                 add     eax, 1
__text:000000010000216F                 mov     [rbp+var_82C], eax
__text:0000000100002175                 jmp     loc_10000207D
__text:000000010000217A ; ---------------------------------------------------------------------------
__text:000000010000217A
__text:000000010000217A loc_10000217A:                          ; CODE XREF: _main+113E↑j
__text:000000010000217A                 jmp     $+5
__text:000000010000217F ; ---------------------------------------------------------------------------
__text:000000010000217F
__text:000000010000217F loc_10000217F:                          ; CODE XREF: _main:loc_10000217A↑j
__text:000000010000217F                 mov     eax, [rbp+var_828]
__text:0000000100002185                 add     eax, 1
__text:000000010000218A                 mov     [rbp+var_828], eax
__text:0000000100002190                 jmp     loc_10000205C
__text:0000000100002195 ; ---------------------------------------------------------------------------
__text:0000000100002195
__text:0000000100002195 loc_100002195:                          ; CODE XREF: _main+111D↑j
__text:0000000100002195                 mov     [rbp+var_830], 0
__text:000000010000219F
__text:000000010000219F loc_10000219F:                          ; CODE XREF: _main+1289↓j
__text:000000010000219F                 mov     eax, [rbp+var_830]
__text:00000001000021A5                 cmp     eax, [rbp+var_824]
__text:00000001000021AB                 jge     loc_1000021DE
__text:00000001000021B1                 lea     rax, _p
__text:00000001000021B8                 mov     ecx, [rbp+var_830]
__text:00000001000021BE                 movsxd  rdx, [rbp+var_830]
__text:00000001000021C5                 mov     [rax+rdx*4], ecx
__text:00000001000021C8                 mov     eax, [rbp+var_830]
__text:00000001000021CE                 add     eax, 1
__text:00000001000021D3                 mov     [rbp+var_830], eax
__text:00000001000021D9                 jmp     loc_10000219F
__text:00000001000021DE ; ---------------------------------------------------------------------------
__text:00000001000021DE
__text:00000001000021DE loc_1000021DE:                          ; CODE XREF: _main+125B↑j
__text:00000001000021DE                 mov     eax, cs:_m
__text:00000001000021E4                 add     eax, 1
__text:00000001000021E9                 mov     [rbp+var_834], eax
__text:00000001000021EF                 mov     [rbp+var_838], 0
__text:00000001000021F9
__text:00000001000021F9 loc_1000021F9:                          ; CODE XREF: _main+12E1↓j
__text:00000001000021F9                 mov     eax, [rbp+var_838]
__text:00000001000021FF                 cmp     eax, cs:_m
__text:0000000100002205                 jge     loc_100002236
__text:000000010000220B                 lea     rax, _cnt
__text:0000000100002212                 movsxd  rcx, [rbp+var_838]
__text:0000000100002219                 mov     dword ptr [rax+rcx*4], 0
__text:0000000100002220                 mov     eax, [rbp+var_838]
__text:0000000100002226                 add     eax, 1
__text:000000010000222B                 mov     [rbp+var_838], eax
__text:0000000100002231                 jmp     loc_1000021F9
__text:0000000100002236 ; ---------------------------------------------------------------------------
__text:0000000100002236
__text:0000000100002236 loc_100002236:                          ; CODE XREF: _main+12B5↑j
__text:0000000100002236                 mov     rax, 14h
__text:0000000100002240                 lea     rcx, _v
__text:0000000100002247                 mov     [rbp+var_D0], rcx
__text:000000010000224E                 mov     rcx, [rbp+var_D0]
__text:0000000100002255                 mov     rdx, [rcx+8]
__text:0000000100002259                 mov     rcx, [rcx]
__text:000000010000225C                 sub     rdx, rcx
__text:000000010000225F                 mov     [rbp+var_918], rax
__text:0000000100002266                 mov     rax, rdx
__text:0000000100002269                 cqo
__text:000000010000226B                 mov     rcx, [rbp+var_918]
__text:0000000100002272                 idiv    rcx
__text:0000000100002275                 mov     esi, eax
__text:0000000100002277                 sub     esi, 1
__text:000000010000227D                 mov     [rbp+var_83C], esi
__text:0000000100002283
__text:0000000100002283 loc_100002283:                          ; CODE XREF: _main+157B↓j
__text:0000000100002283                 cmp     [rbp+var_83C], 0
__text:000000010000228D                 jl      loc_1000024D0
__text:0000000100002293                 lea     rax, _q
__text:000000010000229A                 lea     rcx, _v
__text:00000001000022A1                 movsxd  rdx, [rbp+var_83C]
__text:00000001000022A8                 mov     [rbp+var_C0], rcx
__text:00000001000022AF                 mov     [rbp+var_C8], rdx
__text:00000001000022B6                 mov     rdx, [rbp+var_C0]
__text:00000001000022BD                 mov     rsi, [rbp+var_C8]
__text:00000001000022C4                 mov     rdx, [rdx]
__text:00000001000022C7                 imul    rsi, 14h
__text:00000001000022CE                 add     rdx, rsi
__text:00000001000022D1                 mov     edi, [rdx]
__text:00000001000022D3                 mov     [rbp+var_840], edi
__text:00000001000022D9                 movsxd  rdx, [rbp+var_83C]
__text:00000001000022E0                 mov     [rbp+var_B0], rcx
__text:00000001000022E7                 mov     [rbp+var_B8], rdx
__text:00000001000022EE                 mov     rdx, [rbp+var_B0]
__text:00000001000022F5                 mov     rsi, [rbp+var_B8]
__text:00000001000022FC                 mov     rdx, [rdx]
__text:00000001000022FF                 imul    rsi, 14h
__text:0000000100002306                 add     rdx, rsi
__text:0000000100002309                 mov     edi, [rdx+4]
__text:000000010000230C                 mov     [rbp+var_844], edi
__text:0000000100002312                 movsxd  rdx, [rbp+var_83C]
__text:0000000100002319                 mov     [rbp+var_A0], rcx
__text:0000000100002320                 mov     [rbp+var_A8], rdx
__text:0000000100002327                 mov     rdx, [rbp+var_A0]
__text:000000010000232E                 mov     rsi, [rbp+var_A8]
__text:0000000100002335                 mov     rdx, [rdx]
__text:0000000100002338                 imul    rsi, 14h
__text:000000010000233F                 add     rdx, rsi
__text:0000000100002342                 mov     edi, [rdx+8]
__text:0000000100002345                 mov     [rbp+var_848], edi
__text:000000010000234B                 movsxd  rdx, [rbp+var_83C]
__text:0000000100002352                 mov     [rbp+var_90], rcx
__text:0000000100002359                 mov     [rbp+var_98], rdx
__text:0000000100002360                 mov     rdx, [rbp+var_90]
__text:0000000100002367                 mov     rsi, [rbp+var_98]
__text:000000010000236E                 mov     rdx, [rdx]
__text:0000000100002371                 imul    rsi, 14h
__text:0000000100002378                 add     rdx, rsi
__text:000000010000237B                 mov     edi, [rdx+0Ch]
__text:000000010000237E                 mov     [rbp+var_84C], edi
__text:0000000100002384                 movsxd  rdx, [rbp+var_83C]
__text:000000010000238B                 mov     [rbp+var_80], rcx
__text:000000010000238F                 mov     [rbp+var_88], rdx
__text:0000000100002396                 mov     rcx, [rbp+var_80]
__text:000000010000239A                 mov     rdx, [rbp+var_88]
__text:00000001000023A1                 mov     rcx, [rcx]
__text:00000001000023A4                 imul    rdx, 14h
__text:00000001000023AB                 add     rcx, rdx
__text:00000001000023AE                 mov     edi, [rcx+10h]
__text:00000001000023B1                 mov     [rbp+var_850], edi
__text:00000001000023B7                 movsxd  rcx, [rbp+var_844]
__text:00000001000023BE                 movsxd  rdx, [rbp+var_840]
__text:00000001000023C5                 imul    rdx, 5DC4h
__text:00000001000023CC                 add     rax, rdx
__text:00000001000023CF                 mov     edi, [rax+rcx*4] ; int
__text:00000001000023D2                 call    __Z2gpi         ; gp(int)
__text:00000001000023D7                 lea     rcx, _q
__text:00000001000023DE                 mov     [rbp+var_854], eax
__text:00000001000023E4                 movsxd  rdx, [rbp+var_84C]
__text:00000001000023EB                 movsxd  rsi, [rbp+var_848]
__text:00000001000023F2                 imul    rsi, 5DC4h
__text:00000001000023F9                 add     rcx, rsi
__text:00000001000023FC                 mov     edi, [rcx+rdx*4] ; int
__text:00000001000023FF                 call    __Z2gpi         ; gp(int)
__text:0000000100002404                 mov     [rbp+var_858], eax
__text:000000010000240A                 mov     eax, [rbp+var_854]
__text:0000000100002410                 cmp     eax, [rbp+var_858]
__text:0000000100002416                 jz      loc_1000024B5
__text:000000010000241C                 call    _rand
__text:0000000100002421                 and     eax, 1
__text:0000000100002426                 cmp     eax, 0
__text:000000010000242B                 jz      loc_10000244D
__text:0000000100002431                 lea     rax, _p
__text:0000000100002438                 mov     ecx, [rbp+var_858]
__text:000000010000243E                 movsxd  rdx, [rbp+var_854]
__text:0000000100002445                 mov     [rax+rdx*4], ecx
__text:0000000100002448                 jmp     loc_100002464
__text:000000010000244D ; ---------------------------------------------------------------------------
__text:000000010000244D
__text:000000010000244D loc_10000244D:                          ; CODE XREF: _main+14DB↑j
__text:000000010000244D                 lea     rax, _p
__text:0000000100002454                 mov     ecx, [rbp+var_854]
__text:000000010000245A                 movsxd  rdx, [rbp+var_858]
__text:0000000100002461                 mov     [rax+rdx*4], ecx
__text:0000000100002464
__text:0000000100002464 loc_100002464:                          ; CODE XREF: _main+14F8↑j
__text:0000000100002464                 lea     rax, _cnt
__text:000000010000246B                 mov     ecx, [rbp+var_824]
__text:0000000100002471                 add     ecx, 0FFFFFFFFh
__text:0000000100002477                 mov     [rbp+var_824], ecx
__text:000000010000247D                 movsxd  rdx, [rbp+var_850]
__text:0000000100002484                 mov     ecx, [rax+rdx*4]
__text:0000000100002487                 add     ecx, 1
__text:000000010000248D                 mov     [rax+rdx*4], ecx
__text:0000000100002490                 movsxd  rdx, [rbp+var_850]
__text:0000000100002497                 cmp     dword ptr [rax+rdx*4], 1
__text:000000010000249E                 jle     loc_1000024B0
__text:00000001000024A4                 mov     eax, [rbp+var_850]
__text:00000001000024AA                 mov     [rbp+var_834], eax
__text:00000001000024B0
__text:00000001000024B0 loc_1000024B0:                          ; CODE XREF: _main+154E↑j
__text:00000001000024B0                 jmp     $+5
__text:00000001000024B5 ; ---------------------------------------------------------------------------
__text:00000001000024B5
__text:00000001000024B5 loc_1000024B5:                          ; CODE XREF: _main+14C6↑j
__text:00000001000024B5                                         ; _main:loc_1000024B0↑j
__text:00000001000024B5                 jmp     $+5
__text:00000001000024BA ; ---------------------------------------------------------------------------
__text:00000001000024BA
__text:00000001000024BA loc_1000024BA:                          ; CODE XREF: _main:loc_1000024B5↑j
__text:00000001000024BA                 mov     eax, [rbp+var_83C]
__text:00000001000024C0                 add     eax, 0FFFFFFFFh
__text:00000001000024C5                 mov     [rbp+var_83C], eax
__text:00000001000024CB                 jmp     loc_100002283
__text:00000001000024D0 ; ---------------------------------------------------------------------------
__text:00000001000024D0
__text:00000001000024D0 loc_1000024D0:                          ; CODE XREF: _main+133D↑j
__text:00000001000024D0                 mov     [rbp+var_824], 0
__text:00000001000024DA                 mov     [rbp+var_85C], 1
__text:00000001000024E4
__text:00000001000024E4 loc_1000024E4:                          ; CODE XREF: _main+165A↓j
__text:00000001000024E4                 mov     eax, [rbp+var_85C]
__text:00000001000024EA                 mov     ecx, cs:_n
__text:00000001000024F0                 shl     ecx, 1
__text:00000001000024F3                 sub     ecx, 1
__text:00000001000024F9                 cmp     eax, ecx
__text:00000001000024FB                 jg      loc_1000025AF
__text:0000000100002501                 lea     rax, _f
__text:0000000100002508                 movsxd  rcx, [rbp+var_85C]
__text:000000010000250F                 mov     edx, [rax+rcx*4]
__text:0000000100002512                 mov     [rbp+var_860], edx
__text:0000000100002518
__text:0000000100002518 loc_100002518:                          ; CODE XREF: _main+163F↓j
__text:0000000100002518                 lea     rax, _w
__text:000000010000251F                 lea     rcx, _f
__text:0000000100002526                 mov     edx, [rbp+var_860]
__text:000000010000252C                 movsxd  rsi, [rbp+var_85C]
__text:0000000100002533                 mov     edi, [rcx+rsi*4]
__text:0000000100002536                 movsxd  rcx, [rbp+var_85C]
__text:000000010000253D                 add     edi, [rax+rcx*4]
__text:0000000100002540                 cmp     edx, edi
__text:0000000100002542                 jge     loc_100002594
__text:0000000100002548                 lea     rax, _q
__text:000000010000254F                 mov     ecx, [rbp+var_824]
__text:0000000100002555                 mov     edx, ecx
__text:0000000100002557                 add     edx, 1
__text:000000010000255D                 mov     [rbp+var_824], edx
__text:0000000100002563                 movsxd  rsi, [rbp+var_860]
__text:000000010000256A                 movsxd  rdi, [rbp+var_85C]
__text:0000000100002571                 imul    rdi, 5DC4h
__text:0000000100002578                 add     rax, rdi
__text:000000010000257B                 mov     [rax+rsi*4], ecx
__text:000000010000257E                 mov     eax, [rbp+var_860]
__text:0000000100002584                 add     eax, 1
__text:0000000100002589                 mov     [rbp+var_860], eax
__text:000000010000258F                 jmp     loc_100002518
__text:0000000100002594 ; ---------------------------------------------------------------------------
__text:0000000100002594
__text:0000000100002594 loc_100002594:                          ; CODE XREF: _main+15F2↑j
__text:0000000100002594                 jmp     $+5
__text:0000000100002599 ; ---------------------------------------------------------------------------
__text:0000000100002599
__text:0000000100002599 loc_100002599:                          ; CODE XREF: _main:loc_100002594↑j
__text:0000000100002599                 mov     eax, [rbp+var_85C]
__text:000000010000259F                 add     eax, 1
__text:00000001000025A4                 mov     [rbp+var_85C], eax
__text:00000001000025AA                 jmp     loc_1000024E4
__text:00000001000025AF ; ---------------------------------------------------------------------------
__text:00000001000025AF
__text:00000001000025AF loc_1000025AF:                          ; CODE XREF: _main+15AB↑j
__text:00000001000025AF                 mov     [rbp+var_864], 0
__text:00000001000025B9
__text:00000001000025B9 loc_1000025B9:                          ; CODE XREF: _main+16A3↓j
__text:00000001000025B9                 mov     eax, [rbp+var_864]
__text:00000001000025BF                 cmp     eax, [rbp+var_824]
__text:00000001000025C5                 jge     loc_1000025F8
__text:00000001000025CB                 lea     rax, _p
__text:00000001000025D2                 mov     ecx, [rbp+var_864]
__text:00000001000025D8                 movsxd  rdx, [rbp+var_864]
__text:00000001000025DF                 mov     [rax+rdx*4], ecx
__text:00000001000025E2                 mov     eax, [rbp+var_864]
__text:00000001000025E8                 add     eax, 1
__text:00000001000025ED                 mov     [rbp+var_864], eax
__text:00000001000025F3                 jmp     loc_1000025B9
__text:00000001000025F8 ; ---------------------------------------------------------------------------
__text:00000001000025F8
__text:00000001000025F8 loc_1000025F8:                          ; CODE XREF: _main+1675↑j
__text:00000001000025F8                 mov     rdi, cs:__ZNSt3__14coutE_ptr
__text:00000001000025FF                 lea     rsi, aCase      ; "Case #"
__text:0000000100002606                 mov     [rbp+var_868], 0
__text:0000000100002610                 mov     [rbp+var_86C], 0
__text:000000010000261A                 call    j___ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)
__text:000000010000261F                 mov     esi, [rbp+var_78C]
__text:0000000100002625                 mov     rdi, rax
__text:0000000100002628                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::operator<<(int)
__text:000000010000262D                 lea     rsi, asc_100005EB9 ; ": "
__text:0000000100002634                 mov     rdi, rax
__text:0000000100002637                 call    j___ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)
__text:000000010000263C                 mov     [rbp+var_870], 0
__text:0000000100002646                 mov     [rbp+var_920], rax
__text:000000010000264D
__text:000000010000264D loc_10000264D:                          ; CODE XREF: _main+220B↓j
__text:000000010000264D                 mov     eax, [rbp+var_870]
__text:0000000100002653                 cmp     eax, cs:_m
__text:0000000100002659                 jge     loc_100003160
__text:000000010000265F                 lea     rax, _y
__text:0000000100002666                 lea     rcx, _x
__text:000000010000266D                 movsxd  rdx, [rbp+var_870]
__text:0000000100002674                 mov     esi, [rcx+rdx*4]
__text:0000000100002677                 mov     [rbp+var_874], esi
__text:000000010000267D                 movsxd  rcx, [rbp+var_870]
__text:0000000100002684                 mov     esi, [rax+rcx*4]
__text:0000000100002687                 mov     [rbp+var_878], esi
__text:000000010000268D
__text:000000010000268D loc_10000268D:                          ; CODE XREF: _main+1966↓j
__text:000000010000268D                 mov     al, 0
__text:000000010000268F                 mov     rcx, 14h
__text:0000000100002699                 lea     rdx, _u
__text:00000001000026A0                 mov     esi, [rbp+var_868]
__text:00000001000026A6                 mov     [rbp+var_78], rdx
__text:00000001000026AA                 mov     rdx, [rbp+var_78]
__text:00000001000026AE                 mov     rdi, [rdx+8]
__text:00000001000026B2                 mov     rdx, [rdx]
__text:00000001000026B5                 sub     rdi, rdx
__text:00000001000026B8                 mov     [rbp+var_921], al
__text:00000001000026BE                 mov     rax, rdi
__text:00000001000026C1                 cqo
__text:00000001000026C3                 idiv    rcx
__text:00000001000026C6                 mov     r8d, eax
__text:00000001000026C9                 cmp     esi, r8d
__text:00000001000026CC                 mov     r9b, [rbp+var_921]
__text:00000001000026D3                 mov     [rbp+var_922], r9b
__text:00000001000026DA                 jge     loc_10000271F
__text:00000001000026E0                 lea     rax, _u
__text:00000001000026E7                 movsxd  rcx, [rbp+var_868]
__text:00000001000026EE                 mov     [rbp+var_68], rax
__text:00000001000026F2                 mov     [rbp+var_70], rcx
__text:00000001000026F6                 mov     rax, [rbp+var_68]
__text:00000001000026FA                 mov     rcx, [rbp+var_70]
__text:00000001000026FE                 mov     rax, [rax]
__text:0000000100002701                 imul    rcx, 14h
__text:0000000100002708                 add     rax, rcx
__text:000000010000270B                 mov     edx, [rax+10h]
__text:000000010000270E                 cmp     edx, [rbp+var_870]
__text:0000000100002714                 setle   sil
__text:0000000100002718                 mov     [rbp+var_922], sil
__text:000000010000271F
__text:000000010000271F loc_10000271F:                          ; CODE XREF: _main+178A↑j
__text:000000010000271F                 mov     al, [rbp+var_922]
__text:0000000100002725                 test    al, 1
__text:0000000100002727                 jnz     loc_100002732
__text:000000010000272D                 jmp     loc_1000028BB
__text:0000000100002732 ; ---------------------------------------------------------------------------
__text:0000000100002732
__text:0000000100002732 loc_100002732:                          ; CODE XREF: _main+17D7↑j
__text:0000000100002732                 lea     rax, _q
__text:0000000100002739                 lea     rcx, _u
__text:0000000100002740                 movsxd  rdx, [rbp+var_868]
__text:0000000100002747                 mov     [rbp+var_58], rcx
__text:000000010000274B                 mov     [rbp+var_60], rdx
__text:000000010000274F                 mov     rdx, [rbp+var_58]
__text:0000000100002753                 mov     rsi, [rbp+var_60]
__text:0000000100002757                 mov     rdx, [rdx]
__text:000000010000275A                 imul    rsi, 14h
__text:0000000100002761                 add     rdx, rsi
__text:0000000100002764                 mov     edi, [rdx]
__text:0000000100002766                 mov     [rbp+var_87C], edi
__text:000000010000276C                 movsxd  rdx, [rbp+var_868]
__text:0000000100002773                 mov     [rbp+var_48], rcx
__text:0000000100002777                 mov     [rbp+var_50], rdx
__text:000000010000277B                 mov     rdx, [rbp+var_48]
__text:000000010000277F                 mov     rsi, [rbp+var_50]
__text:0000000100002783                 mov     rdx, [rdx]
__text:0000000100002786                 imul    rsi, 14h
__text:000000010000278D                 add     rdx, rsi
__text:0000000100002790                 mov     edi, [rdx+4]
__text:0000000100002793                 mov     [rbp+var_880], edi
__text:0000000100002799                 movsxd  rdx, [rbp+var_868]
__text:00000001000027A0                 mov     [rbp+var_38], rcx
__text:00000001000027A4                 mov     [rbp+var_40], rdx
__text:00000001000027A8                 mov     rdx, [rbp+var_38]
__text:00000001000027AC                 mov     rsi, [rbp+var_40]
__text:00000001000027B0                 mov     rdx, [rdx]
__text:00000001000027B3                 imul    rsi, 14h
__text:00000001000027BA                 add     rdx, rsi
__text:00000001000027BD                 mov     edi, [rdx+8]
__text:00000001000027C0                 mov     [rbp+var_884], edi
__text:00000001000027C6                 movsxd  rdx, [rbp+var_868]
__text:00000001000027CD                 mov     [rbp+var_28], rcx
__text:00000001000027D1                 mov     [rbp+var_30], rdx
__text:00000001000027D5                 mov     rcx, [rbp+var_28]
__text:00000001000027D9                 mov     rdx, [rbp+var_30]
__text:00000001000027DD                 mov     rcx, [rcx]
__text:00000001000027E0                 imul    rdx, 14h
__text:00000001000027E7                 add     rcx, rdx
__text:00000001000027EA                 mov     edi, [rcx+0Ch]
__text:00000001000027ED                 mov     [rbp+var_888], edi
__text:00000001000027F3                 movsxd  rcx, [rbp+var_880]
__text:00000001000027FA                 movsxd  rdx, [rbp+var_87C]
__text:0000000100002801                 imul    rdx, 5DC4h
__text:0000000100002808                 add     rax, rdx
__text:000000010000280B                 mov     edi, [rax+rcx*4] ; int
__text:000000010000280E                 call    __Z2gpi         ; gp(int)
__text:0000000100002813                 lea     rcx, _q
__text:000000010000281A                 mov     [rbp+var_88C], eax
__text:0000000100002820                 movsxd  rdx, [rbp+var_888]
__text:0000000100002827                 movsxd  rsi, [rbp+var_884]
__text:000000010000282E                 imul    rsi, 5DC4h
__text:0000000100002835                 add     rcx, rsi
__text:0000000100002838                 mov     edi, [rcx+rdx*4] ; int
__text:000000010000283B                 call    __Z2gpi         ; gp(int)
__text:0000000100002840                 mov     [rbp+var_890], eax
__text:0000000100002846                 mov     eax, [rbp+var_88C]
__text:000000010000284C                 cmp     eax, [rbp+var_890]
__text:0000000100002852                 jz      loc_1000028A5
__text:0000000100002858                 call    _rand
__text:000000010000285D                 and     eax, 1
__text:0000000100002862                 cmp     eax, 0
__text:0000000100002867                 jz      loc_100002889
__text:000000010000286D                 lea     rax, _p
__text:0000000100002874                 mov     ecx, [rbp+var_890]
__text:000000010000287A                 movsxd  rdx, [rbp+var_88C]
__text:0000000100002881                 mov     [rax+rdx*4], ecx
__text:0000000100002884                 jmp     loc_1000028A0
__text:0000000100002889 ; ---------------------------------------------------------------------------
__text:0000000100002889
__text:0000000100002889 loc_100002889:                          ; CODE XREF: _main+1917↑j
__text:0000000100002889                 lea     rax, _p
__text:0000000100002890                 mov     ecx, [rbp+var_88C]
__text:0000000100002896                 movsxd  rdx, [rbp+var_890]
__text:000000010000289D                 mov     [rax+rdx*4], ecx
__text:00000001000028A0
__text:00000001000028A0 loc_1000028A0:                          ; CODE XREF: _main+1934↑j
__text:00000001000028A0                 jmp     $+5
__text:00000001000028A5 ; ---------------------------------------------------------------------------
__text:00000001000028A5
__text:00000001000028A5 loc_1000028A5:                          ; CODE XREF: _main+1902↑j
__text:00000001000028A5                                         ; _main:loc_1000028A0↑j
__text:00000001000028A5                 mov     eax, [rbp+var_868]
__text:00000001000028AB                 add     eax, 1
__text:00000001000028B0                 mov     [rbp+var_868], eax
__text:00000001000028B6                 jmp     loc_10000268D
__text:00000001000028BB ; ---------------------------------------------------------------------------
__text:00000001000028BB
__text:00000001000028BB loc_1000028BB:                          ; CODE XREF: _main+17DD↑j
__text:00000001000028BB                 mov     [rbp+var_894], 0
__text:00000001000028C5                 mov     [rbp+var_898], 0
__text:00000001000028CF                 mov     [rbp+var_89C], 0
__text:00000001000028D9                 mov     eax, [rbp+var_834]
__text:00000001000028DF                 cmp     eax, [rbp+var_870]
__text:00000001000028E5                 setz    cl
__text:00000001000028E8                 and     cl, 1
__text:00000001000028EB                 movzx   eax, cl
__text:00000001000028EE                 mov     [rbp+var_8A0], eax
__text:00000001000028F4                 mov     edi, cs:dword_1112CBF28 ; int
__text:00000001000028FA                 call    __Z2gpi         ; gp(int)
__text:00000001000028FF                 lea     rdx, _q
__text:0000000100002906                 movsxd  rsi, [rbp+var_878]
__text:000000010000290D                 movsxd  r8, [rbp+var_874]
__text:0000000100002914                 imul    r8, 5DC4h
__text:000000010000291B                 add     rdx, r8
__text:000000010000291E                 mov     edi, [rdx+rsi*4] ; int
__text:0000000100002921                 mov     [rbp+var_928], eax
__text:0000000100002927                 call    __Z2gpi         ; gp(int)
__text:000000010000292C                 lea     rdx, _q
__text:0000000100002933                 mov     edi, [rbp+var_928]
__text:0000000100002939                 cmp     edi, eax
__text:000000010000293B                 setz    cl
__text:000000010000293E                 and     cl, 1
__text:0000000100002941                 movzx   eax, cl
__text:0000000100002944                 mov     r9d, [rbp+var_894]
__text:000000010000294B                 add     r9d, eax
__text:000000010000294E                 mov     [rbp+var_894], r9d
__text:0000000100002955                 movsxd  rsi, cs:_n
__text:000000010000295C                 mov     edi, [rdx+rsi*4+5DC4h] ; int
__text:0000000100002963                 call    __Z2gpi         ; gp(int)
__text:0000000100002968                 lea     rdx, _q
__text:000000010000296F                 movsxd  rsi, [rbp+var_878]
__text:0000000100002976                 movsxd  r8, [rbp+var_874]
__text:000000010000297D                 imul    r8, 5DC4h
__text:0000000100002984                 add     rdx, r8
__text:0000000100002987                 mov     edi, [rdx+rsi*4] ; int
__text:000000010000298A                 mov     [rbp+var_92C], eax
__text:0000000100002990                 call    __Z2gpi         ; gp(int)
__text:0000000100002995                 lea     rdx, _q
__text:000000010000299C                 mov     edi, [rbp+var_92C]
__text:00000001000029A2                 cmp     edi, eax
__text:00000001000029A4                 setz    cl
__text:00000001000029A7                 and     cl, 1
__text:00000001000029AA                 movzx   eax, cl
__text:00000001000029AD                 mov     r9d, [rbp+var_894]
__text:00000001000029B4                 add     r9d, eax
__text:00000001000029B7                 mov     [rbp+var_894], r9d
__text:00000001000029BE                 movsxd  rsi, cs:_n
__text:00000001000029C5                 imul    rsi, 5DC4h
__text:00000001000029CC                 add     rdx, rsi
__text:00000001000029CF                 mov     edi, [rdx+4]    ; int
__text:00000001000029D2                 call    __Z2gpi         ; gp(int)
__text:00000001000029D7                 lea     rdx, _q
__text:00000001000029DE                 movsxd  rsi, [rbp+var_878]
__text:00000001000029E5                 movsxd  r8, [rbp+var_874]
__text:00000001000029EC                 imul    r8, 5DC4h
__text:00000001000029F3                 add     rdx, r8
__text:00000001000029F6                 mov     edi, [rdx+rsi*4] ; int
__text:00000001000029F9                 mov     [rbp+var_930], eax
__text:00000001000029FF                 call    __Z2gpi         ; gp(int)
__text:0000000100002A04                 lea     rdx, _q
__text:0000000100002A0B                 mov     edi, [rbp+var_930]
__text:0000000100002A11                 cmp     edi, eax
__text:0000000100002A13                 setz    cl
__text:0000000100002A16                 and     cl, 1
__text:0000000100002A19                 movzx   eax, cl
__text:0000000100002A1C                 mov     r9d, [rbp+var_894]
__text:0000000100002A23                 add     r9d, eax
__text:0000000100002A26                 mov     [rbp+var_894], r9d
__text:0000000100002A2D                 mov     eax, cs:_n
__text:0000000100002A33                 shl     eax, 1
__text:0000000100002A36                 sub     eax, 1
__text:0000000100002A3B                 movsxd  rsi, eax
__text:0000000100002A3E                 movsxd  r8, cs:_n
__text:0000000100002A45                 imul    r8, 5DC4h
__text:0000000100002A4C                 add     rdx, r8
__text:0000000100002A4F                 mov     edi, [rdx+rsi*4] ; int
__text:0000000100002A52                 call    __Z2gpi         ; gp(int)
__text:0000000100002A57                 lea     rdx, _q
__text:0000000100002A5E                 movsxd  rsi, [rbp+var_878]
__text:0000000100002A65                 movsxd  r8, [rbp+var_874]
__text:0000000100002A6C                 imul    r8, 5DC4h
__text:0000000100002A73                 add     rdx, r8
__text:0000000100002A76                 mov     edi, [rdx+rsi*4] ; int
__text:0000000100002A79                 mov     [rbp+var_934], eax
__text:0000000100002A7F                 call    __Z2gpi         ; gp(int)
__text:0000000100002A84                 lea     rdx, _q
__text:0000000100002A8B                 mov     edi, [rbp+var_934]
__text:0000000100002A91                 cmp     edi, eax
__text:0000000100002A93                 setz    cl
__text:0000000100002A96                 and     cl, 1
__text:0000000100002A99                 movzx   eax, cl
__text:0000000100002A9C                 mov     r9d, [rbp+var_894]
__text:0000000100002AA3                 add     r9d, eax
__text:0000000100002AA6                 mov     [rbp+var_894], r9d
__text:0000000100002AAD                 movsxd  rsi, cs:_n
__text:0000000100002AB4                 mov     eax, cs:_n
__text:0000000100002ABA                 shl     eax, 1
__text:0000000100002ABD                 sub     eax, 1
__text:0000000100002AC2                 movsxd  r8, eax
__text:0000000100002AC5                 imul    r8, 5DC4h
__text:0000000100002ACC                 add     rdx, r8
__text:0000000100002ACF                 mov     edi, [rdx+rsi*4] ; int
__text:0000000100002AD2                 call    __Z2gpi         ; gp(int)
__text:0000000100002AD7                 lea     rdx, _q
__text:0000000100002ADE                 movsxd  rsi, [rbp+var_878]
__text:0000000100002AE5                 movsxd  r8, [rbp+var_874]
__text:0000000100002AEC                 imul    r8, 5DC4h
__text:0000000100002AF3                 add     rdx, r8
__text:0000000100002AF6                 mov     edi, [rdx+rsi*4] ; int
__text:0000000100002AF9                 mov     [rbp+var_938], eax
__text:0000000100002AFF                 call    __Z2gpi         ; gp(int)
__text:0000000100002B04                 lea     rdx, _q
__text:0000000100002B0B                 mov     edi, [rbp+var_938]
__text:0000000100002B11                 cmp     edi, eax
__text:0000000100002B13                 setz    cl
__text:0000000100002B16                 and     cl, 1
__text:0000000100002B19                 movzx   eax, cl
__text:0000000100002B1C                 mov     r9d, [rbp+var_894]
__text:0000000100002B23                 add     r9d, eax
__text:0000000100002B26                 mov     [rbp+var_894], r9d
__text:0000000100002B2D                 mov     eax, cs:_n
__text:0000000100002B33                 shl     eax, 1
__text:0000000100002B36                 sub     eax, 1
__text:0000000100002B3B                 movsxd  rsi, eax
__text:0000000100002B3E                 mov     eax, cs:_n
__text:0000000100002B44                 shl     eax, 1
__text:0000000100002B47                 sub     eax, 1
__text:0000000100002B4C                 movsxd  r8, eax
__text:0000000100002B4F                 imul    r8, 5DC4h
__text:0000000100002B56                 add     rdx, r8
__text:0000000100002B59                 mov     edi, [rdx+rsi*4] ; int
__text:0000000100002B5C                 call    __Z2gpi         ; gp(int)
__text:0000000100002B61                 lea     rdx, _q
__text:0000000100002B68                 movsxd  rsi, [rbp+var_878]
__text:0000000100002B6F                 movsxd  r8, [rbp+var_874]
__text:0000000100002B76                 imul    r8, 5DC4h
__text:0000000100002B7D                 add     rdx, r8
__text:0000000100002B80                 mov     edi, [rdx+rsi*4] ; int
__text:0000000100002B83                 mov     [rbp+var_93C], eax
__text:0000000100002B89                 call    __Z2gpi         ; gp(int)
__text:0000000100002B8E                 mov     edi, [rbp+var_93C]
__text:0000000100002B94                 cmp     edi, eax
__text:0000000100002B96                 setz    cl
__text:0000000100002B99                 and     cl, 1
__text:0000000100002B9C                 movzx   eax, cl
__text:0000000100002B9F                 mov     r9d, [rbp+var_894]
__text:0000000100002BA6                 add     r9d, eax
__text:0000000100002BA9                 mov     [rbp+var_894], r9d
__text:0000000100002BB0                 cmp     [rbp+var_894], 2
__text:0000000100002BBA                 jl      loc_100002BCA
__text:0000000100002BC0                 mov     [rbp+var_89C], 1
__text:0000000100002BCA
__text:0000000100002BCA loc_100002BCA:                          ; CODE XREF: _main+1C6A↑j
__text:0000000100002BCA                 lea     rax, _cur
__text:0000000100002BD1                 mov     esi, 0          ; int
__text:0000000100002BD6                 mov     rdx, 18h        ; size_t
__text:0000000100002BE0                 mov     [rbp+var_894], 0
__text:0000000100002BEA                 mov     rdi, rax        ; void *
__text:0000000100002BED                 call    _memset
__text:0000000100002BF2                 mov     [rbp+var_8A4], 1
__text:0000000100002BFC
__text:0000000100002BFC loc_100002BFC:                          ; CODE XREF: _main+1FD5↓j
__text:0000000100002BFC                 mov     eax, [rbp+var_8A4]
__text:0000000100002C02                 add     eax, 1
__text:0000000100002C07                 cmp     eax, cs:_n
__text:0000000100002C0D                 jge     loc_100002F2A
__text:0000000100002C13                 lea     rax, _q
__text:0000000100002C1A                 mov     ecx, [rbp+var_8A4]
__text:0000000100002C20                 add     ecx, 1
__text:0000000100002C26                 movsxd  rdx, ecx
__text:0000000100002C29                 mov     edi, [rax+rdx*4+5DC4h] ; int
__text:0000000100002C30                 call    __Z2gpi         ; gp(int)
__text:0000000100002C35                 lea     rdx, _q
__text:0000000100002C3C                 movsxd  rsi, [rbp+var_878]
__text:0000000100002C43                 movsxd  r8, [rbp+var_874]
__text:0000000100002C4A                 imul    r8, 5DC4h
__text:0000000100002C51                 add     rdx, r8
__text:0000000100002C54                 mov     edi, [rdx+rsi*4] ; int
__text:0000000100002C57                 mov     [rbp+var_940], eax
__text:0000000100002C5D                 call    __Z2gpi         ; gp(int)
__text:0000000100002C62                 lea     rdx, _q
__text:0000000100002C69                 mov     ecx, [rbp+var_940]
__text:0000000100002C6F                 cmp     ecx, eax
__text:0000000100002C71                 setz    r9b
__text:0000000100002C75                 and     r9b, 1
__text:0000000100002C79                 movzx   eax, r9b
__text:0000000100002C7D                 mov     edi, cs:_cur
__text:0000000100002C83                 or      edi, eax
__text:0000000100002C85                 mov     cs:_cur, edi
__text:0000000100002C8B                 mov     eax, [rbp+var_8A4]
__text:0000000100002C91                 add     eax, 1
__text:0000000100002C96                 movsxd  rsi, eax
__text:0000000100002C99                 imul    rsi, 5DC4h
__text:0000000100002CA0                 add     rdx, rsi
__text:0000000100002CA3                 mov     edi, [rdx+4]    ; int
__text:0000000100002CA6                 call    __Z2gpi         ; gp(int)
__text:0000000100002CAB                 lea     rdx, _q
__text:0000000100002CB2                 movsxd  rsi, [rbp+var_878]
__text:0000000100002CB9                 movsxd  r8, [rbp+var_874]
__text:0000000100002CC0                 imul    r8, 5DC4h
__text:0000000100002CC7                 add     rdx, r8
__text:0000000100002CCA                 mov     edi, [rdx+rsi*4] ; int
__text:0000000100002CCD                 mov     [rbp+var_944], eax
__text:0000000100002CD3                 call    __Z2gpi         ; gp(int)
__text:0000000100002CD8                 lea     rdx, _q
__text:0000000100002CDF                 mov     ecx, [rbp+var_944]
__text:0000000100002CE5                 cmp     ecx, eax
__text:0000000100002CE7                 setz    r9b
__text:0000000100002CEB                 and     r9b, 1
__text:0000000100002CEF                 movzx   eax, r9b
__text:0000000100002CF3                 mov     edi, cs:dword_1225B6DC4
__text:0000000100002CF9                 or      edi, eax
__text:0000000100002CFB                 mov     cs:dword_1225B6DC4, edi
__text:0000000100002D01                 mov     eax, [rbp+var_8A4]
__text:0000000100002D07                 add     eax, cs:_n
__text:0000000100002D0D                 movsxd  rsi, eax
__text:0000000100002D10                 mov     eax, [rbp+var_8A4]
__text:0000000100002D16                 add     eax, 1
__text:0000000100002D1B                 movsxd  r8, eax
__text:0000000100002D1E                 imul    r8, 5DC4h
__text:0000000100002D25                 add     rdx, r8
__text:0000000100002D28                 mov     edi, [rdx+rsi*4] ; int
__text:0000000100002D2B                 call    __Z2gpi         ; gp(int)
__text:0000000100002D30                 lea     rdx, _q
__text:0000000100002D37                 movsxd  rsi, [rbp+var_878]
__text:0000000100002D3E                 movsxd  r8, [rbp+var_874]
__text:0000000100002D45                 imul    r8, 5DC4h
__text:0000000100002D4C                 add     rdx, r8
__text:0000000100002D4F                 mov     edi, [rdx+rsi*4] ; int
__text:0000000100002D52                 mov     [rbp+var_948], eax
__text:0000000100002D58                 call    __Z2gpi         ; gp(int)
__text:0000000100002D5D                 lea     rdx, _q
__text:0000000100002D64                 mov     ecx, [rbp+var_948]
__text:0000000100002D6A                 cmp     ecx, eax
__text:0000000100002D6C                 setz    r9b
__text:0000000100002D70                 and     r9b, 1
__text:0000000100002D74                 movzx   eax, r9b
__text:0000000100002D78                 mov     edi, cs:dword_1225B6DC8
__text:0000000100002D7E                 or      edi, eax
__text:0000000100002D80                 mov     cs:dword_1225B6DC8, edi
__text:0000000100002D86                 mov     eax, [rbp+var_8A4]
__text:0000000100002D8C                 add     eax, 1
__text:0000000100002D91                 movsxd  rsi, eax
__text:0000000100002D94                 mov     eax, [rbp+var_8A4]
__text:0000000100002D9A                 add     eax, cs:_n
__text:0000000100002DA0                 movsxd  r8, eax
__text:0000000100002DA3                 imul    r8, 5DC4h
__text:0000000100002DAA                 add     rdx, r8
__text:0000000100002DAD                 mov     edi, [rdx+rsi*4] ; int
__text:0000000100002DB0                 call    __Z2gpi         ; gp(int)
__text:0000000100002DB5                 lea     rdx, _q
__text:0000000100002DBC                 movsxd  rsi, [rbp+var_878]
__text:0000000100002DC3                 movsxd  r8, [rbp+var_874]
__text:0000000100002DCA                 imul    r8, 5DC4h
__text:0000000100002DD1                 add     rdx, r8
__text:0000000100002DD4                 mov     edi, [rdx+rsi*4] ; int
__text:0000000100002DD7                 mov     [rbp+var_94C], eax
__text:0000000100002DDD                 call    __Z2gpi         ; gp(int)
__text:0000000100002DE2                 lea     rdx, _q
__text:0000000100002DE9                 mov     ecx, [rbp+var_94C]
__text:0000000100002DEF                 cmp     ecx, eax
__text:0000000100002DF1                 setz    r9b
__text:0000000100002DF5                 and     r9b, 1
__text:0000000100002DF9                 movzx   eax, r9b
__text:0000000100002DFD                 mov     edi, cs:dword_1225B6DCC
__text:0000000100002E03                 or      edi, eax
__text:0000000100002E05                 mov     cs:dword_1225B6DCC, edi
__text:0000000100002E0B                 mov     eax, [rbp+var_8A4]
__text:0000000100002E11                 add     eax, cs:_n
__text:0000000100002E17                 movsxd  rsi, eax
__text:0000000100002E1A                 mov     eax, cs:_n
__text:0000000100002E20                 shl     eax, 1
__text:0000000100002E23                 sub     eax, 1
__text:0000000100002E28                 movsxd  r8, eax
__text:0000000100002E2B                 imul    r8, 5DC4h
__text:0000000100002E32                 add     rdx, r8
__text:0000000100002E35                 mov     edi, [rdx+rsi*4] ; int
__text:0000000100002E38                 call    __Z2gpi         ; gp(int)
__text:0000000100002E3D                 lea     rdx, _q
__text:0000000100002E44                 movsxd  rsi, [rbp+var_878]
__text:0000000100002E4B                 movsxd  r8, [rbp+var_874]
__text:0000000100002E52                 imul    r8, 5DC4h
__text:0000000100002E59                 add     rdx, r8
__text:0000000100002E5C                 mov     edi, [rdx+rsi*4] ; int
__text:0000000100002E5F                 mov     [rbp+var_950], eax
__text:0000000100002E65                 call    __Z2gpi         ; gp(int)
__text:0000000100002E6A                 lea     rdx, _q
__text:0000000100002E71                 mov     ecx, [rbp+var_950]
__text:0000000100002E77                 cmp     ecx, eax
__text:0000000100002E79                 setz    r9b
__text:0000000100002E7D                 and     r9b, 1
__text:0000000100002E81                 movzx   eax, r9b
__text:0000000100002E85                 mov     edi, cs:dword_1225B6DD0
__text:0000000100002E8B                 or      edi, eax
__text:0000000100002E8D                 mov     cs:dword_1225B6DD0, edi
__text:0000000100002E93                 mov     eax, cs:_n
__text:0000000100002E99                 shl     eax, 1
__text:0000000100002E9C                 sub     eax, 1
__text:0000000100002EA1                 movsxd  rsi, eax
__text:0000000100002EA4                 mov     eax, [rbp+var_8A4]
__text:0000000100002EAA                 add     eax, cs:_n
__text:0000000100002EB0                 movsxd  r8, eax
__text:0000000100002EB3                 imul    r8, 5DC4h
__text:0000000100002EBA                 add     rdx, r8
__text:0000000100002EBD                 mov     edi, [rdx+rsi*4] ; int
__text:0000000100002EC0                 call    __Z2gpi         ; gp(int)
__text:0000000100002EC5                 lea     rdx, _q
__text:0000000100002ECC                 movsxd  rsi, [rbp+var_878]
__text:0000000100002ED3                 movsxd  r8, [rbp+var_874]
__text:0000000100002EDA                 imul    r8, 5DC4h
__text:0000000100002EE1                 add     rdx, r8
__text:0000000100002EE4                 mov     edi, [rdx+rsi*4] ; int
__text:0000000100002EE7                 mov     [rbp+var_954], eax
__text:0000000100002EED                 call    __Z2gpi         ; gp(int)
__text:0000000100002EF2                 mov     ecx, [rbp+var_954]
__text:0000000100002EF8                 cmp     ecx, eax
__text:0000000100002EFA                 setz    r9b
__text:0000000100002EFE                 and     r9b, 1
__text:0000000100002F02                 movzx   eax, r9b
__text:0000000100002F06                 mov     edi, cs:dword_1225B6DD4
__text:0000000100002F0C                 or      edi, eax
__text:0000000100002F0E                 mov     cs:dword_1225B6DD4, edi
__text:0000000100002F14                 mov     eax, [rbp+var_8A4]
__text:0000000100002F1A                 add     eax, 1
__text:0000000100002F1F                 mov     [rbp+var_8A4], eax
__text:0000000100002F25                 jmp     loc_100002BFC
__text:0000000100002F2A ; ---------------------------------------------------------------------------
__text:0000000100002F2A
__text:0000000100002F2A loc_100002F2A:                          ; CODE XREF: _main+1CBD↑j
__text:0000000100002F2A                 mov     [rbp+var_8A8], 0
__text:0000000100002F34
__text:0000000100002F34 loc_100002F34:                          ; CODE XREF: _main+2024↓j
__text:0000000100002F34                 cmp     [rbp+var_8A8], 6
__text:0000000100002F3E                 jge     loc_100002F79
__text:0000000100002F44                 lea     rax, _cur
__text:0000000100002F4B                 movsxd  rcx, [rbp+var_8A8]
__text:0000000100002F52                 mov     edx, [rax+rcx*4]
__text:0000000100002F55                 mov     esi, [rbp+var_894]
__text:0000000100002F5B                 add     esi, edx
__text:0000000100002F5D                 mov     [rbp+var_894], esi
__text:0000000100002F63                 mov     eax, [rbp+var_8A8]
__text:0000000100002F69                 add     eax, 1
__text:0000000100002F6E                 mov     [rbp+var_8A8], eax
__text:0000000100002F74                 jmp     loc_100002F34
__text:0000000100002F79 ; ---------------------------------------------------------------------------
__text:0000000100002F79
__text:0000000100002F79 loc_100002F79:                          ; CODE XREF: _main+1FEE↑j
__text:0000000100002F79                 cmp     [rbp+var_894], 3
__text:0000000100002F83                 jl      loc_100002F93
__text:0000000100002F89                 mov     [rbp+var_898], 1
__text:0000000100002F93
__text:0000000100002F93 loc_100002F93:                          ; CODE XREF: _main+2033↑j
__text:0000000100002F93                 cmp     [rbp+var_898], 0
__text:0000000100002F9D                 jnz     loc_100002FC3
__text:0000000100002FA3                 cmp     [rbp+var_89C], 0
__text:0000000100002FAD                 jnz     loc_100002FC3
__text:0000000100002FB3                 cmp     [rbp+var_8A0], 0
__text:0000000100002FBD                 jz      loc_100003145
__text:0000000100002FC3
__text:0000000100002FC3 loc_100002FC3:                          ; CODE XREF: _main+204D↑j
__text:0000000100002FC3                                         ; _main+205D↑j
__text:0000000100002FC3                 lea     rax, __ZL3res   ; res
__text:0000000100002FCA                 mov     ecx, [rbp+var_898]
__text:0000000100002FD0                 mov     edx, [rbp+var_89C]
__text:0000000100002FD6                 shl     edx, 1
__text:0000000100002FD9                 add     ecx, edx
__text:0000000100002FDB                 mov     edx, [rbp+var_8A0]
__text:0000000100002FE1                 shl     edx, 2
__text:0000000100002FE4                 add     ecx, edx
__text:0000000100002FE6                 movsxd  rsi, ecx
__text:0000000100002FE9                 imul    rsi, 18h
__text:0000000100002FF0                 add     rax, rsi
__text:0000000100002FF3                 mov     [rbp+var_690], rax
__text:0000000100002FFA                 mov     rax, [rbp+var_690]
__text:0000000100003001                 mov     [rbp+var_688], rax
__text:0000000100003008                 mov     rax, [rbp+var_688]
__text:000000010000300F                 mov     [rbp+var_680], rax
__text:0000000100003016                 mov     rax, [rbp+var_680]
__text:000000010000301D                 mov     [rbp+var_678], rax
__text:0000000100003024                 mov     rsi, [rbp+var_678]
__text:000000010000302B                 mov     [rbp+var_670], rsi
__text:0000000100003032                 mov     rsi, [rbp+var_670]
__text:0000000100003039                 mov     [rbp+var_668], rsi
__text:0000000100003040                 mov     rsi, [rbp+var_668]
__text:0000000100003047                 movzx   ecx, byte ptr [rsi]
__text:000000010000304A                 and     ecx, 1
__text:0000000100003050                 cmp     ecx, 0
__text:0000000100003056                 mov     [rbp+var_960], rax
__text:000000010000305D                 jz      loc_1000030A4
__text:0000000100003063                 mov     rax, [rbp+var_960]
__text:000000010000306A                 mov     [rbp+var_638], rax
__text:0000000100003071                 mov     rcx, [rbp+var_638]
__text:0000000100003078                 mov     [rbp+var_630], rcx
__text:000000010000307F                 mov     rcx, [rbp+var_630]
__text:0000000100003086                 mov     [rbp+var_628], rcx
__text:000000010000308D                 mov     rcx, [rbp+var_628]
__text:0000000100003094                 mov     rcx, [rcx+10h]
__text:0000000100003098                 mov     [rbp+var_968], rcx
__text:000000010000309F                 jmp     loc_1000030FF
__text:00000001000030A4 ; ---------------------------------------------------------------------------
__text:00000001000030A4
__text:00000001000030A4 loc_1000030A4:                          ; CODE XREF: _main+210D↑j
__text:00000001000030A4                 mov     rax, [rbp+var_960]
__text:00000001000030AB                 mov     [rbp+var_660], rax
__text:00000001000030B2                 mov     rcx, [rbp+var_660]
__text:00000001000030B9                 mov     [rbp+var_658], rcx
__text:00000001000030C0                 mov     rcx, [rbp+var_658]
__text:00000001000030C7                 mov     [rbp+var_650], rcx
__text:00000001000030CE                 mov     rcx, [rbp+var_650]
__text:00000001000030D5                 add     rcx, 1
__text:00000001000030DC                 mov     [rbp+var_648], rcx
__text:00000001000030E3                 mov     rcx, [rbp+var_648]
__text:00000001000030EA                 mov     [rbp+var_640], rcx
__text:00000001000030F1                 mov     rcx, [rbp+var_640]
__text:00000001000030F8                 mov     [rbp+var_968], rcx
__text:00000001000030FF
__text:00000001000030FF loc_1000030FF:                          ; CODE XREF: _main+214F↑j
__text:00000001000030FF                 mov     rax, [rbp+var_968]
__text:0000000100003106                 lea     rdi, aSInMoveD  ; "%s in move %d"
__text:000000010000310D                 mov     [rbp+var_620], rax
__text:0000000100003114                 mov     rsi, [rbp+var_620]
__text:000000010000311B                 mov     ecx, [rbp+var_870]
__text:0000000100003121                 add     ecx, 1
__text:0000000100003127                 mov     edx, ecx
__text:0000000100003129                 mov     al, 0
__text:000000010000312B                 call    _printf
__text:0000000100003130                 mov     [rbp+var_86C], 1
__text:000000010000313A                 mov     [rbp+var_96C], eax
__text:0000000100003140                 jmp     loc_100003160
__text:0000000100003145 ; ---------------------------------------------------------------------------
__text:0000000100003145
__text:0000000100003145 loc_100003145:                          ; CODE XREF: _main+206D↑j
__text:0000000100003145                 jmp     $+5
__text:000000010000314A ; ---------------------------------------------------------------------------
__text:000000010000314A
__text:000000010000314A loc_10000314A:                          ; CODE XREF: _main:loc_100003145↑j
__text:000000010000314A                 mov     eax, [rbp+var_870]
__text:0000000100003150                 add     eax, 1
__text:0000000100003155                 mov     [rbp+var_870], eax
__text:000000010000315B                 jmp     loc_10000264D
__text:0000000100003160 ; ---------------------------------------------------------------------------
__text:0000000100003160
__text:0000000100003160 loc_100003160:                          ; CODE XREF: _main+1709↑j
__text:0000000100003160                                         ; _main+21F0↑j
__text:0000000100003160                 cmp     [rbp+var_86C], 0
__text:000000010000316A                 jnz     loc_100003184
__text:0000000100003170                 lea     rdi, aNone      ; "none"
__text:0000000100003177                 mov     al, 0
__text:0000000100003179                 call    _printf
__text:000000010000317E                 mov     [rbp+var_970], eax
__text:0000000100003184
__text:0000000100003184 loc_100003184:                          ; CODE XREF: _main+221A↑j
__text:0000000100003184                 lea     rax, __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ ; std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)
__text:000000010000318B                 mov     rcx, cs:__ZNSt3__14coutE_ptr
__text:0000000100003192                 mov     [rbp+var_730], rcx
__text:0000000100003199                 mov     [rbp+var_738], rax
__text:00000001000031A0                 mov     rdi, [rbp+var_730]
__text:00000001000031A7                 call    [rbp+var_738]
__text:00000001000031AD                 mov     [rbp+var_978], rax
__text:00000001000031B4                 mov     eax, [rbp+var_78C]
__text:00000001000031BA                 add     eax, 1
__text:00000001000031BF                 mov     [rbp+var_78C], eax
__text:00000001000031C5                 jmp     loc_100000F90
__text:00000001000031CA ; ---------------------------------------------------------------------------
__text:00000001000031CA
__text:00000001000031CA loc_1000031CA:                          ; CODE XREF: _main+4C↑j
__text:00000001000031CA                 mov     eax, 0
__text:00000001000031CF                 add     rsp, 960h
__text:00000001000031D6                 pop     rbx
__text:00000001000031D7                 pop     r12
__text:00000001000031D9                 pop     r14
__text:00000001000031DB                 pop     r15
__text:00000001000031DD                 pop     rbp
__text:00000001000031DE                 retn
__text:00000001000031DE _main           endp
__text:00000001000031DE
__text:00000001000031DE ; ---------------------------------------------------------------------------
__text:00000001000031DF                 align 20h
__text:00000001000031E0
__text:00000001000031E0 ; =============== S U B R O U T I N E =======================================
__text:00000001000031E0
__text:00000001000031E0 ; Attributes: bp-based frame
__text:00000001000031E0
__text:00000001000031E0 ___cxx_global_var_init proc near        ; CODE XREF: `global constructor keyed to'_a+4↓p
__text:00000001000031E0
__text:00000001000031E0 var_31C         = dword ptr -31Ch
__text:00000001000031E0 var_318         = qword ptr -318h
__text:00000001000031E0 var_310         = qword ptr -310h
__text:00000001000031E0 var_308         = qword ptr -308h
__text:00000001000031E0 var_300         = qword ptr -300h
__text:00000001000031E0 var_2F8         = qword ptr -2F8h
__text:00000001000031E0 var_2F0         = qword ptr -2F0h
__text:00000001000031E0 var_2E8         = qword ptr -2E8h
__text:00000001000031E0 var_2E0         = qword ptr -2E0h
__text:00000001000031E0 var_2D8         = qword ptr -2D8h
__text:00000001000031E0 var_2D0         = qword ptr -2D0h
__text:00000001000031E0 var_2C8         = qword ptr -2C8h
__text:00000001000031E0 var_2C0         = qword ptr -2C0h
__text:00000001000031E0 var_2B8         = qword ptr -2B8h
__text:00000001000031E0 var_2B0         = qword ptr -2B0h
__text:00000001000031E0 var_2A8         = qword ptr -2A8h
__text:00000001000031E0 var_2A0         = qword ptr -2A0h
__text:00000001000031E0 var_298         = qword ptr -298h
__text:00000001000031E0 var_290         = qword ptr -290h
__text:00000001000031E0 var_288         = qword ptr -288h
__text:00000001000031E0 var_280         = qword ptr -280h
__text:00000001000031E0 var_278         = qword ptr -278h
__text:00000001000031E0 var_270         = qword ptr -270h
__text:00000001000031E0 var_268         = qword ptr -268h
__text:00000001000031E0 var_260         = qword ptr -260h
__text:00000001000031E0 var_248         = qword ptr -248h
__text:00000001000031E0 var_240         = qword ptr -240h
__text:00000001000031E0 var_238         = qword ptr -238h
__text:00000001000031E0 var_230         = qword ptr -230h
__text:00000001000031E0 var_228         = qword ptr -228h
__text:00000001000031E0 var_220         = qword ptr -220h
__text:00000001000031E0 var_218         = qword ptr -218h
__text:00000001000031E0 var_210         = qword ptr -210h
__text:00000001000031E0 var_208         = qword ptr -208h
__text:00000001000031E0 var_200         = qword ptr -200h
__text:00000001000031E0 var_1F8         = qword ptr -1F8h
__text:00000001000031E0 var_1F0         = qword ptr -1F0h
__text:00000001000031E0 var_1E8         = qword ptr -1E8h
__text:00000001000031E0 var_1E0         = qword ptr -1E0h
__text:00000001000031E0 var_1D8         = qword ptr -1D8h
__text:00000001000031E0 var_1D0         = qword ptr -1D0h
__text:00000001000031E0 var_1C8         = qword ptr -1C8h
__text:00000001000031E0 var_1C0         = qword ptr -1C0h
__text:00000001000031E0 var_1B8         = qword ptr -1B8h
__text:00000001000031E0 var_1B0         = qword ptr -1B0h
__text:00000001000031E0 var_1A8         = qword ptr -1A8h
__text:00000001000031E0 var_1A0         = qword ptr -1A0h
__text:00000001000031E0 var_198         = qword ptr -198h
__text:00000001000031E0 var_190         = qword ptr -190h
__text:00000001000031E0 var_188         = qword ptr -188h
__text:00000001000031E0 var_180         = qword ptr -180h
__text:00000001000031E0 var_178         = qword ptr -178h
__text:00000001000031E0 var_170         = qword ptr -170h
__text:00000001000031E0 var_168         = qword ptr -168h
__text:00000001000031E0 var_160         = qword ptr -160h
__text:00000001000031E0 var_158         = qword ptr -158h
__text:00000001000031E0 var_150         = qword ptr -150h
__text:00000001000031E0 var_148         = qword ptr -148h
__text:00000001000031E0 var_140         = qword ptr -140h
__text:00000001000031E0 var_138         = qword ptr -138h
__text:00000001000031E0 var_130         = qword ptr -130h
__text:00000001000031E0 var_128         = qword ptr -128h
__text:00000001000031E0 var_120         = qword ptr -120h
__text:00000001000031E0 var_118         = qword ptr -118h
__text:00000001000031E0 var_110         = qword ptr -110h
__text:00000001000031E0 var_108         = qword ptr -108h
__text:00000001000031E0 var_100         = qword ptr -100h
__text:00000001000031E0 var_F8          = qword ptr -0F8h
__text:00000001000031E0 var_F0          = qword ptr -0F0h
__text:00000001000031E0 var_E8          = qword ptr -0E8h
__text:00000001000031E0 var_E0          = qword ptr -0E0h
__text:00000001000031E0 var_D8          = qword ptr -0D8h
__text:00000001000031E0 var_D0          = qword ptr -0D0h
__text:00000001000031E0 var_C8          = qword ptr -0C8h
__text:00000001000031E0 var_C0          = qword ptr -0C0h
__text:00000001000031E0 var_B8          = qword ptr -0B8h
__text:00000001000031E0 var_B0          = qword ptr -0B0h
__text:00000001000031E0 var_A8          = qword ptr -0A8h
__text:00000001000031E0 var_A0          = qword ptr -0A0h
__text:00000001000031E0 var_98          = qword ptr -98h
__text:00000001000031E0 var_90          = qword ptr -90h
__text:00000001000031E0 var_88          = qword ptr -88h
__text:00000001000031E0 var_80          = qword ptr -80h
__text:00000001000031E0 var_78          = qword ptr -78h
__text:00000001000031E0 var_70          = qword ptr -70h
__text:00000001000031E0 var_68          = qword ptr -68h
__text:00000001000031E0 var_60          = qword ptr -60h
__text:00000001000031E0 var_58          = qword ptr -58h
__text:00000001000031E0 var_50          = qword ptr -50h
__text:00000001000031E0 var_48          = qword ptr -48h
__text:00000001000031E0 var_40          = qword ptr -40h
__text:00000001000031E0 var_38          = qword ptr -38h
__text:00000001000031E0 var_30          = qword ptr -30h
__text:00000001000031E0 var_28          = qword ptr -28h
__text:00000001000031E0 var_20          = qword ptr -20h
__text:00000001000031E0 var_18          = qword ptr -18h
__text:00000001000031E0 var_10          = qword ptr -10h
__text:00000001000031E0 var_8           = qword ptr -8
__text:00000001000031E0
__text:00000001000031E0                 push    rbp
__text:00000001000031E1                 mov     rbp, rsp
__text:00000001000031E4                 sub     rsp, 340h
__text:00000001000031EB                 lea     rax, __ZL3res   ; res
__text:00000001000031F2                 mov     [rbp+var_248], rax
__text:00000001000031F9                 mov     [rbp+var_238], rax
__text:0000000100003200                 lea     rax, asc_100005E68 ; ""
__text:0000000100003207                 mov     [rbp+var_240], rax
__text:000000010000320E                 mov     rcx, [rbp+var_238]
__text:0000000100003215                 mov     [rbp+var_228], rcx
__text:000000010000321C                 mov     [rbp+var_230], rax
__text:0000000100003223                 mov     rax, [rbp+var_228]
__text:000000010000322A                 mov     [rbp+var_220], rax
__text:0000000100003231                 mov     [rbp+var_218], rax
__text:0000000100003238                 mov     [rbp+var_210], rax
__text:000000010000323F                 mov     [rbp+var_208], rax
__text:0000000100003246                 mov     rcx, [rbp+var_230]
__text:000000010000324D                 mov     [rbp+var_200], rcx
__text:0000000100003254                 mov     rdi, rcx        ; char *
__text:0000000100003257                 mov     [rbp+var_260], rax
__text:000000010000325E                 mov     [rbp+var_268], rcx
__text:0000000100003265                 call    _strlen
__text:000000010000326A                 mov     [rbp+var_270], rax
__text:0000000100003271                 jmp     $+5
__text:0000000100003276 ; ---------------------------------------------------------------------------
__text:0000000100003276
__text:0000000100003276 loc_100003276:                          ; CODE XREF: ___cxx_global_var_init+91↑j
__text:0000000100003276                 mov     rdi, [rbp+var_260]
__text:000000010000327D                 mov     rsi, [rbp+var_268]
__text:0000000100003284                 mov     rdx, [rbp+var_270]
__text:000000010000328B                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::__init(char const*,ulong)
__text:0000000100003290                 jmp     $+5
__text:0000000100003295 ; ---------------------------------------------------------------------------
__text:0000000100003295
__text:0000000100003295 loc_100003295:                          ; CODE XREF: ___cxx_global_var_init+B0↑j
__text:0000000100003295                 jmp     $+5
__text:000000010000329A ; ---------------------------------------------------------------------------
__text:000000010000329A
__text:000000010000329A loc_10000329A:                          ; CODE XREF: ___cxx_global_var_init:loc_100003295↑j
__text:000000010000329A                 lea     rax, unk_100006188
__text:00000001000032A1                 mov     [rbp+var_248], rax
__text:00000001000032A8                 mov     [rbp+var_1F0], rax
__text:00000001000032AF                 lea     rax, aFork      ; "fork"
__text:00000001000032B6                 mov     [rbp+var_1F8], rax
__text:00000001000032BD                 mov     rcx, [rbp+var_1F0]
__text:00000001000032C4                 mov     [rbp+var_1E0], rcx
__text:00000001000032CB                 mov     [rbp+var_1E8], rax
__text:00000001000032D2                 mov     rax, [rbp+var_1E0]
__text:00000001000032D9                 mov     [rbp+var_1D8], rax
__text:00000001000032E0                 mov     [rbp+var_1D0], rax
__text:00000001000032E7                 mov     [rbp+var_1C8], rax
__text:00000001000032EE                 mov     [rbp+var_1C0], rax
__text:00000001000032F5                 mov     rcx, [rbp+var_1E8]
__text:00000001000032FC                 mov     [rbp+var_1B8], rcx
__text:0000000100003303                 mov     rdi, rcx        ; char *
__text:0000000100003306                 mov     [rbp+var_278], rax
__text:000000010000330D                 mov     [rbp+var_280], rcx
__text:0000000100003314                 call    _strlen
__text:0000000100003319                 mov     [rbp+var_288], rax
__text:0000000100003320                 jmp     $+5
__text:0000000100003325 ; ---------------------------------------------------------------------------
__text:0000000100003325
__text:0000000100003325 loc_100003325:                          ; CODE XREF: ___cxx_global_var_init+140↑j
__text:0000000100003325                 mov     rdi, [rbp+var_278]
__text:000000010000332C                 mov     rsi, [rbp+var_280]
__text:0000000100003333                 mov     rdx, [rbp+var_288]
__text:000000010000333A                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::__init(char const*,ulong)
__text:000000010000333F                 jmp     $+5
__text:0000000100003344 ; ---------------------------------------------------------------------------
__text:0000000100003344
__text:0000000100003344 loc_100003344:                          ; CODE XREF: ___cxx_global_var_init+15F↑j
__text:0000000100003344                 jmp     $+5
__text:0000000100003349 ; ---------------------------------------------------------------------------
__text:0000000100003349
__text:0000000100003349 loc_100003349:                          ; CODE XREF: ___cxx_global_var_init:loc_100003344↑j
__text:0000000100003349                 lea     rax, unk_1000061A0
__text:0000000100003350                 mov     [rbp+var_248], rax
__text:0000000100003357                 mov     [rbp+var_1A8], rax
__text:000000010000335E                 lea     rax, aBridge    ; "bridge"
__text:0000000100003365                 mov     [rbp+var_1B0], rax
__text:000000010000336C                 mov     rcx, [rbp+var_1A8]
__text:0000000100003373                 mov     [rbp+var_198], rcx
__text:000000010000337A                 mov     [rbp+var_1A0], rax
__text:0000000100003381                 mov     rax, [rbp+var_198]
__text:0000000100003388                 mov     [rbp+var_190], rax
__text:000000010000338F                 mov     [rbp+var_188], rax
__text:0000000100003396                 mov     [rbp+var_180], rax
__text:000000010000339D                 mov     [rbp+var_178], rax
__text:00000001000033A4                 mov     rcx, [rbp+var_1A0]
__text:00000001000033AB                 mov     [rbp+var_170], rcx
__text:00000001000033B2                 mov     rdi, rcx        ; char *
__text:00000001000033B5                 mov     [rbp+var_290], rax
__text:00000001000033BC                 mov     [rbp+var_298], rcx
__text:00000001000033C3                 call    _strlen
__text:00000001000033C8                 mov     [rbp+var_2A0], rax
__text:00000001000033CF                 jmp     $+5
__text:00000001000033D4 ; ---------------------------------------------------------------------------
__text:00000001000033D4
__text:00000001000033D4 loc_1000033D4:                          ; CODE XREF: ___cxx_global_var_init+1EF↑j
__text:00000001000033D4                 mov     rdi, [rbp+var_290]
__text:00000001000033DB                 mov     rsi, [rbp+var_298]
__text:00000001000033E2                 mov     rdx, [rbp+var_2A0]
__text:00000001000033E9                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::__init(char const*,ulong)
__text:00000001000033EE                 jmp     $+5
__text:00000001000033F3 ; ---------------------------------------------------------------------------
__text:00000001000033F3
__text:00000001000033F3 loc_1000033F3:                          ; CODE XREF: ___cxx_global_var_init+20E↑j
__text:00000001000033F3                 jmp     $+5
__text:00000001000033F8 ; ---------------------------------------------------------------------------
__text:00000001000033F8
__text:00000001000033F8 loc_1000033F8:                          ; CODE XREF: ___cxx_global_var_init:loc_1000033F3↑j
__text:00000001000033F8                 lea     rax, unk_1000061B8
__text:00000001000033FF                 mov     [rbp+var_248], rax
__text:0000000100003406                 mov     [rbp+var_160], rax
__text:000000010000340D                 lea     rax, aBridgeFork ; "bridge-fork"
__text:0000000100003414                 mov     [rbp+var_168], rax
__text:000000010000341B                 mov     rcx, [rbp+var_160]
__text:0000000100003422                 mov     [rbp+var_150], rcx
__text:0000000100003429                 mov     [rbp+var_158], rax
__text:0000000100003430                 mov     rax, [rbp+var_150]
__text:0000000100003437                 mov     [rbp+var_148], rax
__text:000000010000343E                 mov     [rbp+var_140], rax
__text:0000000100003445                 mov     [rbp+var_138], rax
__text:000000010000344C                 mov     [rbp+var_130], rax
__text:0000000100003453                 mov     rcx, [rbp+var_158]
__text:000000010000345A                 mov     [rbp+var_128], rcx
__text:0000000100003461                 mov     rdi, rcx        ; char *
__text:0000000100003464                 mov     [rbp+var_2A8], rax
__text:000000010000346B                 mov     [rbp+var_2B0], rcx
__text:0000000100003472                 call    _strlen
__text:0000000100003477                 mov     [rbp+var_2B8], rax
__text:000000010000347E                 jmp     $+5
__text:0000000100003483 ; ---------------------------------------------------------------------------
__text:0000000100003483
__text:0000000100003483 loc_100003483:                          ; CODE XREF: ___cxx_global_var_init+29E↑j
__text:0000000100003483                 mov     rdi, [rbp+var_2A8]
__text:000000010000348A                 mov     rsi, [rbp+var_2B0]
__text:0000000100003491                 mov     rdx, [rbp+var_2B8]
__text:0000000100003498                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::__init(char const*,ulong)
__text:000000010000349D                 jmp     $+5
__text:00000001000034A2 ; ---------------------------------------------------------------------------
__text:00000001000034A2
__text:00000001000034A2 loc_1000034A2:                          ; CODE XREF: ___cxx_global_var_init+2BD↑j
__text:00000001000034A2                 jmp     $+5
__text:00000001000034A7 ; ---------------------------------------------------------------------------
__text:00000001000034A7
__text:00000001000034A7 loc_1000034A7:                          ; CODE XREF: ___cxx_global_var_init:loc_1000034A2↑j
__text:00000001000034A7                 lea     rax, unk_1000061D0
__text:00000001000034AE                 mov     [rbp+var_248], rax
__text:00000001000034B5                 mov     [rbp+var_118], rax
__text:00000001000034BC                 lea     rax, aRing      ; "ring"
__text:00000001000034C3                 mov     [rbp+var_120], rax
__text:00000001000034CA                 mov     rcx, [rbp+var_118]
__text:00000001000034D1                 mov     [rbp+var_108], rcx
__text:00000001000034D8                 mov     [rbp+var_110], rax
__text:00000001000034DF                 mov     rax, [rbp+var_108]
__text:00000001000034E6                 mov     [rbp+var_100], rax
__text:00000001000034ED                 mov     [rbp+var_F8], rax
__text:00000001000034F4                 mov     [rbp+var_F0], rax
__text:00000001000034FB                 mov     [rbp+var_E8], rax
__text:0000000100003502                 mov     rcx, [rbp+var_110]
__text:0000000100003509                 mov     [rbp+var_E0], rcx
__text:0000000100003510                 mov     rdi, rcx        ; char *
__text:0000000100003513                 mov     [rbp+var_2C0], rax
__text:000000010000351A                 mov     [rbp+var_2C8], rcx
__text:0000000100003521                 call    _strlen
__text:0000000100003526                 mov     [rbp+var_2D0], rax
__text:000000010000352D                 jmp     $+5
__text:0000000100003532 ; ---------------------------------------------------------------------------
__text:0000000100003532
__text:0000000100003532 loc_100003532:                          ; CODE XREF: ___cxx_global_var_init+34D↑j
__text:0000000100003532                 mov     rdi, [rbp+var_2C0]
__text:0000000100003539                 mov     rsi, [rbp+var_2C8]
__text:0000000100003540                 mov     rdx, [rbp+var_2D0]
__text:0000000100003547                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::__init(char const*,ulong)
__text:000000010000354C                 jmp     $+5
__text:0000000100003551 ; ---------------------------------------------------------------------------
__text:0000000100003551
__text:0000000100003551 loc_100003551:                          ; CODE XREF: ___cxx_global_var_init+36C↑j
__text:0000000100003551                 jmp     $+5
__text:0000000100003556 ; ---------------------------------------------------------------------------
__text:0000000100003556
__text:0000000100003556 loc_100003556:                          ; CODE XREF: ___cxx_global_var_init:loc_100003551↑j
__text:0000000100003556                 lea     rax, unk_1000061E8
__text:000000010000355D                 mov     [rbp+var_248], rax
__text:0000000100003564                 mov     [rbp+var_D0], rax
__text:000000010000356B                 lea     rax, aForkRing  ; "fork-ring"
__text:0000000100003572                 mov     [rbp+var_D8], rax
__text:0000000100003579                 mov     rcx, [rbp+var_D0]
__text:0000000100003580                 mov     [rbp+var_C0], rcx
__text:0000000100003587                 mov     [rbp+var_C8], rax
__text:000000010000358E                 mov     rax, [rbp+var_C0]
__text:0000000100003595                 mov     [rbp+var_B8], rax
__text:000000010000359C                 mov     [rbp+var_B0], rax
__text:00000001000035A3                 mov     [rbp+var_A8], rax
__text:00000001000035AA                 mov     [rbp+var_A0], rax
__text:00000001000035B1                 mov     rcx, [rbp+var_C8]
__text:00000001000035B8                 mov     [rbp+var_98], rcx
__text:00000001000035BF                 mov     rdi, rcx        ; char *
__text:00000001000035C2                 mov     [rbp+var_2D8], rax
__text:00000001000035C9                 mov     [rbp+var_2E0], rcx
__text:00000001000035D0                 call    _strlen
__text:00000001000035D5                 mov     [rbp+var_2E8], rax
__text:00000001000035DC                 jmp     $+5
__text:00000001000035E1 ; ---------------------------------------------------------------------------
__text:00000001000035E1
__text:00000001000035E1 loc_1000035E1:                          ; CODE XREF: ___cxx_global_var_init+3FC↑j
__text:00000001000035E1                 mov     rdi, [rbp+var_2D8]
__text:00000001000035E8                 mov     rsi, [rbp+var_2E0]
__text:00000001000035EF                 mov     rdx, [rbp+var_2E8]
__text:00000001000035F6                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::__init(char const*,ulong)
__text:00000001000035FB                 jmp     $+5
__text:0000000100003600 ; ---------------------------------------------------------------------------
__text:0000000100003600
__text:0000000100003600 loc_100003600:                          ; CODE XREF: ___cxx_global_var_init+41B↑j
__text:0000000100003600                 jmp     $+5
__text:0000000100003605 ; ---------------------------------------------------------------------------
__text:0000000100003605
__text:0000000100003605 loc_100003605:                          ; CODE XREF: ___cxx_global_var_init:loc_100003600↑j
__text:0000000100003605                 lea     rax, unk_100006200
__text:000000010000360C                 mov     [rbp+var_248], rax
__text:0000000100003613                 mov     [rbp+var_88], rax
__text:000000010000361A                 lea     rax, aBridgeRing ; "bridge-ring"
__text:0000000100003621                 mov     [rbp+var_90], rax
__text:0000000100003628                 mov     rcx, [rbp+var_88]
__text:000000010000362F                 mov     [rbp+var_78], rcx
__text:0000000100003633                 mov     [rbp+var_80], rax
__text:0000000100003637                 mov     rax, [rbp+var_78]
__text:000000010000363B                 mov     [rbp+var_70], rax
__text:000000010000363F                 mov     [rbp+var_68], rax
__text:0000000100003643                 mov     [rbp+var_60], rax
__text:0000000100003647                 mov     [rbp+var_58], rax
__text:000000010000364B                 mov     rcx, [rbp+var_80]
__text:000000010000364F                 mov     [rbp+var_50], rcx
__text:0000000100003653                 mov     rdi, rcx        ; char *
__text:0000000100003656                 mov     [rbp+var_2F0], rax
__text:000000010000365D                 mov     [rbp+var_2F8], rcx
__text:0000000100003664                 call    _strlen
__text:0000000100003669                 mov     [rbp+var_300], rax
__text:0000000100003670                 jmp     $+5
__text:0000000100003675 ; ---------------------------------------------------------------------------
__text:0000000100003675
__text:0000000100003675 loc_100003675:                          ; CODE XREF: ___cxx_global_var_init+490↑j
__text:0000000100003675                 mov     rdi, [rbp+var_2F0]
__text:000000010000367C                 mov     rsi, [rbp+var_2F8]
__text:0000000100003683                 mov     rdx, [rbp+var_300]
__text:000000010000368A                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::__init(char const*,ulong)
__text:000000010000368F                 jmp     $+5
__text:0000000100003694 ; ---------------------------------------------------------------------------
__text:0000000100003694
__text:0000000100003694 loc_100003694:                          ; CODE XREF: ___cxx_global_var_init+4AF↑j
__text:0000000100003694                 jmp     $+5
__text:0000000100003699 ; ---------------------------------------------------------------------------
__text:0000000100003699
__text:0000000100003699 loc_100003699:                          ; CODE XREF: ___cxx_global_var_init:loc_100003694↑j
__text:0000000100003699                 lea     rax, unk_100006218
__text:00000001000036A0                 mov     [rbp+var_248], rax
__text:00000001000036A7                 mov     [rbp+var_40], rax
__text:00000001000036AB                 lea     rax, aBridgeForkRing ; "bridge-fork-ring"
__text:00000001000036B2                 mov     [rbp+var_48], rax
__text:00000001000036B6                 mov     rcx, [rbp+var_40]
__text:00000001000036BA                 mov     [rbp+var_30], rcx
__text:00000001000036BE                 mov     [rbp+var_38], rax
__text:00000001000036C2                 mov     rax, [rbp+var_30]
__text:00000001000036C6                 mov     [rbp+var_28], rax
__text:00000001000036CA                 mov     [rbp+var_20], rax
__text:00000001000036CE                 mov     [rbp+var_18], rax
__text:00000001000036D2                 mov     [rbp+var_10], rax
__text:00000001000036D6                 mov     rcx, [rbp+var_38]
__text:00000001000036DA                 mov     [rbp+var_8], rcx
__text:00000001000036DE                 mov     rdi, rcx        ; char *
__text:00000001000036E1                 mov     [rbp+var_308], rax
__text:00000001000036E8                 mov     [rbp+var_310], rcx
__text:00000001000036EF                 call    _strlen
__text:00000001000036F4                 mov     [rbp+var_318], rax
__text:00000001000036FB                 jmp     $+5
__text:0000000100003700 ; ---------------------------------------------------------------------------
__text:0000000100003700
__text:0000000100003700 loc_100003700:                          ; CODE XREF: ___cxx_global_var_init+51B↑j
__text:0000000100003700                 mov     rdi, [rbp+var_308]
__text:0000000100003707                 mov     rsi, [rbp+var_310]
__text:000000010000370E                 mov     rdx, [rbp+var_318]
__text:0000000100003715                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::__init(char const*,ulong)
__text:000000010000371A                 jmp     $+5
__text:000000010000371F ; ---------------------------------------------------------------------------
__text:000000010000371F
__text:000000010000371F loc_10000371F:                          ; CODE XREF: ___cxx_global_var_init+53A↑j
__text:000000010000371F                 jmp     $+5
__text:0000000100003724 ; ---------------------------------------------------------------------------
__text:0000000100003724
__text:0000000100003724 loc_100003724:                          ; CODE XREF: ___cxx_global_var_init:loc_10000371F↑j
__text:0000000100003724                 lea     rdi, ___cxx_global_array_dtor ; lpfunc
__text:000000010000372B                 mov     rsi, 0          ; obj
__text:0000000100003735                 lea     rdx, __mh_execute_header ; lpdso_handle
__text:000000010000373C                 call    ___cxa_atexit
__text:0000000100003741                 mov     [rbp+var_31C], eax
__text:0000000100003747                 add     rsp, 340h
__text:000000010000374E                 pop     rbp
__text:000000010000374F                 retn
__text:000000010000374F ___cxx_global_var_init endp
__text:000000010000374F
__text:0000000100003750 ; ---------------------------------------------------------------------------
__text:0000000100003750                 lea     rcx, __ZL3res   ; res
__text:0000000100003757                 mov     esi, edx
__text:0000000100003759                 mov     [rbp-250h], rax
__text:0000000100003760                 mov     [rbp-254h], esi
__text:0000000100003766                 mov     rax, [rbp-248h]
__text:000000010000376D                 cmp     rcx, rax
__text:0000000100003770                 mov     [rbp-328h], rax
__text:0000000100003777                 jz      loc_1000037BA
__text:000000010000377D
__text:000000010000377D loc_10000377D:                          ; CODE XREF: __text:00000001000037B4↓j
__text:000000010000377D                 mov     rax, [rbp-328h]
__text:0000000100003784                 add     rax, 0FFFFFFFFFFFFFFE8h
__text:0000000100003788                 mov     rdi, rax
__text:000000010000378B                 mov     [rbp-330h], rax
__text:0000000100003792                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::~basic_string()
__text:0000000100003797                 jmp     $+5
__text:000000010000379C ; ---------------------------------------------------------------------------
__text:000000010000379C
__text:000000010000379C loc_10000379C:                          ; CODE XREF: __text:0000000100003797↑j
__text:000000010000379C                 lea     rax, __ZL3res   ; res
__text:00000001000037A3                 mov     rcx, [rbp-330h]
__text:00000001000037AA                 cmp     rcx, rax
__text:00000001000037AD                 mov     [rbp-328h], rcx
__text:00000001000037B4                 jnz     loc_10000377D
__text:00000001000037BA
__text:00000001000037BA loc_1000037BA:                          ; CODE XREF: __text:0000000100003777↑j
__text:00000001000037BA                 jmp     $+5
__text:00000001000037BF ; ---------------------------------------------------------------------------
__text:00000001000037BF
__text:00000001000037BF loc_1000037BF:                          ; CODE XREF: __text:loc_1000037BA↑j
__text:00000001000037BF                 mov     rdi, [rbp-250h]
__text:00000001000037C6                 call    __Unwind_Resume
__text:00000001000037CB ; ---------------------------------------------------------------------------
__text:00000001000037CB                 mov     ecx, edx
__text:00000001000037CD                 mov     rdi, rax
__text:00000001000037D0                 mov     [rbp-334h], ecx
__text:00000001000037D6                 call    ___clang_call_terminate
__text:00000001000037D6 ; ---------------------------------------------------------------------------
__text:00000001000037DB                 align 20h
__text:00000001000037E0
__text:00000001000037E0 ; =============== S U B R O U T I N E =======================================
__text:00000001000037E0
__text:00000001000037E0 ; Attributes: bp-based frame
__text:00000001000037E0
__text:00000001000037E0 ; void __cdecl __cxx_global_array_dtor(void *)
__text:00000001000037E0 ___cxx_global_array_dtor proc near      ; DATA XREF: ___cxx_global_var_init:loc_100003724↑o
__text:00000001000037E0
__text:00000001000037E0 var_28          = qword ptr -28h
__text:00000001000037E0 var_20          = qword ptr -20h
__text:00000001000037E0 var_8           = qword ptr -8
__text:00000001000037E0
__text:00000001000037E0                 push    rbp
__text:00000001000037E1                 mov     rbp, rsp
__text:00000001000037E4                 sub     rsp, 40h
__text:00000001000037E8                 lea     rax, __ZL3res   ; res
__text:00000001000037EF                 add     rax, 0C0h
__text:00000001000037F5                 mov     [rbp+var_8], rdi
__text:00000001000037F9                 mov     [rbp+var_20], rax
__text:00000001000037FD
__text:00000001000037FD loc_1000037FD:                          ; CODE XREF: ___cxx_global_array_dtor+48↓j
__text:00000001000037FD                 mov     rax, [rbp+var_20]
__text:0000000100003801                 add     rax, 0FFFFFFFFFFFFFFE8h
__text:0000000100003805                 mov     rdi, rax
__text:0000000100003808                 mov     [rbp+var_28], rax
__text:000000010000380C                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::~basic_string()
__text:0000000100003811                 jmp     $+5
__text:0000000100003816 ; ---------------------------------------------------------------------------
__text:0000000100003816
__text:0000000100003816 loc_100003816:                          ; CODE XREF: ___cxx_global_array_dtor+31↑j
__text:0000000100003816                 lea     rax, __ZL3res   ; res
__text:000000010000381D                 mov     rcx, [rbp+var_28]
__text:0000000100003821                 cmp     rcx, rax
__text:0000000100003824                 mov     [rbp+var_20], rcx
__text:0000000100003828                 jnz     loc_1000037FD
__text:000000010000382E                 add     rsp, 40h
__text:0000000100003832                 pop     rbp
__text:0000000100003833                 retn
__text:0000000100003833 ___cxx_global_array_dtor endp
__text:0000000100003833
__text:0000000100003834 ; ---------------------------------------------------------------------------
__text:0000000100003834                 lea     rcx, __ZL3res   ; res
__text:000000010000383B                 mov     esi, edx
__text:000000010000383D                 mov     [rbp-10h], rax
__text:0000000100003841                 mov     [rbp-14h], esi
__text:0000000100003844                 mov     rax, [rbp-28h]
__text:0000000100003848                 cmp     rcx, rax
__text:000000010000384B                 mov     [rbp-30h], rax
__text:000000010000384F                 jz      loc_100003886
__text:0000000100003855
__text:0000000100003855 loc_100003855:                          ; CODE XREF: __text:0000000100003880↓j
__text:0000000100003855                 mov     rax, [rbp-30h]
__text:0000000100003859                 add     rax, 0FFFFFFFFFFFFFFE8h
__text:000000010000385D                 mov     rdi, rax
__text:0000000100003860                 mov     [rbp-38h], rax
__text:0000000100003864                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::~basic_string()
__text:0000000100003869                 jmp     $+5
__text:000000010000386E ; ---------------------------------------------------------------------------
__text:000000010000386E
__text:000000010000386E loc_10000386E:                          ; CODE XREF: __text:0000000100003869↑j
__text:000000010000386E                 lea     rax, __ZL3res   ; res
__text:0000000100003875                 mov     rcx, [rbp-38h]
__text:0000000100003879                 cmp     rcx, rax
__text:000000010000387C                 mov     [rbp-30h], rcx
__text:0000000100003880                 jnz     loc_100003855
__text:0000000100003886
__text:0000000100003886 loc_100003886:                          ; CODE XREF: __text:000000010000384F↑j
__text:0000000100003886                 jmp     $+5
__text:000000010000388B ; ---------------------------------------------------------------------------
__text:000000010000388B
__text:000000010000388B loc_10000388B:                          ; CODE XREF: __text:loc_100003886↑j
__text:000000010000388B                 mov     rdi, [rbp-10h]
__text:000000010000388F                 call    __Unwind_Resume
__text:0000000100003894 ; ---------------------------------------------------------------------------
__text:0000000100003894                 mov     ecx, edx
__text:0000000100003896                 mov     rdi, rax
__text:0000000100003899                 mov     [rbp-3Ch], ecx
__text:000000010000389C                 call    ___clang_call_terminate
__text:000000010000389C ; ---------------------------------------------------------------------------
__text:00000001000038A1                 align 10h
__text:00000001000038B0
__text:00000001000038B0 ; =============== S U B R O U T I N E =======================================
__text:00000001000038B0
__text:00000001000038B0 ; Attributes: bp-based frame
__text:00000001000038B0
__text:00000001000038B0 ___cxx_global_var_init8 proc near       ; CODE XREF: `global constructor keyed to'_a+9↓p
__text:00000001000038B0
__text:00000001000038B0 var_13C         = dword ptr -13Ch
__text:00000001000038B0 lpdso_handle    = qword ptr -138h
__text:00000001000038B0 var_130         = qword ptr -130h
__text:00000001000038B0 var_128         = qword ptr -128h
__text:00000001000038B0 var_120         = qword ptr -120h
__text:00000001000038B0 var_118         = qword ptr -118h
__text:00000001000038B0 var_110         = qword ptr -110h
__text:00000001000038B0 var_108         = qword ptr -108h
__text:00000001000038B0 var_100         = qword ptr -100h
__text:00000001000038B0 var_F8          = qword ptr -0F8h
__text:00000001000038B0 var_F0          = qword ptr -0F0h
__text:00000001000038B0 var_E8          = qword ptr -0E8h
__text:00000001000038B0 var_E0          = qword ptr -0E0h
__text:00000001000038B0 var_D8          = qword ptr -0D8h
__text:00000001000038B0 var_D0          = qword ptr -0D0h
__text:00000001000038B0 var_C8          = qword ptr -0C8h
__text:00000001000038B0 var_C0          = qword ptr -0C0h
__text:00000001000038B0 var_B8          = qword ptr -0B8h
__text:00000001000038B0 var_B0          = qword ptr -0B0h
__text:00000001000038B0 var_A8          = qword ptr -0A8h
__text:00000001000038B0 var_A0          = qword ptr -0A0h
__text:00000001000038B0 var_98          = qword ptr -98h
__text:00000001000038B0 var_90          = qword ptr -90h
__text:00000001000038B0 var_88          = qword ptr -88h
__text:00000001000038B0 var_80          = qword ptr -80h
__text:00000001000038B0 var_78          = qword ptr -78h
__text:00000001000038B0 var_70          = qword ptr -70h
__text:00000001000038B0 var_68          = qword ptr -68h
__text:00000001000038B0 var_60          = qword ptr -60h
__text:00000001000038B0 var_58          = qword ptr -58h
__text:00000001000038B0 var_50          = qword ptr -50h
__text:00000001000038B0 var_48          = qword ptr -48h
__text:00000001000038B0 var_40          = qword ptr -40h
__text:00000001000038B0 var_38          = qword ptr -38h
__text:00000001000038B0 var_30          = qword ptr -30h
__text:00000001000038B0 var_28          = qword ptr -28h
__text:00000001000038B0
__text:00000001000038B0                 push    rbp
__text:00000001000038B1                 mov     rbp, rsp
__text:00000001000038B4                 push    r15
__text:00000001000038B6                 push    r14
__text:00000001000038B8                 push    r12
__text:00000001000038BA                 push    rbx
__text:00000001000038BB                 sub     rsp, 120h
__text:00000001000038C2                 mov     rax, cs:__ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEED1Ev_ptr
__text:00000001000038C9                 lea     rcx, _v
__text:00000001000038D0                 mov     rdx, rcx
__text:00000001000038D3                 lea     rsi, __mh_execute_header
__text:00000001000038DA                 lea     rdi, [rbp+var_D0]
__text:00000001000038E1                 lea     r8, [rbp+var_E8]
__text:00000001000038E8                 lea     r9, [rbp+var_120]
__text:00000001000038EF                 lea     r10, [rbp+var_A8]
__text:00000001000038F6                 lea     r11, [rbp+var_118]
__text:00000001000038FD                 lea     rbx, [rbp+var_78]
__text:0000000100003901                 lea     r14, [rbp+var_110]
__text:0000000100003908                 lea     r15, [rbp+var_48]
__text:000000010000390C                 mov     [rbp+var_130], rcx
__text:0000000100003913                 mov     rcx, [rbp+var_130]
__text:000000010000391A                 mov     [rbp+var_128], rcx
__text:0000000100003921                 mov     rcx, [rbp+var_128]
__text:0000000100003928                 mov     [rbp+var_108], rcx
__text:000000010000392F                 mov     rcx, [rbp+var_108]
__text:0000000100003936                 mov     r12, rcx
__text:0000000100003939                 mov     [rbp+var_100], r12
__text:0000000100003940                 mov     [rbp+var_38], r15
__text:0000000100003944                 mov     [rbp+var_40], 0FFFFFFFFFFFFFFFFh
__text:000000010000394C                 mov     r15, [rbp+var_38]
__text:0000000100003950                 mov     r12, [rbp+var_40]
__text:0000000100003954                 mov     [rbp+var_28], r15
__text:0000000100003958                 mov     [rbp+var_30], r12
__text:000000010000395C                 mov     r15, [rbp+var_28]
__text:0000000100003960                 mov     qword ptr [r15], 0
__text:0000000100003967                 mov     r15, [rbp+var_48]
__text:000000010000396B                 mov     [rbp+var_110], r15
__text:0000000100003972                 mov     [rbp+var_50], r14
__text:0000000100003976                 mov     qword ptr [rcx], 0
__text:000000010000397D                 mov     [rbp+var_68], rbx
__text:0000000100003981                 mov     [rbp+var_70], 0FFFFFFFFFFFFFFFFh
__text:0000000100003989                 mov     rbx, [rbp+var_68]
__text:000000010000398D                 mov     r14, [rbp+var_70]
__text:0000000100003991                 mov     [rbp+var_58], rbx
__text:0000000100003995                 mov     [rbp+var_60], r14
__text:0000000100003999                 mov     rbx, [rbp+var_58]
__text:000000010000399D                 mov     qword ptr [rbx], 0
__text:00000001000039A4                 mov     rbx, [rbp+var_78]
__text:00000001000039A8                 mov     [rbp+var_118], rbx
__text:00000001000039AF                 mov     [rbp+var_80], r11
__text:00000001000039B3                 mov     qword ptr [rcx+8], 0
__text:00000001000039BB                 add     rcx, 10h
__text:00000001000039C2                 mov     [rbp+var_98], r10
__text:00000001000039C9                 mov     [rbp+var_A0], 0FFFFFFFFFFFFFFFFh
__text:00000001000039D4                 mov     r10, [rbp+var_98]
__text:00000001000039DB                 mov     r11, [rbp+var_A0]
__text:00000001000039E2                 mov     [rbp+var_88], r10
__text:00000001000039E9                 mov     [rbp+var_90], r11
__text:00000001000039F0                 mov     r10, [rbp+var_88]
__text:00000001000039F7                 mov     qword ptr [r10], 0
__text:00000001000039FE                 mov     r10, [rbp+var_A8]
__text:0000000100003A05                 mov     [rbp+var_120], r10
__text:0000000100003A0C                 mov     [rbp+var_B0], r9
__text:0000000100003A13                 mov     [rbp+var_F0], rcx
__text:0000000100003A1A                 mov     [rbp+var_F8], 0
__text:0000000100003A25                 mov     rcx, [rbp+var_F0]
__text:0000000100003A2C                 mov     r9, [rbp+var_F8]
__text:0000000100003A33                 mov     [rbp+var_E0], rcx
__text:0000000100003A3A                 mov     [rbp+var_E8], r9
__text:0000000100003A41                 mov     rcx, [rbp+var_E0]
__text:0000000100003A48                 mov     [rbp+var_D8], r8
__text:0000000100003A4F                 mov     r8, [rbp+var_D8]
__text:0000000100003A56                 mov     r8, [r8]
__text:0000000100003A59                 mov     [rbp+var_C8], rcx
__text:0000000100003A60                 mov     [rbp+var_D0], r8
__text:0000000100003A67                 mov     rcx, [rbp+var_C8]
__text:0000000100003A6E                 mov     r8, rcx
__text:0000000100003A71                 mov     [rbp+var_C0], r8
__text:0000000100003A78                 mov     [rbp+var_B8], rdi
__text:0000000100003A7F                 mov     rdi, [rbp+var_B8]
__text:0000000100003A86                 mov     rdi, [rdi]
__text:0000000100003A89                 mov     [rcx], rdi
__text:0000000100003A8C                 mov     rdi, rax        ; lpfunc
__text:0000000100003A8F                 mov     [rbp+lpdso_handle], rsi
__text:0000000100003A96                 mov     rsi, rdx        ; obj
__text:0000000100003A99                 mov     rdx, [rbp+lpdso_handle] ; lpdso_handle
__text:0000000100003AA0                 call    ___cxa_atexit
__text:0000000100003AA5                 mov     [rbp+var_13C], eax
__text:0000000100003AAB                 add     rsp, 120h
__text:0000000100003AB2                 pop     rbx
__text:0000000100003AB3                 pop     r12
__text:0000000100003AB5                 pop     r14
__text:0000000100003AB7                 pop     r15
__text:0000000100003AB9                 pop     rbp
__text:0000000100003ABA                 retn
__text:0000000100003ABA ___cxx_global_var_init8 endp
__text:0000000100003ABA
__text:0000000100003ABA ; ---------------------------------------------------------------------------
__text:0000000100003ABB                 align 20h
__text:0000000100003AC0
__text:0000000100003AC0 ; =============== S U B R O U T I N E =======================================
__text:0000000100003AC0
__text:0000000100003AC0 ; Attributes: bp-based frame
__text:0000000100003AC0
__text:0000000100003AC0 ___cxx_global_var_init9 proc near       ; CODE XREF: `global constructor keyed to'_a+E↓p
__text:0000000100003AC0
__text:0000000100003AC0 var_13C         = dword ptr -13Ch
__text:0000000100003AC0 lpdso_handle    = qword ptr -138h
__text:0000000100003AC0 var_130         = qword ptr -130h
__text:0000000100003AC0 var_128         = qword ptr -128h
__text:0000000100003AC0 var_120         = qword ptr -120h
__text:0000000100003AC0 var_118         = qword ptr -118h
__text:0000000100003AC0 var_110         = qword ptr -110h
__text:0000000100003AC0 var_108         = qword ptr -108h
__text:0000000100003AC0 var_100         = qword ptr -100h
__text:0000000100003AC0 var_F8          = qword ptr -0F8h
__text:0000000100003AC0 var_F0          = qword ptr -0F0h
__text:0000000100003AC0 var_E8          = qword ptr -0E8h
__text:0000000100003AC0 var_E0          = qword ptr -0E0h
__text:0000000100003AC0 var_D8          = qword ptr -0D8h
__text:0000000100003AC0 var_D0          = qword ptr -0D0h
__text:0000000100003AC0 var_C8          = qword ptr -0C8h
__text:0000000100003AC0 var_C0          = qword ptr -0C0h
__text:0000000100003AC0 var_B8          = qword ptr -0B8h
__text:0000000100003AC0 var_B0          = qword ptr -0B0h
__text:0000000100003AC0 var_A8          = qword ptr -0A8h
__text:0000000100003AC0 var_A0          = qword ptr -0A0h
__text:0000000100003AC0 var_98          = qword ptr -98h
__text:0000000100003AC0 var_90          = qword ptr -90h
__text:0000000100003AC0 var_88          = qword ptr -88h
__text:0000000100003AC0 var_80          = qword ptr -80h
__text:0000000100003AC0 var_78          = qword ptr -78h
__text:0000000100003AC0 var_70          = qword ptr -70h
__text:0000000100003AC0 var_68          = qword ptr -68h
__text:0000000100003AC0 var_60          = qword ptr -60h
__text:0000000100003AC0 var_58          = qword ptr -58h
__text:0000000100003AC0 var_50          = qword ptr -50h
__text:0000000100003AC0 var_48          = qword ptr -48h
__text:0000000100003AC0 var_40          = qword ptr -40h
__text:0000000100003AC0 var_38          = qword ptr -38h
__text:0000000100003AC0 var_30          = qword ptr -30h
__text:0000000100003AC0 var_28          = qword ptr -28h
__text:0000000100003AC0
__text:0000000100003AC0                 push    rbp
__text:0000000100003AC1                 mov     rbp, rsp
__text:0000000100003AC4                 push    r15
__text:0000000100003AC6                 push    r14
__text:0000000100003AC8                 push    r12
__text:0000000100003ACA                 push    rbx
__text:0000000100003ACB                 sub     rsp, 120h
__text:0000000100003AD2                 mov     rax, cs:__ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEED1Ev_ptr
__text:0000000100003AD9                 lea     rcx, _u
__text:0000000100003AE0                 mov     rdx, rcx
__text:0000000100003AE3                 lea     rsi, __mh_execute_header
__text:0000000100003AEA                 lea     rdi, [rbp+var_D0]
__text:0000000100003AF1                 lea     r8, [rbp+var_E8]
__text:0000000100003AF8                 lea     r9, [rbp+var_120]
__text:0000000100003AFF                 lea     r10, [rbp+var_A8]
__text:0000000100003B06                 lea     r11, [rbp+var_118]
__text:0000000100003B0D                 lea     rbx, [rbp+var_78]
__text:0000000100003B11                 lea     r14, [rbp+var_110]
__text:0000000100003B18                 lea     r15, [rbp+var_48]
__text:0000000100003B1C                 mov     [rbp+var_130], rcx
__text:0000000100003B23                 mov     rcx, [rbp+var_130]
__text:0000000100003B2A                 mov     [rbp+var_128], rcx
__text:0000000100003B31                 mov     rcx, [rbp+var_128]
__text:0000000100003B38                 mov     [rbp+var_108], rcx
__text:0000000100003B3F                 mov     rcx, [rbp+var_108]
__text:0000000100003B46                 mov     r12, rcx
__text:0000000100003B49                 mov     [rbp+var_100], r12
__text:0000000100003B50                 mov     [rbp+var_38], r15
__text:0000000100003B54                 mov     [rbp+var_40], 0FFFFFFFFFFFFFFFFh
__text:0000000100003B5C                 mov     r15, [rbp+var_38]
__text:0000000100003B60                 mov     r12, [rbp+var_40]
__text:0000000100003B64                 mov     [rbp+var_28], r15
__text:0000000100003B68                 mov     [rbp+var_30], r12
__text:0000000100003B6C                 mov     r15, [rbp+var_28]
__text:0000000100003B70                 mov     qword ptr [r15], 0
__text:0000000100003B77                 mov     r15, [rbp+var_48]
__text:0000000100003B7B                 mov     [rbp+var_110], r15
__text:0000000100003B82                 mov     [rbp+var_50], r14
__text:0000000100003B86                 mov     qword ptr [rcx], 0
__text:0000000100003B8D                 mov     [rbp+var_68], rbx
__text:0000000100003B91                 mov     [rbp+var_70], 0FFFFFFFFFFFFFFFFh
__text:0000000100003B99                 mov     rbx, [rbp+var_68]
__text:0000000100003B9D                 mov     r14, [rbp+var_70]
__text:0000000100003BA1                 mov     [rbp+var_58], rbx
__text:0000000100003BA5                 mov     [rbp+var_60], r14
__text:0000000100003BA9                 mov     rbx, [rbp+var_58]
__text:0000000100003BAD                 mov     qword ptr [rbx], 0
__text:0000000100003BB4                 mov     rbx, [rbp+var_78]
__text:0000000100003BB8                 mov     [rbp+var_118], rbx
__text:0000000100003BBF                 mov     [rbp+var_80], r11
__text:0000000100003BC3                 mov     qword ptr [rcx+8], 0
__text:0000000100003BCB                 add     rcx, 10h
__text:0000000100003BD2                 mov     [rbp+var_98], r10
__text:0000000100003BD9                 mov     [rbp+var_A0], 0FFFFFFFFFFFFFFFFh
__text:0000000100003BE4                 mov     r10, [rbp+var_98]
__text:0000000100003BEB                 mov     r11, [rbp+var_A0]
__text:0000000100003BF2                 mov     [rbp+var_88], r10
__text:0000000100003BF9                 mov     [rbp+var_90], r11
__text:0000000100003C00                 mov     r10, [rbp+var_88]
__text:0000000100003C07                 mov     qword ptr [r10], 0
__text:0000000100003C0E                 mov     r10, [rbp+var_A8]
__text:0000000100003C15                 mov     [rbp+var_120], r10
__text:0000000100003C1C                 mov     [rbp+var_B0], r9
__text:0000000100003C23                 mov     [rbp+var_F0], rcx
__text:0000000100003C2A                 mov     [rbp+var_F8], 0
__text:0000000100003C35                 mov     rcx, [rbp+var_F0]
__text:0000000100003C3C                 mov     r9, [rbp+var_F8]
__text:0000000100003C43                 mov     [rbp+var_E0], rcx
__text:0000000100003C4A                 mov     [rbp+var_E8], r9
__text:0000000100003C51                 mov     rcx, [rbp+var_E0]
__text:0000000100003C58                 mov     [rbp+var_D8], r8
__text:0000000100003C5F                 mov     r8, [rbp+var_D8]
__text:0000000100003C66                 mov     r8, [r8]
__text:0000000100003C69                 mov     [rbp+var_C8], rcx
__text:0000000100003C70                 mov     [rbp+var_D0], r8
__text:0000000100003C77                 mov     rcx, [rbp+var_C8]
__text:0000000100003C7E                 mov     r8, rcx
__text:0000000100003C81                 mov     [rbp+var_C0], r8
__text:0000000100003C88                 mov     [rbp+var_B8], rdi
__text:0000000100003C8F                 mov     rdi, [rbp+var_B8]
__text:0000000100003C96                 mov     rdi, [rdi]
__text:0000000100003C99                 mov     [rcx], rdi
__text:0000000100003C9C                 mov     rdi, rax        ; lpfunc
__text:0000000100003C9F                 mov     [rbp+lpdso_handle], rsi
__text:0000000100003CA6                 mov     rsi, rdx        ; obj
__text:0000000100003CA9                 mov     rdx, [rbp+lpdso_handle] ; lpdso_handle
__text:0000000100003CB0                 call    ___cxa_atexit
__text:0000000100003CB5                 mov     [rbp+var_13C], eax
__text:0000000100003CBB                 add     rsp, 120h
__text:0000000100003CC2                 pop     rbx
__text:0000000100003CC3                 pop     r12
__text:0000000100003CC5                 pop     r14
__text:0000000100003CC7                 pop     r15
__text:0000000100003CC9                 pop     rbp
__text:0000000100003CCA                 retn
__text:0000000100003CCA ___cxx_global_var_init9 endp
__text:0000000100003CCA
__text:0000000100003CCA ; ---------------------------------------------------------------------------
__text:0000000100003CCB                 align 10h
__text:0000000100003CD0
__text:0000000100003CD0 ; =============== S U B R O U T I N E =======================================
__text:0000000100003CD0
__text:0000000100003CD0 ; Attributes: bp-based frame
__text:0000000100003CD0
__text:0000000100003CD0 ; `global constructor keyed to'_a
__text:0000000100003CD0                 public __GLOBAL__I_a
__text:0000000100003CD0 __GLOBAL__I_a   proc near               ; DATA XREF: __mod_init_func:0000000100006168↓o
__text:0000000100003CD0                 push    rbp
__text:0000000100003CD1                 mov     rbp, rsp
__text:0000000100003CD4                 call    ___cxx_global_var_init
__text:0000000100003CD9                 call    ___cxx_global_var_init8
__text:0000000100003CDE                 call    ___cxx_global_var_init9
__text:0000000100003CE3                 pop     rbp
__text:0000000100003CE4                 retn
__text:0000000100003CE4 __GLOBAL__I_a   endp
__text:0000000100003CE4
__text:0000000100003CE4 ; ---------------------------------------------------------------------------
__text:0000000100003CE5                 align 10h
__text:0000000100003CF0
__text:0000000100003CF0 ; =============== S U B R O U T I N E =======================================
__text:0000000100003CF0
__text:0000000100003CF0 ; Attributes: noreturn bp-based frame
__text:0000000100003CF0
__text:0000000100003CF0 ___clang_call_terminate proc near       ; CODE XREF: __text:00000001000037D6↑p
__text:0000000100003CF0                                         ; __text:000000010000389C↑p ...
__text:0000000100003CF0
__text:0000000100003CF0 var_8           = qword ptr -8
__text:0000000100003CF0
__text:0000000100003CF0                 push    rbp
__text:0000000100003CF1                 mov     rbp, rsp
__text:0000000100003CF4                 sub     rsp, 10h
__text:0000000100003CF8                 call    ___cxa_begin_catch
__text:0000000100003CFD                 mov     [rbp+var_8], rax
__text:0000000100003D01                 call    __ZSt9terminatev ; std::terminate(void)
__text:0000000100003D01 ___clang_call_terminate endp
__text:0000000100003D01
__text:0000000100003D01 ; ---------------------------------------------------------------------------
__text:0000000100003D06                 align 10h
__text:0000000100003D10
__text:0000000100003D10 ; =============== S U B R O U T I N E =======================================
__text:0000000100003D10
__text:0000000100003D10 ; Attributes: bp-based frame
__text:0000000100003D10
__text:0000000100003D10 ; std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>, std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>>>::~vector()
__text:0000000100003D10 __ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEED1Ev proc near
__text:0000000100003D10                                         ; DATA XREF: __got:__ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEED1Ev_ptr↓o
__text:0000000100003D10
__text:0000000100003D10 var_8           = qword ptr -8
__text:0000000100003D10
__text:0000000100003D10                 push    rbp
__text:0000000100003D11                 mov     rbp, rsp
__text:0000000100003D14                 sub     rsp, 10h
__text:0000000100003D18                 mov     [rbp+var_8], rdi
__text:0000000100003D1C                 mov     rdi, [rbp+var_8]
__text:0000000100003D20                 call    j___ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEED2Ev ; std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::~vector()
__text:0000000100003D25                 add     rsp, 10h
__text:0000000100003D29                 pop     rbp
__text:0000000100003D2A                 retn
__text:0000000100003D2A __ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEED1Ev endp
__text:0000000100003D2A
__text:0000000100003D2A ; ---------------------------------------------------------------------------
__text:0000000100003D2B                 align 10h
__text:0000000100003D30
__text:0000000100003D30 ; =============== S U B R O U T I N E =======================================
__text:0000000100003D30
__text:0000000100003D30 ; Attributes: bp-based frame
__text:0000000100003D30
__text:0000000100003D30 ; std::__1::basic_ostream<char, std::__1::char_traits<char>> & std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, char const*)
__text:0000000100003D30 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc proc near
__text:0000000100003D30                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc_ptr↓o
__text:0000000100003D30
__text:0000000100003D30 var_1A8         = qword ptr -1A8h
__text:0000000100003D30 var_1A0         = qword ptr -1A0h
__text:0000000100003D30 var_191         = byte ptr -191h
__text:0000000100003D30 var_190         = dword ptr -190h
__text:0000000100003D30 var_18C         = dword ptr -18Ch
__text:0000000100003D30 var_188         = qword ptr -188h
__text:0000000100003D30 var_179         = byte ptr -179h
__text:0000000100003D30 var_178         = qword ptr -178h
__text:0000000100003D30 var_16C         = dword ptr -16Ch
__text:0000000100003D30 var_168         = qword ptr -168h
__text:0000000100003D30 var_160         = qword ptr -160h
__text:0000000100003D30 var_158         = qword ptr -158h
__text:0000000100003D30 var_150         = qword ptr -150h
__text:0000000100003D30 var_148         = qword ptr -148h
__text:0000000100003D30 var_140         = qword ptr -140h
__text:0000000100003D30 var_134         = dword ptr -134h
__text:0000000100003D30 var_130         = qword ptr -130h
__text:0000000100003D30 var_128         = qword ptr -128h
__text:0000000100003D30 var_119         = byte ptr -119h
__text:0000000100003D30 var_118         = qword ptr -118h
__text:0000000100003D30 var_110         = qword ptr -110h
__text:0000000100003D30 var_108         = qword ptr -108h
__text:0000000100003D30 var_FC          = dword ptr -0FCh
__text:0000000100003D30 var_F8          = qword ptr -0F8h
__text:0000000100003D30 var_F0          = byte ptr -0F0h
__text:0000000100003D30 var_E0          = qword ptr -0E0h
__text:0000000100003D30 var_D8          = qword ptr -0D8h
__text:0000000100003D30 var_D0          = qword ptr -0D0h
__text:0000000100003D30 var_C8          = qword ptr -0C8h
__text:0000000100003D30 var_C0          = qword ptr -0C0h
__text:0000000100003D30 var_B8          = qword ptr -0B8h
__text:0000000100003D30 var_A0          = qword ptr -0A0h
__text:0000000100003D30 var_98          = qword ptr -98h
__text:0000000100003D30 var_90          = qword ptr -90h
__text:0000000100003D30 var_88          = qword ptr -88h
__text:0000000100003D30 var_7C          = dword ptr -7Ch
__text:0000000100003D30 var_78          = qword ptr -78h
__text:0000000100003D30 var_6C          = dword ptr -6Ch
__text:0000000100003D30 var_68          = qword ptr -68h
__text:0000000100003D30 var_60          = qword ptr -60h
__text:0000000100003D30 var_58          = qword ptr -58h
__text:0000000100003D30 var_50          = qword ptr -50h
__text:0000000100003D30 var_44          = dword ptr -44h
__text:0000000100003D30 var_40          = qword ptr -40h
__text:0000000100003D30 var_38          = byte ptr -38h
__text:0000000100003D30 var_29          = byte ptr -29h
__text:0000000100003D30 var_28          = qword ptr -28h
__text:0000000100003D30 var_20          = qword ptr -20h
__text:0000000100003D30 var_11          = byte ptr -11h
__text:0000000100003D30 var_10          = qword ptr -10h
__text:0000000100003D30 var_8           = dword ptr -8
__text:0000000100003D30 var_4           = dword ptr -4
__text:0000000100003D30
__text:0000000100003D30                 push    rbp
__text:0000000100003D31                 mov     rbp, rsp
__text:0000000100003D34                 sub     rsp, 1B0h
__text:0000000100003D3B                 mov     [rbp+var_D8], rdi
__text:0000000100003D42                 mov     [rbp+var_E0], rsi
__text:0000000100003D49                 mov     rsi, [rbp+var_D8]
__text:0000000100003D50                 lea     rdi, [rbp+var_F0]
__text:0000000100003D57                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_ ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::sentry::sentry(std::__1::basic_ostream<char,std::__1::char_traits<char>>&)
__text:0000000100003D5C                 jmp     $+5
__text:0000000100003D61 ; ---------------------------------------------------------------------------
__text:0000000100003D61
__text:0000000100003D61 loc_100003D61:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+2C↑j
__text:0000000100003D61                 lea     rax, [rbp+var_F0]
__text:0000000100003D68                 mov     [rbp+var_D0], rax
__text:0000000100003D6F                 mov     rax, [rbp+var_D0]
__text:0000000100003D76                 mov     cl, [rax]
__text:0000000100003D78                 mov     [rbp+var_119], cl
__text:0000000100003D7E                 mov     al, [rbp+var_119]
__text:0000000100003D84                 test    al, 1
__text:0000000100003D86                 jnz     loc_100003D91
__text:0000000100003D8C                 jmp     loc_100004136
__text:0000000100003D91 ; ---------------------------------------------------------------------------
__text:0000000100003D91
__text:0000000100003D91 loc_100003D91:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+56↑j
__text:0000000100003D91                 mov     rax, [rbp+var_E0]
__text:0000000100003D98                 mov     [rbp+var_C8], rax
__text:0000000100003D9F                 mov     rdi, rax        ; char *
__text:0000000100003DA2                 call    _strlen
__text:0000000100003DA7                 mov     [rbp+var_128], rax
__text:0000000100003DAE                 jmp     $+5
__text:0000000100003DB3 ; ---------------------------------------------------------------------------
__text:0000000100003DB3
__text:0000000100003DB3 loc_100003DB3:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+7E↑j
__text:0000000100003DB3                 jmp     $+5
__text:0000000100003DB8 ; ---------------------------------------------------------------------------
__text:0000000100003DB8
__text:0000000100003DB8 loc_100003DB8:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_100003DB3↑j
__text:0000000100003DB8                 lea     rax, [rbp+var_110]
__text:0000000100003DBF                 mov     rcx, [rbp+var_128]
__text:0000000100003DC6                 mov     [rbp+var_108], rcx
__text:0000000100003DCD                 mov     rdx, [rbp+var_D8]
__text:0000000100003DD4                 mov     [rbp+var_B8], rax
__text:0000000100003DDB                 mov     [rbp+var_C0], rdx
__text:0000000100003DE2                 mov     rax, [rbp+var_B8]
__text:0000000100003DE9                 mov     rdx, [rbp+var_C0]
__text:0000000100003DF0                 mov     [rbp+var_98], rax
__text:0000000100003DF7                 mov     [rbp+var_A0], rdx
__text:0000000100003DFE                 mov     rax, [rbp+var_98]
__text:0000000100003E05                 mov     rdx, [rbp+var_A0]
__text:0000000100003E0C                 mov     rsi, [rdx]
__text:0000000100003E0F                 mov     rsi, [rsi-18h]
__text:0000000100003E13                 add     rdx, rsi
__text:0000000100003E16                 mov     [rbp+var_90], rdx
__text:0000000100003E1D                 mov     rdx, [rbp+var_90]
__text:0000000100003E24                 mov     [rbp+var_88], rdx
__text:0000000100003E2B                 mov     rdx, [rbp+var_88]
__text:0000000100003E32                 mov     rdx, [rdx+28h]
__text:0000000100003E36                 mov     [rax], rdx
__text:0000000100003E39                 mov     rsi, [rbp+var_E0]
__text:0000000100003E40                 mov     rax, [rbp+var_D8]
__text:0000000100003E47                 mov     rdx, [rax]
__text:0000000100003E4A                 mov     rdx, [rdx-18h]
__text:0000000100003E4E                 add     rax, rdx
__text:0000000100003E51                 mov     [rbp+var_60], rax
__text:0000000100003E55                 mov     rax, [rbp+var_60]
__text:0000000100003E59                 mov     edi, [rax+8]
__text:0000000100003E5C                 mov     [rbp+var_130], rsi
__text:0000000100003E63                 mov     [rbp+var_134], edi
__text:0000000100003E69                 mov     eax, [rbp+var_134]
__text:0000000100003E6F                 and     eax, 0B0h
__text:0000000100003E74                 cmp     eax, 20h ; ' '
__text:0000000100003E79                 jnz     loc_100003E99
__text:0000000100003E7F                 mov     rax, [rbp+var_E0]
__text:0000000100003E86                 add     rax, [rbp+var_108]
__text:0000000100003E8D                 mov     [rbp+var_140], rax
__text:0000000100003E94                 jmp     loc_100003EA7
__text:0000000100003E99 ; ---------------------------------------------------------------------------
__text:0000000100003E99
__text:0000000100003E99 loc_100003E99:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+149↑j
__text:0000000100003E99                 mov     rax, [rbp+var_E0]
__text:0000000100003EA0                 mov     [rbp+var_140], rax
__text:0000000100003EA7
__text:0000000100003EA7 loc_100003EA7:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+164↑j
__text:0000000100003EA7                 mov     rax, [rbp+var_140]
__text:0000000100003EAE                 mov     rcx, [rbp+var_E0]
__text:0000000100003EB5                 add     rcx, [rbp+var_108]
__text:0000000100003EBC                 mov     rdx, [rbp+var_D8]
__text:0000000100003EC3                 mov     rsi, [rdx]
__text:0000000100003EC6                 mov     rsi, [rsi-18h]
__text:0000000100003ECA                 add     rdx, rsi
__text:0000000100003ECD                 mov     rsi, [rbp+var_D8]
__text:0000000100003ED4                 mov     rdi, [rsi]
__text:0000000100003ED7                 mov     rdi, [rdi-18h]
__text:0000000100003EDB                 add     rsi, rdi
__text:0000000100003EDE                 mov     [rbp+var_50], rsi
__text:0000000100003EE2                 mov     rsi, [rbp+var_50]
__text:0000000100003EE6                 mov     r8d, [rsi+90h]
__text:0000000100003EED                 mov     [rbp+var_4], 0FFFFFFFFh
__text:0000000100003EF4                 mov     [rbp+var_8], r8d
__text:0000000100003EF8                 mov     r8d, [rbp+var_4]
__text:0000000100003EFC                 cmp     r8d, [rbp+var_8]
__text:0000000100003F00                 mov     [rbp+var_148], rax
__text:0000000100003F07                 mov     [rbp+var_150], rcx
__text:0000000100003F0E                 mov     [rbp+var_158], rdx
__text:0000000100003F15                 mov     [rbp+var_160], rsi
__text:0000000100003F1C                 jnz     loc_100004018
__text:0000000100003F22                 mov     rax, [rbp+var_160]
__text:0000000100003F29                 mov     [rbp+var_28], rax
__text:0000000100003F2D                 mov     [rbp+var_29], 20h ; ' '
__text:0000000100003F31                 mov     rsi, [rbp+var_28]
__text:0000000100003F35                 lea     rdi, [rbp+var_38] ; this
__text:0000000100003F39                 call    __ZNKSt3__18ios_base6getlocEv ; std::__1::ios_base::getloc(void)
__text:0000000100003F3E                 jmp     $+5
__text:0000000100003F43 ; ---------------------------------------------------------------------------
__text:0000000100003F43
__text:0000000100003F43 loc_100003F43:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+20E↑j
__text:0000000100003F43                 lea     rax, [rbp+var_38]
__text:0000000100003F47                 mov     [rbp+var_20], rax
__text:0000000100003F4B                 mov     rsi, cs:__ZNSt3__15ctypeIcE2idE_ptr
__text:0000000100003F52                 mov     rdi, rax
__text:0000000100003F55                 call    __ZNKSt3__16locale9use_facetERNS0_2idE ; std::__1::locale::use_facet(std::__1::locale::id &)
__text:0000000100003F5A                 mov     [rbp+var_168], rax
__text:0000000100003F61                 jmp     $+5
__text:0000000100003F66 ; ---------------------------------------------------------------------------
__text:0000000100003F66
__text:0000000100003F66 loc_100003F66:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+231↑j
__text:0000000100003F66                 mov     al, [rbp+var_29]
__text:0000000100003F69                 mov     rcx, [rbp+var_168]
__text:0000000100003F70                 mov     [rbp+var_10], rcx
__text:0000000100003F74                 mov     [rbp+var_11], al
__text:0000000100003F77                 mov     rdx, [rbp+var_10]
__text:0000000100003F7B                 mov     rsi, [rdx]
__text:0000000100003F7E                 mov     rsi, [rsi+38h]
__text:0000000100003F82                 movsx   edi, [rbp+var_11]
__text:0000000100003F86                 mov     [rbp+var_16C], edi
__text:0000000100003F8C                 mov     rdi, rdx
__text:0000000100003F8F                 mov     r8d, [rbp+var_16C]
__text:0000000100003F96                 mov     [rbp+var_178], rsi
__text:0000000100003F9D                 mov     esi, r8d
__text:0000000100003FA0                 mov     rdx, [rbp+var_178]
__text:0000000100003FA7                 call    rdx
__text:0000000100003FA9                 mov     [rbp+var_179], al
__text:0000000100003FAF                 jmp     loc_100003FF4
__text:0000000100003FB4 ; ---------------------------------------------------------------------------
__text:0000000100003FB4                 mov     ecx, edx
__text:0000000100003FB6                 mov     [rbp+var_40], rax
__text:0000000100003FBA                 mov     [rbp+var_44], ecx
__text:0000000100003FBD                 lea     rdi, [rbp+var_38] ; this
__text:0000000100003FC1                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:0000000100003FC6                 jmp     $+5
__text:0000000100003FCB ; ---------------------------------------------------------------------------
__text:0000000100003FCB
__text:0000000100003FCB loc_100003FCB:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+296↑j
__text:0000000100003FCB                 mov     rax, [rbp+var_40]
__text:0000000100003FCF                 mov     ecx, [rbp+var_44]
__text:0000000100003FD2                 mov     [rbp+var_188], rax
__text:0000000100003FD9                 mov     [rbp+var_18C], ecx
__text:0000000100003FDF                 jmp     loc_100004106
__text:0000000100003FE4 ; ---------------------------------------------------------------------------
__text:0000000100003FE4                 mov     ecx, edx
__text:0000000100003FE6                 mov     rdi, rax
__text:0000000100003FE9                 mov     [rbp+var_190], ecx
__text:0000000100003FEF                 call    ___clang_call_terminate
__text:0000000100003FF4 ; ---------------------------------------------------------------------------
__text:0000000100003FF4
__text:0000000100003FF4 loc_100003FF4:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+27F↑j
__text:0000000100003FF4                 lea     rdi, [rbp+var_38] ; this
__text:0000000100003FF8                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:0000000100003FFD                 jmp     $+5
__text:0000000100004002 ; ---------------------------------------------------------------------------
__text:0000000100004002
__text:0000000100004002 loc_100004002:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+2CD↑j
__text:0000000100004002                 mov     al, [rbp+var_179]
__text:0000000100004008                 movsx   ecx, al
__text:000000010000400B                 mov     rdx, [rbp+var_160]
__text:0000000100004012                 mov     [rdx+90h], ecx
__text:0000000100004018
__text:0000000100004018 loc_100004018:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+1EC↑j
__text:0000000100004018                 mov     rax, [rbp+var_160]
__text:000000010000401F                 mov     ecx, [rax+90h]
__text:0000000100004025                 mov     dl, cl
__text:0000000100004027                 mov     [rbp+var_191], dl
__text:000000010000402D                 mov     rdi, [rbp+var_110]
__text:0000000100004034                 mov     al, [rbp+var_191]
__text:000000010000403A                 movsx   r9d, al
__text:000000010000403E                 mov     rsi, [rbp+var_130]
__text:0000000100004045                 mov     rdx, [rbp+var_148]
__text:000000010000404C                 mov     rcx, [rbp+var_150]
__text:0000000100004053                 mov     r8, [rbp+var_158]
__text:000000010000405A                 call    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)
__text:000000010000405F                 mov     [rbp+var_1A0], rax
__text:0000000100004066                 jmp     $+5
__text:000000010000406B ; ---------------------------------------------------------------------------
__text:000000010000406B
__text:000000010000406B loc_10000406B:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+336↑j
__text:000000010000406B                 lea     rax, [rbp+var_118]
__text:0000000100004072                 mov     rcx, [rbp+var_1A0]
__text:0000000100004079                 mov     [rbp+var_118], rcx
__text:0000000100004080                 mov     [rbp+var_58], rax
__text:0000000100004084                 mov     rax, [rbp+var_58]
__text:0000000100004088                 cmp     qword ptr [rax], 0
__text:000000010000408F                 jnz     loc_100004131
__text:0000000100004095                 mov     rax, [rbp+var_D8]
__text:000000010000409C                 mov     rcx, [rax]
__text:000000010000409F                 mov     rcx, [rcx-18h]
__text:00000001000040A3                 add     rax, rcx
__text:00000001000040A6                 mov     [rbp+var_78], rax
__text:00000001000040AA                 mov     [rbp+var_7C], 5
__text:00000001000040B1                 mov     rax, [rbp+var_78]
__text:00000001000040B5                 mov     [rbp+var_68], rax
__text:00000001000040B9                 mov     [rbp+var_6C], 5
__text:00000001000040C0                 mov     rax, [rbp+var_68]
__text:00000001000040C4                 mov     edx, [rax+20h]
__text:00000001000040C7                 or      edx, 5
__text:00000001000040CA                 mov     rdi, rax        ; this
__text:00000001000040CD                 mov     esi, edx        ; unsigned int
__text:00000001000040CF                 call    __ZNSt3__18ios_base5clearEj ; std::__1::ios_base::clear(uint)
__text:00000001000040D4                 jmp     $+5
__text:00000001000040D9 ; ---------------------------------------------------------------------------
__text:00000001000040D9
__text:00000001000040D9 loc_1000040D9:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+3A4↑j
__text:00000001000040D9                 jmp     $+5
__text:00000001000040DE ; ---------------------------------------------------------------------------
__text:00000001000040DE
__text:00000001000040DE loc_1000040DE:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_1000040D9↑j
__text:00000001000040DE                 jmp     loc_100004131
__text:00000001000040E3 ; ---------------------------------------------------------------------------
__text:00000001000040E3                 mov     ecx, edx
__text:00000001000040E5                 mov     [rbp+var_F8], rax
__text:00000001000040EC                 mov     [rbp+var_FC], ecx
__text:00000001000040F2                 jmp     loc_100004151
__text:00000001000040F7 ; ---------------------------------------------------------------------------
__text:00000001000040F7                 mov     ecx, edx
__text:00000001000040F9                 mov     [rbp+var_188], rax
__text:0000000100004100                 mov     [rbp+var_18C], ecx
__text:0000000100004106
__text:0000000100004106 loc_100004106:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+2AF↑j
__text:0000000100004106                 mov     eax, [rbp+var_18C]
__text:000000010000410C                 mov     rcx, [rbp+var_188]
__text:0000000100004113                 mov     [rbp+var_F8], rcx
__text:000000010000411A                 mov     [rbp+var_FC], eax
__text:0000000100004120                 lea     rdi, [rbp+var_F0]
__text:0000000100004127                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::sentry::~sentry()
__text:000000010000412C                 jmp     loc_10000414C
__text:0000000100004131 ; ---------------------------------------------------------------------------
__text:0000000100004131
__text:0000000100004131 loc_100004131:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+35F↑j
__text:0000000100004131                                         ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_1000040DE↑j
__text:0000000100004131                 jmp     $+5
__text:0000000100004136 ; ---------------------------------------------------------------------------
__text:0000000100004136
__text:0000000100004136 loc_100004136:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+5C↑j
__text:0000000100004136                                         ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_100004131↑j
__text:0000000100004136                 lea     rdi, [rbp+var_F0]
__text:000000010000413D                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::sentry::~sentry()
__text:0000000100004142                 jmp     $+5
__text:0000000100004147 ; ---------------------------------------------------------------------------
__text:0000000100004147
__text:0000000100004147 loc_100004147:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+412↑j
__text:0000000100004147                 jmp     loc_100004184
__text:000000010000414C ; ---------------------------------------------------------------------------
__text:000000010000414C
__text:000000010000414C loc_10000414C:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+3FC↑j
__text:000000010000414C                 jmp     $+5
__text:0000000100004151 ; ---------------------------------------------------------------------------
__text:0000000100004151
__text:0000000100004151 loc_100004151:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+3C2↑j
__text:0000000100004151                                         ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_10000414C↑j
__text:0000000100004151                 mov     rdi, [rbp+var_F8] ; void *
__text:0000000100004158                 call    ___cxa_begin_catch
__text:000000010000415D                 mov     rdi, [rbp+var_D8]
__text:0000000100004164                 mov     rcx, [rdi]
__text:0000000100004167                 mov     rcx, [rcx-18h]
__text:000000010000416B                 add     rdi, rcx        ; this
__text:000000010000416E                 mov     [rbp+var_1A8], rax
__text:0000000100004175                 call    __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv ; std::__1::ios_base::__set_badbit_and_consider_rethrow(void)
__text:000000010000417A                 jmp     $+5
__text:000000010000417F ; ---------------------------------------------------------------------------
__text:000000010000417F
__text:000000010000417F loc_10000417F:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+44A↑j
__text:000000010000417F                 call    ___cxa_end_catch
__text:0000000100004184
__text:0000000100004184 loc_100004184:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_100004147↑j
__text:0000000100004184                 mov     rax, [rbp+var_D8]
__text:000000010000418B                 add     rsp, 1B0h
__text:0000000100004192                 pop     rbp
__text:0000000100004193                 retn
__text:0000000100004193 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc endp
__text:0000000100004193
__text:0000000100004194 ; ---------------------------------------------------------------------------
__text:0000000100004194                 mov     ecx, edx
__text:0000000100004196                 mov     [rbp-0F8h], rax
__text:000000010000419D                 mov     [rbp-0FCh], ecx
__text:00000001000041A3                 call    ___cxa_end_catch
__text:00000001000041A8                 jmp     $+5
__text:00000001000041AD ; ---------------------------------------------------------------------------
__text:00000001000041AD
__text:00000001000041AD loc_1000041AD:                          ; CODE XREF: __text:00000001000041A8↑j
__text:00000001000041AD                 jmp     $+5
__text:00000001000041B2 ; ---------------------------------------------------------------------------
__text:00000001000041B2
__text:00000001000041B2 loc_1000041B2:                          ; CODE XREF: __text:loc_1000041AD↑j
__text:00000001000041B2                 mov     rdi, [rbp-0F8h]
__text:00000001000041B9                 call    __Unwind_Resume
__text:00000001000041BE ; ---------------------------------------------------------------------------
__text:00000001000041BE                 mov     ecx, edx
__text:00000001000041C0                 mov     rdi, rax
__text:00000001000041C3                 mov     [rbp-1ACh], ecx
__text:00000001000041C9                 call    ___clang_call_terminate
__text:00000001000041C9 ; ---------------------------------------------------------------------------
__text:00000001000041CE                 align 10h
__text:00000001000041D0
__text:00000001000041D0 ; =============== S U B R O U T I N E =======================================
__text:00000001000041D0
__text:00000001000041D0 ; Attributes: bp-based frame
__text:00000001000041D0
__text:00000001000041D0 ; std::__1::basic_ostream<char, std::__1::char_traits<char>> & std::__1::endl<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &)
__text:00000001000041D0 __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ proc near
__text:00000001000041D0                                         ; DATA XREF: _main:loc_100003184↑o
__text:00000001000041D0
__text:00000001000041D0 var_88          = qword ptr -88h
__text:00000001000041D0 var_80          = qword ptr -80h
__text:00000001000041D0 var_78          = dword ptr -78h
__text:00000001000041D0 var_71          = byte ptr -71h
__text:00000001000041D0 var_70          = qword ptr -70h
__text:00000001000041D0 var_64          = dword ptr -64h
__text:00000001000041D0 var_60          = qword ptr -60h
__text:00000001000041D0 var_58          = qword ptr -58h
__text:00000001000041D0 var_50          = qword ptr -50h
__text:00000001000041D0 var_48          = qword ptr -48h
__text:00000001000041D0 var_3C          = dword ptr -3Ch
__text:00000001000041D0 var_38          = qword ptr -38h
__text:00000001000041D0 var_30          = byte ptr -30h
__text:00000001000041D0 var_21          = byte ptr -21h
__text:00000001000041D0 var_20          = qword ptr -20h
__text:00000001000041D0 var_18          = qword ptr -18h
__text:00000001000041D0 var_9           = byte ptr -9
__text:00000001000041D0 var_8           = qword ptr -8
__text:00000001000041D0
__text:00000001000041D0                 push    rbp
__text:00000001000041D1                 mov     rbp, rsp
__text:00000001000041D4                 sub     rsp, 90h
__text:00000001000041DB                 mov     [rbp+var_48], rdi
__text:00000001000041DF                 mov     rax, rdi
__text:00000001000041E2                 mov     rcx, [rdi]
__text:00000001000041E5                 mov     rcx, [rcx-18h]
__text:00000001000041E9                 add     rdi, rcx
__text:00000001000041EC                 mov     [rbp+var_20], rdi
__text:00000001000041F0                 mov     [rbp+var_21], 0Ah
__text:00000001000041F4                 mov     rsi, [rbp+var_20]
__text:00000001000041F8                 lea     rcx, [rbp+var_30]
__text:00000001000041FC                 mov     rdi, rcx        ; this
__text:00000001000041FF                 mov     [rbp+var_50], rax
__text:0000000100004203                 mov     [rbp+var_58], rcx
__text:0000000100004207                 call    __ZNKSt3__18ios_base6getlocEv ; std::__1::ios_base::getloc(void)
__text:000000010000420C                 mov     rax, [rbp+var_58]
__text:0000000100004210                 mov     [rbp+var_18], rax
__text:0000000100004214                 mov     rsi, cs:__ZNSt3__15ctypeIcE2idE_ptr
__text:000000010000421B                 mov     rdi, rax
__text:000000010000421E                 call    __ZNKSt3__16locale9use_facetERNS0_2idE ; std::__1::locale::use_facet(std::__1::locale::id &)
__text:0000000100004223                 mov     [rbp+var_60], rax
__text:0000000100004227                 jmp     $+5
__text:000000010000422C ; ---------------------------------------------------------------------------
__text:000000010000422C
__text:000000010000422C loc_10000422C:                          ; CODE XREF: std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)+57↑j
__text:000000010000422C                 mov     al, [rbp+var_21]
__text:000000010000422F                 mov     rcx, [rbp+var_60]
__text:0000000100004233                 mov     [rbp+var_8], rcx
__text:0000000100004237                 mov     [rbp+var_9], al
__text:000000010000423A                 mov     rdx, [rbp+var_8]
__text:000000010000423E                 mov     rsi, [rdx]
__text:0000000100004241                 mov     rsi, [rsi+38h]
__text:0000000100004245                 movsx   edi, [rbp+var_9]
__text:0000000100004249                 mov     [rbp+var_64], edi
__text:000000010000424C                 mov     rdi, rdx
__text:000000010000424F                 mov     r8d, [rbp+var_64]
__text:0000000100004253                 mov     [rbp+var_70], rsi
__text:0000000100004257                 mov     esi, r8d
__text:000000010000425A                 mov     rdx, [rbp+var_70]
__text:000000010000425E                 call    rdx
__text:0000000100004260                 mov     [rbp+var_71], al
__text:0000000100004263                 jmp     loc_100004295
__text:0000000100004268 ; ---------------------------------------------------------------------------
__text:0000000100004268                 mov     ecx, edx
__text:000000010000426A                 mov     [rbp+var_38], rax
__text:000000010000426E                 mov     [rbp+var_3C], ecx
__text:0000000100004271                 lea     rdi, [rbp+var_30] ; this
__text:0000000100004275                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:000000010000427A                 jmp     $+5
__text:000000010000427F ; ---------------------------------------------------------------------------
__text:000000010000427F
__text:000000010000427F loc_10000427F:                          ; CODE XREF: std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)+AA↑j
__text:000000010000427F                 mov     rdi, [rbp+var_38]
__text:0000000100004283                 call    __Unwind_Resume
__text:0000000100004288 ; ---------------------------------------------------------------------------
__text:0000000100004288                 mov     ecx, edx
__text:000000010000428A                 mov     rdi, rax
__text:000000010000428D                 mov     [rbp+var_78], ecx
__text:0000000100004290                 call    ___clang_call_terminate
__text:0000000100004295 ; ---------------------------------------------------------------------------
__text:0000000100004295
__text:0000000100004295 loc_100004295:                          ; CODE XREF: std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)+93↑j
__text:0000000100004295                 lea     rdi, [rbp+var_30] ; this
__text:0000000100004299                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:000000010000429E                 mov     rdi, [rbp+var_50]
__text:00000001000042A2                 mov     al, [rbp+var_71]
__text:00000001000042A5                 movsx   esi, al
__text:00000001000042A8                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::put(char)
__text:00000001000042AD                 mov     rdi, [rbp+var_48]
__text:00000001000042B1                 mov     [rbp+var_80], rax
__text:00000001000042B5                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::flush(void)
__text:00000001000042BA                 mov     rdi, [rbp+var_48]
__text:00000001000042BE                 mov     [rbp+var_88], rax
__text:00000001000042C5                 mov     rax, rdi
__text:00000001000042C8                 add     rsp, 90h
__text:00000001000042CF                 pop     rbp
__text:00000001000042D0                 retn
__text:00000001000042D0 __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ endp
__text:00000001000042D0
__text:00000001000042D0 ; ---------------------------------------------------------------------------
__text:00000001000042D1                 align 20h
__text:00000001000042E0
__text:00000001000042E0 ; =============== S U B R O U T I N E =======================================
__text:00000001000042E0
__text:00000001000042E0 ; Attributes: bp-based frame
__text:00000001000042E0
__text:00000001000042E0 ; std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base &, char)
__text:00000001000042E0 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ proc near
__text:00000001000042E0                                         ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+32A↑p
__text:00000001000042E0
__text:00000001000042E0 var_2CC         = dword ptr -2CCh
__text:00000001000042E0 var_2C8         = dword ptr -2C8h
__text:00000001000042E0 var_2C4         = dword ptr -2C4h
__text:00000001000042E0 var_2C0         = qword ptr -2C0h
__text:00000001000042E0 var_2B8         = qword ptr -2B8h
__text:00000001000042E0 var_2B0         = qword ptr -2B0h
__text:00000001000042E0 var_2A8         = qword ptr -2A8h
__text:00000001000042E0 var_2A0         = qword ptr -2A0h
__text:00000001000042E0 var_298         = qword ptr -298h
__text:00000001000042E0 var_290         = qword ptr -290h
__text:00000001000042E0 var_288         = qword ptr -288h
__text:00000001000042E0 var_27C         = dword ptr -27Ch
__text:00000001000042E0 var_278         = qword ptr -278h
__text:00000001000042E0 var_26C         = dword ptr -26Ch
__text:00000001000042E0 var_268         = qword ptr -268h
__text:00000001000042E0 var_260         = byte ptr -260h
__text:00000001000042E0 var_248         = qword ptr -248h
__text:00000001000042E0 var_240         = qword ptr -240h
__text:00000001000042E0 var_238         = qword ptr -238h
__text:00000001000042E0 var_230         = qword ptr -230h
__text:00000001000042E0 var_228         = qword ptr -228h
__text:00000001000042E0 var_219         = byte ptr -219h
__text:00000001000042E0 var_218         = qword ptr -218h
__text:00000001000042E0 var_210         = qword ptr -210h
__text:00000001000042E0 var_208         = qword ptr -208h
__text:00000001000042E0 var_200         = qword ptr -200h
__text:00000001000042E0 var_1F8         = qword ptr -1F8h
__text:00000001000042E0 var_1F0         = qword ptr -1F0h
__text:00000001000042E0 var_1E8         = qword ptr -1E8h
__text:00000001000042E0 var_1E0         = qword ptr -1E0h
__text:00000001000042E0 var_1D8         = qword ptr -1D8h
__text:00000001000042E0 var_1D0         = qword ptr -1D0h
__text:00000001000042E0 var_1C8         = qword ptr -1C8h
__text:00000001000042E0 var_1C0         = qword ptr -1C0h
__text:00000001000042E0 var_1B8         = qword ptr -1B8h
__text:00000001000042E0 var_1B0         = qword ptr -1B0h
__text:00000001000042E0 var_1A8         = qword ptr -1A8h
__text:00000001000042E0 var_1A0         = qword ptr -1A0h
__text:00000001000042E0 var_198         = qword ptr -198h
__text:00000001000042E0 var_190         = qword ptr -190h
__text:00000001000042E0 var_188         = qword ptr -188h
__text:00000001000042E0 var_180         = qword ptr -180h
__text:00000001000042E0 var_178         = qword ptr -178h
__text:00000001000042E0 var_170         = qword ptr -170h
__text:00000001000042E0 var_168         = qword ptr -168h
__text:00000001000042E0 var_160         = qword ptr -160h
__text:00000001000042E0 var_158         = qword ptr -158h
__text:00000001000042E0 var_150         = qword ptr -150h
__text:00000001000042E0 var_148         = qword ptr -148h
__text:00000001000042E0 var_140         = qword ptr -140h
__text:00000001000042E0 var_138         = qword ptr -138h
__text:00000001000042E0 var_130         = qword ptr -130h
__text:00000001000042E0 var_128         = qword ptr -128h
__text:00000001000042E0 var_120         = qword ptr -120h
__text:00000001000042E0 var_118         = qword ptr -118h
__text:00000001000042E0 var_110         = qword ptr -110h
__text:00000001000042E0 var_108         = qword ptr -108h
__text:00000001000042E0 var_100         = qword ptr -100h
__text:00000001000042E0 var_F8          = qword ptr -0F8h
__text:00000001000042E0 var_F0          = qword ptr -0F0h
__text:00000001000042E0 var_E8          = qword ptr -0E8h
__text:00000001000042E0 var_E0          = qword ptr -0E0h
__text:00000001000042E0 var_D8          = qword ptr -0D8h
__text:00000001000042E0 var_D0          = qword ptr -0D0h
__text:00000001000042E0 var_C8          = qword ptr -0C8h
__text:00000001000042E0 var_C0          = qword ptr -0C0h
__text:00000001000042E0 var_B8          = qword ptr -0B8h
__text:00000001000042E0 var_B0          = qword ptr -0B0h
__text:00000001000042E0 var_A8          = qword ptr -0A8h
__text:00000001000042E0 var_A0          = qword ptr -0A0h
__text:00000001000042E0 var_98          = qword ptr -98h
__text:00000001000042E0 var_90          = qword ptr -90h
__text:00000001000042E0 var_88          = qword ptr -88h
__text:00000001000042E0 var_80          = qword ptr -80h
__text:00000001000042E0 var_78          = qword ptr -78h
__text:00000001000042E0 var_70          = qword ptr -70h
__text:00000001000042E0 var_68          = qword ptr -68h
__text:00000001000042E0 var_60          = qword ptr -60h
__text:00000001000042E0 var_51          = byte ptr -51h
__text:00000001000042E0 var_50          = qword ptr -50h
__text:00000001000042E0 var_48          = qword ptr -48h
__text:00000001000042E0 var_39          = byte ptr -39h
__text:00000001000042E0 var_38          = qword ptr -38h
__text:00000001000042E0 var_30          = qword ptr -30h
__text:00000001000042E0 var_28          = qword ptr -28h
__text:00000001000042E0 var_20          = qword ptr -20h
__text:00000001000042E0 var_18          = qword ptr -18h
__text:00000001000042E0 var_10          = qword ptr -10h
__text:00000001000042E0 var_8           = qword ptr -8
__text:00000001000042E0
__text:00000001000042E0                 push    rbp
__text:00000001000042E1                 mov     rbp, rsp
__text:00000001000042E4                 sub     rsp, 2D0h
__text:00000001000042EB                 mov     al, r9b
__text:00000001000042EE                 lea     r10, [rbp+var_228]
__text:00000001000042F5                 lea     r11, [rbp+var_1E8]
__text:00000001000042FC                 mov     [rbp+var_1F8], rdi
__text:0000000100004303                 mov     [rbp+var_200], rsi
__text:000000010000430A                 mov     [rbp+var_208], rdx
__text:0000000100004311                 mov     [rbp+var_210], rcx
__text:0000000100004318                 mov     [rbp+var_218], r8
__text:000000010000431F                 mov     [rbp+var_219], al
__text:0000000100004325                 mov     rcx, [rbp+var_1F8]
__text:000000010000432C                 mov     [rbp+var_1D8], r11
__text:0000000100004333                 mov     [rbp+var_1E0], 0FFFFFFFFFFFFFFFFh
__text:000000010000433E                 mov     rdx, [rbp+var_1D8]
__text:0000000100004345                 mov     rsi, [rbp+var_1E0]
__text:000000010000434C                 mov     [rbp+var_1C8], rdx
__text:0000000100004353                 mov     [rbp+var_1D0], rsi
__text:000000010000435A                 mov     rdx, [rbp+var_1C8]
__text:0000000100004361                 mov     qword ptr [rdx], 0
__text:0000000100004368                 mov     rdx, [rbp+var_1E8]
__text:000000010000436F                 mov     [rbp+var_228], rdx
__text:0000000100004376                 mov     [rbp+var_1C0], r10
__text:000000010000437D                 cmp     rcx, 0
__text:0000000100004384                 jnz     loc_10000439D
__text:000000010000438A                 mov     rax, [rbp+var_1F8]
__text:0000000100004391                 mov     [rbp+var_1F0], rax
__text:0000000100004398                 jmp     loc_100004962
__text:000000010000439D ; ---------------------------------------------------------------------------
__text:000000010000439D
__text:000000010000439D loc_10000439D:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+A4↑j
__text:000000010000439D                 mov     rax, [rbp+var_210]
__text:00000001000043A4                 mov     rcx, [rbp+var_200]
__text:00000001000043AB                 sub     rax, rcx
__text:00000001000043AE                 mov     [rbp+var_230], rax
__text:00000001000043B5                 mov     rax, [rbp+var_218]
__text:00000001000043BC                 mov     [rbp+var_158], rax
__text:00000001000043C3                 mov     rax, [rbp+var_158]
__text:00000001000043CA                 mov     rax, [rax+18h]
__text:00000001000043CE                 mov     [rbp+var_238], rax
__text:00000001000043D5                 mov     rax, [rbp+var_238]
__text:00000001000043DC                 cmp     rax, [rbp+var_230]
__text:00000001000043E3                 jle     loc_100004406
__text:00000001000043E9                 mov     rax, [rbp+var_230]
__text:00000001000043F0                 mov     rcx, [rbp+var_238]
__text:00000001000043F7                 sub     rcx, rax
__text:00000001000043FA                 mov     [rbp+var_238], rcx
__text:0000000100004401                 jmp     loc_100004411
__text:0000000100004406 ; ---------------------------------------------------------------------------
__text:0000000100004406
__text:0000000100004406 loc_100004406:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+103↑j
__text:0000000100004406                 mov     [rbp+var_238], 0
__text:0000000100004411
__text:0000000100004411 loc_100004411:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+121↑j
__text:0000000100004411                 mov     rax, [rbp+var_208]
__text:0000000100004418                 mov     rcx, [rbp+var_200]
__text:000000010000441F                 sub     rax, rcx
__text:0000000100004422                 mov     [rbp+var_240], rax
__text:0000000100004429                 cmp     [rbp+var_240], 0
__text:0000000100004434                 jle     loc_100004511
__text:000000010000443A                 mov     rax, [rbp+var_1F8]
__text:0000000100004441                 mov     rcx, [rbp+var_200]
__text:0000000100004448                 mov     rdx, [rbp+var_240]
__text:000000010000444F                 mov     [rbp+var_F8], rax
__text:0000000100004456                 mov     [rbp+var_100], rcx
__text:000000010000445D                 mov     [rbp+var_108], rdx
__text:0000000100004464                 mov     rax, [rbp+var_F8]
__text:000000010000446B                 mov     rcx, [rax]
__text:000000010000446E                 mov     rcx, [rcx+60h]
__text:0000000100004472                 mov     rsi, [rbp+var_100]
__text:0000000100004479                 mov     rdx, [rbp+var_108]
__text:0000000100004480                 mov     rdi, rax
__text:0000000100004483                 call    rcx
__text:0000000100004485                 cmp     rax, [rbp+var_240]
__text:000000010000448C                 jz      loc_10000450C
__text:0000000100004492                 lea     rax, [rbp+var_248]
__text:0000000100004499                 lea     rcx, [rbp+var_F0]
__text:00000001000044A0                 mov     [rbp+var_E0], rcx
__text:00000001000044A7                 mov     [rbp+var_E8], 0FFFFFFFFFFFFFFFFh
__text:00000001000044B2                 mov     rcx, [rbp+var_E0]
__text:00000001000044B9                 mov     rdx, [rbp+var_E8]
__text:00000001000044C0                 mov     [rbp+var_D0], rcx
__text:00000001000044C7                 mov     [rbp+var_D8], rdx
__text:00000001000044CE                 mov     rcx, [rbp+var_D0]
__text:00000001000044D5                 mov     qword ptr [rcx], 0
__text:00000001000044DC                 mov     rcx, [rbp+var_F0]
__text:00000001000044E3                 mov     [rbp+var_248], rcx
__text:00000001000044EA                 mov     [rbp+var_8], rax
__text:00000001000044EE                 mov     [rbp+var_1F8], 0
__text:00000001000044F9                 mov     rax, [rbp+var_1F8]
__text:0000000100004500                 mov     [rbp+var_1F0], rax
__text:0000000100004507                 jmp     loc_100004962
__text:000000010000450C ; ---------------------------------------------------------------------------
__text:000000010000450C
__text:000000010000450C loc_10000450C:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+1AC↑j
__text:000000010000450C                 jmp     $+5
__text:0000000100004511 ; ---------------------------------------------------------------------------
__text:0000000100004511
__text:0000000100004511 loc_100004511:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+154↑j
__text:0000000100004511                                         ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_10000450C↑j
__text:0000000100004511                 cmp     [rbp+var_238], 0
__text:000000010000451C                 jle     loc_10000481B
__text:0000000100004522                 lea     rax, [rbp+var_260]
__text:0000000100004529                 mov     rcx, [rbp+var_238]
__text:0000000100004530                 mov     dl, [rbp+var_219]
__text:0000000100004536                 mov     [rbp+var_48], rax
__text:000000010000453A                 mov     [rbp+var_50], rcx
__text:000000010000453E                 mov     [rbp+var_51], dl
__text:0000000100004541                 mov     rax, [rbp+var_48]
__text:0000000100004545                 mov     rcx, [rbp+var_50]
__text:0000000100004549                 mov     dl, [rbp+var_51]
__text:000000010000454C                 mov     [rbp+var_30], rax
__text:0000000100004550                 mov     [rbp+var_38], rcx
__text:0000000100004554                 mov     [rbp+var_39], dl
__text:0000000100004557                 mov     rax, [rbp+var_30]
__text:000000010000455B                 mov     [rbp+var_28], rax
__text:000000010000455F                 mov     rcx, [rbp+var_28]
__text:0000000100004563                 mov     [rbp+var_20], rcx
__text:0000000100004567                 mov     rcx, [rbp+var_20]
__text:000000010000456B                 mov     [rbp+var_18], rcx
__text:000000010000456F                 mov     rcx, [rbp+var_18]
__text:0000000100004573                 mov     [rbp+var_10], rcx
__text:0000000100004577                 mov     rsi, [rbp+var_38]
__text:000000010000457B                 mov     rdi, rax
__text:000000010000457E                 movsx   edx, [rbp+var_39]
__text:0000000100004582                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::__init(ulong,char)
__text:0000000100004587                 lea     rax, [rbp+var_260]
__text:000000010000458E                 mov     rcx, [rbp+var_1F8]
__text:0000000100004595                 mov     [rbp+var_C8], rax
__text:000000010000459C                 mov     rax, [rbp+var_C8]
__text:00000001000045A3                 mov     [rbp+var_C0], rax
__text:00000001000045AA                 mov     rax, [rbp+var_C0]
__text:00000001000045B1                 mov     [rbp+var_B8], rax
__text:00000001000045B8                 mov     rsi, [rbp+var_B8]
__text:00000001000045BF                 mov     [rbp+var_B0], rsi
__text:00000001000045C6                 mov     rsi, [rbp+var_B0]
__text:00000001000045CD                 mov     [rbp+var_A8], rsi
__text:00000001000045D4                 mov     rsi, [rbp+var_A8]
__text:00000001000045DB                 movzx   edx, byte ptr [rsi]
__text:00000001000045DE                 and     edx, 1
__text:00000001000045E4                 cmp     edx, 0
__text:00000001000045EA                 mov     [rbp+var_290], rcx
__text:00000001000045F1                 mov     [rbp+var_298], rax
__text:00000001000045F8                 jz      loc_10000462D
__text:00000001000045FE                 mov     rax, [rbp+var_298]
__text:0000000100004605                 mov     [rbp+var_78], rax
__text:0000000100004609                 mov     rcx, [rbp+var_78]
__text:000000010000460D                 mov     [rbp+var_70], rcx
__text:0000000100004611                 mov     rcx, [rbp+var_70]
__text:0000000100004615                 mov     [rbp+var_68], rcx
__text:0000000100004619                 mov     rcx, [rbp+var_68]
__text:000000010000461D                 mov     rcx, [rcx+10h]
__text:0000000100004621                 mov     [rbp+var_2A0], rcx
__text:0000000100004628                 jmp     loc_100004682
__text:000000010000462D ; ---------------------------------------------------------------------------
__text:000000010000462D
__text:000000010000462D loc_10000462D:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+318↑j
__text:000000010000462D                 mov     rax, [rbp+var_298]
__text:0000000100004634                 mov     [rbp+var_A0], rax
__text:000000010000463B                 mov     rcx, [rbp+var_A0]
__text:0000000100004642                 mov     [rbp+var_98], rcx
__text:0000000100004649                 mov     rcx, [rbp+var_98]
__text:0000000100004650                 mov     [rbp+var_90], rcx
__text:0000000100004657                 mov     rcx, [rbp+var_90]
__text:000000010000465E                 add     rcx, 1
__text:0000000100004665                 mov     [rbp+var_88], rcx
__text:000000010000466C                 mov     rcx, [rbp+var_88]
__text:0000000100004673                 mov     [rbp+var_80], rcx
__text:0000000100004677                 mov     rcx, [rbp+var_80]
__text:000000010000467B                 mov     [rbp+var_2A0], rcx
__text:0000000100004682
__text:0000000100004682 loc_100004682:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+348↑j
__text:0000000100004682                 mov     rax, [rbp+var_2A0]
__text:0000000100004689                 mov     [rbp+var_60], rax
__text:000000010000468D                 mov     rcx, [rbp+var_238]
__text:0000000100004694                 mov     rdx, [rbp+var_290]
__text:000000010000469B                 mov     [rbp+var_110], rdx
__text:00000001000046A2                 mov     [rbp+var_118], rax
__text:00000001000046A9                 mov     [rbp+var_120], rcx
__text:00000001000046B0                 mov     rax, [rbp+var_110]
__text:00000001000046B7                 mov     rsi, [rax]
__text:00000001000046BA                 mov     rsi, [rsi+60h]
__text:00000001000046BE                 mov     rdi, [rbp+var_118]
__text:00000001000046C5                 mov     [rbp+var_2A8], rdi
__text:00000001000046CC                 mov     rdi, rax
__text:00000001000046CF                 mov     rax, [rbp+var_2A8]
__text:00000001000046D6                 mov     [rbp+var_2B0], rsi
__text:00000001000046DD                 mov     rsi, rax
__text:00000001000046E0                 mov     rdx, rcx
__text:00000001000046E3                 mov     rcx, [rbp+var_2B0]
__text:00000001000046EA                 call    rcx
__text:00000001000046EC                 mov     [rbp+var_2B8], rax
__text:00000001000046F3                 jmp     $+5
__text:00000001000046F8 ; ---------------------------------------------------------------------------
__text:00000001000046F8
__text:00000001000046F8 loc_1000046F8:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+413↑j
__text:00000001000046F8                 jmp     $+5
__text:00000001000046FD ; ---------------------------------------------------------------------------
__text:00000001000046FD
__text:00000001000046FD loc_1000046FD:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_1000046F8↑j
__text:00000001000046FD                 mov     rax, [rbp+var_2B8]
__text:0000000100004704                 cmp     rax, [rbp+var_238]
__text:000000010000470B                 jz      loc_1000047C6
__text:0000000100004711                 lea     rax, [rbp+var_148]
__text:0000000100004718                 mov     [rbp+var_138], rax
__text:000000010000471F                 mov     [rbp+var_140], 0FFFFFFFFFFFFFFFFh
__text:000000010000472A                 mov     rax, [rbp+var_138]
__text:0000000100004731                 mov     rcx, [rbp+var_140]
__text:0000000100004738                 mov     [rbp+var_128], rax
__text:000000010000473F                 mov     [rbp+var_130], rcx
__text:0000000100004746                 mov     rax, [rbp+var_128]
__text:000000010000474D                 mov     qword ptr [rax], 0
__text:0000000100004754                 mov     rax, [rbp+var_148]
__text:000000010000475B                 mov     [rbp+var_2C0], rax
__text:0000000100004762                 lea     rax, [rbp+var_278]
__text:0000000100004769                 mov     rcx, [rbp+var_2C0]
__text:0000000100004770                 mov     [rbp+var_278], rcx
__text:0000000100004777                 mov     [rbp+var_150], rax
__text:000000010000477E                 mov     [rbp+var_1F8], 0
__text:0000000100004789                 mov     rax, [rbp+var_1F8]
__text:0000000100004790                 mov     [rbp+var_1F0], rax
__text:0000000100004797                 mov     [rbp+var_27C], 1
__text:00000001000047A1                 jmp     loc_1000047D0
__text:00000001000047A6 ; ---------------------------------------------------------------------------
__text:00000001000047A6                 mov     ecx, edx
__text:00000001000047A8                 mov     [rbp+var_268], rax
__text:00000001000047AF                 mov     [rbp+var_26C], ecx
__text:00000001000047B5                 lea     rdi, [rbp+var_260]
__text:00000001000047BC                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::~basic_string()
__text:00000001000047C1                 jmp     loc_100004816
__text:00000001000047C6 ; ---------------------------------------------------------------------------
__text:00000001000047C6
__text:00000001000047C6 loc_1000047C6:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+42B↑j
__text:00000001000047C6                 mov     [rbp+var_27C], 0
__text:00000001000047D0
__text:00000001000047D0 loc_1000047D0:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+4C1↑j
__text:00000001000047D0                 lea     rdi, [rbp+var_260]
__text:00000001000047D7                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::~basic_string()
__text:00000001000047DC                 mov     eax, [rbp+var_27C]
__text:00000001000047E2                 mov     ecx, eax
__text:00000001000047E4                 sub     ecx, 1
__text:00000001000047E7                 mov     [rbp+var_2C4], eax
__text:00000001000047ED                 mov     [rbp+var_2C8], ecx
__text:00000001000047F3                 jz      loc_100004962
__text:00000001000047F9                 jmp     $+5
__text:00000001000047FE ; ---------------------------------------------------------------------------
__text:00000001000047FE
__text:00000001000047FE loc_1000047FE:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+519↑j
__text:00000001000047FE                 mov     eax, [rbp+var_2C4]
__text:0000000100004804                 test    eax, eax
__text:0000000100004806                 jnz     loc_10000498E
__text:000000010000480C                 jmp     $+5
__text:0000000100004811 ; ---------------------------------------------------------------------------
__text:0000000100004811
__text:0000000100004811 loc_100004811:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+52C↑j
__text:0000000100004811                 jmp     loc_10000481B
__text:0000000100004816 ; ---------------------------------------------------------------------------
__text:0000000100004816
__text:0000000100004816 loc_100004816:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+4E1↑j
__text:0000000100004816                 jmp     loc_100004972
__text:000000010000481B ; ---------------------------------------------------------------------------
__text:000000010000481B
__text:000000010000481B loc_10000481B:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+23C↑j
__text:000000010000481B                                         ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_100004811↑j
__text:000000010000481B                 mov     rax, [rbp+var_210]
__text:0000000100004822                 mov     rcx, [rbp+var_208]
__text:0000000100004829                 sub     rax, rcx
__text:000000010000482C                 mov     [rbp+var_240], rax
__text:0000000100004833                 cmp     [rbp+var_240], 0
__text:000000010000483E                 jle     loc_10000491E
__text:0000000100004844                 mov     rax, [rbp+var_1F8]
__text:000000010000484B                 mov     rcx, [rbp+var_208]
__text:0000000100004852                 mov     rdx, [rbp+var_240]
__text:0000000100004859                 mov     [rbp+var_160], rax
__text:0000000100004860                 mov     [rbp+var_168], rcx
__text:0000000100004867                 mov     [rbp+var_170], rdx
__text:000000010000486E                 mov     rax, [rbp+var_160]
__text:0000000100004875                 mov     rcx, [rax]
__text:0000000100004878                 mov     rcx, [rcx+60h]
__text:000000010000487C                 mov     rsi, [rbp+var_168]
__text:0000000100004883                 mov     rdx, [rbp+var_170]
__text:000000010000488A                 mov     rdi, rax
__text:000000010000488D                 call    rcx
__text:000000010000488F                 cmp     rax, [rbp+var_240]
__text:0000000100004896                 jz      loc_100004919
__text:000000010000489C                 lea     rax, [rbp+var_288]
__text:00000001000048A3                 lea     rcx, [rbp+var_198]
__text:00000001000048AA                 mov     [rbp+var_188], rcx
__text:00000001000048B1                 mov     [rbp+var_190], 0FFFFFFFFFFFFFFFFh
__text:00000001000048BC                 mov     rcx, [rbp+var_188]
__text:00000001000048C3                 mov     rdx, [rbp+var_190]
__text:00000001000048CA                 mov     [rbp+var_178], rcx
__text:00000001000048D1                 mov     [rbp+var_180], rdx
__text:00000001000048D8                 mov     rcx, [rbp+var_178]
__text:00000001000048DF                 mov     qword ptr [rcx], 0
__text:00000001000048E6                 mov     rcx, [rbp+var_198]
__text:00000001000048ED                 mov     [rbp+var_288], rcx
__text:00000001000048F4                 mov     [rbp+var_1A0], rax
__text:00000001000048FB                 mov     [rbp+var_1F8], 0
__text:0000000100004906                 mov     rax, [rbp+var_1F8]
__text:000000010000490D                 mov     [rbp+var_1F0], rax
__text:0000000100004914                 jmp     loc_100004962
__text:0000000100004919 ; ---------------------------------------------------------------------------
__text:0000000100004919
__text:0000000100004919 loc_100004919:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+5B6↑j
__text:0000000100004919                 jmp     $+5
__text:000000010000491E ; ---------------------------------------------------------------------------
__text:000000010000491E
__text:000000010000491E loc_10000491E:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+55E↑j
__text:000000010000491E                                         ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_100004919↑j
__text:000000010000491E                 mov     rax, [rbp+var_218]
__text:0000000100004925                 mov     [rbp+var_1A8], rax
__text:000000010000492C                 mov     [rbp+var_1B0], 0
__text:0000000100004937                 mov     rax, [rbp+var_1A8]
__text:000000010000493E                 mov     rcx, [rax+18h]
__text:0000000100004942                 mov     [rbp+var_1B8], rcx
__text:0000000100004949                 mov     rcx, [rbp+var_1B0]
__text:0000000100004950                 mov     [rax+18h], rcx
__text:0000000100004954                 mov     rax, [rbp+var_1F8]
__text:000000010000495B                 mov     [rbp+var_1F0], rax
__text:0000000100004962
__text:0000000100004962 loc_100004962:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+B8↑j
__text:0000000100004962                                         ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+227↑j ...
__text:0000000100004962                 mov     rax, [rbp+var_1F0]
__text:0000000100004969                 add     rsp, 2D0h
__text:0000000100004970                 pop     rbp
__text:0000000100004971                 retn
__text:0000000100004972 ; ---------------------------------------------------------------------------
__text:0000000100004972
__text:0000000100004972 loc_100004972:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_100004816↑j
__text:0000000100004972                 mov     rdi, [rbp+var_268]
__text:0000000100004979                 call    __Unwind_Resume
__text:000000010000497E ; ---------------------------------------------------------------------------
__text:000000010000497E                 mov     ecx, edx
__text:0000000100004980                 mov     rdi, rax
__text:0000000100004983                 mov     [rbp+var_2CC], ecx
__text:0000000100004989                 call    ___clang_call_terminate
__text:000000010000498E ; ---------------------------------------------------------------------------
__text:000000010000498E
__text:000000010000498E loc_10000498E:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+526↑j
__text:000000010000498E                 xchg    ax, ax
__text:000000010000498E __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ endp ; sp-analysis failed
__text:000000010000498E
__text:0000000100004990
__text:0000000100004990 ; =============== S U B R O U T I N E =======================================
__text:0000000100004990
__text:0000000100004990 ; Attributes: bp-based frame
__text:0000000100004990
__text:0000000100004990 ; void std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>, std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>>>::__push_back_slow_path<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int> const>(std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int> const &)
__text:0000000100004990 __ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEE21__push_back_slow_pathIKS4_EEvRT_ proc near
__text:0000000100004990                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEE21__push_back_slow_pathIKS4_EEvRT__ptr↓o
__text:0000000100004990
__text:0000000100004990 var_1F8         = qword ptr -1F8h
__text:0000000100004990 var_1F0         = qword ptr -1F0h
__text:0000000100004990 var_1E8         = qword ptr -1E8h
__text:0000000100004990 var_1E0         = qword ptr -1E0h
__text:0000000100004990 var_1D8         = qword ptr -1D8h
__text:0000000100004990 var_1D0         = qword ptr -1D0h
__text:0000000100004990 var_1C8         = qword ptr -1C8h
__text:0000000100004990 var_1B0         = byte ptr -1B0h
__text:0000000100004990 var_1A0         = qword ptr -1A0h
__text:0000000100004990 var_188         = qword ptr -188h
__text:0000000100004990 var_180         = qword ptr -180h
__text:0000000100004990 var_178         = qword ptr -178h
__text:0000000100004990 var_170         = qword ptr -170h
__text:0000000100004990 var_168         = qword ptr -168h
__text:0000000100004990 var_160         = qword ptr -160h
__text:0000000100004990 var_158         = qword ptr -158h
__text:0000000100004990 var_150         = qword ptr -150h
__text:0000000100004990 var_148         = qword ptr -148h
__text:0000000100004990 var_140         = qword ptr -140h
__text:0000000100004990 var_138         = qword ptr -138h
__text:0000000100004990 var_130         = qword ptr -130h
__text:0000000100004990 var_128         = qword ptr -128h
__text:0000000100004990 var_120         = qword ptr -120h
__text:0000000100004990 var_118         = qword ptr -118h
__text:0000000100004990 var_110         = qword ptr -110h
__text:0000000100004990 var_108         = qword ptr -108h
__text:0000000100004990 var_100         = qword ptr -100h
__text:0000000100004990 var_F0          = qword ptr -0F0h
__text:0000000100004990 var_E8          = qword ptr -0E8h
__text:0000000100004990 var_E0          = byte ptr -0E0h
__text:0000000100004990 var_D8          = qword ptr -0D8h
__text:0000000100004990 var_D0          = qword ptr -0D0h
__text:0000000100004990 var_C8          = qword ptr -0C8h
__text:0000000100004990 var_C0          = qword ptr -0C0h
__text:0000000100004990 var_B8          = qword ptr -0B8h
__text:0000000100004990 var_B0          = qword ptr -0B0h
__text:0000000100004990 var_A8          = qword ptr -0A8h
__text:0000000100004990 var_A0          = qword ptr -0A0h
__text:0000000100004990 var_98          = qword ptr -98h
__text:0000000100004990 var_90          = qword ptr -90h
__text:0000000100004990 var_88          = qword ptr -88h
__text:0000000100004990 var_80          = qword ptr -80h
__text:0000000100004990 var_78          = qword ptr -78h
__text:0000000100004990 var_70          = qword ptr -70h
__text:0000000100004990 var_68          = qword ptr -68h
__text:0000000100004990 var_60          = qword ptr -60h
__text:0000000100004990 var_58          = qword ptr -58h
__text:0000000100004990 var_50          = qword ptr -50h
__text:0000000100004990 var_48          = qword ptr -48h
__text:0000000100004990 var_40          = qword ptr -40h
__text:0000000100004990 var_38          = qword ptr -38h
__text:0000000100004990 var_30          = qword ptr -30h
__text:0000000100004990 var_28          = qword ptr -28h
__text:0000000100004990 var_20          = qword ptr -20h
__text:0000000100004990 var_18          = qword ptr -18h
__text:0000000100004990 var_10          = qword ptr -10h
__text:0000000100004990 var_8           = qword ptr -8
__text:0000000100004990
__text:0000000100004990                 push    rbp
__text:0000000100004991                 mov     rbp, rsp
__text:0000000100004994                 sub     rsp, 200h
__text:000000010000499B                 mov     rax, 14h
__text:00000001000049A5                 mov     [rbp+var_178], rdi
__text:00000001000049AC                 mov     [rbp+var_180], rsi
__text:00000001000049B3                 mov     rsi, [rbp+var_178]
__text:00000001000049BA                 mov     rdi, rsi
__text:00000001000049BD                 mov     [rbp+var_170], rdi
__text:00000001000049C4                 mov     rdi, [rbp+var_170]
__text:00000001000049CB                 add     rdi, 10h
__text:00000001000049D2                 mov     [rbp+var_168], rdi
__text:00000001000049D9                 mov     rdi, [rbp+var_168]
__text:00000001000049E0                 mov     [rbp+var_160], rdi
__text:00000001000049E7                 mov     rdi, [rbp+var_160]
__text:00000001000049EE                 mov     [rbp+var_188], rdi
__text:00000001000049F5                 mov     [rbp+var_158], rsi
__text:00000001000049FC                 mov     rdi, [rbp+var_158]
__text:0000000100004A03                 mov     rcx, [rdi+8]
__text:0000000100004A07                 mov     rdi, [rdi]
__text:0000000100004A0A                 sub     rcx, rdi
__text:0000000100004A0D                 mov     [rbp+var_1C8], rax
__text:0000000100004A14                 mov     rax, rcx
__text:0000000100004A17                 cqo
__text:0000000100004A19                 mov     rcx, [rbp+var_1C8]
__text:0000000100004A20                 idiv    rcx
__text:0000000100004A23                 add     rax, 1
__text:0000000100004A29                 mov     [rbp+var_130], rsi
__text:0000000100004A30                 mov     [rbp+var_138], rax
__text:0000000100004A37                 mov     rax, [rbp+var_130]
__text:0000000100004A3E                 mov     rdi, rax
__text:0000000100004A41                 mov     [rbp+var_1D0], rsi
__text:0000000100004A48                 mov     [rbp+var_1D8], rax
__text:0000000100004A4F                 call    j___ZNKSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEE8max_sizeEv ; std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::max_size(void)
__text:0000000100004A54                 mov     [rbp+var_140], rax
__text:0000000100004A5B                 mov     rax, [rbp+var_138]
__text:0000000100004A62                 cmp     rax, [rbp+var_140]
__text:0000000100004A69                 jbe     loc_100004A7E
__text:0000000100004A6F                 mov     rax, [rbp+var_1D8]
__text:0000000100004A76                 mov     rdi, rax
__text:0000000100004A79                 call    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
__text:0000000100004A7E
__text:0000000100004A7E loc_100004A7E:                          ; CODE XREF: std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::__push_back_slow_path<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const>(std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const &)+D9↑j
__text:0000000100004A7E                 mov     rax, 14h
__text:0000000100004A88                 mov     rcx, [rbp+var_1D8]
__text:0000000100004A8F                 mov     [rbp+var_120], rcx
__text:0000000100004A96                 mov     rdx, [rbp+var_120]
__text:0000000100004A9D                 mov     [rbp+var_118], rdx
__text:0000000100004AA4                 mov     rdx, [rbp+var_118]
__text:0000000100004AAB                 mov     [rbp+var_110], rdx
__text:0000000100004AB2                 mov     rsi, [rbp+var_110]
__text:0000000100004AB9                 add     rsi, 10h
__text:0000000100004AC0                 mov     [rbp+var_108], rsi
__text:0000000100004AC7                 mov     rsi, [rbp+var_108]
__text:0000000100004ACE                 mov     [rbp+var_100], rsi
__text:0000000100004AD5                 mov     rsi, [rbp+var_100]
__text:0000000100004ADC                 mov     rsi, [rsi]
__text:0000000100004ADF                 mov     rdx, [rdx]
__text:0000000100004AE2                 sub     rsi, rdx
__text:0000000100004AE5                 mov     [rbp+var_1E0], rax
__text:0000000100004AEC                 mov     rax, rsi
__text:0000000100004AEF                 cqo
__text:0000000100004AF1                 mov     rsi, [rbp+var_1E0]
__text:0000000100004AF8                 idiv    rsi
__text:0000000100004AFB                 mov     [rbp+var_148], rax
__text:0000000100004B02                 mov     rax, [rbp+var_148]
__text:0000000100004B09                 mov     rdx, [rbp+var_140]
__text:0000000100004B10                 shr     rdx, 1
__text:0000000100004B14                 cmp     rax, rdx
__text:0000000100004B17                 jb      loc_100004B30
__text:0000000100004B1D                 mov     rax, [rbp+var_140]
__text:0000000100004B24                 mov     [rbp+var_128], rax
__text:0000000100004B2B                 jmp     loc_100004BF0
__text:0000000100004B30 ; ---------------------------------------------------------------------------
__text:0000000100004B30
__text:0000000100004B30 loc_100004B30:                          ; CODE XREF: std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::__push_back_slow_path<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const>(std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const &)+187↑j
__text:0000000100004B30                 lea     rax, [rbp+var_E0]
__text:0000000100004B37                 lea     rcx, [rbp+var_138]
__text:0000000100004B3E                 lea     rdx, [rbp+var_150]
__text:0000000100004B45                 mov     rsi, [rbp+var_148]
__text:0000000100004B4C                 shl     rsi, 1
__text:0000000100004B50                 mov     [rbp+var_150], rsi
__text:0000000100004B57                 mov     [rbp+var_E8], rdx
__text:0000000100004B5E                 mov     [rbp+var_F0], rcx
__text:0000000100004B65                 mov     rcx, [rbp+var_E8]
__text:0000000100004B6C                 mov     rdx, [rbp+var_F0]
__text:0000000100004B73                 mov     [rbp+var_D0], rcx
__text:0000000100004B7A                 mov     [rbp+var_D8], rdx
__text:0000000100004B81                 mov     rcx, [rbp+var_D0]
__text:0000000100004B88                 mov     rdx, [rbp+var_D8]
__text:0000000100004B8F                 mov     [rbp+var_B8], rax
__text:0000000100004B96                 mov     [rbp+var_C0], rcx
__text:0000000100004B9D                 mov     [rbp+var_C8], rdx
__text:0000000100004BA4                 mov     rax, [rbp+var_C0]
__text:0000000100004BAB                 mov     rax, [rax]
__text:0000000100004BAE                 mov     rcx, [rbp+var_C8]
__text:0000000100004BB5                 cmp     rax, [rcx]
__text:0000000100004BB8                 jnb     loc_100004BD1
__text:0000000100004BBE                 mov     rax, [rbp+var_D8]
__text:0000000100004BC5                 mov     [rbp+var_1E8], rax
__text:0000000100004BCC                 jmp     loc_100004BDF
__text:0000000100004BD1 ; ---------------------------------------------------------------------------
__text:0000000100004BD1
__text:0000000100004BD1 loc_100004BD1:                          ; CODE XREF: std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::__push_back_slow_path<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const>(std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const &)+228↑j
__text:0000000100004BD1                 mov     rax, [rbp+var_D0]
__text:0000000100004BD8                 mov     [rbp+var_1E8], rax
__text:0000000100004BDF
__text:0000000100004BDF loc_100004BDF:                          ; CODE XREF: std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::__push_back_slow_path<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const>(std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const &)+23C↑j
__text:0000000100004BDF                 mov     rax, [rbp+var_1E8]
__text:0000000100004BE6                 mov     rax, [rax]
__text:0000000100004BE9                 mov     [rbp+var_128], rax
__text:0000000100004BF0
__text:0000000100004BF0 loc_100004BF0:                          ; CODE XREF: std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::__push_back_slow_path<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const>(std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const &)+19B↑j
__text:0000000100004BF0                 lea     rdi, [rbp+var_1B0]
__text:0000000100004BF7                 mov     rax, 14h
__text:0000000100004C01                 mov     rsi, [rbp+var_128]
__text:0000000100004C08                 mov     rcx, [rbp+var_1D0]
__text:0000000100004C0F                 mov     [rbp+var_B0], rcx
__text:0000000100004C16                 mov     rdx, [rbp+var_B0]
__text:0000000100004C1D                 mov     r8, [rdx+8]
__text:0000000100004C21                 mov     rdx, [rdx]
__text:0000000100004C24                 sub     r8, rdx
__text:0000000100004C27                 mov     [rbp+var_1F0], rax
__text:0000000100004C2E                 mov     rax, r8
__text:0000000100004C31                 cqo
__text:0000000100004C33                 mov     r8, [rbp+var_1F0]
__text:0000000100004C3A                 idiv    r8
__text:0000000100004C3D                 mov     rcx, [rbp+var_188]
__text:0000000100004C44                 mov     rdx, rax
__text:0000000100004C47                 call    j___ZNSt3__114__split_bufferINS_4pairINS1_INS1_IiiEES2_EEiEERNS_9allocatorIS4_EEEC1EmmS7_ ; std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>> &>::__split_buffer(ulong,ulong,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>> &)
__text:0000000100004C4C                 mov     rax, [rbp+var_188]
__text:0000000100004C53                 mov     rcx, [rbp+var_1A0]
__text:0000000100004C5A                 mov     [rbp+var_A8], rcx
__text:0000000100004C61                 mov     rcx, [rbp+var_A8]
__text:0000000100004C68                 mov     rdx, [rbp+var_180]
__text:0000000100004C6F                 mov     [rbp+var_A0], rdx
__text:0000000100004C76                 mov     rdx, [rbp+var_A0]
__text:0000000100004C7D                 mov     [rbp+var_88], rax
__text:0000000100004C84                 mov     [rbp+var_90], rcx
__text:0000000100004C8B                 mov     [rbp+var_98], rdx
__text:0000000100004C92                 mov     rax, [rbp+var_90]
__text:0000000100004C99                 cmp     rax, 0
__text:0000000100004C9F                 mov     [rbp+var_1F8], rax
__text:0000000100004CA6                 jz      loc_100004D72
__text:0000000100004CAC                 mov     rax, [rbp+var_1F8]
__text:0000000100004CB3                 mov     rcx, [rbp+var_98]
__text:0000000100004CBA                 mov     [rbp+var_78], rax
__text:0000000100004CBE                 mov     [rbp+var_80], rcx
__text:0000000100004CC2                 mov     rax, [rbp+var_78]
__text:0000000100004CC6                 mov     rcx, [rbp+var_80]
__text:0000000100004CCA                 mov     [rbp+var_68], rax
__text:0000000100004CCE                 mov     [rbp+var_70], rcx
__text:0000000100004CD2                 mov     rax, [rbp+var_68]
__text:0000000100004CD6                 mov     rcx, [rbp+var_70]
__text:0000000100004CDA                 mov     [rbp+var_58], rax
__text:0000000100004CDE                 mov     [rbp+var_60], rcx
__text:0000000100004CE2                 mov     rcx, [rbp+var_58]
__text:0000000100004CE6                 mov     rdx, [rbp+var_60]
__text:0000000100004CEA                 mov     [rbp+var_48], rcx
__text:0000000100004CEE                 mov     [rbp+var_50], rdx
__text:0000000100004CF2                 mov     rcx, [rbp+var_48]
__text:0000000100004CF6                 mov     rdx, [rbp+var_50]
__text:0000000100004CFA                 mov     [rbp+var_38], rcx
__text:0000000100004CFE                 mov     [rbp+var_40], rdx
__text:0000000100004D02                 mov     rdx, [rbp+var_38]
__text:0000000100004D06                 mov     rsi, [rbp+var_40]
__text:0000000100004D0A                 mov     [rbp+var_28], rdx
__text:0000000100004D0E                 mov     [rbp+var_30], rsi
__text:0000000100004D12                 mov     rdx, [rbp+var_28]
__text:0000000100004D16                 mov     rsi, [rbp+var_30]
__text:0000000100004D1A                 mov     edi, [rsi]
__text:0000000100004D1C                 mov     [rdx], edi
__text:0000000100004D1E                 mov     rsi, [rbp+var_30]
__text:0000000100004D22                 mov     edi, [rsi+4]
__text:0000000100004D25                 mov     [rdx+4], edi
__text:0000000100004D28                 add     rcx, 8
__text:0000000100004D2F                 mov     rdx, [rbp+var_50]
__text:0000000100004D33                 add     rdx, 8
__text:0000000100004D3A                 mov     [rbp+var_18], rcx
__text:0000000100004D3E                 mov     [rbp+var_20], rdx
__text:0000000100004D42                 mov     rcx, [rbp+var_18]
__text:0000000100004D46                 mov     rdx, [rbp+var_20]
__text:0000000100004D4A                 mov     [rbp+var_8], rcx
__text:0000000100004D4E                 mov     [rbp+var_10], rdx
__text:0000000100004D52                 mov     rcx, [rbp+var_8]
__text:0000000100004D56                 mov     rdx, [rbp+var_10]
__text:0000000100004D5A                 mov     edi, [rdx]
__text:0000000100004D5C                 mov     [rcx], edi
__text:0000000100004D5E                 mov     rdx, [rbp+var_10]
__text:0000000100004D62                 mov     edi, [rdx+4]
__text:0000000100004D65                 mov     [rcx+4], edi
__text:0000000100004D68                 mov     rcx, [rbp+var_70]
__text:0000000100004D6C                 mov     edi, [rcx+10h]
__text:0000000100004D6F                 mov     [rax+10h], edi
__text:0000000100004D72
__text:0000000100004D72 loc_100004D72:                          ; CODE XREF: std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::__push_back_slow_path<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const>(std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const &)+316↑j
__text:0000000100004D72                 mov     rax, [rbp+var_1A0]
__text:0000000100004D79                 add     rax, 14h
__text:0000000100004D7D                 mov     [rbp+var_1A0], rax
__text:0000000100004D84                 lea     rsi, [rbp+var_1B0]
__text:0000000100004D8B                 mov     rdi, [rbp+var_1D0]
__text:0000000100004D92                 call    j___ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE ; std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::__swap_out_circular_buffer(std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>&> &)
__text:0000000100004D97                 jmp     $+5
__text:0000000100004D9C ; ---------------------------------------------------------------------------
__text:0000000100004D9C
__text:0000000100004D9C loc_100004D9C:                          ; CODE XREF: std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::__push_back_slow_path<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const>(std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int> const &)+407↑j
__text:0000000100004D9C                 lea     rdi, [rbp+var_1B0]
__text:0000000100004DA3                 call    j___ZNSt3__114__split_bufferINS_4pairINS1_INS1_IiiEES2_EEiEERNS_9allocatorIS4_EEED1Ev ; std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>> &>::~__split_buffer()
__text:0000000100004DA8                 add     rsp, 200h
__text:0000000100004DAF                 pop     rbp
__text:0000000100004DB0                 retn
__text:0000000100004DB0 __ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEE21__push_back_slow_pathIKS4_EEvRT_ endp
__text:0000000100004DB0
__text:0000000100004DB1 ; ---------------------------------------------------------------------------
__text:0000000100004DB1                 mov     ecx, edx
__text:0000000100004DB3                 mov     [rbp-1B8h], rax
__text:0000000100004DBA                 mov     [rbp-1BCh], ecx
__text:0000000100004DC0                 lea     rdi, [rbp-1B0h]
__text:0000000100004DC7                 call    j___ZNSt3__114__split_bufferINS_4pairINS1_INS1_IiiEES2_EEiEERNS_9allocatorIS4_EEED1Ev ; std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>> &>::~__split_buffer()
__text:0000000100004DCC                 jmp     $+5
__text:0000000100004DD1 ; ---------------------------------------------------------------------------
__text:0000000100004DD1
__text:0000000100004DD1 loc_100004DD1:                          ; CODE XREF: __text:0000000100004DCC↑j
__text:0000000100004DD1                 jmp     $+5
__text:0000000100004DD6 ; ---------------------------------------------------------------------------
__text:0000000100004DD6
__text:0000000100004DD6 loc_100004DD6:                          ; CODE XREF: __text:loc_100004DD1↑j
__text:0000000100004DD6                 mov     rdi, [rbp-1B8h]
__text:0000000100004DDD                 call    __Unwind_Resume
__text:0000000100004DE2 ; ---------------------------------------------------------------------------
__text:0000000100004DE2                 mov     ecx, edx
__text:0000000100004DE4                 mov     rdi, rax
__text:0000000100004DE7                 mov     [rbp-1FCh], ecx
__text:0000000100004DED                 call    ___clang_call_terminate
__text:0000000100004DED ; ---------------------------------------------------------------------------
__text:0000000100004DF2                 align 20h
__text:0000000100004E00
__text:0000000100004E00 ; =============== S U B R O U T I N E =======================================
__text:0000000100004E00
__text:0000000100004E00 ; Attributes: bp-based frame
__text:0000000100004E00
__text:0000000100004E00 ; std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>, std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>> &>::__split_buffer(unsigned long, unsigned long, std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>> &)
__text:0000000100004E00 __ZNSt3__114__split_bufferINS_4pairINS1_INS1_IiiEES2_EEiEERNS_9allocatorIS4_EEEC1EmmS7_ proc near
__text:0000000100004E00                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__114__split_bufferINS_4pairINS1_INS1_IiiEES2_EEiEERNS_9allocatorIS4_EEEC1EmmS7__ptr↓o
__text:0000000100004E00
__text:0000000100004E00 var_20          = qword ptr -20h
__text:0000000100004E00 var_18          = qword ptr -18h
__text:0000000100004E00 var_10          = qword ptr -10h
__text:0000000100004E00 var_8           = qword ptr -8
__text:0000000100004E00
__text:0000000100004E00                 push    rbp
__text:0000000100004E01                 mov     rbp, rsp
__text:0000000100004E04                 sub     rsp, 20h
__text:0000000100004E08                 mov     [rbp+var_8], rdi
__text:0000000100004E0C                 mov     [rbp+var_10], rsi
__text:0000000100004E10                 mov     [rbp+var_18], rdx
__text:0000000100004E14                 mov     [rbp+var_20], rcx
__text:0000000100004E18                 mov     rdi, [rbp+var_8]
__text:0000000100004E1C                 mov     rsi, [rbp+var_10]
__text:0000000100004E20                 mov     rdx, [rbp+var_18]
__text:0000000100004E24                 mov     rcx, [rbp+var_20]
__text:0000000100004E28                 call    j___ZNSt3__114__split_bufferINS_4pairINS1_INS1_IiiEES2_EEiEERNS_9allocatorIS4_EEEC2EmmS7_ ; std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>> &>::__split_buffer(ulong,ulong,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>> &)
__text:0000000100004E2D                 add     rsp, 20h
__text:0000000100004E31                 pop     rbp
__text:0000000100004E32                 retn
__text:0000000100004E32 __ZNSt3__114__split_bufferINS_4pairINS1_INS1_IiiEES2_EEiEERNS_9allocatorIS4_EEEC1EmmS7_ endp
__text:0000000100004E32
__text:0000000100004E32 ; ---------------------------------------------------------------------------
__text:0000000100004E33                 align 20h
__text:0000000100004E40
__text:0000000100004E40 ; =============== S U B R O U T I N E =======================================
__text:0000000100004E40
__text:0000000100004E40 ; Attributes: bp-based frame
__text:0000000100004E40
__text:0000000100004E40 ; std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>, std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>>>::__swap_out_circular_buffer(std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>, std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>>&> &)
__text:0000000100004E40 __ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE proc near
__text:0000000100004E40                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE_ptr↓o
__text:0000000100004E40
__text:0000000100004E40 var_1E0         = qword ptr -1E0h
__text:0000000100004E40 var_1D8         = qword ptr -1D8h
__text:0000000100004E40 var_1D0         = qword ptr -1D0h
__text:0000000100004E40 var_1C8         = qword ptr -1C8h
__text:0000000100004E40 var_1C0         = qword ptr -1C0h
__text:0000000100004E40 var_1B8         = qword ptr -1B8h
__text:0000000100004E40 var_1B0         = qword ptr -1B0h
__text:0000000100004E40 var_1A8         = qword ptr -1A8h
__text:0000000100004E40 var_1A0         = qword ptr -1A0h
__text:0000000100004E40 var_198         = qword ptr -198h
__text:0000000100004E40 var_190         = qword ptr -190h
__text:0000000100004E40 var_188         = qword ptr -188h
__text:0000000100004E40 var_180         = qword ptr -180h
__text:0000000100004E40 var_178         = qword ptr -178h
__text:0000000100004E40 var_170         = qword ptr -170h
__text:0000000100004E40 var_168         = qword ptr -168h
__text:0000000100004E40 var_160         = qword ptr -160h
__text:0000000100004E40 var_158         = qword ptr -158h
__text:0000000100004E40 var_150         = qword ptr -150h
__text:0000000100004E40 var_148         = qword ptr -148h
__text:0000000100004E40 var_140         = qword ptr -140h
__text:0000000100004E40 var_138         = qword ptr -138h
__text:0000000100004E40 var_130         = qword ptr -130h
__text:0000000100004E40 var_128         = qword ptr -128h
__text:0000000100004E40 var_120         = qword ptr -120h
__text:0000000100004E40 var_118         = qword ptr -118h
__text:0000000100004E40 var_110         = qword ptr -110h
__text:0000000100004E40 var_108         = qword ptr -108h
__text:0000000100004E40 var_100         = qword ptr -100h
__text:0000000100004E40 var_F8          = qword ptr -0F8h
__text:0000000100004E40 var_F0          = qword ptr -0F0h
__text:0000000100004E40 var_E8          = qword ptr -0E8h
__text:0000000100004E40 var_E0          = qword ptr -0E0h
__text:0000000100004E40 var_D8          = qword ptr -0D8h
__text:0000000100004E40 var_D0          = qword ptr -0D0h
__text:0000000100004E40 var_C8          = qword ptr -0C8h
__text:0000000100004E40 var_C0          = qword ptr -0C0h
__text:0000000100004E40 var_B8          = qword ptr -0B8h
__text:0000000100004E40 var_B0          = qword ptr -0B0h
__text:0000000100004E40 var_A8          = qword ptr -0A8h
__text:0000000100004E40 var_A0          = qword ptr -0A0h
__text:0000000100004E40 var_98          = qword ptr -98h
__text:0000000100004E40 var_90          = qword ptr -90h
__text:0000000100004E40 var_88          = qword ptr -88h
__text:0000000100004E40 var_80          = qword ptr -80h
__text:0000000100004E40 var_78          = qword ptr -78h
__text:0000000100004E40 var_70          = qword ptr -70h
__text:0000000100004E40 var_68          = qword ptr -68h
__text:0000000100004E40 var_60          = qword ptr -60h
__text:0000000100004E40 var_58          = qword ptr -58h
__text:0000000100004E40 var_50          = qword ptr -50h
__text:0000000100004E40 var_48          = qword ptr -48h
__text:0000000100004E40 var_40          = qword ptr -40h
__text:0000000100004E40 var_38          = qword ptr -38h
__text:0000000100004E40 var_30          = qword ptr -30h
__text:0000000100004E40 var_28          = qword ptr -28h
__text:0000000100004E40 var_10          = qword ptr -10h
__text:0000000100004E40 var_8           = qword ptr -8
__text:0000000100004E40
__text:0000000100004E40                 push    rbp
__text:0000000100004E41                 mov     rbp, rsp
__text:0000000100004E44                 sub     rsp, 160h
__text:0000000100004E4B                 mov     [rbp+var_1C8], rdi
__text:0000000100004E52                 mov     [rbp+var_1D0], rsi
__text:0000000100004E59                 mov     rsi, [rbp+var_1C8]
__text:0000000100004E60                 mov     rdi, rsi
__text:0000000100004E63                 mov     [rbp+var_1C0], rdi
__text:0000000100004E6A                 mov     rdi, [rbp+var_1C0]
__text:0000000100004E71                 add     rdi, 10h
__text:0000000100004E78                 mov     [rbp+var_1B8], rdi
__text:0000000100004E7F                 mov     rdi, [rbp+var_1B8]
__text:0000000100004E86                 mov     [rbp+var_1B0], rdi
__text:0000000100004E8D                 mov     rdi, [rbp+var_1B0]
__text:0000000100004E94                 mov     rax, [rsi]
__text:0000000100004E97                 mov     rcx, [rsi+8]
__text:0000000100004E9B                 mov     rdx, [rbp+var_1D0]
__text:0000000100004EA2                 add     rdx, 8
__text:0000000100004EA9                 mov     [rbp+var_C8], rdi
__text:0000000100004EB0                 mov     [rbp+var_D0], rax
__text:0000000100004EB7                 mov     [rbp+var_D8], rcx
__text:0000000100004EBE                 mov     [rbp+var_E0], rdx
__text:0000000100004EC5                 mov     [rbp+var_1D8], rsi
__text:0000000100004ECC
__text:0000000100004ECC loc_100004ECC:                          ; CODE XREF: std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::__swap_out_circular_buffer(std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>&> &)+20F↓j
__text:0000000100004ECC                 mov     rax, [rbp+var_D8]
__text:0000000100004ED3                 cmp     rax, [rbp+var_D0]
__text:0000000100004EDA                 jz      loc_100005054
__text:0000000100004EE0                 mov     rax, [rbp+var_C8]
__text:0000000100004EE7                 mov     rcx, [rbp+var_E0]
__text:0000000100004EEE                 mov     rcx, [rcx]
__text:0000000100004EF1                 add     rcx, 0FFFFFFFFFFFFFFECh
__text:0000000100004EF8                 mov     [rbp+var_C0], rcx
__text:0000000100004EFF                 mov     rcx, [rbp+var_C0]
__text:0000000100004F06                 mov     rdx, [rbp+var_D8]
__text:0000000100004F0D                 add     rdx, 0FFFFFFFFFFFFFFECh
__text:0000000100004F14                 mov     [rbp+var_D8], rdx
__text:0000000100004F1B                 mov     [rbp+var_10], rdx
__text:0000000100004F1F                 mov     rdx, [rbp+var_10]
__text:0000000100004F23                 mov     [rbp+var_8], rdx
__text:0000000100004F27                 mov     rdx, [rbp+var_8]
__text:0000000100004F2B                 mov     [rbp+var_A8], rax
__text:0000000100004F32                 mov     [rbp+var_B0], rcx
__text:0000000100004F39                 mov     [rbp+var_B8], rdx
__text:0000000100004F40                 mov     rax, [rbp+var_B0]
__text:0000000100004F47                 cmp     rax, 0
__text:0000000100004F4D                 mov     [rbp+var_1E0], rax
__text:0000000100004F54                 jz      loc_10000503B
__text:0000000100004F5A                 mov     rax, [rbp+var_1E0]
__text:0000000100004F61                 mov     rcx, [rbp+var_B8]
__text:0000000100004F68                 mov     [rbp+var_98], rax
__text:0000000100004F6F                 mov     [rbp+var_A0], rcx
__text:0000000100004F76                 mov     rax, [rbp+var_98]
__text:0000000100004F7D                 mov     rcx, [rbp+var_A0]
__text:0000000100004F84                 mov     [rbp+var_88], rax
__text:0000000100004F8B                 mov     [rbp+var_90], rcx
__text:0000000100004F92                 mov     rax, [rbp+var_88]
__text:0000000100004F99                 mov     rcx, [rbp+var_90]
__text:0000000100004FA0                 mov     [rbp+var_78], rax
__text:0000000100004FA4                 mov     [rbp+var_80], rcx
__text:0000000100004FA8                 mov     rcx, [rbp+var_78]
__text:0000000100004FAC                 mov     rdx, [rbp+var_80]
__text:0000000100004FB0                 mov     [rbp+var_68], rcx
__text:0000000100004FB4                 mov     [rbp+var_70], rdx
__text:0000000100004FB8                 mov     rcx, [rbp+var_68]
__text:0000000100004FBC                 mov     rdx, [rbp+var_70]
__text:0000000100004FC0                 mov     [rbp+var_58], rcx
__text:0000000100004FC4                 mov     [rbp+var_60], rdx
__text:0000000100004FC8                 mov     rdx, [rbp+var_58]
__text:0000000100004FCC                 mov     rsi, [rbp+var_60]
__text:0000000100004FD0                 mov     [rbp+var_48], rdx
__text:0000000100004FD4                 mov     [rbp+var_50], rsi
__text:0000000100004FD8                 mov     rdx, [rbp+var_48]
__text:0000000100004FDC                 mov     rsi, [rbp+var_50]
__text:0000000100004FE0                 mov     edi, [rsi]
__text:0000000100004FE2                 mov     [rdx], edi
__text:0000000100004FE4                 mov     rsi, [rbp+var_50]
__text:0000000100004FE8                 mov     edi, [rsi+4]
__text:0000000100004FEB                 mov     [rdx+4], edi
__text:0000000100004FEE                 add     rcx, 8
__text:0000000100004FF5                 mov     rdx, [rbp+var_70]
__text:0000000100004FF9                 add     rdx, 8
__text:0000000100005000                 mov     [rbp+var_38], rcx
__text:0000000100005004                 mov     [rbp+var_40], rdx
__text:0000000100005008                 mov     rcx, [rbp+var_38]
__text:000000010000500C                 mov     rdx, [rbp+var_40]
__text:0000000100005010                 mov     [rbp+var_28], rcx
__text:0000000100005014                 mov     [rbp+var_30], rdx
__text:0000000100005018                 mov     rcx, [rbp+var_28]
__text:000000010000501C                 mov     rdx, [rbp+var_30]
__text:0000000100005020                 mov     edi, [rdx]
__text:0000000100005022                 mov     [rcx], edi
__text:0000000100005024                 mov     rdx, [rbp+var_30]
__text:0000000100005028                 mov     edi, [rdx+4]
__text:000000010000502B                 mov     [rcx+4], edi
__text:000000010000502E                 mov     rcx, [rbp+var_90]
__text:0000000100005035                 mov     edi, [rcx+10h]
__text:0000000100005038                 mov     [rax+10h], edi
__text:000000010000503B
__text:000000010000503B loc_10000503B:                          ; CODE XREF: std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::__swap_out_circular_buffer(std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>&> &)+114↑j
__text:000000010000503B                 mov     rax, [rbp+var_E0]
__text:0000000100005042                 mov     rcx, [rax]
__text:0000000100005045                 add     rcx, 0FFFFFFFFFFFFFFECh
__text:000000010000504C                 mov     [rax], rcx
__text:000000010000504F                 jmp     loc_100004ECC
__text:0000000100005054 ; ---------------------------------------------------------------------------
__text:0000000100005054
__text:0000000100005054 loc_100005054:                          ; CODE XREF: std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::__swap_out_circular_buffer(std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>&> &)+9A↑j
__text:0000000100005054                 lea     rax, [rbp+var_1A0]
__text:000000010000505B                 lea     rcx, [rbp+var_140]
__text:0000000100005062                 lea     rdx, [rbp+var_110]
__text:0000000100005069                 mov     rsi, [rbp+var_1D8]
__text:0000000100005070                 mov     rdi, [rbp+var_1D0]
__text:0000000100005077                 add     rdi, 8
__text:000000010000507E                 mov     [rbp+var_100], rsi
__text:0000000100005085                 mov     [rbp+var_108], rdi
__text:000000010000508C                 mov     rsi, [rbp+var_100]
__text:0000000100005093                 mov     [rbp+var_F8], rsi
__text:000000010000509A                 mov     rsi, [rbp+var_F8]
__text:00000001000050A1                 mov     rsi, [rsi]
__text:00000001000050A4                 mov     [rbp+var_110], rsi
__text:00000001000050AB                 mov     rsi, [rbp+var_108]
__text:00000001000050B2                 mov     [rbp+var_E8], rsi
__text:00000001000050B9                 mov     rsi, [rbp+var_E8]
__text:00000001000050C0                 mov     rsi, [rsi]
__text:00000001000050C3                 mov     rdi, [rbp+var_100]
__text:00000001000050CA                 mov     [rdi], rsi
__text:00000001000050CD                 mov     [rbp+var_F0], rdx
__text:00000001000050D4                 mov     rdx, [rbp+var_F0]
__text:00000001000050DB                 mov     rdx, [rdx]
__text:00000001000050DE                 mov     rsi, [rbp+var_108]
__text:00000001000050E5                 mov     [rsi], rdx
__text:00000001000050E8                 mov     rdx, [rbp+var_1D8]
__text:00000001000050EF                 add     rdx, 8
__text:00000001000050F6                 mov     rsi, [rbp+var_1D0]
__text:00000001000050FD                 add     rsi, 10h
__text:0000000100005104                 mov     [rbp+var_130], rdx
__text:000000010000510B                 mov     [rbp+var_138], rsi
__text:0000000100005112                 mov     rdx, [rbp+var_130]
__text:0000000100005119                 mov     [rbp+var_128], rdx
__text:0000000100005120                 mov     rdx, [rbp+var_128]
__text:0000000100005127                 mov     rdx, [rdx]
__text:000000010000512A                 mov     [rbp+var_140], rdx
__text:0000000100005131                 mov     rdx, [rbp+var_138]
__text:0000000100005138                 mov     [rbp+var_118], rdx
__text:000000010000513F                 mov     rdx, [rbp+var_118]
__text:0000000100005146                 mov     rdx, [rdx]
__text:0000000100005149                 mov     rsi, [rbp+var_130]
__text:0000000100005150                 mov     [rsi], rdx
__text:0000000100005153                 mov     [rbp+var_120], rcx
__text:000000010000515A                 mov     rcx, [rbp+var_120]
__text:0000000100005161                 mov     rcx, [rcx]
__text:0000000100005164                 mov     rdx, [rbp+var_138]
__text:000000010000516B                 mov     [rdx], rcx
__text:000000010000516E                 mov     rcx, [rbp+var_1D8]
__text:0000000100005175                 mov     [rbp+var_158], rcx
__text:000000010000517C                 mov     rcx, [rbp+var_158]
__text:0000000100005183                 add     rcx, 10h
__text:000000010000518A                 mov     [rbp+var_150], rcx
__text:0000000100005191                 mov     rcx, [rbp+var_150]
__text:0000000100005198                 mov     [rbp+var_148], rcx
__text:000000010000519F                 mov     rcx, [rbp+var_148]
__text:00000001000051A6                 mov     rdx, [rbp+var_1D0]
__text:00000001000051AD                 mov     [rbp+var_170], rdx
__text:00000001000051B4                 mov     rdx, [rbp+var_170]
__text:00000001000051BB                 add     rdx, 18h
__text:00000001000051C2                 mov     [rbp+var_168], rdx
__text:00000001000051C9                 mov     rdx, [rbp+var_168]
__text:00000001000051D0                 mov     [rbp+var_160], rdx
__text:00000001000051D7                 mov     rdx, [rbp+var_160]
__text:00000001000051DE                 mov     [rbp+var_190], rcx
__text:00000001000051E5                 mov     [rbp+var_198], rdx
__text:00000001000051EC                 mov     rcx, [rbp+var_190]
__text:00000001000051F3                 mov     [rbp+var_188], rcx
__text:00000001000051FA                 mov     rcx, [rbp+var_188]
__text:0000000100005201                 mov     rcx, [rcx]
__text:0000000100005204                 mov     [rbp+var_1A0], rcx
__text:000000010000520B                 mov     rcx, [rbp+var_198]
__text:0000000100005212                 mov     [rbp+var_178], rcx
__text:0000000100005219                 mov     rcx, [rbp+var_178]
__text:0000000100005220                 mov     rcx, [rcx]
__text:0000000100005223                 mov     rdx, [rbp+var_190]
__text:000000010000522A                 mov     [rdx], rcx
__text:000000010000522D                 mov     [rbp+var_180], rax
__text:0000000100005234                 mov     rax, [rbp+var_180]
__text:000000010000523B                 mov     rax, [rax]
__text:000000010000523E                 mov     rcx, [rbp+var_198]
__text:0000000100005245                 mov     [rcx], rax
__text:0000000100005248                 mov     rax, [rbp+var_1D0]
__text:000000010000524F                 mov     rax, [rax+8]
__text:0000000100005253                 mov     rcx, [rbp+var_1D0]
__text:000000010000525A                 mov     [rcx], rax
__text:000000010000525D                 mov     rax, [rbp+var_1D8]
__text:0000000100005264                 mov     [rbp+var_1A8], rax
__text:000000010000526B                 add     rsp, 160h
__text:0000000100005272                 pop     rbp
__text:0000000100005273                 retn
__text:0000000100005273 __ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE endp
__text:0000000100005273
__text:0000000100005273 ; ---------------------------------------------------------------------------
__text:0000000100005274                 align 20h
__text:0000000100005280
__text:0000000100005280 ; =============== S U B R O U T I N E =======================================
__text:0000000100005280
__text:0000000100005280 ; Attributes: bp-based frame
__text:0000000100005280
__text:0000000100005280 ; std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>, std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>> &>::~__split_buffer()
__text:0000000100005280 __ZNSt3__114__split_bufferINS_4pairINS1_INS1_IiiEES2_EEiEERNS_9allocatorIS4_EEED1Ev proc near
__text:0000000100005280                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__114__split_bufferINS_4pairINS1_INS1_IiiEES2_EEiEERNS_9allocatorIS4_EEED1Ev_ptr↓o
__text:0000000100005280
__text:0000000100005280 var_8           = qword ptr -8
__text:0000000100005280
__text:0000000100005280                 push    rbp
__text:0000000100005281                 mov     rbp, rsp
__text:0000000100005284                 sub     rsp, 10h
__text:0000000100005288                 mov     [rbp+var_8], rdi
__text:000000010000528C                 mov     rdi, [rbp+var_8]
__text:0000000100005290                 call    j___ZNSt3__114__split_bufferINS_4pairINS1_INS1_IiiEES2_EEiEERNS_9allocatorIS4_EEED2Ev ; std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>> &>::~__split_buffer()
__text:0000000100005295                 add     rsp, 10h
__text:0000000100005299                 pop     rbp
__text:000000010000529A                 retn
__text:000000010000529A __ZNSt3__114__split_bufferINS_4pairINS1_INS1_IiiEES2_EEiEERNS_9allocatorIS4_EEED1Ev endp
__text:000000010000529A
__text:000000010000529A ; ---------------------------------------------------------------------------
__text:000000010000529B                 align 20h
__text:00000001000052A0
__text:00000001000052A0 ; =============== S U B R O U T I N E =======================================
__text:00000001000052A0
__text:00000001000052A0 ; Attributes: bp-based frame
__text:00000001000052A0
__text:00000001000052A0 ; std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>, std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>> &>::~__split_buffer()
__text:00000001000052A0 __ZNSt3__114__split_bufferINS_4pairINS1_INS1_IiiEES2_EEiEERNS_9allocatorIS4_EEED2Ev proc near
__text:00000001000052A0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__114__split_bufferINS_4pairINS1_INS1_IiiEES2_EEiEERNS_9allocatorIS4_EEED2Ev_ptr↓o
__text:00000001000052A0
__text:00000001000052A0 var_128         = qword ptr -128h
__text:00000001000052A0 var_120         = qword ptr -120h
__text:00000001000052A0 var_118         = qword ptr -118h
__text:00000001000052A0 var_110         = qword ptr -110h
__text:00000001000052A0 var_108         = qword ptr -108h
__text:00000001000052A0 var_100         = qword ptr -100h
__text:00000001000052A0 var_F0          = qword ptr -0F0h
__text:00000001000052A0 var_E8          = qword ptr -0E8h
__text:00000001000052A0 var_C8          = qword ptr -0C8h
__text:00000001000052A0 var_C0          = qword ptr -0C0h
__text:00000001000052A0 var_B8          = qword ptr -0B8h
__text:00000001000052A0 var_B0          = qword ptr -0B0h
__text:00000001000052A0 var_A8          = qword ptr -0A8h
__text:00000001000052A0 var_90          = qword ptr -90h
__text:00000001000052A0 var_88          = qword ptr -88h
__text:00000001000052A0 var_80          = qword ptr -80h
__text:00000001000052A0 var_78          = qword ptr -78h
__text:00000001000052A0 var_70          = qword ptr -70h
__text:00000001000052A0 var_68          = qword ptr -68h
__text:00000001000052A0 var_60          = qword ptr -60h
__text:00000001000052A0 var_58          = qword ptr -58h
__text:00000001000052A0 var_50          = qword ptr -50h
__text:00000001000052A0 var_48          = qword ptr -48h
__text:00000001000052A0 var_40          = qword ptr -40h
__text:00000001000052A0 var_38          = qword ptr -38h
__text:00000001000052A0 var_30          = qword ptr -30h
__text:00000001000052A0 var_28          = qword ptr -28h
__text:00000001000052A0 var_20          = qword ptr -20h
__text:00000001000052A0 var_18          = qword ptr -18h
__text:00000001000052A0 var_10          = qword ptr -10h
__text:00000001000052A0 var_8           = qword ptr -8
__text:00000001000052A0
__text:00000001000052A0                 push    rbp
__text:00000001000052A1                 mov     rbp, rsp
__text:00000001000052A4                 sub     rsp, 130h
__text:00000001000052AB                 mov     [rbp+var_108], rdi
__text:00000001000052B2                 mov     rdi, [rbp+var_108]
__text:00000001000052B9                 mov     [rbp+var_100], rdi
__text:00000001000052C0                 mov     rax, [rbp+var_100]
__text:00000001000052C7                 mov     rcx, [rax+8]
__text:00000001000052CB                 mov     [rbp+var_E8], rax
__text:00000001000052D2                 mov     [rbp+var_F0], rcx
__text:00000001000052D9                 mov     rax, [rbp+var_E8]
__text:00000001000052E0                 mov     rcx, [rbp+var_F0]
__text:00000001000052E7                 mov     [rbp+var_C0], rax
__text:00000001000052EE                 mov     [rbp+var_C8], rcx
__text:00000001000052F5                 mov     rax, [rbp+var_C0]
__text:00000001000052FC                 mov     [rbp+var_110], rdi
__text:0000000100005303                 mov     [rbp+var_118], rax
__text:000000010000530A
__text:000000010000530A loc_10000530A:                          ; CODE XREF: std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>> &>::~__split_buffer()+F9↓j
__text:000000010000530A                 mov     rax, [rbp+var_C8]
__text:0000000100005311                 mov     rcx, [rbp+var_118]
__text:0000000100005318                 cmp     rax, [rcx+10h]
__text:000000010000531C                 jz      loc_10000539E
__text:0000000100005322                 mov     rax, [rbp+var_118]
__text:0000000100005329                 mov     [rbp+var_B8], rax
__text:0000000100005330                 mov     rcx, [rbp+var_B8]
__text:0000000100005337                 add     rcx, 18h
__text:000000010000533E                 mov     [rbp+var_B0], rcx
__text:0000000100005345                 mov     rcx, [rbp+var_B0]
__text:000000010000534C                 mov     [rbp+var_A8], rcx
__text:0000000100005353                 mov     rcx, [rbp+var_A8]
__text:000000010000535A                 mov     rcx, [rcx+8]
__text:000000010000535E                 mov     rdx, [rax+10h]
__text:0000000100005362                 add     rdx, 0FFFFFFFFFFFFFFECh
__text:0000000100005369                 mov     [rax+10h], rdx
__text:000000010000536D                 mov     [rbp+var_70], rdx
__text:0000000100005371                 mov     rdx, [rbp+var_70]
__text:0000000100005375                 mov     [rbp+var_88], rcx
__text:000000010000537C                 mov     [rbp+var_90], rdx
__text:0000000100005383                 mov     rcx, [rbp+var_88]
__text:000000010000538A                 mov     rdx, [rbp+var_90]
__text:0000000100005391                 mov     [rbp+var_78], rcx
__text:0000000100005395                 mov     [rbp+var_80], rdx
__text:0000000100005399                 jmp     loc_10000530A
__text:000000010000539E ; ---------------------------------------------------------------------------
__text:000000010000539E
__text:000000010000539E loc_10000539E:                          ; CODE XREF: std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>> &>::~__split_buffer()+7C↑j
__text:000000010000539E                 mov     rax, [rbp+var_110]
__text:00000001000053A5                 cmp     qword ptr [rax], 0
__text:00000001000053AC                 jz      loc_10000546D
__text:00000001000053B2                 mov     rax, 14h
__text:00000001000053BC                 mov     rcx, [rbp+var_110]
__text:00000001000053C3                 mov     [rbp+var_38], rcx
__text:00000001000053C7                 mov     rdx, [rbp+var_38]
__text:00000001000053CB                 add     rdx, 18h
__text:00000001000053D2                 mov     [rbp+var_30], rdx
__text:00000001000053D6                 mov     rdx, [rbp+var_30]
__text:00000001000053DA                 mov     [rbp+var_28], rdx
__text:00000001000053DE                 mov     rdx, [rbp+var_28]
__text:00000001000053E2                 mov     rdx, [rdx+8]
__text:00000001000053E6                 mov     rsi, [rcx]
__text:00000001000053E9                 mov     [rbp+var_20], rcx
__text:00000001000053ED                 mov     rdi, [rbp+var_20]
__text:00000001000053F1                 mov     [rbp+var_18], rdi
__text:00000001000053F5                 mov     r8, [rbp+var_18]
__text:00000001000053F9                 add     r8, 18h
__text:0000000100005400                 mov     [rbp+var_10], r8
__text:0000000100005404                 mov     r8, [rbp+var_10]
__text:0000000100005408                 mov     [rbp+var_8], r8
__text:000000010000540C                 mov     r8, [rbp+var_8]
__text:0000000100005410                 mov     r8, [r8]
__text:0000000100005413                 mov     rdi, [rdi]
__text:0000000100005416                 sub     r8, rdi
__text:0000000100005419                 mov     [rbp+var_120], rax
__text:0000000100005420                 mov     rax, r8
__text:0000000100005423                 mov     [rbp+var_128], rdx
__text:000000010000542A                 cqo
__text:000000010000542C                 mov     rdi, [rbp+var_120]
__text:0000000100005433                 idiv    rdi
__text:0000000100005436                 mov     rdx, [rbp+var_128]
__text:000000010000543D                 mov     [rbp+var_58], rdx
__text:0000000100005441                 mov     [rbp+var_60], rsi
__text:0000000100005445                 mov     [rbp+var_68], rax
__text:0000000100005449                 mov     rax, [rbp+var_58]
__text:000000010000544D                 mov     rsi, [rbp+var_60]
__text:0000000100005451                 mov     r8, [rbp+var_68]
__text:0000000100005455                 mov     [rbp+var_40], rax
__text:0000000100005459                 mov     [rbp+var_48], rsi
__text:000000010000545D                 mov     [rbp+var_50], r8
__text:0000000100005461                 mov     rax, [rbp+var_48]
__text:0000000100005465                 mov     rdi, rax        ; void *
__text:0000000100005468                 call    __ZdlPv         ; operator delete(void *)
__text:000000010000546D
__text:000000010000546D loc_10000546D:                          ; CODE XREF: std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>> &>::~__split_buffer()+10C↑j
__text:000000010000546D                 add     rsp, 130h
__text:0000000100005474                 pop     rbp
__text:0000000100005475                 retn
__text:0000000100005475 __ZNSt3__114__split_bufferINS_4pairINS1_INS1_IiiEES2_EEiEERNS_9allocatorIS4_EEED2Ev endp
__text:0000000100005475
__text:0000000100005475 ; ---------------------------------------------------------------------------
__text:0000000100005476                 align 20h
__text:0000000100005480
__text:0000000100005480 ; =============== S U B R O U T I N E =======================================
__text:0000000100005480
__text:0000000100005480 ; Attributes: bp-based frame
__text:0000000100005480
__text:0000000100005480 ; std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>, std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>>>::max_size(void)const
__text:0000000100005480 __ZNKSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEE8max_sizeEv proc near
__text:0000000100005480                                         ; DATA XREF: __la_symbol_ptr:__ZNKSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEE8max_sizeEv_ptr↓o
__text:0000000100005480
__text:0000000100005480 var_D8          = qword ptr -0D8h
__text:0000000100005480 var_D0          = qword ptr -0D0h
__text:0000000100005480 var_B8          = qword ptr -0B8h
__text:0000000100005480 var_B0          = qword ptr -0B0h
__text:0000000100005480 var_A8          = qword ptr -0A8h
__text:0000000100005480 var_A0          = qword ptr -0A0h
__text:0000000100005480 var_98          = qword ptr -98h
__text:0000000100005480 var_90          = qword ptr -90h
__text:0000000100005480 var_80          = qword ptr -80h
__text:0000000100005480 var_78          = qword ptr -78h
__text:0000000100005480 var_70          = byte ptr -70h
__text:0000000100005480 var_68          = qword ptr -68h
__text:0000000100005480 var_60          = qword ptr -60h
__text:0000000100005480 var_58          = qword ptr -58h
__text:0000000100005480 var_50          = qword ptr -50h
__text:0000000100005480 var_48          = qword ptr -48h
__text:0000000100005480 var_20          = qword ptr -20h
__text:0000000100005480 var_18          = qword ptr -18h
__text:0000000100005480 var_8           = qword ptr -8
__text:0000000100005480
__text:0000000100005480                 push    rbp
__text:0000000100005481                 mov     rbp, rsp
__text:0000000100005484                 sub     rsp, 58h
__text:0000000100005488                 lea     rax, [rbp+var_70]
__text:000000010000548C                 lea     rcx, [rbp+var_B8]
__text:0000000100005493                 lea     rdx, [rbp+var_B0]
__text:000000010000549A                 mov     rsi, 0FFFFFFFFFFFFFFFFh
__text:00000001000054A4                 mov     r8, 0CCCCCCCCCCCCCCCh
__text:00000001000054AE                 mov     [rbp+var_A8], rdi
__text:00000001000054B5                 mov     rdi, [rbp+var_A8]
__text:00000001000054BC                 mov     [rbp+var_A0], rdi
__text:00000001000054C3                 mov     rdi, [rbp+var_A0]
__text:00000001000054CA                 add     rdi, 10h
__text:00000001000054D1                 mov     [rbp+var_98], rdi
__text:00000001000054D8                 mov     rdi, [rbp+var_98]
__text:00000001000054DF                 mov     [rbp+var_90], rdi
__text:00000001000054E6                 mov     rdi, [rbp+var_90]
__text:00000001000054ED                 mov     [rbp+var_20], rdi
__text:00000001000054F1                 mov     rdi, [rbp+var_20]
__text:00000001000054F5                 mov     [rbp+var_18], rdi
__text:00000001000054F9                 mov     rdi, [rbp+var_18]
__text:00000001000054FD                 mov     [rbp+var_8], rdi
__text:0000000100005501                 mov     [rbp+var_B0], r8
__text:0000000100005508                 shr     rsi, 1
__text:000000010000550C                 mov     [rbp+var_B8], rsi
__text:0000000100005513                 mov     [rbp+var_78], rdx
__text:0000000100005517                 mov     [rbp+var_80], rcx
__text:000000010000551B                 mov     rcx, [rbp+var_78]
__text:000000010000551F                 mov     rdx, [rbp+var_80]
__text:0000000100005523                 mov     [rbp+var_60], rcx
__text:0000000100005527                 mov     [rbp+var_68], rdx
__text:000000010000552B                 mov     rcx, [rbp+var_68]
__text:000000010000552F                 mov     rdx, [rbp+var_60]
__text:0000000100005533                 mov     [rbp+var_48], rax
__text:0000000100005537                 mov     [rbp+var_50], rcx
__text:000000010000553B                 mov     [rbp+var_58], rdx
__text:000000010000553F                 mov     rax, [rbp+var_50]
__text:0000000100005543                 mov     rax, [rax]
__text:0000000100005546                 mov     rcx, [rbp+var_58]
__text:000000010000554A                 cmp     rax, [rcx]
__text:000000010000554D                 jnb     loc_100005563
__text:0000000100005553                 mov     rax, [rbp+var_68]
__text:0000000100005557                 mov     [rbp+var_D0], rax
__text:000000010000555E                 jmp     loc_10000556E
__text:0000000100005563 ; ---------------------------------------------------------------------------
__text:0000000100005563
__text:0000000100005563 loc_100005563:                          ; CODE XREF: std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::max_size(void)+CD↑j
__text:0000000100005563                 mov     rax, [rbp+var_60]
__text:0000000100005567                 mov     [rbp+var_D0], rax
__text:000000010000556E
__text:000000010000556E loc_10000556E:                          ; CODE XREF: std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::max_size(void)+DE↑j
__text:000000010000556E                 mov     rax, [rbp+var_D0]
__text:0000000100005575                 mov     [rbp+var_D8], rax
__text:000000010000557C                 mov     rax, [rbp+var_D8]
__text:0000000100005583                 mov     rax, [rax]
__text:0000000100005586                 add     rsp, 58h
__text:000000010000558A                 pop     rbp
__text:000000010000558B                 retn
__text:000000010000558B __ZNKSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEE8max_sizeEv endp
__text:000000010000558B
__text:000000010000558B ; ---------------------------------------------------------------------------
__text:000000010000558C                 align 10h
__text:0000000100005590
__text:0000000100005590 ; =============== S U B R O U T I N E =======================================
__text:0000000100005590
__text:0000000100005590 ; Attributes: bp-based frame
__text:0000000100005590
__text:0000000100005590 ; std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>, std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>> &>::__split_buffer(unsigned long, unsigned long, std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>> &)
__text:0000000100005590 __ZNSt3__114__split_bufferINS_4pairINS1_INS1_IiiEES2_EEiEERNS_9allocatorIS4_EEEC2EmmS7_ proc near
__text:0000000100005590                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__114__split_bufferINS_4pairINS1_INS1_IiiEES2_EEiEERNS_9allocatorIS4_EEEC2EmmS7__ptr↓o
__text:0000000100005590
__text:0000000100005590 var_160         = qword ptr -160h
__text:0000000100005590 var_158         = qword ptr -158h
__text:0000000100005590 var_150         = qword ptr -150h
__text:0000000100005590 var_148         = qword ptr -148h
__text:0000000100005590 var_140         = qword ptr -140h
__text:0000000100005590 var_138         = qword ptr -138h
__text:0000000100005590 var_130         = qword ptr -130h
__text:0000000100005590 var_128         = qword ptr -128h
__text:0000000100005590 var_120         = qword ptr -120h
__text:0000000100005590 var_118         = qword ptr -118h
__text:0000000100005590 var_110         = qword ptr -110h
__text:0000000100005590 var_108         = qword ptr -108h
__text:0000000100005590 var_100         = qword ptr -100h
__text:0000000100005590 var_F8          = qword ptr -0F8h
__text:0000000100005590 var_F0          = qword ptr -0F0h
__text:0000000100005590 var_E8          = qword ptr -0E8h
__text:0000000100005590 var_E0          = qword ptr -0E0h
__text:0000000100005590 var_D8          = qword ptr -0D8h
__text:0000000100005590 var_D0          = qword ptr -0D0h
__text:0000000100005590 var_C8          = qword ptr -0C8h
__text:0000000100005590 var_C0          = qword ptr -0C0h
__text:0000000100005590 var_B8          = qword ptr -0B8h
__text:0000000100005590 var_B0          = qword ptr -0B0h
__text:0000000100005590 var_A8          = qword ptr -0A8h
__text:0000000100005590 var_A0          = qword ptr -0A0h
__text:0000000100005590 var_98          = qword ptr -98h
__text:0000000100005590 var_90          = qword ptr -90h
__text:0000000100005590 var_88          = qword ptr -88h
__text:0000000100005590 var_80          = qword ptr -80h
__text:0000000100005590 var_78          = qword ptr -78h
__text:0000000100005590 var_70          = qword ptr -70h
__text:0000000100005590 var_68          = qword ptr -68h
__text:0000000100005590 var_60          = qword ptr -60h
__text:0000000100005590 var_58          = qword ptr -58h
__text:0000000100005590 var_50          = qword ptr -50h
__text:0000000100005590 var_48          = qword ptr -48h
__text:0000000100005590 var_40          = qword ptr -40h
__text:0000000100005590 var_38          = qword ptr -38h
__text:0000000100005590 var_30          = qword ptr -30h
__text:0000000100005590 var_28          = qword ptr -28h
__text:0000000100005590 var_20          = qword ptr -20h
__text:0000000100005590 var_18          = qword ptr -18h
__text:0000000100005590 var_10          = qword ptr -10h
__text:0000000100005590 var_8           = qword ptr -8
__text:0000000100005590
__text:0000000100005590                 push    rbp
__text:0000000100005591                 mov     rbp, rsp
__text:0000000100005594                 sub     rsp, 160h
__text:000000010000559B                 lea     rax, [rbp+var_28]
__text:000000010000559F                 lea     r8, [rbp+var_48]
__text:00000001000055A3                 lea     r9, [rbp+var_148]
__text:00000001000055AA                 lea     r10, [rbp+var_120]
__text:00000001000055B1                 mov     [rbp+var_128], rdi
__text:00000001000055B8                 mov     [rbp+var_130], rsi
__text:00000001000055BF                 mov     [rbp+var_138], rdx
__text:00000001000055C6                 mov     [rbp+var_140], rcx
__text:00000001000055CD                 mov     rcx, [rbp+var_128]
__text:00000001000055D4                 mov     rdx, rcx
__text:00000001000055D7                 add     rdx, 18h
__text:00000001000055DE                 mov     [rbp+var_110], r10
__text:00000001000055E5                 mov     [rbp+var_118], 0FFFFFFFFFFFFFFFFh
__text:00000001000055F0                 mov     rsi, [rbp+var_110]
__text:00000001000055F7                 mov     rdi, [rbp+var_118]
__text:00000001000055FE                 mov     [rbp+var_100], rsi
__text:0000000100005605                 mov     [rbp+var_108], rdi
__text:000000010000560C                 mov     rsi, [rbp+var_100]
__text:0000000100005613                 mov     qword ptr [rsi], 0
__text:000000010000561A                 mov     rsi, [rbp+var_120]
__text:0000000100005621                 mov     [rbp+var_148], rsi
__text:0000000100005628                 mov     [rbp+var_88], r9
__text:000000010000562F                 mov     rsi, [rbp+var_140]
__text:0000000100005636                 mov     [rbp+var_58], rdx
__text:000000010000563A                 mov     [rbp+var_60], 0
__text:0000000100005642                 mov     [rbp+var_68], rsi
__text:0000000100005646                 mov     rdx, [rbp+var_58]
__text:000000010000564A                 mov     rsi, [rbp+var_60]
__text:000000010000564E                 mov     rdi, [rbp+var_68]
__text:0000000100005652                 mov     [rbp+var_40], rdx
__text:0000000100005656                 mov     [rbp+var_48], rsi
__text:000000010000565A                 mov     [rbp+var_50], rdi
__text:000000010000565E                 mov     rdx, [rbp+var_40]
__text:0000000100005662                 mov     [rbp+var_38], r8
__text:0000000100005666                 mov     rsi, [rbp+var_38]
__text:000000010000566A                 mov     rsi, [rsi]
__text:000000010000566D                 mov     rdi, [rbp+var_50]
__text:0000000100005671                 mov     [rbp+var_8], rdi
__text:0000000100005675                 mov     rdi, [rbp+var_8]
__text:0000000100005679                 mov     [rbp+var_20], rdx
__text:000000010000567D                 mov     [rbp+var_28], rsi
__text:0000000100005681                 mov     [rbp+var_30], rdi
__text:0000000100005685                 mov     rdx, [rbp+var_20]
__text:0000000100005689                 mov     [rbp+var_18], rax
__text:000000010000568D                 mov     rax, [rbp+var_18]
__text:0000000100005691                 mov     rax, [rax]
__text:0000000100005694                 mov     [rdx], rax
__text:0000000100005697                 mov     rax, [rbp+var_30]
__text:000000010000569B                 mov     [rbp+var_10], rax
__text:000000010000569F                 mov     rax, [rbp+var_10]
__text:00000001000056A3                 mov     [rdx+8], rax
__text:00000001000056A7                 cmp     [rbp+var_130], 0
__text:00000001000056B2                 mov     [rbp+var_158], rcx
__text:00000001000056B9                 jz      loc_100005741
__text:00000001000056BF                 mov     rax, [rbp+var_158]
__text:00000001000056C6                 mov     [rbp+var_80], rax
__text:00000001000056CA                 mov     rcx, [rbp+var_80]
__text:00000001000056CE                 add     rcx, 18h
__text:00000001000056D5                 mov     [rbp+var_78], rcx
__text:00000001000056D9                 mov     rcx, [rbp+var_78]
__text:00000001000056DD                 mov     [rbp+var_70], rcx
__text:00000001000056E1                 mov     rcx, [rbp+var_70]
__text:00000001000056E5                 mov     rcx, [rcx+8]
__text:00000001000056E9                 mov     rdx, [rbp+var_130]
__text:00000001000056F0                 mov     [rbp+var_A8], rcx
__text:00000001000056F7                 mov     [rbp+var_B0], rdx
__text:00000001000056FE                 mov     rcx, [rbp+var_A8]
__text:0000000100005705                 mov     rdx, [rbp+var_B0]
__text:000000010000570C                 mov     [rbp+var_90], rcx
__text:0000000100005713                 mov     [rbp+var_98], rdx
__text:000000010000571A                 mov     [rbp+var_A0], 0
__text:0000000100005725                 imul    rdi, [rbp+var_98], 14h ; unsigned __int64
__text:0000000100005730                 call    __Znwm          ; operator new(ulong)
__text:0000000100005735                 mov     [rbp+var_160], rax
__text:000000010000573C                 jmp     loc_1000057B1
__text:0000000100005741 ; ---------------------------------------------------------------------------
__text:0000000100005741
__text:0000000100005741 loc_100005741:                          ; CODE XREF: std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>> &>::__split_buffer(ulong,ulong,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>> &)+129↑j
__text:0000000100005741                 mov     rax, 0
__text:000000010000574B                 lea     rcx, [rbp+var_150]
__text:0000000100005752                 lea     rdx, [rbp+var_D8]
__text:0000000100005759                 mov     [rbp+var_C8], rdx
__text:0000000100005760                 mov     [rbp+var_D0], 0FFFFFFFFFFFFFFFFh
__text:000000010000576B                 mov     rdx, [rbp+var_C8]
__text:0000000100005772                 mov     rsi, [rbp+var_D0]
__text:0000000100005779                 mov     [rbp+var_B8], rdx
__text:0000000100005780                 mov     [rbp+var_C0], rsi
__text:0000000100005787                 mov     rdx, [rbp+var_B8]
__text:000000010000578E                 mov     qword ptr [rdx], 0
__text:0000000100005795                 mov     rdx, [rbp+var_D8]
__text:000000010000579C                 mov     [rbp+var_150], rdx
__text:00000001000057A3                 mov     [rbp+var_E0], rcx
__text:00000001000057AA                 mov     [rbp+var_160], rax
__text:00000001000057B1
__text:00000001000057B1 loc_1000057B1:                          ; CODE XREF: std::__1::__split_buffer<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>> &>::__split_buffer(ulong,ulong,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>> &)+1AC↑j
__text:00000001000057B1                 mov     rax, [rbp+var_160]
__text:00000001000057B8                 mov     rcx, [rbp+var_158]
__text:00000001000057BF                 mov     [rcx], rax
__text:00000001000057C2                 mov     rax, [rcx]
__text:00000001000057C5                 imul    rdx, [rbp+var_138], 14h
__text:00000001000057D0                 add     rax, rdx
__text:00000001000057D3                 mov     [rcx+10h], rax
__text:00000001000057D7                 mov     [rcx+8], rax
__text:00000001000057DB                 mov     rax, [rcx]
__text:00000001000057DE                 imul    rdx, [rbp+var_130], 14h
__text:00000001000057E9                 add     rax, rdx
__text:00000001000057EC                 mov     [rbp+var_F8], rcx
__text:00000001000057F3                 mov     rdx, [rbp+var_F8]
__text:00000001000057FA                 add     rdx, 18h
__text:0000000100005801                 mov     [rbp+var_F0], rdx
__text:0000000100005808                 mov     rdx, [rbp+var_F0]
__text:000000010000580F                 mov     [rbp+var_E8], rdx
__text:0000000100005816                 mov     rdx, [rbp+var_E8]
__text:000000010000581D                 mov     [rdx], rax
__text:0000000100005820                 add     rsp, 160h
__text:0000000100005827                 pop     rbp
__text:0000000100005828                 retn
__text:0000000100005828 __ZNSt3__114__split_bufferINS_4pairINS1_INS1_IiiEES2_EEiEERNS_9allocatorIS4_EEEC2EmmS7_ endp
__text:0000000100005828
__text:0000000100005828 ; ---------------------------------------------------------------------------
__text:0000000100005829                 align 10h
__text:0000000100005830
__text:0000000100005830 ; =============== S U B R O U T I N E =======================================
__text:0000000100005830
__text:0000000100005830 ; Attributes: bp-based frame
__text:0000000100005830
__text:0000000100005830 ; std::__1::vector<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>, std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>>>::~vector()
__text:0000000100005830 __ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEED2Ev proc near
__text:0000000100005830                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEED2Ev_ptr↓o
__text:0000000100005830
__text:0000000100005830 var_8           = qword ptr -8
__text:0000000100005830
__text:0000000100005830                 push    rbp
__text:0000000100005831                 mov     rbp, rsp
__text:0000000100005834                 sub     rsp, 10h
__text:0000000100005838                 mov     [rbp+var_8], rdi
__text:000000010000583C                 mov     rdi, [rbp+var_8]
__text:0000000100005840                 call    j___ZNSt3__113__vector_baseINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEED2Ev ; std::__1::__vector_base<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::~__vector_base()
__text:0000000100005845                 add     rsp, 10h
__text:0000000100005849                 pop     rbp
__text:000000010000584A                 retn
__text:000000010000584A __ZNSt3__16vectorINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEED2Ev endp
__text:000000010000584A
__text:000000010000584A ; ---------------------------------------------------------------------------
__text:000000010000584B                 align 10h
__text:0000000100005850
__text:0000000100005850 ; =============== S U B R O U T I N E =======================================
__text:0000000100005850
__text:0000000100005850 ; Attributes: bp-based frame
__text:0000000100005850
__text:0000000100005850 ; std::__1::__vector_base<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>, std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int, int>, std::__1::pair<int, int>>, int>>>::~__vector_base()
__text:0000000100005850 __ZNSt3__113__vector_baseINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEED2Ev proc near
__text:0000000100005850                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__113__vector_baseINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEED2Ev_ptr↓o
__text:0000000100005850
__text:0000000100005850 var_140         = qword ptr -140h
__text:0000000100005850 var_138         = qword ptr -138h
__text:0000000100005850 var_130         = qword ptr -130h
__text:0000000100005850 var_128         = qword ptr -128h
__text:0000000100005850 var_120         = qword ptr -120h
__text:0000000100005850 var_118         = qword ptr -118h
__text:0000000100005850 var_110         = qword ptr -110h
__text:0000000100005850 var_108         = qword ptr -108h
__text:0000000100005850 var_100         = qword ptr -100h
__text:0000000100005850 var_F8          = qword ptr -0F8h
__text:0000000100005850 var_F0          = qword ptr -0F0h
__text:0000000100005850 var_E8          = qword ptr -0E8h
__text:0000000100005850 var_E0          = qword ptr -0E0h
__text:0000000100005850 var_D8          = qword ptr -0D8h
__text:0000000100005850 var_D0          = qword ptr -0D0h
__text:0000000100005850 var_C8          = qword ptr -0C8h
__text:0000000100005850 var_C0          = qword ptr -0C0h
__text:0000000100005850 var_B8          = qword ptr -0B8h
__text:0000000100005850 var_B0          = qword ptr -0B0h
__text:0000000100005850 var_A8          = qword ptr -0A8h
__text:0000000100005850 var_A0          = qword ptr -0A0h
__text:0000000100005850 var_98          = qword ptr -98h
__text:0000000100005850 var_90          = qword ptr -90h
__text:0000000100005850 var_88          = qword ptr -88h
__text:0000000100005850 var_80          = qword ptr -80h
__text:0000000100005850 var_78          = qword ptr -78h
__text:0000000100005850 var_60          = qword ptr -60h
__text:0000000100005850 var_58          = qword ptr -58h
__text:0000000100005850 var_50          = qword ptr -50h
__text:0000000100005850 var_48          = qword ptr -48h
__text:0000000100005850 var_40          = qword ptr -40h
__text:0000000100005850 var_28          = qword ptr -28h
__text:0000000100005850 var_20          = qword ptr -20h
__text:0000000100005850 var_18          = qword ptr -18h
__text:0000000100005850 var_10          = qword ptr -10h
__text:0000000100005850 var_8           = qword ptr -8
__text:0000000100005850
__text:0000000100005850                 push    rbp
__text:0000000100005851                 mov     rbp, rsp
__text:0000000100005854                 sub     rsp, 140h
__text:000000010000585B                 lea     rax, [rbp+var_120]
__text:0000000100005862                 lea     rcx, [rbp+var_110]
__text:0000000100005869                 mov     [rbp+var_118], rdi
__text:0000000100005870                 mov     rdi, [rbp+var_118]
__text:0000000100005877                 mov     rdx, [rdi]
__text:000000010000587A                 mov     [rbp+var_100], rcx
__text:0000000100005881                 mov     [rbp+var_108], 0FFFFFFFFFFFFFFFFh
__text:000000010000588C                 mov     rcx, [rbp+var_100]
__text:0000000100005893                 mov     rsi, [rbp+var_108]
__text:000000010000589A                 mov     [rbp+var_F0], rcx
__text:00000001000058A1                 mov     [rbp+var_F8], rsi
__text:00000001000058A8                 mov     rcx, [rbp+var_F0]
__text:00000001000058AF                 mov     qword ptr [rcx], 0
__text:00000001000058B6                 mov     rcx, [rbp+var_110]
__text:00000001000058BD                 mov     [rbp+var_120], rcx
__text:00000001000058C4                 mov     [rbp+var_B8], rax
__text:00000001000058CB                 cmp     rdx, 0
__text:00000001000058D2                 mov     [rbp+var_128], rdi
__text:00000001000058D9                 jz      loc_100005A6C
__text:00000001000058DF                 mov     rax, [rbp+var_128]
__text:00000001000058E6                 mov     [rbp+var_78], rax
__text:00000001000058EA                 mov     rcx, [rbp+var_78]
__text:00000001000058EE                 mov     rdx, [rcx]
__text:00000001000058F1                 mov     [rbp+var_58], rcx
__text:00000001000058F5                 mov     [rbp+var_60], rdx
__text:00000001000058F9                 mov     rcx, [rbp+var_58]
__text:00000001000058FD                 mov     [rbp+var_130], rcx
__text:0000000100005904
__text:0000000100005904 loc_100005904:                          ; CODE XREF: std::__1::__vector_base<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::~__vector_base()+11E↓j
__text:0000000100005904                 mov     rax, [rbp+var_60]
__text:0000000100005908                 mov     rcx, [rbp+var_130]
__text:000000010000590F                 cmp     rax, [rcx+8]
__text:0000000100005913                 jz      loc_100005973
__text:0000000100005919                 mov     rax, [rbp+var_130]
__text:0000000100005920                 mov     [rbp+var_50], rax
__text:0000000100005924                 mov     rcx, [rbp+var_50]
__text:0000000100005928                 add     rcx, 10h
__text:000000010000592F                 mov     [rbp+var_48], rcx
__text:0000000100005933                 mov     rcx, [rbp+var_48]
__text:0000000100005937                 mov     [rbp+var_40], rcx
__text:000000010000593B                 mov     rcx, [rbp+var_40]
__text:000000010000593F                 mov     rdx, [rax+8]
__text:0000000100005943                 add     rdx, 0FFFFFFFFFFFFFFECh
__text:000000010000594A                 mov     [rax+8], rdx
__text:000000010000594E                 mov     [rbp+var_8], rdx
__text:0000000100005952                 mov     rdx, [rbp+var_8]
__text:0000000100005956                 mov     [rbp+var_20], rcx
__text:000000010000595A                 mov     [rbp+var_28], rdx
__text:000000010000595E                 mov     rcx, [rbp+var_20]
__text:0000000100005962                 mov     rdx, [rbp+var_28]
__text:0000000100005966                 mov     [rbp+var_10], rcx
__text:000000010000596A                 mov     [rbp+var_18], rdx
__text:000000010000596E                 jmp     loc_100005904
__text:0000000100005973 ; ---------------------------------------------------------------------------
__text:0000000100005973
__text:0000000100005973 loc_100005973:                          ; CODE XREF: std::__1::__vector_base<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::~__vector_base()+C3↑j
__text:0000000100005973                 mov     rax, 14h
__text:000000010000597D                 mov     rcx, [rbp+var_128]
__text:0000000100005984                 mov     [rbp+var_90], rcx
__text:000000010000598B                 mov     rdx, [rbp+var_90]
__text:0000000100005992                 add     rdx, 10h
__text:0000000100005999                 mov     [rbp+var_88], rdx
__text:00000001000059A0                 mov     rdx, [rbp+var_88]
__text:00000001000059A7                 mov     [rbp+var_80], rdx
__text:00000001000059AB                 mov     rdx, [rbp+var_80]
__text:00000001000059AF                 mov     rsi, [rcx]
__text:00000001000059B2                 mov     [rbp+var_B0], rcx
__text:00000001000059B9                 mov     rdi, [rbp+var_B0]
__text:00000001000059C0                 mov     [rbp+var_A8], rdi
__text:00000001000059C7                 mov     r8, [rbp+var_A8]
__text:00000001000059CE                 add     r8, 10h
__text:00000001000059D5                 mov     [rbp+var_A0], r8
__text:00000001000059DC                 mov     r8, [rbp+var_A0]
__text:00000001000059E3                 mov     [rbp+var_98], r8
__text:00000001000059EA                 mov     r8, [rbp+var_98]
__text:00000001000059F1                 mov     r8, [r8]
__text:00000001000059F4                 mov     rdi, [rdi]
__text:00000001000059F7                 sub     r8, rdi
__text:00000001000059FA                 mov     [rbp+var_138], rax
__text:0000000100005A01                 mov     rax, r8
__text:0000000100005A04                 mov     [rbp+var_140], rdx
__text:0000000100005A0B                 cqo
__text:0000000100005A0D                 mov     rdi, [rbp+var_138]
__text:0000000100005A14                 idiv    rdi
__text:0000000100005A17                 mov     rdx, [rbp+var_140]
__text:0000000100005A1E                 mov     [rbp+var_D8], rdx
__text:0000000100005A25                 mov     [rbp+var_E0], rsi
__text:0000000100005A2C                 mov     [rbp+var_E8], rax
__text:0000000100005A33                 mov     rax, [rbp+var_D8]
__text:0000000100005A3A                 mov     rsi, [rbp+var_E0]
__text:0000000100005A41                 mov     r8, [rbp+var_E8]
__text:0000000100005A48                 mov     [rbp+var_C0], rax
__text:0000000100005A4F                 mov     [rbp+var_C8], rsi
__text:0000000100005A56                 mov     [rbp+var_D0], r8
__text:0000000100005A5D                 mov     rax, [rbp+var_C8]
__text:0000000100005A64                 mov     rdi, rax        ; void *
__text:0000000100005A67                 call    __ZdlPv         ; operator delete(void *)
__text:0000000100005A6C
__text:0000000100005A6C loc_100005A6C:                          ; CODE XREF: std::__1::__vector_base<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>,std::__1::allocator<std::__1::pair<std::__1::pair<std::__1::pair<int,int>,std::__1::pair<int,int>>,int>>>::~__vector_base()+89↑j
__text:0000000100005A6C                 add     rsp, 140h
__text:0000000100005A73                 pop     rbp
__text:0000000100005A74                 retn
__text:0000000100005A74 __ZNSt3__113__vector_baseINS_4pairINS1_INS1_IiiEES2_EEiEENS_9allocatorIS4_EEED2Ev endp
__text:0000000100005A74
__text:0000000100005A74 __text          ends
__text:0000000100005A74