__text:0000000100000880 ; =============== S U B R O U T I N E =======================================
__text:0000000100000880
__text:0000000100000880 ; Attributes: bp-based frame
__text:0000000100000880
__text:0000000100000880 ; __int64 __fastcall l1(int, int)
__text:0000000100000880                 public __Z2l1ii
__text:0000000100000880 __Z2l1ii        proc near               ; DATA XREF: _main+5CB↓o
__text:0000000100000880
__text:0000000100000880 var_A           = byte ptr -0Ah
__text:0000000100000880 var_9           = byte ptr -9
__text:0000000100000880 var_8           = dword ptr -8
__text:0000000100000880 var_4           = dword ptr -4
__text:0000000100000880
__text:0000000100000880                 push    rbp
__text:0000000100000881                 mov     rbp, rsp
__text:0000000100000884                 mov     al, 1
__text:0000000100000886                 lea     rcx, _x
__text:000000010000088D                 mov     edx, 64h ; 'd'
__text:0000000100000892                 lea     r8, _y
__text:0000000100000899                 mov     [rbp+var_4], edi
__text:000000010000089C                 mov     [rbp+var_8], esi
__text:000000010000089F                 movsxd  r9, [rbp+var_4]
__text:00000001000008A3                 imul    esi, [rcx+r9*4], 64h ; 'd'
__text:00000001000008AB                 movsxd  r9, [rbp+var_4]
__text:00000001000008AF                 mov     edi, edx
__text:00000001000008B1                 sub     edi, [r8+r9*4]
__text:00000001000008B5                 movsxd  r9, [rbp+var_8]
__text:00000001000008B9                 imul    edi, [rcx+r9*4]
__text:00000001000008BE                 add     esi, edi
__text:00000001000008C0                 movsxd  r9, [rbp+var_8]
__text:00000001000008C4                 imul    edi, [rcx+r9*4], 64h ; 'd'
__text:00000001000008CC                 movsxd  r9, [rbp+var_8]
__text:00000001000008D0                 sub     edx, [r8+r9*4]
__text:00000001000008D4                 movsxd  r8, [rbp+var_4]
__text:00000001000008D8                 imul    edx, [rcx+r8*4]
__text:00000001000008DD                 add     edi, edx
__text:00000001000008DF                 cmp     esi, edi
__text:00000001000008E1                 mov     [rbp+var_9], al
__text:00000001000008E4                 jl      loc_10000095E
__text:00000001000008EA                 mov     al, 0
__text:00000001000008EC                 lea     rcx, _x
__text:00000001000008F3                 mov     edx, 64h ; 'd'
__text:00000001000008F8                 lea     rsi, _y
__text:00000001000008FF                 movsxd  rdi, [rbp+var_4]
__text:0000000100000903                 imul    r8d, [rcx+rdi*4], 64h ; 'd'
__text:000000010000090B                 movsxd  rdi, [rbp+var_4]
__text:000000010000090F                 mov     r9d, edx
__text:0000000100000912                 sub     r9d, [rsi+rdi*4]
__text:0000000100000916                 movsxd  rdi, [rbp+var_8]
__text:000000010000091A                 imul    r9d, [rcx+rdi*4]
__text:000000010000091F                 add     r8d, r9d
__text:0000000100000922                 movsxd  rdi, [rbp+var_8]
__text:0000000100000926                 imul    r9d, [rcx+rdi*4], 64h ; 'd'
__text:000000010000092E                 movsxd  rdi, [rbp+var_8]
__text:0000000100000932                 sub     edx, [rsi+rdi*4]
__text:0000000100000935                 movsxd  rsi, [rbp+var_4]
__text:0000000100000939                 imul    edx, [rcx+rsi*4]
__text:000000010000093D                 add     r9d, edx
__text:0000000100000940                 cmp     r8d, r9d
__text:0000000100000943                 mov     [rbp+var_A], al
__text:0000000100000946                 jnz     loc_100000958
__text:000000010000094C                 mov     eax, [rbp+var_4]
__text:000000010000094F                 cmp     eax, [rbp+var_8]
__text:0000000100000952                 setl    cl
__text:0000000100000955                 mov     [rbp+var_A], cl
__text:0000000100000958
__text:0000000100000958 loc_100000958:                          ; CODE XREF: l1(int,int)+C6↑j
__text:0000000100000958                 mov     al, [rbp+var_A]
__text:000000010000095B                 mov     [rbp+var_9], al
__text:000000010000095E
__text:000000010000095E loc_10000095E:                          ; CODE XREF: l1(int,int)+64↑j
__text:000000010000095E                 mov     al, [rbp+var_9]
__text:0000000100000961                 and     al, 1
__text:0000000100000963                 movzx   eax, al
__text:0000000100000966                 pop     rbp
__text:0000000100000967                 retn
__text:0000000100000967 __Z2l1ii        endp
__text:0000000100000967
__text:0000000100000967 ; ---------------------------------------------------------------------------
__text:0000000100000968                 align 10h
__text:0000000100000970
__text:0000000100000970 ; =============== S U B R O U T I N E =======================================
__text:0000000100000970
__text:0000000100000970 ; Attributes: bp-based frame
__text:0000000100000970
__text:0000000100000970 ; int __cdecl main(int argc, const char **argv, const char **envp)
__text:0000000100000970                 public _main
__text:0000000100000970 _main           proc near
__text:0000000100000970
__text:0000000100000970 var_498         = qword ptr -498h
__text:0000000100000970 var_490         = dword ptr -490h
__text:0000000100000970 var_48C         = dword ptr -48Ch
__text:0000000100000970 var_488         = qword ptr -488h
__text:0000000100000970 var_480         = qword ptr -480h
__text:0000000100000970 var_478         = qword ptr -478h
__text:0000000100000970 var_470         = qword ptr -470h
__text:0000000100000970 var_468         = qword ptr -468h
__text:0000000100000970 var_460         = qword ptr -460h
__text:0000000100000970 var_458         = qword ptr -458h
__text:0000000100000970 var_44C         = dword ptr -44Ch
__text:0000000100000970 var_448         = qword ptr -448h
__text:0000000100000970 var_440         = qword ptr -440h
__text:0000000100000970 var_438         = qword ptr -438h
__text:0000000100000970 var_430         = qword ptr -430h
__text:0000000100000970 var_428         = dword ptr -428h
__text:0000000100000970 var_424         = dword ptr -424h
__text:0000000100000970 var_420         = qword ptr -420h
__text:0000000100000970 var_418         = dword ptr -418h
__text:0000000100000970 var_414         = dword ptr -414h
__text:0000000100000970 var_410         = qword ptr -410h
__text:0000000100000970 var_408         = qword ptr -408h
__text:0000000100000970 var_400         = qword ptr -400h
__text:0000000100000970 var_3F8         = qword ptr -3F8h
__text:0000000100000970 var_3F0         = dword ptr -3F0h
__text:0000000100000970 var_3EC         = dword ptr -3ECh
__text:0000000100000970 var_3E8         = dword ptr -3E8h
__text:0000000100000970 var_3E4         = dword ptr -3E4h
__text:0000000100000970 var_3E0         = dword ptr -3E0h
__text:0000000100000970 var_3D0         = qword ptr -3D0h
__text:0000000100000970 var_3C8         = qword ptr -3C8h
__text:0000000100000970 var_3B0         = qword ptr -3B0h
__text:0000000100000970 var_3A8         = qword ptr -3A8h
__text:0000000100000970 var_3A0         = qword ptr -3A0h
__text:0000000100000970 var_398         = qword ptr -398h
__text:0000000100000970 var_390         = qword ptr -390h
__text:0000000100000970 var_378         = qword ptr -378h
__text:0000000100000970 var_370         = qword ptr -370h
__text:0000000100000970 var_368         = qword ptr -368h
__text:0000000100000970 var_360         = qword ptr -360h
__text:0000000100000970 var_358         = qword ptr -358h
__text:0000000100000970 var_350         = qword ptr -350h
__text:0000000100000970 var_348         = qword ptr -348h
__text:0000000100000970 var_340         = qword ptr -340h
__text:0000000100000970 var_328         = qword ptr -328h
__text:0000000100000970 var_320         = qword ptr -320h
__text:0000000100000970 var_308         = qword ptr -308h
__text:0000000100000970 var_300         = qword ptr -300h
__text:0000000100000970 var_2F8         = qword ptr -2F8h
__text:0000000100000970 var_2F0         = qword ptr -2F0h
__text:0000000100000970 var_2E8         = qword ptr -2E8h
__text:0000000100000970 var_2D0         = qword ptr -2D0h
__text:0000000100000970 var_2C8         = qword ptr -2C8h
__text:0000000100000970 var_2C0         = qword ptr -2C0h
__text:0000000100000970 var_2B8         = qword ptr -2B8h
__text:0000000100000970 var_2B0         = qword ptr -2B0h
__text:0000000100000970 var_2A8         = qword ptr -2A8h
__text:0000000100000970 var_2A0         = qword ptr -2A0h
__text:0000000100000970 var_298         = qword ptr -298h
__text:0000000100000970 var_290         = qword ptr -290h
__text:0000000100000970 var_288         = qword ptr -288h
__text:0000000100000970 var_280         = qword ptr -280h
__text:0000000100000970 var_278         = qword ptr -278h
__text:0000000100000970 var_270         = qword ptr -270h
__text:0000000100000970 var_268         = qword ptr -268h
__text:0000000100000970 var_260         = qword ptr -260h
__text:0000000100000970 var_258         = qword ptr -258h
__text:0000000100000970 var_250         = qword ptr -250h
__text:0000000100000970 var_248         = qword ptr -248h
__text:0000000100000970 var_240         = qword ptr -240h
__text:0000000100000970 var_238         = qword ptr -238h
__text:0000000100000970 var_230         = qword ptr -230h
__text:0000000100000970 var_228         = qword ptr -228h
__text:0000000100000970 var_220         = qword ptr -220h
__text:0000000100000970 var_218         = qword ptr -218h
__text:0000000100000970 var_210         = qword ptr -210h
__text:0000000100000970 var_208         = qword ptr -208h
__text:0000000100000970 var_200         = qword ptr -200h
__text:0000000100000970 var_1F8         = qword ptr -1F8h
__text:0000000100000970 var_1F0         = qword ptr -1F0h
__text:0000000100000970 var_1E8         = qword ptr -1E8h
__text:0000000100000970 var_1E0         = qword ptr -1E0h
__text:0000000100000970 var_1D8         = qword ptr -1D8h
__text:0000000100000970 var_1D0         = qword ptr -1D0h
__text:0000000100000970 var_1C8         = qword ptr -1C8h
__text:0000000100000970 var_1C0         = qword ptr -1C0h
__text:0000000100000970 var_1B8         = qword ptr -1B8h
__text:0000000100000970 var_1B0         = qword ptr -1B0h
__text:0000000100000970 var_1A8         = qword ptr -1A8h
__text:0000000100000970 var_1A0         = qword ptr -1A0h
__text:0000000100000970 var_198         = qword ptr -198h
__text:0000000100000970 var_190         = qword ptr -190h
__text:0000000100000970 var_188         = qword ptr -188h
__text:0000000100000970 var_180         = qword ptr -180h
__text:0000000100000970 var_178         = qword ptr -178h
__text:0000000100000970 var_170         = qword ptr -170h
__text:0000000100000970 var_168         = qword ptr -168h
__text:0000000100000970 var_160         = qword ptr -160h
__text:0000000100000970 var_158         = qword ptr -158h
__text:0000000100000970 var_150         = qword ptr -150h
__text:0000000100000970 var_148         = qword ptr -148h
__text:0000000100000970 var_140         = qword ptr -140h
__text:0000000100000970 var_138         = qword ptr -138h
__text:0000000100000970 var_130         = qword ptr -130h
__text:0000000100000970 var_128         = qword ptr -128h
__text:0000000100000970 var_120         = qword ptr -120h
__text:0000000100000970 var_118         = qword ptr -118h
__text:0000000100000970 var_110         = qword ptr -110h
__text:0000000100000970 var_100         = qword ptr -100h
__text:0000000100000970 var_F8          = qword ptr -0F8h
__text:0000000100000970 var_F0          = byte ptr -0F0h
__text:0000000100000970 var_E8          = qword ptr -0E8h
__text:0000000100000970 var_E0          = qword ptr -0E0h
__text:0000000100000970 var_D8          = qword ptr -0D8h
__text:0000000100000970 var_D0          = qword ptr -0D0h
__text:0000000100000970 var_C8          = qword ptr -0C8h
__text:0000000100000970 var_C0          = qword ptr -0C0h
__text:0000000100000970 var_B8          = qword ptr -0B8h
__text:0000000100000970 var_B0          = qword ptr -0B0h
__text:0000000100000970 var_A8          = qword ptr -0A8h
__text:0000000100000970 var_A0          = qword ptr -0A0h
__text:0000000100000970 var_98          = qword ptr -98h
__text:0000000100000970 var_90          = qword ptr -90h
__text:0000000100000970 var_88          = qword ptr -88h
__text:0000000100000970 var_80          = qword ptr -80h
__text:0000000100000970 var_78          = qword ptr -78h
__text:0000000100000970 var_70          = qword ptr -70h
__text:0000000100000970 var_68          = qword ptr -68h
__text:0000000100000970 var_60          = qword ptr -60h
__text:0000000100000970 var_58          = qword ptr -58h
__text:0000000100000970 var_50          = qword ptr -50h
__text:0000000100000970 var_48          = qword ptr -48h
__text:0000000100000970 var_40          = qword ptr -40h
__text:0000000100000970 var_38          = qword ptr -38h
__text:0000000100000970 var_30          = qword ptr -30h
__text:0000000100000970 var_28          = qword ptr -28h
__text:0000000100000970 var_20          = qword ptr -20h
__text:0000000100000970 var_18          = qword ptr -18h
__text:0000000100000970 var_10          = qword ptr -10h
__text:0000000100000970 var_8           = qword ptr -8
__text:0000000100000970
__text:0000000100000970                 push    rbp
__text:0000000100000971                 mov     rbp, rsp
__text:0000000100000974                 sub     rsp, 4A0h
__text:000000010000097B                 mov     rdi, cs:__ZNSt3__13cinE_ptr
__text:0000000100000982                 lea     rsi, [rbp+var_3E4]
__text:0000000100000989                 mov     [rbp+var_3E0], 0
__text:0000000100000993                 call    __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi ; std::__1::basic_istream<char,std::__1::char_traits<char>>::operator>>(int &)
__text:0000000100000998                 mov     [rbp+var_3E8], 1
__text:00000001000009A2                 mov     [rbp+var_420], rax
__text:00000001000009A9
__text:00000001000009A9 loc_1000009A9:                          ; CODE XREF: _main+A42↓j
__text:00000001000009A9                 mov     eax, [rbp+var_3E8]
__text:00000001000009AF                 cmp     eax, [rbp+var_3E4]
__text:00000001000009B5                 jg      loc_1000013B7
__text:00000001000009BB                 lea     rdi, aD         ; "%d"
__text:00000001000009C2                 lea     rsi, _n
__text:00000001000009C9                 mov     al, 0
__text:00000001000009CB                 call    _scanf
__text:00000001000009D0                 mov     [rbp+var_3EC], 0
__text:00000001000009DA                 mov     [rbp+var_424], eax
__text:00000001000009E0
__text:00000001000009E0 loc_1000009E0:                          ; CODE XREF: _main+BF↓j
__text:00000001000009E0                 mov     eax, [rbp+var_3EC]
__text:00000001000009E6                 cmp     eax, cs:_n
__text:00000001000009EC                 jge     loc_100000A34
__text:00000001000009F2                 lea     rdi, aD         ; "%d"
__text:00000001000009F9                 lea     rax, _x
__text:0000000100000A00                 movsxd  rcx, [rbp+var_3EC]
__text:0000000100000A07                 shl     rcx, 2
__text:0000000100000A0B                 add     rax, rcx
__text:0000000100000A0E                 mov     rsi, rax
__text:0000000100000A11                 mov     al, 0
__text:0000000100000A13                 call    _scanf
__text:0000000100000A18                 mov     [rbp+var_428], eax
__text:0000000100000A1E                 mov     eax, [rbp+var_3EC]
__text:0000000100000A24                 add     eax, 1
__text:0000000100000A29                 mov     [rbp+var_3EC], eax
__text:0000000100000A2F                 jmp     loc_1000009E0
__text:0000000100000A34 ; ---------------------------------------------------------------------------
__text:0000000100000A34
__text:0000000100000A34 loc_100000A34:                          ; CODE XREF: _main+7C↑j
__text:0000000100000A34                 lea     rax, _v
__text:0000000100000A3B                 mov     [rbp+var_3D0], rax
__text:0000000100000A42                 mov     rax, [rbp+var_3D0]
__text:0000000100000A49                 mov     rcx, rax
__text:0000000100000A4C                 mov     [rbp+var_3C8], rcx
__text:0000000100000A53                 mov     rcx, [rbp+var_3C8]
__text:0000000100000A5A                 mov     rdx, [rcx]
__text:0000000100000A5D                 mov     [rbp+var_3A8], rcx
__text:0000000100000A64                 mov     [rbp+var_3B0], rdx
__text:0000000100000A6B                 mov     rcx, [rbp+var_3A8]
__text:0000000100000A72                 mov     [rbp+var_430], rax
__text:0000000100000A79                 mov     [rbp+var_438], rcx
__text:0000000100000A80
__text:0000000100000A80 loc_100000A80:                          ; CODE XREF: _main+1A7↓j
__text:0000000100000A80                 mov     rax, [rbp+var_3B0]
__text:0000000100000A87                 mov     rcx, [rbp+var_438]
__text:0000000100000A8E                 cmp     rax, [rcx+8]
__text:0000000100000A92                 jz      loc_100000B1C
__text:0000000100000A98                 mov     rax, [rbp+var_438]
__text:0000000100000A9F                 mov     [rbp+var_3A0], rax
__text:0000000100000AA6                 mov     rcx, [rbp+var_3A0]
__text:0000000100000AAD                 add     rcx, 10h
__text:0000000100000AB4                 mov     [rbp+var_398], rcx
__text:0000000100000ABB                 mov     rcx, [rbp+var_398]
__text:0000000100000AC2                 mov     [rbp+var_390], rcx
__text:0000000100000AC9                 mov     rcx, [rbp+var_390]
__text:0000000100000AD0                 mov     rdx, [rax+8]
__text:0000000100000AD4                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:0000000100000ADB                 mov     [rax+8], rdx
__text:0000000100000ADF                 mov     [rbp+var_358], rdx
__text:0000000100000AE6                 mov     rdx, [rbp+var_358]
__text:0000000100000AED                 mov     [rbp+var_370], rcx
__text:0000000100000AF4                 mov     [rbp+var_378], rdx
__text:0000000100000AFB                 mov     rcx, [rbp+var_370]
__text:0000000100000B02                 mov     rdx, [rbp+var_378]
__text:0000000100000B09                 mov     [rbp+var_360], rcx
__text:0000000100000B10                 mov     [rbp+var_368], rdx
__text:0000000100000B17                 jmp     loc_100000A80
__text:0000000100000B1C ; ---------------------------------------------------------------------------
__text:0000000100000B1C
__text:0000000100000B1C loc_100000B1C:                          ; CODE XREF: _main+122↑j
__text:0000000100000B1C                 lea     rax, _w
__text:0000000100000B23                 mov     rcx, [rbp+var_430]
__text:0000000100000B2A                 mov     [rbp+var_350], rcx
__text:0000000100000B31                 mov     [rbp+var_328], rax
__text:0000000100000B38                 mov     rax, [rbp+var_328]
__text:0000000100000B3F                 mov     rdx, rax
__text:0000000100000B42                 mov     [rbp+var_320], rdx
__text:0000000100000B49                 mov     rdx, [rbp+var_320]
__text:0000000100000B50                 mov     rsi, [rdx]
__text:0000000100000B53                 mov     [rbp+var_300], rdx
__text:0000000100000B5A                 mov     [rbp+var_308], rsi
__text:0000000100000B61                 mov     rdx, [rbp+var_300]
__text:0000000100000B68                 mov     [rbp+var_440], rax
__text:0000000100000B6F                 mov     [rbp+var_448], rdx
__text:0000000100000B76
__text:0000000100000B76 loc_100000B76:                          ; CODE XREF: _main+29D↓j
__text:0000000100000B76                 mov     rax, [rbp+var_308]
__text:0000000100000B7D                 mov     rcx, [rbp+var_448]
__text:0000000100000B84                 cmp     rax, [rcx+8]
__text:0000000100000B88                 jz      loc_100000C12
__text:0000000100000B8E                 mov     rax, [rbp+var_448]
__text:0000000100000B95                 mov     [rbp+var_2F8], rax
__text:0000000100000B9C                 mov     rcx, [rbp+var_2F8]
__text:0000000100000BA3                 add     rcx, 10h
__text:0000000100000BAA                 mov     [rbp+var_2F0], rcx
__text:0000000100000BB1                 mov     rcx, [rbp+var_2F0]
__text:0000000100000BB8                 mov     [rbp+var_2E8], rcx
__text:0000000100000BBF                 mov     rcx, [rbp+var_2E8]
__text:0000000100000BC6                 mov     rdx, [rax+8]
__text:0000000100000BCA                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:0000000100000BD1                 mov     [rax+8], rdx
__text:0000000100000BD5                 mov     [rbp+var_2B0], rdx
__text:0000000100000BDC                 mov     rdx, [rbp+var_2B0]
__text:0000000100000BE3                 mov     [rbp+var_2C8], rcx
__text:0000000100000BEA                 mov     [rbp+var_2D0], rdx
__text:0000000100000BF1                 mov     rcx, [rbp+var_2C8]
__text:0000000100000BF8                 mov     rdx, [rbp+var_2D0]
__text:0000000100000BFF                 mov     [rbp+var_2B8], rcx
__text:0000000100000C06                 mov     [rbp+var_2C0], rdx
__text:0000000100000C0D                 jmp     loc_100000B76
__text:0000000100000C12 ; ---------------------------------------------------------------------------
__text:0000000100000C12
__text:0000000100000C12 loc_100000C12:                          ; CODE XREF: _main+218↑j
__text:0000000100000C12                 mov     rax, [rbp+var_440]
__text:0000000100000C19                 mov     [rbp+var_2A8], rax
__text:0000000100000C20                 mov     [rbp+var_3F0], 0
__text:0000000100000C2A
__text:0000000100000C2A loc_100000C2A:                          ; CODE XREF: _main+5B1↓j
__text:0000000100000C2A                 mov     eax, [rbp+var_3F0]
__text:0000000100000C30                 cmp     eax, cs:_n
__text:0000000100000C36                 jge     loc_100000F26
__text:0000000100000C3C                 lea     rdi, aD         ; "%d"
__text:0000000100000C43                 lea     rax, _y
__text:0000000100000C4A                 movsxd  rcx, [rbp+var_3F0]
__text:0000000100000C51                 shl     rcx, 2
__text:0000000100000C55                 add     rax, rcx
__text:0000000100000C58                 mov     rsi, rax
__text:0000000100000C5B                 mov     al, 0
__text:0000000100000C5D                 call    _scanf
__text:0000000100000C62                 lea     rcx, _y
__text:0000000100000C69                 movsxd  rsi, [rbp+var_3F0]
__text:0000000100000C70                 cmp     dword ptr [rcx+rsi*4], 0
__text:0000000100000C77                 mov     [rbp+var_44C], eax
__text:0000000100000C7D                 jnz     loc_100000DC7
__text:0000000100000C83                 lea     rax, [rbp+var_3F0]
__text:0000000100000C8A                 lea     rcx, _v
__text:0000000100000C91                 mov     [rbp+var_268], rcx
__text:0000000100000C98                 mov     [rbp+var_270], rax
__text:0000000100000C9F                 mov     rax, [rbp+var_268]
__text:0000000100000CA6                 mov     rcx, [rax+8]
__text:0000000100000CAA                 mov     rdx, rax
__text:0000000100000CAD                 mov     [rbp+var_260], rdx
__text:0000000100000CB4                 mov     rdx, [rbp+var_260]
__text:0000000100000CBB                 add     rdx, 10h
__text:0000000100000CC2                 mov     [rbp+var_258], rdx
__text:0000000100000CC9                 mov     rdx, [rbp+var_258]
__text:0000000100000CD0                 mov     [rbp+var_250], rdx
__text:0000000100000CD7                 mov     rdx, [rbp+var_250]
__text:0000000100000CDE                 cmp     rcx, [rdx]
__text:0000000100000CE1                 mov     [rbp+var_458], rax
__text:0000000100000CE8                 jz      loc_100000DAF
__text:0000000100000CEE                 mov     rax, [rbp+var_458]
__text:0000000100000CF5                 mov     [rbp+var_248], rax
__text:0000000100000CFC                 mov     rax, [rbp+var_248]
__text:0000000100000D03                 add     rax, 10h
__text:0000000100000D09                 mov     [rbp+var_240], rax
__text:0000000100000D10                 mov     rax, [rbp+var_240]
__text:0000000100000D17                 mov     [rbp+var_238], rax
__text:0000000100000D1E                 mov     rax, [rbp+var_238]
__text:0000000100000D25                 mov     rcx, [rbp+var_458]
__text:0000000100000D2C                 mov     rdx, [rcx+8]
__text:0000000100000D30                 mov     [rbp+var_218], rdx
__text:0000000100000D37                 mov     rdx, [rbp+var_218]
__text:0000000100000D3E                 mov     rsi, [rbp+var_270]
__text:0000000100000D45                 mov     [rbp+var_220], rax
__text:0000000100000D4C                 mov     [rbp+var_228], rdx
__text:0000000100000D53                 mov     [rbp+var_230], rsi
__text:0000000100000D5A                 mov     rax, [rbp+var_228]
__text:0000000100000D61                 cmp     rax, 0
__text:0000000100000D67                 mov     [rbp+var_460], rax
__text:0000000100000D6E                 jz      loc_100000D94
__text:0000000100000D74                 mov     rax, [rbp+var_460]
__text:0000000100000D7B                 mov     rcx, [rbp+var_230]
__text:0000000100000D82                 mov     edx, [rcx]
__text:0000000100000D84                 mov     rcx, [rbp+var_460]
__text:0000000100000D8B                 mov     [rcx], edx
__text:0000000100000D8D                 mov     [rbp+var_468], rax
__text:0000000100000D94
__text:0000000100000D94 loc_100000D94:                          ; CODE XREF: _main+3FE↑j
__text:0000000100000D94                 mov     rax, [rbp+var_458]
__text:0000000100000D9B                 mov     rcx, [rax+8]
__text:0000000100000D9F                 add     rcx, 4
__text:0000000100000DA6                 mov     [rax+8], rcx
__text:0000000100000DAA                 jmp     loc_100000DC2
__text:0000000100000DAF ; ---------------------------------------------------------------------------
__text:0000000100000DAF
__text:0000000100000DAF loc_100000DAF:                          ; CODE XREF: _main+378↑j
__text:0000000100000DAF                 mov     rsi, [rbp+var_270]
__text:0000000100000DB6                 mov     rdi, [rbp+var_458]
__text:0000000100000DBD                 call    j___ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_ ; std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)
__text:0000000100000DC2
__text:0000000100000DC2 loc_100000DC2:                          ; CODE XREF: _main+43A↑j
__text:0000000100000DC2                 jmp     loc_100000F0B
__text:0000000100000DC7 ; ---------------------------------------------------------------------------
__text:0000000100000DC7
__text:0000000100000DC7 loc_100000DC7:                          ; CODE XREF: _main+30D↑j
__text:0000000100000DC7                 lea     rax, [rbp+var_3F0]
__text:0000000100000DCE                 lea     rcx, _w
__text:0000000100000DD5                 mov     [rbp+var_208], rcx
__text:0000000100000DDC                 mov     [rbp+var_210], rax
__text:0000000100000DE3                 mov     rax, [rbp+var_208]
__text:0000000100000DEA                 mov     rcx, [rax+8]
__text:0000000100000DEE                 mov     rdx, rax
__text:0000000100000DF1                 mov     [rbp+var_200], rdx
__text:0000000100000DF8                 mov     rdx, [rbp+var_200]
__text:0000000100000DFF                 add     rdx, 10h
__text:0000000100000E06                 mov     [rbp+var_1F8], rdx
__text:0000000100000E0D                 mov     rdx, [rbp+var_1F8]
__text:0000000100000E14                 mov     [rbp+var_1F0], rdx
__text:0000000100000E1B                 mov     rdx, [rbp+var_1F0]
__text:0000000100000E22                 cmp     rcx, [rdx]
__text:0000000100000E25                 mov     [rbp+var_470], rax
__text:0000000100000E2C                 jz      loc_100000EF3
__text:0000000100000E32                 mov     rax, [rbp+var_470]
__text:0000000100000E39                 mov     [rbp+var_1E8], rax
__text:0000000100000E40                 mov     rax, [rbp+var_1E8]
__text:0000000100000E47                 add     rax, 10h
__text:0000000100000E4D                 mov     [rbp+var_1E0], rax
__text:0000000100000E54                 mov     rax, [rbp+var_1E0]
__text:0000000100000E5B                 mov     [rbp+var_1D8], rax
__text:0000000100000E62                 mov     rax, [rbp+var_1D8]
__text:0000000100000E69                 mov     rcx, [rbp+var_470]
__text:0000000100000E70                 mov     rdx, [rcx+8]
__text:0000000100000E74                 mov     [rbp+var_1B8], rdx
__text:0000000100000E7B                 mov     rdx, [rbp+var_1B8]
__text:0000000100000E82                 mov     rsi, [rbp+var_210]
__text:0000000100000E89                 mov     [rbp+var_1C0], rax
__text:0000000100000E90                 mov     [rbp+var_1C8], rdx
__text:0000000100000E97                 mov     [rbp+var_1D0], rsi
__text:0000000100000E9E                 mov     rax, [rbp+var_1C8]
__text:0000000100000EA5                 cmp     rax, 0
__text:0000000100000EAB                 mov     [rbp+var_478], rax
__text:0000000100000EB2                 jz      loc_100000ED8
__text:0000000100000EB8                 mov     rax, [rbp+var_478]
__text:0000000100000EBF                 mov     rcx, [rbp+var_1D0]
__text:0000000100000EC6                 mov     edx, [rcx]
__text:0000000100000EC8                 mov     rcx, [rbp+var_478]
__text:0000000100000ECF                 mov     [rcx], edx
__text:0000000100000ED1                 mov     [rbp+var_480], rax
__text:0000000100000ED8
__text:0000000100000ED8 loc_100000ED8:                          ; CODE XREF: _main+542↑j
__text:0000000100000ED8                 mov     rax, [rbp+var_470]
__text:0000000100000EDF                 mov     rcx, [rax+8]
__text:0000000100000EE3                 add     rcx, 4
__text:0000000100000EEA                 mov     [rax+8], rcx
__text:0000000100000EEE                 jmp     loc_100000F06
__text:0000000100000EF3 ; ---------------------------------------------------------------------------
__text:0000000100000EF3
__text:0000000100000EF3 loc_100000EF3:                          ; CODE XREF: _main+4BC↑j
__text:0000000100000EF3                 mov     rsi, [rbp+var_210]
__text:0000000100000EFA                 mov     rdi, [rbp+var_470]
__text:0000000100000F01                 call    j___ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_ ; std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)
__text:0000000100000F06
__text:0000000100000F06 loc_100000F06:                          ; CODE XREF: _main+57E↑j
__text:0000000100000F06                 jmp     $+5
__text:0000000100000F0B ; ---------------------------------------------------------------------------
__text:0000000100000F0B
__text:0000000100000F0B loc_100000F0B:                          ; CODE XREF: _main:loc_100000DC2↑j
__text:0000000100000F0B                                         ; _main:loc_100000F06↑j
__text:0000000100000F0B                 jmp     $+5
__text:0000000100000F10 ; ---------------------------------------------------------------------------
__text:0000000100000F10
__text:0000000100000F10 loc_100000F10:                          ; CODE XREF: _main:loc_100000F0B↑j
__text:0000000100000F10                 mov     eax, [rbp+var_3F0]
__text:0000000100000F16                 add     eax, 1
__text:0000000100000F1B                 mov     [rbp+var_3F0], eax
__text:0000000100000F21                 jmp     loc_100000C2A
__text:0000000100000F26 ; ---------------------------------------------------------------------------
__text:0000000100000F26
__text:0000000100000F26 loc_100000F26:                          ; CODE XREF: _main+2C6↑j
__text:0000000100000F26                 lea     rax, [rbp+var_D0]
__text:0000000100000F2D                 lea     rcx, [rbp+var_C8]
__text:0000000100000F34                 lea     rdx, [rbp+var_C0]
__text:0000000100000F3B                 lea     rsi, __Z2l1ii   ; l1(int,int)
__text:0000000100000F42                 lea     rdi, [rbp+var_148]
__text:0000000100000F49                 lea     r8, _w
__text:0000000100000F50                 lea     r9, [rbp+var_190]
__text:0000000100000F57                 mov     [rbp+var_1B0], r8
__text:0000000100000F5E                 mov     r10, [rbp+var_1B0]
__text:0000000100000F65                 mov     r11, [r10]
__text:0000000100000F68                 mov     [rbp+var_198], r10
__text:0000000100000F6F                 mov     [rbp+var_1A0], r11
__text:0000000100000F76                 mov     r10, [rbp+var_1A0]
__text:0000000100000F7D                 mov     [rbp+var_180], r9
__text:0000000100000F84                 mov     [rbp+var_188], r10
__text:0000000100000F8B                 mov     r9, [rbp+var_180]
__text:0000000100000F92                 mov     r10, [rbp+var_188]
__text:0000000100000F99                 mov     [rbp+var_170], r9
__text:0000000100000FA0                 mov     [rbp+var_178], r10
__text:0000000100000FA7                 mov     r9, [rbp+var_170]
__text:0000000100000FAE                 mov     r10, [rbp+var_178]
__text:0000000100000FB5                 mov     [r9], r10
__text:0000000100000FB8                 mov     r9, [rbp+var_190]
__text:0000000100000FBF                 mov     [rbp+var_1A8], r9
__text:0000000100000FC6                 mov     r9, [rbp+var_1A8]
__text:0000000100000FCD                 mov     [rbp+var_3F8], r9
__text:0000000100000FD4                 mov     [rbp+var_168], r8
__text:0000000100000FDB                 mov     r8, [rbp+var_168]
__text:0000000100000FE2                 mov     r9, [r8+8]
__text:0000000100000FE6                 mov     [rbp+var_150], r8
__text:0000000100000FED                 mov     [rbp+var_158], r9
__text:0000000100000FF4                 mov     r8, [rbp+var_158]
__text:0000000100000FFB                 mov     [rbp+var_138], rdi
__text:0000000100001002                 mov     [rbp+var_140], r8
__text:0000000100001009                 mov     rdi, [rbp+var_138]
__text:0000000100001010                 mov     r8, [rbp+var_140]
__text:0000000100001017                 mov     [rbp+var_128], rdi
__text:000000010000101E                 mov     [rbp+var_130], r8
__text:0000000100001025                 mov     rdi, [rbp+var_128]
__text:000000010000102C                 mov     r8, [rbp+var_130]
__text:0000000100001033                 mov     [rdi], r8
__text:0000000100001036                 mov     rdi, [rbp+var_148]
__text:000000010000103D                 mov     [rbp+var_160], rdi
__text:0000000100001044                 mov     rdi, [rbp+var_160]
__text:000000010000104B                 mov     [rbp+var_400], rdi
__text:0000000100001052                 mov     rdi, [rbp+var_3F8]
__text:0000000100001059                 mov     r8, [rbp+var_400]
__text:0000000100001060                 mov     [rbp+var_C0], rdi
__text:0000000100001067                 mov     [rbp+var_C8], r8
__text:000000010000106E                 mov     [rbp+var_D0], rsi
__text:0000000100001075                 mov     [rbp+var_B8], rdx
__text:000000010000107C                 mov     rdx, [rbp+var_B8]
__text:0000000100001083                 mov     rdx, [rdx]
__text:0000000100001086                 mov     [rbp+var_98], rcx
__text:000000010000108D                 mov     rcx, [rbp+var_98]
__text:0000000100001094                 mov     rcx, [rcx]
__text:0000000100001097                 mov     [rbp+var_A0], rdx
__text:000000010000109E                 mov     [rbp+var_A8], rcx
__text:00000001000010A5                 mov     [rbp+var_B0], rax
__text:00000001000010AC                 mov     rdi, [rbp+var_A0]
__text:00000001000010B3                 mov     rsi, [rbp+var_A8]
__text:00000001000010BA                 mov     rdx, [rbp+var_B0]
__text:00000001000010C1                 call    j___ZNSt3__16__sortIRPFbiiEPiEEvT0_S5_T_ ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))
__text:00000001000010C6                 lea     rdx, [rbp+var_F0]
__text:00000001000010CD                 lea     rax, [rbp+var_120]
__text:00000001000010D4                 lea     rcx, [rbp+var_118]
__text:00000001000010DB                 lea     rsi, [rbp+var_28]
__text:00000001000010DF                 lea     rdi, _v
__text:00000001000010E6                 lea     r8, [rbp+var_70]
__text:00000001000010EA                 mov     [rbp+var_90], rdi
__text:00000001000010F1                 mov     r9, [rbp+var_90]
__text:00000001000010F8                 mov     r10, [r9]
__text:00000001000010FB                 mov     [rbp+var_78], r9
__text:00000001000010FF                 mov     [rbp+var_80], r10
__text:0000000100001103                 mov     r9, [rbp+var_80]
__text:0000000100001107                 mov     [rbp+var_60], r8
__text:000000010000110B                 mov     [rbp+var_68], r9
__text:000000010000110F                 mov     r8, [rbp+var_60]
__text:0000000100001113                 mov     r9, [rbp+var_68]
__text:0000000100001117                 mov     [rbp+var_50], r8
__text:000000010000111B                 mov     [rbp+var_58], r9
__text:000000010000111F                 mov     r8, [rbp+var_50]
__text:0000000100001123                 mov     r9, [rbp+var_58]
__text:0000000100001127                 mov     [r8], r9
__text:000000010000112A                 mov     r8, [rbp+var_70]
__text:000000010000112E                 mov     [rbp+var_88], r8
__text:0000000100001135                 mov     r8, [rbp+var_88]
__text:000000010000113C                 mov     [rbp+var_408], r8
__text:0000000100001143                 mov     [rbp+var_48], rdi
__text:0000000100001147                 mov     rdi, [rbp+var_48]
__text:000000010000114B                 mov     r8, [rdi+8]
__text:000000010000114F                 mov     [rbp+var_30], rdi
__text:0000000100001153                 mov     [rbp+var_38], r8
__text:0000000100001157                 mov     rdi, [rbp+var_38]
__text:000000010000115B                 mov     [rbp+var_18], rsi
__text:000000010000115F                 mov     [rbp+var_20], rdi
__text:0000000100001163                 mov     rsi, [rbp+var_18]
__text:0000000100001167                 mov     rdi, [rbp+var_20]
__text:000000010000116B                 mov     [rbp+var_8], rsi
__text:000000010000116F                 mov     [rbp+var_10], rdi
__text:0000000100001173                 mov     rsi, [rbp+var_8]
__text:0000000100001177                 mov     rdi, [rbp+var_10]
__text:000000010000117B                 mov     [rsi], rdi
__text:000000010000117E                 mov     rsi, [rbp+var_28]
__text:0000000100001182                 mov     [rbp+var_40], rsi
__text:0000000100001186                 mov     rsi, [rbp+var_40]
__text:000000010000118A                 mov     [rbp+var_410], rsi
__text:0000000100001191                 mov     rsi, [rbp+var_408]
__text:0000000100001198                 mov     rdi, [rbp+var_410]
__text:000000010000119F                 mov     [rbp+var_118], rsi
__text:00000001000011A6                 mov     [rbp+var_120], rdi
__text:00000001000011AD                 mov     [rbp+var_110], rcx
__text:00000001000011B4                 mov     rcx, [rbp+var_110]
__text:00000001000011BB                 mov     rcx, [rcx]
__text:00000001000011BE                 mov     [rbp+var_D8], rax
__text:00000001000011C5                 mov     rax, [rbp+var_D8]
__text:00000001000011CC                 mov     rax, [rax]
__text:00000001000011CF                 mov     [rbp+var_F8], rcx
__text:00000001000011D6                 mov     [rbp+var_100], rax
__text:00000001000011DD                 mov     rax, [rbp+var_F8]
__text:00000001000011E4                 mov     rcx, [rbp+var_100]
__text:00000001000011EB                 mov     [rbp+var_E0], rax
__text:00000001000011F2                 mov     [rbp+var_E8], rcx
__text:00000001000011F9                 mov     rdi, [rbp+var_E0]
__text:0000000100001200                 mov     rsi, [rbp+var_E8]
__text:0000000100001207                 call    __ZNSt3__16__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_ ; std::__1::__sort<std::__1::__less<int,int> &,int *>(int *,int *,std::__1::__less<int,int> &)
__text:000000010000120C                 mov     rdi, cs:__ZNSt3__14coutE_ptr
__text:0000000100001213                 lea     rsi, aCase      ; "Case #"
__text:000000010000121A                 call    j___ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)
__text:000000010000121F                 mov     esi, [rbp+var_3E8]
__text:0000000100001225                 mov     rdi, rax
__text:0000000100001228                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::operator<<(int)
__text:000000010000122D                 lea     rsi, asc_100004F22 ; ": "
__text:0000000100001234                 mov     rdi, rax
__text:0000000100001237                 call    j___ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)
__text:000000010000123C                 mov     [rbp+var_414], 0
__text:0000000100001246                 mov     [rbp+var_488], rax
__text:000000010000124D
__text:000000010000124D loc_10000124D:                          ; CODE XREF: _main+965↓j
__text:000000010000124D                 lea     rax, _w
__text:0000000100001254                 mov     ecx, [rbp+var_414]
__text:000000010000125A                 mov     [rbp+var_278], rax
__text:0000000100001261                 mov     rax, [rbp+var_278]
__text:0000000100001268                 mov     rdx, [rax+8]
__text:000000010000126C                 mov     rax, [rax]
__text:000000010000126F                 sub     rdx, rax
__text:0000000100001272                 sar     rdx, 2
__text:0000000100001276                 mov     esi, edx
__text:0000000100001278                 cmp     ecx, esi
__text:000000010000127A                 jge     loc_1000012DA
__text:0000000100001280                 lea     rdi, aD_0       ; "%d "
__text:0000000100001287                 lea     rax, _w
__text:000000010000128E                 movsxd  rcx, [rbp+var_414]
__text:0000000100001295                 mov     [rbp+var_280], rax
__text:000000010000129C                 mov     [rbp+var_288], rcx
__text:00000001000012A3                 mov     rax, [rbp+var_280]
__text:00000001000012AA                 mov     rcx, [rbp+var_288]
__text:00000001000012B1                 mov     rax, [rax]
__text:00000001000012B4                 mov     esi, [rax+rcx*4]
__text:00000001000012B7                 mov     al, 0
__text:00000001000012B9                 call    _printf
__text:00000001000012BE                 mov     [rbp+var_48C], eax
__text:00000001000012C4                 mov     eax, [rbp+var_414]
__text:00000001000012CA                 add     eax, 1
__text:00000001000012CF                 mov     [rbp+var_414], eax
__text:00000001000012D5                 jmp     loc_10000124D
__text:00000001000012DA ; ---------------------------------------------------------------------------
__text:00000001000012DA
__text:00000001000012DA loc_1000012DA:                          ; CODE XREF: _main+90A↑j
__text:00000001000012DA                 mov     [rbp+var_418], 0
__text:00000001000012E4
__text:00000001000012E4 loc_1000012E4:                          ; CODE XREF: _main+9FC↓j
__text:00000001000012E4                 lea     rax, _v
__text:00000001000012EB                 mov     ecx, [rbp+var_418]
__text:00000001000012F1                 mov     [rbp+var_290], rax
__text:00000001000012F8                 mov     rax, [rbp+var_290]
__text:00000001000012FF                 mov     rdx, [rax+8]
__text:0000000100001303                 mov     rax, [rax]
__text:0000000100001306                 sub     rdx, rax
__text:0000000100001309                 sar     rdx, 2
__text:000000010000130D                 mov     esi, edx
__text:000000010000130F                 cmp     ecx, esi
__text:0000000100001311                 jge     loc_100001371
__text:0000000100001317                 lea     rdi, aD_0       ; "%d "
__text:000000010000131E                 lea     rax, _v
__text:0000000100001325                 movsxd  rcx, [rbp+var_418]
__text:000000010000132C                 mov     [rbp+var_298], rax
__text:0000000100001333                 mov     [rbp+var_2A0], rcx
__text:000000010000133A                 mov     rax, [rbp+var_298]
__text:0000000100001341                 mov     rcx, [rbp+var_2A0]
__text:0000000100001348                 mov     rax, [rax]
__text:000000010000134B                 mov     esi, [rax+rcx*4]
__text:000000010000134E                 mov     al, 0
__text:0000000100001350                 call    _printf
__text:0000000100001355                 mov     [rbp+var_490], eax
__text:000000010000135B                 mov     eax, [rbp+var_418]
__text:0000000100001361                 add     eax, 1
__text:0000000100001366                 mov     [rbp+var_418], eax
__text:000000010000136C                 jmp     loc_1000012E4
__text:0000000100001371 ; ---------------------------------------------------------------------------
__text:0000000100001371
__text:0000000100001371 loc_100001371:                          ; CODE XREF: _main+9A1↑j
__text:0000000100001371                 lea     rax, __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ ; std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)
__text:0000000100001378                 mov     rcx, cs:__ZNSt3__14coutE_ptr
__text:000000010000137F                 mov     [rbp+var_340], rcx
__text:0000000100001386                 mov     [rbp+var_348], rax
__text:000000010000138D                 mov     rdi, [rbp+var_340]
__text:0000000100001394                 call    [rbp+var_348]
__text:000000010000139A                 mov     [rbp+var_498], rax
__text:00000001000013A1                 mov     eax, [rbp+var_3E8]
__text:00000001000013A7                 add     eax, 1
__text:00000001000013AC                 mov     [rbp+var_3E8], eax
__text:00000001000013B2                 jmp     loc_1000009A9
__text:00000001000013B7 ; ---------------------------------------------------------------------------
__text:00000001000013B7
__text:00000001000013B7 loc_1000013B7:                          ; CODE XREF: _main+45↑j
__text:00000001000013B7                 mov     eax, 0
__text:00000001000013BC                 add     rsp, 4A0h
__text:00000001000013C3                 pop     rbp
__text:00000001000013C4                 retn
__text:00000001000013C4 _main           endp
__text:00000001000013C4
__text:00000001000013C4 ; ---------------------------------------------------------------------------
__text:00000001000013C5                 align 10h
__text:00000001000013D0
__text:00000001000013D0 ; =============== S U B R O U T I N E =======================================
__text:00000001000013D0
__text:00000001000013D0 ; Attributes: bp-based frame
__text:00000001000013D0
__text:00000001000013D0 ___cxx_global_var_init proc near        ; CODE XREF: `global constructor keyed to'_a+4↓p
__text:00000001000013D0
__text:00000001000013D0 var_13C         = dword ptr -13Ch
__text:00000001000013D0 lpdso_handle    = qword ptr -138h
__text:00000001000013D0 var_130         = qword ptr -130h
__text:00000001000013D0 var_128         = qword ptr -128h
__text:00000001000013D0 var_120         = qword ptr -120h
__text:00000001000013D0 var_118         = qword ptr -118h
__text:00000001000013D0 var_110         = qword ptr -110h
__text:00000001000013D0 var_108         = qword ptr -108h
__text:00000001000013D0 var_100         = qword ptr -100h
__text:00000001000013D0 var_F8          = qword ptr -0F8h
__text:00000001000013D0 var_F0          = qword ptr -0F0h
__text:00000001000013D0 var_E8          = qword ptr -0E8h
__text:00000001000013D0 var_E0          = qword ptr -0E0h
__text:00000001000013D0 var_D8          = qword ptr -0D8h
__text:00000001000013D0 var_D0          = qword ptr -0D0h
__text:00000001000013D0 var_C8          = qword ptr -0C8h
__text:00000001000013D0 var_C0          = qword ptr -0C0h
__text:00000001000013D0 var_B8          = qword ptr -0B8h
__text:00000001000013D0 var_B0          = qword ptr -0B0h
__text:00000001000013D0 var_A8          = qword ptr -0A8h
__text:00000001000013D0 var_A0          = qword ptr -0A0h
__text:00000001000013D0 var_98          = qword ptr -98h
__text:00000001000013D0 var_90          = qword ptr -90h
__text:00000001000013D0 var_88          = qword ptr -88h
__text:00000001000013D0 var_80          = qword ptr -80h
__text:00000001000013D0 var_78          = qword ptr -78h
__text:00000001000013D0 var_70          = qword ptr -70h
__text:00000001000013D0 var_68          = qword ptr -68h
__text:00000001000013D0 var_60          = qword ptr -60h
__text:00000001000013D0 var_58          = qword ptr -58h
__text:00000001000013D0 var_50          = qword ptr -50h
__text:00000001000013D0 var_48          = qword ptr -48h
__text:00000001000013D0 var_40          = qword ptr -40h
__text:00000001000013D0 var_38          = qword ptr -38h
__text:00000001000013D0 var_30          = qword ptr -30h
__text:00000001000013D0 var_28          = qword ptr -28h
__text:00000001000013D0
__text:00000001000013D0                 push    rbp
__text:00000001000013D1                 mov     rbp, rsp
__text:00000001000013D4                 push    r15
__text:00000001000013D6                 push    r14
__text:00000001000013D8                 push    r12
__text:00000001000013DA                 push    rbx
__text:00000001000013DB                 sub     rsp, 120h
__text:00000001000013E2                 mov     rax, cs:__ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev_ptr
__text:00000001000013E9                 lea     rcx, _v
__text:00000001000013F0                 mov     rdx, rcx
__text:00000001000013F3                 lea     rsi, __mh_execute_header
__text:00000001000013FA                 lea     rdi, [rbp+var_D0]
__text:0000000100001401                 lea     r8, [rbp+var_E8]
__text:0000000100001408                 lea     r9, [rbp+var_120]
__text:000000010000140F                 lea     r10, [rbp+var_A8]
__text:0000000100001416                 lea     r11, [rbp+var_118]
__text:000000010000141D                 lea     rbx, [rbp+var_78]
__text:0000000100001421                 lea     r14, [rbp+var_110]
__text:0000000100001428                 lea     r15, [rbp+var_48]
__text:000000010000142C                 mov     [rbp+var_130], rcx
__text:0000000100001433                 mov     rcx, [rbp+var_130]
__text:000000010000143A                 mov     [rbp+var_128], rcx
__text:0000000100001441                 mov     rcx, [rbp+var_128]
__text:0000000100001448                 mov     [rbp+var_108], rcx
__text:000000010000144F                 mov     rcx, [rbp+var_108]
__text:0000000100001456                 mov     r12, rcx
__text:0000000100001459                 mov     [rbp+var_100], r12
__text:0000000100001460                 mov     [rbp+var_38], r15
__text:0000000100001464                 mov     [rbp+var_40], 0FFFFFFFFFFFFFFFFh
__text:000000010000146C                 mov     r15, [rbp+var_38]
__text:0000000100001470                 mov     r12, [rbp+var_40]
__text:0000000100001474                 mov     [rbp+var_28], r15
__text:0000000100001478                 mov     [rbp+var_30], r12
__text:000000010000147C                 mov     r15, [rbp+var_28]
__text:0000000100001480                 mov     qword ptr [r15], 0
__text:0000000100001487                 mov     r15, [rbp+var_48]
__text:000000010000148B                 mov     [rbp+var_110], r15
__text:0000000100001492                 mov     [rbp+var_50], r14
__text:0000000100001496                 mov     qword ptr [rcx], 0
__text:000000010000149D                 mov     [rbp+var_68], rbx
__text:00000001000014A1                 mov     [rbp+var_70], 0FFFFFFFFFFFFFFFFh
__text:00000001000014A9                 mov     rbx, [rbp+var_68]
__text:00000001000014AD                 mov     r14, [rbp+var_70]
__text:00000001000014B1                 mov     [rbp+var_58], rbx
__text:00000001000014B5                 mov     [rbp+var_60], r14
__text:00000001000014B9                 mov     rbx, [rbp+var_58]
__text:00000001000014BD                 mov     qword ptr [rbx], 0
__text:00000001000014C4                 mov     rbx, [rbp+var_78]
__text:00000001000014C8                 mov     [rbp+var_118], rbx
__text:00000001000014CF                 mov     [rbp+var_80], r11
__text:00000001000014D3                 mov     qword ptr [rcx+8], 0
__text:00000001000014DB                 add     rcx, 10h
__text:00000001000014E2                 mov     [rbp+var_98], r10
__text:00000001000014E9                 mov     [rbp+var_A0], 0FFFFFFFFFFFFFFFFh
__text:00000001000014F4                 mov     r10, [rbp+var_98]
__text:00000001000014FB                 mov     r11, [rbp+var_A0]
__text:0000000100001502                 mov     [rbp+var_88], r10
__text:0000000100001509                 mov     [rbp+var_90], r11
__text:0000000100001510                 mov     r10, [rbp+var_88]
__text:0000000100001517                 mov     qword ptr [r10], 0
__text:000000010000151E                 mov     r10, [rbp+var_A8]
__text:0000000100001525                 mov     [rbp+var_120], r10
__text:000000010000152C                 mov     [rbp+var_B0], r9
__text:0000000100001533                 mov     [rbp+var_F0], rcx
__text:000000010000153A                 mov     [rbp+var_F8], 0
__text:0000000100001545                 mov     rcx, [rbp+var_F0]
__text:000000010000154C                 mov     r9, [rbp+var_F8]
__text:0000000100001553                 mov     [rbp+var_E0], rcx
__text:000000010000155A                 mov     [rbp+var_E8], r9
__text:0000000100001561                 mov     rcx, [rbp+var_E0]
__text:0000000100001568                 mov     [rbp+var_D8], r8
__text:000000010000156F                 mov     r8, [rbp+var_D8]
__text:0000000100001576                 mov     r8, [r8]
__text:0000000100001579                 mov     [rbp+var_C8], rcx
__text:0000000100001580                 mov     [rbp+var_D0], r8
__text:0000000100001587                 mov     rcx, [rbp+var_C8]
__text:000000010000158E                 mov     r8, rcx
__text:0000000100001591                 mov     [rbp+var_C0], r8
__text:0000000100001598                 mov     [rbp+var_B8], rdi
__text:000000010000159F                 mov     rdi, [rbp+var_B8]
__text:00000001000015A6                 mov     rdi, [rdi]
__text:00000001000015A9                 mov     [rcx], rdi
__text:00000001000015AC                 mov     rdi, rax        ; lpfunc
__text:00000001000015AF                 mov     [rbp+lpdso_handle], rsi
__text:00000001000015B6                 mov     rsi, rdx        ; obj
__text:00000001000015B9                 mov     rdx, [rbp+lpdso_handle] ; lpdso_handle
__text:00000001000015C0                 call    ___cxa_atexit
__text:00000001000015C5                 mov     [rbp+var_13C], eax
__text:00000001000015CB                 add     rsp, 120h
__text:00000001000015D2                 pop     rbx
__text:00000001000015D3                 pop     r12
__text:00000001000015D5                 pop     r14
__text:00000001000015D7                 pop     r15
__text:00000001000015D9                 pop     rbp
__text:00000001000015DA                 retn
__text:00000001000015DA ___cxx_global_var_init endp
__text:00000001000015DA
__text:00000001000015DA ; ---------------------------------------------------------------------------
__text:00000001000015DB                 align 20h
__text:00000001000015E0
__text:00000001000015E0 ; =============== S U B R O U T I N E =======================================
__text:00000001000015E0
__text:00000001000015E0 ; Attributes: bp-based frame
__text:00000001000015E0
__text:00000001000015E0 ___cxx_global_var_init1 proc near       ; CODE XREF: `global constructor keyed to'_a+9↓p
__text:00000001000015E0
__text:00000001000015E0 var_13C         = dword ptr -13Ch
__text:00000001000015E0 lpdso_handle    = qword ptr -138h
__text:00000001000015E0 var_130         = qword ptr -130h
__text:00000001000015E0 var_128         = qword ptr -128h
__text:00000001000015E0 var_120         = qword ptr -120h
__text:00000001000015E0 var_118         = qword ptr -118h
__text:00000001000015E0 var_110         = qword ptr -110h
__text:00000001000015E0 var_108         = qword ptr -108h
__text:00000001000015E0 var_100         = qword ptr -100h
__text:00000001000015E0 var_F8          = qword ptr -0F8h
__text:00000001000015E0 var_F0          = qword ptr -0F0h
__text:00000001000015E0 var_E8          = qword ptr -0E8h
__text:00000001000015E0 var_E0          = qword ptr -0E0h
__text:00000001000015E0 var_D8          = qword ptr -0D8h
__text:00000001000015E0 var_D0          = qword ptr -0D0h
__text:00000001000015E0 var_C8          = qword ptr -0C8h
__text:00000001000015E0 var_C0          = qword ptr -0C0h
__text:00000001000015E0 var_B8          = qword ptr -0B8h
__text:00000001000015E0 var_B0          = qword ptr -0B0h
__text:00000001000015E0 var_A8          = qword ptr -0A8h
__text:00000001000015E0 var_A0          = qword ptr -0A0h
__text:00000001000015E0 var_98          = qword ptr -98h
__text:00000001000015E0 var_90          = qword ptr -90h
__text:00000001000015E0 var_88          = qword ptr -88h
__text:00000001000015E0 var_80          = qword ptr -80h
__text:00000001000015E0 var_78          = qword ptr -78h
__text:00000001000015E0 var_70          = qword ptr -70h
__text:00000001000015E0 var_68          = qword ptr -68h
__text:00000001000015E0 var_60          = qword ptr -60h
__text:00000001000015E0 var_58          = qword ptr -58h
__text:00000001000015E0 var_50          = qword ptr -50h
__text:00000001000015E0 var_48          = qword ptr -48h
__text:00000001000015E0 var_40          = qword ptr -40h
__text:00000001000015E0 var_38          = qword ptr -38h
__text:00000001000015E0 var_30          = qword ptr -30h
__text:00000001000015E0 var_28          = qword ptr -28h
__text:00000001000015E0
__text:00000001000015E0                 push    rbp
__text:00000001000015E1                 mov     rbp, rsp
__text:00000001000015E4                 push    r15
__text:00000001000015E6                 push    r14
__text:00000001000015E8                 push    r12
__text:00000001000015EA                 push    rbx
__text:00000001000015EB                 sub     rsp, 120h
__text:00000001000015F2                 mov     rax, cs:__ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev_ptr
__text:00000001000015F9                 lea     rcx, _w
__text:0000000100001600                 mov     rdx, rcx
__text:0000000100001603                 lea     rsi, __mh_execute_header
__text:000000010000160A                 lea     rdi, [rbp+var_D0]
__text:0000000100001611                 lea     r8, [rbp+var_E8]
__text:0000000100001618                 lea     r9, [rbp+var_120]
__text:000000010000161F                 lea     r10, [rbp+var_A8]
__text:0000000100001626                 lea     r11, [rbp+var_118]
__text:000000010000162D                 lea     rbx, [rbp+var_78]
__text:0000000100001631                 lea     r14, [rbp+var_110]
__text:0000000100001638                 lea     r15, [rbp+var_48]
__text:000000010000163C                 mov     [rbp+var_130], rcx
__text:0000000100001643                 mov     rcx, [rbp+var_130]
__text:000000010000164A                 mov     [rbp+var_128], rcx
__text:0000000100001651                 mov     rcx, [rbp+var_128]
__text:0000000100001658                 mov     [rbp+var_108], rcx
__text:000000010000165F                 mov     rcx, [rbp+var_108]
__text:0000000100001666                 mov     r12, rcx
__text:0000000100001669                 mov     [rbp+var_100], r12
__text:0000000100001670                 mov     [rbp+var_38], r15
__text:0000000100001674                 mov     [rbp+var_40], 0FFFFFFFFFFFFFFFFh
__text:000000010000167C                 mov     r15, [rbp+var_38]
__text:0000000100001680                 mov     r12, [rbp+var_40]
__text:0000000100001684                 mov     [rbp+var_28], r15
__text:0000000100001688                 mov     [rbp+var_30], r12
__text:000000010000168C                 mov     r15, [rbp+var_28]
__text:0000000100001690                 mov     qword ptr [r15], 0
__text:0000000100001697                 mov     r15, [rbp+var_48]
__text:000000010000169B                 mov     [rbp+var_110], r15
__text:00000001000016A2                 mov     [rbp+var_50], r14
__text:00000001000016A6                 mov     qword ptr [rcx], 0
__text:00000001000016AD                 mov     [rbp+var_68], rbx
__text:00000001000016B1                 mov     [rbp+var_70], 0FFFFFFFFFFFFFFFFh
__text:00000001000016B9                 mov     rbx, [rbp+var_68]
__text:00000001000016BD                 mov     r14, [rbp+var_70]
__text:00000001000016C1                 mov     [rbp+var_58], rbx
__text:00000001000016C5                 mov     [rbp+var_60], r14
__text:00000001000016C9                 mov     rbx, [rbp+var_58]
__text:00000001000016CD                 mov     qword ptr [rbx], 0
__text:00000001000016D4                 mov     rbx, [rbp+var_78]
__text:00000001000016D8                 mov     [rbp+var_118], rbx
__text:00000001000016DF                 mov     [rbp+var_80], r11
__text:00000001000016E3                 mov     qword ptr [rcx+8], 0
__text:00000001000016EB                 add     rcx, 10h
__text:00000001000016F2                 mov     [rbp+var_98], r10
__text:00000001000016F9                 mov     [rbp+var_A0], 0FFFFFFFFFFFFFFFFh
__text:0000000100001704                 mov     r10, [rbp+var_98]
__text:000000010000170B                 mov     r11, [rbp+var_A0]
__text:0000000100001712                 mov     [rbp+var_88], r10
__text:0000000100001719                 mov     [rbp+var_90], r11
__text:0000000100001720                 mov     r10, [rbp+var_88]
__text:0000000100001727                 mov     qword ptr [r10], 0
__text:000000010000172E                 mov     r10, [rbp+var_A8]
__text:0000000100001735                 mov     [rbp+var_120], r10
__text:000000010000173C                 mov     [rbp+var_B0], r9
__text:0000000100001743                 mov     [rbp+var_F0], rcx
__text:000000010000174A                 mov     [rbp+var_F8], 0
__text:0000000100001755                 mov     rcx, [rbp+var_F0]
__text:000000010000175C                 mov     r9, [rbp+var_F8]
__text:0000000100001763                 mov     [rbp+var_E0], rcx
__text:000000010000176A                 mov     [rbp+var_E8], r9
__text:0000000100001771                 mov     rcx, [rbp+var_E0]
__text:0000000100001778                 mov     [rbp+var_D8], r8
__text:000000010000177F                 mov     r8, [rbp+var_D8]
__text:0000000100001786                 mov     r8, [r8]
__text:0000000100001789                 mov     [rbp+var_C8], rcx
__text:0000000100001790                 mov     [rbp+var_D0], r8
__text:0000000100001797                 mov     rcx, [rbp+var_C8]
__text:000000010000179E                 mov     r8, rcx
__text:00000001000017A1                 mov     [rbp+var_C0], r8
__text:00000001000017A8                 mov     [rbp+var_B8], rdi
__text:00000001000017AF                 mov     rdi, [rbp+var_B8]
__text:00000001000017B6                 mov     rdi, [rdi]
__text:00000001000017B9                 mov     [rcx], rdi
__text:00000001000017BC                 mov     rdi, rax        ; lpfunc
__text:00000001000017BF                 mov     [rbp+lpdso_handle], rsi
__text:00000001000017C6                 mov     rsi, rdx        ; obj
__text:00000001000017C9                 mov     rdx, [rbp+lpdso_handle] ; lpdso_handle
__text:00000001000017D0                 call    ___cxa_atexit
__text:00000001000017D5                 mov     [rbp+var_13C], eax
__text:00000001000017DB                 add     rsp, 120h
__text:00000001000017E2                 pop     rbx
__text:00000001000017E3                 pop     r12
__text:00000001000017E5                 pop     r14
__text:00000001000017E7                 pop     r15
__text:00000001000017E9                 pop     rbp
__text:00000001000017EA                 retn
__text:00000001000017EA ___cxx_global_var_init1 endp
__text:00000001000017EA
__text:00000001000017EA ; ---------------------------------------------------------------------------
__text:00000001000017EB                 align 10h
__text:00000001000017F0
__text:00000001000017F0 ; =============== S U B R O U T I N E =======================================
__text:00000001000017F0
__text:00000001000017F0 ; Attributes: bp-based frame
__text:00000001000017F0
__text:00000001000017F0 ; `global constructor keyed to'_a
__text:00000001000017F0                 public __GLOBAL__I_a
__text:00000001000017F0 __GLOBAL__I_a   proc near               ; DATA XREF: __mod_init_func:0000000100005188↓o
__text:00000001000017F0                 push    rbp
__text:00000001000017F1                 mov     rbp, rsp
__text:00000001000017F4                 call    ___cxx_global_var_init
__text:00000001000017F9                 call    ___cxx_global_var_init1
__text:00000001000017FE                 pop     rbp
__text:00000001000017FF                 retn
__text:00000001000017FF __GLOBAL__I_a   endp
__text:00000001000017FF
__text:0000000100001800
__text:0000000100001800 ; =============== S U B R O U T I N E =======================================
__text:0000000100001800
__text:0000000100001800 ; Attributes: bp-based frame
__text:0000000100001800
__text:0000000100001800 ; std::__1::vector<int, std::__1::allocator<int>>::~vector()
__text:0000000100001800 __ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev proc near
__text:0000000100001800                                         ; DATA XREF: __got:__ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev_ptr↓o
__text:0000000100001800
__text:0000000100001800 var_8           = qword ptr -8
__text:0000000100001800
__text:0000000100001800                 push    rbp
__text:0000000100001801                 mov     rbp, rsp
__text:0000000100001804                 sub     rsp, 10h
__text:0000000100001808                 mov     [rbp+var_8], rdi
__text:000000010000180C                 mov     rdi, [rbp+var_8]
__text:0000000100001810                 call    j___ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev ; std::__1::vector<int,std::__1::allocator<int>>::~vector()
__text:0000000100001815                 add     rsp, 10h
__text:0000000100001819                 pop     rbp
__text:000000010000181A                 retn
__text:000000010000181A __ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev endp
__text:000000010000181A
__text:000000010000181A ; ---------------------------------------------------------------------------
__text:000000010000181B                 align 20h
__text:0000000100001820
__text:0000000100001820 ; =============== S U B R O U T I N E =======================================
__text:0000000100001820
__text:0000000100001820 ; Attributes: bp-based frame
__text:0000000100001820
__text:0000000100001820 ; std::__1::basic_ostream<char, std::__1::char_traits<char>> & std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, char const*)
__text:0000000100001820 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc proc near
__text:0000000100001820                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc_ptr↓o
__text:0000000100001820
__text:0000000100001820 var_1A8         = qword ptr -1A8h
__text:0000000100001820 var_1A0         = qword ptr -1A0h
__text:0000000100001820 var_191         = byte ptr -191h
__text:0000000100001820 var_190         = dword ptr -190h
__text:0000000100001820 var_18C         = dword ptr -18Ch
__text:0000000100001820 var_188         = qword ptr -188h
__text:0000000100001820 var_179         = byte ptr -179h
__text:0000000100001820 var_178         = qword ptr -178h
__text:0000000100001820 var_16C         = dword ptr -16Ch
__text:0000000100001820 var_168         = qword ptr -168h
__text:0000000100001820 var_160         = qword ptr -160h
__text:0000000100001820 var_158         = qword ptr -158h
__text:0000000100001820 var_150         = qword ptr -150h
__text:0000000100001820 var_148         = qword ptr -148h
__text:0000000100001820 var_140         = qword ptr -140h
__text:0000000100001820 var_134         = dword ptr -134h
__text:0000000100001820 var_130         = qword ptr -130h
__text:0000000100001820 var_128         = qword ptr -128h
__text:0000000100001820 var_119         = byte ptr -119h
__text:0000000100001820 var_118         = qword ptr -118h
__text:0000000100001820 var_110         = qword ptr -110h
__text:0000000100001820 var_108         = qword ptr -108h
__text:0000000100001820 var_FC          = dword ptr -0FCh
__text:0000000100001820 var_F8          = qword ptr -0F8h
__text:0000000100001820 var_F0          = byte ptr -0F0h
__text:0000000100001820 var_E0          = qword ptr -0E0h
__text:0000000100001820 var_D8          = qword ptr -0D8h
__text:0000000100001820 var_D0          = qword ptr -0D0h
__text:0000000100001820 var_C8          = qword ptr -0C8h
__text:0000000100001820 var_C0          = qword ptr -0C0h
__text:0000000100001820 var_B8          = qword ptr -0B8h
__text:0000000100001820 var_A0          = qword ptr -0A0h
__text:0000000100001820 var_98          = qword ptr -98h
__text:0000000100001820 var_90          = qword ptr -90h
__text:0000000100001820 var_88          = qword ptr -88h
__text:0000000100001820 var_7C          = dword ptr -7Ch
__text:0000000100001820 var_78          = qword ptr -78h
__text:0000000100001820 var_6C          = dword ptr -6Ch
__text:0000000100001820 var_68          = qword ptr -68h
__text:0000000100001820 var_60          = qword ptr -60h
__text:0000000100001820 var_58          = qword ptr -58h
__text:0000000100001820 var_50          = qword ptr -50h
__text:0000000100001820 var_44          = dword ptr -44h
__text:0000000100001820 var_40          = qword ptr -40h
__text:0000000100001820 var_38          = byte ptr -38h
__text:0000000100001820 var_29          = byte ptr -29h
__text:0000000100001820 var_28          = qword ptr -28h
__text:0000000100001820 var_20          = qword ptr -20h
__text:0000000100001820 var_11          = byte ptr -11h
__text:0000000100001820 var_10          = qword ptr -10h
__text:0000000100001820 var_8           = dword ptr -8
__text:0000000100001820 var_4           = dword ptr -4
__text:0000000100001820
__text:0000000100001820                 push    rbp
__text:0000000100001821                 mov     rbp, rsp
__text:0000000100001824                 sub     rsp, 1B0h
__text:000000010000182B                 mov     [rbp+var_D8], rdi
__text:0000000100001832                 mov     [rbp+var_E0], rsi
__text:0000000100001839                 mov     rsi, [rbp+var_D8]
__text:0000000100001840                 lea     rdi, [rbp+var_F0]
__text:0000000100001847                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_ ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::sentry::sentry(std::__1::basic_ostream<char,std::__1::char_traits<char>>&)
__text:000000010000184C                 jmp     $+5
__text:0000000100001851 ; ---------------------------------------------------------------------------
__text:0000000100001851
__text:0000000100001851 loc_100001851:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+2C↑j
__text:0000000100001851                 lea     rax, [rbp+var_F0]
__text:0000000100001858                 mov     [rbp+var_D0], rax
__text:000000010000185F                 mov     rax, [rbp+var_D0]
__text:0000000100001866                 mov     cl, [rax]
__text:0000000100001868                 mov     [rbp+var_119], cl
__text:000000010000186E                 mov     al, [rbp+var_119]
__text:0000000100001874                 test    al, 1
__text:0000000100001876                 jnz     loc_100001881
__text:000000010000187C                 jmp     loc_100001C26
__text:0000000100001881 ; ---------------------------------------------------------------------------
__text:0000000100001881
__text:0000000100001881 loc_100001881:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+56↑j
__text:0000000100001881                 mov     rax, [rbp+var_E0]
__text:0000000100001888                 mov     [rbp+var_C8], rax
__text:000000010000188F                 mov     rdi, rax        ; char *
__text:0000000100001892                 call    _strlen
__text:0000000100001897                 mov     [rbp+var_128], rax
__text:000000010000189E                 jmp     $+5
__text:00000001000018A3 ; ---------------------------------------------------------------------------
__text:00000001000018A3
__text:00000001000018A3 loc_1000018A3:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+7E↑j
__text:00000001000018A3                 jmp     $+5
__text:00000001000018A8 ; ---------------------------------------------------------------------------
__text:00000001000018A8
__text:00000001000018A8 loc_1000018A8:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_1000018A3↑j
__text:00000001000018A8                 lea     rax, [rbp+var_110]
__text:00000001000018AF                 mov     rcx, [rbp+var_128]
__text:00000001000018B6                 mov     [rbp+var_108], rcx
__text:00000001000018BD                 mov     rdx, [rbp+var_D8]
__text:00000001000018C4                 mov     [rbp+var_B8], rax
__text:00000001000018CB                 mov     [rbp+var_C0], rdx
__text:00000001000018D2                 mov     rax, [rbp+var_B8]
__text:00000001000018D9                 mov     rdx, [rbp+var_C0]
__text:00000001000018E0                 mov     [rbp+var_98], rax
__text:00000001000018E7                 mov     [rbp+var_A0], rdx
__text:00000001000018EE                 mov     rax, [rbp+var_98]
__text:00000001000018F5                 mov     rdx, [rbp+var_A0]
__text:00000001000018FC                 mov     rsi, [rdx]
__text:00000001000018FF                 mov     rsi, [rsi-18h]
__text:0000000100001903                 add     rdx, rsi
__text:0000000100001906                 mov     [rbp+var_90], rdx
__text:000000010000190D                 mov     rdx, [rbp+var_90]
__text:0000000100001914                 mov     [rbp+var_88], rdx
__text:000000010000191B                 mov     rdx, [rbp+var_88]
__text:0000000100001922                 mov     rdx, [rdx+28h]
__text:0000000100001926                 mov     [rax], rdx
__text:0000000100001929                 mov     rsi, [rbp+var_E0]
__text:0000000100001930                 mov     rax, [rbp+var_D8]
__text:0000000100001937                 mov     rdx, [rax]
__text:000000010000193A                 mov     rdx, [rdx-18h]
__text:000000010000193E                 add     rax, rdx
__text:0000000100001941                 mov     [rbp+var_60], rax
__text:0000000100001945                 mov     rax, [rbp+var_60]
__text:0000000100001949                 mov     edi, [rax+8]
__text:000000010000194C                 mov     [rbp+var_130], rsi
__text:0000000100001953                 mov     [rbp+var_134], edi
__text:0000000100001959                 mov     eax, [rbp+var_134]
__text:000000010000195F                 and     eax, 0B0h
__text:0000000100001964                 cmp     eax, 20h ; ' '
__text:0000000100001969                 jnz     loc_100001989
__text:000000010000196F                 mov     rax, [rbp+var_E0]
__text:0000000100001976                 add     rax, [rbp+var_108]
__text:000000010000197D                 mov     [rbp+var_140], rax
__text:0000000100001984                 jmp     loc_100001997
__text:0000000100001989 ; ---------------------------------------------------------------------------
__text:0000000100001989
__text:0000000100001989 loc_100001989:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+149↑j
__text:0000000100001989                 mov     rax, [rbp+var_E0]
__text:0000000100001990                 mov     [rbp+var_140], rax
__text:0000000100001997
__text:0000000100001997 loc_100001997:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+164↑j
__text:0000000100001997                 mov     rax, [rbp+var_140]
__text:000000010000199E                 mov     rcx, [rbp+var_E0]
__text:00000001000019A5                 add     rcx, [rbp+var_108]
__text:00000001000019AC                 mov     rdx, [rbp+var_D8]
__text:00000001000019B3                 mov     rsi, [rdx]
__text:00000001000019B6                 mov     rsi, [rsi-18h]
__text:00000001000019BA                 add     rdx, rsi
__text:00000001000019BD                 mov     rsi, [rbp+var_D8]
__text:00000001000019C4                 mov     rdi, [rsi]
__text:00000001000019C7                 mov     rdi, [rdi-18h]
__text:00000001000019CB                 add     rsi, rdi
__text:00000001000019CE                 mov     [rbp+var_50], rsi
__text:00000001000019D2                 mov     rsi, [rbp+var_50]
__text:00000001000019D6                 mov     r8d, [rsi+90h]
__text:00000001000019DD                 mov     [rbp+var_4], 0FFFFFFFFh
__text:00000001000019E4                 mov     [rbp+var_8], r8d
__text:00000001000019E8                 mov     r8d, [rbp+var_4]
__text:00000001000019EC                 cmp     r8d, [rbp+var_8]
__text:00000001000019F0                 mov     [rbp+var_148], rax
__text:00000001000019F7                 mov     [rbp+var_150], rcx
__text:00000001000019FE                 mov     [rbp+var_158], rdx
__text:0000000100001A05                 mov     [rbp+var_160], rsi
__text:0000000100001A0C                 jnz     loc_100001B08
__text:0000000100001A12                 mov     rax, [rbp+var_160]
__text:0000000100001A19                 mov     [rbp+var_28], rax
__text:0000000100001A1D                 mov     [rbp+var_29], 20h ; ' '
__text:0000000100001A21                 mov     rsi, [rbp+var_28]
__text:0000000100001A25                 lea     rdi, [rbp+var_38] ; this
__text:0000000100001A29                 call    __ZNKSt3__18ios_base6getlocEv ; std::__1::ios_base::getloc(void)
__text:0000000100001A2E                 jmp     $+5
__text:0000000100001A33 ; ---------------------------------------------------------------------------
__text:0000000100001A33
__text:0000000100001A33 loc_100001A33:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+20E↑j
__text:0000000100001A33                 lea     rax, [rbp+var_38]
__text:0000000100001A37                 mov     [rbp+var_20], rax
__text:0000000100001A3B                 mov     rsi, cs:__ZNSt3__15ctypeIcE2idE_ptr
__text:0000000100001A42                 mov     rdi, rax
__text:0000000100001A45                 call    __ZNKSt3__16locale9use_facetERNS0_2idE ; std::__1::locale::use_facet(std::__1::locale::id &)
__text:0000000100001A4A                 mov     [rbp+var_168], rax
__text:0000000100001A51                 jmp     $+5
__text:0000000100001A56 ; ---------------------------------------------------------------------------
__text:0000000100001A56
__text:0000000100001A56 loc_100001A56:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+231↑j
__text:0000000100001A56                 mov     al, [rbp+var_29]
__text:0000000100001A59                 mov     rcx, [rbp+var_168]
__text:0000000100001A60                 mov     [rbp+var_10], rcx
__text:0000000100001A64                 mov     [rbp+var_11], al
__text:0000000100001A67                 mov     rdx, [rbp+var_10]
__text:0000000100001A6B                 mov     rsi, [rdx]
__text:0000000100001A6E                 mov     rsi, [rsi+38h]
__text:0000000100001A72                 movsx   edi, [rbp+var_11]
__text:0000000100001A76                 mov     [rbp+var_16C], edi
__text:0000000100001A7C                 mov     rdi, rdx
__text:0000000100001A7F                 mov     r8d, [rbp+var_16C]
__text:0000000100001A86                 mov     [rbp+var_178], rsi
__text:0000000100001A8D                 mov     esi, r8d
__text:0000000100001A90                 mov     rdx, [rbp+var_178]
__text:0000000100001A97                 call    rdx
__text:0000000100001A99                 mov     [rbp+var_179], al
__text:0000000100001A9F                 jmp     loc_100001AE4
__text:0000000100001AA4 ; ---------------------------------------------------------------------------
__text:0000000100001AA4                 mov     ecx, edx
__text:0000000100001AA6                 mov     [rbp+var_40], rax
__text:0000000100001AAA                 mov     [rbp+var_44], ecx
__text:0000000100001AAD                 lea     rdi, [rbp+var_38] ; this
__text:0000000100001AB1                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:0000000100001AB6                 jmp     $+5
__text:0000000100001ABB ; ---------------------------------------------------------------------------
__text:0000000100001ABB
__text:0000000100001ABB loc_100001ABB:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+296↑j
__text:0000000100001ABB                 mov     rax, [rbp+var_40]
__text:0000000100001ABF                 mov     ecx, [rbp+var_44]
__text:0000000100001AC2                 mov     [rbp+var_188], rax
__text:0000000100001AC9                 mov     [rbp+var_18C], ecx
__text:0000000100001ACF                 jmp     loc_100001BF6
__text:0000000100001AD4 ; ---------------------------------------------------------------------------
__text:0000000100001AD4                 mov     ecx, edx
__text:0000000100001AD6                 mov     rdi, rax
__text:0000000100001AD9                 mov     [rbp+var_190], ecx
__text:0000000100001ADF                 call    ___clang_call_terminate
__text:0000000100001AE4 ; ---------------------------------------------------------------------------
__text:0000000100001AE4
__text:0000000100001AE4 loc_100001AE4:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+27F↑j
__text:0000000100001AE4                 lea     rdi, [rbp+var_38] ; this
__text:0000000100001AE8                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:0000000100001AED                 jmp     $+5
__text:0000000100001AF2 ; ---------------------------------------------------------------------------
__text:0000000100001AF2
__text:0000000100001AF2 loc_100001AF2:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+2CD↑j
__text:0000000100001AF2                 mov     al, [rbp+var_179]
__text:0000000100001AF8                 movsx   ecx, al
__text:0000000100001AFB                 mov     rdx, [rbp+var_160]
__text:0000000100001B02                 mov     [rdx+90h], ecx
__text:0000000100001B08
__text:0000000100001B08 loc_100001B08:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+1EC↑j
__text:0000000100001B08                 mov     rax, [rbp+var_160]
__text:0000000100001B0F                 mov     ecx, [rax+90h]
__text:0000000100001B15                 mov     dl, cl
__text:0000000100001B17                 mov     [rbp+var_191], dl
__text:0000000100001B1D                 mov     rdi, [rbp+var_110]
__text:0000000100001B24                 mov     al, [rbp+var_191]
__text:0000000100001B2A                 movsx   r9d, al
__text:0000000100001B2E                 mov     rsi, [rbp+var_130]
__text:0000000100001B35                 mov     rdx, [rbp+var_148]
__text:0000000100001B3C                 mov     rcx, [rbp+var_150]
__text:0000000100001B43                 mov     r8, [rbp+var_158]
__text:0000000100001B4A                 call    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)
__text:0000000100001B4F                 mov     [rbp+var_1A0], rax
__text:0000000100001B56                 jmp     $+5
__text:0000000100001B5B ; ---------------------------------------------------------------------------
__text:0000000100001B5B
__text:0000000100001B5B loc_100001B5B:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+336↑j
__text:0000000100001B5B                 lea     rax, [rbp+var_118]
__text:0000000100001B62                 mov     rcx, [rbp+var_1A0]
__text:0000000100001B69                 mov     [rbp+var_118], rcx
__text:0000000100001B70                 mov     [rbp+var_58], rax
__text:0000000100001B74                 mov     rax, [rbp+var_58]
__text:0000000100001B78                 cmp     qword ptr [rax], 0
__text:0000000100001B7F                 jnz     loc_100001C21
__text:0000000100001B85                 mov     rax, [rbp+var_D8]
__text:0000000100001B8C                 mov     rcx, [rax]
__text:0000000100001B8F                 mov     rcx, [rcx-18h]
__text:0000000100001B93                 add     rax, rcx
__text:0000000100001B96                 mov     [rbp+var_78], rax
__text:0000000100001B9A                 mov     [rbp+var_7C], 5
__text:0000000100001BA1                 mov     rax, [rbp+var_78]
__text:0000000100001BA5                 mov     [rbp+var_68], rax
__text:0000000100001BA9                 mov     [rbp+var_6C], 5
__text:0000000100001BB0                 mov     rax, [rbp+var_68]
__text:0000000100001BB4                 mov     edx, [rax+20h]
__text:0000000100001BB7                 or      edx, 5
__text:0000000100001BBA                 mov     rdi, rax        ; this
__text:0000000100001BBD                 mov     esi, edx        ; unsigned int
__text:0000000100001BBF                 call    __ZNSt3__18ios_base5clearEj ; std::__1::ios_base::clear(uint)
__text:0000000100001BC4                 jmp     $+5
__text:0000000100001BC9 ; ---------------------------------------------------------------------------
__text:0000000100001BC9
__text:0000000100001BC9 loc_100001BC9:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+3A4↑j
__text:0000000100001BC9                 jmp     $+5
__text:0000000100001BCE ; ---------------------------------------------------------------------------
__text:0000000100001BCE
__text:0000000100001BCE loc_100001BCE:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_100001BC9↑j
__text:0000000100001BCE                 jmp     loc_100001C21
__text:0000000100001BD3 ; ---------------------------------------------------------------------------
__text:0000000100001BD3                 mov     ecx, edx
__text:0000000100001BD5                 mov     [rbp+var_F8], rax
__text:0000000100001BDC                 mov     [rbp+var_FC], ecx
__text:0000000100001BE2                 jmp     loc_100001C41
__text:0000000100001BE7 ; ---------------------------------------------------------------------------
__text:0000000100001BE7                 mov     ecx, edx
__text:0000000100001BE9                 mov     [rbp+var_188], rax
__text:0000000100001BF0                 mov     [rbp+var_18C], ecx
__text:0000000100001BF6
__text:0000000100001BF6 loc_100001BF6:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+2AF↑j
__text:0000000100001BF6                 mov     eax, [rbp+var_18C]
__text:0000000100001BFC                 mov     rcx, [rbp+var_188]
__text:0000000100001C03                 mov     [rbp+var_F8], rcx
__text:0000000100001C0A                 mov     [rbp+var_FC], eax
__text:0000000100001C10                 lea     rdi, [rbp+var_F0]
__text:0000000100001C17                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::sentry::~sentry()
__text:0000000100001C1C                 jmp     loc_100001C3C
__text:0000000100001C21 ; ---------------------------------------------------------------------------
__text:0000000100001C21
__text:0000000100001C21 loc_100001C21:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+35F↑j
__text:0000000100001C21                                         ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_100001BCE↑j
__text:0000000100001C21                 jmp     $+5
__text:0000000100001C26 ; ---------------------------------------------------------------------------
__text:0000000100001C26
__text:0000000100001C26 loc_100001C26:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+5C↑j
__text:0000000100001C26                                         ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_100001C21↑j
__text:0000000100001C26                 lea     rdi, [rbp+var_F0]
__text:0000000100001C2D                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::sentry::~sentry()
__text:0000000100001C32                 jmp     $+5
__text:0000000100001C37 ; ---------------------------------------------------------------------------
__text:0000000100001C37
__text:0000000100001C37 loc_100001C37:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+412↑j
__text:0000000100001C37                 jmp     loc_100001C74
__text:0000000100001C3C ; ---------------------------------------------------------------------------
__text:0000000100001C3C
__text:0000000100001C3C loc_100001C3C:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+3FC↑j
__text:0000000100001C3C                 jmp     $+5
__text:0000000100001C41 ; ---------------------------------------------------------------------------
__text:0000000100001C41
__text:0000000100001C41 loc_100001C41:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+3C2↑j
__text:0000000100001C41                                         ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_100001C3C↑j
__text:0000000100001C41                 mov     rdi, [rbp+var_F8] ; void *
__text:0000000100001C48                 call    ___cxa_begin_catch
__text:0000000100001C4D                 mov     rdi, [rbp+var_D8]
__text:0000000100001C54                 mov     rcx, [rdi]
__text:0000000100001C57                 mov     rcx, [rcx-18h]
__text:0000000100001C5B                 add     rdi, rcx        ; this
__text:0000000100001C5E                 mov     [rbp+var_1A8], rax
__text:0000000100001C65                 call    __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv ; std::__1::ios_base::__set_badbit_and_consider_rethrow(void)
__text:0000000100001C6A                 jmp     $+5
__text:0000000100001C6F ; ---------------------------------------------------------------------------
__text:0000000100001C6F
__text:0000000100001C6F loc_100001C6F:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+44A↑j
__text:0000000100001C6F                 call    ___cxa_end_catch
__text:0000000100001C74
__text:0000000100001C74 loc_100001C74:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_100001C37↑j
__text:0000000100001C74                 mov     rax, [rbp+var_D8]
__text:0000000100001C7B                 add     rsp, 1B0h
__text:0000000100001C82                 pop     rbp
__text:0000000100001C83                 retn
__text:0000000100001C83 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc endp
__text:0000000100001C83
__text:0000000100001C84 ; ---------------------------------------------------------------------------
__text:0000000100001C84                 mov     ecx, edx
__text:0000000100001C86                 mov     [rbp-0F8h], rax
__text:0000000100001C8D                 mov     [rbp-0FCh], ecx
__text:0000000100001C93                 call    ___cxa_end_catch
__text:0000000100001C98                 jmp     $+5
__text:0000000100001C9D ; ---------------------------------------------------------------------------
__text:0000000100001C9D
__text:0000000100001C9D loc_100001C9D:                          ; CODE XREF: __text:0000000100001C98↑j
__text:0000000100001C9D                 jmp     $+5
__text:0000000100001CA2 ; ---------------------------------------------------------------------------
__text:0000000100001CA2
__text:0000000100001CA2 loc_100001CA2:                          ; CODE XREF: __text:loc_100001C9D↑j
__text:0000000100001CA2                 mov     rdi, [rbp-0F8h]
__text:0000000100001CA9                 call    __Unwind_Resume
__text:0000000100001CAE ; ---------------------------------------------------------------------------
__text:0000000100001CAE                 mov     ecx, edx
__text:0000000100001CB0                 mov     rdi, rax
__text:0000000100001CB3                 mov     [rbp-1ACh], ecx
__text:0000000100001CB9                 call    ___clang_call_terminate
__text:0000000100001CB9 ; ---------------------------------------------------------------------------
__text:0000000100001CBE                 align 20h
__text:0000000100001CC0
__text:0000000100001CC0 ; =============== S U B R O U T I N E =======================================
__text:0000000100001CC0
__text:0000000100001CC0 ; Attributes: bp-based frame
__text:0000000100001CC0
__text:0000000100001CC0 ; std::__1::basic_ostream<char, std::__1::char_traits<char>> & std::__1::endl<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &)
__text:0000000100001CC0 __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ proc near
__text:0000000100001CC0                                         ; DATA XREF: _main:loc_100001371↑o
__text:0000000100001CC0
__text:0000000100001CC0 var_88          = qword ptr -88h
__text:0000000100001CC0 var_80          = qword ptr -80h
__text:0000000100001CC0 var_78          = dword ptr -78h
__text:0000000100001CC0 var_71          = byte ptr -71h
__text:0000000100001CC0 var_70          = qword ptr -70h
__text:0000000100001CC0 var_64          = dword ptr -64h
__text:0000000100001CC0 var_60          = qword ptr -60h
__text:0000000100001CC0 var_58          = qword ptr -58h
__text:0000000100001CC0 var_50          = qword ptr -50h
__text:0000000100001CC0 var_48          = qword ptr -48h
__text:0000000100001CC0 var_3C          = dword ptr -3Ch
__text:0000000100001CC0 var_38          = qword ptr -38h
__text:0000000100001CC0 var_30          = byte ptr -30h
__text:0000000100001CC0 var_21          = byte ptr -21h
__text:0000000100001CC0 var_20          = qword ptr -20h
__text:0000000100001CC0 var_18          = qword ptr -18h
__text:0000000100001CC0 var_9           = byte ptr -9
__text:0000000100001CC0 var_8           = qword ptr -8
__text:0000000100001CC0
__text:0000000100001CC0                 push    rbp
__text:0000000100001CC1                 mov     rbp, rsp
__text:0000000100001CC4                 sub     rsp, 90h
__text:0000000100001CCB                 mov     [rbp+var_48], rdi
__text:0000000100001CCF                 mov     rax, rdi
__text:0000000100001CD2                 mov     rcx, [rdi]
__text:0000000100001CD5                 mov     rcx, [rcx-18h]
__text:0000000100001CD9                 add     rdi, rcx
__text:0000000100001CDC                 mov     [rbp+var_20], rdi
__text:0000000100001CE0                 mov     [rbp+var_21], 0Ah
__text:0000000100001CE4                 mov     rsi, [rbp+var_20]
__text:0000000100001CE8                 lea     rcx, [rbp+var_30]
__text:0000000100001CEC                 mov     rdi, rcx        ; this
__text:0000000100001CEF                 mov     [rbp+var_50], rax
__text:0000000100001CF3                 mov     [rbp+var_58], rcx
__text:0000000100001CF7                 call    __ZNKSt3__18ios_base6getlocEv ; std::__1::ios_base::getloc(void)
__text:0000000100001CFC                 mov     rax, [rbp+var_58]
__text:0000000100001D00                 mov     [rbp+var_18], rax
__text:0000000100001D04                 mov     rsi, cs:__ZNSt3__15ctypeIcE2idE_ptr
__text:0000000100001D0B                 mov     rdi, rax
__text:0000000100001D0E                 call    __ZNKSt3__16locale9use_facetERNS0_2idE ; std::__1::locale::use_facet(std::__1::locale::id &)
__text:0000000100001D13                 mov     [rbp+var_60], rax
__text:0000000100001D17                 jmp     $+5
__text:0000000100001D1C ; ---------------------------------------------------------------------------
__text:0000000100001D1C
__text:0000000100001D1C loc_100001D1C:                          ; CODE XREF: std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)+57↑j
__text:0000000100001D1C                 mov     al, [rbp+var_21]
__text:0000000100001D1F                 mov     rcx, [rbp+var_60]
__text:0000000100001D23                 mov     [rbp+var_8], rcx
__text:0000000100001D27                 mov     [rbp+var_9], al
__text:0000000100001D2A                 mov     rdx, [rbp+var_8]
__text:0000000100001D2E                 mov     rsi, [rdx]
__text:0000000100001D31                 mov     rsi, [rsi+38h]
__text:0000000100001D35                 movsx   edi, [rbp+var_9]
__text:0000000100001D39                 mov     [rbp+var_64], edi
__text:0000000100001D3C                 mov     rdi, rdx
__text:0000000100001D3F                 mov     r8d, [rbp+var_64]
__text:0000000100001D43                 mov     [rbp+var_70], rsi
__text:0000000100001D47                 mov     esi, r8d
__text:0000000100001D4A                 mov     rdx, [rbp+var_70]
__text:0000000100001D4E                 call    rdx
__text:0000000100001D50                 mov     [rbp+var_71], al
__text:0000000100001D53                 jmp     loc_100001D85
__text:0000000100001D58 ; ---------------------------------------------------------------------------
__text:0000000100001D58                 mov     ecx, edx
__text:0000000100001D5A                 mov     [rbp+var_38], rax
__text:0000000100001D5E                 mov     [rbp+var_3C], ecx
__text:0000000100001D61                 lea     rdi, [rbp+var_30] ; this
__text:0000000100001D65                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:0000000100001D6A                 jmp     $+5
__text:0000000100001D6F ; ---------------------------------------------------------------------------
__text:0000000100001D6F
__text:0000000100001D6F loc_100001D6F:                          ; CODE XREF: std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)+AA↑j
__text:0000000100001D6F                 mov     rdi, [rbp+var_38]
__text:0000000100001D73                 call    __Unwind_Resume
__text:0000000100001D78 ; ---------------------------------------------------------------------------
__text:0000000100001D78                 mov     ecx, edx
__text:0000000100001D7A                 mov     rdi, rax
__text:0000000100001D7D                 mov     [rbp+var_78], ecx
__text:0000000100001D80                 call    ___clang_call_terminate
__text:0000000100001D85 ; ---------------------------------------------------------------------------
__text:0000000100001D85
__text:0000000100001D85 loc_100001D85:                          ; CODE XREF: std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)+93↑j
__text:0000000100001D85                 lea     rdi, [rbp+var_30] ; this
__text:0000000100001D89                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:0000000100001D8E                 mov     rdi, [rbp+var_50]
__text:0000000100001D92                 mov     al, [rbp+var_71]
__text:0000000100001D95                 movsx   esi, al
__text:0000000100001D98                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::put(char)
__text:0000000100001D9D                 mov     rdi, [rbp+var_48]
__text:0000000100001DA1                 mov     [rbp+var_80], rax
__text:0000000100001DA5                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::flush(void)
__text:0000000100001DAA                 mov     rdi, [rbp+var_48]
__text:0000000100001DAE                 mov     [rbp+var_88], rax
__text:0000000100001DB5                 mov     rax, rdi
__text:0000000100001DB8                 add     rsp, 90h
__text:0000000100001DBF                 pop     rbp
__text:0000000100001DC0                 retn
__text:0000000100001DC0 __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ endp
__text:0000000100001DC0
__text:0000000100001DC0 ; ---------------------------------------------------------------------------
__text:0000000100001DC1                 align 10h
__text:0000000100001DD0
__text:0000000100001DD0 ; =============== S U B R O U T I N E =======================================
__text:0000000100001DD0
__text:0000000100001DD0 ; Attributes: noreturn bp-based frame
__text:0000000100001DD0
__text:0000000100001DD0 ___clang_call_terminate proc near       ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+2BF↑p
__text:0000000100001DD0                                         ; __text:0000000100001CB9↑p ...
__text:0000000100001DD0
__text:0000000100001DD0 var_8           = qword ptr -8
__text:0000000100001DD0
__text:0000000100001DD0                 push    rbp
__text:0000000100001DD1                 mov     rbp, rsp
__text:0000000100001DD4                 sub     rsp, 10h
__text:0000000100001DD8                 call    ___cxa_begin_catch
__text:0000000100001DDD                 mov     [rbp+var_8], rax
__text:0000000100001DE1                 call    __ZSt9terminatev ; std::terminate(void)
__text:0000000100001DE1 ___clang_call_terminate endp
__text:0000000100001DE1
__text:0000000100001DE1 ; ---------------------------------------------------------------------------
__text:0000000100001DE6                 align 10h
__text:0000000100001DF0
__text:0000000100001DF0 ; =============== S U B R O U T I N E =======================================
__text:0000000100001DF0
__text:0000000100001DF0 ; Attributes: bp-based frame
__text:0000000100001DF0
__text:0000000100001DF0 ; std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base &, char)
__text:0000000100001DF0 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ proc near
__text:0000000100001DF0                                         ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+32A↑p
__text:0000000100001DF0
__text:0000000100001DF0 var_2CC         = dword ptr -2CCh
__text:0000000100001DF0 var_2C8         = dword ptr -2C8h
__text:0000000100001DF0 var_2C4         = dword ptr -2C4h
__text:0000000100001DF0 var_2C0         = qword ptr -2C0h
__text:0000000100001DF0 var_2B8         = qword ptr -2B8h
__text:0000000100001DF0 var_2B0         = qword ptr -2B0h
__text:0000000100001DF0 var_2A8         = qword ptr -2A8h
__text:0000000100001DF0 var_2A0         = qword ptr -2A0h
__text:0000000100001DF0 var_298         = qword ptr -298h
__text:0000000100001DF0 var_290         = qword ptr -290h
__text:0000000100001DF0 var_288         = qword ptr -288h
__text:0000000100001DF0 var_27C         = dword ptr -27Ch
__text:0000000100001DF0 var_278         = qword ptr -278h
__text:0000000100001DF0 var_26C         = dword ptr -26Ch
__text:0000000100001DF0 var_268         = qword ptr -268h
__text:0000000100001DF0 var_260         = byte ptr -260h
__text:0000000100001DF0 var_248         = qword ptr -248h
__text:0000000100001DF0 var_240         = qword ptr -240h
__text:0000000100001DF0 var_238         = qword ptr -238h
__text:0000000100001DF0 var_230         = qword ptr -230h
__text:0000000100001DF0 var_228         = qword ptr -228h
__text:0000000100001DF0 var_219         = byte ptr -219h
__text:0000000100001DF0 var_218         = qword ptr -218h
__text:0000000100001DF0 var_210         = qword ptr -210h
__text:0000000100001DF0 var_208         = qword ptr -208h
__text:0000000100001DF0 var_200         = qword ptr -200h
__text:0000000100001DF0 var_1F8         = qword ptr -1F8h
__text:0000000100001DF0 var_1F0         = qword ptr -1F0h
__text:0000000100001DF0 var_1E8         = qword ptr -1E8h
__text:0000000100001DF0 var_1E0         = qword ptr -1E0h
__text:0000000100001DF0 var_1D8         = qword ptr -1D8h
__text:0000000100001DF0 var_1D0         = qword ptr -1D0h
__text:0000000100001DF0 var_1C8         = qword ptr -1C8h
__text:0000000100001DF0 var_1C0         = qword ptr -1C0h
__text:0000000100001DF0 var_1B8         = qword ptr -1B8h
__text:0000000100001DF0 var_1B0         = qword ptr -1B0h
__text:0000000100001DF0 var_1A8         = qword ptr -1A8h
__text:0000000100001DF0 var_1A0         = qword ptr -1A0h
__text:0000000100001DF0 var_198         = qword ptr -198h
__text:0000000100001DF0 var_190         = qword ptr -190h
__text:0000000100001DF0 var_188         = qword ptr -188h
__text:0000000100001DF0 var_180         = qword ptr -180h
__text:0000000100001DF0 var_178         = qword ptr -178h
__text:0000000100001DF0 var_170         = qword ptr -170h
__text:0000000100001DF0 var_168         = qword ptr -168h
__text:0000000100001DF0 var_160         = qword ptr -160h
__text:0000000100001DF0 var_158         = qword ptr -158h
__text:0000000100001DF0 var_150         = qword ptr -150h
__text:0000000100001DF0 var_148         = qword ptr -148h
__text:0000000100001DF0 var_140         = qword ptr -140h
__text:0000000100001DF0 var_138         = qword ptr -138h
__text:0000000100001DF0 var_130         = qword ptr -130h
__text:0000000100001DF0 var_128         = qword ptr -128h
__text:0000000100001DF0 var_120         = qword ptr -120h
__text:0000000100001DF0 var_118         = qword ptr -118h
__text:0000000100001DF0 var_110         = qword ptr -110h
__text:0000000100001DF0 var_108         = qword ptr -108h
__text:0000000100001DF0 var_100         = qword ptr -100h
__text:0000000100001DF0 var_F8          = qword ptr -0F8h
__text:0000000100001DF0 var_F0          = qword ptr -0F0h
__text:0000000100001DF0 var_E8          = qword ptr -0E8h
__text:0000000100001DF0 var_E0          = qword ptr -0E0h
__text:0000000100001DF0 var_D8          = qword ptr -0D8h
__text:0000000100001DF0 var_D0          = qword ptr -0D0h
__text:0000000100001DF0 var_C8          = qword ptr -0C8h
__text:0000000100001DF0 var_C0          = qword ptr -0C0h
__text:0000000100001DF0 var_B8          = qword ptr -0B8h
__text:0000000100001DF0 var_B0          = qword ptr -0B0h
__text:0000000100001DF0 var_A8          = qword ptr -0A8h
__text:0000000100001DF0 var_A0          = qword ptr -0A0h
__text:0000000100001DF0 var_98          = qword ptr -98h
__text:0000000100001DF0 var_90          = qword ptr -90h
__text:0000000100001DF0 var_88          = qword ptr -88h
__text:0000000100001DF0 var_80          = qword ptr -80h
__text:0000000100001DF0 var_78          = qword ptr -78h
__text:0000000100001DF0 var_70          = qword ptr -70h
__text:0000000100001DF0 var_68          = qword ptr -68h
__text:0000000100001DF0 var_60          = qword ptr -60h
__text:0000000100001DF0 var_51          = byte ptr -51h
__text:0000000100001DF0 var_50          = qword ptr -50h
__text:0000000100001DF0 var_48          = qword ptr -48h
__text:0000000100001DF0 var_39          = byte ptr -39h
__text:0000000100001DF0 var_38          = qword ptr -38h
__text:0000000100001DF0 var_30          = qword ptr -30h
__text:0000000100001DF0 var_28          = qword ptr -28h
__text:0000000100001DF0 var_20          = qword ptr -20h
__text:0000000100001DF0 var_18          = qword ptr -18h
__text:0000000100001DF0 var_10          = qword ptr -10h
__text:0000000100001DF0 var_8           = qword ptr -8
__text:0000000100001DF0
__text:0000000100001DF0                 push    rbp
__text:0000000100001DF1                 mov     rbp, rsp
__text:0000000100001DF4                 sub     rsp, 2D0h
__text:0000000100001DFB                 mov     al, r9b
__text:0000000100001DFE                 lea     r10, [rbp+var_228]
__text:0000000100001E05                 lea     r11, [rbp+var_1E8]
__text:0000000100001E0C                 mov     [rbp+var_1F8], rdi
__text:0000000100001E13                 mov     [rbp+var_200], rsi
__text:0000000100001E1A                 mov     [rbp+var_208], rdx
__text:0000000100001E21                 mov     [rbp+var_210], rcx
__text:0000000100001E28                 mov     [rbp+var_218], r8
__text:0000000100001E2F                 mov     [rbp+var_219], al
__text:0000000100001E35                 mov     rcx, [rbp+var_1F8]
__text:0000000100001E3C                 mov     [rbp+var_1D8], r11
__text:0000000100001E43                 mov     [rbp+var_1E0], 0FFFFFFFFFFFFFFFFh
__text:0000000100001E4E                 mov     rdx, [rbp+var_1D8]
__text:0000000100001E55                 mov     rsi, [rbp+var_1E0]
__text:0000000100001E5C                 mov     [rbp+var_1C8], rdx
__text:0000000100001E63                 mov     [rbp+var_1D0], rsi
__text:0000000100001E6A                 mov     rdx, [rbp+var_1C8]
__text:0000000100001E71                 mov     qword ptr [rdx], 0
__text:0000000100001E78                 mov     rdx, [rbp+var_1E8]
__text:0000000100001E7F                 mov     [rbp+var_228], rdx
__text:0000000100001E86                 mov     [rbp+var_1C0], r10
__text:0000000100001E8D                 cmp     rcx, 0
__text:0000000100001E94                 jnz     loc_100001EAD
__text:0000000100001E9A                 mov     rax, [rbp+var_1F8]
__text:0000000100001EA1                 mov     [rbp+var_1F0], rax
__text:0000000100001EA8                 jmp     loc_100002472
__text:0000000100001EAD ; ---------------------------------------------------------------------------
__text:0000000100001EAD
__text:0000000100001EAD loc_100001EAD:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+A4↑j
__text:0000000100001EAD                 mov     rax, [rbp+var_210]
__text:0000000100001EB4                 mov     rcx, [rbp+var_200]
__text:0000000100001EBB                 sub     rax, rcx
__text:0000000100001EBE                 mov     [rbp+var_230], rax
__text:0000000100001EC5                 mov     rax, [rbp+var_218]
__text:0000000100001ECC                 mov     [rbp+var_158], rax
__text:0000000100001ED3                 mov     rax, [rbp+var_158]
__text:0000000100001EDA                 mov     rax, [rax+18h]
__text:0000000100001EDE                 mov     [rbp+var_238], rax
__text:0000000100001EE5                 mov     rax, [rbp+var_238]
__text:0000000100001EEC                 cmp     rax, [rbp+var_230]
__text:0000000100001EF3                 jle     loc_100001F16
__text:0000000100001EF9                 mov     rax, [rbp+var_230]
__text:0000000100001F00                 mov     rcx, [rbp+var_238]
__text:0000000100001F07                 sub     rcx, rax
__text:0000000100001F0A                 mov     [rbp+var_238], rcx
__text:0000000100001F11                 jmp     loc_100001F21
__text:0000000100001F16 ; ---------------------------------------------------------------------------
__text:0000000100001F16
__text:0000000100001F16 loc_100001F16:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+103↑j
__text:0000000100001F16                 mov     [rbp+var_238], 0
__text:0000000100001F21
__text:0000000100001F21 loc_100001F21:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+121↑j
__text:0000000100001F21                 mov     rax, [rbp+var_208]
__text:0000000100001F28                 mov     rcx, [rbp+var_200]
__text:0000000100001F2F                 sub     rax, rcx
__text:0000000100001F32                 mov     [rbp+var_240], rax
__text:0000000100001F39                 cmp     [rbp+var_240], 0
__text:0000000100001F44                 jle     loc_100002021
__text:0000000100001F4A                 mov     rax, [rbp+var_1F8]
__text:0000000100001F51                 mov     rcx, [rbp+var_200]
__text:0000000100001F58                 mov     rdx, [rbp+var_240]
__text:0000000100001F5F                 mov     [rbp+var_F8], rax
__text:0000000100001F66                 mov     [rbp+var_100], rcx
__text:0000000100001F6D                 mov     [rbp+var_108], rdx
__text:0000000100001F74                 mov     rax, [rbp+var_F8]
__text:0000000100001F7B                 mov     rcx, [rax]
__text:0000000100001F7E                 mov     rcx, [rcx+60h]
__text:0000000100001F82                 mov     rsi, [rbp+var_100]
__text:0000000100001F89                 mov     rdx, [rbp+var_108]
__text:0000000100001F90                 mov     rdi, rax
__text:0000000100001F93                 call    rcx
__text:0000000100001F95                 cmp     rax, [rbp+var_240]
__text:0000000100001F9C                 jz      loc_10000201C
__text:0000000100001FA2                 lea     rax, [rbp+var_248]
__text:0000000100001FA9                 lea     rcx, [rbp+var_F0]
__text:0000000100001FB0                 mov     [rbp+var_E0], rcx
__text:0000000100001FB7                 mov     [rbp+var_E8], 0FFFFFFFFFFFFFFFFh
__text:0000000100001FC2                 mov     rcx, [rbp+var_E0]
__text:0000000100001FC9                 mov     rdx, [rbp+var_E8]
__text:0000000100001FD0                 mov     [rbp+var_D0], rcx
__text:0000000100001FD7                 mov     [rbp+var_D8], rdx
__text:0000000100001FDE                 mov     rcx, [rbp+var_D0]
__text:0000000100001FE5                 mov     qword ptr [rcx], 0
__text:0000000100001FEC                 mov     rcx, [rbp+var_F0]
__text:0000000100001FF3                 mov     [rbp+var_248], rcx
__text:0000000100001FFA                 mov     [rbp+var_8], rax
__text:0000000100001FFE                 mov     [rbp+var_1F8], 0
__text:0000000100002009                 mov     rax, [rbp+var_1F8]
__text:0000000100002010                 mov     [rbp+var_1F0], rax
__text:0000000100002017                 jmp     loc_100002472
__text:000000010000201C ; ---------------------------------------------------------------------------
__text:000000010000201C
__text:000000010000201C loc_10000201C:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+1AC↑j
__text:000000010000201C                 jmp     $+5
__text:0000000100002021 ; ---------------------------------------------------------------------------
__text:0000000100002021
__text:0000000100002021 loc_100002021:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+154↑j
__text:0000000100002021                                         ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_10000201C↑j
__text:0000000100002021                 cmp     [rbp+var_238], 0
__text:000000010000202C                 jle     loc_10000232B
__text:0000000100002032                 lea     rax, [rbp+var_260]
__text:0000000100002039                 mov     rcx, [rbp+var_238]
__text:0000000100002040                 mov     dl, [rbp+var_219]
__text:0000000100002046                 mov     [rbp+var_48], rax
__text:000000010000204A                 mov     [rbp+var_50], rcx
__text:000000010000204E                 mov     [rbp+var_51], dl
__text:0000000100002051                 mov     rax, [rbp+var_48]
__text:0000000100002055                 mov     rcx, [rbp+var_50]
__text:0000000100002059                 mov     dl, [rbp+var_51]
__text:000000010000205C                 mov     [rbp+var_30], rax
__text:0000000100002060                 mov     [rbp+var_38], rcx
__text:0000000100002064                 mov     [rbp+var_39], dl
__text:0000000100002067                 mov     rax, [rbp+var_30]
__text:000000010000206B                 mov     [rbp+var_28], rax
__text:000000010000206F                 mov     rcx, [rbp+var_28]
__text:0000000100002073                 mov     [rbp+var_20], rcx
__text:0000000100002077                 mov     rcx, [rbp+var_20]
__text:000000010000207B                 mov     [rbp+var_18], rcx
__text:000000010000207F                 mov     rcx, [rbp+var_18]
__text:0000000100002083                 mov     [rbp+var_10], rcx
__text:0000000100002087                 mov     rsi, [rbp+var_38]
__text:000000010000208B                 mov     rdi, rax
__text:000000010000208E                 movsx   edx, [rbp+var_39]
__text:0000000100002092                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::__init(ulong,char)
__text:0000000100002097                 lea     rax, [rbp+var_260]
__text:000000010000209E                 mov     rcx, [rbp+var_1F8]
__text:00000001000020A5                 mov     [rbp+var_C8], rax
__text:00000001000020AC                 mov     rax, [rbp+var_C8]
__text:00000001000020B3                 mov     [rbp+var_C0], rax
__text:00000001000020BA                 mov     rax, [rbp+var_C0]
__text:00000001000020C1                 mov     [rbp+var_B8], rax
__text:00000001000020C8                 mov     rsi, [rbp+var_B8]
__text:00000001000020CF                 mov     [rbp+var_B0], rsi
__text:00000001000020D6                 mov     rsi, [rbp+var_B0]
__text:00000001000020DD                 mov     [rbp+var_A8], rsi
__text:00000001000020E4                 mov     rsi, [rbp+var_A8]
__text:00000001000020EB                 movzx   edx, byte ptr [rsi]
__text:00000001000020EE                 and     edx, 1
__text:00000001000020F4                 cmp     edx, 0
__text:00000001000020FA                 mov     [rbp+var_290], rcx
__text:0000000100002101                 mov     [rbp+var_298], rax
__text:0000000100002108                 jz      loc_10000213D
__text:000000010000210E                 mov     rax, [rbp+var_298]
__text:0000000100002115                 mov     [rbp+var_78], rax
__text:0000000100002119                 mov     rcx, [rbp+var_78]
__text:000000010000211D                 mov     [rbp+var_70], rcx
__text:0000000100002121                 mov     rcx, [rbp+var_70]
__text:0000000100002125                 mov     [rbp+var_68], rcx
__text:0000000100002129                 mov     rcx, [rbp+var_68]
__text:000000010000212D                 mov     rcx, [rcx+10h]
__text:0000000100002131                 mov     [rbp+var_2A0], rcx
__text:0000000100002138                 jmp     loc_100002192
__text:000000010000213D ; ---------------------------------------------------------------------------
__text:000000010000213D
__text:000000010000213D loc_10000213D:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+318↑j
__text:000000010000213D                 mov     rax, [rbp+var_298]
__text:0000000100002144                 mov     [rbp+var_A0], rax
__text:000000010000214B                 mov     rcx, [rbp+var_A0]
__text:0000000100002152                 mov     [rbp+var_98], rcx
__text:0000000100002159                 mov     rcx, [rbp+var_98]
__text:0000000100002160                 mov     [rbp+var_90], rcx
__text:0000000100002167                 mov     rcx, [rbp+var_90]
__text:000000010000216E                 add     rcx, 1
__text:0000000100002175                 mov     [rbp+var_88], rcx
__text:000000010000217C                 mov     rcx, [rbp+var_88]
__text:0000000100002183                 mov     [rbp+var_80], rcx
__text:0000000100002187                 mov     rcx, [rbp+var_80]
__text:000000010000218B                 mov     [rbp+var_2A0], rcx
__text:0000000100002192
__text:0000000100002192 loc_100002192:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+348↑j
__text:0000000100002192                 mov     rax, [rbp+var_2A0]
__text:0000000100002199                 mov     [rbp+var_60], rax
__text:000000010000219D                 mov     rcx, [rbp+var_238]
__text:00000001000021A4                 mov     rdx, [rbp+var_290]
__text:00000001000021AB                 mov     [rbp+var_110], rdx
__text:00000001000021B2                 mov     [rbp+var_118], rax
__text:00000001000021B9                 mov     [rbp+var_120], rcx
__text:00000001000021C0                 mov     rax, [rbp+var_110]
__text:00000001000021C7                 mov     rsi, [rax]
__text:00000001000021CA                 mov     rsi, [rsi+60h]
__text:00000001000021CE                 mov     rdi, [rbp+var_118]
__text:00000001000021D5                 mov     [rbp+var_2A8], rdi
__text:00000001000021DC                 mov     rdi, rax
__text:00000001000021DF                 mov     rax, [rbp+var_2A8]
__text:00000001000021E6                 mov     [rbp+var_2B0], rsi
__text:00000001000021ED                 mov     rsi, rax
__text:00000001000021F0                 mov     rdx, rcx
__text:00000001000021F3                 mov     rcx, [rbp+var_2B0]
__text:00000001000021FA                 call    rcx
__text:00000001000021FC                 mov     [rbp+var_2B8], rax
__text:0000000100002203                 jmp     $+5
__text:0000000100002208 ; ---------------------------------------------------------------------------
__text:0000000100002208
__text:0000000100002208 loc_100002208:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+413↑j
__text:0000000100002208                 jmp     $+5
__text:000000010000220D ; ---------------------------------------------------------------------------
__text:000000010000220D
__text:000000010000220D loc_10000220D:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_100002208↑j
__text:000000010000220D                 mov     rax, [rbp+var_2B8]
__text:0000000100002214                 cmp     rax, [rbp+var_238]
__text:000000010000221B                 jz      loc_1000022D6
__text:0000000100002221                 lea     rax, [rbp+var_148]
__text:0000000100002228                 mov     [rbp+var_138], rax
__text:000000010000222F                 mov     [rbp+var_140], 0FFFFFFFFFFFFFFFFh
__text:000000010000223A                 mov     rax, [rbp+var_138]
__text:0000000100002241                 mov     rcx, [rbp+var_140]
__text:0000000100002248                 mov     [rbp+var_128], rax
__text:000000010000224F                 mov     [rbp+var_130], rcx
__text:0000000100002256                 mov     rax, [rbp+var_128]
__text:000000010000225D                 mov     qword ptr [rax], 0
__text:0000000100002264                 mov     rax, [rbp+var_148]
__text:000000010000226B                 mov     [rbp+var_2C0], rax
__text:0000000100002272                 lea     rax, [rbp+var_278]
__text:0000000100002279                 mov     rcx, [rbp+var_2C0]
__text:0000000100002280                 mov     [rbp+var_278], rcx
__text:0000000100002287                 mov     [rbp+var_150], rax
__text:000000010000228E                 mov     [rbp+var_1F8], 0
__text:0000000100002299                 mov     rax, [rbp+var_1F8]
__text:00000001000022A0                 mov     [rbp+var_1F0], rax
__text:00000001000022A7                 mov     [rbp+var_27C], 1
__text:00000001000022B1                 jmp     loc_1000022E0
__text:00000001000022B6 ; ---------------------------------------------------------------------------
__text:00000001000022B6                 mov     ecx, edx
__text:00000001000022B8                 mov     [rbp+var_268], rax
__text:00000001000022BF                 mov     [rbp+var_26C], ecx
__text:00000001000022C5                 lea     rdi, [rbp+var_260]
__text:00000001000022CC                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::~basic_string()
__text:00000001000022D1                 jmp     loc_100002326
__text:00000001000022D6 ; ---------------------------------------------------------------------------
__text:00000001000022D6
__text:00000001000022D6 loc_1000022D6:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+42B↑j
__text:00000001000022D6                 mov     [rbp+var_27C], 0
__text:00000001000022E0
__text:00000001000022E0 loc_1000022E0:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+4C1↑j
__text:00000001000022E0                 lea     rdi, [rbp+var_260]
__text:00000001000022E7                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::~basic_string()
__text:00000001000022EC                 mov     eax, [rbp+var_27C]
__text:00000001000022F2                 mov     ecx, eax
__text:00000001000022F4                 sub     ecx, 1
__text:00000001000022F7                 mov     [rbp+var_2C4], eax
__text:00000001000022FD                 mov     [rbp+var_2C8], ecx
__text:0000000100002303                 jz      loc_100002472
__text:0000000100002309                 jmp     $+5
__text:000000010000230E ; ---------------------------------------------------------------------------
__text:000000010000230E
__text:000000010000230E loc_10000230E:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+519↑j
__text:000000010000230E                 mov     eax, [rbp+var_2C4]
__text:0000000100002314                 test    eax, eax
__text:0000000100002316                 jnz     loc_10000249E
__text:000000010000231C                 jmp     $+5
__text:0000000100002321 ; ---------------------------------------------------------------------------
__text:0000000100002321
__text:0000000100002321 loc_100002321:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+52C↑j
__text:0000000100002321                 jmp     loc_10000232B
__text:0000000100002326 ; ---------------------------------------------------------------------------
__text:0000000100002326
__text:0000000100002326 loc_100002326:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+4E1↑j
__text:0000000100002326                 jmp     loc_100002482
__text:000000010000232B ; ---------------------------------------------------------------------------
__text:000000010000232B
__text:000000010000232B loc_10000232B:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+23C↑j
__text:000000010000232B                                         ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_100002321↑j
__text:000000010000232B                 mov     rax, [rbp+var_210]
__text:0000000100002332                 mov     rcx, [rbp+var_208]
__text:0000000100002339                 sub     rax, rcx
__text:000000010000233C                 mov     [rbp+var_240], rax
__text:0000000100002343                 cmp     [rbp+var_240], 0
__text:000000010000234E                 jle     loc_10000242E
__text:0000000100002354                 mov     rax, [rbp+var_1F8]
__text:000000010000235B                 mov     rcx, [rbp+var_208]
__text:0000000100002362                 mov     rdx, [rbp+var_240]
__text:0000000100002369                 mov     [rbp+var_160], rax
__text:0000000100002370                 mov     [rbp+var_168], rcx
__text:0000000100002377                 mov     [rbp+var_170], rdx
__text:000000010000237E                 mov     rax, [rbp+var_160]
__text:0000000100002385                 mov     rcx, [rax]
__text:0000000100002388                 mov     rcx, [rcx+60h]
__text:000000010000238C                 mov     rsi, [rbp+var_168]
__text:0000000100002393                 mov     rdx, [rbp+var_170]
__text:000000010000239A                 mov     rdi, rax
__text:000000010000239D                 call    rcx
__text:000000010000239F                 cmp     rax, [rbp+var_240]
__text:00000001000023A6                 jz      loc_100002429
__text:00000001000023AC                 lea     rax, [rbp+var_288]
__text:00000001000023B3                 lea     rcx, [rbp+var_198]
__text:00000001000023BA                 mov     [rbp+var_188], rcx
__text:00000001000023C1                 mov     [rbp+var_190], 0FFFFFFFFFFFFFFFFh
__text:00000001000023CC                 mov     rcx, [rbp+var_188]
__text:00000001000023D3                 mov     rdx, [rbp+var_190]
__text:00000001000023DA                 mov     [rbp+var_178], rcx
__text:00000001000023E1                 mov     [rbp+var_180], rdx
__text:00000001000023E8                 mov     rcx, [rbp+var_178]
__text:00000001000023EF                 mov     qword ptr [rcx], 0
__text:00000001000023F6                 mov     rcx, [rbp+var_198]
__text:00000001000023FD                 mov     [rbp+var_288], rcx
__text:0000000100002404                 mov     [rbp+var_1A0], rax
__text:000000010000240B                 mov     [rbp+var_1F8], 0
__text:0000000100002416                 mov     rax, [rbp+var_1F8]
__text:000000010000241D                 mov     [rbp+var_1F0], rax
__text:0000000100002424                 jmp     loc_100002472
__text:0000000100002429 ; ---------------------------------------------------------------------------
__text:0000000100002429
__text:0000000100002429 loc_100002429:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+5B6↑j
__text:0000000100002429                 jmp     $+5
__text:000000010000242E ; ---------------------------------------------------------------------------
__text:000000010000242E
__text:000000010000242E loc_10000242E:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+55E↑j
__text:000000010000242E                                         ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_100002429↑j
__text:000000010000242E                 mov     rax, [rbp+var_218]
__text:0000000100002435                 mov     [rbp+var_1A8], rax
__text:000000010000243C                 mov     [rbp+var_1B0], 0
__text:0000000100002447                 mov     rax, [rbp+var_1A8]
__text:000000010000244E                 mov     rcx, [rax+18h]
__text:0000000100002452                 mov     [rbp+var_1B8], rcx
__text:0000000100002459                 mov     rcx, [rbp+var_1B0]
__text:0000000100002460                 mov     [rax+18h], rcx
__text:0000000100002464                 mov     rax, [rbp+var_1F8]
__text:000000010000246B                 mov     [rbp+var_1F0], rax
__text:0000000100002472
__text:0000000100002472 loc_100002472:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+B8↑j
__text:0000000100002472                                         ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+227↑j ...
__text:0000000100002472                 mov     rax, [rbp+var_1F0]
__text:0000000100002479                 add     rsp, 2D0h
__text:0000000100002480                 pop     rbp
__text:0000000100002481                 retn
__text:0000000100002482 ; ---------------------------------------------------------------------------
__text:0000000100002482
__text:0000000100002482 loc_100002482:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_100002326↑j
__text:0000000100002482                 mov     rdi, [rbp+var_268]
__text:0000000100002489                 call    __Unwind_Resume
__text:000000010000248E ; ---------------------------------------------------------------------------
__text:000000010000248E                 mov     ecx, edx
__text:0000000100002490                 mov     rdi, rax
__text:0000000100002493                 mov     [rbp+var_2CC], ecx
__text:0000000100002499                 call    ___clang_call_terminate
__text:000000010000249E ; ---------------------------------------------------------------------------
__text:000000010000249E
__text:000000010000249E loc_10000249E:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+526↑j
__text:000000010000249E                 xchg    ax, ax
__text:000000010000249E __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ endp ; sp-analysis failed
__text:000000010000249E
__text:00000001000024A0
__text:00000001000024A0 ; =============== S U B R O U T I N E =======================================
__text:00000001000024A0
__text:00000001000024A0 ; Attributes: bp-based frame
__text:00000001000024A0
__text:00000001000024A0 ; void std::__1::__sort<bool (*&)(int, int), int *>(int *, int *, bool (*&)(int, int))
__text:00000001000024A0 __ZNSt3__16__sortIRPFbiiEPiEEvT0_S5_T_ proc near
__text:00000001000024A0                                         ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+B41↓p
__text:00000001000024A0                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+B85↓p
__text:00000001000024A0                                         ; DATA XREF: ...
__text:00000001000024A0
__text:00000001000024A0 var_1E8         = qword ptr -1E8h
__text:00000001000024A0 var_1E0         = qword ptr -1E0h
__text:00000001000024A0 var_1D8         = qword ptr -1D8h
__text:00000001000024A0 var_1D0         = qword ptr -1D0h
__text:00000001000024A0 var_1C4         = dword ptr -1C4h
__text:00000001000024A0 var_1C0         = qword ptr -1C0h
__text:00000001000024A0 var_1B8         = qword ptr -1B8h
__text:00000001000024A0 var_1AC         = dword ptr -1ACh
__text:00000001000024A0 var_1A8         = qword ptr -1A8h
__text:00000001000024A0 var_19C         = dword ptr -19Ch
__text:00000001000024A0 var_198         = qword ptr -198h
__text:00000001000024A0 var_190         = qword ptr -190h
__text:00000001000024A0 var_188         = qword ptr -188h
__text:00000001000024A0 var_179         = byte ptr -179h
__text:00000001000024A0 var_178         = qword ptr -178h
__text:00000001000024A0 var_170         = qword ptr -170h
__text:00000001000024A0 var_168         = qword ptr -168h
__text:00000001000024A0 var_15C         = dword ptr -15Ch
__text:00000001000024A0 var_158         = qword ptr -158h
__text:00000001000024A0 var_150         = qword ptr -150h
__text:00000001000024A0 var_148         = qword ptr -148h
__text:00000001000024A0 var_140         = qword ptr -140h
__text:00000001000024A0 var_138         = qword ptr -138h
__text:00000001000024A0 var_130         = qword ptr -130h
__text:00000001000024A0 var_128         = qword ptr -128h
__text:00000001000024A0 var_11C         = dword ptr -11Ch
__text:00000001000024A0 var_118         = qword ptr -118h
__text:00000001000024A0 var_110         = qword ptr -110h
__text:00000001000024A0 var_108         = qword ptr -108h
__text:00000001000024A0 var_100         = qword ptr -100h
__text:00000001000024A0 var_F8          = qword ptr -0F8h
__text:00000001000024A0 var_EC          = dword ptr -0ECh
__text:00000001000024A0 var_E8          = qword ptr -0E8h
__text:00000001000024A0 var_E0          = qword ptr -0E0h
__text:00000001000024A0 var_D8          = qword ptr -0D8h
__text:00000001000024A0 var_D0          = qword ptr -0D0h
__text:00000001000024A0 var_C8          = qword ptr -0C8h
__text:00000001000024A0 var_BC          = dword ptr -0BCh
__text:00000001000024A0 var_B8          = qword ptr -0B8h
__text:00000001000024A0 var_B0          = qword ptr -0B0h
__text:00000001000024A0 var_A8          = qword ptr -0A8h
__text:00000001000024A0 var_A0          = qword ptr -0A0h
__text:00000001000024A0 var_98          = qword ptr -98h
__text:00000001000024A0 var_8C          = dword ptr -8Ch
__text:00000001000024A0 var_88          = qword ptr -88h
__text:00000001000024A0 var_80          = qword ptr -80h
__text:00000001000024A0 var_78          = qword ptr -78h
__text:00000001000024A0 var_70          = qword ptr -70h
__text:00000001000024A0 var_68          = qword ptr -68h
__text:00000001000024A0 var_5C          = dword ptr -5Ch
__text:00000001000024A0 var_58          = qword ptr -58h
__text:00000001000024A0 var_50          = qword ptr -50h
__text:00000001000024A0 var_48          = qword ptr -48h
__text:00000001000024A0 var_40          = qword ptr -40h
__text:00000001000024A0 var_38          = qword ptr -38h
__text:00000001000024A0 var_2C          = dword ptr -2Ch
__text:00000001000024A0 var_28          = qword ptr -28h
__text:00000001000024A0 var_20          = qword ptr -20h
__text:00000001000024A0 var_18          = qword ptr -18h
__text:00000001000024A0 var_10          = qword ptr -10h
__text:00000001000024A0 var_8           = qword ptr -8
__text:00000001000024A0
__text:00000001000024A0                 push    rbp
__text:00000001000024A1                 mov     rbp, rsp
__text:00000001000024A4                 sub     rsp, 1F0h
__text:00000001000024AB                 mov     [rbp+var_128], rdi
__text:00000001000024B2                 mov     [rbp+var_130], rsi
__text:00000001000024B9                 mov     [rbp+var_138], rdx
__text:00000001000024C0                 mov     [rbp+var_140], 1Eh
__text:00000001000024CB
__text:00000001000024CB loc_1000024CB:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+ABD↓j
__text:00000001000024CB                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+AEA↓j ...
__text:00000001000024CB                 jmp     $+5
__text:00000001000024D0 ; ---------------------------------------------------------------------------
__text:00000001000024D0
__text:00000001000024D0 loc_1000024D0:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int)):loc_1000024CB↑j
__text:00000001000024D0                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+764↓j
__text:00000001000024D0                 mov     rax, [rbp+var_130]
__text:00000001000024D7                 mov     rcx, [rbp+var_128]
__text:00000001000024DE                 sub     rax, rcx
__text:00000001000024E1                 sar     rax, 2
__text:00000001000024E5                 mov     rcx, rax
__text:00000001000024E8                 sub     rcx, 5          ; switch 6 cases
__text:00000001000024EC                 mov     [rbp+var_148], rax
__text:00000001000024F3                 mov     [rbp+var_188], rax
__text:00000001000024FA                 mov     [rbp+var_190], rcx
__text:0000000100002501                 ja      def_10000251C   ; jumptable 000000010000251C default case
__text:0000000100002507                 lea     rax, jpt_10000251C
__text:000000010000250E                 mov     rcx, [rbp+var_188]
__text:0000000100002515                 movsxd  rdx, ds:(jpt_10000251C - 100003048h)[rax+rcx*4]
__text:0000000100002519                 add     rdx, rax
__text:000000010000251C                 jmp     rdx             ; switch jump
__text:000000010000251E ; ---------------------------------------------------------------------------
__text:000000010000251E
__text:000000010000251E loc_10000251E:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+7C↑j
__text:000000010000251E                                         ; DATA XREF: __text:jpt_10000251C↓o
__text:000000010000251E                 jmp     loc_10000303D   ; jumptable 000000010000251C cases 0,1
__text:0000000100002523 ; ---------------------------------------------------------------------------
__text:0000000100002523
__text:0000000100002523 loc_100002523:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+7C↑j
__text:0000000100002523                                         ; DATA XREF: __text:jpt_10000251C↓o
__text:0000000100002523                 mov     rax, [rbp+var_138] ; jumptable 000000010000251C case 2
__text:000000010000252A                 mov     rax, [rax]
__text:000000010000252D                 mov     rcx, [rbp+var_130]
__text:0000000100002534                 mov     rdx, rcx
__text:0000000100002537                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:000000010000253E                 mov     [rbp+var_130], rdx
__text:0000000100002545                 mov     edi, [rcx-4]
__text:0000000100002548                 mov     rcx, [rbp+var_128]
__text:000000010000254F                 mov     esi, [rcx]
__text:0000000100002551                 call    rax
__text:0000000100002553                 test    al, 1
__text:0000000100002555                 jnz     loc_100002560
__text:000000010000255B                 jmp     loc_1000025D9
__text:0000000100002560 ; ---------------------------------------------------------------------------
__text:0000000100002560
__text:0000000100002560 loc_100002560:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+B5↑j
__text:0000000100002560                 lea     rax, [rbp+var_11C]
__text:0000000100002567                 mov     rcx, [rbp+var_128]
__text:000000010000256E                 mov     rdx, [rbp+var_130]
__text:0000000100002575                 mov     [rbp+var_110], rcx
__text:000000010000257C                 mov     [rbp+var_118], rdx
__text:0000000100002583                 mov     rcx, [rbp+var_110]
__text:000000010000258A                 mov     [rbp+var_108], rcx
__text:0000000100002591                 mov     rcx, [rbp+var_108]
__text:0000000100002598                 mov     esi, [rcx]
__text:000000010000259A                 mov     [rbp+var_11C], esi
__text:00000001000025A0                 mov     rcx, [rbp+var_118]
__text:00000001000025A7                 mov     [rbp+var_F8], rcx
__text:00000001000025AE                 mov     rcx, [rbp+var_F8]
__text:00000001000025B5                 mov     esi, [rcx]
__text:00000001000025B7                 mov     rcx, [rbp+var_110]
__text:00000001000025BE                 mov     [rcx], esi
__text:00000001000025C0                 mov     [rbp+var_100], rax
__text:00000001000025C7                 mov     rax, [rbp+var_100]
__text:00000001000025CE                 mov     esi, [rax]
__text:00000001000025D0                 mov     rax, [rbp+var_118]
__text:00000001000025D7                 mov     [rax], esi
__text:00000001000025D9
__text:00000001000025D9 loc_1000025D9:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+BB↑j
__text:00000001000025D9                 jmp     loc_10000303D
__text:00000001000025DE ; ---------------------------------------------------------------------------
__text:00000001000025DE
__text:00000001000025DE loc_1000025DE:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+7C↑j
__text:00000001000025DE                                         ; DATA XREF: __text:jpt_10000251C↓o
__text:00000001000025DE                 mov     rdi, [rbp+var_128] ; jumptable 000000010000251C case 3
__text:00000001000025E5                 mov     rax, [rbp+var_128]
__text:00000001000025EC                 add     rax, 4
__text:00000001000025F2                 mov     rcx, [rbp+var_130]
__text:00000001000025F9                 add     rcx, 0FFFFFFFFFFFFFFFCh
__text:0000000100002600                 mov     [rbp+var_130], rcx
__text:0000000100002607                 mov     rdx, [rbp+var_138]
__text:000000010000260E                 mov     rsi, rax
__text:0000000100002611                 mov     [rbp+var_198], rdx
__text:0000000100002618                 mov     rdx, rcx
__text:000000010000261B                 mov     rcx, [rbp+var_198]
__text:0000000100002622                 call    j___ZNSt3__17__sort3IRPFbiiEPiEEjT0_S5_S5_T_ ; std::__1::__sort3<bool (*&)(int,int),int *>(int *,int *,int *,bool (*&)(int,int))
__text:0000000100002627                 mov     [rbp+var_19C], eax
__text:000000010000262D                 jmp     loc_10000303D
__text:0000000100002632 ; ---------------------------------------------------------------------------
__text:0000000100002632
__text:0000000100002632 loc_100002632:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+7C↑j
__text:0000000100002632                                         ; DATA XREF: __text:jpt_10000251C↓o
__text:0000000100002632                 mov     rdi, [rbp+var_128] ; jumptable 000000010000251C case 4
__text:0000000100002639                 mov     rax, [rbp+var_128]
__text:0000000100002640                 add     rax, 4
__text:0000000100002646                 mov     rcx, [rbp+var_128]
__text:000000010000264D                 add     rcx, 8
__text:0000000100002654                 mov     rdx, [rbp+var_130]
__text:000000010000265B                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:0000000100002662                 mov     [rbp+var_130], rdx
__text:0000000100002669                 mov     r8, [rbp+var_138]
__text:0000000100002670                 mov     rsi, rax
__text:0000000100002673                 mov     [rbp+var_1A8], rdx
__text:000000010000267A                 mov     rdx, rcx
__text:000000010000267D                 mov     rcx, [rbp+var_1A8]
__text:0000000100002684                 call    j___ZNSt3__17__sort4IRPFbiiEPiEEjT0_S5_S5_S5_T_ ; std::__1::__sort4<bool (*&)(int,int),int *>(int *,int *,int *,int *,bool (*&)(int,int))
__text:0000000100002689                 mov     [rbp+var_1AC], eax
__text:000000010000268F                 jmp     loc_10000303D
__text:0000000100002694 ; ---------------------------------------------------------------------------
__text:0000000100002694
__text:0000000100002694 loc_100002694:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+7C↑j
__text:0000000100002694                                         ; DATA XREF: __text:jpt_10000251C↓o
__text:0000000100002694                 mov     rdi, [rbp+var_128] ; jumptable 000000010000251C case 5
__text:000000010000269B                 mov     rax, [rbp+var_128]
__text:00000001000026A2                 add     rax, 4
__text:00000001000026A8                 mov     rcx, [rbp+var_128]
__text:00000001000026AF                 add     rcx, 8
__text:00000001000026B6                 mov     rdx, [rbp+var_128]
__text:00000001000026BD                 add     rdx, 0Ch
__text:00000001000026C4                 mov     rsi, [rbp+var_130]
__text:00000001000026CB                 add     rsi, 0FFFFFFFFFFFFFFFCh
__text:00000001000026D2                 mov     [rbp+var_130], rsi
__text:00000001000026D9                 mov     r9, [rbp+var_138]
__text:00000001000026E0                 mov     [rbp+var_1B8], rsi
__text:00000001000026E7                 mov     rsi, rax
__text:00000001000026EA                 mov     [rbp+var_1C0], rdx
__text:00000001000026F1                 mov     rdx, rcx
__text:00000001000026F4                 mov     rcx, [rbp+var_1C0]
__text:00000001000026FB                 mov     r8, [rbp+var_1B8]
__text:0000000100002702                 call    j___ZNSt3__17__sort5IRPFbiiEPiEEjT0_S5_S5_S5_S5_T_ ; std::__1::__sort5<bool (*&)(int,int),int *>(int *,int *,int *,int *,int *,bool (*&)(int,int))
__text:0000000100002707                 mov     [rbp+var_1C4], eax
__text:000000010000270D                 jmp     loc_10000303D
__text:0000000100002712 ; ---------------------------------------------------------------------------
__text:0000000100002712
__text:0000000100002712 def_10000251C:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+61↑j
__text:0000000100002712                 cmp     [rbp+var_148], 1Eh ; jumptable 000000010000251C default case
__text:000000010000271D                 jg      loc_100002742
__text:0000000100002723                 mov     rdi, [rbp+var_128]
__text:000000010000272A                 mov     rsi, [rbp+var_130]
__text:0000000100002731                 mov     rdx, [rbp+var_138]
__text:0000000100002738                 call    j___ZNSt3__118__insertion_sort_3IRPFbiiEPiEEvT0_S5_T_ ; std::__1::__insertion_sort_3<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))
__text:000000010000273D                 jmp     loc_10000303D
__text:0000000100002742 ; ---------------------------------------------------------------------------
__text:0000000100002742
__text:0000000100002742 loc_100002742:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+27D↑j
__text:0000000100002742                 mov     rax, [rbp+var_128]
__text:0000000100002749                 mov     [rbp+var_150], rax
__text:0000000100002750                 mov     rax, [rbp+var_130]
__text:0000000100002757                 mov     [rbp+var_158], rax
__text:000000010000275E                 mov     rax, [rbp+var_158]
__text:0000000100002765                 add     rax, 0FFFFFFFFFFFFFFFCh
__text:000000010000276B                 mov     [rbp+var_158], rax
__text:0000000100002772                 cmp     [rbp+var_148], 3E8h
__text:000000010000277D                 jl      loc_100002847
__text:0000000100002783                 mov     rax, 2
__text:000000010000278D                 mov     rcx, [rbp+var_148]
__text:0000000100002794                 mov     [rbp+var_1D0], rax
__text:000000010000279B                 mov     rax, rcx
__text:000000010000279E                 cqo
__text:00000001000027A0                 mov     rcx, [rbp+var_1D0]
__text:00000001000027A7                 idiv    rcx
__text:00000001000027AA                 mov     [rbp+var_168], rax
__text:00000001000027B1                 mov     rax, [rbp+var_168]
__text:00000001000027B8                 mov     rdx, [rbp+var_150]
__text:00000001000027BF                 shl     rax, 2
__text:00000001000027C3                 add     rdx, rax
__text:00000001000027C6                 mov     [rbp+var_150], rdx
__text:00000001000027CD                 mov     rax, [rbp+var_168]
__text:00000001000027D4                 cqo
__text:00000001000027D6                 idiv    rcx
__text:00000001000027D9                 mov     [rbp+var_168], rax
__text:00000001000027E0                 mov     rdi, [rbp+var_128]
__text:00000001000027E7                 mov     rax, [rbp+var_128]
__text:00000001000027EE                 mov     rdx, [rbp+var_168]
__text:00000001000027F5                 shl     rdx, 2
__text:00000001000027F9                 add     rax, rdx
__text:00000001000027FC                 mov     rdx, [rbp+var_150]
__text:0000000100002803                 mov     rsi, [rbp+var_150]
__text:000000010000280A                 mov     r8, [rbp+var_168]
__text:0000000100002811                 shl     r8, 2
__text:0000000100002815                 add     rsi, r8
__text:0000000100002818                 mov     r8, [rbp+var_158]
__text:000000010000281F                 mov     r9, [rbp+var_138]
__text:0000000100002826                 mov     [rbp+var_1D8], rsi
__text:000000010000282D                 mov     rsi, rax
__text:0000000100002830                 mov     rcx, [rbp+var_1D8]
__text:0000000100002837                 call    j___ZNSt3__17__sort5IRPFbiiEPiEEjT0_S5_S5_S5_S5_T_ ; std::__1::__sort5<bool (*&)(int,int),int *>(int *,int *,int *,int *,int *,bool (*&)(int,int))
__text:000000010000283C                 mov     [rbp+var_15C], eax
__text:0000000100002842                 jmp     loc_1000028B8
__text:0000000100002847 ; ---------------------------------------------------------------------------
__text:0000000100002847
__text:0000000100002847 loc_100002847:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+2DD↑j
__text:0000000100002847                 mov     rax, 2
__text:0000000100002851                 mov     rcx, [rbp+var_148]
__text:0000000100002858                 mov     [rbp+var_1E0], rax
__text:000000010000285F                 mov     rax, rcx
__text:0000000100002862                 cqo
__text:0000000100002864                 mov     rcx, [rbp+var_1E0]
__text:000000010000286B                 idiv    rcx
__text:000000010000286E                 mov     [rbp+var_168], rax
__text:0000000100002875                 mov     rax, [rbp+var_168]
__text:000000010000287C                 mov     rdx, [rbp+var_150]
__text:0000000100002883                 shl     rax, 2
__text:0000000100002887                 add     rdx, rax
__text:000000010000288A                 mov     [rbp+var_150], rdx
__text:0000000100002891                 mov     rdi, [rbp+var_128]
__text:0000000100002898                 mov     rsi, [rbp+var_150]
__text:000000010000289F                 mov     rdx, [rbp+var_158]
__text:00000001000028A6                 mov     rcx, [rbp+var_138]
__text:00000001000028AD                 call    j___ZNSt3__17__sort3IRPFbiiEPiEEjT0_S5_S5_T_ ; std::__1::__sort3<bool (*&)(int,int),int *>(int *,int *,int *,bool (*&)(int,int))
__text:00000001000028B2                 mov     [rbp+var_15C], eax
__text:00000001000028B8
__text:00000001000028B8 loc_1000028B8:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+3A2↑j
__text:00000001000028B8                 mov     rax, [rbp+var_128]
__text:00000001000028BF                 mov     [rbp+var_170], rax
__text:00000001000028C6                 mov     rax, [rbp+var_158]
__text:00000001000028CD                 mov     [rbp+var_178], rax
__text:00000001000028D4                 mov     rax, [rbp+var_138]
__text:00000001000028DB                 mov     rax, [rax]
__text:00000001000028DE                 mov     rcx, [rbp+var_170]
__text:00000001000028E5                 mov     edi, [rcx]
__text:00000001000028E7                 mov     rcx, [rbp+var_150]
__text:00000001000028EE                 mov     esi, [rcx]
__text:00000001000028F0                 call    rax
__text:00000001000028F2                 test    al, 1
__text:00000001000028F4                 jnz     loc_100002CB3
__text:00000001000028FA                 jmp     $+5
__text:00000001000028FF ; ---------------------------------------------------------------------------
__text:00000001000028FF
__text:00000001000028FF loc_1000028FF:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+45A↑j
__text:00000001000028FF                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int)):loc_100002CA9↓j
__text:00000001000028FF                 mov     rax, [rbp+var_170]
__text:0000000100002906                 mov     rcx, [rbp+var_178]
__text:000000010000290D                 add     rcx, 0FFFFFFFFFFFFFFFCh
__text:0000000100002914                 mov     [rbp+var_178], rcx
__text:000000010000291B                 cmp     rax, rcx
__text:000000010000291E                 jnz     loc_100002C09
__text:0000000100002924                 mov     rax, [rbp+var_170]
__text:000000010000292B                 add     rax, 4
__text:0000000100002931                 mov     [rbp+var_170], rax
__text:0000000100002938                 mov     rax, [rbp+var_130]
__text:000000010000293F                 mov     [rbp+var_178], rax
__text:0000000100002946                 mov     rax, [rbp+var_138]
__text:000000010000294D                 mov     rax, [rax]
__text:0000000100002950                 mov     rcx, [rbp+var_128]
__text:0000000100002957                 mov     edi, [rcx]
__text:0000000100002959                 mov     rcx, [rbp+var_178]
__text:0000000100002960                 mov     rdx, rcx
__text:0000000100002963                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:000000010000296A                 mov     [rbp+var_178], rdx
__text:0000000100002971                 mov     esi, [rcx-4]
__text:0000000100002974                 call    rax
__text:0000000100002976                 test    al, 1
__text:0000000100002978                 jnz     loc_100002A89
__text:000000010000297E                 jmp     $+5
__text:0000000100002983 ; ---------------------------------------------------------------------------
__text:0000000100002983
__text:0000000100002983 loc_100002983:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+4DE↑j
__text:0000000100002983                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+5DF↓j
__text:0000000100002983                 mov     rax, [rbp+var_170]
__text:000000010000298A                 cmp     rax, [rbp+var_178]
__text:0000000100002991                 jnz     loc_10000299C
__text:0000000100002997                 jmp     loc_10000303D
__text:000000010000299C ; ---------------------------------------------------------------------------
__text:000000010000299C
__text:000000010000299C loc_10000299C:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+4F1↑j
__text:000000010000299C                 mov     rax, [rbp+var_138]
__text:00000001000029A3                 mov     rax, [rax]
__text:00000001000029A6                 mov     rcx, [rbp+var_128]
__text:00000001000029AD                 mov     edi, [rcx]
__text:00000001000029AF                 mov     rcx, [rbp+var_170]
__text:00000001000029B6                 mov     esi, [rcx]
__text:00000001000029B8                 call    rax
__text:00000001000029BA                 test    al, 1
__text:00000001000029BC                 jnz     loc_1000029C7
__text:00000001000029C2                 jmp     loc_100002A6B
__text:00000001000029C7 ; ---------------------------------------------------------------------------
__text:00000001000029C7
__text:00000001000029C7 loc_1000029C7:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+51C↑j
__text:00000001000029C7                 lea     rax, [rbp+var_EC]
__text:00000001000029CE                 mov     rcx, [rbp+var_170]
__text:00000001000029D5                 mov     rdx, [rbp+var_178]
__text:00000001000029DC                 mov     [rbp+var_E0], rcx
__text:00000001000029E3                 mov     [rbp+var_E8], rdx
__text:00000001000029EA                 mov     rcx, [rbp+var_E0]
__text:00000001000029F1                 mov     [rbp+var_D8], rcx
__text:00000001000029F8                 mov     rcx, [rbp+var_D8]
__text:00000001000029FF                 mov     esi, [rcx]
__text:0000000100002A01                 mov     [rbp+var_EC], esi
__text:0000000100002A07                 mov     rcx, [rbp+var_E8]
__text:0000000100002A0E                 mov     [rbp+var_C8], rcx
__text:0000000100002A15                 mov     rcx, [rbp+var_C8]
__text:0000000100002A1C                 mov     esi, [rcx]
__text:0000000100002A1E                 mov     rcx, [rbp+var_E0]
__text:0000000100002A25                 mov     [rcx], esi
__text:0000000100002A27                 mov     [rbp+var_D0], rax
__text:0000000100002A2E                 mov     rax, [rbp+var_D0]
__text:0000000100002A35                 mov     esi, [rax]
__text:0000000100002A37                 mov     rax, [rbp+var_E8]
__text:0000000100002A3E                 mov     [rax], esi
__text:0000000100002A40                 mov     esi, [rbp+var_15C]
__text:0000000100002A46                 add     esi, 1
__text:0000000100002A4C                 mov     [rbp+var_15C], esi
__text:0000000100002A52                 mov     rax, [rbp+var_170]
__text:0000000100002A59                 add     rax, 4
__text:0000000100002A5F                 mov     [rbp+var_170], rax
__text:0000000100002A66                 jmp     loc_100002A84
__text:0000000100002A6B ; ---------------------------------------------------------------------------
__text:0000000100002A6B
__text:0000000100002A6B loc_100002A6B:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+522↑j
__text:0000000100002A6B                 mov     rax, [rbp+var_170]
__text:0000000100002A72                 add     rax, 4
__text:0000000100002A78                 mov     [rbp+var_170], rax
__text:0000000100002A7F                 jmp     loc_100002983
__text:0000000100002A84 ; ---------------------------------------------------------------------------
__text:0000000100002A84
__text:0000000100002A84 loc_100002A84:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+5C6↑j
__text:0000000100002A84                 jmp     $+5
__text:0000000100002A89 ; ---------------------------------------------------------------------------
__text:0000000100002A89
__text:0000000100002A89 loc_100002A89:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+4D8↑j
__text:0000000100002A89                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int)):loc_100002A84↑j
__text:0000000100002A89                 mov     rax, [rbp+var_170]
__text:0000000100002A90                 cmp     rax, [rbp+var_178]
__text:0000000100002A97                 jnz     loc_100002AA2
__text:0000000100002A9D                 jmp     loc_10000303D
__text:0000000100002AA2 ; ---------------------------------------------------------------------------
__text:0000000100002AA2
__text:0000000100002AA2 loc_100002AA2:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+5F7↑j
__text:0000000100002AA2                 jmp     $+5
__text:0000000100002AA7 ; ---------------------------------------------------------------------------
__text:0000000100002AA7
__text:0000000100002AA7 loc_100002AA7:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int)):loc_100002AA2↑j
__text:0000000100002AA7                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+751↓j
__text:0000000100002AA7                 jmp     $+5
__text:0000000100002AAC ; ---------------------------------------------------------------------------
__text:0000000100002AAC
__text:0000000100002AAC loc_100002AAC:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int)):loc_100002AA7↑j
__text:0000000100002AAC                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+64D↓j
__text:0000000100002AAC                 mov     rax, [rbp+var_138]
__text:0000000100002AB3                 mov     rax, [rax]
__text:0000000100002AB6                 mov     rcx, [rbp+var_128]
__text:0000000100002ABD                 mov     edi, [rcx]
__text:0000000100002ABF                 mov     rcx, [rbp+var_170]
__text:0000000100002AC6                 mov     esi, [rcx]
__text:0000000100002AC8                 call    rax
__text:0000000100002ACA                 xor     al, 1
__text:0000000100002ACC                 test    al, 1
__text:0000000100002ACE                 jnz     loc_100002AD9
__text:0000000100002AD4                 jmp     loc_100002AF2
__text:0000000100002AD9 ; ---------------------------------------------------------------------------
__text:0000000100002AD9
__text:0000000100002AD9 loc_100002AD9:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+62E↑j
__text:0000000100002AD9                 mov     rax, [rbp+var_170]
__text:0000000100002AE0                 add     rax, 4
__text:0000000100002AE6                 mov     [rbp+var_170], rax
__text:0000000100002AED                 jmp     loc_100002AAC
__text:0000000100002AF2 ; ---------------------------------------------------------------------------
__text:0000000100002AF2
__text:0000000100002AF2 loc_100002AF2:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+634↑j
__text:0000000100002AF2                 jmp     $+5
__text:0000000100002AF7 ; ---------------------------------------------------------------------------
__text:0000000100002AF7
__text:0000000100002AF7 loc_100002AF7:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int)):loc_100002AF2↑j
__text:0000000100002AF7                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int)):loc_100002B34↓j
__text:0000000100002AF7                 mov     rax, [rbp+var_138]
__text:0000000100002AFE                 mov     rax, [rax]
__text:0000000100002B01                 mov     rcx, [rbp+var_128]
__text:0000000100002B08                 mov     edi, [rcx]
__text:0000000100002B0A                 mov     rcx, [rbp+var_178]
__text:0000000100002B11                 mov     rdx, rcx
__text:0000000100002B14                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:0000000100002B1B                 mov     [rbp+var_178], rdx
__text:0000000100002B22                 mov     esi, [rcx-4]
__text:0000000100002B25                 call    rax
__text:0000000100002B27                 test    al, 1
__text:0000000100002B29                 jnz     loc_100002B34
__text:0000000100002B2F                 jmp     loc_100002B39
__text:0000000100002B34 ; ---------------------------------------------------------------------------
__text:0000000100002B34
__text:0000000100002B34 loc_100002B34:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+689↑j
__text:0000000100002B34                 jmp     loc_100002AF7
__text:0000000100002B39 ; ---------------------------------------------------------------------------
__text:0000000100002B39
__text:0000000100002B39 loc_100002B39:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+68F↑j
__text:0000000100002B39                 mov     rax, [rbp+var_170]
__text:0000000100002B40                 cmp     rax, [rbp+var_178]
__text:0000000100002B47                 jb      loc_100002B52
__text:0000000100002B4D                 jmp     loc_100002BF6
__text:0000000100002B52 ; ---------------------------------------------------------------------------
__text:0000000100002B52
__text:0000000100002B52 loc_100002B52:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+6A7↑j
__text:0000000100002B52                 lea     rax, [rbp+var_BC]
__text:0000000100002B59                 mov     rcx, [rbp+var_170]
__text:0000000100002B60                 mov     rdx, [rbp+var_178]
__text:0000000100002B67                 mov     [rbp+var_B0], rcx
__text:0000000100002B6E                 mov     [rbp+var_B8], rdx
__text:0000000100002B75                 mov     rcx, [rbp+var_B0]
__text:0000000100002B7C                 mov     [rbp+var_A8], rcx
__text:0000000100002B83                 mov     rcx, [rbp+var_A8]
__text:0000000100002B8A                 mov     esi, [rcx]
__text:0000000100002B8C                 mov     [rbp+var_BC], esi
__text:0000000100002B92                 mov     rcx, [rbp+var_B8]
__text:0000000100002B99                 mov     [rbp+var_98], rcx
__text:0000000100002BA0                 mov     rcx, [rbp+var_98]
__text:0000000100002BA7                 mov     esi, [rcx]
__text:0000000100002BA9                 mov     rcx, [rbp+var_B0]
__text:0000000100002BB0                 mov     [rcx], esi
__text:0000000100002BB2                 mov     [rbp+var_A0], rax
__text:0000000100002BB9                 mov     rax, [rbp+var_A0]
__text:0000000100002BC0                 mov     esi, [rax]
__text:0000000100002BC2                 mov     rax, [rbp+var_B8]
__text:0000000100002BC9                 mov     [rax], esi
__text:0000000100002BCB                 mov     esi, [rbp+var_15C]
__text:0000000100002BD1                 add     esi, 1
__text:0000000100002BD7                 mov     [rbp+var_15C], esi
__text:0000000100002BDD                 mov     rax, [rbp+var_170]
__text:0000000100002BE4                 add     rax, 4
__text:0000000100002BEA                 mov     [rbp+var_170], rax
__text:0000000100002BF1                 jmp     loc_100002AA7
__text:0000000100002BF6 ; ---------------------------------------------------------------------------
__text:0000000100002BF6
__text:0000000100002BF6 loc_100002BF6:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+6AD↑j
__text:0000000100002BF6                 mov     rax, [rbp+var_170]
__text:0000000100002BFD                 mov     [rbp+var_128], rax
__text:0000000100002C04                 jmp     loc_1000024D0
__text:0000000100002C09 ; ---------------------------------------------------------------------------
__text:0000000100002C09
__text:0000000100002C09 loc_100002C09:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+47E↑j
__text:0000000100002C09                 mov     rax, [rbp+var_138]
__text:0000000100002C10                 mov     rax, [rax]
__text:0000000100002C13                 mov     rcx, [rbp+var_178]
__text:0000000100002C1A                 mov     edi, [rcx]
__text:0000000100002C1C                 mov     rcx, [rbp+var_150]
__text:0000000100002C23                 mov     esi, [rcx]
__text:0000000100002C25                 call    rax
__text:0000000100002C27                 test    al, 1
__text:0000000100002C29                 jnz     loc_100002C34
__text:0000000100002C2F                 jmp     loc_100002CA9
__text:0000000100002C34 ; ---------------------------------------------------------------------------
__text:0000000100002C34
__text:0000000100002C34 loc_100002C34:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+789↑j
__text:0000000100002C34                 lea     rax, [rbp+var_8C]
__text:0000000100002C3B                 mov     rcx, [rbp+var_170]
__text:0000000100002C42                 mov     rdx, [rbp+var_178]
__text:0000000100002C49                 mov     [rbp+var_80], rcx
__text:0000000100002C4D                 mov     [rbp+var_88], rdx
__text:0000000100002C54                 mov     rcx, [rbp+var_80]
__text:0000000100002C58                 mov     [rbp+var_78], rcx
__text:0000000100002C5C                 mov     rcx, [rbp+var_78]
__text:0000000100002C60                 mov     esi, [rcx]
__text:0000000100002C62                 mov     [rbp+var_8C], esi
__text:0000000100002C68                 mov     rcx, [rbp+var_88]
__text:0000000100002C6F                 mov     [rbp+var_68], rcx
__text:0000000100002C73                 mov     rcx, [rbp+var_68]
__text:0000000100002C77                 mov     esi, [rcx]
__text:0000000100002C79                 mov     rcx, [rbp+var_80]
__text:0000000100002C7D                 mov     [rcx], esi
__text:0000000100002C7F                 mov     [rbp+var_70], rax
__text:0000000100002C83                 mov     rax, [rbp+var_70]
__text:0000000100002C87                 mov     esi, [rax]
__text:0000000100002C89                 mov     rax, [rbp+var_88]
__text:0000000100002C90                 mov     [rax], esi
__text:0000000100002C92                 mov     esi, [rbp+var_15C]
__text:0000000100002C98                 add     esi, 1
__text:0000000100002C9E                 mov     [rbp+var_15C], esi
__text:0000000100002CA4                 jmp     loc_100002CAE
__text:0000000100002CA9 ; ---------------------------------------------------------------------------
__text:0000000100002CA9
__text:0000000100002CA9 loc_100002CA9:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+78F↑j
__text:0000000100002CA9                 jmp     loc_1000028FF
__text:0000000100002CAE ; ---------------------------------------------------------------------------
__text:0000000100002CAE
__text:0000000100002CAE loc_100002CAE:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+804↑j
__text:0000000100002CAE                 jmp     $+5
__text:0000000100002CB3 ; ---------------------------------------------------------------------------
__text:0000000100002CB3
__text:0000000100002CB3 loc_100002CB3:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+454↑j
__text:0000000100002CB3                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int)):loc_100002CAE↑j
__text:0000000100002CB3                 mov     rax, [rbp+var_170]
__text:0000000100002CBA                 add     rax, 4
__text:0000000100002CC0                 mov     [rbp+var_170], rax
__text:0000000100002CC7                 mov     rax, [rbp+var_170]
__text:0000000100002CCE                 cmp     rax, [rbp+var_178]
__text:0000000100002CD5                 jnb     loc_100002E2C
__text:0000000100002CDB                 jmp     $+5
__text:0000000100002CE0 ; ---------------------------------------------------------------------------
__text:0000000100002CE0
__text:0000000100002CE0 loc_100002CE0:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+83B↑j
__text:0000000100002CE0                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+982↓j
__text:0000000100002CE0                 jmp     $+5
__text:0000000100002CE5 ; ---------------------------------------------------------------------------
__text:0000000100002CE5
__text:0000000100002CE5 loc_100002CE5:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int)):loc_100002CE0↑j
__text:0000000100002CE5                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+884↓j
__text:0000000100002CE5                 mov     rax, [rbp+var_138]
__text:0000000100002CEC                 mov     rax, [rax]
__text:0000000100002CEF                 mov     rcx, [rbp+var_170]
__text:0000000100002CF6                 mov     edi, [rcx]
__text:0000000100002CF8                 mov     rcx, [rbp+var_150]
__text:0000000100002CFF                 mov     esi, [rcx]
__text:0000000100002D01                 call    rax
__text:0000000100002D03                 test    al, 1
__text:0000000100002D05                 jnz     loc_100002D10
__text:0000000100002D0B                 jmp     loc_100002D29
__text:0000000100002D10 ; ---------------------------------------------------------------------------
__text:0000000100002D10
__text:0000000100002D10 loc_100002D10:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+865↑j
__text:0000000100002D10                 mov     rax, [rbp+var_170]
__text:0000000100002D17                 add     rax, 4
__text:0000000100002D1D                 mov     [rbp+var_170], rax
__text:0000000100002D24                 jmp     loc_100002CE5
__text:0000000100002D29 ; ---------------------------------------------------------------------------
__text:0000000100002D29
__text:0000000100002D29 loc_100002D29:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+86B↑j
__text:0000000100002D29                 jmp     $+5
__text:0000000100002D2E ; ---------------------------------------------------------------------------
__text:0000000100002D2E
__text:0000000100002D2E loc_100002D2E:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int)):loc_100002D29↑j
__text:0000000100002D2E                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int)):loc_100002D6D↓j
__text:0000000100002D2E                 mov     rax, [rbp+var_138]
__text:0000000100002D35                 mov     rax, [rax]
__text:0000000100002D38                 mov     rcx, [rbp+var_178]
__text:0000000100002D3F                 mov     rdx, rcx
__text:0000000100002D42                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:0000000100002D49                 mov     [rbp+var_178], rdx
__text:0000000100002D50                 mov     edi, [rcx-4]
__text:0000000100002D53                 mov     rcx, [rbp+var_150]
__text:0000000100002D5A                 mov     esi, [rcx]
__text:0000000100002D5C                 call    rax
__text:0000000100002D5E                 xor     al, 1
__text:0000000100002D60                 test    al, 1
__text:0000000100002D62                 jnz     loc_100002D6D
__text:0000000100002D68                 jmp     loc_100002D72
__text:0000000100002D6D ; ---------------------------------------------------------------------------
__text:0000000100002D6D
__text:0000000100002D6D loc_100002D6D:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+8C2↑j
__text:0000000100002D6D                 jmp     loc_100002D2E
__text:0000000100002D72 ; ---------------------------------------------------------------------------
__text:0000000100002D72
__text:0000000100002D72 loc_100002D72:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+8C8↑j
__text:0000000100002D72                 mov     rax, [rbp+var_170]
__text:0000000100002D79                 cmp     rax, [rbp+var_178]
__text:0000000100002D80                 jbe     loc_100002D8B
__text:0000000100002D86                 jmp     loc_100002E27
__text:0000000100002D8B ; ---------------------------------------------------------------------------
__text:0000000100002D8B
__text:0000000100002D8B loc_100002D8B:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+8E0↑j
__text:0000000100002D8B                 lea     rax, [rbp+var_5C]
__text:0000000100002D8F                 mov     rcx, [rbp+var_170]
__text:0000000100002D96                 mov     rdx, [rbp+var_178]
__text:0000000100002D9D                 mov     [rbp+var_50], rcx
__text:0000000100002DA1                 mov     [rbp+var_58], rdx
__text:0000000100002DA5                 mov     rcx, [rbp+var_50]
__text:0000000100002DA9                 mov     [rbp+var_48], rcx
__text:0000000100002DAD                 mov     rcx, [rbp+var_48]
__text:0000000100002DB1                 mov     esi, [rcx]
__text:0000000100002DB3                 mov     [rbp+var_5C], esi
__text:0000000100002DB6                 mov     rcx, [rbp+var_58]
__text:0000000100002DBA                 mov     [rbp+var_38], rcx
__text:0000000100002DBE                 mov     rcx, [rbp+var_38]
__text:0000000100002DC2                 mov     esi, [rcx]
__text:0000000100002DC4                 mov     rcx, [rbp+var_50]
__text:0000000100002DC8                 mov     [rcx], esi
__text:0000000100002DCA                 mov     [rbp+var_40], rax
__text:0000000100002DCE                 mov     rax, [rbp+var_40]
__text:0000000100002DD2                 mov     esi, [rax]
__text:0000000100002DD4                 mov     rax, [rbp+var_58]
__text:0000000100002DD8                 mov     [rax], esi
__text:0000000100002DDA                 mov     esi, [rbp+var_15C]
__text:0000000100002DE0                 add     esi, 1
__text:0000000100002DE6                 mov     [rbp+var_15C], esi
__text:0000000100002DEC                 mov     rax, [rbp+var_150]
__text:0000000100002DF3                 cmp     rax, [rbp+var_170]
__text:0000000100002DFA                 jnz     loc_100002E0E
__text:0000000100002E00                 mov     rax, [rbp+var_178]
__text:0000000100002E07                 mov     [rbp+var_150], rax
__text:0000000100002E0E
__text:0000000100002E0E loc_100002E0E:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+95A↑j
__text:0000000100002E0E                 mov     rax, [rbp+var_170]
__text:0000000100002E15                 add     rax, 4
__text:0000000100002E1B                 mov     [rbp+var_170], rax
__text:0000000100002E22                 jmp     loc_100002CE0
__text:0000000100002E27 ; ---------------------------------------------------------------------------
__text:0000000100002E27
__text:0000000100002E27 loc_100002E27:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+8E6↑j
__text:0000000100002E27                 jmp     $+5
__text:0000000100002E2C ; ---------------------------------------------------------------------------
__text:0000000100002E2C
__text:0000000100002E2C loc_100002E2C:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+835↑j
__text:0000000100002E2C                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int)):loc_100002E27↑j
__text:0000000100002E2C                 mov     rax, [rbp+var_170]
__text:0000000100002E33                 cmp     rax, [rbp+var_150]
__text:0000000100002E3A                 jz      loc_100002ECC
__text:0000000100002E40                 mov     rax, [rbp+var_138]
__text:0000000100002E47                 mov     rax, [rax]
__text:0000000100002E4A                 mov     rcx, [rbp+var_150]
__text:0000000100002E51                 mov     edi, [rcx]
__text:0000000100002E53                 mov     rcx, [rbp+var_170]
__text:0000000100002E5A                 mov     esi, [rcx]
__text:0000000100002E5C                 call    rax
__text:0000000100002E5E                 test    al, 1
__text:0000000100002E60                 jnz     loc_100002E6B
__text:0000000100002E66                 jmp     loc_100002ECC
__text:0000000100002E6B ; ---------------------------------------------------------------------------
__text:0000000100002E6B
__text:0000000100002E6B loc_100002E6B:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+9C0↑j
__text:0000000100002E6B                 lea     rax, [rbp+var_2C]
__text:0000000100002E6F                 mov     rcx, [rbp+var_170]
__text:0000000100002E76                 mov     rdx, [rbp+var_150]
__text:0000000100002E7D                 mov     [rbp+var_20], rcx
__text:0000000100002E81                 mov     [rbp+var_28], rdx
__text:0000000100002E85                 mov     rcx, [rbp+var_20]
__text:0000000100002E89                 mov     [rbp+var_18], rcx
__text:0000000100002E8D                 mov     rcx, [rbp+var_18]
__text:0000000100002E91                 mov     esi, [rcx]
__text:0000000100002E93                 mov     [rbp+var_2C], esi
__text:0000000100002E96                 mov     rcx, [rbp+var_28]
__text:0000000100002E9A                 mov     [rbp+var_8], rcx
__text:0000000100002E9E                 mov     rcx, [rbp+var_8]
__text:0000000100002EA2                 mov     esi, [rcx]
__text:0000000100002EA4                 mov     rcx, [rbp+var_20]
__text:0000000100002EA8                 mov     [rcx], esi
__text:0000000100002EAA                 mov     [rbp+var_10], rax
__text:0000000100002EAE                 mov     rax, [rbp+var_10]
__text:0000000100002EB2                 mov     esi, [rax]
__text:0000000100002EB4                 mov     rax, [rbp+var_28]
__text:0000000100002EB8                 mov     [rax], esi
__text:0000000100002EBA                 mov     esi, [rbp+var_15C]
__text:0000000100002EC0                 add     esi, 1
__text:0000000100002EC6                 mov     [rbp+var_15C], esi
__text:0000000100002ECC
__text:0000000100002ECC loc_100002ECC:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+99A↑j
__text:0000000100002ECC                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+9C6↑j
__text:0000000100002ECC                 cmp     [rbp+var_15C], 0
__text:0000000100002ED6                 jnz     loc_100002F99
__text:0000000100002EDC                 mov     rdi, [rbp+var_128]
__text:0000000100002EE3                 mov     rsi, [rbp+var_170]
__text:0000000100002EEA                 mov     rdx, [rbp+var_138]
__text:0000000100002EF1                 call    j___ZNSt3__127__insertion_sort_incompleteIRPFbiiEPiEEbT0_S5_T_ ; std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))
__text:0000000100002EF6                 and     al, 1
__text:0000000100002EF8                 mov     [rbp+var_179], al
__text:0000000100002EFE                 mov     rdx, [rbp+var_170]
__text:0000000100002F05                 add     rdx, 4
__text:0000000100002F0C                 mov     rsi, [rbp+var_130]
__text:0000000100002F13                 mov     rdi, [rbp+var_138]
__text:0000000100002F1A                 mov     [rbp+var_1E8], rdi
__text:0000000100002F21                 mov     rdi, rdx
__text:0000000100002F24                 mov     rdx, [rbp+var_1E8]
__text:0000000100002F2B                 call    j___ZNSt3__127__insertion_sort_incompleteIRPFbiiEPiEEbT0_S5_T_ ; std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))
__text:0000000100002F30                 test    al, 1
__text:0000000100002F32                 jnz     loc_100002F3D
__text:0000000100002F38                 jmp     loc_100002F62
__text:0000000100002F3D ; ---------------------------------------------------------------------------
__text:0000000100002F3D
__text:0000000100002F3D loc_100002F3D:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+A92↑j
__text:0000000100002F3D                 test    [rbp+var_179], 1
__text:0000000100002F44                 jz      loc_100002F4F
__text:0000000100002F4A                 jmp     loc_10000303D
__text:0000000100002F4F ; ---------------------------------------------------------------------------
__text:0000000100002F4F
__text:0000000100002F4F loc_100002F4F:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+AA4↑j
__text:0000000100002F4F                 mov     rax, [rbp+var_170]
__text:0000000100002F56                 mov     [rbp+var_130], rax
__text:0000000100002F5D                 jmp     loc_1000024CB
__text:0000000100002F62 ; ---------------------------------------------------------------------------
__text:0000000100002F62
__text:0000000100002F62 loc_100002F62:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+A98↑j
__text:0000000100002F62                 test    [rbp+var_179], 1
__text:0000000100002F69                 jz      loc_100002F8F
__text:0000000100002F6F                 mov     rax, [rbp+var_170]
__text:0000000100002F76                 add     rax, 4
__text:0000000100002F7C                 mov     [rbp+var_170], rax
__text:0000000100002F83                 mov     [rbp+var_128], rax
__text:0000000100002F8A                 jmp     loc_1000024CB
__text:0000000100002F8F ; ---------------------------------------------------------------------------
__text:0000000100002F8F
__text:0000000100002F8F loc_100002F8F:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+AC9↑j
__text:0000000100002F8F                 jmp     $+5
__text:0000000100002F94 ; ---------------------------------------------------------------------------
__text:0000000100002F94
__text:0000000100002F94 loc_100002F94:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int)):loc_100002F8F↑j
__text:0000000100002F94                 jmp     $+5
__text:0000000100002F99 ; ---------------------------------------------------------------------------
__text:0000000100002F99
__text:0000000100002F99 loc_100002F99:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+A36↑j
__text:0000000100002F99                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int)):loc_100002F94↑j
__text:0000000100002F99                 mov     rax, [rbp+var_170]
__text:0000000100002FA0                 mov     rcx, [rbp+var_128]
__text:0000000100002FA7                 sub     rax, rcx
__text:0000000100002FAA                 sar     rax, 2
__text:0000000100002FAE                 mov     rcx, [rbp+var_130]
__text:0000000100002FB5                 mov     rdx, [rbp+var_170]
__text:0000000100002FBC                 sub     rcx, rdx
__text:0000000100002FBF                 sar     rcx, 2
__text:0000000100002FC3                 cmp     rax, rcx
__text:0000000100002FC6                 jge     loc_100003007
__text:0000000100002FCC                 mov     rdi, [rbp+var_128]
__text:0000000100002FD3                 mov     rsi, [rbp+var_170]
__text:0000000100002FDA                 mov     rdx, [rbp+var_138]
__text:0000000100002FE1                 call    __ZNSt3__16__sortIRPFbiiEPiEEvT0_S5_T_ ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))
__text:0000000100002FE6                 mov     rdx, [rbp+var_170]
__text:0000000100002FED                 add     rdx, 4
__text:0000000100002FF4                 mov     [rbp+var_170], rdx
__text:0000000100002FFB                 mov     [rbp+var_128], rdx
__text:0000000100003002                 jmp     loc_100003038
__text:0000000100003007 ; ---------------------------------------------------------------------------
__text:0000000100003007
__text:0000000100003007 loc_100003007:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+B26↑j
__text:0000000100003007                 mov     rax, [rbp+var_170]
__text:000000010000300E                 add     rax, 4
__text:0000000100003014                 mov     rsi, [rbp+var_130]
__text:000000010000301B                 mov     rdx, [rbp+var_138]
__text:0000000100003022                 mov     rdi, rax
__text:0000000100003025                 call    __ZNSt3__16__sortIRPFbiiEPiEEvT0_S5_T_ ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))
__text:000000010000302A                 mov     rax, [rbp+var_170]
__text:0000000100003031                 mov     [rbp+var_130], rax
__text:0000000100003038
__text:0000000100003038 loc_100003038:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+B62↑j
__text:0000000100003038                 jmp     loc_1000024CB
__text:000000010000303D ; ---------------------------------------------------------------------------
__text:000000010000303D
__text:000000010000303D loc_10000303D:                          ; CODE XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int)):loc_10000251E↑j
__text:000000010000303D                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int)):loc_1000025D9↑j ...
__text:000000010000303D                 add     rsp, 1F0h
__text:0000000100003044                 pop     rbp
__text:0000000100003045                 retn
__text:0000000100003045 __ZNSt3__16__sortIRPFbiiEPiEEvT0_S5_T_ endp
__text:0000000100003045
__text:0000000100003045 ; ---------------------------------------------------------------------------
__text:0000000100003046                 align 8
__text:0000000100003048 jpt_10000251C   dd offset loc_10000251E - 100003048h
__text:0000000100003048                                         ; DATA XREF: std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+67↑o
__text:0000000100003048                                         ; std::__1::__sort<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+75↑r
__text:0000000100003048                 dd offset loc_10000251E - 100003048h ; jump table for switch statement
__text:0000000100003048                 dd offset loc_100002523 - 100003048h
__text:0000000100003048                 dd offset loc_1000025DE - 100003048h
__text:0000000100003048                 dd offset loc_100002632 - 100003048h
__text:0000000100003048                 dd offset loc_100002694 - 100003048h
__text:0000000100003060
__text:0000000100003060 ; =============== S U B R O U T I N E =======================================
__text:0000000100003060
__text:0000000100003060 ; Attributes: bp-based frame
__text:0000000100003060
__text:0000000100003060 ; unsigned int std::__1::__sort3<bool (*&)(int, int), int *>(int *, int *, int *, bool (*&)(int, int))
__text:0000000100003060 __ZNSt3__17__sort3IRPFbiiEPiEEjT0_S5_S5_T_ proc near
__text:0000000100003060                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__17__sort3IRPFbiiEPiEEjT0_S5_S5_T__ptr↓o
__text:0000000100003060
__text:0000000100003060 var_114         = dword ptr -114h
__text:0000000100003060 var_110         = qword ptr -110h
__text:0000000100003060 var_108         = qword ptr -108h
__text:0000000100003060 var_100         = qword ptr -100h
__text:0000000100003060 var_F8          = qword ptr -0F8h
__text:0000000100003060 var_F0          = dword ptr -0F0h
__text:0000000100003060 var_EC          = dword ptr -0ECh
__text:0000000100003060 var_E8          = qword ptr -0E8h
__text:0000000100003060 var_E0          = qword ptr -0E0h
__text:0000000100003060 var_D8          = qword ptr -0D8h
__text:0000000100003060 var_D0          = qword ptr -0D0h
__text:0000000100003060 var_C8          = qword ptr -0C8h
__text:0000000100003060 var_BC          = dword ptr -0BCh
__text:0000000100003060 var_B8          = qword ptr -0B8h
__text:0000000100003060 var_B0          = qword ptr -0B0h
__text:0000000100003060 var_A8          = qword ptr -0A8h
__text:0000000100003060 var_A0          = qword ptr -0A0h
__text:0000000100003060 var_98          = qword ptr -98h
__text:0000000100003060 var_8C          = dword ptr -8Ch
__text:0000000100003060 var_88          = qword ptr -88h
__text:0000000100003060 var_80          = qword ptr -80h
__text:0000000100003060 var_78          = qword ptr -78h
__text:0000000100003060 var_70          = qword ptr -70h
__text:0000000100003060 var_68          = qword ptr -68h
__text:0000000100003060 var_5C          = dword ptr -5Ch
__text:0000000100003060 var_58          = qword ptr -58h
__text:0000000100003060 var_50          = qword ptr -50h
__text:0000000100003060 var_48          = qword ptr -48h
__text:0000000100003060 var_40          = qword ptr -40h
__text:0000000100003060 var_38          = qword ptr -38h
__text:0000000100003060 var_2C          = dword ptr -2Ch
__text:0000000100003060 var_28          = qword ptr -28h
__text:0000000100003060 var_20          = qword ptr -20h
__text:0000000100003060 var_18          = qword ptr -18h
__text:0000000100003060 var_10          = qword ptr -10h
__text:0000000100003060 var_8           = qword ptr -8
__text:0000000100003060
__text:0000000100003060                 push    rbp
__text:0000000100003061                 mov     rbp, rsp
__text:0000000100003064                 sub     rsp, 120h
__text:000000010000306B                 mov     [rbp+var_F8], rdi
__text:0000000100003072                 mov     [rbp+var_100], rsi
__text:0000000100003079                 mov     [rbp+var_108], rdx
__text:0000000100003080                 mov     [rbp+var_110], rcx
__text:0000000100003087                 mov     [rbp+var_114], 0
__text:0000000100003091                 mov     rcx, [rbp+var_110]
__text:0000000100003098                 mov     rcx, [rcx]
__text:000000010000309B                 mov     rdx, [rbp+var_100]
__text:00000001000030A2                 mov     edi, [rdx]
__text:00000001000030A4                 mov     rdx, [rbp+var_F8]
__text:00000001000030AB                 mov     esi, [rdx]
__text:00000001000030AD                 call    rcx
__text:00000001000030AF                 test    al, 1
__text:00000001000030B1                 jnz     loc_100003215
__text:00000001000030B7                 mov     rax, [rbp+var_110]
__text:00000001000030BE                 mov     rax, [rax]
__text:00000001000030C1                 mov     rcx, [rbp+var_108]
__text:00000001000030C8                 mov     edi, [rcx]
__text:00000001000030CA                 mov     rcx, [rbp+var_100]
__text:00000001000030D1                 mov     esi, [rcx]
__text:00000001000030D3                 call    rax
__text:00000001000030D5                 test    al, 1
__text:00000001000030D7                 jnz     loc_1000030EE
__text:00000001000030DD                 mov     eax, [rbp+var_114]
__text:00000001000030E3                 mov     [rbp+var_F0], eax
__text:00000001000030E9                 jmp     loc_1000033BD
__text:00000001000030EE ; ---------------------------------------------------------------------------
__text:00000001000030EE
__text:00000001000030EE loc_1000030EE:                          ; CODE XREF: std::__1::__sort3<bool (*&)(int,int),int *>(int *,int *,int *,bool (*&)(int,int))+77↑j
__text:00000001000030EE                 lea     rax, [rbp+var_EC]
__text:00000001000030F5                 mov     rcx, [rbp+var_100]
__text:00000001000030FC                 mov     rdx, [rbp+var_108]
__text:0000000100003103                 mov     [rbp+var_E0], rcx
__text:000000010000310A                 mov     [rbp+var_E8], rdx
__text:0000000100003111                 mov     rcx, [rbp+var_E0]
__text:0000000100003118                 mov     [rbp+var_D8], rcx
__text:000000010000311F                 mov     rcx, [rbp+var_D8]
__text:0000000100003126                 mov     esi, [rcx]
__text:0000000100003128                 mov     [rbp+var_EC], esi
__text:000000010000312E                 mov     rcx, [rbp+var_E8]
__text:0000000100003135                 mov     [rbp+var_C8], rcx
__text:000000010000313C                 mov     rcx, [rbp+var_C8]
__text:0000000100003143                 mov     esi, [rcx]
__text:0000000100003145                 mov     rcx, [rbp+var_E0]
__text:000000010000314C                 mov     [rcx], esi
__text:000000010000314E                 mov     [rbp+var_D0], rax
__text:0000000100003155                 mov     rax, [rbp+var_D0]
__text:000000010000315C                 mov     esi, [rax]
__text:000000010000315E                 mov     rax, [rbp+var_E8]
__text:0000000100003165                 mov     [rax], esi
__text:0000000100003167                 mov     [rbp+var_114], 1
__text:0000000100003171                 mov     rax, [rbp+var_110]
__text:0000000100003178                 mov     rax, [rax]
__text:000000010000317B                 mov     rcx, [rbp+var_100]
__text:0000000100003182                 mov     edi, [rcx]
__text:0000000100003184                 mov     rcx, [rbp+var_F8]
__text:000000010000318B                 mov     esi, [rcx]
__text:000000010000318D                 call    rax
__text:000000010000318F                 test    al, 1
__text:0000000100003191                 jnz     loc_10000319C
__text:0000000100003197                 jmp     loc_100003204
__text:000000010000319C ; ---------------------------------------------------------------------------
__text:000000010000319C
__text:000000010000319C loc_10000319C:                          ; CODE XREF: std::__1::__sort3<bool (*&)(int,int),int *>(int *,int *,int *,bool (*&)(int,int))+131↑j
__text:000000010000319C                 lea     rax, [rbp+var_8C]
__text:00000001000031A3                 mov     rcx, [rbp+var_F8]
__text:00000001000031AA                 mov     rdx, [rbp+var_100]
__text:00000001000031B1                 mov     [rbp+var_80], rcx
__text:00000001000031B5                 mov     [rbp+var_88], rdx
__text:00000001000031BC                 mov     rcx, [rbp+var_80]
__text:00000001000031C0                 mov     [rbp+var_78], rcx
__text:00000001000031C4                 mov     rcx, [rbp+var_78]
__text:00000001000031C8                 mov     esi, [rcx]
__text:00000001000031CA                 mov     [rbp+var_8C], esi
__text:00000001000031D0                 mov     rcx, [rbp+var_88]
__text:00000001000031D7                 mov     [rbp+var_68], rcx
__text:00000001000031DB                 mov     rcx, [rbp+var_68]
__text:00000001000031DF                 mov     esi, [rcx]
__text:00000001000031E1                 mov     rcx, [rbp+var_80]
__text:00000001000031E5                 mov     [rcx], esi
__text:00000001000031E7                 mov     [rbp+var_70], rax
__text:00000001000031EB                 mov     rax, [rbp+var_70]
__text:00000001000031EF                 mov     esi, [rax]
__text:00000001000031F1                 mov     rax, [rbp+var_88]
__text:00000001000031F8                 mov     [rax], esi
__text:00000001000031FA                 mov     [rbp+var_114], 2
__text:0000000100003204
__text:0000000100003204 loc_100003204:                          ; CODE XREF: std::__1::__sort3<bool (*&)(int,int),int *>(int *,int *,int *,bool (*&)(int,int))+137↑j
__text:0000000100003204                 mov     eax, [rbp+var_114]
__text:000000010000320A                 mov     [rbp+var_F0], eax
__text:0000000100003210                 jmp     loc_1000033BD
__text:0000000100003215 ; ---------------------------------------------------------------------------
__text:0000000100003215
__text:0000000100003215 loc_100003215:                          ; CODE XREF: std::__1::__sort3<bool (*&)(int,int),int *>(int *,int *,int *,bool (*&)(int,int))+51↑j
__text:0000000100003215                 mov     rax, [rbp+var_110]
__text:000000010000321C                 mov     rax, [rax]
__text:000000010000321F                 mov     rcx, [rbp+var_108]
__text:0000000100003226                 mov     edi, [rcx]
__text:0000000100003228                 mov     rcx, [rbp+var_100]
__text:000000010000322F                 mov     esi, [rcx]
__text:0000000100003231                 call    rax
__text:0000000100003233                 test    al, 1
__text:0000000100003235                 jnz     loc_100003240
__text:000000010000323B                 jmp     loc_1000032AA
__text:0000000100003240 ; ---------------------------------------------------------------------------
__text:0000000100003240
__text:0000000100003240 loc_100003240:                          ; CODE XREF: std::__1::__sort3<bool (*&)(int,int),int *>(int *,int *,int *,bool (*&)(int,int))+1D5↑j
__text:0000000100003240                 lea     rax, [rbp+var_2C]
__text:0000000100003244                 mov     rcx, [rbp+var_F8]
__text:000000010000324B                 mov     rdx, [rbp+var_108]
__text:0000000100003252                 mov     [rbp+var_20], rcx
__text:0000000100003256                 mov     [rbp+var_28], rdx
__text:000000010000325A                 mov     rcx, [rbp+var_20]
__text:000000010000325E                 mov     [rbp+var_18], rcx
__text:0000000100003262                 mov     rcx, [rbp+var_18]
__text:0000000100003266                 mov     esi, [rcx]
__text:0000000100003268                 mov     [rbp+var_2C], esi
__text:000000010000326B                 mov     rcx, [rbp+var_28]
__text:000000010000326F                 mov     [rbp+var_8], rcx
__text:0000000100003273                 mov     rcx, [rbp+var_8]
__text:0000000100003277                 mov     esi, [rcx]
__text:0000000100003279                 mov     rcx, [rbp+var_20]
__text:000000010000327D                 mov     [rcx], esi
__text:000000010000327F                 mov     [rbp+var_10], rax
__text:0000000100003283                 mov     rax, [rbp+var_10]
__text:0000000100003287                 mov     esi, [rax]
__text:0000000100003289                 mov     rax, [rbp+var_28]
__text:000000010000328D                 mov     [rax], esi
__text:000000010000328F                 mov     [rbp+var_114], 1
__text:0000000100003299                 mov     esi, [rbp+var_114]
__text:000000010000329F                 mov     [rbp+var_F0], esi
__text:00000001000032A5                 jmp     loc_1000033BD
__text:00000001000032AA ; ---------------------------------------------------------------------------
__text:00000001000032AA
__text:00000001000032AA loc_1000032AA:                          ; CODE XREF: std::__1::__sort3<bool (*&)(int,int),int *>(int *,int *,int *,bool (*&)(int,int))+1DB↑j
__text:00000001000032AA                 lea     rax, [rbp+var_5C]
__text:00000001000032AE                 mov     rcx, [rbp+var_F8]
__text:00000001000032B5                 mov     rdx, [rbp+var_100]
__text:00000001000032BC                 mov     [rbp+var_50], rcx
__text:00000001000032C0                 mov     [rbp+var_58], rdx
__text:00000001000032C4                 mov     rcx, [rbp+var_50]
__text:00000001000032C8                 mov     [rbp+var_48], rcx
__text:00000001000032CC                 mov     rcx, [rbp+var_48]
__text:00000001000032D0                 mov     esi, [rcx]
__text:00000001000032D2                 mov     [rbp+var_5C], esi
__text:00000001000032D5                 mov     rcx, [rbp+var_58]
__text:00000001000032D9                 mov     [rbp+var_38], rcx
__text:00000001000032DD                 mov     rcx, [rbp+var_38]
__text:00000001000032E1                 mov     esi, [rcx]
__text:00000001000032E3                 mov     rcx, [rbp+var_50]
__text:00000001000032E7                 mov     [rcx], esi
__text:00000001000032E9                 mov     [rbp+var_40], rax
__text:00000001000032ED                 mov     rax, [rbp+var_40]
__text:00000001000032F1                 mov     esi, [rax]
__text:00000001000032F3                 mov     rax, [rbp+var_58]
__text:00000001000032F7                 mov     [rax], esi
__text:00000001000032F9                 mov     [rbp+var_114], 1
__text:0000000100003303                 mov     rax, [rbp+var_110]
__text:000000010000330A                 mov     rax, [rax]
__text:000000010000330D                 mov     rcx, [rbp+var_108]
__text:0000000100003314                 mov     edi, [rcx]
__text:0000000100003316                 mov     rcx, [rbp+var_100]
__text:000000010000331D                 mov     esi, [rcx]
__text:000000010000331F                 call    rax
__text:0000000100003321                 test    al, 1
__text:0000000100003323                 jnz     loc_10000332E
__text:0000000100003329                 jmp     loc_1000033B1
__text:000000010000332E ; ---------------------------------------------------------------------------
__text:000000010000332E
__text:000000010000332E loc_10000332E:                          ; CODE XREF: std::__1::__sort3<bool (*&)(int,int),int *>(int *,int *,int *,bool (*&)(int,int))+2C3↑j
__text:000000010000332E                 lea     rax, [rbp+var_BC]
__text:0000000100003335                 mov     rcx, [rbp+var_100]
__text:000000010000333C                 mov     rdx, [rbp+var_108]
__text:0000000100003343                 mov     [rbp+var_B0], rcx
__text:000000010000334A                 mov     [rbp+var_B8], rdx
__text:0000000100003351                 mov     rcx, [rbp+var_B0]
__text:0000000100003358                 mov     [rbp+var_A8], rcx
__text:000000010000335F                 mov     rcx, [rbp+var_A8]
__text:0000000100003366                 mov     esi, [rcx]
__text:0000000100003368                 mov     [rbp+var_BC], esi
__text:000000010000336E                 mov     rcx, [rbp+var_B8]
__text:0000000100003375                 mov     [rbp+var_98], rcx
__text:000000010000337C                 mov     rcx, [rbp+var_98]
__text:0000000100003383                 mov     esi, [rcx]
__text:0000000100003385                 mov     rcx, [rbp+var_B0]
__text:000000010000338C                 mov     [rcx], esi
__text:000000010000338E                 mov     [rbp+var_A0], rax
__text:0000000100003395                 mov     rax, [rbp+var_A0]
__text:000000010000339C                 mov     esi, [rax]
__text:000000010000339E                 mov     rax, [rbp+var_B8]
__text:00000001000033A5                 mov     [rax], esi
__text:00000001000033A7                 mov     [rbp+var_114], 2
__text:00000001000033B1
__text:00000001000033B1 loc_1000033B1:                          ; CODE XREF: std::__1::__sort3<bool (*&)(int,int),int *>(int *,int *,int *,bool (*&)(int,int))+2C9↑j
__text:00000001000033B1                 mov     eax, [rbp+var_114]
__text:00000001000033B7                 mov     [rbp+var_F0], eax
__text:00000001000033BD
__text:00000001000033BD loc_1000033BD:                          ; CODE XREF: std::__1::__sort3<bool (*&)(int,int),int *>(int *,int *,int *,bool (*&)(int,int))+89↑j
__text:00000001000033BD                                         ; std::__1::__sort3<bool (*&)(int,int),int *>(int *,int *,int *,bool (*&)(int,int))+1B0↑j ...
__text:00000001000033BD                 mov     eax, [rbp+var_F0]
__text:00000001000033C3                 add     rsp, 120h
__text:00000001000033CA                 pop     rbp
__text:00000001000033CB                 retn
__text:00000001000033CB __ZNSt3__17__sort3IRPFbiiEPiEEjT0_S5_S5_T_ endp
__text:00000001000033CB
__text:00000001000033CB ; ---------------------------------------------------------------------------
__text:00000001000033CC                 align 10h
__text:00000001000033D0
__text:00000001000033D0 ; =============== S U B R O U T I N E =======================================
__text:00000001000033D0
__text:00000001000033D0 ; Attributes: bp-based frame
__text:00000001000033D0
__text:00000001000033D0 ; unsigned int std::__1::__sort4<bool (*&)(int, int), int *>(int *, int *, int *, int *, bool (*&)(int, int))
__text:00000001000033D0 __ZNSt3__17__sort4IRPFbiiEPiEEjT0_S5_S5_S5_T_ proc near
__text:00000001000033D0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__17__sort4IRPFbiiEPiEEjT0_S5_S5_S5_T__ptr↓o
__text:00000001000033D0
__text:00000001000033D0 var_BC          = dword ptr -0BCh
__text:00000001000033D0 var_B8          = qword ptr -0B8h
__text:00000001000033D0 var_B0          = qword ptr -0B0h
__text:00000001000033D0 var_A8          = qword ptr -0A8h
__text:00000001000033D0 var_A0          = qword ptr -0A0h
__text:00000001000033D0 var_98          = qword ptr -98h
__text:00000001000033D0 var_8C          = dword ptr -8Ch
__text:00000001000033D0 var_88          = qword ptr -88h
__text:00000001000033D0 var_80          = qword ptr -80h
__text:00000001000033D0 var_78          = qword ptr -78h
__text:00000001000033D0 var_70          = qword ptr -70h
__text:00000001000033D0 var_68          = qword ptr -68h
__text:00000001000033D0 var_5C          = dword ptr -5Ch
__text:00000001000033D0 var_58          = qword ptr -58h
__text:00000001000033D0 var_50          = qword ptr -50h
__text:00000001000033D0 var_48          = qword ptr -48h
__text:00000001000033D0 var_40          = qword ptr -40h
__text:00000001000033D0 var_38          = qword ptr -38h
__text:00000001000033D0 var_2C          = dword ptr -2Ch
__text:00000001000033D0 var_28          = qword ptr -28h
__text:00000001000033D0 var_20          = qword ptr -20h
__text:00000001000033D0 var_18          = qword ptr -18h
__text:00000001000033D0 var_10          = qword ptr -10h
__text:00000001000033D0 var_8           = qword ptr -8
__text:00000001000033D0
__text:00000001000033D0                 push    rbp
__text:00000001000033D1                 mov     rbp, rsp
__text:00000001000033D4                 sub     rsp, 0C0h
__text:00000001000033DB                 mov     [rbp+var_98], rdi
__text:00000001000033E2                 mov     [rbp+var_A0], rsi
__text:00000001000033E9                 mov     [rbp+var_A8], rdx
__text:00000001000033F0                 mov     [rbp+var_B0], rcx
__text:00000001000033F7                 mov     [rbp+var_B8], r8
__text:00000001000033FE                 mov     rdi, [rbp+var_98]
__text:0000000100003405                 mov     rsi, [rbp+var_A0]
__text:000000010000340C                 mov     rdx, [rbp+var_A8]
__text:0000000100003413                 mov     rcx, [rbp+var_B8]
__text:000000010000341A                 call    j___ZNSt3__17__sort3IRPFbiiEPiEEjT0_S5_S5_T_ ; std::__1::__sort3<bool (*&)(int,int),int *>(int *,int *,int *,bool (*&)(int,int))
__text:000000010000341F                 mov     [rbp+var_BC], eax
__text:0000000100003425                 mov     rcx, [rbp+var_B8]
__text:000000010000342C                 mov     rcx, [rcx]
__text:000000010000342F                 mov     rdx, [rbp+var_B0]
__text:0000000100003436                 mov     edi, [rdx]
__text:0000000100003438                 mov     rdx, [rbp+var_A8]
__text:000000010000343F                 mov     esi, [rdx]
__text:0000000100003441                 call    rcx
__text:0000000100003443                 test    al, 1
__text:0000000100003445                 jnz     loc_100003450
__text:000000010000344B                 jmp     loc_1000035E2
__text:0000000100003450 ; ---------------------------------------------------------------------------
__text:0000000100003450
__text:0000000100003450 loc_100003450:                          ; CODE XREF: std::__1::__sort4<bool (*&)(int,int),int *>(int *,int *,int *,int *,bool (*&)(int,int))+75↑j
__text:0000000100003450                 lea     rax, [rbp+var_8C]
__text:0000000100003457                 mov     rcx, [rbp+var_A8]
__text:000000010000345E                 mov     rdx, [rbp+var_B0]
__text:0000000100003465                 mov     [rbp+var_80], rcx
__text:0000000100003469                 mov     [rbp+var_88], rdx
__text:0000000100003470                 mov     rcx, [rbp+var_80]
__text:0000000100003474                 mov     [rbp+var_78], rcx
__text:0000000100003478                 mov     rcx, [rbp+var_78]
__text:000000010000347C                 mov     esi, [rcx]
__text:000000010000347E                 mov     [rbp+var_8C], esi
__text:0000000100003484                 mov     rcx, [rbp+var_88]
__text:000000010000348B                 mov     [rbp+var_68], rcx
__text:000000010000348F                 mov     rcx, [rbp+var_68]
__text:0000000100003493                 mov     esi, [rcx]
__text:0000000100003495                 mov     rcx, [rbp+var_80]
__text:0000000100003499                 mov     [rcx], esi
__text:000000010000349B                 mov     [rbp+var_70], rax
__text:000000010000349F                 mov     rax, [rbp+var_70]
__text:00000001000034A3                 mov     esi, [rax]
__text:00000001000034A5                 mov     rax, [rbp+var_88]
__text:00000001000034AC                 mov     [rax], esi
__text:00000001000034AE                 mov     esi, [rbp+var_BC]
__text:00000001000034B4                 add     esi, 1
__text:00000001000034BA                 mov     [rbp+var_BC], esi
__text:00000001000034C0                 mov     rax, [rbp+var_B8]
__text:00000001000034C7                 mov     rax, [rax]
__text:00000001000034CA                 mov     rcx, [rbp+var_A8]
__text:00000001000034D1                 mov     edi, [rcx]
__text:00000001000034D3                 mov     rcx, [rbp+var_A0]
__text:00000001000034DA                 mov     esi, [rcx]
__text:00000001000034DC                 call    rax
__text:00000001000034DE                 test    al, 1
__text:00000001000034E0                 jnz     loc_1000034EB
__text:00000001000034E6                 jmp     loc_1000035DD
__text:00000001000034EB ; ---------------------------------------------------------------------------
__text:00000001000034EB
__text:00000001000034EB loc_1000034EB:                          ; CODE XREF: std::__1::__sort4<bool (*&)(int,int),int *>(int *,int *,int *,int *,bool (*&)(int,int))+110↑j
__text:00000001000034EB                 lea     rax, [rbp+var_2C]
__text:00000001000034EF                 mov     rcx, [rbp+var_A0]
__text:00000001000034F6                 mov     rdx, [rbp+var_A8]
__text:00000001000034FD                 mov     [rbp+var_20], rcx
__text:0000000100003501                 mov     [rbp+var_28], rdx
__text:0000000100003505                 mov     rcx, [rbp+var_20]
__text:0000000100003509                 mov     [rbp+var_18], rcx
__text:000000010000350D                 mov     rcx, [rbp+var_18]
__text:0000000100003511                 mov     esi, [rcx]
__text:0000000100003513                 mov     [rbp+var_2C], esi
__text:0000000100003516                 mov     rcx, [rbp+var_28]
__text:000000010000351A                 mov     [rbp+var_8], rcx
__text:000000010000351E                 mov     rcx, [rbp+var_8]
__text:0000000100003522                 mov     esi, [rcx]
__text:0000000100003524                 mov     rcx, [rbp+var_20]
__text:0000000100003528                 mov     [rcx], esi
__text:000000010000352A                 mov     [rbp+var_10], rax
__text:000000010000352E                 mov     rax, [rbp+var_10]
__text:0000000100003532                 mov     esi, [rax]
__text:0000000100003534                 mov     rax, [rbp+var_28]
__text:0000000100003538                 mov     [rax], esi
__text:000000010000353A                 mov     esi, [rbp+var_BC]
__text:0000000100003540                 add     esi, 1
__text:0000000100003546                 mov     [rbp+var_BC], esi
__text:000000010000354C                 mov     rax, [rbp+var_B8]
__text:0000000100003553                 mov     rax, [rax]
__text:0000000100003556                 mov     rcx, [rbp+var_A0]
__text:000000010000355D                 mov     edi, [rcx]
__text:000000010000355F                 mov     rcx, [rbp+var_98]
__text:0000000100003566                 mov     esi, [rcx]
__text:0000000100003568                 call    rax
__text:000000010000356A                 test    al, 1
__text:000000010000356C                 jnz     loc_100003577
__text:0000000100003572                 jmp     loc_1000035D8
__text:0000000100003577 ; ---------------------------------------------------------------------------
__text:0000000100003577
__text:0000000100003577 loc_100003577:                          ; CODE XREF: std::__1::__sort4<bool (*&)(int,int),int *>(int *,int *,int *,int *,bool (*&)(int,int))+19C↑j
__text:0000000100003577                 lea     rax, [rbp+var_5C]
__text:000000010000357B                 mov     rcx, [rbp+var_98]
__text:0000000100003582                 mov     rdx, [rbp+var_A0]
__text:0000000100003589                 mov     [rbp+var_50], rcx
__text:000000010000358D                 mov     [rbp+var_58], rdx
__text:0000000100003591                 mov     rcx, [rbp+var_50]
__text:0000000100003595                 mov     [rbp+var_48], rcx
__text:0000000100003599                 mov     rcx, [rbp+var_48]
__text:000000010000359D                 mov     esi, [rcx]
__text:000000010000359F                 mov     [rbp+var_5C], esi
__text:00000001000035A2                 mov     rcx, [rbp+var_58]
__text:00000001000035A6                 mov     [rbp+var_38], rcx
__text:00000001000035AA                 mov     rcx, [rbp+var_38]
__text:00000001000035AE                 mov     esi, [rcx]
__text:00000001000035B0                 mov     rcx, [rbp+var_50]
__text:00000001000035B4                 mov     [rcx], esi
__text:00000001000035B6                 mov     [rbp+var_40], rax
__text:00000001000035BA                 mov     rax, [rbp+var_40]
__text:00000001000035BE                 mov     esi, [rax]
__text:00000001000035C0                 mov     rax, [rbp+var_58]
__text:00000001000035C4                 mov     [rax], esi
__text:00000001000035C6                 mov     esi, [rbp+var_BC]
__text:00000001000035CC                 add     esi, 1
__text:00000001000035D2                 mov     [rbp+var_BC], esi
__text:00000001000035D8
__text:00000001000035D8 loc_1000035D8:                          ; CODE XREF: std::__1::__sort4<bool (*&)(int,int),int *>(int *,int *,int *,int *,bool (*&)(int,int))+1A2↑j
__text:00000001000035D8                 jmp     $+5
__text:00000001000035DD ; ---------------------------------------------------------------------------
__text:00000001000035DD
__text:00000001000035DD loc_1000035DD:                          ; CODE XREF: std::__1::__sort4<bool (*&)(int,int),int *>(int *,int *,int *,int *,bool (*&)(int,int))+116↑j
__text:00000001000035DD                                         ; std::__1::__sort4<bool (*&)(int,int),int *>(int *,int *,int *,int *,bool (*&)(int,int)):loc_1000035D8↑j
__text:00000001000035DD                 jmp     $+5
__text:00000001000035E2 ; ---------------------------------------------------------------------------
__text:00000001000035E2
__text:00000001000035E2 loc_1000035E2:                          ; CODE XREF: std::__1::__sort4<bool (*&)(int,int),int *>(int *,int *,int *,int *,bool (*&)(int,int))+7B↑j
__text:00000001000035E2                                         ; std::__1::__sort4<bool (*&)(int,int),int *>(int *,int *,int *,int *,bool (*&)(int,int)):loc_1000035DD↑j
__text:00000001000035E2                 mov     eax, [rbp+var_BC]
__text:00000001000035E8                 add     rsp, 0C0h
__text:00000001000035EF                 pop     rbp
__text:00000001000035F0                 retn
__text:00000001000035F0 __ZNSt3__17__sort4IRPFbiiEPiEEjT0_S5_S5_S5_T_ endp
__text:00000001000035F0
__text:00000001000035F0 ; ---------------------------------------------------------------------------
__text:00000001000035F1                 align 20h
__text:0000000100003600
__text:0000000100003600 ; =============== S U B R O U T I N E =======================================
__text:0000000100003600
__text:0000000100003600 ; Attributes: bp-based frame
__text:0000000100003600
__text:0000000100003600 ; unsigned int std::__1::__sort5<bool (*&)(int, int), int *>(int *, int *, int *, int *, int *, bool (*&)(int, int))
__text:0000000100003600 __ZNSt3__17__sort5IRPFbiiEPiEEjT0_S5_S5_S5_S5_T_ proc near
__text:0000000100003600                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__17__sort5IRPFbiiEPiEEjT0_S5_S5_S5_S5_T__ptr↓o
__text:0000000100003600
__text:0000000100003600 var_F4          = dword ptr -0F4h
__text:0000000100003600 var_F0          = qword ptr -0F0h
__text:0000000100003600 var_E8          = qword ptr -0E8h
__text:0000000100003600 var_E0          = qword ptr -0E0h
__text:0000000100003600 var_D8          = qword ptr -0D8h
__text:0000000100003600 var_D0          = qword ptr -0D0h
__text:0000000100003600 var_C8          = qword ptr -0C8h
__text:0000000100003600 var_BC          = dword ptr -0BCh
__text:0000000100003600 var_B8          = qword ptr -0B8h
__text:0000000100003600 var_B0          = qword ptr -0B0h
__text:0000000100003600 var_A8          = qword ptr -0A8h
__text:0000000100003600 var_A0          = qword ptr -0A0h
__text:0000000100003600 var_98          = qword ptr -98h
__text:0000000100003600 var_8C          = dword ptr -8Ch
__text:0000000100003600 var_88          = qword ptr -88h
__text:0000000100003600 var_80          = qword ptr -80h
__text:0000000100003600 var_78          = qword ptr -78h
__text:0000000100003600 var_70          = qword ptr -70h
__text:0000000100003600 var_68          = qword ptr -68h
__text:0000000100003600 var_5C          = dword ptr -5Ch
__text:0000000100003600 var_58          = qword ptr -58h
__text:0000000100003600 var_50          = qword ptr -50h
__text:0000000100003600 var_48          = qword ptr -48h
__text:0000000100003600 var_40          = qword ptr -40h
__text:0000000100003600 var_38          = qword ptr -38h
__text:0000000100003600 var_2C          = dword ptr -2Ch
__text:0000000100003600 var_28          = qword ptr -28h
__text:0000000100003600 var_20          = qword ptr -20h
__text:0000000100003600 var_18          = qword ptr -18h
__text:0000000100003600 var_10          = qword ptr -10h
__text:0000000100003600 var_8           = qword ptr -8
__text:0000000100003600
__text:0000000100003600                 push    rbp
__text:0000000100003601                 mov     rbp, rsp
__text:0000000100003604                 sub     rsp, 100h
__text:000000010000360B                 mov     [rbp+var_C8], rdi
__text:0000000100003612                 mov     [rbp+var_D0], rsi
__text:0000000100003619                 mov     [rbp+var_D8], rdx
__text:0000000100003620                 mov     [rbp+var_E0], rcx
__text:0000000100003627                 mov     [rbp+var_E8], r8
__text:000000010000362E                 mov     [rbp+var_F0], r9
__text:0000000100003635                 mov     rdi, [rbp+var_C8]
__text:000000010000363C                 mov     rsi, [rbp+var_D0]
__text:0000000100003643                 mov     rdx, [rbp+var_D8]
__text:000000010000364A                 mov     rcx, [rbp+var_E0]
__text:0000000100003651                 mov     r8, [rbp+var_F0]
__text:0000000100003658                 call    j___ZNSt3__17__sort4IRPFbiiEPiEEjT0_S5_S5_S5_T_ ; std::__1::__sort4<bool (*&)(int,int),int *>(int *,int *,int *,int *,bool (*&)(int,int))
__text:000000010000365D                 mov     [rbp+var_F4], eax
__text:0000000100003663                 mov     rcx, [rbp+var_F0]
__text:000000010000366A                 mov     rcx, [rcx]
__text:000000010000366D                 mov     rdx, [rbp+var_E8]
__text:0000000100003674                 mov     edi, [rdx]
__text:0000000100003676                 mov     rdx, [rbp+var_E0]
__text:000000010000367D                 mov     esi, [rdx]
__text:000000010000367F                 call    rcx
__text:0000000100003681                 test    al, 1
__text:0000000100003683                 jnz     loc_10000368E
__text:0000000100003689                 jmp     loc_1000038DB
__text:000000010000368E ; ---------------------------------------------------------------------------
__text:000000010000368E
__text:000000010000368E loc_10000368E:                          ; CODE XREF: std::__1::__sort5<bool (*&)(int,int),int *>(int *,int *,int *,int *,int *,bool (*&)(int,int))+83↑j
__text:000000010000368E                 lea     rax, [rbp+var_BC]
__text:0000000100003695                 mov     rcx, [rbp+var_E0]
__text:000000010000369C                 mov     rdx, [rbp+var_E8]
__text:00000001000036A3                 mov     [rbp+var_B0], rcx
__text:00000001000036AA                 mov     [rbp+var_B8], rdx
__text:00000001000036B1                 mov     rcx, [rbp+var_B0]
__text:00000001000036B8                 mov     [rbp+var_A8], rcx
__text:00000001000036BF                 mov     rcx, [rbp+var_A8]
__text:00000001000036C6                 mov     esi, [rcx]
__text:00000001000036C8                 mov     [rbp+var_BC], esi
__text:00000001000036CE                 mov     rcx, [rbp+var_B8]
__text:00000001000036D5                 mov     [rbp+var_98], rcx
__text:00000001000036DC                 mov     rcx, [rbp+var_98]
__text:00000001000036E3                 mov     esi, [rcx]
__text:00000001000036E5                 mov     rcx, [rbp+var_B0]
__text:00000001000036EC                 mov     [rcx], esi
__text:00000001000036EE                 mov     [rbp+var_A0], rax
__text:00000001000036F5                 mov     rax, [rbp+var_A0]
__text:00000001000036FC                 mov     esi, [rax]
__text:00000001000036FE                 mov     rax, [rbp+var_B8]
__text:0000000100003705                 mov     [rax], esi
__text:0000000100003707                 mov     esi, [rbp+var_F4]
__text:000000010000370D                 add     esi, 1
__text:0000000100003713                 mov     [rbp+var_F4], esi
__text:0000000100003719                 mov     rax, [rbp+var_F0]
__text:0000000100003720                 mov     rax, [rax]
__text:0000000100003723                 mov     rcx, [rbp+var_E0]
__text:000000010000372A                 mov     edi, [rcx]
__text:000000010000372C                 mov     rcx, [rbp+var_D8]
__text:0000000100003733                 mov     esi, [rcx]
__text:0000000100003735                 call    rax
__text:0000000100003737                 test    al, 1
__text:0000000100003739                 jnz     loc_100003744
__text:000000010000373F                 jmp     loc_1000038D6
__text:0000000100003744 ; ---------------------------------------------------------------------------
__text:0000000100003744
__text:0000000100003744 loc_100003744:                          ; CODE XREF: std::__1::__sort5<bool (*&)(int,int),int *>(int *,int *,int *,int *,int *,bool (*&)(int,int))+139↑j
__text:0000000100003744                 lea     rax, [rbp+var_5C]
__text:0000000100003748                 mov     rcx, [rbp+var_D8]
__text:000000010000374F                 mov     rdx, [rbp+var_E0]
__text:0000000100003756                 mov     [rbp+var_50], rcx
__text:000000010000375A                 mov     [rbp+var_58], rdx
__text:000000010000375E                 mov     rcx, [rbp+var_50]
__text:0000000100003762                 mov     [rbp+var_48], rcx
__text:0000000100003766                 mov     rcx, [rbp+var_48]
__text:000000010000376A                 mov     esi, [rcx]
__text:000000010000376C                 mov     [rbp+var_5C], esi
__text:000000010000376F                 mov     rcx, [rbp+var_58]
__text:0000000100003773                 mov     [rbp+var_38], rcx
__text:0000000100003777                 mov     rcx, [rbp+var_38]
__text:000000010000377B                 mov     esi, [rcx]
__text:000000010000377D                 mov     rcx, [rbp+var_50]
__text:0000000100003781                 mov     [rcx], esi
__text:0000000100003783                 mov     [rbp+var_40], rax
__text:0000000100003787                 mov     rax, [rbp+var_40]
__text:000000010000378B                 mov     esi, [rax]
__text:000000010000378D                 mov     rax, [rbp+var_58]
__text:0000000100003791                 mov     [rax], esi
__text:0000000100003793                 mov     esi, [rbp+var_F4]
__text:0000000100003799                 add     esi, 1
__text:000000010000379F                 mov     [rbp+var_F4], esi
__text:00000001000037A5                 mov     rax, [rbp+var_F0]
__text:00000001000037AC                 mov     rax, [rax]
__text:00000001000037AF                 mov     rcx, [rbp+var_D8]
__text:00000001000037B6                 mov     edi, [rcx]
__text:00000001000037B8                 mov     rcx, [rbp+var_D0]
__text:00000001000037BF                 mov     esi, [rcx]
__text:00000001000037C1                 call    rax
__text:00000001000037C3                 test    al, 1
__text:00000001000037C5                 jnz     loc_1000037D0
__text:00000001000037CB                 jmp     loc_1000038D1
__text:00000001000037D0 ; ---------------------------------------------------------------------------
__text:00000001000037D0
__text:00000001000037D0 loc_1000037D0:                          ; CODE XREF: std::__1::__sort5<bool (*&)(int,int),int *>(int *,int *,int *,int *,int *,bool (*&)(int,int))+1C5↑j
__text:00000001000037D0                 lea     rax, [rbp+var_2C]
__text:00000001000037D4                 mov     rcx, [rbp+var_D0]
__text:00000001000037DB                 mov     rdx, [rbp+var_D8]
__text:00000001000037E2                 mov     [rbp+var_20], rcx
__text:00000001000037E6                 mov     [rbp+var_28], rdx
__text:00000001000037EA                 mov     rcx, [rbp+var_20]
__text:00000001000037EE                 mov     [rbp+var_18], rcx
__text:00000001000037F2                 mov     rcx, [rbp+var_18]
__text:00000001000037F6                 mov     esi, [rcx]
__text:00000001000037F8                 mov     [rbp+var_2C], esi
__text:00000001000037FB                 mov     rcx, [rbp+var_28]
__text:00000001000037FF                 mov     [rbp+var_8], rcx
__text:0000000100003803                 mov     rcx, [rbp+var_8]
__text:0000000100003807                 mov     esi, [rcx]
__text:0000000100003809                 mov     rcx, [rbp+var_20]
__text:000000010000380D                 mov     [rcx], esi
__text:000000010000380F                 mov     [rbp+var_10], rax
__text:0000000100003813                 mov     rax, [rbp+var_10]
__text:0000000100003817                 mov     esi, [rax]
__text:0000000100003819                 mov     rax, [rbp+var_28]
__text:000000010000381D                 mov     [rax], esi
__text:000000010000381F                 mov     esi, [rbp+var_F4]
__text:0000000100003825                 add     esi, 1
__text:000000010000382B                 mov     [rbp+var_F4], esi
__text:0000000100003831                 mov     rax, [rbp+var_F0]
__text:0000000100003838                 mov     rax, [rax]
__text:000000010000383B                 mov     rcx, [rbp+var_D0]
__text:0000000100003842                 mov     edi, [rcx]
__text:0000000100003844                 mov     rcx, [rbp+var_C8]
__text:000000010000384B                 mov     esi, [rcx]
__text:000000010000384D                 call    rax
__text:000000010000384F                 test    al, 1
__text:0000000100003851                 jnz     loc_10000385C
__text:0000000100003857                 jmp     loc_1000038CC
__text:000000010000385C ; ---------------------------------------------------------------------------
__text:000000010000385C
__text:000000010000385C loc_10000385C:                          ; CODE XREF: std::__1::__sort5<bool (*&)(int,int),int *>(int *,int *,int *,int *,int *,bool (*&)(int,int))+251↑j
__text:000000010000385C                 lea     rax, [rbp+var_8C]
__text:0000000100003863                 mov     rcx, [rbp+var_C8]
__text:000000010000386A                 mov     rdx, [rbp+var_D0]
__text:0000000100003871                 mov     [rbp+var_80], rcx
__text:0000000100003875                 mov     [rbp+var_88], rdx
__text:000000010000387C                 mov     rcx, [rbp+var_80]
__text:0000000100003880                 mov     [rbp+var_78], rcx
__text:0000000100003884                 mov     rcx, [rbp+var_78]
__text:0000000100003888                 mov     esi, [rcx]
__text:000000010000388A                 mov     [rbp+var_8C], esi
__text:0000000100003890                 mov     rcx, [rbp+var_88]
__text:0000000100003897                 mov     [rbp+var_68], rcx
__text:000000010000389B                 mov     rcx, [rbp+var_68]
__text:000000010000389F                 mov     esi, [rcx]
__text:00000001000038A1                 mov     rcx, [rbp+var_80]
__text:00000001000038A5                 mov     [rcx], esi
__text:00000001000038A7                 mov     [rbp+var_70], rax
__text:00000001000038AB                 mov     rax, [rbp+var_70]
__text:00000001000038AF                 mov     esi, [rax]
__text:00000001000038B1                 mov     rax, [rbp+var_88]
__text:00000001000038B8                 mov     [rax], esi
__text:00000001000038BA                 mov     esi, [rbp+var_F4]
__text:00000001000038C0                 add     esi, 1
__text:00000001000038C6                 mov     [rbp+var_F4], esi
__text:00000001000038CC
__text:00000001000038CC loc_1000038CC:                          ; CODE XREF: std::__1::__sort5<bool (*&)(int,int),int *>(int *,int *,int *,int *,int *,bool (*&)(int,int))+257↑j
__text:00000001000038CC                 jmp     $+5
__text:00000001000038D1 ; ---------------------------------------------------------------------------
__text:00000001000038D1
__text:00000001000038D1 loc_1000038D1:                          ; CODE XREF: std::__1::__sort5<bool (*&)(int,int),int *>(int *,int *,int *,int *,int *,bool (*&)(int,int))+1CB↑j
__text:00000001000038D1                                         ; std::__1::__sort5<bool (*&)(int,int),int *>(int *,int *,int *,int *,int *,bool (*&)(int,int)):loc_1000038CC↑j
__text:00000001000038D1                 jmp     $+5
__text:00000001000038D6 ; ---------------------------------------------------------------------------
__text:00000001000038D6
__text:00000001000038D6 loc_1000038D6:                          ; CODE XREF: std::__1::__sort5<bool (*&)(int,int),int *>(int *,int *,int *,int *,int *,bool (*&)(int,int))+13F↑j
__text:00000001000038D6                                         ; std::__1::__sort5<bool (*&)(int,int),int *>(int *,int *,int *,int *,int *,bool (*&)(int,int)):loc_1000038D1↑j
__text:00000001000038D6                 jmp     $+5
__text:00000001000038DB ; ---------------------------------------------------------------------------
__text:00000001000038DB
__text:00000001000038DB loc_1000038DB:                          ; CODE XREF: std::__1::__sort5<bool (*&)(int,int),int *>(int *,int *,int *,int *,int *,bool (*&)(int,int))+89↑j
__text:00000001000038DB                                         ; std::__1::__sort5<bool (*&)(int,int),int *>(int *,int *,int *,int *,int *,bool (*&)(int,int)):loc_1000038D6↑j
__text:00000001000038DB                 mov     eax, [rbp+var_F4]
__text:00000001000038E1                 add     rsp, 100h
__text:00000001000038E8                 pop     rbp
__text:00000001000038E9                 retn
__text:00000001000038E9 __ZNSt3__17__sort5IRPFbiiEPiEEjT0_S5_S5_S5_S5_T_ endp
__text:00000001000038E9
__text:00000001000038E9 ; ---------------------------------------------------------------------------
__text:00000001000038EA                 align 10h
__text:00000001000038F0
__text:00000001000038F0 ; =============== S U B R O U T I N E =======================================
__text:00000001000038F0
__text:00000001000038F0 ; Attributes: bp-based frame
__text:00000001000038F0
__text:00000001000038F0 ; void std::__1::__insertion_sort_3<bool (*&)(int, int), int *>(int *, int *, bool (*&)(int, int))
__text:00000001000038F0 __ZNSt3__118__insertion_sort_3IRPFbiiEPiEEvT0_S5_T_ proc near
__text:00000001000038F0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__118__insertion_sort_3IRPFbiiEPiEEvT0_S5_T__ptr↓o
__text:00000001000038F0
__text:00000001000038F0 var_5D          = byte ptr -5Dh
__text:00000001000038F0 var_5C          = dword ptr -5Ch
__text:00000001000038F0 var_58          = qword ptr -58h
__text:00000001000038F0 var_50          = qword ptr -50h
__text:00000001000038F0 var_44          = dword ptr -44h
__text:00000001000038F0 var_40          = qword ptr -40h
__text:00000001000038F0 var_38          = qword ptr -38h
__text:00000001000038F0 var_30          = qword ptr -30h
__text:00000001000038F0 var_28          = qword ptr -28h
__text:00000001000038F0 var_20          = qword ptr -20h
__text:00000001000038F0 var_18          = qword ptr -18h
__text:00000001000038F0 var_10          = qword ptr -10h
__text:00000001000038F0 var_8           = qword ptr -8
__text:00000001000038F0
__text:00000001000038F0                 push    rbp
__text:00000001000038F1                 mov     rbp, rsp
__text:00000001000038F4                 sub     rsp, 60h
__text:00000001000038F8                 mov     [rbp+var_20], rdi
__text:00000001000038FC                 mov     [rbp+var_28], rsi
__text:0000000100003900                 mov     [rbp+var_30], rdx
__text:0000000100003904                 mov     rdx, [rbp+var_20]
__text:0000000100003908                 add     rdx, 8
__text:000000010000390F                 mov     [rbp+var_38], rdx
__text:0000000100003913                 mov     rdi, [rbp+var_20]
__text:0000000100003917                 mov     rdx, [rbp+var_20]
__text:000000010000391B                 add     rdx, 4
__text:0000000100003922                 mov     rsi, [rbp+var_38]
__text:0000000100003926                 mov     rcx, [rbp+var_30]
__text:000000010000392A                 mov     [rbp+var_58], rsi
__text:000000010000392E                 mov     rsi, rdx
__text:0000000100003931                 mov     rdx, [rbp+var_58]
__text:0000000100003935                 call    j___ZNSt3__17__sort3IRPFbiiEPiEEjT0_S5_S5_T_ ; std::__1::__sort3<bool (*&)(int,int),int *>(int *,int *,int *,bool (*&)(int,int))
__text:000000010000393A                 mov     rcx, [rbp+var_38]
__text:000000010000393E                 add     rcx, 4
__text:0000000100003945                 mov     [rbp+var_40], rcx
__text:0000000100003949                 mov     [rbp+var_5C], eax
__text:000000010000394C
__text:000000010000394C loc_10000394C:                          ; CODE XREF: std::__1::__insertion_sort_3<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+135↓j
__text:000000010000394C                 mov     rax, [rbp+var_40]
__text:0000000100003950                 cmp     rax, [rbp+var_28]
__text:0000000100003954                 jz      loc_100003A2A
__text:000000010000395A                 mov     rax, [rbp+var_30]
__text:000000010000395E                 mov     rax, [rax]
__text:0000000100003961                 mov     rcx, [rbp+var_40]
__text:0000000100003965                 mov     edi, [rcx]
__text:0000000100003967                 mov     rcx, [rbp+var_38]
__text:000000010000396B                 mov     esi, [rcx]
__text:000000010000396D                 call    rax
__text:000000010000396F                 test    al, 1
__text:0000000100003971                 jnz     loc_10000397C
__text:0000000100003977                 jmp     loc_100003A0F
__text:000000010000397C ; ---------------------------------------------------------------------------
__text:000000010000397C
__text:000000010000397C loc_10000397C:                          ; CODE XREF: std::__1::__insertion_sort_3<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+81↑j
__text:000000010000397C                 mov     rax, [rbp+var_40]
__text:0000000100003980                 mov     [rbp+var_18], rax
__text:0000000100003984                 mov     rax, [rbp+var_18]
__text:0000000100003988                 mov     ecx, [rax]
__text:000000010000398A                 mov     [rbp+var_44], ecx
__text:000000010000398D                 mov     rax, [rbp+var_38]
__text:0000000100003991                 mov     [rbp+var_50], rax
__text:0000000100003995                 mov     rax, [rbp+var_40]
__text:0000000100003999                 mov     [rbp+var_38], rax
__text:000000010000399D
__text:000000010000399D loc_10000399D:                          ; CODE XREF: std::__1::__insertion_sort_3<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+105↓j
__text:000000010000399D                 mov     rax, [rbp+var_50]
__text:00000001000039A1                 mov     [rbp+var_8], rax
__text:00000001000039A5                 mov     rax, [rbp+var_8]
__text:00000001000039A9                 mov     ecx, [rax]
__text:00000001000039AB                 mov     rax, [rbp+var_38]
__text:00000001000039AF                 mov     [rax], ecx
__text:00000001000039B1                 mov     rax, [rbp+var_50]
__text:00000001000039B5                 mov     [rbp+var_38], rax
__text:00000001000039B9                 mov     al, 0
__text:00000001000039BB                 mov     rcx, [rbp+var_38]
__text:00000001000039BF                 cmp     rcx, [rbp+var_20]
__text:00000001000039C3                 mov     [rbp+var_5D], al
__text:00000001000039C6                 jz      loc_1000039F0
__text:00000001000039CC                 mov     rax, [rbp+var_30]
__text:00000001000039D0                 mov     rax, [rax]
__text:00000001000039D3                 mov     edi, [rbp+var_44]
__text:00000001000039D6                 mov     rcx, [rbp+var_50]
__text:00000001000039DA                 mov     rdx, rcx
__text:00000001000039DD                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:00000001000039E4                 mov     [rbp+var_50], rdx
__text:00000001000039E8                 mov     esi, [rcx-4]
__text:00000001000039EB                 call    rax
__text:00000001000039ED                 mov     [rbp+var_5D], al
__text:00000001000039F0
__text:00000001000039F0 loc_1000039F0:                          ; CODE XREF: std::__1::__insertion_sort_3<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+D6↑j
__text:00000001000039F0                 mov     al, [rbp+var_5D]
__text:00000001000039F3                 test    al, 1
__text:00000001000039F5                 jnz     loc_10000399D
__text:00000001000039FB                 lea     rax, [rbp+var_44]
__text:00000001000039FF                 mov     [rbp+var_10], rax
__text:0000000100003A03                 mov     rax, [rbp+var_10]
__text:0000000100003A07                 mov     ecx, [rax]
__text:0000000100003A09                 mov     rax, [rbp+var_38]
__text:0000000100003A0D                 mov     [rax], ecx
__text:0000000100003A0F
__text:0000000100003A0F loc_100003A0F:                          ; CODE XREF: std::__1::__insertion_sort_3<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+87↑j
__text:0000000100003A0F                 mov     rax, [rbp+var_40]
__text:0000000100003A13                 mov     [rbp+var_38], rax
__text:0000000100003A17                 mov     rax, [rbp+var_40]
__text:0000000100003A1B                 add     rax, 4
__text:0000000100003A21                 mov     [rbp+var_40], rax
__text:0000000100003A25                 jmp     loc_10000394C
__text:0000000100003A2A ; ---------------------------------------------------------------------------
__text:0000000100003A2A
__text:0000000100003A2A loc_100003A2A:                          ; CODE XREF: std::__1::__insertion_sort_3<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+64↑j
__text:0000000100003A2A                 add     rsp, 60h
__text:0000000100003A2E                 pop     rbp
__text:0000000100003A2F                 retn
__text:0000000100003A2F __ZNSt3__118__insertion_sort_3IRPFbiiEPiEEvT0_S5_T_ endp
__text:0000000100003A2F
__text:0000000100003A30
__text:0000000100003A30 ; =============== S U B R O U T I N E =======================================
__text:0000000100003A30
__text:0000000100003A30 ; Attributes: bp-based frame
__text:0000000100003A30
__text:0000000100003A30 ; bool std::__1::__insertion_sort_incomplete<bool (*&)(int, int), int *>(int *, int *, bool (*&)(int, int))
__text:0000000100003A30 __ZNSt3__127__insertion_sort_incompleteIRPFbiiEPiEEbT0_S5_T_ proc near
__text:0000000100003A30                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__127__insertion_sort_incompleteIRPFbiiEPiEEbT0_S5_T__ptr↓o
__text:0000000100003A30
__text:0000000100003A30 var_D1          = byte ptr -0D1h
__text:0000000100003A30 var_D0          = dword ptr -0D0h
__text:0000000100003A30 var_CC          = dword ptr -0CCh
__text:0000000100003A30 var_C8          = qword ptr -0C8h
__text:0000000100003A30 var_C0          = qword ptr -0C0h
__text:0000000100003A30 var_B4          = dword ptr -0B4h
__text:0000000100003A30 var_B0          = qword ptr -0B0h
__text:0000000100003A30 var_A4          = dword ptr -0A4h
__text:0000000100003A30 var_A0          = qword ptr -0A0h
__text:0000000100003A30 var_98          = qword ptr -98h
__text:0000000100003A30 var_90          = qword ptr -90h
__text:0000000100003A30 var_88          = qword ptr -88h
__text:0000000100003A30 var_7C          = dword ptr -7Ch
__text:0000000100003A30 var_78          = qword ptr -78h
__text:0000000100003A30 var_70          = dword ptr -70h
__text:0000000100003A30 var_6C          = dword ptr -6Ch
__text:0000000100003A30 var_68          = qword ptr -68h
__text:0000000100003A30 var_60          = qword ptr -60h
__text:0000000100003A30 var_58          = qword ptr -58h
__text:0000000100003A30 var_50          = qword ptr -50h
__text:0000000100003A30 var_45          = byte ptr -45h
__text:0000000100003A30 var_44          = dword ptr -44h
__text:0000000100003A30 var_40          = qword ptr -40h
__text:0000000100003A30 var_38          = qword ptr -38h
__text:0000000100003A30 var_30          = qword ptr -30h
__text:0000000100003A30 var_28          = qword ptr -28h
__text:0000000100003A30 var_20          = qword ptr -20h
__text:0000000100003A30 var_18          = qword ptr -18h
__text:0000000100003A30 var_10          = qword ptr -10h
__text:0000000100003A30 var_8           = qword ptr -8
__text:0000000100003A30
__text:0000000100003A30                 push    rbp
__text:0000000100003A31                 mov     rbp, rsp
__text:0000000100003A34                 sub     rsp, 0E0h
__text:0000000100003A3B                 mov     [rbp+var_50], rdi
__text:0000000100003A3F                 mov     [rbp+var_58], rsi
__text:0000000100003A43                 mov     [rbp+var_60], rdx
__text:0000000100003A47                 mov     rdx, [rbp+var_58]
__text:0000000100003A4B                 mov     rsi, [rbp+var_50]
__text:0000000100003A4F                 sub     rdx, rsi
__text:0000000100003A52                 sar     rdx, 2
__text:0000000100003A56                 mov     rsi, rdx
__text:0000000100003A59                 sub     rsi, 5          ; switch 6 cases
__text:0000000100003A5D                 mov     [rbp+var_90], rdx
__text:0000000100003A64                 mov     [rbp+var_98], rsi
__text:0000000100003A6B                 ja      def_100003A86   ; jumptable 0000000100003A86 default case
__text:0000000100003A71                 lea     rax, jpt_100003A86
__text:0000000100003A78                 mov     rcx, [rbp+var_90]
__text:0000000100003A7F                 movsxd  rdx, ds:(jpt_100003A86 - 100003DB8h)[rax+rcx*4]
__text:0000000100003A83                 add     rdx, rax
__text:0000000100003A86                 jmp     rdx             ; switch jump
__text:0000000100003A88 ; ---------------------------------------------------------------------------
__text:0000000100003A88
__text:0000000100003A88 loc_100003A88:                          ; CODE XREF: std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+56↑j
__text:0000000100003A88                                         ; DATA XREF: __text:jpt_100003A86↓o
__text:0000000100003A88                 mov     [rbp+var_45], 1 ; jumptable 0000000100003A86 cases 0,1
__text:0000000100003A8C                 jmp     loc_100003DA4
__text:0000000100003A91 ; ---------------------------------------------------------------------------
__text:0000000100003A91
__text:0000000100003A91 loc_100003A91:                          ; CODE XREF: std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+56↑j
__text:0000000100003A91                                         ; DATA XREF: __text:jpt_100003A86↓o
__text:0000000100003A91                 mov     rax, [rbp+var_60] ; jumptable 0000000100003A86 case 2
__text:0000000100003A95                 mov     rax, [rax]
__text:0000000100003A98                 mov     rcx, [rbp+var_58]
__text:0000000100003A9C                 mov     rdx, rcx
__text:0000000100003A9F                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:0000000100003AA6                 mov     [rbp+var_58], rdx
__text:0000000100003AAA                 mov     edi, [rcx-4]
__text:0000000100003AAD                 mov     rcx, [rbp+var_50]
__text:0000000100003AB1                 mov     esi, [rcx]
__text:0000000100003AB3                 call    rax
__text:0000000100003AB5                 test    al, 1
__text:0000000100003AB7                 jnz     loc_100003AC2
__text:0000000100003ABD                 jmp     loc_100003B0B
__text:0000000100003AC2 ; ---------------------------------------------------------------------------
__text:0000000100003AC2
__text:0000000100003AC2 loc_100003AC2:                          ; CODE XREF: std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+87↑j
__text:0000000100003AC2                 lea     rax, [rbp+var_44]
__text:0000000100003AC6                 mov     rcx, [rbp+var_50]
__text:0000000100003ACA                 mov     rdx, [rbp+var_58]
__text:0000000100003ACE                 mov     [rbp+var_38], rcx
__text:0000000100003AD2                 mov     [rbp+var_40], rdx
__text:0000000100003AD6                 mov     rcx, [rbp+var_38]
__text:0000000100003ADA                 mov     [rbp+var_30], rcx
__text:0000000100003ADE                 mov     rcx, [rbp+var_30]
__text:0000000100003AE2                 mov     esi, [rcx]
__text:0000000100003AE4                 mov     [rbp+var_44], esi
__text:0000000100003AE7                 mov     rcx, [rbp+var_40]
__text:0000000100003AEB                 mov     [rbp+var_20], rcx
__text:0000000100003AEF                 mov     rcx, [rbp+var_20]
__text:0000000100003AF3                 mov     esi, [rcx]
__text:0000000100003AF5                 mov     rcx, [rbp+var_38]
__text:0000000100003AF9                 mov     [rcx], esi
__text:0000000100003AFB                 mov     [rbp+var_28], rax
__text:0000000100003AFF                 mov     rax, [rbp+var_28]
__text:0000000100003B03                 mov     esi, [rax]
__text:0000000100003B05                 mov     rax, [rbp+var_40]
__text:0000000100003B09                 mov     [rax], esi
__text:0000000100003B0B
__text:0000000100003B0B loc_100003B0B:                          ; CODE XREF: std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+8D↑j
__text:0000000100003B0B                 mov     [rbp+var_45], 1
__text:0000000100003B0F                 jmp     loc_100003DA4
__text:0000000100003B14 ; ---------------------------------------------------------------------------
__text:0000000100003B14
__text:0000000100003B14 loc_100003B14:                          ; CODE XREF: std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+56↑j
__text:0000000100003B14                                         ; DATA XREF: __text:jpt_100003A86↓o
__text:0000000100003B14                 mov     rdi, [rbp+var_50] ; jumptable 0000000100003A86 case 3
__text:0000000100003B18                 mov     rax, [rbp+var_50]
__text:0000000100003B1C                 add     rax, 4
__text:0000000100003B22                 mov     rcx, [rbp+var_58]
__text:0000000100003B26                 add     rcx, 0FFFFFFFFFFFFFFFCh
__text:0000000100003B2D                 mov     [rbp+var_58], rcx
__text:0000000100003B31                 mov     rdx, [rbp+var_60]
__text:0000000100003B35                 mov     rsi, rax
__text:0000000100003B38                 mov     [rbp+var_A0], rdx
__text:0000000100003B3F                 mov     rdx, rcx
__text:0000000100003B42                 mov     rcx, [rbp+var_A0]
__text:0000000100003B49                 call    j___ZNSt3__17__sort3IRPFbiiEPiEEjT0_S5_S5_T_ ; std::__1::__sort3<bool (*&)(int,int),int *>(int *,int *,int *,bool (*&)(int,int))
__text:0000000100003B4E                 mov     [rbp+var_45], 1
__text:0000000100003B52                 mov     [rbp+var_A4], eax
__text:0000000100003B58                 jmp     loc_100003DA4
__text:0000000100003B5D ; ---------------------------------------------------------------------------
__text:0000000100003B5D
__text:0000000100003B5D loc_100003B5D:                          ; CODE XREF: std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+56↑j
__text:0000000100003B5D                                         ; DATA XREF: __text:jpt_100003A86↓o
__text:0000000100003B5D                 mov     rdi, [rbp+var_50] ; jumptable 0000000100003A86 case 4
__text:0000000100003B61                 mov     rax, [rbp+var_50]
__text:0000000100003B65                 add     rax, 4
__text:0000000100003B6B                 mov     rcx, [rbp+var_50]
__text:0000000100003B6F                 add     rcx, 8
__text:0000000100003B76                 mov     rdx, [rbp+var_58]
__text:0000000100003B7A                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:0000000100003B81                 mov     [rbp+var_58], rdx
__text:0000000100003B85                 mov     r8, [rbp+var_60]
__text:0000000100003B89                 mov     rsi, rax
__text:0000000100003B8C                 mov     [rbp+var_B0], rdx
__text:0000000100003B93                 mov     rdx, rcx
__text:0000000100003B96                 mov     rcx, [rbp+var_B0]
__text:0000000100003B9D                 call    j___ZNSt3__17__sort4IRPFbiiEPiEEjT0_S5_S5_S5_T_ ; std::__1::__sort4<bool (*&)(int,int),int *>(int *,int *,int *,int *,bool (*&)(int,int))
__text:0000000100003BA2                 mov     [rbp+var_45], 1
__text:0000000100003BA6                 mov     [rbp+var_B4], eax
__text:0000000100003BAC                 jmp     loc_100003DA4
__text:0000000100003BB1 ; ---------------------------------------------------------------------------
__text:0000000100003BB1
__text:0000000100003BB1 loc_100003BB1:                          ; CODE XREF: std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+56↑j
__text:0000000100003BB1                                         ; DATA XREF: __text:jpt_100003A86↓o
__text:0000000100003BB1                 mov     rdi, [rbp+var_50] ; jumptable 0000000100003A86 case 5
__text:0000000100003BB5                 mov     rax, [rbp+var_50]
__text:0000000100003BB9                 add     rax, 4
__text:0000000100003BBF                 mov     rcx, [rbp+var_50]
__text:0000000100003BC3                 add     rcx, 8
__text:0000000100003BCA                 mov     rdx, [rbp+var_50]
__text:0000000100003BCE                 add     rdx, 0Ch
__text:0000000100003BD5                 mov     rsi, [rbp+var_58]
__text:0000000100003BD9                 add     rsi, 0FFFFFFFFFFFFFFFCh
__text:0000000100003BE0                 mov     [rbp+var_58], rsi
__text:0000000100003BE4                 mov     r9, [rbp+var_60]
__text:0000000100003BE8                 mov     [rbp+var_C0], rsi
__text:0000000100003BEF                 mov     rsi, rax
__text:0000000100003BF2                 mov     [rbp+var_C8], rdx
__text:0000000100003BF9                 mov     rdx, rcx
__text:0000000100003BFC                 mov     rcx, [rbp+var_C8]
__text:0000000100003C03                 mov     r8, [rbp+var_C0]
__text:0000000100003C0A                 call    j___ZNSt3__17__sort5IRPFbiiEPiEEjT0_S5_S5_S5_S5_T_ ; std::__1::__sort5<bool (*&)(int,int),int *>(int *,int *,int *,int *,int *,bool (*&)(int,int))
__text:0000000100003C0F                 mov     [rbp+var_45], 1
__text:0000000100003C13                 mov     [rbp+var_CC], eax
__text:0000000100003C19                 jmp     loc_100003DA4
__text:0000000100003C1E ; ---------------------------------------------------------------------------
__text:0000000100003C1E
__text:0000000100003C1E def_100003A86:                          ; CODE XREF: std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+3B↑j
__text:0000000100003C1E                 mov     rax, [rbp+var_50] ; jumptable 0000000100003A86 default case
__text:0000000100003C22                 add     rax, 8
__text:0000000100003C28                 mov     [rbp+var_68], rax
__text:0000000100003C2C                 mov     rdi, [rbp+var_50]
__text:0000000100003C30                 mov     rax, [rbp+var_50]
__text:0000000100003C34                 add     rax, 4
__text:0000000100003C3A                 mov     rdx, [rbp+var_68]
__text:0000000100003C3E                 mov     rcx, [rbp+var_60]
__text:0000000100003C42                 mov     rsi, rax
__text:0000000100003C45                 call    j___ZNSt3__17__sort3IRPFbiiEPiEEjT0_S5_S5_T_ ; std::__1::__sort3<bool (*&)(int,int),int *>(int *,int *,int *,bool (*&)(int,int))
__text:0000000100003C4A                 mov     [rbp+var_6C], 8
__text:0000000100003C51                 mov     [rbp+var_70], 0
__text:0000000100003C58                 mov     rcx, [rbp+var_68]
__text:0000000100003C5C                 add     rcx, 4
__text:0000000100003C63                 mov     [rbp+var_78], rcx
__text:0000000100003C67                 mov     [rbp+var_D0], eax
__text:0000000100003C6D
__text:0000000100003C6D loc_100003C6D:                          ; CODE XREF: std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+36B↓j
__text:0000000100003C6D                 mov     rax, [rbp+var_78]
__text:0000000100003C71                 cmp     rax, [rbp+var_58]
__text:0000000100003C75                 jz      loc_100003DA0
__text:0000000100003C7B                 mov     rax, [rbp+var_60]
__text:0000000100003C7F                 mov     rax, [rax]
__text:0000000100003C82                 mov     rcx, [rbp+var_78]
__text:0000000100003C86                 mov     edi, [rcx]
__text:0000000100003C88                 mov     rcx, [rbp+var_68]
__text:0000000100003C8C                 mov     esi, [rcx]
__text:0000000100003C8E                 call    rax
__text:0000000100003C90                 test    al, 1
__text:0000000100003C92                 jnz     loc_100003C9D
__text:0000000100003C98                 jmp     loc_100003D85
__text:0000000100003C9D ; ---------------------------------------------------------------------------
__text:0000000100003C9D
__text:0000000100003C9D loc_100003C9D:                          ; CODE XREF: std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+262↑j
__text:0000000100003C9D                 mov     rax, [rbp+var_78]
__text:0000000100003CA1                 mov     [rbp+var_10], rax
__text:0000000100003CA5                 mov     rax, [rbp+var_10]
__text:0000000100003CA9                 mov     ecx, [rax]
__text:0000000100003CAB                 mov     [rbp+var_7C], ecx
__text:0000000100003CAE                 mov     rax, [rbp+var_68]
__text:0000000100003CB2                 mov     [rbp+var_88], rax
__text:0000000100003CB9                 mov     rax, [rbp+var_78]
__text:0000000100003CBD                 mov     [rbp+var_68], rax
__text:0000000100003CC1
__text:0000000100003CC1 loc_100003CC1:                          ; CODE XREF: std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+2FE↓j
__text:0000000100003CC1                 mov     rax, [rbp+var_88]
__text:0000000100003CC8                 mov     [rbp+var_8], rax
__text:0000000100003CCC                 mov     rax, [rbp+var_8]
__text:0000000100003CD0                 mov     ecx, [rax]
__text:0000000100003CD2                 mov     rax, [rbp+var_68]
__text:0000000100003CD6                 mov     [rax], ecx
__text:0000000100003CD8                 mov     rax, [rbp+var_88]
__text:0000000100003CDF                 mov     [rbp+var_68], rax
__text:0000000100003CE3                 mov     al, 0
__text:0000000100003CE5                 mov     rcx, [rbp+var_68]
__text:0000000100003CE9                 cmp     rcx, [rbp+var_50]
__text:0000000100003CED                 mov     [rbp+var_D1], al
__text:0000000100003CF3                 jz      loc_100003D26
__text:0000000100003CF9                 mov     rax, [rbp+var_60]
__text:0000000100003CFD                 mov     rax, [rax]
__text:0000000100003D00                 mov     edi, [rbp+var_7C]
__text:0000000100003D03                 mov     rcx, [rbp+var_88]
__text:0000000100003D0A                 mov     rdx, rcx
__text:0000000100003D0D                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:0000000100003D14                 mov     [rbp+var_88], rdx
__text:0000000100003D1B                 mov     esi, [rcx-4]
__text:0000000100003D1E                 call    rax
__text:0000000100003D20                 mov     [rbp+var_D1], al
__text:0000000100003D26
__text:0000000100003D26 loc_100003D26:                          ; CODE XREF: std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+2C3↑j
__text:0000000100003D26                 mov     al, [rbp+var_D1]
__text:0000000100003D2C                 test    al, 1
__text:0000000100003D2E                 jnz     loc_100003CC1
__text:0000000100003D34                 lea     rax, [rbp+var_7C]
__text:0000000100003D38                 mov     [rbp+var_18], rax
__text:0000000100003D3C                 mov     rax, [rbp+var_18]
__text:0000000100003D40                 mov     ecx, [rax]
__text:0000000100003D42                 mov     rax, [rbp+var_68]
__text:0000000100003D46                 mov     [rax], ecx
__text:0000000100003D48                 mov     ecx, [rbp+var_70]
__text:0000000100003D4B                 add     ecx, 1
__text:0000000100003D51                 mov     [rbp+var_70], ecx
__text:0000000100003D54                 cmp     ecx, 8
__text:0000000100003D5A                 jnz     loc_100003D80
__text:0000000100003D60                 mov     rax, [rbp+var_78]
__text:0000000100003D64                 add     rax, 4
__text:0000000100003D6A                 mov     [rbp+var_78], rax
__text:0000000100003D6E                 cmp     rax, [rbp+var_58]
__text:0000000100003D72                 setz    cl
__text:0000000100003D75                 and     cl, 1
__text:0000000100003D78                 mov     [rbp+var_45], cl
__text:0000000100003D7B                 jmp     loc_100003DA4
__text:0000000100003D80 ; ---------------------------------------------------------------------------
__text:0000000100003D80
__text:0000000100003D80 loc_100003D80:                          ; CODE XREF: std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+32A↑j
__text:0000000100003D80                 jmp     $+5
__text:0000000100003D85 ; ---------------------------------------------------------------------------
__text:0000000100003D85
__text:0000000100003D85 loc_100003D85:                          ; CODE XREF: std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+268↑j
__text:0000000100003D85                                         ; std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int)):loc_100003D80↑j
__text:0000000100003D85                 mov     rax, [rbp+var_78]
__text:0000000100003D89                 mov     [rbp+var_68], rax
__text:0000000100003D8D                 mov     rax, [rbp+var_78]
__text:0000000100003D91                 add     rax, 4
__text:0000000100003D97                 mov     [rbp+var_78], rax
__text:0000000100003D9B                 jmp     loc_100003C6D
__text:0000000100003DA0 ; ---------------------------------------------------------------------------
__text:0000000100003DA0
__text:0000000100003DA0 loc_100003DA0:                          ; CODE XREF: std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+245↑j
__text:0000000100003DA0                 mov     [rbp+var_45], 1
__text:0000000100003DA4
__text:0000000100003DA4 loc_100003DA4:                          ; CODE XREF: std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+5C↑j
__text:0000000100003DA4                                         ; std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+DF↑j ...
__text:0000000100003DA4                 mov     al, [rbp+var_45]
__text:0000000100003DA7                 and     al, 1
__text:0000000100003DA9                 movzx   eax, al
__text:0000000100003DAC                 add     rsp, 0E0h
__text:0000000100003DB3                 pop     rbp
__text:0000000100003DB4                 retn
__text:0000000100003DB4 __ZNSt3__127__insertion_sort_incompleteIRPFbiiEPiEEbT0_S5_T_ endp
__text:0000000100003DB4
__text:0000000100003DB4 ; ---------------------------------------------------------------------------
__text:0000000100003DB5                 align 8
__text:0000000100003DB8 jpt_100003A86   dd offset loc_100003A88 - 100003DB8h
__text:0000000100003DB8                                         ; DATA XREF: std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+41↑o
__text:0000000100003DB8                                         ; std::__1::__insertion_sort_incomplete<bool (*&)(int,int),int *>(int *,int *,bool (*&)(int,int))+4F↑r
__text:0000000100003DB8                 dd offset loc_100003A88 - 100003DB8h ; jump table for switch statement
__text:0000000100003DB8                 dd offset loc_100003A91 - 100003DB8h
__text:0000000100003DB8                 dd offset loc_100003B14 - 100003DB8h
__text:0000000100003DB8                 dd offset loc_100003B5D - 100003DB8h
__text:0000000100003DB8                 dd offset loc_100003BB1 - 100003DB8h
__text:0000000100003DD0
__text:0000000100003DD0 ; =============== S U B R O U T I N E =======================================
__text:0000000100003DD0
__text:0000000100003DD0 ; Attributes: bp-based frame
__text:0000000100003DD0
__text:0000000100003DD0 ; void std::__1::vector<int, std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)
__text:0000000100003DD0 __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_ proc near
__text:0000000100003DD0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT__ptr↓o
__text:0000000100003DD0
__text:0000000100003DD0 var_168         = qword ptr -168h
__text:0000000100003DD0 var_160         = qword ptr -160h
__text:0000000100003DD0 var_158         = qword ptr -158h
__text:0000000100003DD0 var_150         = qword ptr -150h
__text:0000000100003DD0 var_148         = qword ptr -148h
__text:0000000100003DD0 var_130         = byte ptr -130h
__text:0000000100003DD0 var_120         = qword ptr -120h
__text:0000000100003DD0 var_108         = qword ptr -108h
__text:0000000100003DD0 var_100         = qword ptr -100h
__text:0000000100003DD0 var_F8          = qword ptr -0F8h
__text:0000000100003DD0 var_F0          = qword ptr -0F0h
__text:0000000100003DD0 var_E8          = qword ptr -0E8h
__text:0000000100003DD0 var_E0          = qword ptr -0E0h
__text:0000000100003DD0 var_D8          = qword ptr -0D8h
__text:0000000100003DD0 var_D0          = qword ptr -0D0h
__text:0000000100003DD0 var_C8          = qword ptr -0C8h
__text:0000000100003DD0 var_C0          = qword ptr -0C0h
__text:0000000100003DD0 var_B8          = qword ptr -0B8h
__text:0000000100003DD0 var_B0          = qword ptr -0B0h
__text:0000000100003DD0 var_A8          = qword ptr -0A8h
__text:0000000100003DD0 var_A0          = qword ptr -0A0h
__text:0000000100003DD0 var_98          = qword ptr -98h
__text:0000000100003DD0 var_90          = qword ptr -90h
__text:0000000100003DD0 var_88          = qword ptr -88h
__text:0000000100003DD0 var_80          = qword ptr -80h
__text:0000000100003DD0 var_70          = qword ptr -70h
__text:0000000100003DD0 var_68          = qword ptr -68h
__text:0000000100003DD0 var_60          = byte ptr -60h
__text:0000000100003DD0 var_58          = qword ptr -58h
__text:0000000100003DD0 var_50          = qword ptr -50h
__text:0000000100003DD0 var_48          = qword ptr -48h
__text:0000000100003DD0 var_40          = qword ptr -40h
__text:0000000100003DD0 var_38          = qword ptr -38h
__text:0000000100003DD0 var_30          = qword ptr -30h
__text:0000000100003DD0 var_28          = qword ptr -28h
__text:0000000100003DD0 var_20          = qword ptr -20h
__text:0000000100003DD0 var_18          = qword ptr -18h
__text:0000000100003DD0 var_10          = qword ptr -10h
__text:0000000100003DD0 var_8           = qword ptr -8
__text:0000000100003DD0
__text:0000000100003DD0                 push    rbp
__text:0000000100003DD1                 mov     rbp, rsp
__text:0000000100003DD4                 sub     rsp, 170h
__text:0000000100003DDB                 mov     [rbp+var_F8], rdi
__text:0000000100003DE2                 mov     [rbp+var_100], rsi
__text:0000000100003DE9                 mov     rsi, [rbp+var_F8]
__text:0000000100003DF0                 mov     rdi, rsi
__text:0000000100003DF3                 mov     [rbp+var_F0], rdi
__text:0000000100003DFA                 mov     rdi, [rbp+var_F0]
__text:0000000100003E01                 add     rdi, 10h
__text:0000000100003E08                 mov     [rbp+var_E8], rdi
__text:0000000100003E0F                 mov     rdi, [rbp+var_E8]
__text:0000000100003E16                 mov     [rbp+var_E0], rdi
__text:0000000100003E1D                 mov     rdi, [rbp+var_E0]
__text:0000000100003E24                 mov     [rbp+var_108], rdi
__text:0000000100003E2B                 mov     [rbp+var_D8], rsi
__text:0000000100003E32                 mov     rdi, [rbp+var_D8]
__text:0000000100003E39                 mov     rax, [rdi+8]
__text:0000000100003E3D                 mov     rdi, [rdi]
__text:0000000100003E40                 sub     rax, rdi
__text:0000000100003E43                 sar     rax, 2
__text:0000000100003E47                 add     rax, 1
__text:0000000100003E4D                 mov     [rbp+var_B0], rsi
__text:0000000100003E54                 mov     [rbp+var_B8], rax
__text:0000000100003E5B                 mov     rax, [rbp+var_B0]
__text:0000000100003E62                 mov     rdi, rax
__text:0000000100003E65                 mov     [rbp+var_148], rsi
__text:0000000100003E6C                 mov     [rbp+var_150], rax
__text:0000000100003E73                 call    j___ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv ; std::__1::vector<int,std::__1::allocator<int>>::max_size(void)
__text:0000000100003E78                 mov     [rbp+var_C0], rax
__text:0000000100003E7F                 mov     rax, [rbp+var_B8]
__text:0000000100003E86                 cmp     rax, [rbp+var_C0]
__text:0000000100003E8D                 jbe     loc_100003EA2
__text:0000000100003E93                 mov     rax, [rbp+var_150]
__text:0000000100003E9A                 mov     rdi, rax
__text:0000000100003E9D                 call    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
__text:0000000100003EA2
__text:0000000100003EA2 loc_100003EA2:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+BD↑j
__text:0000000100003EA2                 mov     rax, [rbp+var_150]
__text:0000000100003EA9                 mov     [rbp+var_A0], rax
__text:0000000100003EB0                 mov     rcx, [rbp+var_A0]
__text:0000000100003EB7                 mov     [rbp+var_98], rcx
__text:0000000100003EBE                 mov     rcx, [rbp+var_98]
__text:0000000100003EC5                 mov     [rbp+var_90], rcx
__text:0000000100003ECC                 mov     rdx, [rbp+var_90]
__text:0000000100003ED3                 add     rdx, 10h
__text:0000000100003EDA                 mov     [rbp+var_88], rdx
__text:0000000100003EE1                 mov     rdx, [rbp+var_88]
__text:0000000100003EE8                 mov     [rbp+var_80], rdx
__text:0000000100003EEC                 mov     rdx, [rbp+var_80]
__text:0000000100003EF0                 mov     rdx, [rdx]
__text:0000000100003EF3                 mov     rcx, [rcx]
__text:0000000100003EF6                 sub     rdx, rcx
__text:0000000100003EF9                 sar     rdx, 2
__text:0000000100003EFD                 mov     [rbp+var_C8], rdx
__text:0000000100003F04                 mov     rcx, [rbp+var_C8]
__text:0000000100003F0B                 mov     rdx, [rbp+var_C0]
__text:0000000100003F12                 shr     rdx, 1
__text:0000000100003F16                 cmp     rcx, rdx
__text:0000000100003F19                 jb      loc_100003F32
__text:0000000100003F1F                 mov     rax, [rbp+var_C0]
__text:0000000100003F26                 mov     [rbp+var_A8], rax
__text:0000000100003F2D                 jmp     loc_100003FC2
__text:0000000100003F32 ; ---------------------------------------------------------------------------
__text:0000000100003F32
__text:0000000100003F32 loc_100003F32:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+149↑j
__text:0000000100003F32                 lea     rax, [rbp+var_60]
__text:0000000100003F36                 lea     rcx, [rbp+var_B8]
__text:0000000100003F3D                 lea     rdx, [rbp+var_D0]
__text:0000000100003F44                 mov     rsi, [rbp+var_C8]
__text:0000000100003F4B                 shl     rsi, 1
__text:0000000100003F4F                 mov     [rbp+var_D0], rsi
__text:0000000100003F56                 mov     [rbp+var_68], rdx
__text:0000000100003F5A                 mov     [rbp+var_70], rcx
__text:0000000100003F5E                 mov     rcx, [rbp+var_68]
__text:0000000100003F62                 mov     rdx, [rbp+var_70]
__text:0000000100003F66                 mov     [rbp+var_50], rcx
__text:0000000100003F6A                 mov     [rbp+var_58], rdx
__text:0000000100003F6E                 mov     rcx, [rbp+var_50]
__text:0000000100003F72                 mov     rdx, [rbp+var_58]
__text:0000000100003F76                 mov     [rbp+var_38], rax
__text:0000000100003F7A                 mov     [rbp+var_40], rcx
__text:0000000100003F7E                 mov     [rbp+var_48], rdx
__text:0000000100003F82                 mov     rax, [rbp+var_40]
__text:0000000100003F86                 mov     rax, [rax]
__text:0000000100003F89                 mov     rcx, [rbp+var_48]
__text:0000000100003F8D                 cmp     rax, [rcx]
__text:0000000100003F90                 jnb     loc_100003FA6
__text:0000000100003F96                 mov     rax, [rbp+var_58]
__text:0000000100003F9A                 mov     [rbp+var_158], rax
__text:0000000100003FA1                 jmp     loc_100003FB1
__text:0000000100003FA6 ; ---------------------------------------------------------------------------
__text:0000000100003FA6
__text:0000000100003FA6 loc_100003FA6:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+1C0↑j
__text:0000000100003FA6                 mov     rax, [rbp+var_50]
__text:0000000100003FAA                 mov     [rbp+var_158], rax
__text:0000000100003FB1
__text:0000000100003FB1 loc_100003FB1:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+1D1↑j
__text:0000000100003FB1                 mov     rax, [rbp+var_158]
__text:0000000100003FB8                 mov     rax, [rax]
__text:0000000100003FBB                 mov     [rbp+var_A8], rax
__text:0000000100003FC2
__text:0000000100003FC2 loc_100003FC2:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+15D↑j
__text:0000000100003FC2                 lea     rdi, [rbp+var_130]
__text:0000000100003FC9                 mov     rsi, [rbp+var_A8]
__text:0000000100003FD0                 mov     rax, [rbp+var_148]
__text:0000000100003FD7                 mov     [rbp+var_30], rax
__text:0000000100003FDB                 mov     rcx, [rbp+var_30]
__text:0000000100003FDF                 mov     rdx, [rcx+8]
__text:0000000100003FE3                 mov     rcx, [rcx]
__text:0000000100003FE6                 sub     rdx, rcx
__text:0000000100003FE9                 sar     rdx, 2
__text:0000000100003FED                 mov     rcx, [rbp+var_108]
__text:0000000100003FF4                 call    j___ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC1EmmS3_ ; std::__1::__split_buffer<int,std::__1::allocator<int> &>::__split_buffer(ulong,ulong,std::__1::allocator<int> &)
__text:0000000100003FF9                 mov     rax, [rbp+var_108]
__text:0000000100004000                 mov     rcx, [rbp+var_120]
__text:0000000100004007                 mov     [rbp+var_28], rcx
__text:000000010000400B                 mov     rcx, [rbp+var_28]
__text:000000010000400F                 mov     rdx, [rbp+var_100]
__text:0000000100004016                 mov     [rbp+var_20], rdx
__text:000000010000401A                 mov     rdx, [rbp+var_20]
__text:000000010000401E                 mov     [rbp+var_8], rax
__text:0000000100004022                 mov     [rbp+var_10], rcx
__text:0000000100004026                 mov     [rbp+var_18], rdx
__text:000000010000402A                 mov     rax, [rbp+var_10]
__text:000000010000402E                 cmp     rax, 0
__text:0000000100004034                 mov     [rbp+var_160], rax
__text:000000010000403B                 jz      loc_10000405E
__text:0000000100004041                 mov     rax, [rbp+var_160]
__text:0000000100004048                 mov     rcx, [rbp+var_18]
__text:000000010000404C                 mov     edx, [rcx]
__text:000000010000404E                 mov     rcx, [rbp+var_160]
__text:0000000100004055                 mov     [rcx], edx
__text:0000000100004057                 mov     [rbp+var_168], rax
__text:000000010000405E
__text:000000010000405E loc_10000405E:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+26B↑j
__text:000000010000405E                 mov     rax, [rbp+var_120]
__text:0000000100004065                 add     rax, 4
__text:0000000100004069                 mov     [rbp+var_120], rax
__text:0000000100004070                 lea     rsi, [rbp+var_130]
__text:0000000100004077                 mov     rdi, [rbp+var_148]
__text:000000010000407E                 call    j___ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE ; std::__1::vector<int,std::__1::allocator<int>>::__swap_out_circular_buffer(std::__1::__split_buffer<int,std::__1::allocator<int>&> &)
__text:0000000100004083                 jmp     $+5
__text:0000000100004088 ; ---------------------------------------------------------------------------
__text:0000000100004088
__text:0000000100004088 loc_100004088:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+2B3↑j
__text:0000000100004088                 lea     rdi, [rbp+var_130]
__text:000000010000408F                 call    j___ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev ; std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()
__text:0000000100004094                 add     rsp, 170h
__text:000000010000409B                 pop     rbp
__text:000000010000409C                 retn
__text:000000010000409C __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_ endp
__text:000000010000409C
__text:000000010000409D ; ---------------------------------------------------------------------------
__text:000000010000409D                 mov     ecx, edx
__text:000000010000409F                 mov     [rbp-138h], rax
__text:00000001000040A6                 mov     [rbp-13Ch], ecx
__text:00000001000040AC                 lea     rdi, [rbp-130h]
__text:00000001000040B3                 call    j___ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev ; std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()
__text:00000001000040B8                 jmp     $+5
__text:00000001000040BD ; ---------------------------------------------------------------------------
__text:00000001000040BD
__text:00000001000040BD loc_1000040BD:                          ; CODE XREF: __text:00000001000040B8↑j
__text:00000001000040BD                 jmp     $+5
__text:00000001000040C2 ; ---------------------------------------------------------------------------
__text:00000001000040C2
__text:00000001000040C2 loc_1000040C2:                          ; CODE XREF: __text:loc_1000040BD↑j
__text:00000001000040C2                 mov     rdi, [rbp-138h]
__text:00000001000040C9                 call    __Unwind_Resume
__text:00000001000040CE ; ---------------------------------------------------------------------------
__text:00000001000040CE                 mov     ecx, edx
__text:00000001000040D0                 mov     rdi, rax
__text:00000001000040D3                 mov     [rbp-16Ch], ecx
__text:00000001000040D9                 call    ___clang_call_terminate
__text:00000001000040D9 ; ---------------------------------------------------------------------------
__text:00000001000040DE                 align 20h
__text:00000001000040E0
__text:00000001000040E0 ; =============== S U B R O U T I N E =======================================
__text:00000001000040E0
__text:00000001000040E0 ; Attributes: bp-based frame
__text:00000001000040E0
__text:00000001000040E0 ; std::__1::__split_buffer<int, std::__1::allocator<int> &>::__split_buffer(unsigned long, unsigned long, std::__1::allocator<int> &)
__text:00000001000040E0 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC1EmmS3_ proc near
__text:00000001000040E0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC1EmmS3__ptr↓o
__text:00000001000040E0
__text:00000001000040E0 var_20          = qword ptr -20h
__text:00000001000040E0 var_18          = qword ptr -18h
__text:00000001000040E0 var_10          = qword ptr -10h
__text:00000001000040E0 var_8           = qword ptr -8
__text:00000001000040E0
__text:00000001000040E0                 push    rbp
__text:00000001000040E1                 mov     rbp, rsp
__text:00000001000040E4                 sub     rsp, 20h
__text:00000001000040E8                 mov     [rbp+var_8], rdi
__text:00000001000040EC                 mov     [rbp+var_10], rsi
__text:00000001000040F0                 mov     [rbp+var_18], rdx
__text:00000001000040F4                 mov     [rbp+var_20], rcx
__text:00000001000040F8                 mov     rdi, [rbp+var_8]
__text:00000001000040FC                 mov     rsi, [rbp+var_10]
__text:0000000100004100                 mov     rdx, [rbp+var_18]
__text:0000000100004104                 mov     rcx, [rbp+var_20]
__text:0000000100004108                 call    j___ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_ ; std::__1::__split_buffer<int,std::__1::allocator<int> &>::__split_buffer(ulong,ulong,std::__1::allocator<int> &)
__text:000000010000410D                 add     rsp, 20h
__text:0000000100004111                 pop     rbp
__text:0000000100004112                 retn
__text:0000000100004112 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC1EmmS3_ endp
__text:0000000100004112
__text:0000000100004112 ; ---------------------------------------------------------------------------
__text:0000000100004113                 align 20h
__text:0000000100004120
__text:0000000100004120 ; =============== S U B R O U T I N E =======================================
__text:0000000100004120
__text:0000000100004120 ; Attributes: bp-based frame
__text:0000000100004120
__text:0000000100004120 ; std::__1::vector<int, std::__1::allocator<int>>::__swap_out_circular_buffer(std::__1::__split_buffer<int, std::__1::allocator<int>&> &)
__text:0000000100004120 __ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE proc near
__text:0000000100004120                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE_ptr↓o
__text:0000000100004120
__text:0000000100004120 var_138         = qword ptr -138h
__text:0000000100004120 var_130         = qword ptr -130h
__text:0000000100004120 var_128         = qword ptr -128h
__text:0000000100004120 var_120         = qword ptr -120h
__text:0000000100004120 var_118         = qword ptr -118h
__text:0000000100004120 var_110         = qword ptr -110h
__text:0000000100004120 var_108         = qword ptr -108h
__text:0000000100004120 var_100         = qword ptr -100h
__text:0000000100004120 var_F8          = qword ptr -0F8h
__text:0000000100004120 var_F0          = qword ptr -0F0h
__text:0000000100004120 var_E8          = qword ptr -0E8h
__text:0000000100004120 var_E0          = qword ptr -0E0h
__text:0000000100004120 var_D8          = qword ptr -0D8h
__text:0000000100004120 var_D0          = qword ptr -0D0h
__text:0000000100004120 var_C8          = qword ptr -0C8h
__text:0000000100004120 var_C0          = qword ptr -0C0h
__text:0000000100004120 var_B8          = qword ptr -0B8h
__text:0000000100004120 var_B0          = qword ptr -0B0h
__text:0000000100004120 var_A8          = qword ptr -0A8h
__text:0000000100004120 var_A0          = qword ptr -0A0h
__text:0000000100004120 var_98          = qword ptr -98h
__text:0000000100004120 var_90          = qword ptr -90h
__text:0000000100004120 var_88          = qword ptr -88h
__text:0000000100004120 var_80          = qword ptr -80h
__text:0000000100004120 var_78          = qword ptr -78h
__text:0000000100004120 var_70          = qword ptr -70h
__text:0000000100004120 var_68          = qword ptr -68h
__text:0000000100004120 var_60          = qword ptr -60h
__text:0000000100004120 var_58          = qword ptr -58h
__text:0000000100004120 var_50          = qword ptr -50h
__text:0000000100004120 var_48          = qword ptr -48h
__text:0000000100004120 var_40          = qword ptr -40h
__text:0000000100004120 var_38          = qword ptr -38h
__text:0000000100004120 var_30          = qword ptr -30h
__text:0000000100004120 var_28          = qword ptr -28h
__text:0000000100004120 var_20          = qword ptr -20h
__text:0000000100004120 var_18          = qword ptr -18h
__text:0000000100004120 var_10          = qword ptr -10h
__text:0000000100004120 var_8           = qword ptr -8
__text:0000000100004120
__text:0000000100004120                 push    rbp
__text:0000000100004121                 mov     rbp, rsp
__text:0000000100004124                 sub     rsp, 140h
__text:000000010000412B                 lea     rax, [rbp+var_E8]
__text:0000000100004132                 lea     rcx, [rbp+var_88]
__text:0000000100004139                 lea     rdx, [rbp+var_58]
__text:000000010000413D                 mov     r8, 0
__text:0000000100004147                 mov     [rbp+var_110], rdi
__text:000000010000414E                 mov     [rbp+var_118], rsi
__text:0000000100004155                 mov     rsi, [rbp+var_110]
__text:000000010000415C                 mov     rdi, rsi
__text:000000010000415F                 mov     [rbp+var_108], rdi
__text:0000000100004166                 mov     rdi, [rbp+var_108]
__text:000000010000416D                 add     rdi, 10h
__text:0000000100004174                 mov     [rbp+var_100], rdi
__text:000000010000417B                 mov     rdi, [rbp+var_100]
__text:0000000100004182                 mov     [rbp+var_F8], rdi
__text:0000000100004189                 mov     rdi, [rbp+var_F8]
__text:0000000100004190                 mov     r9, [rsi]
__text:0000000100004193                 mov     r10, [rsi+8]
__text:0000000100004197                 mov     r11, [rbp+var_118]
__text:000000010000419E                 add     r11, 8
__text:00000001000041A5                 mov     [rbp+var_8], rdi
__text:00000001000041A9                 mov     [rbp+var_10], r9
__text:00000001000041AD                 mov     [rbp+var_18], r10
__text:00000001000041B1                 mov     [rbp+var_20], r11
__text:00000001000041B5                 mov     rdi, [rbp+var_18]
__text:00000001000041B9                 mov     r9, [rbp+var_10]
__text:00000001000041BD                 sub     rdi, r9
__text:00000001000041C0                 sar     rdi, 2
__text:00000001000041C4                 mov     [rbp+var_28], rdi
__text:00000001000041C8                 mov     rdi, [rbp+var_28]
__text:00000001000041CC                 mov     r9, [rbp+var_20]
__text:00000001000041D0                 mov     r10, [r9]
__text:00000001000041D3                 sub     r8, rdi
__text:00000001000041D6                 shl     r8, 2
__text:00000001000041DA                 add     r10, r8
__text:00000001000041DD                 mov     [r9], r10
__text:00000001000041E0                 mov     rdi, [rbp+var_20]
__text:00000001000041E4                 mov     rdi, [rdi]      ; void *
__text:00000001000041E7                 mov     r8, [rbp+var_10]
__text:00000001000041EB                 mov     r9, [rbp+var_28]
__text:00000001000041EF                 shl     r9, 2
__text:00000001000041F3                 mov     [rbp+var_120], rsi
__text:00000001000041FA                 mov     rsi, r8         ; void *
__text:00000001000041FD                 mov     [rbp+var_128], rdx
__text:0000000100004204                 mov     rdx, r9         ; size_t
__text:0000000100004207                 mov     [rbp+var_130], rcx
__text:000000010000420E                 mov     [rbp+var_138], rax
__text:0000000100004215                 call    _memcpy
__text:000000010000421A                 mov     rax, [rbp+var_120]
__text:0000000100004221                 mov     rcx, [rbp+var_118]
__text:0000000100004228                 add     rcx, 8
__text:000000010000422F                 mov     [rbp+var_48], rax
__text:0000000100004233                 mov     [rbp+var_50], rcx
__text:0000000100004237                 mov     rax, [rbp+var_48]
__text:000000010000423B                 mov     [rbp+var_40], rax
__text:000000010000423F                 mov     rax, [rbp+var_40]
__text:0000000100004243                 mov     rax, [rax]
__text:0000000100004246                 mov     [rbp+var_58], rax
__text:000000010000424A                 mov     rax, [rbp+var_50]
__text:000000010000424E                 mov     [rbp+var_30], rax
__text:0000000100004252                 mov     rax, [rbp+var_30]
__text:0000000100004256                 mov     rax, [rax]
__text:0000000100004259                 mov     rcx, [rbp+var_48]
__text:000000010000425D                 mov     [rcx], rax
__text:0000000100004260                 mov     rax, [rbp+var_128]
__text:0000000100004267                 mov     [rbp+var_38], rax
__text:000000010000426B                 mov     rcx, [rbp+var_38]
__text:000000010000426F                 mov     rcx, [rcx]
__text:0000000100004272                 mov     rdx, [rbp+var_50]
__text:0000000100004276                 mov     [rdx], rcx
__text:0000000100004279                 mov     rcx, [rbp+var_120]
__text:0000000100004280                 add     rcx, 8
__text:0000000100004287                 mov     rdx, [rbp+var_118]
__text:000000010000428E                 add     rdx, 10h
__text:0000000100004295                 mov     [rbp+var_78], rcx
__text:0000000100004299                 mov     [rbp+var_80], rdx
__text:000000010000429D                 mov     rcx, [rbp+var_78]
__text:00000001000042A1                 mov     [rbp+var_70], rcx
__text:00000001000042A5                 mov     rcx, [rbp+var_70]
__text:00000001000042A9                 mov     rcx, [rcx]
__text:00000001000042AC                 mov     [rbp+var_88], rcx
__text:00000001000042B3                 mov     rcx, [rbp+var_80]
__text:00000001000042B7                 mov     [rbp+var_60], rcx
__text:00000001000042BB                 mov     rcx, [rbp+var_60]
__text:00000001000042BF                 mov     rcx, [rcx]
__text:00000001000042C2                 mov     rdx, [rbp+var_78]
__text:00000001000042C6                 mov     [rdx], rcx
__text:00000001000042C9                 mov     rcx, [rbp+var_130]
__text:00000001000042D0                 mov     [rbp+var_68], rcx
__text:00000001000042D4                 mov     rdx, [rbp+var_68]
__text:00000001000042D8                 mov     rdx, [rdx]
__text:00000001000042DB                 mov     rsi, [rbp+var_80]
__text:00000001000042DF                 mov     [rsi], rdx
__text:00000001000042E2                 mov     rdx, [rbp+var_120]
__text:00000001000042E9                 mov     [rbp+var_A0], rdx
__text:00000001000042F0                 mov     rdx, [rbp+var_A0]
__text:00000001000042F7                 add     rdx, 10h
__text:00000001000042FE                 mov     [rbp+var_98], rdx
__text:0000000100004305                 mov     rdx, [rbp+var_98]
__text:000000010000430C                 mov     [rbp+var_90], rdx
__text:0000000100004313                 mov     rdx, [rbp+var_90]
__text:000000010000431A                 mov     rsi, [rbp+var_118]
__text:0000000100004321                 mov     [rbp+var_B8], rsi
__text:0000000100004328                 mov     rsi, [rbp+var_B8]
__text:000000010000432F                 add     rsi, 18h
__text:0000000100004336                 mov     [rbp+var_B0], rsi
__text:000000010000433D                 mov     rsi, [rbp+var_B0]
__text:0000000100004344                 mov     [rbp+var_A8], rsi
__text:000000010000434B                 mov     rsi, [rbp+var_A8]
__text:0000000100004352                 mov     [rbp+var_D8], rdx
__text:0000000100004359                 mov     [rbp+var_E0], rsi
__text:0000000100004360                 mov     rdx, [rbp+var_D8]
__text:0000000100004367                 mov     [rbp+var_D0], rdx
__text:000000010000436E                 mov     rdx, [rbp+var_D0]
__text:0000000100004375                 mov     rdx, [rdx]
__text:0000000100004378                 mov     [rbp+var_E8], rdx
__text:000000010000437F                 mov     rdx, [rbp+var_E0]
__text:0000000100004386                 mov     [rbp+var_C0], rdx
__text:000000010000438D                 mov     rdx, [rbp+var_C0]
__text:0000000100004394                 mov     rdx, [rdx]
__text:0000000100004397                 mov     rsi, [rbp+var_D8]
__text:000000010000439E                 mov     [rsi], rdx
__text:00000001000043A1                 mov     rdx, [rbp+var_138]
__text:00000001000043A8                 mov     [rbp+var_C8], rdx
__text:00000001000043AF                 mov     rsi, [rbp+var_C8]
__text:00000001000043B6                 mov     rsi, [rsi]
__text:00000001000043B9                 mov     rdi, [rbp+var_E0]
__text:00000001000043C0                 mov     [rdi], rsi
__text:00000001000043C3                 mov     rsi, [rbp+var_118]
__text:00000001000043CA                 mov     rsi, [rsi+8]
__text:00000001000043CE                 mov     rdi, [rbp+var_118]
__text:00000001000043D5                 mov     [rdi], rsi
__text:00000001000043D8                 mov     rsi, [rbp+var_120]
__text:00000001000043DF                 mov     [rbp+var_F0], rsi
__text:00000001000043E6                 add     rsp, 140h
__text:00000001000043ED                 pop     rbp
__text:00000001000043EE                 retn
__text:00000001000043EE __ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE endp
__text:00000001000043EE
__text:00000001000043EE ; ---------------------------------------------------------------------------
__text:00000001000043EF                 align 10h
__text:00000001000043F0
__text:00000001000043F0 ; =============== S U B R O U T I N E =======================================
__text:00000001000043F0
__text:00000001000043F0 ; Attributes: bp-based frame
__text:00000001000043F0
__text:00000001000043F0 ; std::__1::__split_buffer<int, std::__1::allocator<int> &>::~__split_buffer()
__text:00000001000043F0 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev proc near
__text:00000001000043F0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev_ptr↓o
__text:00000001000043F0
__text:00000001000043F0 var_8           = qword ptr -8
__text:00000001000043F0
__text:00000001000043F0                 push    rbp
__text:00000001000043F1                 mov     rbp, rsp
__text:00000001000043F4                 sub     rsp, 10h
__text:00000001000043F8                 mov     [rbp+var_8], rdi
__text:00000001000043FC                 mov     rdi, [rbp+var_8]
__text:0000000100004400                 call    j___ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev ; std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()
__text:0000000100004405                 add     rsp, 10h
__text:0000000100004409                 pop     rbp
__text:000000010000440A                 retn
__text:000000010000440A __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev endp
__text:000000010000440A
__text:000000010000440A ; ---------------------------------------------------------------------------
__text:000000010000440B                 align 10h
__text:0000000100004410
__text:0000000100004410 ; =============== S U B R O U T I N E =======================================
__text:0000000100004410
__text:0000000100004410 ; Attributes: bp-based frame
__text:0000000100004410
__text:0000000100004410 ; std::__1::__split_buffer<int, std::__1::allocator<int> &>::~__split_buffer()
__text:0000000100004410 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev proc near
__text:0000000100004410                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev_ptr↓o
__text:0000000100004410
__text:0000000100004410 var_118         = qword ptr -118h
__text:0000000100004410 var_110         = qword ptr -110h
__text:0000000100004410 var_108         = qword ptr -108h
__text:0000000100004410 var_100         = qword ptr -100h
__text:0000000100004410 var_F0          = qword ptr -0F0h
__text:0000000100004410 var_E8          = qword ptr -0E8h
__text:0000000100004410 var_C8          = qword ptr -0C8h
__text:0000000100004410 var_C0          = qword ptr -0C0h
__text:0000000100004410 var_B8          = qword ptr -0B8h
__text:0000000100004410 var_B0          = qword ptr -0B0h
__text:0000000100004410 var_A8          = qword ptr -0A8h
__text:0000000100004410 var_90          = qword ptr -90h
__text:0000000100004410 var_88          = qword ptr -88h
__text:0000000100004410 var_80          = qword ptr -80h
__text:0000000100004410 var_78          = qword ptr -78h
__text:0000000100004410 var_70          = qword ptr -70h
__text:0000000100004410 var_68          = qword ptr -68h
__text:0000000100004410 var_60          = qword ptr -60h
__text:0000000100004410 var_58          = qword ptr -58h
__text:0000000100004410 var_50          = qword ptr -50h
__text:0000000100004410 var_48          = qword ptr -48h
__text:0000000100004410 var_40          = qword ptr -40h
__text:0000000100004410 var_38          = qword ptr -38h
__text:0000000100004410 var_30          = qword ptr -30h
__text:0000000100004410 var_28          = qword ptr -28h
__text:0000000100004410 var_20          = qword ptr -20h
__text:0000000100004410 var_18          = qword ptr -18h
__text:0000000100004410 var_10          = qword ptr -10h
__text:0000000100004410 var_8           = qword ptr -8
__text:0000000100004410
__text:0000000100004410                 push    rbp
__text:0000000100004411                 mov     rbp, rsp
__text:0000000100004414                 sub     rsp, 120h
__text:000000010000441B                 mov     [rbp+var_108], rdi
__text:0000000100004422                 mov     rdi, [rbp+var_108]
__text:0000000100004429                 mov     [rbp+var_100], rdi
__text:0000000100004430                 mov     rax, [rbp+var_100]
__text:0000000100004437                 mov     rcx, [rax+8]
__text:000000010000443B                 mov     [rbp+var_E8], rax
__text:0000000100004442                 mov     [rbp+var_F0], rcx
__text:0000000100004449                 mov     rax, [rbp+var_E8]
__text:0000000100004450                 mov     rcx, [rbp+var_F0]
__text:0000000100004457                 mov     [rbp+var_C0], rax
__text:000000010000445E                 mov     [rbp+var_C8], rcx
__text:0000000100004465                 mov     rax, [rbp+var_C0]
__text:000000010000446C                 mov     [rbp+var_110], rdi
__text:0000000100004473                 mov     [rbp+var_118], rax
__text:000000010000447A
__text:000000010000447A loc_10000447A:                          ; CODE XREF: std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()+F9↓j
__text:000000010000447A                 mov     rax, [rbp+var_C8]
__text:0000000100004481                 mov     rcx, [rbp+var_118]
__text:0000000100004488                 cmp     rax, [rcx+10h]
__text:000000010000448C                 jz      loc_10000450E
__text:0000000100004492                 mov     rax, [rbp+var_118]
__text:0000000100004499                 mov     [rbp+var_B8], rax
__text:00000001000044A0                 mov     rcx, [rbp+var_B8]
__text:00000001000044A7                 add     rcx, 18h
__text:00000001000044AE                 mov     [rbp+var_B0], rcx
__text:00000001000044B5                 mov     rcx, [rbp+var_B0]
__text:00000001000044BC                 mov     [rbp+var_A8], rcx
__text:00000001000044C3                 mov     rcx, [rbp+var_A8]
__text:00000001000044CA                 mov     rcx, [rcx+8]
__text:00000001000044CE                 mov     rdx, [rax+10h]
__text:00000001000044D2                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:00000001000044D9                 mov     [rax+10h], rdx
__text:00000001000044DD                 mov     [rbp+var_70], rdx
__text:00000001000044E1                 mov     rdx, [rbp+var_70]
__text:00000001000044E5                 mov     [rbp+var_88], rcx
__text:00000001000044EC                 mov     [rbp+var_90], rdx
__text:00000001000044F3                 mov     rcx, [rbp+var_88]
__text:00000001000044FA                 mov     rdx, [rbp+var_90]
__text:0000000100004501                 mov     [rbp+var_78], rcx
__text:0000000100004505                 mov     [rbp+var_80], rdx
__text:0000000100004509                 jmp     loc_10000447A
__text:000000010000450E ; ---------------------------------------------------------------------------
__text:000000010000450E
__text:000000010000450E loc_10000450E:                          ; CODE XREF: std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()+7C↑j
__text:000000010000450E                 mov     rax, [rbp+var_110]
__text:0000000100004515                 cmp     qword ptr [rax], 0
__text:000000010000451C                 jz      loc_1000045B3
__text:0000000100004522                 mov     rax, [rbp+var_110]
__text:0000000100004529                 mov     [rbp+var_38], rax
__text:000000010000452D                 mov     rcx, [rbp+var_38]
__text:0000000100004531                 add     rcx, 18h
__text:0000000100004538                 mov     [rbp+var_30], rcx
__text:000000010000453C                 mov     rcx, [rbp+var_30]
__text:0000000100004540                 mov     [rbp+var_28], rcx
__text:0000000100004544                 mov     rcx, [rbp+var_28]
__text:0000000100004548                 mov     rcx, [rcx+8]
__text:000000010000454C                 mov     rdx, [rax]
__text:000000010000454F                 mov     [rbp+var_20], rax
__text:0000000100004553                 mov     rsi, [rbp+var_20]
__text:0000000100004557                 mov     [rbp+var_18], rsi
__text:000000010000455B                 mov     rdi, [rbp+var_18]
__text:000000010000455F                 add     rdi, 18h
__text:0000000100004566                 mov     [rbp+var_10], rdi
__text:000000010000456A                 mov     rdi, [rbp+var_10]
__text:000000010000456E                 mov     [rbp+var_8], rdi
__text:0000000100004572                 mov     rdi, [rbp+var_8]
__text:0000000100004576                 mov     rdi, [rdi]
__text:0000000100004579                 mov     rsi, [rsi]
__text:000000010000457C                 sub     rdi, rsi
__text:000000010000457F                 sar     rdi, 2
__text:0000000100004583                 mov     [rbp+var_58], rcx
__text:0000000100004587                 mov     [rbp+var_60], rdx
__text:000000010000458B                 mov     [rbp+var_68], rdi
__text:000000010000458F                 mov     rcx, [rbp+var_58]
__text:0000000100004593                 mov     rdx, [rbp+var_60]
__text:0000000100004597                 mov     rsi, [rbp+var_68]
__text:000000010000459B                 mov     [rbp+var_40], rcx
__text:000000010000459F                 mov     [rbp+var_48], rdx
__text:00000001000045A3                 mov     [rbp+var_50], rsi
__text:00000001000045A7                 mov     rcx, [rbp+var_48]
__text:00000001000045AB                 mov     rdi, rcx        ; void *
__text:00000001000045AE                 call    __ZdlPv         ; operator delete(void *)
__text:00000001000045B3
__text:00000001000045B3 loc_1000045B3:                          ; CODE XREF: std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()+10C↑j
__text:00000001000045B3                 add     rsp, 120h
__text:00000001000045BA                 pop     rbp
__text:00000001000045BB                 retn
__text:00000001000045BB __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev endp
__text:00000001000045BB
__text:00000001000045BB ; ---------------------------------------------------------------------------
__text:00000001000045BC                 align 20h
__text:00000001000045C0
__text:00000001000045C0 ; =============== S U B R O U T I N E =======================================
__text:00000001000045C0
__text:00000001000045C0 ; Attributes: bp-based frame
__text:00000001000045C0
__text:00000001000045C0 ; std::__1::vector<int, std::__1::allocator<int>>::max_size(void)const
__text:00000001000045C0 __ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv proc near
__text:00000001000045C0                                         ; DATA XREF: __la_symbol_ptr:__ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv_ptr↓o
__text:00000001000045C0
__text:00000001000045C0 var_D8          = qword ptr -0D8h
__text:00000001000045C0 var_D0          = qword ptr -0D0h
__text:00000001000045C0 var_B8          = qword ptr -0B8h
__text:00000001000045C0 var_B0          = qword ptr -0B0h
__text:00000001000045C0 var_A8          = qword ptr -0A8h
__text:00000001000045C0 var_A0          = qword ptr -0A0h
__text:00000001000045C0 var_98          = qword ptr -98h
__text:00000001000045C0 var_90          = qword ptr -90h
__text:00000001000045C0 var_80          = qword ptr -80h
__text:00000001000045C0 var_78          = qword ptr -78h
__text:00000001000045C0 var_70          = byte ptr -70h
__text:00000001000045C0 var_68          = qword ptr -68h
__text:00000001000045C0 var_60          = qword ptr -60h
__text:00000001000045C0 var_58          = qword ptr -58h
__text:00000001000045C0 var_50          = qword ptr -50h
__text:00000001000045C0 var_48          = qword ptr -48h
__text:00000001000045C0 var_20          = qword ptr -20h
__text:00000001000045C0 var_18          = qword ptr -18h
__text:00000001000045C0 var_8           = qword ptr -8
__text:00000001000045C0
__text:00000001000045C0                 push    rbp
__text:00000001000045C1                 mov     rbp, rsp
__text:00000001000045C4                 sub     rsp, 58h
__text:00000001000045C8                 lea     rax, [rbp+var_70]
__text:00000001000045CC                 lea     rcx, [rbp+var_B8]
__text:00000001000045D3                 lea     rdx, [rbp+var_B0]
__text:00000001000045DA                 mov     rsi, 0FFFFFFFFFFFFFFFFh
__text:00000001000045E4                 mov     r8, 3FFFFFFFFFFFFFFFh
__text:00000001000045EE                 mov     [rbp+var_A8], rdi
__text:00000001000045F5                 mov     rdi, [rbp+var_A8]
__text:00000001000045FC                 mov     [rbp+var_A0], rdi
__text:0000000100004603                 mov     rdi, [rbp+var_A0]
__text:000000010000460A                 add     rdi, 10h
__text:0000000100004611                 mov     [rbp+var_98], rdi
__text:0000000100004618                 mov     rdi, [rbp+var_98]
__text:000000010000461F                 mov     [rbp+var_90], rdi
__text:0000000100004626                 mov     rdi, [rbp+var_90]
__text:000000010000462D                 mov     [rbp+var_20], rdi
__text:0000000100004631                 mov     rdi, [rbp+var_20]
__text:0000000100004635                 mov     [rbp+var_18], rdi
__text:0000000100004639                 mov     rdi, [rbp+var_18]
__text:000000010000463D                 mov     [rbp+var_8], rdi
__text:0000000100004641                 mov     [rbp+var_B0], r8
__text:0000000100004648                 shr     rsi, 1
__text:000000010000464C                 mov     [rbp+var_B8], rsi
__text:0000000100004653                 mov     [rbp+var_78], rdx
__text:0000000100004657                 mov     [rbp+var_80], rcx
__text:000000010000465B                 mov     rcx, [rbp+var_78]
__text:000000010000465F                 mov     rdx, [rbp+var_80]
__text:0000000100004663                 mov     [rbp+var_60], rcx
__text:0000000100004667                 mov     [rbp+var_68], rdx
__text:000000010000466B                 mov     rcx, [rbp+var_68]
__text:000000010000466F                 mov     rdx, [rbp+var_60]
__text:0000000100004673                 mov     [rbp+var_48], rax
__text:0000000100004677                 mov     [rbp+var_50], rcx
__text:000000010000467B                 mov     [rbp+var_58], rdx
__text:000000010000467F                 mov     rax, [rbp+var_50]
__text:0000000100004683                 mov     rax, [rax]
__text:0000000100004686                 mov     rcx, [rbp+var_58]
__text:000000010000468A                 cmp     rax, [rcx]
__text:000000010000468D                 jnb     loc_1000046A3
__text:0000000100004693                 mov     rax, [rbp+var_68]
__text:0000000100004697                 mov     [rbp+var_D0], rax
__text:000000010000469E                 jmp     loc_1000046AE
__text:00000001000046A3 ; ---------------------------------------------------------------------------
__text:00000001000046A3
__text:00000001000046A3 loc_1000046A3:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::max_size(void)+CD↑j
__text:00000001000046A3                 mov     rax, [rbp+var_60]
__text:00000001000046A7                 mov     [rbp+var_D0], rax
__text:00000001000046AE
__text:00000001000046AE loc_1000046AE:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::max_size(void)+DE↑j
__text:00000001000046AE                 mov     rax, [rbp+var_D0]
__text:00000001000046B5                 mov     [rbp+var_D8], rax
__text:00000001000046BC                 mov     rax, [rbp+var_D8]
__text:00000001000046C3                 mov     rax, [rax]
__text:00000001000046C6                 add     rsp, 58h
__text:00000001000046CA                 pop     rbp
__text:00000001000046CB                 retn
__text:00000001000046CB __ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv endp
__text:00000001000046CB
__text:00000001000046CB ; ---------------------------------------------------------------------------
__text:00000001000046CC                 align 10h
__text:00000001000046D0
__text:00000001000046D0 ; =============== S U B R O U T I N E =======================================
__text:00000001000046D0
__text:00000001000046D0 ; Attributes: bp-based frame
__text:00000001000046D0
__text:00000001000046D0 ; std::__1::__split_buffer<int, std::__1::allocator<int> &>::__split_buffer(unsigned long, unsigned long, std::__1::allocator<int> &)
__text:00000001000046D0 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_ proc near
__text:00000001000046D0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EmmS3__ptr↓o
__text:00000001000046D0
__text:00000001000046D0 var_160         = qword ptr -160h
__text:00000001000046D0 var_158         = qword ptr -158h
__text:00000001000046D0 var_150         = qword ptr -150h
__text:00000001000046D0 var_148         = qword ptr -148h
__text:00000001000046D0 var_140         = qword ptr -140h
__text:00000001000046D0 var_138         = qword ptr -138h
__text:00000001000046D0 var_130         = qword ptr -130h
__text:00000001000046D0 var_128         = qword ptr -128h
__text:00000001000046D0 var_120         = qword ptr -120h
__text:00000001000046D0 var_118         = qword ptr -118h
__text:00000001000046D0 var_110         = qword ptr -110h
__text:00000001000046D0 var_108         = qword ptr -108h
__text:00000001000046D0 var_100         = qword ptr -100h
__text:00000001000046D0 var_F8          = qword ptr -0F8h
__text:00000001000046D0 var_F0          = qword ptr -0F0h
__text:00000001000046D0 var_E8          = qword ptr -0E8h
__text:00000001000046D0 var_E0          = qword ptr -0E0h
__text:00000001000046D0 var_D8          = qword ptr -0D8h
__text:00000001000046D0 var_D0          = qword ptr -0D0h
__text:00000001000046D0 var_C8          = qword ptr -0C8h
__text:00000001000046D0 var_C0          = qword ptr -0C0h
__text:00000001000046D0 var_B8          = qword ptr -0B8h
__text:00000001000046D0 var_B0          = qword ptr -0B0h
__text:00000001000046D0 var_A8          = qword ptr -0A8h
__text:00000001000046D0 var_A0          = qword ptr -0A0h
__text:00000001000046D0 var_98          = qword ptr -98h
__text:00000001000046D0 var_90          = qword ptr -90h
__text:00000001000046D0 var_88          = qword ptr -88h
__text:00000001000046D0 var_80          = qword ptr -80h
__text:00000001000046D0 var_78          = qword ptr -78h
__text:00000001000046D0 var_70          = qword ptr -70h
__text:00000001000046D0 var_68          = qword ptr -68h
__text:00000001000046D0 var_60          = qword ptr -60h
__text:00000001000046D0 var_58          = qword ptr -58h
__text:00000001000046D0 var_50          = qword ptr -50h
__text:00000001000046D0 var_48          = qword ptr -48h
__text:00000001000046D0 var_40          = qword ptr -40h
__text:00000001000046D0 var_38          = qword ptr -38h
__text:00000001000046D0 var_30          = qword ptr -30h
__text:00000001000046D0 var_28          = qword ptr -28h
__text:00000001000046D0 var_20          = qword ptr -20h
__text:00000001000046D0 var_18          = qword ptr -18h
__text:00000001000046D0 var_10          = qword ptr -10h
__text:00000001000046D0 var_8           = qword ptr -8
__text:00000001000046D0
__text:00000001000046D0                 push    rbp
__text:00000001000046D1                 mov     rbp, rsp
__text:00000001000046D4                 sub     rsp, 160h
__text:00000001000046DB                 lea     rax, [rbp+var_28]
__text:00000001000046DF                 lea     r8, [rbp+var_48]
__text:00000001000046E3                 lea     r9, [rbp+var_148]
__text:00000001000046EA                 lea     r10, [rbp+var_120]
__text:00000001000046F1                 mov     [rbp+var_128], rdi
__text:00000001000046F8                 mov     [rbp+var_130], rsi
__text:00000001000046FF                 mov     [rbp+var_138], rdx
__text:0000000100004706                 mov     [rbp+var_140], rcx
__text:000000010000470D                 mov     rcx, [rbp+var_128]
__text:0000000100004714                 mov     rdx, rcx
__text:0000000100004717                 add     rdx, 18h
__text:000000010000471E                 mov     [rbp+var_110], r10
__text:0000000100004725                 mov     [rbp+var_118], 0FFFFFFFFFFFFFFFFh
__text:0000000100004730                 mov     rsi, [rbp+var_110]
__text:0000000100004737                 mov     rdi, [rbp+var_118]
__text:000000010000473E                 mov     [rbp+var_100], rsi
__text:0000000100004745                 mov     [rbp+var_108], rdi
__text:000000010000474C                 mov     rsi, [rbp+var_100]
__text:0000000100004753                 mov     qword ptr [rsi], 0
__text:000000010000475A                 mov     rsi, [rbp+var_120]
__text:0000000100004761                 mov     [rbp+var_148], rsi
__text:0000000100004768                 mov     [rbp+var_88], r9
__text:000000010000476F                 mov     rsi, [rbp+var_140]
__text:0000000100004776                 mov     [rbp+var_58], rdx
__text:000000010000477A                 mov     [rbp+var_60], 0
__text:0000000100004782                 mov     [rbp+var_68], rsi
__text:0000000100004786                 mov     rdx, [rbp+var_58]
__text:000000010000478A                 mov     rsi, [rbp+var_60]
__text:000000010000478E                 mov     rdi, [rbp+var_68]
__text:0000000100004792                 mov     [rbp+var_40], rdx
__text:0000000100004796                 mov     [rbp+var_48], rsi
__text:000000010000479A                 mov     [rbp+var_50], rdi
__text:000000010000479E                 mov     rdx, [rbp+var_40]
__text:00000001000047A2                 mov     [rbp+var_38], r8
__text:00000001000047A6                 mov     rsi, [rbp+var_38]
__text:00000001000047AA                 mov     rsi, [rsi]
__text:00000001000047AD                 mov     rdi, [rbp+var_50]
__text:00000001000047B1                 mov     [rbp+var_8], rdi
__text:00000001000047B5                 mov     rdi, [rbp+var_8]
__text:00000001000047B9                 mov     [rbp+var_20], rdx
__text:00000001000047BD                 mov     [rbp+var_28], rsi
__text:00000001000047C1                 mov     [rbp+var_30], rdi
__text:00000001000047C5                 mov     rdx, [rbp+var_20]
__text:00000001000047C9                 mov     [rbp+var_18], rax
__text:00000001000047CD                 mov     rax, [rbp+var_18]
__text:00000001000047D1                 mov     rax, [rax]
__text:00000001000047D4                 mov     [rdx], rax
__text:00000001000047D7                 mov     rax, [rbp+var_30]
__text:00000001000047DB                 mov     [rbp+var_10], rax
__text:00000001000047DF                 mov     rax, [rbp+var_10]
__text:00000001000047E3                 mov     [rdx+8], rax
__text:00000001000047E7                 cmp     [rbp+var_130], 0
__text:00000001000047F2                 mov     [rbp+var_158], rcx
__text:00000001000047F9                 jz      loc_100004884
__text:00000001000047FF                 mov     rax, [rbp+var_158]
__text:0000000100004806                 mov     [rbp+var_80], rax
__text:000000010000480A                 mov     rcx, [rbp+var_80]
__text:000000010000480E                 add     rcx, 18h
__text:0000000100004815                 mov     [rbp+var_78], rcx
__text:0000000100004819                 mov     rcx, [rbp+var_78]
__text:000000010000481D                 mov     [rbp+var_70], rcx
__text:0000000100004821                 mov     rcx, [rbp+var_70]
__text:0000000100004825                 mov     rcx, [rcx+8]
__text:0000000100004829                 mov     rdx, [rbp+var_130]
__text:0000000100004830                 mov     [rbp+var_A8], rcx
__text:0000000100004837                 mov     [rbp+var_B0], rdx
__text:000000010000483E                 mov     rcx, [rbp+var_A8]
__text:0000000100004845                 mov     rdx, [rbp+var_B0]
__text:000000010000484C                 mov     [rbp+var_90], rcx
__text:0000000100004853                 mov     [rbp+var_98], rdx
__text:000000010000485A                 mov     [rbp+var_A0], 0
__text:0000000100004865                 mov     rcx, [rbp+var_98]
__text:000000010000486C                 shl     rcx, 2
__text:0000000100004870                 mov     rdi, rcx        ; unsigned __int64
__text:0000000100004873                 call    __Znwm          ; operator new(ulong)
__text:0000000100004878                 mov     [rbp+var_160], rax
__text:000000010000487F                 jmp     loc_1000048F4
__text:0000000100004884 ; ---------------------------------------------------------------------------
__text:0000000100004884
__text:0000000100004884 loc_100004884:                          ; CODE XREF: std::__1::__split_buffer<int,std::__1::allocator<int> &>::__split_buffer(ulong,ulong,std::__1::allocator<int> &)+129↑j
__text:0000000100004884                 mov     rax, 0
__text:000000010000488E                 lea     rcx, [rbp+var_150]
__text:0000000100004895                 lea     rdx, [rbp+var_D8]
__text:000000010000489C                 mov     [rbp+var_C8], rdx
__text:00000001000048A3                 mov     [rbp+var_D0], 0FFFFFFFFFFFFFFFFh
__text:00000001000048AE                 mov     rdx, [rbp+var_C8]
__text:00000001000048B5                 mov     rsi, [rbp+var_D0]
__text:00000001000048BC                 mov     [rbp+var_B8], rdx
__text:00000001000048C3                 mov     [rbp+var_C0], rsi
__text:00000001000048CA                 mov     rdx, [rbp+var_B8]
__text:00000001000048D1                 mov     qword ptr [rdx], 0
__text:00000001000048D8                 mov     rdx, [rbp+var_D8]
__text:00000001000048DF                 mov     [rbp+var_150], rdx
__text:00000001000048E6                 mov     [rbp+var_E0], rcx
__text:00000001000048ED                 mov     [rbp+var_160], rax
__text:00000001000048F4
__text:00000001000048F4 loc_1000048F4:                          ; CODE XREF: std::__1::__split_buffer<int,std::__1::allocator<int> &>::__split_buffer(ulong,ulong,std::__1::allocator<int> &)+1AF↑j
__text:00000001000048F4                 mov     rax, [rbp+var_160]
__text:00000001000048FB                 mov     rcx, [rbp+var_158]
__text:0000000100004902                 mov     [rcx], rax
__text:0000000100004905                 mov     rax, [rcx]
__text:0000000100004908                 mov     rdx, [rbp+var_138]
__text:000000010000490F                 shl     rdx, 2
__text:0000000100004913                 add     rax, rdx
__text:0000000100004916                 mov     [rcx+10h], rax
__text:000000010000491A                 mov     [rcx+8], rax
__text:000000010000491E                 mov     rax, [rcx]
__text:0000000100004921                 mov     rdx, [rbp+var_130]
__text:0000000100004928                 shl     rdx, 2
__text:000000010000492C                 add     rax, rdx
__text:000000010000492F                 mov     [rbp+var_F8], rcx
__text:0000000100004936                 mov     rdx, [rbp+var_F8]
__text:000000010000493D                 add     rdx, 18h
__text:0000000100004944                 mov     [rbp+var_F0], rdx
__text:000000010000494B                 mov     rdx, [rbp+var_F0]
__text:0000000100004952                 mov     [rbp+var_E8], rdx
__text:0000000100004959                 mov     rdx, [rbp+var_E8]
__text:0000000100004960                 mov     [rdx], rax
__text:0000000100004963                 add     rsp, 160h
__text:000000010000496A                 pop     rbp
__text:000000010000496B                 retn
__text:000000010000496B __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_ endp
__text:000000010000496B
__text:000000010000496B ; ---------------------------------------------------------------------------
__text:000000010000496C                 align 10h
__text:0000000100004970
__text:0000000100004970 ; =============== S U B R O U T I N E =======================================
__text:0000000100004970
__text:0000000100004970 ; Attributes: bp-based frame
__text:0000000100004970
__text:0000000100004970 ; std::__1::vector<int, std::__1::allocator<int>>::~vector()
__text:0000000100004970 __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev proc near
__text:0000000100004970                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev_ptr↓o
__text:0000000100004970
__text:0000000100004970 var_8           = qword ptr -8
__text:0000000100004970
__text:0000000100004970                 push    rbp
__text:0000000100004971                 mov     rbp, rsp
__text:0000000100004974                 sub     rsp, 10h
__text:0000000100004978                 mov     [rbp+var_8], rdi
__text:000000010000497C                 mov     rdi, [rbp+var_8]
__text:0000000100004980                 call    j___ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev ; std::__1::__vector_base<int,std::__1::allocator<int>>::~__vector_base()
__text:0000000100004985                 add     rsp, 10h
__text:0000000100004989                 pop     rbp
__text:000000010000498A                 retn
__text:000000010000498A __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev endp
__text:000000010000498A
__text:000000010000498A ; ---------------------------------------------------------------------------
__text:000000010000498B                 align 10h
__text:0000000100004990
__text:0000000100004990 ; =============== S U B R O U T I N E =======================================
__text:0000000100004990
__text:0000000100004990 ; Attributes: bp-based frame
__text:0000000100004990
__text:0000000100004990 ; std::__1::__vector_base<int, std::__1::allocator<int>>::~__vector_base()
__text:0000000100004990 __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev proc near
__text:0000000100004990                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev_ptr↓o
__text:0000000100004990
__text:0000000100004990 var_130         = qword ptr -130h
__text:0000000100004990 var_128         = qword ptr -128h
__text:0000000100004990 var_120         = qword ptr -120h
__text:0000000100004990 var_118         = qword ptr -118h
__text:0000000100004990 var_110         = qword ptr -110h
__text:0000000100004990 var_108         = qword ptr -108h
__text:0000000100004990 var_100         = qword ptr -100h
__text:0000000100004990 var_F8          = qword ptr -0F8h
__text:0000000100004990 var_F0          = qword ptr -0F0h
__text:0000000100004990 var_E8          = qword ptr -0E8h
__text:0000000100004990 var_E0          = qword ptr -0E0h
__text:0000000100004990 var_D8          = qword ptr -0D8h
__text:0000000100004990 var_D0          = qword ptr -0D0h
__text:0000000100004990 var_C8          = qword ptr -0C8h
__text:0000000100004990 var_C0          = qword ptr -0C0h
__text:0000000100004990 var_B8          = qword ptr -0B8h
__text:0000000100004990 var_B0          = qword ptr -0B0h
__text:0000000100004990 var_A8          = qword ptr -0A8h
__text:0000000100004990 var_A0          = qword ptr -0A0h
__text:0000000100004990 var_98          = qword ptr -98h
__text:0000000100004990 var_90          = qword ptr -90h
__text:0000000100004990 var_88          = qword ptr -88h
__text:0000000100004990 var_80          = qword ptr -80h
__text:0000000100004990 var_78          = qword ptr -78h
__text:0000000100004990 var_60          = qword ptr -60h
__text:0000000100004990 var_58          = qword ptr -58h
__text:0000000100004990 var_50          = qword ptr -50h
__text:0000000100004990 var_48          = qword ptr -48h
__text:0000000100004990 var_40          = qword ptr -40h
__text:0000000100004990 var_28          = qword ptr -28h
__text:0000000100004990 var_20          = qword ptr -20h
__text:0000000100004990 var_18          = qword ptr -18h
__text:0000000100004990 var_10          = qword ptr -10h
__text:0000000100004990 var_8           = qword ptr -8
__text:0000000100004990
__text:0000000100004990                 push    rbp
__text:0000000100004991                 mov     rbp, rsp
__text:0000000100004994                 sub     rsp, 130h
__text:000000010000499B                 lea     rax, [rbp+var_120]
__text:00000001000049A2                 lea     rcx, [rbp+var_110]
__text:00000001000049A9                 mov     [rbp+var_118], rdi
__text:00000001000049B0                 mov     rdi, [rbp+var_118]
__text:00000001000049B7                 mov     rdx, [rdi]
__text:00000001000049BA                 mov     [rbp+var_100], rcx
__text:00000001000049C1                 mov     [rbp+var_108], 0FFFFFFFFFFFFFFFFh
__text:00000001000049CC                 mov     rcx, [rbp+var_100]
__text:00000001000049D3                 mov     rsi, [rbp+var_108]
__text:00000001000049DA                 mov     [rbp+var_F0], rcx
__text:00000001000049E1                 mov     [rbp+var_F8], rsi
__text:00000001000049E8                 mov     rcx, [rbp+var_F0]
__text:00000001000049EF                 mov     qword ptr [rcx], 0
__text:00000001000049F6                 mov     rcx, [rbp+var_110]
__text:00000001000049FD                 mov     [rbp+var_120], rcx
__text:0000000100004A04                 mov     [rbp+var_B8], rax
__text:0000000100004A0B                 cmp     rdx, 0
__text:0000000100004A12                 mov     [rbp+var_128], rdi
__text:0000000100004A19                 jz      loc_100004B82
__text:0000000100004A1F                 mov     rax, [rbp+var_128]
__text:0000000100004A26                 mov     [rbp+var_78], rax
__text:0000000100004A2A                 mov     rcx, [rbp+var_78]
__text:0000000100004A2E                 mov     rdx, [rcx]
__text:0000000100004A31                 mov     [rbp+var_58], rcx
__text:0000000100004A35                 mov     [rbp+var_60], rdx
__text:0000000100004A39                 mov     rcx, [rbp+var_58]
__text:0000000100004A3D                 mov     [rbp+var_130], rcx
__text:0000000100004A44
__text:0000000100004A44 loc_100004A44:                          ; CODE XREF: std::__1::__vector_base<int,std::__1::allocator<int>>::~__vector_base()+11E↓j
__text:0000000100004A44                 mov     rax, [rbp+var_60]
__text:0000000100004A48                 mov     rcx, [rbp+var_130]
__text:0000000100004A4F                 cmp     rax, [rcx+8]
__text:0000000100004A53                 jz      loc_100004AB3
__text:0000000100004A59                 mov     rax, [rbp+var_130]
__text:0000000100004A60                 mov     [rbp+var_50], rax
__text:0000000100004A64                 mov     rcx, [rbp+var_50]
__text:0000000100004A68                 add     rcx, 10h
__text:0000000100004A6F                 mov     [rbp+var_48], rcx
__text:0000000100004A73                 mov     rcx, [rbp+var_48]
__text:0000000100004A77                 mov     [rbp+var_40], rcx
__text:0000000100004A7B                 mov     rcx, [rbp+var_40]
__text:0000000100004A7F                 mov     rdx, [rax+8]
__text:0000000100004A83                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:0000000100004A8A                 mov     [rax+8], rdx
__text:0000000100004A8E                 mov     [rbp+var_8], rdx
__text:0000000100004A92                 mov     rdx, [rbp+var_8]
__text:0000000100004A96                 mov     [rbp+var_20], rcx
__text:0000000100004A9A                 mov     [rbp+var_28], rdx
__text:0000000100004A9E                 mov     rcx, [rbp+var_20]
__text:0000000100004AA2                 mov     rdx, [rbp+var_28]
__text:0000000100004AA6                 mov     [rbp+var_10], rcx
__text:0000000100004AAA                 mov     [rbp+var_18], rdx
__text:0000000100004AAE                 jmp     loc_100004A44
__text:0000000100004AB3 ; ---------------------------------------------------------------------------
__text:0000000100004AB3
__text:0000000100004AB3 loc_100004AB3:                          ; CODE XREF: std::__1::__vector_base<int,std::__1::allocator<int>>::~__vector_base()+C3↑j
__text:0000000100004AB3                 mov     rax, [rbp+var_128]
__text:0000000100004ABA                 mov     [rbp+var_90], rax
__text:0000000100004AC1                 mov     rcx, [rbp+var_90]
__text:0000000100004AC8                 add     rcx, 10h
__text:0000000100004ACF                 mov     [rbp+var_88], rcx
__text:0000000100004AD6                 mov     rcx, [rbp+var_88]
__text:0000000100004ADD                 mov     [rbp+var_80], rcx
__text:0000000100004AE1                 mov     rcx, [rbp+var_80]
__text:0000000100004AE5                 mov     rdx, [rax]
__text:0000000100004AE8                 mov     [rbp+var_B0], rax
__text:0000000100004AEF                 mov     rsi, [rbp+var_B0]
__text:0000000100004AF6                 mov     [rbp+var_A8], rsi
__text:0000000100004AFD                 mov     rdi, [rbp+var_A8]
__text:0000000100004B04                 add     rdi, 10h
__text:0000000100004B0B                 mov     [rbp+var_A0], rdi
__text:0000000100004B12                 mov     rdi, [rbp+var_A0]
__text:0000000100004B19                 mov     [rbp+var_98], rdi
__text:0000000100004B20                 mov     rdi, [rbp+var_98]
__text:0000000100004B27                 mov     rdi, [rdi]
__text:0000000100004B2A                 mov     rsi, [rsi]
__text:0000000100004B2D                 sub     rdi, rsi
__text:0000000100004B30                 sar     rdi, 2
__text:0000000100004B34                 mov     [rbp+var_D8], rcx
__text:0000000100004B3B                 mov     [rbp+var_E0], rdx
__text:0000000100004B42                 mov     [rbp+var_E8], rdi
__text:0000000100004B49                 mov     rcx, [rbp+var_D8]
__text:0000000100004B50                 mov     rdx, [rbp+var_E0]
__text:0000000100004B57                 mov     rsi, [rbp+var_E8]
__text:0000000100004B5E                 mov     [rbp+var_C0], rcx
__text:0000000100004B65                 mov     [rbp+var_C8], rdx
__text:0000000100004B6C                 mov     [rbp+var_D0], rsi
__text:0000000100004B73                 mov     rcx, [rbp+var_C8]
__text:0000000100004B7A                 mov     rdi, rcx        ; void *
__text:0000000100004B7D                 call    __ZdlPv         ; operator delete(void *)
__text:0000000100004B82
__text:0000000100004B82 loc_100004B82:                          ; CODE XREF: std::__1::__vector_base<int,std::__1::allocator<int>>::~__vector_base()+89↑j
__text:0000000100004B82                 add     rsp, 130h
__text:0000000100004B89                 pop     rbp
__text:0000000100004B8A                 retn
__text:0000000100004B8A __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev endp
__text:0000000100004B8A
__text:0000000100004B8A __text          ends
__text:0000000100004B8A