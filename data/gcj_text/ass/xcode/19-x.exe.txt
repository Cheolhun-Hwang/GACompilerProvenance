__text:00000001000011C0 ; =============== S U B R O U T I N E =======================================
__text:00000001000011C0
__text:00000001000011C0 ; Attributes: bp-based frame
__text:00000001000011C0
__text:00000001000011C0 ; __int64 __fastcall get(char)
__text:00000001000011C0                 public __Z3getc
__text:00000001000011C0 __Z3getc        proc near               ; CODE XREF: _main+637↓p
__text:00000001000011C0                                         ; _main+78B↓p
__text:00000001000011C0
__text:00000001000011C0 var_5           = byte ptr -5
__text:00000001000011C0 var_4           = dword ptr -4
__text:00000001000011C0
__text:00000001000011C0                 push    rbp
__text:00000001000011C1                 mov     rbp, rsp
__text:00000001000011C4                 mov     al, dil
__text:00000001000011C7                 mov     [rbp+var_5], al
__text:00000001000011CA                 movsx   edi, [rbp+var_5]
__text:00000001000011CE                 cmp     edi, 6Fh ; 'o'
__text:00000001000011D4                 jnz     loc_1000011E6
__text:00000001000011DA                 mov     [rbp+var_4], 0
__text:00000001000011E1                 jmp     loc_1000012AA
__text:00000001000011E6 ; ---------------------------------------------------------------------------
__text:00000001000011E6
__text:00000001000011E6 loc_1000011E6:                          ; CODE XREF: get(char)+14↑j
__text:00000001000011E6                 movsx   eax, [rbp+var_5]
__text:00000001000011EA                 cmp     eax, 69h ; 'i'
__text:00000001000011EF                 jnz     loc_100001201
__text:00000001000011F5                 mov     [rbp+var_4], 1
__text:00000001000011FC                 jmp     loc_1000012AA
__text:0000000100001201 ; ---------------------------------------------------------------------------
__text:0000000100001201
__text:0000000100001201 loc_100001201:                          ; CODE XREF: get(char)+2F↑j
__text:0000000100001201                 movsx   eax, [rbp+var_5]
__text:0000000100001205                 cmp     eax, 65h ; 'e'
__text:000000010000120A                 jnz     loc_10000121C
__text:0000000100001210                 mov     [rbp+var_4], 2
__text:0000000100001217                 jmp     loc_1000012AA
__text:000000010000121C ; ---------------------------------------------------------------------------
__text:000000010000121C
__text:000000010000121C loc_10000121C:                          ; CODE XREF: get(char)+4A↑j
__text:000000010000121C                 movsx   eax, [rbp+var_5]
__text:0000000100001220                 cmp     eax, 61h ; 'a'
__text:0000000100001225                 jnz     loc_100001237
__text:000000010000122B                 mov     [rbp+var_4], 3
__text:0000000100001232                 jmp     loc_1000012AA
__text:0000000100001237 ; ---------------------------------------------------------------------------
__text:0000000100001237
__text:0000000100001237 loc_100001237:                          ; CODE XREF: get(char)+65↑j
__text:0000000100001237                 movsx   eax, [rbp+var_5]
__text:000000010000123B                 cmp     eax, 73h ; 's'
__text:0000000100001240                 jnz     loc_100001252
__text:0000000100001246                 mov     [rbp+var_4], 4
__text:000000010000124D                 jmp     loc_1000012AA
__text:0000000100001252 ; ---------------------------------------------------------------------------
__text:0000000100001252
__text:0000000100001252 loc_100001252:                          ; CODE XREF: get(char)+80↑j
__text:0000000100001252                 movsx   eax, [rbp+var_5]
__text:0000000100001256                 cmp     eax, 74h ; 't'
__text:000000010000125B                 jnz     loc_10000126D
__text:0000000100001261                 mov     [rbp+var_4], 5
__text:0000000100001268                 jmp     loc_1000012AA
__text:000000010000126D ; ---------------------------------------------------------------------------
__text:000000010000126D
__text:000000010000126D loc_10000126D:                          ; CODE XREF: get(char)+9B↑j
__text:000000010000126D                 movsx   eax, [rbp+var_5]
__text:0000000100001271                 cmp     eax, 62h ; 'b'
__text:0000000100001276                 jnz     loc_100001288
__text:000000010000127C                 mov     [rbp+var_4], 6
__text:0000000100001283                 jmp     loc_1000012AA
__text:0000000100001288 ; ---------------------------------------------------------------------------
__text:0000000100001288
__text:0000000100001288 loc_100001288:                          ; CODE XREF: get(char)+B6↑j
__text:0000000100001288                 movsx   eax, [rbp+var_5]
__text:000000010000128C                 cmp     eax, 67h ; 'g'
__text:0000000100001291                 jnz     loc_1000012A3
__text:0000000100001297                 mov     [rbp+var_4], 7
__text:000000010000129E                 jmp     loc_1000012AA
__text:00000001000012A3 ; ---------------------------------------------------------------------------
__text:00000001000012A3
__text:00000001000012A3 loc_1000012A3:                          ; CODE XREF: get(char)+D1↑j
__text:00000001000012A3                 mov     [rbp+var_4], 0FFFFFFFFh
__text:00000001000012AA
__text:00000001000012AA loc_1000012AA:                          ; CODE XREF: get(char)+21↑j
__text:00000001000012AA                                         ; get(char)+3C↑j ...
__text:00000001000012AA                 mov     eax, [rbp+var_4]
__text:00000001000012AD                 pop     rbp
__text:00000001000012AE                 retn
__text:00000001000012AE __Z3getc        endp
__text:00000001000012AE
__text:00000001000012AE ; ---------------------------------------------------------------------------
__text:00000001000012AF                 align 10h
__text:00000001000012B0
__text:00000001000012B0 ; =============== S U B R O U T I N E =======================================
__text:00000001000012B0
__text:00000001000012B0 ; Attributes: bp-based frame
__text:00000001000012B0
__text:00000001000012B0 ; __int64 __fastcall go(int)
__text:00000001000012B0                 public __Z2goi
__text:00000001000012B0 __Z2goi         proc near               ; CODE XREF: go(int)+98↓p
__text:00000001000012B0                                         ; _main+F09↓p ...
__text:00000001000012B0
__text:00000001000012B0 var_C           = dword ptr -0Ch
__text:00000001000012B0 var_8           = dword ptr -8
__text:00000001000012B0 var_4           = dword ptr -4
__text:00000001000012B0
__text:00000001000012B0                 push    rbp
__text:00000001000012B1                 mov     rbp, rsp
__text:00000001000012B4                 sub     rsp, 10h
__text:00000001000012B8                 lea     rax, _was
__text:00000001000012BF                 mov     [rbp+var_4], edi
__text:00000001000012C2                 movsxd  rcx, [rbp+var_4]
__text:00000001000012C6                 mov     dword ptr [rax+rcx*4], 1
__text:00000001000012CD                 mov     [rbp+var_8], 0
__text:00000001000012D4
__text:00000001000012D4 loc_1000012D4:                          ; CODE XREF: go(int)+B0↓j
__text:00000001000012D4                 cmp     [rbp+var_8], 22h ; '"'
__text:00000001000012DB                 jge     loc_100001365
__text:00000001000012E1                 lea     rax, _g
__text:00000001000012E8                 movsxd  rcx, [rbp+var_8]
__text:00000001000012EC                 movsxd  rdx, [rbp+var_4]
__text:00000001000012F0                 imul    rdx, 88h
__text:00000001000012F7                 add     rax, rdx
__text:00000001000012FA                 cmp     dword ptr [rax+rcx*4], 0
__text:0000000100001301                 jnz     loc_10000132D
__text:0000000100001307                 lea     rax, _g
__text:000000010000130E                 movsxd  rcx, [rbp+var_4]
__text:0000000100001312                 movsxd  rdx, [rbp+var_8]
__text:0000000100001316                 imul    rdx, 88h
__text:000000010000131D                 add     rax, rdx
__text:0000000100001320                 cmp     dword ptr [rax+rcx*4], 0
__text:0000000100001327                 jz      loc_100001350
__text:000000010000132D
__text:000000010000132D loc_10000132D:                          ; CODE XREF: go(int)+51↑j
__text:000000010000132D                 lea     rax, _was
__text:0000000100001334                 movsxd  rcx, [rbp+var_8]
__text:0000000100001338                 cmp     dword ptr [rax+rcx*4], 0
__text:000000010000133F                 jnz     loc_100001350
__text:0000000100001345                 mov     edi, [rbp+var_8] ; int
__text:0000000100001348                 call    __Z2goi         ; go(int)
__text:000000010000134D                 mov     [rbp+var_C], eax
__text:0000000100001350
__text:0000000100001350 loc_100001350:                          ; CODE XREF: go(int)+77↑j
__text:0000000100001350                                         ; go(int)+8F↑j
__text:0000000100001350                 jmp     $+5
__text:0000000100001355 ; ---------------------------------------------------------------------------
__text:0000000100001355
__text:0000000100001355 loc_100001355:                          ; CODE XREF: go(int):loc_100001350↑j
__text:0000000100001355                 mov     eax, [rbp+var_8]
__text:0000000100001358                 add     eax, 1
__text:000000010000135D                 mov     [rbp+var_8], eax
__text:0000000100001360                 jmp     loc_1000012D4
__text:0000000100001365 ; ---------------------------------------------------------------------------
__text:0000000100001365
__text:0000000100001365 loc_100001365:                          ; CODE XREF: go(int)+2B↑j
__text:0000000100001365                 mov     eax, 0
__text:000000010000136A                 add     rsp, 10h
__text:000000010000136E                 pop     rbp
__text:000000010000136F                 retn
__text:000000010000136F __Z2goi         endp
__text:000000010000136F
__text:0000000100001370
__text:0000000100001370 ; =============== S U B R O U T I N E =======================================
__text:0000000100001370
__text:0000000100001370 ; Attributes: bp-based frame
__text:0000000100001370
__text:0000000100001370 ; int __cdecl main(int argc, const char **argv, const char **envp)
__text:0000000100001370                 public _main
__text:0000000100001370 _main           proc near
__text:0000000100001370
__text:0000000100001370 var_580         = qword ptr -580h
__text:0000000100001370 var_578         = qword ptr -578h
__text:0000000100001370 var_56C         = dword ptr -56Ch
__text:0000000100001370 var_568         = qword ptr -568h
__text:0000000100001370 var_55C         = dword ptr -55Ch
__text:0000000100001370 var_558         = qword ptr -558h
__text:0000000100001370 var_550         = qword ptr -550h
__text:0000000100001370 var_548         = qword ptr -548h
__text:0000000100001370 var_53C         = dword ptr -53Ch
__text:0000000100001370 var_538         = qword ptr -538h
__text:0000000100001370 var_530         = qword ptr -530h
__text:0000000100001370 var_528         = qword ptr -528h
__text:0000000100001370 var_520         = qword ptr -520h
__text:0000000100001370 var_518         = qword ptr -518h
__text:0000000100001370 var_510         = qword ptr -510h
__text:0000000100001370 var_508         = qword ptr -508h
__text:0000000100001370 var_500         = qword ptr -500h
__text:0000000100001370 var_4F8         = qword ptr -4F8h
__text:0000000100001370 var_4F0         = qword ptr -4F0h
__text:0000000100001370 var_4E8         = qword ptr -4E8h
__text:0000000100001370 var_4E0         = qword ptr -4E0h
__text:0000000100001370 var_4D8         = qword ptr -4D8h
__text:0000000100001370 var_4D0         = qword ptr -4D0h
__text:0000000100001370 var_4C8         = qword ptr -4C8h
__text:0000000100001370 var_4C0         = qword ptr -4C0h
__text:0000000100001370 var_4B8         = qword ptr -4B8h
__text:0000000100001370 var_4B0         = qword ptr -4B0h
__text:0000000100001370 var_4A8         = qword ptr -4A8h
__text:0000000100001370 var_4A0         = qword ptr -4A0h
__text:0000000100001370 var_498         = qword ptr -498h
__text:0000000100001370 var_490         = qword ptr -490h
__text:0000000100001370 var_488         = qword ptr -488h
__text:0000000100001370 var_480         = qword ptr -480h
__text:0000000100001370 var_478         = dword ptr -478h
__text:0000000100001370 var_474         = dword ptr -474h
__text:0000000100001370 var_470         = dword ptr -470h
__text:0000000100001370 var_46C         = dword ptr -46Ch
__text:0000000100001370 var_468         = dword ptr -468h
__text:0000000100001370 var_464         = dword ptr -464h
__text:0000000100001370 var_460         = dword ptr -460h
__text:0000000100001370 var_45C         = dword ptr -45Ch
__text:0000000100001370 var_458         = dword ptr -458h
__text:0000000100001370 var_454         = dword ptr -454h
__text:0000000100001370 var_450         = dword ptr -450h
__text:0000000100001370 var_44C         = dword ptr -44Ch
__text:0000000100001370 var_448         = dword ptr -448h
__text:0000000100001370 var_444         = dword ptr -444h
__text:0000000100001370 var_440         = dword ptr -440h
__text:0000000100001370 var_43C         = dword ptr -43Ch
__text:0000000100001370 var_438         = dword ptr -438h
__text:0000000100001370 var_434         = dword ptr -434h
__text:0000000100001370 var_430         = dword ptr -430h
__text:0000000100001370 var_42C         = dword ptr -42Ch
__text:0000000100001370 var_428         = dword ptr -428h
__text:0000000100001370 var_424         = dword ptr -424h
__text:0000000100001370 var_420         = qword ptr -420h
__text:0000000100001370 var_418         = qword ptr -418h
__text:0000000100001370 var_410         = qword ptr -410h
__text:0000000100001370 var_408         = qword ptr -408h
__text:0000000100001370 var_400         = qword ptr -400h
__text:0000000100001370 var_3F8         = qword ptr -3F8h
__text:0000000100001370 var_3F0         = qword ptr -3F0h
__text:0000000100001370 var_3E8         = qword ptr -3E8h
__text:0000000100001370 var_3E0         = qword ptr -3E0h
__text:0000000100001370 var_3D8         = qword ptr -3D8h
__text:0000000100001370 var_3D0         = qword ptr -3D0h
__text:0000000100001370 var_3C8         = qword ptr -3C8h
__text:0000000100001370 var_3B0         = qword ptr -3B0h
__text:0000000100001370 var_3A8         = qword ptr -3A8h
__text:0000000100001370 var_390         = qword ptr -390h
__text:0000000100001370 var_388         = qword ptr -388h
__text:0000000100001370 var_380         = qword ptr -380h
__text:0000000100001370 var_378         = qword ptr -378h
__text:0000000100001370 var_370         = qword ptr -370h
__text:0000000100001370 var_358         = qword ptr -358h
__text:0000000100001370 var_350         = qword ptr -350h
__text:0000000100001370 var_348         = qword ptr -348h
__text:0000000100001370 var_340         = qword ptr -340h
__text:0000000100001370 var_338         = qword ptr -338h
__text:0000000100001370 var_330         = qword ptr -330h
__text:0000000100001370 var_328         = qword ptr -328h
__text:0000000100001370 var_320         = qword ptr -320h
__text:0000000100001370 var_318         = qword ptr -318h
__text:0000000100001370 var_310         = qword ptr -310h
__text:0000000100001370 var_308         = qword ptr -308h
__text:0000000100001370 var_300         = qword ptr -300h
__text:0000000100001370 var_2F8         = qword ptr -2F8h
__text:0000000100001370 var_2F0         = qword ptr -2F0h
__text:0000000100001370 var_2E8         = qword ptr -2E8h
__text:0000000100001370 var_2E0         = qword ptr -2E0h
__text:0000000100001370 var_2D8         = qword ptr -2D8h
__text:0000000100001370 var_2D0         = qword ptr -2D0h
__text:0000000100001370 var_2C8         = qword ptr -2C8h
__text:0000000100001370 var_2C0         = qword ptr -2C0h
__text:0000000100001370 var_2B8         = qword ptr -2B8h
__text:0000000100001370 var_2B0         = qword ptr -2B0h
__text:0000000100001370 var_2A8         = qword ptr -2A8h
__text:0000000100001370 var_2A0         = qword ptr -2A0h
__text:0000000100001370 var_298         = qword ptr -298h
__text:0000000100001370 var_290         = qword ptr -290h
__text:0000000100001370 var_288         = qword ptr -288h
__text:0000000100001370 var_280         = qword ptr -280h
__text:0000000100001370 var_278         = qword ptr -278h
__text:0000000100001370 var_270         = qword ptr -270h
__text:0000000100001370 var_268         = qword ptr -268h
__text:0000000100001370 var_260         = qword ptr -260h
__text:0000000100001370 var_258         = qword ptr -258h
__text:0000000100001370 var_250         = qword ptr -250h
__text:0000000100001370 var_248         = qword ptr -248h
__text:0000000100001370 var_240         = qword ptr -240h
__text:0000000100001370 var_238         = qword ptr -238h
__text:0000000100001370 var_230         = qword ptr -230h
__text:0000000100001370 var_228         = qword ptr -228h
__text:0000000100001370 var_220         = qword ptr -220h
__text:0000000100001370 var_218         = qword ptr -218h
__text:0000000100001370 var_210         = qword ptr -210h
__text:0000000100001370 var_208         = qword ptr -208h
__text:0000000100001370 var_200         = qword ptr -200h
__text:0000000100001370 var_1F8         = qword ptr -1F8h
__text:0000000100001370 var_1F0         = qword ptr -1F0h
__text:0000000100001370 var_1E8         = qword ptr -1E8h
__text:0000000100001370 var_1E0         = qword ptr -1E0h
__text:0000000100001370 var_1D8         = qword ptr -1D8h
__text:0000000100001370 var_1D0         = qword ptr -1D0h
__text:0000000100001370 var_1C8         = qword ptr -1C8h
__text:0000000100001370 var_1C0         = qword ptr -1C0h
__text:0000000100001370 var_1B8         = qword ptr -1B8h
__text:0000000100001370 var_1B0         = qword ptr -1B0h
__text:0000000100001370 var_1A8         = qword ptr -1A8h
__text:0000000100001370 var_1A0         = qword ptr -1A0h
__text:0000000100001370 var_198         = qword ptr -198h
__text:0000000100001370 var_190         = qword ptr -190h
__text:0000000100001370 var_188         = qword ptr -188h
__text:0000000100001370 var_180         = qword ptr -180h
__text:0000000100001370 var_178         = qword ptr -178h
__text:0000000100001370 var_170         = qword ptr -170h
__text:0000000100001370 var_168         = qword ptr -168h
__text:0000000100001370 var_160         = qword ptr -160h
__text:0000000100001370 var_158         = qword ptr -158h
__text:0000000100001370 var_150         = qword ptr -150h
__text:0000000100001370 var_148         = qword ptr -148h
__text:0000000100001370 var_140         = qword ptr -140h
__text:0000000100001370 var_138         = qword ptr -138h
__text:0000000100001370 var_130         = qword ptr -130h
__text:0000000100001370 var_128         = qword ptr -128h
__text:0000000100001370 var_120         = qword ptr -120h
__text:0000000100001370 var_118         = qword ptr -118h
__text:0000000100001370 var_110         = qword ptr -110h
__text:0000000100001370 var_108         = qword ptr -108h
__text:0000000100001370 var_100         = qword ptr -100h
__text:0000000100001370 var_F8          = qword ptr -0F8h
__text:0000000100001370 var_F0          = qword ptr -0F0h
__text:0000000100001370 var_E0          = qword ptr -0E0h
__text:0000000100001370 var_D8          = qword ptr -0D8h
__text:0000000100001370 var_D0          = byte ptr -0D0h
__text:0000000100001370 var_C8          = qword ptr -0C8h
__text:0000000100001370 var_C0          = qword ptr -0C0h
__text:0000000100001370 var_B8          = qword ptr -0B8h
__text:0000000100001370 var_B0          = qword ptr -0B0h
__text:0000000100001370 var_A8          = qword ptr -0A8h
__text:0000000100001370 var_98          = qword ptr -98h
__text:0000000100001370 var_90          = qword ptr -90h
__text:0000000100001370 var_88          = byte ptr -88h
__text:0000000100001370 var_80          = qword ptr -80h
__text:0000000100001370 var_78          = qword ptr -78h
__text:0000000100001370 var_70          = qword ptr -70h
__text:0000000100001370 var_68          = qword ptr -68h
__text:0000000100001370 var_60          = qword ptr -60h
__text:0000000100001370 var_50          = qword ptr -50h
__text:0000000100001370 var_48          = qword ptr -48h
__text:0000000100001370 var_40          = byte ptr -40h
__text:0000000100001370 var_38          = qword ptr -38h
__text:0000000100001370 var_30          = qword ptr -30h
__text:0000000100001370 var_28          = qword ptr -28h
__text:0000000100001370 var_20          = qword ptr -20h
__text:0000000100001370 var_18          = qword ptr -18h
__text:0000000100001370 var_10          = qword ptr -10h
__text:0000000100001370 var_8           = qword ptr -8
__text:0000000100001370
__text:0000000100001370                 push    rbp
__text:0000000100001371                 mov     rbp, rsp
__text:0000000100001374                 sub     rsp, 580h
__text:000000010000137B                 mov     rdi, cs:__ZNSt3__13cinE_ptr
__text:0000000100001382                 lea     rsi, [rbp+var_428]
__text:0000000100001389                 mov     [rbp+var_424], 0
__text:0000000100001393                 call    __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi ; std::__1::basic_istream<char,std::__1::char_traits<char>>::operator>>(int &)
__text:0000000100001398                 mov     [rbp+var_42C], 1
__text:00000001000013A2                 mov     [rbp+var_480], rax
__text:00000001000013A9
__text:00000001000013A9 loc_1000013A9:                          ; CODE XREF: _main+10F8↓j
__text:00000001000013A9                 mov     eax, [rbp+var_42C]
__text:00000001000013AF                 cmp     eax, [rbp+var_428]
__text:00000001000013B5                 jg      loc_10000246D
__text:00000001000013BB                 mov     rdi, cs:__ZNSt3__13cinE_ptr
__text:00000001000013C2                 lea     rsi, _n
__text:00000001000013C9                 call    __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi ; std::__1::basic_istream<char,std::__1::char_traits<char>>::operator>>(int &)
__text:00000001000013CE                 lea     rsi, _s
__text:00000001000013D5                 mov     rdi, rax
__text:00000001000013D8                 call    j___ZNSt3__1rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE ; std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)
__text:00000001000013DD                 lea     rsi, _s
__text:00000001000013E4                 mov     [rbp+var_420], rsi
__text:00000001000013EB                 mov     rsi, [rbp+var_420]
__text:00000001000013F2                 mov     [rbp+var_418], rsi
__text:00000001000013F9                 mov     rdi, [rbp+var_418]
__text:0000000100001400                 mov     [rbp+var_410], rdi
__text:0000000100001407                 mov     rdi, [rbp+var_410]
__text:000000010000140E                 mov     [rbp+var_408], rdi
__text:0000000100001415                 mov     rdi, [rbp+var_408]
__text:000000010000141C                 movzx   ecx, byte ptr [rdi]
__text:000000010000141F                 and     ecx, 1
__text:0000000100001425                 cmp     ecx, 0
__text:000000010000142B                 mov     [rbp+var_488], rax
__text:0000000100001432                 mov     [rbp+var_490], rsi
__text:0000000100001439                 jz      loc_100001480
__text:000000010000143F                 mov     rax, [rbp+var_490]
__text:0000000100001446                 mov     [rbp+var_3E8], rax
__text:000000010000144D                 mov     rcx, [rbp+var_3E8]
__text:0000000100001454                 mov     [rbp+var_3E0], rcx
__text:000000010000145B                 mov     rcx, [rbp+var_3E0]
__text:0000000100001462                 mov     [rbp+var_3D8], rcx
__text:0000000100001469                 mov     rcx, [rbp+var_3D8]
__text:0000000100001470                 mov     rcx, [rcx+8]
__text:0000000100001474                 mov     [rbp+var_498], rcx
__text:000000010000147B                 jmp     loc_1000014C1
__text:0000000100001480 ; ---------------------------------------------------------------------------
__text:0000000100001480
__text:0000000100001480 loc_100001480:                          ; CODE XREF: _main+C9↑j
__text:0000000100001480                 mov     rax, [rbp+var_490]
__text:0000000100001487                 mov     [rbp+var_400], rax
__text:000000010000148E                 mov     rcx, [rbp+var_400]
__text:0000000100001495                 mov     [rbp+var_3F8], rcx
__text:000000010000149C                 mov     rcx, [rbp+var_3F8]
__text:00000001000014A3                 mov     [rbp+var_3F0], rcx
__text:00000001000014AA                 mov     rcx, [rbp+var_3F0]
__text:00000001000014B1                 movzx   edx, byte ptr [rcx]
__text:00000001000014B4                 sar     edx, 1
__text:00000001000014B7                 movsxd  rcx, edx
__text:00000001000014BA                 mov     [rbp+var_498], rcx
__text:00000001000014C1
__text:00000001000014C1 loc_1000014C1:                          ; CODE XREF: _main+10B↑j
__text:00000001000014C1                 mov     rax, [rbp+var_498]
__text:00000001000014C8                 mov     ecx, eax
__text:00000001000014CA                 mov     cs:_m, ecx
__text:00000001000014D0                 mov     [rbp+var_430], 0
__text:00000001000014DA
__text:00000001000014DA loc_1000014DA:                          ; CODE XREF: _main+8F5↓j
__text:00000001000014DA                 mov     eax, [rbp+var_430]
__text:00000001000014E0                 cmp     eax, cs:_m
__text:00000001000014E6                 jge     loc_100001C6A
__text:00000001000014EC                 lea     rax, _v
__text:00000001000014F3                 movsxd  rcx, [rbp+var_430]
__text:00000001000014FA                 imul    rcx, 18h
__text:0000000100001501                 add     rax, rcx
__text:0000000100001504                 mov     [rbp+var_3B0], rax
__text:000000010000150B                 mov     rax, [rbp+var_3B0]
__text:0000000100001512                 mov     rcx, rax
__text:0000000100001515                 mov     [rbp+var_3A8], rcx
__text:000000010000151C                 mov     rcx, [rbp+var_3A8]
__text:0000000100001523                 mov     rdx, [rcx]
__text:0000000100001526                 mov     [rbp+var_388], rcx
__text:000000010000152D                 mov     [rbp+var_390], rdx
__text:0000000100001534                 mov     rcx, [rbp+var_388]
__text:000000010000153B                 mov     [rbp+var_4A0], rax
__text:0000000100001542                 mov     [rbp+var_4A8], rcx
__text:0000000100001549
__text:0000000100001549 loc_100001549:                          ; CODE XREF: _main+270↓j
__text:0000000100001549                 mov     rax, [rbp+var_390]
__text:0000000100001550                 mov     rcx, [rbp+var_4A8]
__text:0000000100001557                 cmp     rax, [rcx+8]
__text:000000010000155B                 jz      loc_1000015E5
__text:0000000100001561                 mov     rax, [rbp+var_4A8]
__text:0000000100001568                 mov     [rbp+var_380], rax
__text:000000010000156F                 mov     rcx, [rbp+var_380]
__text:0000000100001576                 add     rcx, 10h
__text:000000010000157D                 mov     [rbp+var_378], rcx
__text:0000000100001584                 mov     rcx, [rbp+var_378]
__text:000000010000158B                 mov     [rbp+var_370], rcx
__text:0000000100001592                 mov     rcx, [rbp+var_370]
__text:0000000100001599                 mov     rdx, [rax+8]
__text:000000010000159D                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:00000001000015A4                 mov     [rax+8], rdx
__text:00000001000015A8                 mov     [rbp+var_338], rdx
__text:00000001000015AF                 mov     rdx, [rbp+var_338]
__text:00000001000015B6                 mov     [rbp+var_350], rcx
__text:00000001000015BD                 mov     [rbp+var_358], rdx
__text:00000001000015C4                 mov     rcx, [rbp+var_350]
__text:00000001000015CB                 mov     rdx, [rbp+var_358]
__text:00000001000015D2                 mov     [rbp+var_340], rcx
__text:00000001000015D9                 mov     [rbp+var_348], rdx
__text:00000001000015E0                 jmp     loc_100001549
__text:00000001000015E5 ; ---------------------------------------------------------------------------
__text:00000001000015E5
__text:00000001000015E5 loc_1000015E5:                          ; CODE XREF: _main+1EB↑j
__text:00000001000015E5                 lea     rax, _s
__text:00000001000015EC                 lea     rcx, _v
__text:00000001000015F3                 mov     rdx, [rbp+var_4A0]
__text:00000001000015FA                 mov     [rbp+var_330], rdx
__text:0000000100001601                 movsxd  rsi, [rbp+var_430]
__text:0000000100001608                 imul    rsi, 18h
__text:000000010000160F                 add     rcx, rsi
__text:0000000100001612                 movsxd  rsi, [rbp+var_430]
__text:0000000100001619                 mov     [rbp+var_320], rax
__text:0000000100001620                 mov     [rbp+var_328], rsi
__text:0000000100001627                 mov     rax, [rbp+var_320]
__text:000000010000162E                 mov     [rbp+var_318], rax
__text:0000000100001635                 mov     rax, [rbp+var_318]
__text:000000010000163C                 mov     [rbp+var_310], rax
__text:0000000100001643                 mov     rsi, [rbp+var_310]
__text:000000010000164A                 mov     [rbp+var_308], rsi
__text:0000000100001651                 mov     rsi, [rbp+var_308]
__text:0000000100001658                 mov     [rbp+var_300], rsi
__text:000000010000165F                 mov     rsi, [rbp+var_300]
__text:0000000100001666                 movzx   edi, byte ptr [rsi]
__text:0000000100001669                 and     edi, 1
__text:000000010000166F                 cmp     edi, 0
__text:0000000100001675                 mov     [rbp+var_4B0], rcx
__text:000000010000167C                 mov     [rbp+var_4B8], rax
__text:0000000100001683                 jz      loc_1000016CA
__text:0000000100001689                 mov     rax, [rbp+var_4B8]
__text:0000000100001690                 mov     [rbp+var_2D0], rax
__text:0000000100001697                 mov     rcx, [rbp+var_2D0]
__text:000000010000169E                 mov     [rbp+var_2C8], rcx
__text:00000001000016A5                 mov     rcx, [rbp+var_2C8]
__text:00000001000016AC                 mov     [rbp+var_2C0], rcx
__text:00000001000016B3                 mov     rcx, [rbp+var_2C0]
__text:00000001000016BA                 mov     rcx, [rcx+10h]
__text:00000001000016BE                 mov     [rbp+var_4C0], rcx
__text:00000001000016C5                 jmp     loc_100001725
__text:00000001000016CA ; ---------------------------------------------------------------------------
__text:00000001000016CA
__text:00000001000016CA loc_1000016CA:                          ; CODE XREF: _main+313↑j
__text:00000001000016CA                 mov     rax, [rbp+var_4B8]
__text:00000001000016D1                 mov     [rbp+var_2F8], rax
__text:00000001000016D8                 mov     rcx, [rbp+var_2F8]
__text:00000001000016DF                 mov     [rbp+var_2F0], rcx
__text:00000001000016E6                 mov     rcx, [rbp+var_2F0]
__text:00000001000016ED                 mov     [rbp+var_2E8], rcx
__text:00000001000016F4                 mov     rcx, [rbp+var_2E8]
__text:00000001000016FB                 add     rcx, 1
__text:0000000100001702                 mov     [rbp+var_2E0], rcx
__text:0000000100001709                 mov     rcx, [rbp+var_2E0]
__text:0000000100001710                 mov     [rbp+var_2D8], rcx
__text:0000000100001717                 mov     rcx, [rbp+var_2D8]
__text:000000010000171E                 mov     [rbp+var_4C0], rcx
__text:0000000100001725
__text:0000000100001725 loc_100001725:                          ; CODE XREF: _main+355↑j
__text:0000000100001725                 mov     rax, [rbp+var_4C0]
__text:000000010000172C                 lea     rcx, [rbp+var_434]
__text:0000000100001733                 mov     rdx, [rbp+var_328]
__text:000000010000173A                 movsx   esi, byte ptr [rax+rdx]
__text:000000010000173E                 sub     esi, 61h ; 'a'
__text:0000000100001744                 mov     [rbp+var_434], esi
__text:000000010000174A                 mov     rax, [rbp+var_4B0]
__text:0000000100001751                 mov     [rbp+var_2B0], rax
__text:0000000100001758                 mov     [rbp+var_2B8], rcx
__text:000000010000175F                 mov     rcx, [rbp+var_2B0]
__text:0000000100001766                 mov     rdx, [rcx+8]
__text:000000010000176A                 mov     rdi, rcx
__text:000000010000176D                 mov     [rbp+var_2A8], rdi
__text:0000000100001774                 mov     rdi, [rbp+var_2A8]
__text:000000010000177B                 add     rdi, 10h
__text:0000000100001782                 mov     [rbp+var_2A0], rdi
__text:0000000100001789                 mov     rdi, [rbp+var_2A0]
__text:0000000100001790                 mov     [rbp+var_298], rdi
__text:0000000100001797                 mov     rdi, [rbp+var_298]
__text:000000010000179E                 cmp     rdx, [rdi]
__text:00000001000017A1                 mov     [rbp+var_4C8], rcx
__text:00000001000017A8                 jz      loc_10000186F
__text:00000001000017AE                 mov     rax, [rbp+var_4C8]
__text:00000001000017B5                 mov     [rbp+var_290], rax
__text:00000001000017BC                 mov     rax, [rbp+var_290]
__text:00000001000017C3                 add     rax, 10h
__text:00000001000017C9                 mov     [rbp+var_288], rax
__text:00000001000017D0                 mov     rax, [rbp+var_288]
__text:00000001000017D7                 mov     [rbp+var_280], rax
__text:00000001000017DE                 mov     rax, [rbp+var_280]
__text:00000001000017E5                 mov     rcx, [rbp+var_4C8]
__text:00000001000017EC                 mov     rdx, [rcx+8]
__text:00000001000017F0                 mov     [rbp+var_260], rdx
__text:00000001000017F7                 mov     rdx, [rbp+var_260]
__text:00000001000017FE                 mov     rsi, [rbp+var_2B8]
__text:0000000100001805                 mov     [rbp+var_268], rax
__text:000000010000180C                 mov     [rbp+var_270], rdx
__text:0000000100001813                 mov     [rbp+var_278], rsi
__text:000000010000181A                 mov     rax, [rbp+var_270]
__text:0000000100001821                 cmp     rax, 0
__text:0000000100001827                 mov     [rbp+var_4D0], rax
__text:000000010000182E                 jz      loc_100001854
__text:0000000100001834                 mov     rax, [rbp+var_4D0]
__text:000000010000183B                 mov     rcx, [rbp+var_278]
__text:0000000100001842                 mov     edx, [rcx]
__text:0000000100001844                 mov     rcx, [rbp+var_4D0]
__text:000000010000184B                 mov     [rcx], edx
__text:000000010000184D                 mov     [rbp+var_4D8], rax
__text:0000000100001854
__text:0000000100001854 loc_100001854:                          ; CODE XREF: _main+4BE↑j
__text:0000000100001854                 mov     rax, [rbp+var_4C8]
__text:000000010000185B                 mov     rcx, [rax+8]
__text:000000010000185F                 add     rcx, 4
__text:0000000100001866                 mov     [rax+8], rcx
__text:000000010000186A                 jmp     loc_100001882
__text:000000010000186F ; ---------------------------------------------------------------------------
__text:000000010000186F
__text:000000010000186F loc_10000186F:                          ; CODE XREF: _main+438↑j
__text:000000010000186F                 mov     rsi, [rbp+var_2B8]
__text:0000000100001876                 mov     rdi, [rbp+var_4C8]
__text:000000010000187D                 call    j___ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_ ; std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)
__text:0000000100001882
__text:0000000100001882 loc_100001882:                          ; CODE XREF: _main+4FA↑j
__text:0000000100001882                 lea     rax, _s
__text:0000000100001889                 movsxd  rcx, [rbp+var_430]
__text:0000000100001890                 mov     [rbp+var_250], rax
__text:0000000100001897                 mov     [rbp+var_258], rcx
__text:000000010000189E                 mov     rax, [rbp+var_250]
__text:00000001000018A5                 mov     [rbp+var_248], rax
__text:00000001000018AC                 mov     rax, [rbp+var_248]
__text:00000001000018B3                 mov     [rbp+var_240], rax
__text:00000001000018BA                 mov     rcx, [rbp+var_240]
__text:00000001000018C1                 mov     [rbp+var_238], rcx
__text:00000001000018C8                 mov     rcx, [rbp+var_238]
__text:00000001000018CF                 mov     [rbp+var_230], rcx
__text:00000001000018D6                 mov     rcx, [rbp+var_230]
__text:00000001000018DD                 movzx   edx, byte ptr [rcx]
__text:00000001000018E0                 and     edx, 1
__text:00000001000018E6                 cmp     edx, 0
__text:00000001000018EC                 mov     [rbp+var_4E0], rax
__text:00000001000018F3                 jz      loc_10000193A
__text:00000001000018F9                 mov     rax, [rbp+var_4E0]
__text:0000000100001900                 mov     [rbp+var_200], rax
__text:0000000100001907                 mov     rcx, [rbp+var_200]
__text:000000010000190E                 mov     [rbp+var_1F8], rcx
__text:0000000100001915                 mov     rcx, [rbp+var_1F8]
__text:000000010000191C                 mov     [rbp+var_1F0], rcx
__text:0000000100001923                 mov     rcx, [rbp+var_1F0]
__text:000000010000192A                 mov     rcx, [rcx+10h]
__text:000000010000192E                 mov     [rbp+var_4E8], rcx
__text:0000000100001935                 jmp     loc_100001995
__text:000000010000193A ; ---------------------------------------------------------------------------
__text:000000010000193A
__text:000000010000193A loc_10000193A:                          ; CODE XREF: _main+583↑j
__text:000000010000193A                 mov     rax, [rbp+var_4E0]
__text:0000000100001941                 mov     [rbp+var_228], rax
__text:0000000100001948                 mov     rcx, [rbp+var_228]
__text:000000010000194F                 mov     [rbp+var_220], rcx
__text:0000000100001956                 mov     rcx, [rbp+var_220]
__text:000000010000195D                 mov     [rbp+var_218], rcx
__text:0000000100001964                 mov     rcx, [rbp+var_218]
__text:000000010000196B                 add     rcx, 1
__text:0000000100001972                 mov     [rbp+var_210], rcx
__text:0000000100001979                 mov     rcx, [rbp+var_210]
__text:0000000100001980                 mov     [rbp+var_208], rcx
__text:0000000100001987                 mov     rcx, [rbp+var_208]
__text:000000010000198E                 mov     [rbp+var_4E8], rcx
__text:0000000100001995
__text:0000000100001995 loc_100001995:                          ; CODE XREF: _main+5C5↑j
__text:0000000100001995                 mov     rax, [rbp+var_4E8]
__text:000000010000199C                 mov     rcx, [rbp+var_258]
__text:00000001000019A3                 movsx   edi, byte ptr [rax+rcx] ; char
__text:00000001000019A7                 call    __Z3getc        ; get(char)
__text:00000001000019AC                 cmp     eax, 0FFFFFFFFh
__text:00000001000019B1                 jz      loc_100001C4F
__text:00000001000019B7                 lea     rax, _s
__text:00000001000019BE                 lea     rcx, _v
__text:00000001000019C5                 movsxd  rdx, [rbp+var_430]
__text:00000001000019CC                 imul    rdx, 18h
__text:00000001000019D3                 add     rcx, rdx
__text:00000001000019D6                 movsxd  rdx, [rbp+var_430]
__text:00000001000019DD                 mov     [rbp+var_1E0], rax
__text:00000001000019E4                 mov     [rbp+var_1E8], rdx
__text:00000001000019EB                 mov     rax, [rbp+var_1E0]
__text:00000001000019F2                 mov     [rbp+var_1D8], rax
__text:00000001000019F9                 mov     rax, [rbp+var_1D8]
__text:0000000100001A00                 mov     [rbp+var_1D0], rax
__text:0000000100001A07                 mov     rdx, [rbp+var_1D0]
__text:0000000100001A0E                 mov     [rbp+var_1C8], rdx
__text:0000000100001A15                 mov     rdx, [rbp+var_1C8]
__text:0000000100001A1C                 mov     [rbp+var_1C0], rdx
__text:0000000100001A23                 mov     rdx, [rbp+var_1C0]
__text:0000000100001A2A                 movzx   esi, byte ptr [rdx]
__text:0000000100001A2D                 and     esi, 1
__text:0000000100001A33                 cmp     esi, 0
__text:0000000100001A39                 mov     [rbp+var_4F0], rcx
__text:0000000100001A40                 mov     [rbp+var_4F8], rax
__text:0000000100001A47                 jz      loc_100001A8E
__text:0000000100001A4D                 mov     rax, [rbp+var_4F8]
__text:0000000100001A54                 mov     [rbp+var_190], rax
__text:0000000100001A5B                 mov     rcx, [rbp+var_190]
__text:0000000100001A62                 mov     [rbp+var_188], rcx
__text:0000000100001A69                 mov     rcx, [rbp+var_188]
__text:0000000100001A70                 mov     [rbp+var_180], rcx
__text:0000000100001A77                 mov     rcx, [rbp+var_180]
__text:0000000100001A7E                 mov     rcx, [rcx+10h]
__text:0000000100001A82                 mov     [rbp+var_500], rcx
__text:0000000100001A89                 jmp     loc_100001AE9
__text:0000000100001A8E ; ---------------------------------------------------------------------------
__text:0000000100001A8E
__text:0000000100001A8E loc_100001A8E:                          ; CODE XREF: _main+6D7↑j
__text:0000000100001A8E                 mov     rax, [rbp+var_4F8]
__text:0000000100001A95                 mov     [rbp+var_1B8], rax
__text:0000000100001A9C                 mov     rcx, [rbp+var_1B8]
__text:0000000100001AA3                 mov     [rbp+var_1B0], rcx
__text:0000000100001AAA                 mov     rcx, [rbp+var_1B0]
__text:0000000100001AB1                 mov     [rbp+var_1A8], rcx
__text:0000000100001AB8                 mov     rcx, [rbp+var_1A8]
__text:0000000100001ABF                 add     rcx, 1
__text:0000000100001AC6                 mov     [rbp+var_1A0], rcx
__text:0000000100001ACD                 mov     rcx, [rbp+var_1A0]
__text:0000000100001AD4                 mov     [rbp+var_198], rcx
__text:0000000100001ADB                 mov     rcx, [rbp+var_198]
__text:0000000100001AE2                 mov     [rbp+var_500], rcx
__text:0000000100001AE9
__text:0000000100001AE9 loc_100001AE9:                          ; CODE XREF: _main+719↑j
__text:0000000100001AE9                 mov     rax, [rbp+var_500]
__text:0000000100001AF0                 mov     rcx, [rbp+var_1E8]
__text:0000000100001AF7                 movsx   edi, byte ptr [rax+rcx] ; char
__text:0000000100001AFB                 call    __Z3getc        ; get(char)
__text:0000000100001B00                 lea     rcx, [rbp+var_438]
__text:0000000100001B07                 add     eax, 1Ah
__text:0000000100001B0C                 mov     [rbp+var_438], eax
__text:0000000100001B12                 mov     rdx, [rbp+var_4F0]
__text:0000000100001B19                 mov     [rbp+var_160], rdx
__text:0000000100001B20                 mov     [rbp+var_168], rcx
__text:0000000100001B27                 mov     rcx, [rbp+var_160]
__text:0000000100001B2E                 mov     rsi, [rcx+8]
__text:0000000100001B32                 mov     r8, rcx
__text:0000000100001B35                 mov     [rbp+var_158], r8
__text:0000000100001B3C                 mov     r8, [rbp+var_158]
__text:0000000100001B43                 add     r8, 10h
__text:0000000100001B4A                 mov     [rbp+var_150], r8
__text:0000000100001B51                 mov     r8, [rbp+var_150]
__text:0000000100001B58                 mov     [rbp+var_148], r8
__text:0000000100001B5F                 mov     r8, [rbp+var_148]
__text:0000000100001B66                 cmp     rsi, [r8]
__text:0000000100001B69                 mov     [rbp+var_508], rcx
__text:0000000100001B70                 jz      loc_100001C37
__text:0000000100001B76                 mov     rax, [rbp+var_508]
__text:0000000100001B7D                 mov     [rbp+var_140], rax
__text:0000000100001B84                 mov     rax, [rbp+var_140]
__text:0000000100001B8B                 add     rax, 10h
__text:0000000100001B91                 mov     [rbp+var_138], rax
__text:0000000100001B98                 mov     rax, [rbp+var_138]
__text:0000000100001B9F                 mov     [rbp+var_130], rax
__text:0000000100001BA6                 mov     rax, [rbp+var_130]
__text:0000000100001BAD                 mov     rcx, [rbp+var_508]
__text:0000000100001BB4                 mov     rdx, [rcx+8]
__text:0000000100001BB8                 mov     [rbp+var_110], rdx
__text:0000000100001BBF                 mov     rdx, [rbp+var_110]
__text:0000000100001BC6                 mov     rsi, [rbp+var_168]
__text:0000000100001BCD                 mov     [rbp+var_118], rax
__text:0000000100001BD4                 mov     [rbp+var_120], rdx
__text:0000000100001BDB                 mov     [rbp+var_128], rsi
__text:0000000100001BE2                 mov     rax, [rbp+var_120]
__text:0000000100001BE9                 cmp     rax, 0
__text:0000000100001BEF                 mov     [rbp+var_510], rax
__text:0000000100001BF6                 jz      loc_100001C1C
__text:0000000100001BFC                 mov     rax, [rbp+var_510]
__text:0000000100001C03                 mov     rcx, [rbp+var_128]
__text:0000000100001C0A                 mov     edx, [rcx]
__text:0000000100001C0C                 mov     rcx, [rbp+var_510]
__text:0000000100001C13                 mov     [rcx], edx
__text:0000000100001C15                 mov     [rbp+var_518], rax
__text:0000000100001C1C
__text:0000000100001C1C loc_100001C1C:                          ; CODE XREF: _main+886↑j
__text:0000000100001C1C                 mov     rax, [rbp+var_508]
__text:0000000100001C23                 mov     rcx, [rax+8]
__text:0000000100001C27                 add     rcx, 4
__text:0000000100001C2E                 mov     [rax+8], rcx
__text:0000000100001C32                 jmp     loc_100001C4A
__text:0000000100001C37 ; ---------------------------------------------------------------------------
__text:0000000100001C37
__text:0000000100001C37 loc_100001C37:                          ; CODE XREF: _main+800↑j
__text:0000000100001C37                 mov     rsi, [rbp+var_168]
__text:0000000100001C3E                 mov     rdi, [rbp+var_508]
__text:0000000100001C45                 call    j___ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_ ; std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)
__text:0000000100001C4A
__text:0000000100001C4A loc_100001C4A:                          ; CODE XREF: _main+8C2↑j
__text:0000000100001C4A                 jmp     $+5
__text:0000000100001C4F ; ---------------------------------------------------------------------------
__text:0000000100001C4F
__text:0000000100001C4F loc_100001C4F:                          ; CODE XREF: _main+641↑j
__text:0000000100001C4F                                         ; _main:loc_100001C4A↑j
__text:0000000100001C4F                 jmp     $+5
__text:0000000100001C54 ; ---------------------------------------------------------------------------
__text:0000000100001C54
__text:0000000100001C54 loc_100001C54:                          ; CODE XREF: _main:loc_100001C4F↑j
__text:0000000100001C54                 mov     eax, [rbp+var_430]
__text:0000000100001C5A                 add     eax, 1
__text:0000000100001C5F                 mov     [rbp+var_430], eax
__text:0000000100001C65                 jmp     loc_1000014DA
__text:0000000100001C6A ; ---------------------------------------------------------------------------
__text:0000000100001C6A
__text:0000000100001C6A loc_100001C6A:                          ; CODE XREF: _main+176↑j
__text:0000000100001C6A                 lea     rax, _g
__text:0000000100001C71                 mov     ecx, 0
__text:0000000100001C76                 mov     rdx, 1210h
__text:0000000100001C80                 lea     rsi, _c2
__text:0000000100001C87                 mov     rdi, 88h
__text:0000000100001C91                 lea     r8, _c1
__text:0000000100001C98                 mov     [rbp+var_520], rdi
__text:0000000100001C9F                 mov     rdi, r8         ; void *
__text:0000000100001CA2                 mov     [rbp+var_528], rsi
__text:0000000100001CA9                 mov     esi, ecx        ; int
__text:0000000100001CAB                 mov     r8, [rbp+var_520]
__text:0000000100001CB2                 mov     [rbp+var_530], rdx
__text:0000000100001CB9                 mov     rdx, r8         ; size_t
__text:0000000100001CBC                 mov     [rbp+var_538], rax
__text:0000000100001CC3                 mov     [rbp+var_53C], ecx
__text:0000000100001CC9                 call    _memset
__text:0000000100001CCE                 mov     rdi, [rbp+var_528] ; void *
__text:0000000100001CD5                 mov     esi, [rbp+var_53C] ; int
__text:0000000100001CDB                 mov     rdx, [rbp+var_520] ; size_t
__text:0000000100001CE2                 call    _memset
__text:0000000100001CE7                 mov     rdi, [rbp+var_538] ; void *
__text:0000000100001CEE                 mov     esi, [rbp+var_53C] ; int
__text:0000000100001CF4                 mov     rdx, [rbp+var_530] ; size_t
__text:0000000100001CFB                 call    _memset
__text:0000000100001D00                 mov     [rbp+var_43C], 0
__text:0000000100001D0A
__text:0000000100001D0A loc_100001D0A:                          ; CODE XREF: _main+B30↓j
__text:0000000100001D0A                 mov     eax, [rbp+var_43C]
__text:0000000100001D10                 add     eax, 1
__text:0000000100001D15                 cmp     eax, cs:_m
__text:0000000100001D1B                 jge     loc_100001EA5
__text:0000000100001D21                 mov     [rbp+var_440], 0
__text:0000000100001D2B
__text:0000000100001D2B loc_100001D2B:                          ; CODE XREF: _main+B15↓j
__text:0000000100001D2B                 lea     rax, _v
__text:0000000100001D32                 mov     ecx, [rbp+var_440]
__text:0000000100001D38                 movsxd  rdx, [rbp+var_43C]
__text:0000000100001D3F                 imul    rdx, 18h
__text:0000000100001D46                 add     rax, rdx
__text:0000000100001D49                 mov     [rbp+var_108], rax
__text:0000000100001D50                 mov     rax, [rbp+var_108]
__text:0000000100001D57                 mov     rdx, [rax+8]
__text:0000000100001D5B                 mov     rax, [rax]
__text:0000000100001D5E                 sub     rdx, rax
__text:0000000100001D61                 sar     rdx, 2
__text:0000000100001D65                 mov     esi, edx
__text:0000000100001D67                 cmp     ecx, esi
__text:0000000100001D69                 jge     loc_100001E8A
__text:0000000100001D6F                 mov     [rbp+var_444], 0
__text:0000000100001D79
__text:0000000100001D79 loc_100001D79:                          ; CODE XREF: _main+AFA↓j
__text:0000000100001D79                 lea     rax, _v
__text:0000000100001D80                 mov     ecx, [rbp+var_444]
__text:0000000100001D86                 mov     edx, [rbp+var_43C]
__text:0000000100001D8C                 add     edx, 1
__text:0000000100001D92                 movsxd  rsi, edx
__text:0000000100001D95                 imul    rsi, 18h
__text:0000000100001D9C                 add     rax, rsi
__text:0000000100001D9F                 mov     [rbp+var_100], rax
__text:0000000100001DA6                 mov     rax, [rbp+var_100]
__text:0000000100001DAD                 mov     rsi, [rax+8]
__text:0000000100001DB1                 mov     rax, [rax]
__text:0000000100001DB4                 sub     rsi, rax
__text:0000000100001DB7                 sar     rsi, 2
__text:0000000100001DBB                 mov     edx, esi
__text:0000000100001DBD                 cmp     ecx, edx
__text:0000000100001DBF                 jge     loc_100001E6F
__text:0000000100001DC5                 lea     rax, _g
__text:0000000100001DCC                 lea     rcx, _v
__text:0000000100001DD3                 mov     edx, [rbp+var_43C]
__text:0000000100001DD9                 add     edx, 1
__text:0000000100001DDF                 movsxd  rsi, edx
__text:0000000100001DE2                 imul    rsi, 18h
__text:0000000100001DE9                 mov     rdi, rcx
__text:0000000100001DEC                 add     rdi, rsi
__text:0000000100001DEF                 movsxd  rsi, [rbp+var_444]
__text:0000000100001DF6                 mov     [rbp+var_F0], rdi
__text:0000000100001DFD                 mov     [rbp+var_F8], rsi
__text:0000000100001E04                 mov     rsi, [rbp+var_F0]
__text:0000000100001E0B                 mov     rdi, [rbp+var_F8]
__text:0000000100001E12                 mov     rsi, [rsi]
__text:0000000100001E15                 movsxd  rsi, dword ptr [rsi+rdi*4]
__text:0000000100001E19                 movsxd  rdi, [rbp+var_43C]
__text:0000000100001E20                 imul    rdi, 18h
__text:0000000100001E27                 add     rcx, rdi
__text:0000000100001E2A                 movsxd  rdi, [rbp+var_440]
__text:0000000100001E31                 mov     [rbp+var_8], rcx
__text:0000000100001E35                 mov     [rbp+var_10], rdi
__text:0000000100001E39                 mov     rcx, [rbp+var_8]
__text:0000000100001E3D                 mov     rdi, [rbp+var_10]
__text:0000000100001E41                 mov     rcx, [rcx]
__text:0000000100001E44                 movsxd  rcx, dword ptr [rcx+rdi*4]
__text:0000000100001E48                 imul    rcx, 88h
__text:0000000100001E4F                 add     rax, rcx
__text:0000000100001E52                 mov     dword ptr [rax+rsi*4], 1
__text:0000000100001E59                 mov     eax, [rbp+var_444]
__text:0000000100001E5F                 add     eax, 1
__text:0000000100001E64                 mov     [rbp+var_444], eax
__text:0000000100001E6A                 jmp     loc_100001D79
__text:0000000100001E6F ; ---------------------------------------------------------------------------
__text:0000000100001E6F
__text:0000000100001E6F loc_100001E6F:                          ; CODE XREF: _main+A4F↑j
__text:0000000100001E6F                 jmp     $+5
__text:0000000100001E74 ; ---------------------------------------------------------------------------
__text:0000000100001E74
__text:0000000100001E74 loc_100001E74:                          ; CODE XREF: _main:loc_100001E6F↑j
__text:0000000100001E74                 mov     eax, [rbp+var_440]
__text:0000000100001E7A                 add     eax, 1
__text:0000000100001E7F                 mov     [rbp+var_440], eax
__text:0000000100001E85                 jmp     loc_100001D2B
__text:0000000100001E8A ; ---------------------------------------------------------------------------
__text:0000000100001E8A
__text:0000000100001E8A loc_100001E8A:                          ; CODE XREF: _main+9F9↑j
__text:0000000100001E8A                 jmp     $+5
__text:0000000100001E8F ; ---------------------------------------------------------------------------
__text:0000000100001E8F
__text:0000000100001E8F loc_100001E8F:                          ; CODE XREF: _main:loc_100001E8A↑j
__text:0000000100001E8F                 mov     eax, [rbp+var_43C]
__text:0000000100001E95                 add     eax, 1
__text:0000000100001E9A                 mov     [rbp+var_43C], eax
__text:0000000100001EA0                 jmp     loc_100001D0A
__text:0000000100001EA5 ; ---------------------------------------------------------------------------
__text:0000000100001EA5
__text:0000000100001EA5 loc_100001EA5:                          ; CODE XREF: _main+9AB↑j
__text:0000000100001EA5                 mov     [rbp+var_448], 0
__text:0000000100001EAF
__text:0000000100001EAF loc_100001EAF:                          ; CODE XREF: _main+BFA↓j
__text:0000000100001EAF                 cmp     [rbp+var_448], 22h ; '"'
__text:0000000100001EB9                 jge     loc_100001F6F
__text:0000000100001EBF                 mov     [rbp+var_44C], 0
__text:0000000100001EC9
__text:0000000100001EC9 loc_100001EC9:                          ; CODE XREF: _main+BDF↓j
__text:0000000100001EC9                 cmp     [rbp+var_44C], 22h ; '"'
__text:0000000100001ED3                 jge     loc_100001F54
__text:0000000100001ED9                 lea     rax, _g
__text:0000000100001EE0                 movsxd  rcx, [rbp+var_44C]
__text:0000000100001EE7                 movsxd  rdx, [rbp+var_448]
__text:0000000100001EEE                 imul    rdx, 88h
__text:0000000100001EF5                 add     rax, rdx
__text:0000000100001EF8                 cmp     dword ptr [rax+rcx*4], 0
__text:0000000100001EFF                 jz      loc_100001F39
__text:0000000100001F05                 lea     rax, _c2
__text:0000000100001F0C                 lea     rcx, _c1
__text:0000000100001F13                 movsxd  rdx, [rbp+var_448]
__text:0000000100001F1A                 mov     esi, [rcx+rdx*4]
__text:0000000100001F1D                 add     esi, 1
__text:0000000100001F23                 mov     [rcx+rdx*4], esi
__text:0000000100001F26                 movsxd  rcx, [rbp+var_44C]
__text:0000000100001F2D                 mov     esi, [rax+rcx*4]
__text:0000000100001F30                 add     esi, 1
__text:0000000100001F36                 mov     [rax+rcx*4], esi
__text:0000000100001F39
__text:0000000100001F39 loc_100001F39:                          ; CODE XREF: _main+B8F↑j
__text:0000000100001F39                 jmp     $+5
__text:0000000100001F3E ; ---------------------------------------------------------------------------
__text:0000000100001F3E
__text:0000000100001F3E loc_100001F3E:                          ; CODE XREF: _main:loc_100001F39↑j
__text:0000000100001F3E                 mov     eax, [rbp+var_44C]
__text:0000000100001F44                 add     eax, 1
__text:0000000100001F49                 mov     [rbp+var_44C], eax
__text:0000000100001F4F                 jmp     loc_100001EC9
__text:0000000100001F54 ; ---------------------------------------------------------------------------
__text:0000000100001F54
__text:0000000100001F54 loc_100001F54:                          ; CODE XREF: _main+B63↑j
__text:0000000100001F54                 jmp     $+5
__text:0000000100001F59 ; ---------------------------------------------------------------------------
__text:0000000100001F59
__text:0000000100001F59 loc_100001F59:                          ; CODE XREF: _main:loc_100001F54↑j
__text:0000000100001F59                 mov     eax, [rbp+var_448]
__text:0000000100001F5F                 add     eax, 1
__text:0000000100001F64                 mov     [rbp+var_448], eax
__text:0000000100001F6A                 jmp     loc_100001EAF
__text:0000000100001F6F ; ---------------------------------------------------------------------------
__text:0000000100001F6F
__text:0000000100001F6F loc_100001F6F:                          ; CODE XREF: _main+B49↑j
__text:0000000100001F6F                 lea     rax, _was
__text:0000000100001F76                 mov     esi, 0          ; int
__text:0000000100001F7B                 mov     rdx, 88h        ; size_t
__text:0000000100001F85                 mov     [rbp+var_450], 0
__text:0000000100001F8F                 mov     [rbp+var_454], 0
__text:0000000100001F99                 mov     [rbp+var_458], 0
__text:0000000100001FA3                 mov     [rbp+var_45C], 0
__text:0000000100001FAD                 mov     [rbp+var_460], 0
__text:0000000100001FB7                 mov     rdi, rax        ; void *
__text:0000000100001FBA                 call    _memset
__text:0000000100001FBF                 mov     [rbp+var_464], 0
__text:0000000100001FC9
__text:0000000100001FC9 loc_100001FC9:                          ; CODE XREF: _main+F3E↓j
__text:0000000100001FC9                 cmp     [rbp+var_464], 22h ; '"'
__text:0000000100001FD3                 jge     loc_1000022B3
__text:0000000100001FD9                 lea     rax, [rbp+var_40]
__text:0000000100001FDD                 lea     rcx, _c2
__text:0000000100001FE4                 lea     rdx, _c1
__text:0000000100001FEB                 movsxd  rsi, [rbp+var_464]
__text:0000000100001FF2                 shl     rsi, 2
__text:0000000100001FF6                 add     rdx, rsi
__text:0000000100001FF9                 movsxd  rsi, [rbp+var_464]
__text:0000000100002000                 shl     rsi, 2
__text:0000000100002004                 add     rcx, rsi
__text:0000000100002007                 mov     [rbp+var_48], rdx
__text:000000010000200B                 mov     [rbp+var_50], rcx
__text:000000010000200F                 mov     rcx, [rbp+var_48]
__text:0000000100002013                 mov     rdx, [rbp+var_50]
__text:0000000100002017                 mov     [rbp+var_30], rcx
__text:000000010000201B                 mov     [rbp+var_38], rdx
__text:000000010000201F                 mov     rcx, [rbp+var_30]
__text:0000000100002023                 mov     rdx, [rbp+var_38]
__text:0000000100002027                 mov     [rbp+var_18], rax
__text:000000010000202B                 mov     [rbp+var_20], rcx
__text:000000010000202F                 mov     [rbp+var_28], rdx
__text:0000000100002033                 mov     rax, [rbp+var_20]
__text:0000000100002037                 mov     edi, [rax]
__text:0000000100002039                 mov     rax, [rbp+var_28]
__text:000000010000203D                 cmp     edi, [rax]
__text:000000010000203F                 jge     loc_100002055
__text:0000000100002045                 mov     rax, [rbp+var_38]
__text:0000000100002049                 mov     [rbp+var_548], rax
__text:0000000100002050                 jmp     loc_100002060
__text:0000000100002055 ; ---------------------------------------------------------------------------
__text:0000000100002055
__text:0000000100002055 loc_100002055:                          ; CODE XREF: _main+CCF↑j
__text:0000000100002055                 mov     rax, [rbp+var_30]
__text:0000000100002059                 mov     [rbp+var_548], rax
__text:0000000100002060
__text:0000000100002060 loc_100002060:                          ; CODE XREF: _main+CE0↑j
__text:0000000100002060                 mov     rax, [rbp+var_548]
__text:0000000100002067                 lea     rcx, [rbp+var_88]
__text:000000010000206E                 lea     rdx, [rbp+var_46C]
__text:0000000100002075                 lea     rsi, [rbp+var_468]
__text:000000010000207C                 lea     rdi, _c2
__text:0000000100002083                 lea     r8, _c1
__text:000000010000208A                 mov     r9d, [rax]
__text:000000010000208D                 mov     r10d, [rbp+var_45C]
__text:0000000100002094                 add     r10d, r9d
__text:0000000100002097                 mov     [rbp+var_45C], r10d
__text:000000010000209E                 mov     [rbp+var_468], 0
__text:00000001000020A8                 movsxd  rax, [rbp+var_464]
__text:00000001000020AF                 mov     r9d, [r8+rax*4]
__text:00000001000020B3                 movsxd  rax, [rbp+var_464]
__text:00000001000020BA                 sub     r9d, [rdi+rax*4]
__text:00000001000020BE                 mov     [rbp+var_46C], r9d
__text:00000001000020C5                 mov     [rbp+var_90], rsi
__text:00000001000020CC                 mov     [rbp+var_98], rdx
__text:00000001000020D3                 mov     rax, [rbp+var_90]
__text:00000001000020DA                 mov     rdx, [rbp+var_98]
__text:00000001000020E1                 mov     [rbp+var_78], rax
__text:00000001000020E5                 mov     [rbp+var_80], rdx
__text:00000001000020E9                 mov     rax, [rbp+var_78]
__text:00000001000020ED                 mov     rdx, [rbp+var_80]
__text:00000001000020F1                 mov     [rbp+var_60], rcx
__text:00000001000020F5                 mov     [rbp+var_68], rax
__text:00000001000020F9                 mov     [rbp+var_70], rdx
__text:00000001000020FD                 mov     rax, [rbp+var_68]
__text:0000000100002101                 mov     r9d, [rax]
__text:0000000100002104                 mov     rax, [rbp+var_70]
__text:0000000100002108                 cmp     r9d, [rax]
__text:000000010000210B                 jge     loc_100002121
__text:0000000100002111                 mov     rax, [rbp+var_80]
__text:0000000100002115                 mov     [rbp+var_550], rax
__text:000000010000211C                 jmp     loc_10000212C
__text:0000000100002121 ; ---------------------------------------------------------------------------
__text:0000000100002121
__text:0000000100002121 loc_100002121:                          ; CODE XREF: _main+D9B↑j
__text:0000000100002121                 mov     rax, [rbp+var_78]
__text:0000000100002125                 mov     [rbp+var_550], rax
__text:000000010000212C
__text:000000010000212C loc_10000212C:                          ; CODE XREF: _main+DAC↑j
__text:000000010000212C                 mov     rax, [rbp+var_550]
__text:0000000100002133                 lea     rcx, [rbp+var_D0]
__text:000000010000213A                 lea     rdx, [rbp+var_474]
__text:0000000100002141                 lea     rsi, [rbp+var_470]
__text:0000000100002148                 lea     rdi, _c1
__text:000000010000214F                 lea     r8, _c2
__text:0000000100002156                 mov     r9d, [rax]
__text:0000000100002159                 mov     r10d, [rbp+var_454]
__text:0000000100002160                 add     r10d, r9d
__text:0000000100002163                 mov     [rbp+var_454], r10d
__text:000000010000216A                 mov     [rbp+var_470], 0
__text:0000000100002174                 movsxd  rax, [rbp+var_464]
__text:000000010000217B                 mov     r9d, [r8+rax*4]
__text:000000010000217F                 movsxd  rax, [rbp+var_464]
__text:0000000100002186                 sub     r9d, [rdi+rax*4]
__text:000000010000218A                 mov     [rbp+var_474], r9d
__text:0000000100002191                 mov     [rbp+var_D8], rsi
__text:0000000100002198                 mov     [rbp+var_E0], rdx
__text:000000010000219F                 mov     rax, [rbp+var_D8]
__text:00000001000021A6                 mov     rdx, [rbp+var_E0]
__text:00000001000021AD                 mov     [rbp+var_C0], rax
__text:00000001000021B4                 mov     [rbp+var_C8], rdx
__text:00000001000021BB                 mov     rax, [rbp+var_C0]
__text:00000001000021C2                 mov     rdx, [rbp+var_C8]
__text:00000001000021C9                 mov     [rbp+var_A8], rcx
__text:00000001000021D0                 mov     [rbp+var_B0], rax
__text:00000001000021D7                 mov     [rbp+var_B8], rdx
__text:00000001000021DE                 mov     rax, [rbp+var_B0]
__text:00000001000021E5                 mov     r9d, [rax]
__text:00000001000021E8                 mov     rax, [rbp+var_B8]
__text:00000001000021EF                 cmp     r9d, [rax]
__text:00000001000021F2                 jge     loc_10000220B
__text:00000001000021F8                 mov     rax, [rbp+var_C8]
__text:00000001000021FF                 mov     [rbp+var_558], rax
__text:0000000100002206                 jmp     loc_100002219
__text:000000010000220B ; ---------------------------------------------------------------------------
__text:000000010000220B
__text:000000010000220B loc_10000220B:                          ; CODE XREF: _main+E82↑j
__text:000000010000220B                 mov     rax, [rbp+var_C0]
__text:0000000100002212                 mov     [rbp+var_558], rax
__text:0000000100002219
__text:0000000100002219 loc_100002219:                          ; CODE XREF: _main+E96↑j
__text:0000000100002219                 mov     rax, [rbp+var_558]
__text:0000000100002220                 lea     rcx, _c2
__text:0000000100002227                 lea     rdx, _c1
__text:000000010000222E                 mov     esi, [rax]
__text:0000000100002230                 mov     edi, [rbp+var_458]
__text:0000000100002236                 add     edi, esi
__text:0000000100002238                 mov     [rbp+var_458], edi
__text:000000010000223E                 movsxd  rax, [rbp+var_464]
__text:0000000100002245                 mov     esi, [rdx+rax*4]
__text:0000000100002248                 movsxd  rax, [rbp+var_464]
__text:000000010000224F                 cmp     esi, [rcx+rax*4]
__text:0000000100002252                 jz      loc_100002298
__text:0000000100002258                 lea     rax, _was
__text:000000010000225F                 movsxd  rcx, [rbp+var_464]
__text:0000000100002266                 cmp     dword ptr [rax+rcx*4], 0
__text:000000010000226D                 jnz     loc_100002298
__text:0000000100002273                 mov     edi, [rbp+var_464] ; int
__text:0000000100002279                 call    __Z2goi         ; go(int)
__text:000000010000227E                 mov     [rbp+var_460], 1
__text:0000000100002288                 mov     [rbp+var_450], 1
__text:0000000100002292                 mov     [rbp+var_55C], eax
__text:0000000100002298
__text:0000000100002298 loc_100002298:                          ; CODE XREF: _main+EE2↑j
__text:0000000100002298                                         ; _main+EFD↑j
__text:0000000100002298                 jmp     $+5
__text:000000010000229D ; ---------------------------------------------------------------------------
__text:000000010000229D
__text:000000010000229D loc_10000229D:                          ; CODE XREF: _main:loc_100002298↑j
__text:000000010000229D                 mov     eax, [rbp+var_464]
__text:00000001000022A3                 add     eax, 1
__text:00000001000022A8                 mov     [rbp+var_464], eax
__text:00000001000022AE                 jmp     loc_100001FC9
__text:00000001000022B3 ; ---------------------------------------------------------------------------
__text:00000001000022B3
__text:00000001000022B3 loc_1000022B3:                          ; CODE XREF: _main+C63↑j
__text:00000001000022B3                 mov     eax, [rbp+var_454]
__text:00000001000022B9                 cmp     eax, [rbp+var_458]
__text:00000001000022BF                 jz      loc_100002301
__text:00000001000022C5                 mov     rdi, cs:__ZNSt3__14cerrE_ptr
__text:00000001000022CC                 lea     rsi, aBad       ; "bad"
__text:00000001000022D3                 call    j___ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)
__text:00000001000022D8                 lea     rsi, __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ ; std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)
__text:00000001000022DF                 mov     [rbp+var_170], rax
__text:00000001000022E6                 mov     [rbp+var_178], rsi
__text:00000001000022ED                 mov     rdi, [rbp+var_170]
__text:00000001000022F4                 call    [rbp+var_178]
__text:00000001000022FA                 mov     [rbp+var_568], rax
__text:0000000100002301
__text:0000000100002301 loc_100002301:                          ; CODE XREF: _main+F4F↑j
__text:0000000100002301                 mov     [rbp+var_478], 0
__text:000000010000230B
__text:000000010000230B loc_10000230B:                          ; CODE XREF: _main+102C↓j
__text:000000010000230B                 cmp     [rbp+var_478], 22h ; '"'
__text:0000000100002315                 jge     loc_1000023A1
__text:000000010000231B                 lea     rax, _was
__text:0000000100002322                 movsxd  rcx, [rbp+var_478]
__text:0000000100002329                 cmp     dword ptr [rax+rcx*4], 0
__text:0000000100002330                 jnz     loc_100002386
__text:0000000100002336                 lea     rax, _c2
__text:000000010000233D                 lea     rcx, _c1
__text:0000000100002344                 movsxd  rdx, [rbp+var_478]
__text:000000010000234B                 mov     esi, [rcx+rdx*4]
__text:000000010000234E                 movsxd  rcx, [rbp+var_478]
__text:0000000100002355                 add     esi, [rax+rcx*4]
__text:0000000100002358                 cmp     esi, 0
__text:000000010000235E                 jle     loc_100002386
__text:0000000100002364                 mov     eax, [rbp+var_460]
__text:000000010000236A                 add     eax, 1
__text:000000010000236F                 mov     [rbp+var_460], eax
__text:0000000100002375                 mov     edi, [rbp+var_478] ; int
__text:000000010000237B                 call    __Z2goi         ; go(int)
__text:0000000100002380                 mov     [rbp+var_56C], eax
__text:0000000100002386
__text:0000000100002386 loc_100002386:                          ; CODE XREF: _main+FC0↑j
__text:0000000100002386                                         ; _main+FEE↑j
__text:0000000100002386                 jmp     $+5
__text:000000010000238B ; ---------------------------------------------------------------------------
__text:000000010000238B
__text:000000010000238B loc_10000238B:                          ; CODE XREF: _main:loc_100002386↑j
__text:000000010000238B                 mov     eax, [rbp+var_478]
__text:0000000100002391                 add     eax, 1
__text:0000000100002396                 mov     [rbp+var_478], eax
__text:000000010000239C                 jmp     loc_10000230B
__text:00000001000023A1 ; ---------------------------------------------------------------------------
__text:00000001000023A1
__text:00000001000023A1 loc_1000023A1:                          ; CODE XREF: _main+FA5↑j
__text:00000001000023A1                 cmp     [rbp+var_460], 1
__text:00000001000023AB                 jle     loc_1000023D4
__text:00000001000023B1                 mov     eax, [rbp+var_460]
__text:00000001000023B7                 sub     eax, 1
__text:00000001000023BC                 mov     ecx, [rbp+var_45C]
__text:00000001000023C2                 add     ecx, eax
__text:00000001000023C4                 mov     [rbp+var_45C], ecx
__text:00000001000023CA                 mov     [rbp+var_450], 1
__text:00000001000023D4
__text:00000001000023D4 loc_1000023D4:                          ; CODE XREF: _main+103B↑j
__text:00000001000023D4                 mov     rdi, cs:__ZNSt3__14coutE_ptr
__text:00000001000023DB                 lea     rsi, aCase      ; "Case #"
__text:00000001000023E2                 call    j___ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)
__text:00000001000023E7                 mov     esi, [rbp+var_42C]
__text:00000001000023ED                 mov     rdi, rax
__text:00000001000023F0                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::operator<<(int)
__text:00000001000023F5                 lea     rsi, asc_100004F07 ; ": "
__text:00000001000023FC                 mov     rdi, rax
__text:00000001000023FF                 call    j___ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)
__text:0000000100002404                 mov     ecx, [rbp+var_45C]
__text:000000010000240A                 add     ecx, 1
__text:0000000100002410                 sub     ecx, [rbp+var_450]
__text:0000000100002416                 mov     rdi, rax
__text:0000000100002419                 mov     esi, ecx
__text:000000010000241B                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::operator<<(int)
__text:0000000100002420                 lea     rdi, __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ ; std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)
__text:0000000100002427                 mov     rdx, cs:__ZNSt3__14coutE_ptr
__text:000000010000242E                 mov     [rbp+var_3C8], rdx
__text:0000000100002435                 mov     [rbp+var_3D0], rdi
__text:000000010000243C                 mov     rdi, [rbp+var_3C8]
__text:0000000100002443                 mov     [rbp+var_578], rax
__text:000000010000244A                 call    [rbp+var_3D0]
__text:0000000100002450                 mov     [rbp+var_580], rax
__text:0000000100002457                 mov     eax, [rbp+var_42C]
__text:000000010000245D                 add     eax, 1
__text:0000000100002462                 mov     [rbp+var_42C], eax
__text:0000000100002468                 jmp     loc_1000013A9
__text:000000010000246D ; ---------------------------------------------------------------------------
__text:000000010000246D
__text:000000010000246D loc_10000246D:                          ; CODE XREF: _main+45↑j
__text:000000010000246D                 mov     eax, 0
__text:0000000100002472                 add     rsp, 580h
__text:0000000100002479                 pop     rbp
__text:000000010000247A                 retn
__text:000000010000247A _main           endp
__text:000000010000247A
__text:000000010000247A ; ---------------------------------------------------------------------------
__text:000000010000247B                 align 20h
__text:0000000100002480
__text:0000000100002480 ; =============== S U B R O U T I N E =======================================
__text:0000000100002480
__text:0000000100002480 ; Attributes: bp-based frame
__text:0000000100002480
__text:0000000100002480 ___cxx_global_var_init proc near        ; CODE XREF: `global constructor keyed to'_a+4↓p
__text:0000000100002480
__text:0000000100002480 var_144         = dword ptr -144h
__text:0000000100002480 var_140         = qword ptr -140h
__text:0000000100002480 var_138         = qword ptr -138h
__text:0000000100002480 var_120         = qword ptr -120h
__text:0000000100002480 var_118         = qword ptr -118h
__text:0000000100002480 var_110         = qword ptr -110h
__text:0000000100002480 var_108         = qword ptr -108h
__text:0000000100002480 var_100         = qword ptr -100h
__text:0000000100002480 var_F8          = qword ptr -0F8h
__text:0000000100002480 var_F0          = qword ptr -0F0h
__text:0000000100002480 var_E8          = qword ptr -0E8h
__text:0000000100002480 var_E0          = qword ptr -0E0h
__text:0000000100002480 var_D8          = qword ptr -0D8h
__text:0000000100002480 var_D0          = qword ptr -0D0h
__text:0000000100002480 var_C8          = qword ptr -0C8h
__text:0000000100002480 var_C0          = qword ptr -0C0h
__text:0000000100002480 var_B8          = qword ptr -0B8h
__text:0000000100002480 var_B0          = qword ptr -0B0h
__text:0000000100002480 var_A8          = qword ptr -0A8h
__text:0000000100002480 var_A0          = qword ptr -0A0h
__text:0000000100002480 var_98          = qword ptr -98h
__text:0000000100002480 var_90          = qword ptr -90h
__text:0000000100002480 var_88          = qword ptr -88h
__text:0000000100002480 var_80          = qword ptr -80h
__text:0000000100002480 var_78          = qword ptr -78h
__text:0000000100002480 var_70          = qword ptr -70h
__text:0000000100002480 var_68          = qword ptr -68h
__text:0000000100002480 var_60          = qword ptr -60h
__text:0000000100002480 var_58          = qword ptr -58h
__text:0000000100002480 var_50          = qword ptr -50h
__text:0000000100002480 var_48          = qword ptr -48h
__text:0000000100002480 var_40          = qword ptr -40h
__text:0000000100002480 var_38          = qword ptr -38h
__text:0000000100002480 var_30          = qword ptr -30h
__text:0000000100002480 var_28          = qword ptr -28h
__text:0000000100002480 var_20          = qword ptr -20h
__text:0000000100002480 var_18          = qword ptr -18h
__text:0000000100002480
__text:0000000100002480                 push    rbp
__text:0000000100002481                 mov     rbp, rsp
__text:0000000100002484                 push    r14
__text:0000000100002486                 push    rbx
__text:0000000100002487                 sub     rsp, 140h
__text:000000010000248E                 lea     rax, _v
__text:0000000100002495                 mov     [rbp+var_138], rax
__text:000000010000249C
__text:000000010000249C loc_10000249C:                          ; CODE XREF: ___cxx_global_var_init+1F8↓j
__text:000000010000249C                 mov     rax, [rbp+var_138]
__text:00000001000024A3                 lea     rcx, [rbp+var_C0]
__text:00000001000024AA                 lea     rdx, [rbp+var_D8]
__text:00000001000024B1                 lea     rsi, [rbp+var_110]
__text:00000001000024B8                 lea     rdi, [rbp+var_98]
__text:00000001000024BF                 lea     r8, [rbp+var_108]
__text:00000001000024C6                 lea     r9, [rbp+var_68]
__text:00000001000024CA                 lea     r10, [rbp+var_100]
__text:00000001000024D1                 lea     r11, [rbp+var_38]
__text:00000001000024D5                 mov     [rbp+var_120], rax
__text:00000001000024DC                 mov     rbx, [rbp+var_120]
__text:00000001000024E3                 mov     [rbp+var_118], rbx
__text:00000001000024EA                 mov     rbx, [rbp+var_118]
__text:00000001000024F1                 mov     [rbp+var_F8], rbx
__text:00000001000024F8                 mov     rbx, [rbp+var_F8]
__text:00000001000024FF                 mov     r14, rbx
__text:0000000100002502                 mov     [rbp+var_F0], r14
__text:0000000100002509                 mov     [rbp+var_28], r11
__text:000000010000250D                 mov     [rbp+var_30], 0FFFFFFFFFFFFFFFFh
__text:0000000100002515                 mov     r11, [rbp+var_28]
__text:0000000100002519                 mov     r14, [rbp+var_30]
__text:000000010000251D                 mov     [rbp+var_18], r11
__text:0000000100002521                 mov     [rbp+var_20], r14
__text:0000000100002525                 mov     r11, [rbp+var_18]
__text:0000000100002529                 mov     qword ptr [r11], 0
__text:0000000100002530                 mov     r11, [rbp+var_38]
__text:0000000100002534                 mov     [rbp+var_100], r11
__text:000000010000253B                 mov     [rbp+var_40], r10
__text:000000010000253F                 mov     qword ptr [rbx], 0
__text:0000000100002546                 mov     [rbp+var_58], r9
__text:000000010000254A                 mov     [rbp+var_60], 0FFFFFFFFFFFFFFFFh
__text:0000000100002552                 mov     r9, [rbp+var_58]
__text:0000000100002556                 mov     r10, [rbp+var_60]
__text:000000010000255A                 mov     [rbp+var_48], r9
__text:000000010000255E                 mov     [rbp+var_50], r10
__text:0000000100002562                 mov     r9, [rbp+var_48]
__text:0000000100002566                 mov     qword ptr [r9], 0
__text:000000010000256D                 mov     r9, [rbp+var_68]
__text:0000000100002571                 mov     [rbp+var_108], r9
__text:0000000100002578                 mov     [rbp+var_70], r8
__text:000000010000257C                 mov     qword ptr [rbx+8], 0
__text:0000000100002584                 add     rbx, 10h
__text:000000010000258B                 mov     [rbp+var_88], rdi
__text:0000000100002592                 mov     [rbp+var_90], 0FFFFFFFFFFFFFFFFh
__text:000000010000259D                 mov     rdi, [rbp+var_88]
__text:00000001000025A4                 mov     r8, [rbp+var_90]
__text:00000001000025AB                 mov     [rbp+var_78], rdi
__text:00000001000025AF                 mov     [rbp+var_80], r8
__text:00000001000025B3                 mov     rdi, [rbp+var_78]
__text:00000001000025B7                 mov     qword ptr [rdi], 0
__text:00000001000025BE                 mov     rdi, [rbp+var_98]
__text:00000001000025C5                 mov     [rbp+var_110], rdi
__text:00000001000025CC                 mov     [rbp+var_A0], rsi
__text:00000001000025D3                 mov     [rbp+var_E0], rbx
__text:00000001000025DA                 mov     [rbp+var_E8], 0
__text:00000001000025E5                 mov     rsi, [rbp+var_E0]
__text:00000001000025EC                 mov     rdi, [rbp+var_E8]
__text:00000001000025F3                 mov     [rbp+var_D0], rsi
__text:00000001000025FA                 mov     [rbp+var_D8], rdi
__text:0000000100002601                 mov     rsi, [rbp+var_D0]
__text:0000000100002608                 mov     [rbp+var_C8], rdx
__text:000000010000260F                 mov     rdx, [rbp+var_C8]
__text:0000000100002616                 mov     rdx, [rdx]
__text:0000000100002619                 mov     [rbp+var_B8], rsi
__text:0000000100002620                 mov     [rbp+var_C0], rdx
__text:0000000100002627                 mov     rdx, [rbp+var_B8]
__text:000000010000262E                 mov     rsi, rdx
__text:0000000100002631                 mov     [rbp+var_B0], rsi
__text:0000000100002638                 mov     [rbp+var_A8], rcx
__text:000000010000263F                 mov     rcx, [rbp+var_A8]
__text:0000000100002646                 mov     rcx, [rcx]
__text:0000000100002649                 mov     [rdx], rcx
__text:000000010000264C                 mov     [rbp+var_140], rax
__text:0000000100002653                 lea     rax, _v
__text:000000010000265A                 add     rax, 5DC0h
__text:0000000100002660                 mov     rcx, [rbp+var_140]
__text:0000000100002667                 add     rcx, 18h
__text:000000010000266E                 cmp     rcx, rax
__text:0000000100002671                 mov     [rbp+var_138], rcx
__text:0000000100002678                 jnz     loc_10000249C
__text:000000010000267E                 lea     rdi, ___cxx_global_array_dtor ; lpfunc
__text:0000000100002685                 mov     rsi, 0          ; obj
__text:000000010000268F                 lea     rdx, __mh_execute_header ; lpdso_handle
__text:0000000100002696                 call    ___cxa_atexit
__text:000000010000269B                 mov     [rbp+var_144], eax
__text:00000001000026A1                 add     rsp, 140h
__text:00000001000026A8                 pop     rbx
__text:00000001000026A9                 pop     r14
__text:00000001000026AB                 pop     rbp
__text:00000001000026AC                 retn
__text:00000001000026AC ___cxx_global_var_init endp
__text:00000001000026AC
__text:00000001000026AC ; ---------------------------------------------------------------------------
__text:00000001000026AD                 align 10h
__text:00000001000026B0
__text:00000001000026B0 ; =============== S U B R O U T I N E =======================================
__text:00000001000026B0
__text:00000001000026B0 ; Attributes: bp-based frame
__text:00000001000026B0
__text:00000001000026B0 ; void __cdecl __cxx_global_array_dtor(void *)
__text:00000001000026B0 ___cxx_global_array_dtor proc near      ; DATA XREF: ___cxx_global_var_init+1FE↑o
__text:00000001000026B0
__text:00000001000026B0 var_28          = qword ptr -28h
__text:00000001000026B0 var_20          = qword ptr -20h
__text:00000001000026B0 var_8           = qword ptr -8
__text:00000001000026B0
__text:00000001000026B0                 push    rbp
__text:00000001000026B1                 mov     rbp, rsp
__text:00000001000026B4                 sub     rsp, 40h
__text:00000001000026B8                 lea     rax, _v
__text:00000001000026BF                 add     rax, 5DC0h
__text:00000001000026C5                 mov     [rbp+var_8], rdi
__text:00000001000026C9                 mov     [rbp+var_20], rax
__text:00000001000026CD
__text:00000001000026CD loc_1000026CD:                          ; CODE XREF: ___cxx_global_array_dtor+48↓j
__text:00000001000026CD                 mov     rax, [rbp+var_20]
__text:00000001000026D1                 add     rax, 0FFFFFFFFFFFFFFE8h
__text:00000001000026D5                 mov     rdi, rax
__text:00000001000026D8                 mov     [rbp+var_28], rax
__text:00000001000026DC                 call    j___ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev ; std::__1::vector<int,std::__1::allocator<int>>::~vector()
__text:00000001000026E1                 jmp     $+5
__text:00000001000026E6 ; ---------------------------------------------------------------------------
__text:00000001000026E6
__text:00000001000026E6 loc_1000026E6:                          ; CODE XREF: ___cxx_global_array_dtor+31↑j
__text:00000001000026E6                 lea     rax, _v
__text:00000001000026ED                 mov     rcx, [rbp+var_28]
__text:00000001000026F1                 cmp     rcx, rax
__text:00000001000026F4                 mov     [rbp+var_20], rcx
__text:00000001000026F8                 jnz     loc_1000026CD
__text:00000001000026FE                 add     rsp, 40h
__text:0000000100002702                 pop     rbp
__text:0000000100002703                 retn
__text:0000000100002703 ___cxx_global_array_dtor endp
__text:0000000100002703
__text:0000000100002704 ; ---------------------------------------------------------------------------
__text:0000000100002704                 lea     rcx, _v
__text:000000010000270B                 mov     esi, edx
__text:000000010000270D                 mov     [rbp-10h], rax
__text:0000000100002711                 mov     [rbp-14h], esi
__text:0000000100002714                 mov     rax, [rbp-28h]
__text:0000000100002718                 cmp     rcx, rax
__text:000000010000271B                 mov     [rbp-30h], rax
__text:000000010000271F                 jz      loc_100002756
__text:0000000100002725
__text:0000000100002725 loc_100002725:                          ; CODE XREF: __text:0000000100002750↓j
__text:0000000100002725                 mov     rax, [rbp-30h]
__text:0000000100002729                 add     rax, 0FFFFFFFFFFFFFFE8h
__text:000000010000272D                 mov     rdi, rax
__text:0000000100002730                 mov     [rbp-38h], rax
__text:0000000100002734                 call    j___ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev ; std::__1::vector<int,std::__1::allocator<int>>::~vector()
__text:0000000100002739                 jmp     $+5
__text:000000010000273E ; ---------------------------------------------------------------------------
__text:000000010000273E
__text:000000010000273E loc_10000273E:                          ; CODE XREF: __text:0000000100002739↑j
__text:000000010000273E                 lea     rax, _v
__text:0000000100002745                 mov     rcx, [rbp-38h]
__text:0000000100002749                 cmp     rcx, rax
__text:000000010000274C                 mov     [rbp-30h], rcx
__text:0000000100002750                 jnz     loc_100002725
__text:0000000100002756
__text:0000000100002756 loc_100002756:                          ; CODE XREF: __text:000000010000271F↑j
__text:0000000100002756                 jmp     $+5
__text:000000010000275B ; ---------------------------------------------------------------------------
__text:000000010000275B
__text:000000010000275B loc_10000275B:                          ; CODE XREF: __text:loc_100002756↑j
__text:000000010000275B                 mov     rdi, [rbp-10h]
__text:000000010000275F                 call    __Unwind_Resume
__text:0000000100002764 ; ---------------------------------------------------------------------------
__text:0000000100002764                 mov     ecx, edx
__text:0000000100002766                 mov     rdi, rax
__text:0000000100002769                 mov     [rbp-3Ch], ecx
__text:000000010000276C                 call    ___clang_call_terminate
__text:000000010000276C ; ---------------------------------------------------------------------------
__text:0000000100002771                 align 20h
__text:0000000100002780
__text:0000000100002780 ; =============== S U B R O U T I N E =======================================
__text:0000000100002780
__text:0000000100002780 ; Attributes: bp-based frame
__text:0000000100002780
__text:0000000100002780 ___cxx_global_var_init1 proc near       ; CODE XREF: `global constructor keyed to'_a+9↓p
__text:0000000100002780
__text:0000000100002780 var_5C          = dword ptr -5Ch
__text:0000000100002780 var_58          = qword ptr -58h
__text:0000000100002780 var_50          = qword ptr -50h
__text:0000000100002780 var_48          = qword ptr -48h
__text:0000000100002780 var_40          = qword ptr -40h
__text:0000000100002780 var_38          = qword ptr -38h
__text:0000000100002780 var_30          = qword ptr -30h
__text:0000000100002780 var_24          = dword ptr -24h
__text:0000000100002780 var_20          = qword ptr -20h
__text:0000000100002780 var_18          = qword ptr -18h
__text:0000000100002780 var_10          = qword ptr -10h
__text:0000000100002780 var_8           = qword ptr -8
__text:0000000100002780
__text:0000000100002780                 push    rbp
__text:0000000100002781                 mov     rbp, rsp
__text:0000000100002784                 sub     rsp, 60h
__text:0000000100002788                 lea     rax, _s
__text:000000010000278F                 mov     [rbp+var_58], rax
__text:0000000100002793                 mov     rax, [rbp+var_58]
__text:0000000100002797                 mov     [rbp+var_50], rax
__text:000000010000279B                 mov     rax, [rbp+var_50]
__text:000000010000279F                 mov     [rbp+var_48], rax
__text:00000001000027A3                 mov     rcx, [rbp+var_48]
__text:00000001000027A7                 mov     [rbp+var_40], rcx
__text:00000001000027AB                 mov     rcx, [rbp+var_40]
__text:00000001000027AF                 mov     [rbp+var_38], rcx
__text:00000001000027B3                 mov     rcx, [rbp+var_38]
__text:00000001000027B7                 mov     [rbp+var_30], rcx
__text:00000001000027BB                 mov     [rbp+var_18], rax
__text:00000001000027BF                 mov     rax, [rbp+var_18]
__text:00000001000027C3                 mov     [rbp+var_10], rax
__text:00000001000027C7                 mov     rax, [rbp+var_10]
__text:00000001000027CB                 mov     [rbp+var_8], rax
__text:00000001000027CF                 mov     rax, [rbp+var_8]
__text:00000001000027D3                 mov     [rbp+var_20], rax
__text:00000001000027D7                 mov     [rbp+var_24], 0
__text:00000001000027DE
__text:00000001000027DE loc_1000027DE:                          ; CODE XREF: ___cxx_global_var_init1+87↓j
__text:00000001000027DE                 cmp     [rbp+var_24], 3
__text:00000001000027E5                 jnb     loc_10000280C
__text:00000001000027EB                 mov     eax, [rbp+var_24]
__text:00000001000027EE                 mov     ecx, eax
__text:00000001000027F0                 mov     rdx, [rbp+var_20]
__text:00000001000027F4                 mov     qword ptr [rdx+rcx*8], 0
__text:00000001000027FC                 mov     eax, [rbp+var_24]
__text:00000001000027FF                 add     eax, 1
__text:0000000100002804                 mov     [rbp+var_24], eax
__text:0000000100002807                 jmp     loc_1000027DE
__text:000000010000280C ; ---------------------------------------------------------------------------
__text:000000010000280C
__text:000000010000280C loc_10000280C:                          ; CODE XREF: ___cxx_global_var_init1+65↑j
__text:000000010000280C                 mov     rax, cs:__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev_ptr
__text:0000000100002813                 lea     rcx, _s
__text:000000010000281A                 lea     rdx, __mh_execute_header ; lpdso_handle
__text:0000000100002821                 mov     rdi, rax        ; lpfunc
__text:0000000100002824                 mov     rsi, rcx        ; obj
__text:0000000100002827                 call    ___cxa_atexit
__text:000000010000282C                 mov     [rbp+var_5C], eax
__text:000000010000282F                 add     rsp, 60h
__text:0000000100002833                 pop     rbp
__text:0000000100002834                 retn
__text:0000000100002834 ___cxx_global_var_init1 endp
__text:0000000100002834
__text:0000000100002834 ; ---------------------------------------------------------------------------
__text:0000000100002835                 align 20h
__text:0000000100002840
__text:0000000100002840 ; =============== S U B R O U T I N E =======================================
__text:0000000100002840
__text:0000000100002840 ; Attributes: bp-based frame
__text:0000000100002840
__text:0000000100002840 ; `global constructor keyed to'_a
__text:0000000100002840                 public __GLOBAL__I_a
__text:0000000100002840 __GLOBAL__I_a   proc near               ; DATA XREF: __mod_init_func:0000000100005178↓o
__text:0000000100002840                 push    rbp
__text:0000000100002841                 mov     rbp, rsp
__text:0000000100002844                 call    ___cxx_global_var_init
__text:0000000100002849                 call    ___cxx_global_var_init1
__text:000000010000284E                 pop     rbp
__text:000000010000284F                 retn
__text:000000010000284F __GLOBAL__I_a   endp
__text:000000010000284F
__text:0000000100002850
__text:0000000100002850 ; =============== S U B R O U T I N E =======================================
__text:0000000100002850
__text:0000000100002850 ; Attributes: bp-based frame
__text:0000000100002850
__text:0000000100002850 ; std::__1::vector<int, std::__1::allocator<int>>::~vector()
__text:0000000100002850 __ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev proc near
__text:0000000100002850                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev_ptr↓o
__text:0000000100002850
__text:0000000100002850 var_8           = qword ptr -8
__text:0000000100002850
__text:0000000100002850                 push    rbp
__text:0000000100002851                 mov     rbp, rsp
__text:0000000100002854                 sub     rsp, 10h
__text:0000000100002858                 mov     [rbp+var_8], rdi
__text:000000010000285C                 mov     rdi, [rbp+var_8]
__text:0000000100002860                 call    j___ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev ; std::__1::vector<int,std::__1::allocator<int>>::~vector()
__text:0000000100002865                 add     rsp, 10h
__text:0000000100002869                 pop     rbp
__text:000000010000286A                 retn
__text:000000010000286A __ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev endp
__text:000000010000286A
__text:000000010000286A ; ---------------------------------------------------------------------------
__text:000000010000286B                 align 10h
__text:0000000100002870
__text:0000000100002870 ; =============== S U B R O U T I N E =======================================
__text:0000000100002870
__text:0000000100002870 ; Attributes: noreturn bp-based frame
__text:0000000100002870
__text:0000000100002870 ___clang_call_terminate proc near       ; CODE XREF: __text:000000010000276C↑p
__text:0000000100002870                                         ; __text:0000000100003079↓p ...
__text:0000000100002870
__text:0000000100002870 var_8           = qword ptr -8
__text:0000000100002870
__text:0000000100002870                 push    rbp
__text:0000000100002871                 mov     rbp, rsp
__text:0000000100002874                 sub     rsp, 10h
__text:0000000100002878                 call    ___cxa_begin_catch
__text:000000010000287D                 mov     [rbp+var_8], rax
__text:0000000100002881                 call    __ZSt9terminatev ; std::terminate(void)
__text:0000000100002881 ___clang_call_terminate endp
__text:0000000100002881
__text:0000000100002881 ; ---------------------------------------------------------------------------
__text:0000000100002886                 align 10h
__text:0000000100002890
__text:0000000100002890 ; =============== S U B R O U T I N E =======================================
__text:0000000100002890
__text:0000000100002890 ; Attributes: bp-based frame
__text:0000000100002890
__text:0000000100002890 ; std::__1::basic_istream<char, std::__1::char_traits<char>> & std::__1::operator>><char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>> &, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> &)
__text:0000000100002890 __ZNSt3__1rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE proc near
__text:0000000100002890                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__1rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE_ptr↓o
__text:0000000100002890
__text:0000000100002890 var_2CC         = dword ptr -2CCh
__text:0000000100002890 var_2C8         = qword ptr -2C8h
__text:0000000100002890 var_2C0         = qword ptr -2C0h
__text:0000000100002890 var_2B2         = byte ptr -2B2h
__text:0000000100002890 var_2B1         = byte ptr -2B1h
__text:0000000100002890 var_2B0         = qword ptr -2B0h
__text:0000000100002890 var_2A8         = qword ptr -2A8h
__text:0000000100002890 var_2A0         = dword ptr -2A0h
__text:0000000100002890 var_29C         = dword ptr -29Ch
__text:0000000100002890 var_298         = qword ptr -298h
__text:0000000100002890 var_290         = qword ptr -290h
__text:0000000100002890 var_288         = qword ptr -288h
__text:0000000100002890 var_280         = qword ptr -280h
__text:0000000100002890 var_278         = qword ptr -278h
__text:0000000100002890 var_270         = qword ptr -270h
__text:0000000100002890 var_262         = byte ptr -262h
__text:0000000100002890 var_261         = byte ptr -261h
__text:0000000100002890 var_260         = dword ptr -260h
__text:0000000100002890 var_25C         = dword ptr -25Ch
__text:0000000100002890 var_258         = byte ptr -258h
__text:0000000100002890 var_250         = qword ptr -250h
__text:0000000100002890 var_248         = qword ptr -248h
__text:0000000100002890 var_240         = qword ptr -240h
__text:0000000100002890 var_234         = dword ptr -234h
__text:0000000100002890 var_230         = qword ptr -230h
__text:0000000100002890 var_228         = byte ptr -228h
__text:0000000100002890 var_220         = qword ptr -220h
__text:0000000100002890 var_218         = qword ptr -218h
__text:0000000100002890 var_210         = qword ptr -210h
__text:0000000100002890 var_206         = byte ptr -206h
__text:0000000100002890 var_205         = byte ptr -205h
__text:0000000100002890 var_1F8         = qword ptr -1F8h
__text:0000000100002890 var_1F0         = qword ptr -1F0h
__text:0000000100002890 var_1E8         = qword ptr -1E8h
__text:0000000100002890 var_1E0         = qword ptr -1E0h
__text:0000000100002890 var_1D8         = qword ptr -1D8h
__text:0000000100002890 var_1D0         = qword ptr -1D0h
__text:0000000100002890 var_1C8         = qword ptr -1C8h
__text:0000000100002890 var_1C0         = qword ptr -1C0h
__text:0000000100002890 var_1B8         = qword ptr -1B8h
__text:0000000100002890 var_1B0         = qword ptr -1B0h
__text:0000000100002890 var_1A8         = qword ptr -1A8h
__text:0000000100002890 var_1A0         = qword ptr -1A0h
__text:0000000100002890 var_198         = qword ptr -198h
__text:0000000100002890 var_190         = qword ptr -190h
__text:0000000100002890 var_188         = qword ptr -188h
__text:0000000100002890 var_180         = qword ptr -180h
__text:0000000100002890 var_178         = qword ptr -178h
__text:0000000100002890 var_170         = qword ptr -170h
__text:0000000100002890 var_168         = qword ptr -168h
__text:0000000100002890 var_160         = qword ptr -160h
__text:0000000100002890 var_158         = qword ptr -158h
__text:0000000100002890 var_150         = qword ptr -150h
__text:0000000100002890 var_148         = qword ptr -148h
__text:0000000100002890 var_140         = qword ptr -140h
__text:0000000100002890 var_138         = qword ptr -138h
__text:0000000100002890 var_12C         = dword ptr -12Ch
__text:0000000100002890 var_128         = qword ptr -128h
__text:0000000100002890 var_11C         = dword ptr -11Ch
__text:0000000100002890 var_118         = qword ptr -118h
__text:0000000100002890 var_110         = qword ptr -110h
__text:0000000100002890 var_104         = dword ptr -104h
__text:0000000100002890 var_100         = qword ptr -100h
__text:0000000100002890 var_F4          = dword ptr -0F4h
__text:0000000100002890 var_F0          = qword ptr -0F0h
__text:0000000100002890 var_E8          = qword ptr -0E8h
__text:0000000100002890 var_E0          = qword ptr -0E0h
__text:0000000100002890 var_D8          = qword ptr -0D8h
__text:0000000100002890 var_D0          = qword ptr -0D0h
__text:0000000100002890 var_C8          = qword ptr -0C8h
__text:0000000100002890 var_A0          = qword ptr -0A0h
__text:0000000100002890 var_98          = qword ptr -98h
__text:0000000100002890 var_88          = qword ptr -88h
__text:0000000100002890 var_80          = qword ptr -80h
__text:0000000100002890 var_78          = qword ptr -78h
__text:0000000100002890 var_70          = qword ptr -70h
__text:0000000100002890 var_68          = qword ptr -68h
__text:0000000100002890 var_60          = dword ptr -60h
__text:0000000100002890 var_59          = byte ptr -59h
__text:0000000100002890 var_58          = qword ptr -58h
__text:0000000100002890 var_50          = qword ptr -50h
__text:0000000100002890 var_45          = byte ptr -45h
__text:0000000100002890 var_44          = dword ptr -44h
__text:0000000100002890 var_40          = qword ptr -40h
__text:0000000100002890 var_38          = qword ptr -38h
__text:0000000100002890 var_30          = qword ptr -30h
__text:0000000100002890 var_28          = qword ptr -28h
__text:0000000100002890 var_1C          = dword ptr -1Ch
__text:0000000100002890 var_18          = dword ptr -18h
__text:0000000100002890 var_14          = dword ptr -14h
__text:0000000100002890 var_10          = qword ptr -10h
__text:0000000100002890 var_8           = dword ptr -8
__text:0000000100002890 var_1           = byte ptr -1
__text:0000000100002890
__text:0000000100002890                 push    rbp
__text:0000000100002891                 mov     rbp, rsp
__text:0000000100002894                 sub     rsp, 2D0h
__text:000000010000289B                 mov     [rbp+var_218], rdi
__text:00000001000028A2                 mov     [rbp+var_220], rsi
__text:00000001000028A9                 mov     rsi, [rbp+var_218]
__text:00000001000028B0                 lea     rdi, [rbp+var_228]
__text:00000001000028B7                 xor     edx, edx
__text:00000001000028B9                 call    __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC1ERS3_b ; std::__1::basic_istream<char,std::__1::char_traits<char>>::sentry::sentry(std::__1::basic_istream<char,std::__1::char_traits<char>>&,bool)
__text:00000001000028BE                 jmp     $+5
__text:00000001000028C3 ; ---------------------------------------------------------------------------
__text:00000001000028C3
__text:00000001000028C3 loc_1000028C3:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+2E↑j
__text:00000001000028C3                 lea     rax, [rbp+var_228]
__text:00000001000028CA                 mov     [rbp+var_210], rax
__text:00000001000028D1                 mov     rax, [rbp+var_210]
__text:00000001000028D8                 mov     cl, [rax]
__text:00000001000028DA                 mov     [rbp+var_262], cl
__text:00000001000028E0                 mov     al, [rbp+var_262]
__text:00000001000028E6                 test    al, 1
__text:00000001000028E8                 jnz     loc_1000028F3
__text:00000001000028EE                 jmp     loc_100002FDF
__text:00000001000028F3 ; ---------------------------------------------------------------------------
__text:00000001000028F3
__text:00000001000028F3 loc_1000028F3:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+58↑j
__text:00000001000028F3                 mov     rax, [rbp+var_220]
__text:00000001000028FA                 mov     [rbp+var_1F8], rax
__text:0000000100002901                 mov     rax, [rbp+var_1F8]
__text:0000000100002908                 mov     [rbp+var_1F0], rax
__text:000000010000290F                 mov     [rbp+var_148], rax
__text:0000000100002916                 mov     rcx, [rbp+var_148]
__text:000000010000291D                 mov     [rbp+var_140], rcx
__text:0000000100002924                 mov     rcx, [rbp+var_140]
__text:000000010000292B                 mov     [rbp+var_138], rcx
__text:0000000100002932                 mov     rcx, [rbp+var_138]
__text:0000000100002939                 movzx   edx, byte ptr [rcx]
__text:000000010000293C                 and     edx, 1
__text:0000000100002942                 cmp     edx, 0
__text:0000000100002948                 mov     [rbp+var_270], rax
__text:000000010000294F                 jz      loc_1000029FF
__text:0000000100002955                 lea     rax, [rbp+var_205]
__text:000000010000295C                 mov     rcx, [rbp+var_270]
__text:0000000100002963                 mov     [rbp+var_160], rcx
__text:000000010000296A                 mov     rdx, [rbp+var_160]
__text:0000000100002971                 mov     [rbp+var_158], rdx
__text:0000000100002978                 mov     rdx, [rbp+var_158]
__text:000000010000297F                 mov     [rbp+var_150], rdx
__text:0000000100002986                 mov     rdx, [rbp+var_150]
__text:000000010000298D                 mov     rdx, [rdx+10h]
__text:0000000100002991                 mov     [rbp+var_205], 0
__text:0000000100002998                 mov     [rbp+var_168], rdx
__text:000000010000299F                 mov     [rbp+var_170], rax
__text:00000001000029A6                 mov     rax, [rbp+var_170]
__text:00000001000029AD                 mov     sil, [rax]
__text:00000001000029B0                 mov     rax, [rbp+var_168]
__text:00000001000029B7                 mov     [rax], sil
__text:00000001000029BA                 mov     [rbp+var_188], rcx
__text:00000001000029C1                 mov     [rbp+var_190], 0
__text:00000001000029CC                 mov     rax, [rbp+var_188]
__text:00000001000029D3                 mov     rdx, [rbp+var_190]
__text:00000001000029DA                 mov     [rbp+var_180], rax
__text:00000001000029E1                 mov     rax, [rbp+var_180]
__text:00000001000029E8                 mov     [rbp+var_178], rax
__text:00000001000029EF                 mov     rax, [rbp+var_178]
__text:00000001000029F6                 mov     [rax+8], rdx
__text:00000001000029FA                 jmp     loc_100002AC9
__text:00000001000029FF ; ---------------------------------------------------------------------------
__text:00000001000029FF
__text:00000001000029FF loc_1000029FF:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+BF↑j
__text:00000001000029FF                 lea     rax, [rbp+var_206]
__text:0000000100002A06                 mov     rcx, [rbp+var_270]
__text:0000000100002A0D                 mov     [rbp+var_1B8], rcx
__text:0000000100002A14                 mov     rdx, [rbp+var_1B8]
__text:0000000100002A1B                 mov     [rbp+var_1B0], rdx
__text:0000000100002A22                 mov     rdx, [rbp+var_1B0]
__text:0000000100002A29                 mov     [rbp+var_1A8], rdx
__text:0000000100002A30                 mov     rdx, [rbp+var_1A8]
__text:0000000100002A37                 add     rdx, 1
__text:0000000100002A3E                 mov     [rbp+var_1A0], rdx
__text:0000000100002A45                 mov     rdx, [rbp+var_1A0]
__text:0000000100002A4C                 mov     [rbp+var_198], rdx
__text:0000000100002A53                 mov     rdx, [rbp+var_198]
__text:0000000100002A5A                 mov     [rbp+var_206], 0
__text:0000000100002A61                 mov     [rbp+var_1C0], rdx
__text:0000000100002A68                 mov     [rbp+var_1C8], rax
__text:0000000100002A6F                 mov     rax, [rbp+var_1C8]
__text:0000000100002A76                 mov     sil, [rax]
__text:0000000100002A79                 mov     rax, [rbp+var_1C0]
__text:0000000100002A80                 mov     [rax], sil
__text:0000000100002A83                 mov     [rbp+var_1E0], rcx
__text:0000000100002A8A                 mov     [rbp+var_1E8], 0
__text:0000000100002A95                 mov     rax, [rbp+var_1E0]
__text:0000000100002A9C                 mov     rdx, [rbp+var_1E8]
__text:0000000100002AA3                 shl     rdx, 1
__text:0000000100002AA7                 mov     sil, dl
__text:0000000100002AAA                 mov     [rbp+var_1D8], rax
__text:0000000100002AB1                 mov     rax, [rbp+var_1D8]
__text:0000000100002AB8                 mov     [rbp+var_1D0], rax
__text:0000000100002ABF                 mov     rax, [rbp+var_1D0]
__text:0000000100002AC6                 mov     [rax], sil
__text:0000000100002AC9
__text:0000000100002AC9 loc_100002AC9:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+16A↑j
__text:0000000100002AC9                 mov     rax, [rbp+var_218]
__text:0000000100002AD0                 mov     rcx, [rax]
__text:0000000100002AD3                 mov     rcx, [rcx-18h]
__text:0000000100002AD7                 add     rax, rcx
__text:0000000100002ADA                 mov     [rbp+var_110], rax
__text:0000000100002AE1                 mov     rax, [rbp+var_110]
__text:0000000100002AE8                 mov     rax, [rax+18h]
__text:0000000100002AEC                 mov     [rbp+var_278], rax
__text:0000000100002AF3                 mov     rax, [rbp+var_278]
__text:0000000100002AFA                 mov     [rbp+var_240], rax
__text:0000000100002B01                 cmp     [rbp+var_240], 0
__text:0000000100002B0C                 jg      loc_100002BAC
__text:0000000100002B12                 mov     rax, [rbp+var_220]
__text:0000000100002B19                 mov     [rbp+var_E0], rax
__text:0000000100002B20                 mov     rax, [rbp+var_E0]
__text:0000000100002B27                 mov     [rbp+var_D8], rax
__text:0000000100002B2E                 mov     rax, [rbp+var_D8]
__text:0000000100002B35                 mov     [rbp+var_D0], rax
__text:0000000100002B3C                 mov     rax, [rbp+var_D0]
__text:0000000100002B43                 mov     [rbp+var_C8], rax
__text:0000000100002B4A                 mov     rax, [rbp+var_C8]
__text:0000000100002B51                 mov     [rbp+var_A0], rax
__text:0000000100002B58                 mov     rax, [rbp+var_A0]
__text:0000000100002B5F                 mov     [rbp+var_98], rax
__text:0000000100002B66                 mov     rax, [rbp+var_98]
__text:0000000100002B6D                 mov     [rbp+var_88], rax
__text:0000000100002B74                 mov     [rbp+var_E8], 0FFFFFFFFFFFFFFFFh
__text:0000000100002B7F                 mov     rax, [rbp+var_E8]
__text:0000000100002B86                 sub     rax, 10h
__text:0000000100002B8C                 mov     [rbp+var_240], rax
__text:0000000100002B93                 jmp     loc_100002BAC
__text:0000000100002B98 ; ---------------------------------------------------------------------------
__text:0000000100002B98                 mov     ecx, edx
__text:0000000100002B9A                 mov     [rbp+var_230], rax
__text:0000000100002BA1                 mov     [rbp+var_234], ecx
__text:0000000100002BA7                 jmp     loc_100002D6E
__text:0000000100002BAC ; ---------------------------------------------------------------------------
__text:0000000100002BAC
__text:0000000100002BAC loc_100002BAC:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+27C↑j
__text:0000000100002BAC                                         ; std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+303↑j
__text:0000000100002BAC                 cmp     [rbp+var_240], 0
__text:0000000100002BB7                 jg      loc_100002BCE
__text:0000000100002BBD                 mov     rax, 7FFFFFFFFFFFFFFFh
__text:0000000100002BC7                 mov     [rbp+var_240], rax
__text:0000000100002BCE
__text:0000000100002BCE loc_100002BCE:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+327↑j
__text:0000000100002BCE                 mov     [rbp+var_248], 0
__text:0000000100002BD9                 mov     rax, [rbp+var_218]
__text:0000000100002BE0                 mov     rcx, [rax]
__text:0000000100002BE3                 mov     rcx, [rcx-18h]
__text:0000000100002BE7                 add     rax, rcx
__text:0000000100002BEA                 lea     rdi, [rbp+var_258] ; this
__text:0000000100002BF1                 mov     rsi, rax
__text:0000000100002BF4                 call    __ZNKSt3__18ios_base6getlocEv ; std::__1::ios_base::getloc(void)
__text:0000000100002BF9                 jmp     $+5
__text:0000000100002BFE ; ---------------------------------------------------------------------------
__text:0000000100002BFE
__text:0000000100002BFE loc_100002BFE:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+369↑j
__text:0000000100002BFE                 lea     rax, [rbp+var_258]
__text:0000000100002C05                 mov     [rbp+var_38], rax
__text:0000000100002C09                 mov     rsi, cs:__ZNSt3__15ctypeIcE2idE_ptr
__text:0000000100002C10                 mov     rdi, rax
__text:0000000100002C13                 call    __ZNKSt3__16locale9use_facetERNS0_2idE ; std::__1::locale::use_facet(std::__1::locale::id &)
__text:0000000100002C18                 mov     [rbp+var_280], rax
__text:0000000100002C1F                 jmp     $+5
__text:0000000100002C24 ; ---------------------------------------------------------------------------
__text:0000000100002C24
__text:0000000100002C24 loc_100002C24:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+38F↑j
__text:0000000100002C24                 mov     rax, [rbp+var_280]
__text:0000000100002C2B                 mov     [rbp+var_288], rax
__text:0000000100002C32                 lea     rdi, [rbp+var_258] ; this
__text:0000000100002C39                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:0000000100002C3E                 jmp     $+5
__text:0000000100002C43 ; ---------------------------------------------------------------------------
__text:0000000100002C43
__text:0000000100002C43 loc_100002C43:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+3AE↑j
__text:0000000100002C43                 mov     rax, [rbp+var_288]
__text:0000000100002C4A                 mov     [rbp+var_250], rax
__text:0000000100002C51                 mov     [rbp+var_25C], 0
__text:0000000100002C5B
__text:0000000100002C5B loc_100002C5B:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &):loc_100002F2C↓j
__text:0000000100002C5B                 mov     rax, [rbp+var_248]
__text:0000000100002C62                 cmp     rax, [rbp+var_240]
__text:0000000100002C69                 jge     loc_100002F31
__text:0000000100002C6F                 mov     rax, [rbp+var_218]
__text:0000000100002C76                 mov     rcx, [rax]
__text:0000000100002C79                 mov     rcx, [rcx-18h]
__text:0000000100002C7D                 add     rax, rcx
__text:0000000100002C80                 mov     [rbp+var_30], rax
__text:0000000100002C84                 mov     rax, [rbp+var_30]
__text:0000000100002C88                 mov     [rbp+var_28], rax
__text:0000000100002C8C                 mov     rax, [rbp+var_28]
__text:0000000100002C90                 mov     rax, [rax+28h]
__text:0000000100002C94                 mov     [rbp+var_290], rax
__text:0000000100002C9B                 mov     rax, [rbp+var_290]
__text:0000000100002CA2                 mov     [rbp+var_10], rax
__text:0000000100002CA6                 mov     rcx, [rbp+var_10]
__text:0000000100002CAA                 mov     rdx, [rcx+18h]
__text:0000000100002CAE                 cmp     rdx, [rcx+20h]
__text:0000000100002CB2                 mov     [rbp+var_298], rcx
__text:0000000100002CB9                 jnz     loc_100002CEB
__text:0000000100002CBF                 mov     rax, [rbp+var_298]
__text:0000000100002CC6                 mov     rcx, [rax]
__text:0000000100002CC9                 mov     rcx, [rcx+48h]
__text:0000000100002CCD                 mov     rdi, rax
__text:0000000100002CD0                 call    rcx
__text:0000000100002CD2                 mov     [rbp+var_29C], eax
__text:0000000100002CD8                 jmp     $+5
__text:0000000100002CDD ; ---------------------------------------------------------------------------
__text:0000000100002CDD
__text:0000000100002CDD loc_100002CDD:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+448↑j
__text:0000000100002CDD                 mov     eax, [rbp+var_29C]
__text:0000000100002CE3                 mov     [rbp+var_8], eax
__text:0000000100002CE6                 jmp     loc_100002D02
__text:0000000100002CEB ; ---------------------------------------------------------------------------
__text:0000000100002CEB
__text:0000000100002CEB loc_100002CEB:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+429↑j
__text:0000000100002CEB                 mov     rax, [rbp+var_298]
__text:0000000100002CF2                 mov     rcx, [rax+18h]
__text:0000000100002CF6                 mov     dl, [rcx]
__text:0000000100002CF8                 mov     [rbp+var_1], dl
__text:0000000100002CFB                 movzx   esi, [rbp+var_1]
__text:0000000100002CFF                 mov     [rbp+var_8], esi
__text:0000000100002D02
__text:0000000100002D02 loc_100002D02:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+456↑j
__text:0000000100002D02                 mov     eax, [rbp+var_8]
__text:0000000100002D05                 mov     [rbp+var_2A0], eax
__text:0000000100002D0B                 mov     eax, [rbp+var_2A0]
__text:0000000100002D11                 mov     [rbp+var_260], eax
__text:0000000100002D17                 mov     ecx, [rbp+var_260]
__text:0000000100002D1D                 mov     [rbp+var_14], ecx
__text:0000000100002D20                 mov     [rbp+var_18], 0FFFFFFFFh
__text:0000000100002D27                 mov     ecx, [rbp+var_14]
__text:0000000100002D2A                 cmp     ecx, [rbp+var_18]
__text:0000000100002D2D                 jnz     loc_100002DB1
__text:0000000100002D33                 mov     eax, [rbp+var_25C]
__text:0000000100002D39                 or      eax, 2
__text:0000000100002D3E                 mov     [rbp+var_25C], eax
__text:0000000100002D44                 jmp     loc_100002F31
__text:0000000100002D49 ; ---------------------------------------------------------------------------
__text:0000000100002D49                 mov     ecx, edx
__text:0000000100002D4B                 mov     [rbp+var_230], rax
__text:0000000100002D52                 mov     [rbp+var_234], ecx
__text:0000000100002D58                 lea     rdi, [rbp+var_258] ; this
__text:0000000100002D5F                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:0000000100002D64                 jmp     $+5
__text:0000000100002D69 ; ---------------------------------------------------------------------------
__text:0000000100002D69
__text:0000000100002D69 loc_100002D69:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+4D4↑j
__text:0000000100002D69                 jmp     $+5
__text:0000000100002D6E ; ---------------------------------------------------------------------------
__text:0000000100002D6E
__text:0000000100002D6E loc_100002D6E:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+317↑j
__text:0000000100002D6E                                         ; std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &):loc_100002D69↑j
__text:0000000100002D6E                 mov     rdi, [rbp+var_230] ; void *
__text:0000000100002D75                 call    ___cxa_begin_catch
__text:0000000100002D7A                 mov     rdi, [rbp+var_218]
__text:0000000100002D81                 mov     rcx, [rdi]
__text:0000000100002D84                 mov     rcx, [rcx-18h]
__text:0000000100002D88                 add     rdi, rcx        ; this
__text:0000000100002D8B                 mov     [rbp+var_2A8], rax
__text:0000000100002D92                 call    __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv ; std::__1::ios_base::__set_badbit_and_consider_rethrow(void)
__text:0000000100002D97                 jmp     $+5
__text:0000000100002D9C ; ---------------------------------------------------------------------------
__text:0000000100002D9C
__text:0000000100002D9C loc_100002D9C:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+507↑j
__text:0000000100002D9C                 call    ___cxa_end_catch
__text:0000000100002DA1
__text:0000000100002DA1 loc_100002DA1:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &):loc_10000303F↓j
__text:0000000100002DA1                 mov     rax, [rbp+var_218]
__text:0000000100002DA8                 add     rsp, 2D0h
__text:0000000100002DAF                 pop     rbp
__text:0000000100002DB0                 retn
__text:0000000100002DB1 ; ---------------------------------------------------------------------------
__text:0000000100002DB1
__text:0000000100002DB1 loc_100002DB1:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+49D↑j
__text:0000000100002DB1                 mov     eax, [rbp+var_260]
__text:0000000100002DB7                 mov     [rbp+var_1C], eax
__text:0000000100002DBA                 mov     eax, [rbp+var_1C]
__text:0000000100002DBD                 mov     cl, al
__text:0000000100002DBF                 mov     [rbp+var_261], cl
__text:0000000100002DC5                 mov     rdx, [rbp+var_250]
__text:0000000100002DCC                 mov     cl, [rbp+var_261]
__text:0000000100002DD2                 mov     [rbp+var_40], rdx
__text:0000000100002DD6                 mov     [rbp+var_44], 4000h
__text:0000000100002DDD                 mov     [rbp+var_45], cl
__text:0000000100002DE0                 mov     rdx, [rbp+var_40]
__text:0000000100002DE4                 movsx   edi, [rbp+var_45] ; int
__text:0000000100002DE8                 mov     [rbp+var_2B0], rdx
__text:0000000100002DEF                 call    j___Z7isasciii  ; isascii(int)
__text:0000000100002DF4                 cmp     eax, 0
__text:0000000100002DF9                 jz      loc_100002E2C
__text:0000000100002DFF                 movsx   eax, [rbp+var_45]
__text:0000000100002E03                 movsxd  rcx, eax
__text:0000000100002E06                 mov     rdx, [rbp+var_2B0]
__text:0000000100002E0D                 mov     rsi, [rdx+10h]
__text:0000000100002E11                 mov     eax, [rsi+rcx*4]
__text:0000000100002E14                 and     eax, [rbp+var_44]
__text:0000000100002E17                 cmp     eax, 0
__text:0000000100002E1C                 setnz   dil
__text:0000000100002E20                 mov     [rbp+var_2B1], dil
__text:0000000100002E27                 jmp     loc_100002E39
__text:0000000100002E2C ; ---------------------------------------------------------------------------
__text:0000000100002E2C
__text:0000000100002E2C loc_100002E2C:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+569↑j
__text:0000000100002E2C                 mov     al, 0
__text:0000000100002E2E                 mov     [rbp+var_2B1], al
__text:0000000100002E34                 jmp     $+5
__text:0000000100002E39 ; ---------------------------------------------------------------------------
__text:0000000100002E39
__text:0000000100002E39 loc_100002E39:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+597↑j
__text:0000000100002E39                                         ; std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+5A4↑j
__text:0000000100002E39                 mov     al, [rbp+var_2B1]
__text:0000000100002E3F                 mov     [rbp+var_2B2], al
__text:0000000100002E45                 mov     al, [rbp+var_2B2]
__text:0000000100002E4B                 test    al, 1
__text:0000000100002E4D                 jnz     loc_100002E58
__text:0000000100002E53                 jmp     loc_100002E5D
__text:0000000100002E58 ; ---------------------------------------------------------------------------
__text:0000000100002E58
__text:0000000100002E58 loc_100002E58:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+5BD↑j
__text:0000000100002E58                 jmp     loc_100002F31
__text:0000000100002E5D ; ---------------------------------------------------------------------------
__text:0000000100002E5D
__text:0000000100002E5D loc_100002E5D:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+5C3↑j
__text:0000000100002E5D                 mov     rdi, [rbp+var_220]
__text:0000000100002E64                 movsx   esi, [rbp+var_261]
__text:0000000100002E6B                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::push_back(char)
__text:0000000100002E70                 jmp     $+5
__text:0000000100002E75 ; ---------------------------------------------------------------------------
__text:0000000100002E75
__text:0000000100002E75 loc_100002E75:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+5E0↑j
__text:0000000100002E75                 mov     rax, [rbp+var_248]
__text:0000000100002E7C                 add     rax, 1
__text:0000000100002E82                 mov     [rbp+var_248], rax
__text:0000000100002E89                 mov     rax, [rbp+var_218]
__text:0000000100002E90                 mov     rcx, [rax]
__text:0000000100002E93                 mov     rcx, [rcx-18h]
__text:0000000100002E97                 add     rax, rcx
__text:0000000100002E9A                 mov     [rbp+var_58], rax
__text:0000000100002E9E                 mov     rax, [rbp+var_58]
__text:0000000100002EA2                 mov     [rbp+var_50], rax
__text:0000000100002EA6                 mov     rax, [rbp+var_50]
__text:0000000100002EAA                 mov     rax, [rax+28h]
__text:0000000100002EAE                 mov     [rbp+var_2C0], rax
__text:0000000100002EB5                 mov     rax, [rbp+var_2C0]
__text:0000000100002EBC                 mov     [rbp+var_68], rax
__text:0000000100002EC0                 mov     rcx, [rbp+var_68]
__text:0000000100002EC4                 mov     rdx, [rcx+18h]
__text:0000000100002EC8                 cmp     rdx, [rcx+20h]
__text:0000000100002ECC                 mov     [rbp+var_2C8], rcx
__text:0000000100002ED3                 jnz     loc_100002F05
__text:0000000100002ED9                 mov     rax, [rbp+var_2C8]
__text:0000000100002EE0                 mov     rcx, [rax]
__text:0000000100002EE3                 mov     rcx, [rcx+50h]
__text:0000000100002EE7                 mov     rdi, rax
__text:0000000100002EEA                 call    rcx
__text:0000000100002EEC                 mov     [rbp+var_2CC], eax
__text:0000000100002EF2                 jmp     $+5
__text:0000000100002EF7 ; ---------------------------------------------------------------------------
__text:0000000100002EF7
__text:0000000100002EF7 loc_100002EF7:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+662↑j
__text:0000000100002EF7                 mov     eax, [rbp+var_2CC]
__text:0000000100002EFD                 mov     [rbp+var_60], eax
__text:0000000100002F00                 jmp     loc_100002F2C
__text:0000000100002F05 ; ---------------------------------------------------------------------------
__text:0000000100002F05
__text:0000000100002F05 loc_100002F05:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+643↑j
__text:0000000100002F05                 mov     rax, [rbp+var_2C8]
__text:0000000100002F0C                 mov     rcx, [rax+18h]
__text:0000000100002F10                 mov     rdx, rcx
__text:0000000100002F13                 add     rdx, 1
__text:0000000100002F1A                 mov     [rax+18h], rdx
__text:0000000100002F1E                 mov     sil, [rcx]
__text:0000000100002F21                 mov     [rbp+var_59], sil
__text:0000000100002F25                 movzx   edi, [rbp+var_59]
__text:0000000100002F29                 mov     [rbp+var_60], edi
__text:0000000100002F2C
__text:0000000100002F2C loc_100002F2C:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+670↑j
__text:0000000100002F2C                 jmp     loc_100002C5B
__text:0000000100002F31 ; ---------------------------------------------------------------------------
__text:0000000100002F31
__text:0000000100002F31 loc_100002F31:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+3D9↑j
__text:0000000100002F31                                         ; std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+4B4↑j ...
__text:0000000100002F31                 mov     rax, [rbp+var_218]
__text:0000000100002F38                 mov     rcx, [rax]
__text:0000000100002F3B                 mov     rcx, [rcx-18h]
__text:0000000100002F3F                 add     rax, rcx
__text:0000000100002F42                 mov     [rbp+var_70], rax
__text:0000000100002F46                 mov     [rbp+var_78], 0
__text:0000000100002F4E                 mov     rax, [rbp+var_70]
__text:0000000100002F52                 mov     rcx, [rax+18h]
__text:0000000100002F56                 mov     [rbp+var_80], rcx
__text:0000000100002F5A                 mov     rcx, [rbp+var_78]
__text:0000000100002F5E                 mov     [rax+18h], rcx
__text:0000000100002F62                 cmp     [rbp+var_248], 0
__text:0000000100002F6D                 jnz     loc_100002F84
__text:0000000100002F73                 mov     eax, [rbp+var_25C]
__text:0000000100002F79                 or      eax, 4
__text:0000000100002F7E                 mov     [rbp+var_25C], eax
__text:0000000100002F84
__text:0000000100002F84 loc_100002F84:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+6DD↑j
__text:0000000100002F84                 mov     rax, [rbp+var_218]
__text:0000000100002F8B                 mov     rcx, [rax]
__text:0000000100002F8E                 mov     rcx, [rcx-18h]
__text:0000000100002F92                 add     rax, rcx
__text:0000000100002F95                 mov     edx, [rbp+var_25C]
__text:0000000100002F9B                 mov     [rbp+var_100], rax
__text:0000000100002FA2                 mov     [rbp+var_104], edx
__text:0000000100002FA8                 mov     rax, [rbp+var_100]
__text:0000000100002FAF                 mov     [rbp+var_F0], rax
__text:0000000100002FB6                 mov     [rbp+var_F4], edx
__text:0000000100002FBC                 mov     rax, [rbp+var_F0]
__text:0000000100002FC3                 mov     esi, [rax+20h]
__text:0000000100002FC6                 or      esi, edx        ; unsigned int
__text:0000000100002FC8                 mov     rdi, rax        ; this
__text:0000000100002FCB                 call    __ZNSt3__18ios_base5clearEj ; std::__1::ios_base::clear(uint)
__text:0000000100002FD0                 jmp     $+5
__text:0000000100002FD5 ; ---------------------------------------------------------------------------
__text:0000000100002FD5
__text:0000000100002FD5 loc_100002FD5:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+740↑j
__text:0000000100002FD5                 jmp     $+5
__text:0000000100002FDA ; ---------------------------------------------------------------------------
__text:0000000100002FDA
__text:0000000100002FDA loc_100002FDA:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &):loc_100002FD5↑j
__text:0000000100002FDA                 jmp     loc_10000303F
__text:0000000100002FDF ; ---------------------------------------------------------------------------
__text:0000000100002FDF
__text:0000000100002FDF loc_100002FDF:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+5E↑j
__text:0000000100002FDF                 mov     rax, [rbp+var_218]
__text:0000000100002FE6                 mov     rcx, [rax]
__text:0000000100002FE9                 mov     rcx, [rcx-18h]
__text:0000000100002FED                 add     rax, rcx
__text:0000000100002FF0                 mov     [rbp+var_128], rax
__text:0000000100002FF7                 mov     [rbp+var_12C], 4
__text:0000000100003001                 mov     rax, [rbp+var_128]
__text:0000000100003008                 mov     [rbp+var_118], rax
__text:000000010000300F                 mov     [rbp+var_11C], 4
__text:0000000100003019                 mov     rax, [rbp+var_118]
__text:0000000100003020                 mov     edx, [rax+20h]
__text:0000000100003023                 or      edx, 4
__text:0000000100003026                 mov     rdi, rax        ; this
__text:0000000100003029                 mov     esi, edx        ; unsigned int
__text:000000010000302B                 call    __ZNSt3__18ios_base5clearEj ; std::__1::ios_base::clear(uint)
__text:0000000100003030                 jmp     $+5
__text:0000000100003035 ; ---------------------------------------------------------------------------
__text:0000000100003035
__text:0000000100003035 loc_100003035:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &)+7A0↑j
__text:0000000100003035                 jmp     $+5
__text:000000010000303A ; ---------------------------------------------------------------------------
__text:000000010000303A
__text:000000010000303A loc_10000303A:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &):loc_100003035↑j
__text:000000010000303A                 jmp     $+5
__text:000000010000303F ; ---------------------------------------------------------------------------
__text:000000010000303F
__text:000000010000303F loc_10000303F:                          ; CODE XREF: std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &):loc_100002FDA↑j
__text:000000010000303F                                         ; std::__1::operator>><char,std::__1::char_traits<char>,std::__1::allocator<char>>(std::__1::basic_istream<char,std::__1::char_traits<char>> &,std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> &):loc_10000303A↑j
__text:000000010000303F                 jmp     loc_100002DA1
__text:000000010000303F __ZNSt3__1rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE endp
__text:000000010000303F
__text:0000000100003044 ; ---------------------------------------------------------------------------
__text:0000000100003044                 mov     ecx, edx
__text:0000000100003046                 mov     [rbp-230h], rax
__text:000000010000304D                 mov     [rbp-234h], ecx
__text:0000000100003053                 call    ___cxa_end_catch
__text:0000000100003058                 jmp     $+5
__text:000000010000305D ; ---------------------------------------------------------------------------
__text:000000010000305D
__text:000000010000305D loc_10000305D:                          ; CODE XREF: __text:0000000100003058↑j
__text:000000010000305D                 jmp     $+5
__text:0000000100003062 ; ---------------------------------------------------------------------------
__text:0000000100003062
__text:0000000100003062 loc_100003062:                          ; CODE XREF: __text:loc_10000305D↑j
__text:0000000100003062                 mov     rdi, [rbp-230h]
__text:0000000100003069                 call    __Unwind_Resume
__text:000000010000306E ; ---------------------------------------------------------------------------
__text:000000010000306E                 mov     ecx, edx
__text:0000000100003070                 mov     rdi, rax
__text:0000000100003073                 mov     [rbp-2D0h], ecx
__text:0000000100003079                 call    ___clang_call_terminate
__text:0000000100003079 ; ---------------------------------------------------------------------------
__text:000000010000307E                 align 20h
__text:0000000100003080
__text:0000000100003080 ; =============== S U B R O U T I N E =======================================
__text:0000000100003080
__text:0000000100003080 ; Attributes: bp-based frame
__text:0000000100003080
__text:0000000100003080 ; std::__1::basic_ostream<char, std::__1::char_traits<char>> & std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, char const*)
__text:0000000100003080 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc proc near
__text:0000000100003080                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc_ptr↓o
__text:0000000100003080
__text:0000000100003080 var_1A8         = qword ptr -1A8h
__text:0000000100003080 var_1A0         = qword ptr -1A0h
__text:0000000100003080 var_191         = byte ptr -191h
__text:0000000100003080 var_190         = dword ptr -190h
__text:0000000100003080 var_18C         = dword ptr -18Ch
__text:0000000100003080 var_188         = qword ptr -188h
__text:0000000100003080 var_179         = byte ptr -179h
__text:0000000100003080 var_178         = qword ptr -178h
__text:0000000100003080 var_16C         = dword ptr -16Ch
__text:0000000100003080 var_168         = qword ptr -168h
__text:0000000100003080 var_160         = qword ptr -160h
__text:0000000100003080 var_158         = qword ptr -158h
__text:0000000100003080 var_150         = qword ptr -150h
__text:0000000100003080 var_148         = qword ptr -148h
__text:0000000100003080 var_140         = qword ptr -140h
__text:0000000100003080 var_134         = dword ptr -134h
__text:0000000100003080 var_130         = qword ptr -130h
__text:0000000100003080 var_128         = qword ptr -128h
__text:0000000100003080 var_119         = byte ptr -119h
__text:0000000100003080 var_118         = qword ptr -118h
__text:0000000100003080 var_110         = qword ptr -110h
__text:0000000100003080 var_108         = qword ptr -108h
__text:0000000100003080 var_FC          = dword ptr -0FCh
__text:0000000100003080 var_F8          = qword ptr -0F8h
__text:0000000100003080 var_F0          = byte ptr -0F0h
__text:0000000100003080 var_E0          = qword ptr -0E0h
__text:0000000100003080 var_D8          = qword ptr -0D8h
__text:0000000100003080 var_D0          = qword ptr -0D0h
__text:0000000100003080 var_C8          = qword ptr -0C8h
__text:0000000100003080 var_C0          = qword ptr -0C0h
__text:0000000100003080 var_B8          = qword ptr -0B8h
__text:0000000100003080 var_A0          = qword ptr -0A0h
__text:0000000100003080 var_98          = qword ptr -98h
__text:0000000100003080 var_90          = qword ptr -90h
__text:0000000100003080 var_88          = qword ptr -88h
__text:0000000100003080 var_7C          = dword ptr -7Ch
__text:0000000100003080 var_78          = qword ptr -78h
__text:0000000100003080 var_6C          = dword ptr -6Ch
__text:0000000100003080 var_68          = qword ptr -68h
__text:0000000100003080 var_60          = qword ptr -60h
__text:0000000100003080 var_58          = qword ptr -58h
__text:0000000100003080 var_50          = qword ptr -50h
__text:0000000100003080 var_44          = dword ptr -44h
__text:0000000100003080 var_40          = qword ptr -40h
__text:0000000100003080 var_38          = byte ptr -38h
__text:0000000100003080 var_29          = byte ptr -29h
__text:0000000100003080 var_28          = qword ptr -28h
__text:0000000100003080 var_20          = qword ptr -20h
__text:0000000100003080 var_11          = byte ptr -11h
__text:0000000100003080 var_10          = qword ptr -10h
__text:0000000100003080 var_8           = dword ptr -8
__text:0000000100003080 var_4           = dword ptr -4
__text:0000000100003080
__text:0000000100003080                 push    rbp
__text:0000000100003081                 mov     rbp, rsp
__text:0000000100003084                 sub     rsp, 1B0h
__text:000000010000308B                 mov     [rbp+var_D8], rdi
__text:0000000100003092                 mov     [rbp+var_E0], rsi
__text:0000000100003099                 mov     rsi, [rbp+var_D8]
__text:00000001000030A0                 lea     rdi, [rbp+var_F0]
__text:00000001000030A7                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_ ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::sentry::sentry(std::__1::basic_ostream<char,std::__1::char_traits<char>>&)
__text:00000001000030AC                 jmp     $+5
__text:00000001000030B1 ; ---------------------------------------------------------------------------
__text:00000001000030B1
__text:00000001000030B1 loc_1000030B1:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+2C↑j
__text:00000001000030B1                 lea     rax, [rbp+var_F0]
__text:00000001000030B8                 mov     [rbp+var_D0], rax
__text:00000001000030BF                 mov     rax, [rbp+var_D0]
__text:00000001000030C6                 mov     cl, [rax]
__text:00000001000030C8                 mov     [rbp+var_119], cl
__text:00000001000030CE                 mov     al, [rbp+var_119]
__text:00000001000030D4                 test    al, 1
__text:00000001000030D6                 jnz     loc_1000030E1
__text:00000001000030DC                 jmp     loc_100003486
__text:00000001000030E1 ; ---------------------------------------------------------------------------
__text:00000001000030E1
__text:00000001000030E1 loc_1000030E1:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+56↑j
__text:00000001000030E1                 mov     rax, [rbp+var_E0]
__text:00000001000030E8                 mov     [rbp+var_C8], rax
__text:00000001000030EF                 mov     rdi, rax        ; char *
__text:00000001000030F2                 call    _strlen
__text:00000001000030F7                 mov     [rbp+var_128], rax
__text:00000001000030FE                 jmp     $+5
__text:0000000100003103 ; ---------------------------------------------------------------------------
__text:0000000100003103
__text:0000000100003103 loc_100003103:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+7E↑j
__text:0000000100003103                 jmp     $+5
__text:0000000100003108 ; ---------------------------------------------------------------------------
__text:0000000100003108
__text:0000000100003108 loc_100003108:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_100003103↑j
__text:0000000100003108                 lea     rax, [rbp+var_110]
__text:000000010000310F                 mov     rcx, [rbp+var_128]
__text:0000000100003116                 mov     [rbp+var_108], rcx
__text:000000010000311D                 mov     rdx, [rbp+var_D8]
__text:0000000100003124                 mov     [rbp+var_B8], rax
__text:000000010000312B                 mov     [rbp+var_C0], rdx
__text:0000000100003132                 mov     rax, [rbp+var_B8]
__text:0000000100003139                 mov     rdx, [rbp+var_C0]
__text:0000000100003140                 mov     [rbp+var_98], rax
__text:0000000100003147                 mov     [rbp+var_A0], rdx
__text:000000010000314E                 mov     rax, [rbp+var_98]
__text:0000000100003155                 mov     rdx, [rbp+var_A0]
__text:000000010000315C                 mov     rsi, [rdx]
__text:000000010000315F                 mov     rsi, [rsi-18h]
__text:0000000100003163                 add     rdx, rsi
__text:0000000100003166                 mov     [rbp+var_90], rdx
__text:000000010000316D                 mov     rdx, [rbp+var_90]
__text:0000000100003174                 mov     [rbp+var_88], rdx
__text:000000010000317B                 mov     rdx, [rbp+var_88]
__text:0000000100003182                 mov     rdx, [rdx+28h]
__text:0000000100003186                 mov     [rax], rdx
__text:0000000100003189                 mov     rsi, [rbp+var_E0]
__text:0000000100003190                 mov     rax, [rbp+var_D8]
__text:0000000100003197                 mov     rdx, [rax]
__text:000000010000319A                 mov     rdx, [rdx-18h]
__text:000000010000319E                 add     rax, rdx
__text:00000001000031A1                 mov     [rbp+var_60], rax
__text:00000001000031A5                 mov     rax, [rbp+var_60]
__text:00000001000031A9                 mov     edi, [rax+8]
__text:00000001000031AC                 mov     [rbp+var_130], rsi
__text:00000001000031B3                 mov     [rbp+var_134], edi
__text:00000001000031B9                 mov     eax, [rbp+var_134]
__text:00000001000031BF                 and     eax, 0B0h
__text:00000001000031C4                 cmp     eax, 20h ; ' '
__text:00000001000031C9                 jnz     loc_1000031E9
__text:00000001000031CF                 mov     rax, [rbp+var_E0]
__text:00000001000031D6                 add     rax, [rbp+var_108]
__text:00000001000031DD                 mov     [rbp+var_140], rax
__text:00000001000031E4                 jmp     loc_1000031F7
__text:00000001000031E9 ; ---------------------------------------------------------------------------
__text:00000001000031E9
__text:00000001000031E9 loc_1000031E9:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+149↑j
__text:00000001000031E9                 mov     rax, [rbp+var_E0]
__text:00000001000031F0                 mov     [rbp+var_140], rax
__text:00000001000031F7
__text:00000001000031F7 loc_1000031F7:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+164↑j
__text:00000001000031F7                 mov     rax, [rbp+var_140]
__text:00000001000031FE                 mov     rcx, [rbp+var_E0]
__text:0000000100003205                 add     rcx, [rbp+var_108]
__text:000000010000320C                 mov     rdx, [rbp+var_D8]
__text:0000000100003213                 mov     rsi, [rdx]
__text:0000000100003216                 mov     rsi, [rsi-18h]
__text:000000010000321A                 add     rdx, rsi
__text:000000010000321D                 mov     rsi, [rbp+var_D8]
__text:0000000100003224                 mov     rdi, [rsi]
__text:0000000100003227                 mov     rdi, [rdi-18h]
__text:000000010000322B                 add     rsi, rdi
__text:000000010000322E                 mov     [rbp+var_50], rsi
__text:0000000100003232                 mov     rsi, [rbp+var_50]
__text:0000000100003236                 mov     r8d, [rsi+90h]
__text:000000010000323D                 mov     [rbp+var_4], 0FFFFFFFFh
__text:0000000100003244                 mov     [rbp+var_8], r8d
__text:0000000100003248                 mov     r8d, [rbp+var_4]
__text:000000010000324C                 cmp     r8d, [rbp+var_8]
__text:0000000100003250                 mov     [rbp+var_148], rax
__text:0000000100003257                 mov     [rbp+var_150], rcx
__text:000000010000325E                 mov     [rbp+var_158], rdx
__text:0000000100003265                 mov     [rbp+var_160], rsi
__text:000000010000326C                 jnz     loc_100003368
__text:0000000100003272                 mov     rax, [rbp+var_160]
__text:0000000100003279                 mov     [rbp+var_28], rax
__text:000000010000327D                 mov     [rbp+var_29], 20h ; ' '
__text:0000000100003281                 mov     rsi, [rbp+var_28]
__text:0000000100003285                 lea     rdi, [rbp+var_38] ; this
__text:0000000100003289                 call    __ZNKSt3__18ios_base6getlocEv ; std::__1::ios_base::getloc(void)
__text:000000010000328E                 jmp     $+5
__text:0000000100003293 ; ---------------------------------------------------------------------------
__text:0000000100003293
__text:0000000100003293 loc_100003293:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+20E↑j
__text:0000000100003293                 lea     rax, [rbp+var_38]
__text:0000000100003297                 mov     [rbp+var_20], rax
__text:000000010000329B                 mov     rsi, cs:__ZNSt3__15ctypeIcE2idE_ptr
__text:00000001000032A2                 mov     rdi, rax
__text:00000001000032A5                 call    __ZNKSt3__16locale9use_facetERNS0_2idE ; std::__1::locale::use_facet(std::__1::locale::id &)
__text:00000001000032AA                 mov     [rbp+var_168], rax
__text:00000001000032B1                 jmp     $+5
__text:00000001000032B6 ; ---------------------------------------------------------------------------
__text:00000001000032B6
__text:00000001000032B6 loc_1000032B6:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+231↑j
__text:00000001000032B6                 mov     al, [rbp+var_29]
__text:00000001000032B9                 mov     rcx, [rbp+var_168]
__text:00000001000032C0                 mov     [rbp+var_10], rcx
__text:00000001000032C4                 mov     [rbp+var_11], al
__text:00000001000032C7                 mov     rdx, [rbp+var_10]
__text:00000001000032CB                 mov     rsi, [rdx]
__text:00000001000032CE                 mov     rsi, [rsi+38h]
__text:00000001000032D2                 movsx   edi, [rbp+var_11]
__text:00000001000032D6                 mov     [rbp+var_16C], edi
__text:00000001000032DC                 mov     rdi, rdx
__text:00000001000032DF                 mov     r8d, [rbp+var_16C]
__text:00000001000032E6                 mov     [rbp+var_178], rsi
__text:00000001000032ED                 mov     esi, r8d
__text:00000001000032F0                 mov     rdx, [rbp+var_178]
__text:00000001000032F7                 call    rdx
__text:00000001000032F9                 mov     [rbp+var_179], al
__text:00000001000032FF                 jmp     loc_100003344
__text:0000000100003304 ; ---------------------------------------------------------------------------
__text:0000000100003304                 mov     ecx, edx
__text:0000000100003306                 mov     [rbp+var_40], rax
__text:000000010000330A                 mov     [rbp+var_44], ecx
__text:000000010000330D                 lea     rdi, [rbp+var_38] ; this
__text:0000000100003311                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:0000000100003316                 jmp     $+5
__text:000000010000331B ; ---------------------------------------------------------------------------
__text:000000010000331B
__text:000000010000331B loc_10000331B:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+296↑j
__text:000000010000331B                 mov     rax, [rbp+var_40]
__text:000000010000331F                 mov     ecx, [rbp+var_44]
__text:0000000100003322                 mov     [rbp+var_188], rax
__text:0000000100003329                 mov     [rbp+var_18C], ecx
__text:000000010000332F                 jmp     loc_100003456
__text:0000000100003334 ; ---------------------------------------------------------------------------
__text:0000000100003334                 mov     ecx, edx
__text:0000000100003336                 mov     rdi, rax
__text:0000000100003339                 mov     [rbp+var_190], ecx
__text:000000010000333F                 call    ___clang_call_terminate
__text:0000000100003344 ; ---------------------------------------------------------------------------
__text:0000000100003344
__text:0000000100003344 loc_100003344:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+27F↑j
__text:0000000100003344                 lea     rdi, [rbp+var_38] ; this
__text:0000000100003348                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:000000010000334D                 jmp     $+5
__text:0000000100003352 ; ---------------------------------------------------------------------------
__text:0000000100003352
__text:0000000100003352 loc_100003352:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+2CD↑j
__text:0000000100003352                 mov     al, [rbp+var_179]
__text:0000000100003358                 movsx   ecx, al
__text:000000010000335B                 mov     rdx, [rbp+var_160]
__text:0000000100003362                 mov     [rdx+90h], ecx
__text:0000000100003368
__text:0000000100003368 loc_100003368:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+1EC↑j
__text:0000000100003368                 mov     rax, [rbp+var_160]
__text:000000010000336F                 mov     ecx, [rax+90h]
__text:0000000100003375                 mov     dl, cl
__text:0000000100003377                 mov     [rbp+var_191], dl
__text:000000010000337D                 mov     rdi, [rbp+var_110]
__text:0000000100003384                 mov     al, [rbp+var_191]
__text:000000010000338A                 movsx   r9d, al
__text:000000010000338E                 mov     rsi, [rbp+var_130]
__text:0000000100003395                 mov     rdx, [rbp+var_148]
__text:000000010000339C                 mov     rcx, [rbp+var_150]
__text:00000001000033A3                 mov     r8, [rbp+var_158]
__text:00000001000033AA                 call    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)
__text:00000001000033AF                 mov     [rbp+var_1A0], rax
__text:00000001000033B6                 jmp     $+5
__text:00000001000033BB ; ---------------------------------------------------------------------------
__text:00000001000033BB
__text:00000001000033BB loc_1000033BB:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+336↑j
__text:00000001000033BB                 lea     rax, [rbp+var_118]
__text:00000001000033C2                 mov     rcx, [rbp+var_1A0]
__text:00000001000033C9                 mov     [rbp+var_118], rcx
__text:00000001000033D0                 mov     [rbp+var_58], rax
__text:00000001000033D4                 mov     rax, [rbp+var_58]
__text:00000001000033D8                 cmp     qword ptr [rax], 0
__text:00000001000033DF                 jnz     loc_100003481
__text:00000001000033E5                 mov     rax, [rbp+var_D8]
__text:00000001000033EC                 mov     rcx, [rax]
__text:00000001000033EF                 mov     rcx, [rcx-18h]
__text:00000001000033F3                 add     rax, rcx
__text:00000001000033F6                 mov     [rbp+var_78], rax
__text:00000001000033FA                 mov     [rbp+var_7C], 5
__text:0000000100003401                 mov     rax, [rbp+var_78]
__text:0000000100003405                 mov     [rbp+var_68], rax
__text:0000000100003409                 mov     [rbp+var_6C], 5
__text:0000000100003410                 mov     rax, [rbp+var_68]
__text:0000000100003414                 mov     edx, [rax+20h]
__text:0000000100003417                 or      edx, 5
__text:000000010000341A                 mov     rdi, rax        ; this
__text:000000010000341D                 mov     esi, edx        ; unsigned int
__text:000000010000341F                 call    __ZNSt3__18ios_base5clearEj ; std::__1::ios_base::clear(uint)
__text:0000000100003424                 jmp     $+5
__text:0000000100003429 ; ---------------------------------------------------------------------------
__text:0000000100003429
__text:0000000100003429 loc_100003429:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+3A4↑j
__text:0000000100003429                 jmp     $+5
__text:000000010000342E ; ---------------------------------------------------------------------------
__text:000000010000342E
__text:000000010000342E loc_10000342E:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_100003429↑j
__text:000000010000342E                 jmp     loc_100003481
__text:0000000100003433 ; ---------------------------------------------------------------------------
__text:0000000100003433                 mov     ecx, edx
__text:0000000100003435                 mov     [rbp+var_F8], rax
__text:000000010000343C                 mov     [rbp+var_FC], ecx
__text:0000000100003442                 jmp     loc_1000034A1
__text:0000000100003447 ; ---------------------------------------------------------------------------
__text:0000000100003447                 mov     ecx, edx
__text:0000000100003449                 mov     [rbp+var_188], rax
__text:0000000100003450                 mov     [rbp+var_18C], ecx
__text:0000000100003456
__text:0000000100003456 loc_100003456:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+2AF↑j
__text:0000000100003456                 mov     eax, [rbp+var_18C]
__text:000000010000345C                 mov     rcx, [rbp+var_188]
__text:0000000100003463                 mov     [rbp+var_F8], rcx
__text:000000010000346A                 mov     [rbp+var_FC], eax
__text:0000000100003470                 lea     rdi, [rbp+var_F0]
__text:0000000100003477                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::sentry::~sentry()
__text:000000010000347C                 jmp     loc_10000349C
__text:0000000100003481 ; ---------------------------------------------------------------------------
__text:0000000100003481
__text:0000000100003481 loc_100003481:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+35F↑j
__text:0000000100003481                                         ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_10000342E↑j
__text:0000000100003481                 jmp     $+5
__text:0000000100003486 ; ---------------------------------------------------------------------------
__text:0000000100003486
__text:0000000100003486 loc_100003486:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+5C↑j
__text:0000000100003486                                         ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_100003481↑j
__text:0000000100003486                 lea     rdi, [rbp+var_F0]
__text:000000010000348D                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::sentry::~sentry()
__text:0000000100003492                 jmp     $+5
__text:0000000100003497 ; ---------------------------------------------------------------------------
__text:0000000100003497
__text:0000000100003497 loc_100003497:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+412↑j
__text:0000000100003497                 jmp     loc_1000034D4
__text:000000010000349C ; ---------------------------------------------------------------------------
__text:000000010000349C
__text:000000010000349C loc_10000349C:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+3FC↑j
__text:000000010000349C                 jmp     $+5
__text:00000001000034A1 ; ---------------------------------------------------------------------------
__text:00000001000034A1
__text:00000001000034A1 loc_1000034A1:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+3C2↑j
__text:00000001000034A1                                         ; std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_10000349C↑j
__text:00000001000034A1                 mov     rdi, [rbp+var_F8] ; void *
__text:00000001000034A8                 call    ___cxa_begin_catch
__text:00000001000034AD                 mov     rdi, [rbp+var_D8]
__text:00000001000034B4                 mov     rcx, [rdi]
__text:00000001000034B7                 mov     rcx, [rcx-18h]
__text:00000001000034BB                 add     rdi, rcx        ; this
__text:00000001000034BE                 mov     [rbp+var_1A8], rax
__text:00000001000034C5                 call    __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv ; std::__1::ios_base::__set_badbit_and_consider_rethrow(void)
__text:00000001000034CA                 jmp     $+5
__text:00000001000034CF ; ---------------------------------------------------------------------------
__text:00000001000034CF
__text:00000001000034CF loc_1000034CF:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+44A↑j
__text:00000001000034CF                 call    ___cxa_end_catch
__text:00000001000034D4
__text:00000001000034D4 loc_1000034D4:                          ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*):loc_100003497↑j
__text:00000001000034D4                 mov     rax, [rbp+var_D8]
__text:00000001000034DB                 add     rsp, 1B0h
__text:00000001000034E2                 pop     rbp
__text:00000001000034E3                 retn
__text:00000001000034E3 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc endp
__text:00000001000034E3
__text:00000001000034E4 ; ---------------------------------------------------------------------------
__text:00000001000034E4                 mov     ecx, edx
__text:00000001000034E6                 mov     [rbp-0F8h], rax
__text:00000001000034ED                 mov     [rbp-0FCh], ecx
__text:00000001000034F3                 call    ___cxa_end_catch
__text:00000001000034F8                 jmp     $+5
__text:00000001000034FD ; ---------------------------------------------------------------------------
__text:00000001000034FD
__text:00000001000034FD loc_1000034FD:                          ; CODE XREF: __text:00000001000034F8↑j
__text:00000001000034FD                 jmp     $+5
__text:0000000100003502 ; ---------------------------------------------------------------------------
__text:0000000100003502
__text:0000000100003502 loc_100003502:                          ; CODE XREF: __text:loc_1000034FD↑j
__text:0000000100003502                 mov     rdi, [rbp-0F8h]
__text:0000000100003509                 call    __Unwind_Resume
__text:000000010000350E ; ---------------------------------------------------------------------------
__text:000000010000350E                 mov     ecx, edx
__text:0000000100003510                 mov     rdi, rax
__text:0000000100003513                 mov     [rbp-1ACh], ecx
__text:0000000100003519                 call    ___clang_call_terminate
__text:0000000100003519 ; ---------------------------------------------------------------------------
__text:000000010000351E                 align 20h
__text:0000000100003520
__text:0000000100003520 ; =============== S U B R O U T I N E =======================================
__text:0000000100003520
__text:0000000100003520 ; Attributes: bp-based frame
__text:0000000100003520
__text:0000000100003520 ; std::__1::basic_ostream<char, std::__1::char_traits<char>> & std::__1::endl<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &)
__text:0000000100003520 __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ proc near
__text:0000000100003520                                         ; DATA XREF: _main+F68↑o
__text:0000000100003520                                         ; _main+10B0↑o
__text:0000000100003520
__text:0000000100003520 var_88          = qword ptr -88h
__text:0000000100003520 var_80          = qword ptr -80h
__text:0000000100003520 var_78          = dword ptr -78h
__text:0000000100003520 var_71          = byte ptr -71h
__text:0000000100003520 var_70          = qword ptr -70h
__text:0000000100003520 var_64          = dword ptr -64h
__text:0000000100003520 var_60          = qword ptr -60h
__text:0000000100003520 var_58          = qword ptr -58h
__text:0000000100003520 var_50          = qword ptr -50h
__text:0000000100003520 var_48          = qword ptr -48h
__text:0000000100003520 var_3C          = dword ptr -3Ch
__text:0000000100003520 var_38          = qword ptr -38h
__text:0000000100003520 var_30          = byte ptr -30h
__text:0000000100003520 var_21          = byte ptr -21h
__text:0000000100003520 var_20          = qword ptr -20h
__text:0000000100003520 var_18          = qword ptr -18h
__text:0000000100003520 var_9           = byte ptr -9
__text:0000000100003520 var_8           = qword ptr -8
__text:0000000100003520
__text:0000000100003520                 push    rbp
__text:0000000100003521                 mov     rbp, rsp
__text:0000000100003524                 sub     rsp, 90h
__text:000000010000352B                 mov     [rbp+var_48], rdi
__text:000000010000352F                 mov     rax, rdi
__text:0000000100003532                 mov     rcx, [rdi]
__text:0000000100003535                 mov     rcx, [rcx-18h]
__text:0000000100003539                 add     rdi, rcx
__text:000000010000353C                 mov     [rbp+var_20], rdi
__text:0000000100003540                 mov     [rbp+var_21], 0Ah
__text:0000000100003544                 mov     rsi, [rbp+var_20]
__text:0000000100003548                 lea     rcx, [rbp+var_30]
__text:000000010000354C                 mov     rdi, rcx        ; this
__text:000000010000354F                 mov     [rbp+var_50], rax
__text:0000000100003553                 mov     [rbp+var_58], rcx
__text:0000000100003557                 call    __ZNKSt3__18ios_base6getlocEv ; std::__1::ios_base::getloc(void)
__text:000000010000355C                 mov     rax, [rbp+var_58]
__text:0000000100003560                 mov     [rbp+var_18], rax
__text:0000000100003564                 mov     rsi, cs:__ZNSt3__15ctypeIcE2idE_ptr
__text:000000010000356B                 mov     rdi, rax
__text:000000010000356E                 call    __ZNKSt3__16locale9use_facetERNS0_2idE ; std::__1::locale::use_facet(std::__1::locale::id &)
__text:0000000100003573                 mov     [rbp+var_60], rax
__text:0000000100003577                 jmp     $+5
__text:000000010000357C ; ---------------------------------------------------------------------------
__text:000000010000357C
__text:000000010000357C loc_10000357C:                          ; CODE XREF: std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)+57↑j
__text:000000010000357C                 mov     al, [rbp+var_21]
__text:000000010000357F                 mov     rcx, [rbp+var_60]
__text:0000000100003583                 mov     [rbp+var_8], rcx
__text:0000000100003587                 mov     [rbp+var_9], al
__text:000000010000358A                 mov     rdx, [rbp+var_8]
__text:000000010000358E                 mov     rsi, [rdx]
__text:0000000100003591                 mov     rsi, [rsi+38h]
__text:0000000100003595                 movsx   edi, [rbp+var_9]
__text:0000000100003599                 mov     [rbp+var_64], edi
__text:000000010000359C                 mov     rdi, rdx
__text:000000010000359F                 mov     r8d, [rbp+var_64]
__text:00000001000035A3                 mov     [rbp+var_70], rsi
__text:00000001000035A7                 mov     esi, r8d
__text:00000001000035AA                 mov     rdx, [rbp+var_70]
__text:00000001000035AE                 call    rdx
__text:00000001000035B0                 mov     [rbp+var_71], al
__text:00000001000035B3                 jmp     loc_1000035E5
__text:00000001000035B8 ; ---------------------------------------------------------------------------
__text:00000001000035B8                 mov     ecx, edx
__text:00000001000035BA                 mov     [rbp+var_38], rax
__text:00000001000035BE                 mov     [rbp+var_3C], ecx
__text:00000001000035C1                 lea     rdi, [rbp+var_30] ; this
__text:00000001000035C5                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:00000001000035CA                 jmp     $+5
__text:00000001000035CF ; ---------------------------------------------------------------------------
__text:00000001000035CF
__text:00000001000035CF loc_1000035CF:                          ; CODE XREF: std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)+AA↑j
__text:00000001000035CF                 mov     rdi, [rbp+var_38]
__text:00000001000035D3                 call    __Unwind_Resume
__text:00000001000035D8 ; ---------------------------------------------------------------------------
__text:00000001000035D8                 mov     ecx, edx
__text:00000001000035DA                 mov     rdi, rax
__text:00000001000035DD                 mov     [rbp+var_78], ecx
__text:00000001000035E0                 call    ___clang_call_terminate
__text:00000001000035E5 ; ---------------------------------------------------------------------------
__text:00000001000035E5
__text:00000001000035E5 loc_1000035E5:                          ; CODE XREF: std::__1::endl<char,std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &)+93↑j
__text:00000001000035E5                 lea     rdi, [rbp+var_30] ; this
__text:00000001000035E9                 call    __ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
__text:00000001000035EE                 mov     rdi, [rbp+var_50]
__text:00000001000035F2                 mov     al, [rbp+var_71]
__text:00000001000035F5                 movsx   esi, al
__text:00000001000035F8                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::put(char)
__text:00000001000035FD                 mov     rdi, [rbp+var_48]
__text:0000000100003601                 mov     [rbp+var_80], rax
__text:0000000100003605                 call    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::flush(void)
__text:000000010000360A                 mov     rdi, [rbp+var_48]
__text:000000010000360E                 mov     [rbp+var_88], rax
__text:0000000100003615                 mov     rax, rdi
__text:0000000100003618                 add     rsp, 90h
__text:000000010000361F                 pop     rbp
__text:0000000100003620                 retn
__text:0000000100003620 __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ endp
__text:0000000100003620
__text:0000000100003620 ; ---------------------------------------------------------------------------
__text:0000000100003621                 align 10h
__text:0000000100003630
__text:0000000100003630 ; =============== S U B R O U T I N E =======================================
__text:0000000100003630
__text:0000000100003630 ; Attributes: bp-based frame
__text:0000000100003630
__text:0000000100003630 ; std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base &, char)
__text:0000000100003630 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ proc near
__text:0000000100003630                                         ; CODE XREF: std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char,std::__1::char_traits<char>> &,char const*)+32A↑p
__text:0000000100003630
__text:0000000100003630 var_2CC         = dword ptr -2CCh
__text:0000000100003630 var_2C8         = dword ptr -2C8h
__text:0000000100003630 var_2C4         = dword ptr -2C4h
__text:0000000100003630 var_2C0         = qword ptr -2C0h
__text:0000000100003630 var_2B8         = qword ptr -2B8h
__text:0000000100003630 var_2B0         = qword ptr -2B0h
__text:0000000100003630 var_2A8         = qword ptr -2A8h
__text:0000000100003630 var_2A0         = qword ptr -2A0h
__text:0000000100003630 var_298         = qword ptr -298h
__text:0000000100003630 var_290         = qword ptr -290h
__text:0000000100003630 var_288         = qword ptr -288h
__text:0000000100003630 var_27C         = dword ptr -27Ch
__text:0000000100003630 var_278         = qword ptr -278h
__text:0000000100003630 var_26C         = dword ptr -26Ch
__text:0000000100003630 var_268         = qword ptr -268h
__text:0000000100003630 var_260         = byte ptr -260h
__text:0000000100003630 var_248         = qword ptr -248h
__text:0000000100003630 var_240         = qword ptr -240h
__text:0000000100003630 var_238         = qword ptr -238h
__text:0000000100003630 var_230         = qword ptr -230h
__text:0000000100003630 var_228         = qword ptr -228h
__text:0000000100003630 var_219         = byte ptr -219h
__text:0000000100003630 var_218         = qword ptr -218h
__text:0000000100003630 var_210         = qword ptr -210h
__text:0000000100003630 var_208         = qword ptr -208h
__text:0000000100003630 var_200         = qword ptr -200h
__text:0000000100003630 var_1F8         = qword ptr -1F8h
__text:0000000100003630 var_1F0         = qword ptr -1F0h
__text:0000000100003630 var_1E8         = qword ptr -1E8h
__text:0000000100003630 var_1E0         = qword ptr -1E0h
__text:0000000100003630 var_1D8         = qword ptr -1D8h
__text:0000000100003630 var_1D0         = qword ptr -1D0h
__text:0000000100003630 var_1C8         = qword ptr -1C8h
__text:0000000100003630 var_1C0         = qword ptr -1C0h
__text:0000000100003630 var_1B8         = qword ptr -1B8h
__text:0000000100003630 var_1B0         = qword ptr -1B0h
__text:0000000100003630 var_1A8         = qword ptr -1A8h
__text:0000000100003630 var_1A0         = qword ptr -1A0h
__text:0000000100003630 var_198         = qword ptr -198h
__text:0000000100003630 var_190         = qword ptr -190h
__text:0000000100003630 var_188         = qword ptr -188h
__text:0000000100003630 var_180         = qword ptr -180h
__text:0000000100003630 var_178         = qword ptr -178h
__text:0000000100003630 var_170         = qword ptr -170h
__text:0000000100003630 var_168         = qword ptr -168h
__text:0000000100003630 var_160         = qword ptr -160h
__text:0000000100003630 var_158         = qword ptr -158h
__text:0000000100003630 var_150         = qword ptr -150h
__text:0000000100003630 var_148         = qword ptr -148h
__text:0000000100003630 var_140         = qword ptr -140h
__text:0000000100003630 var_138         = qword ptr -138h
__text:0000000100003630 var_130         = qword ptr -130h
__text:0000000100003630 var_128         = qword ptr -128h
__text:0000000100003630 var_120         = qword ptr -120h
__text:0000000100003630 var_118         = qword ptr -118h
__text:0000000100003630 var_110         = qword ptr -110h
__text:0000000100003630 var_108         = qword ptr -108h
__text:0000000100003630 var_100         = qword ptr -100h
__text:0000000100003630 var_F8          = qword ptr -0F8h
__text:0000000100003630 var_F0          = qword ptr -0F0h
__text:0000000100003630 var_E8          = qword ptr -0E8h
__text:0000000100003630 var_E0          = qword ptr -0E0h
__text:0000000100003630 var_D8          = qword ptr -0D8h
__text:0000000100003630 var_D0          = qword ptr -0D0h
__text:0000000100003630 var_C8          = qword ptr -0C8h
__text:0000000100003630 var_C0          = qword ptr -0C0h
__text:0000000100003630 var_B8          = qword ptr -0B8h
__text:0000000100003630 var_B0          = qword ptr -0B0h
__text:0000000100003630 var_A8          = qword ptr -0A8h
__text:0000000100003630 var_A0          = qword ptr -0A0h
__text:0000000100003630 var_98          = qword ptr -98h
__text:0000000100003630 var_90          = qword ptr -90h
__text:0000000100003630 var_88          = qword ptr -88h
__text:0000000100003630 var_80          = qword ptr -80h
__text:0000000100003630 var_78          = qword ptr -78h
__text:0000000100003630 var_70          = qword ptr -70h
__text:0000000100003630 var_68          = qword ptr -68h
__text:0000000100003630 var_60          = qword ptr -60h
__text:0000000100003630 var_51          = byte ptr -51h
__text:0000000100003630 var_50          = qword ptr -50h
__text:0000000100003630 var_48          = qword ptr -48h
__text:0000000100003630 var_39          = byte ptr -39h
__text:0000000100003630 var_38          = qword ptr -38h
__text:0000000100003630 var_30          = qword ptr -30h
__text:0000000100003630 var_28          = qword ptr -28h
__text:0000000100003630 var_20          = qword ptr -20h
__text:0000000100003630 var_18          = qword ptr -18h
__text:0000000100003630 var_10          = qword ptr -10h
__text:0000000100003630 var_8           = qword ptr -8
__text:0000000100003630
__text:0000000100003630                 push    rbp
__text:0000000100003631                 mov     rbp, rsp
__text:0000000100003634                 sub     rsp, 2D0h
__text:000000010000363B                 mov     al, r9b
__text:000000010000363E                 lea     r10, [rbp+var_228]
__text:0000000100003645                 lea     r11, [rbp+var_1E8]
__text:000000010000364C                 mov     [rbp+var_1F8], rdi
__text:0000000100003653                 mov     [rbp+var_200], rsi
__text:000000010000365A                 mov     [rbp+var_208], rdx
__text:0000000100003661                 mov     [rbp+var_210], rcx
__text:0000000100003668                 mov     [rbp+var_218], r8
__text:000000010000366F                 mov     [rbp+var_219], al
__text:0000000100003675                 mov     rcx, [rbp+var_1F8]
__text:000000010000367C                 mov     [rbp+var_1D8], r11
__text:0000000100003683                 mov     [rbp+var_1E0], 0FFFFFFFFFFFFFFFFh
__text:000000010000368E                 mov     rdx, [rbp+var_1D8]
__text:0000000100003695                 mov     rsi, [rbp+var_1E0]
__text:000000010000369C                 mov     [rbp+var_1C8], rdx
__text:00000001000036A3                 mov     [rbp+var_1D0], rsi
__text:00000001000036AA                 mov     rdx, [rbp+var_1C8]
__text:00000001000036B1                 mov     qword ptr [rdx], 0
__text:00000001000036B8                 mov     rdx, [rbp+var_1E8]
__text:00000001000036BF                 mov     [rbp+var_228], rdx
__text:00000001000036C6                 mov     [rbp+var_1C0], r10
__text:00000001000036CD                 cmp     rcx, 0
__text:00000001000036D4                 jnz     loc_1000036ED
__text:00000001000036DA                 mov     rax, [rbp+var_1F8]
__text:00000001000036E1                 mov     [rbp+var_1F0], rax
__text:00000001000036E8                 jmp     loc_100003CB2
__text:00000001000036ED ; ---------------------------------------------------------------------------
__text:00000001000036ED
__text:00000001000036ED loc_1000036ED:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+A4↑j
__text:00000001000036ED                 mov     rax, [rbp+var_210]
__text:00000001000036F4                 mov     rcx, [rbp+var_200]
__text:00000001000036FB                 sub     rax, rcx
__text:00000001000036FE                 mov     [rbp+var_230], rax
__text:0000000100003705                 mov     rax, [rbp+var_218]
__text:000000010000370C                 mov     [rbp+var_158], rax
__text:0000000100003713                 mov     rax, [rbp+var_158]
__text:000000010000371A                 mov     rax, [rax+18h]
__text:000000010000371E                 mov     [rbp+var_238], rax
__text:0000000100003725                 mov     rax, [rbp+var_238]
__text:000000010000372C                 cmp     rax, [rbp+var_230]
__text:0000000100003733                 jle     loc_100003756
__text:0000000100003739                 mov     rax, [rbp+var_230]
__text:0000000100003740                 mov     rcx, [rbp+var_238]
__text:0000000100003747                 sub     rcx, rax
__text:000000010000374A                 mov     [rbp+var_238], rcx
__text:0000000100003751                 jmp     loc_100003761
__text:0000000100003756 ; ---------------------------------------------------------------------------
__text:0000000100003756
__text:0000000100003756 loc_100003756:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+103↑j
__text:0000000100003756                 mov     [rbp+var_238], 0
__text:0000000100003761
__text:0000000100003761 loc_100003761:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+121↑j
__text:0000000100003761                 mov     rax, [rbp+var_208]
__text:0000000100003768                 mov     rcx, [rbp+var_200]
__text:000000010000376F                 sub     rax, rcx
__text:0000000100003772                 mov     [rbp+var_240], rax
__text:0000000100003779                 cmp     [rbp+var_240], 0
__text:0000000100003784                 jle     loc_100003861
__text:000000010000378A                 mov     rax, [rbp+var_1F8]
__text:0000000100003791                 mov     rcx, [rbp+var_200]
__text:0000000100003798                 mov     rdx, [rbp+var_240]
__text:000000010000379F                 mov     [rbp+var_F8], rax
__text:00000001000037A6                 mov     [rbp+var_100], rcx
__text:00000001000037AD                 mov     [rbp+var_108], rdx
__text:00000001000037B4                 mov     rax, [rbp+var_F8]
__text:00000001000037BB                 mov     rcx, [rax]
__text:00000001000037BE                 mov     rcx, [rcx+60h]
__text:00000001000037C2                 mov     rsi, [rbp+var_100]
__text:00000001000037C9                 mov     rdx, [rbp+var_108]
__text:00000001000037D0                 mov     rdi, rax
__text:00000001000037D3                 call    rcx
__text:00000001000037D5                 cmp     rax, [rbp+var_240]
__text:00000001000037DC                 jz      loc_10000385C
__text:00000001000037E2                 lea     rax, [rbp+var_248]
__text:00000001000037E9                 lea     rcx, [rbp+var_F0]
__text:00000001000037F0                 mov     [rbp+var_E0], rcx
__text:00000001000037F7                 mov     [rbp+var_E8], 0FFFFFFFFFFFFFFFFh
__text:0000000100003802                 mov     rcx, [rbp+var_E0]
__text:0000000100003809                 mov     rdx, [rbp+var_E8]
__text:0000000100003810                 mov     [rbp+var_D0], rcx
__text:0000000100003817                 mov     [rbp+var_D8], rdx
__text:000000010000381E                 mov     rcx, [rbp+var_D0]
__text:0000000100003825                 mov     qword ptr [rcx], 0
__text:000000010000382C                 mov     rcx, [rbp+var_F0]
__text:0000000100003833                 mov     [rbp+var_248], rcx
__text:000000010000383A                 mov     [rbp+var_8], rax
__text:000000010000383E                 mov     [rbp+var_1F8], 0
__text:0000000100003849                 mov     rax, [rbp+var_1F8]
__text:0000000100003850                 mov     [rbp+var_1F0], rax
__text:0000000100003857                 jmp     loc_100003CB2
__text:000000010000385C ; ---------------------------------------------------------------------------
__text:000000010000385C
__text:000000010000385C loc_10000385C:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+1AC↑j
__text:000000010000385C                 jmp     $+5
__text:0000000100003861 ; ---------------------------------------------------------------------------
__text:0000000100003861
__text:0000000100003861 loc_100003861:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+154↑j
__text:0000000100003861                                         ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_10000385C↑j
__text:0000000100003861                 cmp     [rbp+var_238], 0
__text:000000010000386C                 jle     loc_100003B6B
__text:0000000100003872                 lea     rax, [rbp+var_260]
__text:0000000100003879                 mov     rcx, [rbp+var_238]
__text:0000000100003880                 mov     dl, [rbp+var_219]
__text:0000000100003886                 mov     [rbp+var_48], rax
__text:000000010000388A                 mov     [rbp+var_50], rcx
__text:000000010000388E                 mov     [rbp+var_51], dl
__text:0000000100003891                 mov     rax, [rbp+var_48]
__text:0000000100003895                 mov     rcx, [rbp+var_50]
__text:0000000100003899                 mov     dl, [rbp+var_51]
__text:000000010000389C                 mov     [rbp+var_30], rax
__text:00000001000038A0                 mov     [rbp+var_38], rcx
__text:00000001000038A4                 mov     [rbp+var_39], dl
__text:00000001000038A7                 mov     rax, [rbp+var_30]
__text:00000001000038AB                 mov     [rbp+var_28], rax
__text:00000001000038AF                 mov     rcx, [rbp+var_28]
__text:00000001000038B3                 mov     [rbp+var_20], rcx
__text:00000001000038B7                 mov     rcx, [rbp+var_20]
__text:00000001000038BB                 mov     [rbp+var_18], rcx
__text:00000001000038BF                 mov     rcx, [rbp+var_18]
__text:00000001000038C3                 mov     [rbp+var_10], rcx
__text:00000001000038C7                 mov     rsi, [rbp+var_38]
__text:00000001000038CB                 mov     rdi, rax
__text:00000001000038CE                 movsx   edx, [rbp+var_39]
__text:00000001000038D2                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::__init(ulong,char)
__text:00000001000038D7                 lea     rax, [rbp+var_260]
__text:00000001000038DE                 mov     rcx, [rbp+var_1F8]
__text:00000001000038E5                 mov     [rbp+var_C8], rax
__text:00000001000038EC                 mov     rax, [rbp+var_C8]
__text:00000001000038F3                 mov     [rbp+var_C0], rax
__text:00000001000038FA                 mov     rax, [rbp+var_C0]
__text:0000000100003901                 mov     [rbp+var_B8], rax
__text:0000000100003908                 mov     rsi, [rbp+var_B8]
__text:000000010000390F                 mov     [rbp+var_B0], rsi
__text:0000000100003916                 mov     rsi, [rbp+var_B0]
__text:000000010000391D                 mov     [rbp+var_A8], rsi
__text:0000000100003924                 mov     rsi, [rbp+var_A8]
__text:000000010000392B                 movzx   edx, byte ptr [rsi]
__text:000000010000392E                 and     edx, 1
__text:0000000100003934                 cmp     edx, 0
__text:000000010000393A                 mov     [rbp+var_290], rcx
__text:0000000100003941                 mov     [rbp+var_298], rax
__text:0000000100003948                 jz      loc_10000397D
__text:000000010000394E                 mov     rax, [rbp+var_298]
__text:0000000100003955                 mov     [rbp+var_78], rax
__text:0000000100003959                 mov     rcx, [rbp+var_78]
__text:000000010000395D                 mov     [rbp+var_70], rcx
__text:0000000100003961                 mov     rcx, [rbp+var_70]
__text:0000000100003965                 mov     [rbp+var_68], rcx
__text:0000000100003969                 mov     rcx, [rbp+var_68]
__text:000000010000396D                 mov     rcx, [rcx+10h]
__text:0000000100003971                 mov     [rbp+var_2A0], rcx
__text:0000000100003978                 jmp     loc_1000039D2
__text:000000010000397D ; ---------------------------------------------------------------------------
__text:000000010000397D
__text:000000010000397D loc_10000397D:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+318↑j
__text:000000010000397D                 mov     rax, [rbp+var_298]
__text:0000000100003984                 mov     [rbp+var_A0], rax
__text:000000010000398B                 mov     rcx, [rbp+var_A0]
__text:0000000100003992                 mov     [rbp+var_98], rcx
__text:0000000100003999                 mov     rcx, [rbp+var_98]
__text:00000001000039A0                 mov     [rbp+var_90], rcx
__text:00000001000039A7                 mov     rcx, [rbp+var_90]
__text:00000001000039AE                 add     rcx, 1
__text:00000001000039B5                 mov     [rbp+var_88], rcx
__text:00000001000039BC                 mov     rcx, [rbp+var_88]
__text:00000001000039C3                 mov     [rbp+var_80], rcx
__text:00000001000039C7                 mov     rcx, [rbp+var_80]
__text:00000001000039CB                 mov     [rbp+var_2A0], rcx
__text:00000001000039D2
__text:00000001000039D2 loc_1000039D2:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+348↑j
__text:00000001000039D2                 mov     rax, [rbp+var_2A0]
__text:00000001000039D9                 mov     [rbp+var_60], rax
__text:00000001000039DD                 mov     rcx, [rbp+var_238]
__text:00000001000039E4                 mov     rdx, [rbp+var_290]
__text:00000001000039EB                 mov     [rbp+var_110], rdx
__text:00000001000039F2                 mov     [rbp+var_118], rax
__text:00000001000039F9                 mov     [rbp+var_120], rcx
__text:0000000100003A00                 mov     rax, [rbp+var_110]
__text:0000000100003A07                 mov     rsi, [rax]
__text:0000000100003A0A                 mov     rsi, [rsi+60h]
__text:0000000100003A0E                 mov     rdi, [rbp+var_118]
__text:0000000100003A15                 mov     [rbp+var_2A8], rdi
__text:0000000100003A1C                 mov     rdi, rax
__text:0000000100003A1F                 mov     rax, [rbp+var_2A8]
__text:0000000100003A26                 mov     [rbp+var_2B0], rsi
__text:0000000100003A2D                 mov     rsi, rax
__text:0000000100003A30                 mov     rdx, rcx
__text:0000000100003A33                 mov     rcx, [rbp+var_2B0]
__text:0000000100003A3A                 call    rcx
__text:0000000100003A3C                 mov     [rbp+var_2B8], rax
__text:0000000100003A43                 jmp     $+5
__text:0000000100003A48 ; ---------------------------------------------------------------------------
__text:0000000100003A48
__text:0000000100003A48 loc_100003A48:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+413↑j
__text:0000000100003A48                 jmp     $+5
__text:0000000100003A4D ; ---------------------------------------------------------------------------
__text:0000000100003A4D
__text:0000000100003A4D loc_100003A4D:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_100003A48↑j
__text:0000000100003A4D                 mov     rax, [rbp+var_2B8]
__text:0000000100003A54                 cmp     rax, [rbp+var_238]
__text:0000000100003A5B                 jz      loc_100003B16
__text:0000000100003A61                 lea     rax, [rbp+var_148]
__text:0000000100003A68                 mov     [rbp+var_138], rax
__text:0000000100003A6F                 mov     [rbp+var_140], 0FFFFFFFFFFFFFFFFh
__text:0000000100003A7A                 mov     rax, [rbp+var_138]
__text:0000000100003A81                 mov     rcx, [rbp+var_140]
__text:0000000100003A88                 mov     [rbp+var_128], rax
__text:0000000100003A8F                 mov     [rbp+var_130], rcx
__text:0000000100003A96                 mov     rax, [rbp+var_128]
__text:0000000100003A9D                 mov     qword ptr [rax], 0
__text:0000000100003AA4                 mov     rax, [rbp+var_148]
__text:0000000100003AAB                 mov     [rbp+var_2C0], rax
__text:0000000100003AB2                 lea     rax, [rbp+var_278]
__text:0000000100003AB9                 mov     rcx, [rbp+var_2C0]
__text:0000000100003AC0                 mov     [rbp+var_278], rcx
__text:0000000100003AC7                 mov     [rbp+var_150], rax
__text:0000000100003ACE                 mov     [rbp+var_1F8], 0
__text:0000000100003AD9                 mov     rax, [rbp+var_1F8]
__text:0000000100003AE0                 mov     [rbp+var_1F0], rax
__text:0000000100003AE7                 mov     [rbp+var_27C], 1
__text:0000000100003AF1                 jmp     loc_100003B20
__text:0000000100003AF6 ; ---------------------------------------------------------------------------
__text:0000000100003AF6                 mov     ecx, edx
__text:0000000100003AF8                 mov     [rbp+var_268], rax
__text:0000000100003AFF                 mov     [rbp+var_26C], ecx
__text:0000000100003B05                 lea     rdi, [rbp+var_260]
__text:0000000100003B0C                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::~basic_string()
__text:0000000100003B11                 jmp     loc_100003B66
__text:0000000100003B16 ; ---------------------------------------------------------------------------
__text:0000000100003B16
__text:0000000100003B16 loc_100003B16:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+42B↑j
__text:0000000100003B16                 mov     [rbp+var_27C], 0
__text:0000000100003B20
__text:0000000100003B20 loc_100003B20:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+4C1↑j
__text:0000000100003B20                 lea     rdi, [rbp+var_260]
__text:0000000100003B27                 call    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::~basic_string()
__text:0000000100003B2C                 mov     eax, [rbp+var_27C]
__text:0000000100003B32                 mov     ecx, eax
__text:0000000100003B34                 sub     ecx, 1
__text:0000000100003B37                 mov     [rbp+var_2C4], eax
__text:0000000100003B3D                 mov     [rbp+var_2C8], ecx
__text:0000000100003B43                 jz      loc_100003CB2
__text:0000000100003B49                 jmp     $+5
__text:0000000100003B4E ; ---------------------------------------------------------------------------
__text:0000000100003B4E
__text:0000000100003B4E loc_100003B4E:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+519↑j
__text:0000000100003B4E                 mov     eax, [rbp+var_2C4]
__text:0000000100003B54                 test    eax, eax
__text:0000000100003B56                 jnz     loc_100003CDE
__text:0000000100003B5C                 jmp     $+5
__text:0000000100003B61 ; ---------------------------------------------------------------------------
__text:0000000100003B61
__text:0000000100003B61 loc_100003B61:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+52C↑j
__text:0000000100003B61                 jmp     loc_100003B6B
__text:0000000100003B66 ; ---------------------------------------------------------------------------
__text:0000000100003B66
__text:0000000100003B66 loc_100003B66:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+4E1↑j
__text:0000000100003B66                 jmp     loc_100003CC2
__text:0000000100003B6B ; ---------------------------------------------------------------------------
__text:0000000100003B6B
__text:0000000100003B6B loc_100003B6B:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+23C↑j
__text:0000000100003B6B                                         ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_100003B61↑j
__text:0000000100003B6B                 mov     rax, [rbp+var_210]
__text:0000000100003B72                 mov     rcx, [rbp+var_208]
__text:0000000100003B79                 sub     rax, rcx
__text:0000000100003B7C                 mov     [rbp+var_240], rax
__text:0000000100003B83                 cmp     [rbp+var_240], 0
__text:0000000100003B8E                 jle     loc_100003C6E
__text:0000000100003B94                 mov     rax, [rbp+var_1F8]
__text:0000000100003B9B                 mov     rcx, [rbp+var_208]
__text:0000000100003BA2                 mov     rdx, [rbp+var_240]
__text:0000000100003BA9                 mov     [rbp+var_160], rax
__text:0000000100003BB0                 mov     [rbp+var_168], rcx
__text:0000000100003BB7                 mov     [rbp+var_170], rdx
__text:0000000100003BBE                 mov     rax, [rbp+var_160]
__text:0000000100003BC5                 mov     rcx, [rax]
__text:0000000100003BC8                 mov     rcx, [rcx+60h]
__text:0000000100003BCC                 mov     rsi, [rbp+var_168]
__text:0000000100003BD3                 mov     rdx, [rbp+var_170]
__text:0000000100003BDA                 mov     rdi, rax
__text:0000000100003BDD                 call    rcx
__text:0000000100003BDF                 cmp     rax, [rbp+var_240]
__text:0000000100003BE6                 jz      loc_100003C69
__text:0000000100003BEC                 lea     rax, [rbp+var_288]
__text:0000000100003BF3                 lea     rcx, [rbp+var_198]
__text:0000000100003BFA                 mov     [rbp+var_188], rcx
__text:0000000100003C01                 mov     [rbp+var_190], 0FFFFFFFFFFFFFFFFh
__text:0000000100003C0C                 mov     rcx, [rbp+var_188]
__text:0000000100003C13                 mov     rdx, [rbp+var_190]
__text:0000000100003C1A                 mov     [rbp+var_178], rcx
__text:0000000100003C21                 mov     [rbp+var_180], rdx
__text:0000000100003C28                 mov     rcx, [rbp+var_178]
__text:0000000100003C2F                 mov     qword ptr [rcx], 0
__text:0000000100003C36                 mov     rcx, [rbp+var_198]
__text:0000000100003C3D                 mov     [rbp+var_288], rcx
__text:0000000100003C44                 mov     [rbp+var_1A0], rax
__text:0000000100003C4B                 mov     [rbp+var_1F8], 0
__text:0000000100003C56                 mov     rax, [rbp+var_1F8]
__text:0000000100003C5D                 mov     [rbp+var_1F0], rax
__text:0000000100003C64                 jmp     loc_100003CB2
__text:0000000100003C69 ; ---------------------------------------------------------------------------
__text:0000000100003C69
__text:0000000100003C69 loc_100003C69:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+5B6↑j
__text:0000000100003C69                 jmp     $+5
__text:0000000100003C6E ; ---------------------------------------------------------------------------
__text:0000000100003C6E
__text:0000000100003C6E loc_100003C6E:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+55E↑j
__text:0000000100003C6E                                         ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_100003C69↑j
__text:0000000100003C6E                 mov     rax, [rbp+var_218]
__text:0000000100003C75                 mov     [rbp+var_1A8], rax
__text:0000000100003C7C                 mov     [rbp+var_1B0], 0
__text:0000000100003C87                 mov     rax, [rbp+var_1A8]
__text:0000000100003C8E                 mov     rcx, [rax+18h]
__text:0000000100003C92                 mov     [rbp+var_1B8], rcx
__text:0000000100003C99                 mov     rcx, [rbp+var_1B0]
__text:0000000100003CA0                 mov     [rax+18h], rcx
__text:0000000100003CA4                 mov     rax, [rbp+var_1F8]
__text:0000000100003CAB                 mov     [rbp+var_1F0], rax
__text:0000000100003CB2
__text:0000000100003CB2 loc_100003CB2:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+B8↑j
__text:0000000100003CB2                                         ; std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+227↑j ...
__text:0000000100003CB2                 mov     rax, [rbp+var_1F0]
__text:0000000100003CB9                 add     rsp, 2D0h
__text:0000000100003CC0                 pop     rbp
__text:0000000100003CC1                 retn
__text:0000000100003CC2 ; ---------------------------------------------------------------------------
__text:0000000100003CC2
__text:0000000100003CC2 loc_100003CC2:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char):loc_100003B66↑j
__text:0000000100003CC2                 mov     rdi, [rbp+var_268]
__text:0000000100003CC9                 call    __Unwind_Resume
__text:0000000100003CCE ; ---------------------------------------------------------------------------
__text:0000000100003CCE                 mov     ecx, edx
__text:0000000100003CD0                 mov     rdi, rax
__text:0000000100003CD3                 mov     [rbp+var_2CC], ecx
__text:0000000100003CD9                 call    ___clang_call_terminate
__text:0000000100003CDE ; ---------------------------------------------------------------------------
__text:0000000100003CDE
__text:0000000100003CDE loc_100003CDE:                          ; CODE XREF: std::__1::__pad_and_output<char,std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char,std::__1::char_traits<char>>,char const*,char const*,char const*,std::__1::ios_base &,char)+526↑j
__text:0000000100003CDE                 xchg    ax, ax
__text:0000000100003CDE __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ endp ; sp-analysis failed
__text:0000000100003CDE
__text:0000000100003CE0
__text:0000000100003CE0 ; =============== S U B R O U T I N E =======================================
__text:0000000100003CE0
__text:0000000100003CE0 ; Attributes: bp-based frame
__text:0000000100003CE0
__text:0000000100003CE0 ; void std::__1::vector<int, std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)
__text:0000000100003CE0 __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_ proc near
__text:0000000100003CE0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT__ptr↓o
__text:0000000100003CE0
__text:0000000100003CE0 var_168         = qword ptr -168h
__text:0000000100003CE0 var_160         = qword ptr -160h
__text:0000000100003CE0 var_158         = qword ptr -158h
__text:0000000100003CE0 var_150         = qword ptr -150h
__text:0000000100003CE0 var_148         = qword ptr -148h
__text:0000000100003CE0 var_130         = byte ptr -130h
__text:0000000100003CE0 var_120         = qword ptr -120h
__text:0000000100003CE0 var_108         = qword ptr -108h
__text:0000000100003CE0 var_100         = qword ptr -100h
__text:0000000100003CE0 var_F8          = qword ptr -0F8h
__text:0000000100003CE0 var_F0          = qword ptr -0F0h
__text:0000000100003CE0 var_E8          = qword ptr -0E8h
__text:0000000100003CE0 var_E0          = qword ptr -0E0h
__text:0000000100003CE0 var_D8          = qword ptr -0D8h
__text:0000000100003CE0 var_D0          = qword ptr -0D0h
__text:0000000100003CE0 var_C8          = qword ptr -0C8h
__text:0000000100003CE0 var_C0          = qword ptr -0C0h
__text:0000000100003CE0 var_B8          = qword ptr -0B8h
__text:0000000100003CE0 var_B0          = qword ptr -0B0h
__text:0000000100003CE0 var_A8          = qword ptr -0A8h
__text:0000000100003CE0 var_A0          = qword ptr -0A0h
__text:0000000100003CE0 var_98          = qword ptr -98h
__text:0000000100003CE0 var_90          = qword ptr -90h
__text:0000000100003CE0 var_88          = qword ptr -88h
__text:0000000100003CE0 var_80          = qword ptr -80h
__text:0000000100003CE0 var_70          = qword ptr -70h
__text:0000000100003CE0 var_68          = qword ptr -68h
__text:0000000100003CE0 var_60          = byte ptr -60h
__text:0000000100003CE0 var_58          = qword ptr -58h
__text:0000000100003CE0 var_50          = qword ptr -50h
__text:0000000100003CE0 var_48          = qword ptr -48h
__text:0000000100003CE0 var_40          = qword ptr -40h
__text:0000000100003CE0 var_38          = qword ptr -38h
__text:0000000100003CE0 var_30          = qword ptr -30h
__text:0000000100003CE0 var_28          = qword ptr -28h
__text:0000000100003CE0 var_20          = qword ptr -20h
__text:0000000100003CE0 var_18          = qword ptr -18h
__text:0000000100003CE0 var_10          = qword ptr -10h
__text:0000000100003CE0 var_8           = qword ptr -8
__text:0000000100003CE0
__text:0000000100003CE0                 push    rbp
__text:0000000100003CE1                 mov     rbp, rsp
__text:0000000100003CE4                 sub     rsp, 170h
__text:0000000100003CEB                 mov     [rbp+var_F8], rdi
__text:0000000100003CF2                 mov     [rbp+var_100], rsi
__text:0000000100003CF9                 mov     rsi, [rbp+var_F8]
__text:0000000100003D00                 mov     rdi, rsi
__text:0000000100003D03                 mov     [rbp+var_F0], rdi
__text:0000000100003D0A                 mov     rdi, [rbp+var_F0]
__text:0000000100003D11                 add     rdi, 10h
__text:0000000100003D18                 mov     [rbp+var_E8], rdi
__text:0000000100003D1F                 mov     rdi, [rbp+var_E8]
__text:0000000100003D26                 mov     [rbp+var_E0], rdi
__text:0000000100003D2D                 mov     rdi, [rbp+var_E0]
__text:0000000100003D34                 mov     [rbp+var_108], rdi
__text:0000000100003D3B                 mov     [rbp+var_D8], rsi
__text:0000000100003D42                 mov     rdi, [rbp+var_D8]
__text:0000000100003D49                 mov     rax, [rdi+8]
__text:0000000100003D4D                 mov     rdi, [rdi]
__text:0000000100003D50                 sub     rax, rdi
__text:0000000100003D53                 sar     rax, 2
__text:0000000100003D57                 add     rax, 1
__text:0000000100003D5D                 mov     [rbp+var_B0], rsi
__text:0000000100003D64                 mov     [rbp+var_B8], rax
__text:0000000100003D6B                 mov     rax, [rbp+var_B0]
__text:0000000100003D72                 mov     rdi, rax
__text:0000000100003D75                 mov     [rbp+var_148], rsi
__text:0000000100003D7C                 mov     [rbp+var_150], rax
__text:0000000100003D83                 call    j___ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv ; std::__1::vector<int,std::__1::allocator<int>>::max_size(void)
__text:0000000100003D88                 mov     [rbp+var_C0], rax
__text:0000000100003D8F                 mov     rax, [rbp+var_B8]
__text:0000000100003D96                 cmp     rax, [rbp+var_C0]
__text:0000000100003D9D                 jbe     loc_100003DB2
__text:0000000100003DA3                 mov     rax, [rbp+var_150]
__text:0000000100003DAA                 mov     rdi, rax
__text:0000000100003DAD                 call    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
__text:0000000100003DB2
__text:0000000100003DB2 loc_100003DB2:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+BD↑j
__text:0000000100003DB2                 mov     rax, [rbp+var_150]
__text:0000000100003DB9                 mov     [rbp+var_A0], rax
__text:0000000100003DC0                 mov     rcx, [rbp+var_A0]
__text:0000000100003DC7                 mov     [rbp+var_98], rcx
__text:0000000100003DCE                 mov     rcx, [rbp+var_98]
__text:0000000100003DD5                 mov     [rbp+var_90], rcx
__text:0000000100003DDC                 mov     rdx, [rbp+var_90]
__text:0000000100003DE3                 add     rdx, 10h
__text:0000000100003DEA                 mov     [rbp+var_88], rdx
__text:0000000100003DF1                 mov     rdx, [rbp+var_88]
__text:0000000100003DF8                 mov     [rbp+var_80], rdx
__text:0000000100003DFC                 mov     rdx, [rbp+var_80]
__text:0000000100003E00                 mov     rdx, [rdx]
__text:0000000100003E03                 mov     rcx, [rcx]
__text:0000000100003E06                 sub     rdx, rcx
__text:0000000100003E09                 sar     rdx, 2
__text:0000000100003E0D                 mov     [rbp+var_C8], rdx
__text:0000000100003E14                 mov     rcx, [rbp+var_C8]
__text:0000000100003E1B                 mov     rdx, [rbp+var_C0]
__text:0000000100003E22                 shr     rdx, 1
__text:0000000100003E26                 cmp     rcx, rdx
__text:0000000100003E29                 jb      loc_100003E42
__text:0000000100003E2F                 mov     rax, [rbp+var_C0]
__text:0000000100003E36                 mov     [rbp+var_A8], rax
__text:0000000100003E3D                 jmp     loc_100003ED2
__text:0000000100003E42 ; ---------------------------------------------------------------------------
__text:0000000100003E42
__text:0000000100003E42 loc_100003E42:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+149↑j
__text:0000000100003E42                 lea     rax, [rbp+var_60]
__text:0000000100003E46                 lea     rcx, [rbp+var_B8]
__text:0000000100003E4D                 lea     rdx, [rbp+var_D0]
__text:0000000100003E54                 mov     rsi, [rbp+var_C8]
__text:0000000100003E5B                 shl     rsi, 1
__text:0000000100003E5F                 mov     [rbp+var_D0], rsi
__text:0000000100003E66                 mov     [rbp+var_68], rdx
__text:0000000100003E6A                 mov     [rbp+var_70], rcx
__text:0000000100003E6E                 mov     rcx, [rbp+var_68]
__text:0000000100003E72                 mov     rdx, [rbp+var_70]
__text:0000000100003E76                 mov     [rbp+var_50], rcx
__text:0000000100003E7A                 mov     [rbp+var_58], rdx
__text:0000000100003E7E                 mov     rcx, [rbp+var_50]
__text:0000000100003E82                 mov     rdx, [rbp+var_58]
__text:0000000100003E86                 mov     [rbp+var_38], rax
__text:0000000100003E8A                 mov     [rbp+var_40], rcx
__text:0000000100003E8E                 mov     [rbp+var_48], rdx
__text:0000000100003E92                 mov     rax, [rbp+var_40]
__text:0000000100003E96                 mov     rax, [rax]
__text:0000000100003E99                 mov     rcx, [rbp+var_48]
__text:0000000100003E9D                 cmp     rax, [rcx]
__text:0000000100003EA0                 jnb     loc_100003EB6
__text:0000000100003EA6                 mov     rax, [rbp+var_58]
__text:0000000100003EAA                 mov     [rbp+var_158], rax
__text:0000000100003EB1                 jmp     loc_100003EC1
__text:0000000100003EB6 ; ---------------------------------------------------------------------------
__text:0000000100003EB6
__text:0000000100003EB6 loc_100003EB6:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+1C0↑j
__text:0000000100003EB6                 mov     rax, [rbp+var_50]
__text:0000000100003EBA                 mov     [rbp+var_158], rax
__text:0000000100003EC1
__text:0000000100003EC1 loc_100003EC1:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+1D1↑j
__text:0000000100003EC1                 mov     rax, [rbp+var_158]
__text:0000000100003EC8                 mov     rax, [rax]
__text:0000000100003ECB                 mov     [rbp+var_A8], rax
__text:0000000100003ED2
__text:0000000100003ED2 loc_100003ED2:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+15D↑j
__text:0000000100003ED2                 lea     rdi, [rbp+var_130]
__text:0000000100003ED9                 mov     rsi, [rbp+var_A8]
__text:0000000100003EE0                 mov     rax, [rbp+var_148]
__text:0000000100003EE7                 mov     [rbp+var_30], rax
__text:0000000100003EEB                 mov     rcx, [rbp+var_30]
__text:0000000100003EEF                 mov     rdx, [rcx+8]
__text:0000000100003EF3                 mov     rcx, [rcx]
__text:0000000100003EF6                 sub     rdx, rcx
__text:0000000100003EF9                 sar     rdx, 2
__text:0000000100003EFD                 mov     rcx, [rbp+var_108]
__text:0000000100003F04                 call    j___ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC1EmmS3_ ; std::__1::__split_buffer<int,std::__1::allocator<int> &>::__split_buffer(ulong,ulong,std::__1::allocator<int> &)
__text:0000000100003F09                 mov     rax, [rbp+var_108]
__text:0000000100003F10                 mov     rcx, [rbp+var_120]
__text:0000000100003F17                 mov     [rbp+var_28], rcx
__text:0000000100003F1B                 mov     rcx, [rbp+var_28]
__text:0000000100003F1F                 mov     rdx, [rbp+var_100]
__text:0000000100003F26                 mov     [rbp+var_20], rdx
__text:0000000100003F2A                 mov     rdx, [rbp+var_20]
__text:0000000100003F2E                 mov     [rbp+var_8], rax
__text:0000000100003F32                 mov     [rbp+var_10], rcx
__text:0000000100003F36                 mov     [rbp+var_18], rdx
__text:0000000100003F3A                 mov     rax, [rbp+var_10]
__text:0000000100003F3E                 cmp     rax, 0
__text:0000000100003F44                 mov     [rbp+var_160], rax
__text:0000000100003F4B                 jz      loc_100003F6E
__text:0000000100003F51                 mov     rax, [rbp+var_160]
__text:0000000100003F58                 mov     rcx, [rbp+var_18]
__text:0000000100003F5C                 mov     edx, [rcx]
__text:0000000100003F5E                 mov     rcx, [rbp+var_160]
__text:0000000100003F65                 mov     [rcx], edx
__text:0000000100003F67                 mov     [rbp+var_168], rax
__text:0000000100003F6E
__text:0000000100003F6E loc_100003F6E:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+26B↑j
__text:0000000100003F6E                 mov     rax, [rbp+var_120]
__text:0000000100003F75                 add     rax, 4
__text:0000000100003F79                 mov     [rbp+var_120], rax
__text:0000000100003F80                 lea     rsi, [rbp+var_130]
__text:0000000100003F87                 mov     rdi, [rbp+var_148]
__text:0000000100003F8E                 call    j___ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE ; std::__1::vector<int,std::__1::allocator<int>>::__swap_out_circular_buffer(std::__1::__split_buffer<int,std::__1::allocator<int>&> &)
__text:0000000100003F93                 jmp     $+5
__text:0000000100003F98 ; ---------------------------------------------------------------------------
__text:0000000100003F98
__text:0000000100003F98 loc_100003F98:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::__push_back_slow_path<int const>(int const &)+2B3↑j
__text:0000000100003F98                 lea     rdi, [rbp+var_130]
__text:0000000100003F9F                 call    j___ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev ; std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()
__text:0000000100003FA4                 add     rsp, 170h
__text:0000000100003FAB                 pop     rbp
__text:0000000100003FAC                 retn
__text:0000000100003FAC __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_ endp
__text:0000000100003FAC
__text:0000000100003FAD ; ---------------------------------------------------------------------------
__text:0000000100003FAD                 mov     ecx, edx
__text:0000000100003FAF                 mov     [rbp-138h], rax
__text:0000000100003FB6                 mov     [rbp-13Ch], ecx
__text:0000000100003FBC                 lea     rdi, [rbp-130h]
__text:0000000100003FC3                 call    j___ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev ; std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()
__text:0000000100003FC8                 jmp     $+5
__text:0000000100003FCD ; ---------------------------------------------------------------------------
__text:0000000100003FCD
__text:0000000100003FCD loc_100003FCD:                          ; CODE XREF: __text:0000000100003FC8↑j
__text:0000000100003FCD                 jmp     $+5
__text:0000000100003FD2 ; ---------------------------------------------------------------------------
__text:0000000100003FD2
__text:0000000100003FD2 loc_100003FD2:                          ; CODE XREF: __text:loc_100003FCD↑j
__text:0000000100003FD2                 mov     rdi, [rbp-138h]
__text:0000000100003FD9                 call    __Unwind_Resume
__text:0000000100003FDE ; ---------------------------------------------------------------------------
__text:0000000100003FDE                 mov     ecx, edx
__text:0000000100003FE0                 mov     rdi, rax
__text:0000000100003FE3                 mov     [rbp-16Ch], ecx
__text:0000000100003FE9                 call    ___clang_call_terminate
__text:0000000100003FE9 ; ---------------------------------------------------------------------------
__text:0000000100003FEE                 align 10h
__text:0000000100003FF0
__text:0000000100003FF0 ; =============== S U B R O U T I N E =======================================
__text:0000000100003FF0
__text:0000000100003FF0 ; Attributes: bp-based frame
__text:0000000100003FF0
__text:0000000100003FF0 ; std::__1::__split_buffer<int, std::__1::allocator<int> &>::__split_buffer(unsigned long, unsigned long, std::__1::allocator<int> &)
__text:0000000100003FF0 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC1EmmS3_ proc near
__text:0000000100003FF0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC1EmmS3__ptr↓o
__text:0000000100003FF0
__text:0000000100003FF0 var_20          = qword ptr -20h
__text:0000000100003FF0 var_18          = qword ptr -18h
__text:0000000100003FF0 var_10          = qword ptr -10h
__text:0000000100003FF0 var_8           = qword ptr -8
__text:0000000100003FF0
__text:0000000100003FF0                 push    rbp
__text:0000000100003FF1                 mov     rbp, rsp
__text:0000000100003FF4                 sub     rsp, 20h
__text:0000000100003FF8                 mov     [rbp+var_8], rdi
__text:0000000100003FFC                 mov     [rbp+var_10], rsi
__text:0000000100004000                 mov     [rbp+var_18], rdx
__text:0000000100004004                 mov     [rbp+var_20], rcx
__text:0000000100004008                 mov     rdi, [rbp+var_8]
__text:000000010000400C                 mov     rsi, [rbp+var_10]
__text:0000000100004010                 mov     rdx, [rbp+var_18]
__text:0000000100004014                 mov     rcx, [rbp+var_20]
__text:0000000100004018                 call    j___ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_ ; std::__1::__split_buffer<int,std::__1::allocator<int> &>::__split_buffer(ulong,ulong,std::__1::allocator<int> &)
__text:000000010000401D                 add     rsp, 20h
__text:0000000100004021                 pop     rbp
__text:0000000100004022                 retn
__text:0000000100004022 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC1EmmS3_ endp
__text:0000000100004022
__text:0000000100004022 ; ---------------------------------------------------------------------------
__text:0000000100004023                 align 10h
__text:0000000100004030
__text:0000000100004030 ; =============== S U B R O U T I N E =======================================
__text:0000000100004030
__text:0000000100004030 ; Attributes: bp-based frame
__text:0000000100004030
__text:0000000100004030 ; std::__1::vector<int, std::__1::allocator<int>>::__swap_out_circular_buffer(std::__1::__split_buffer<int, std::__1::allocator<int>&> &)
__text:0000000100004030 __ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE proc near
__text:0000000100004030                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE_ptr↓o
__text:0000000100004030
__text:0000000100004030 var_138         = qword ptr -138h
__text:0000000100004030 var_130         = qword ptr -130h
__text:0000000100004030 var_128         = qword ptr -128h
__text:0000000100004030 var_120         = qword ptr -120h
__text:0000000100004030 var_118         = qword ptr -118h
__text:0000000100004030 var_110         = qword ptr -110h
__text:0000000100004030 var_108         = qword ptr -108h
__text:0000000100004030 var_100         = qword ptr -100h
__text:0000000100004030 var_F8          = qword ptr -0F8h
__text:0000000100004030 var_F0          = qword ptr -0F0h
__text:0000000100004030 var_E8          = qword ptr -0E8h
__text:0000000100004030 var_E0          = qword ptr -0E0h
__text:0000000100004030 var_D8          = qword ptr -0D8h
__text:0000000100004030 var_D0          = qword ptr -0D0h
__text:0000000100004030 var_C8          = qword ptr -0C8h
__text:0000000100004030 var_C0          = qword ptr -0C0h
__text:0000000100004030 var_B8          = qword ptr -0B8h
__text:0000000100004030 var_B0          = qword ptr -0B0h
__text:0000000100004030 var_A8          = qword ptr -0A8h
__text:0000000100004030 var_A0          = qword ptr -0A0h
__text:0000000100004030 var_98          = qword ptr -98h
__text:0000000100004030 var_90          = qword ptr -90h
__text:0000000100004030 var_88          = qword ptr -88h
__text:0000000100004030 var_80          = qword ptr -80h
__text:0000000100004030 var_78          = qword ptr -78h
__text:0000000100004030 var_70          = qword ptr -70h
__text:0000000100004030 var_68          = qword ptr -68h
__text:0000000100004030 var_60          = qword ptr -60h
__text:0000000100004030 var_58          = qword ptr -58h
__text:0000000100004030 var_50          = qword ptr -50h
__text:0000000100004030 var_48          = qword ptr -48h
__text:0000000100004030 var_40          = qword ptr -40h
__text:0000000100004030 var_38          = qword ptr -38h
__text:0000000100004030 var_30          = qword ptr -30h
__text:0000000100004030 var_28          = qword ptr -28h
__text:0000000100004030 var_20          = qword ptr -20h
__text:0000000100004030 var_18          = qword ptr -18h
__text:0000000100004030 var_10          = qword ptr -10h
__text:0000000100004030 var_8           = qword ptr -8
__text:0000000100004030
__text:0000000100004030                 push    rbp
__text:0000000100004031                 mov     rbp, rsp
__text:0000000100004034                 sub     rsp, 140h
__text:000000010000403B                 lea     rax, [rbp+var_E8]
__text:0000000100004042                 lea     rcx, [rbp+var_88]
__text:0000000100004049                 lea     rdx, [rbp+var_58]
__text:000000010000404D                 mov     r8, 0
__text:0000000100004057                 mov     [rbp+var_110], rdi
__text:000000010000405E                 mov     [rbp+var_118], rsi
__text:0000000100004065                 mov     rsi, [rbp+var_110]
__text:000000010000406C                 mov     rdi, rsi
__text:000000010000406F                 mov     [rbp+var_108], rdi
__text:0000000100004076                 mov     rdi, [rbp+var_108]
__text:000000010000407D                 add     rdi, 10h
__text:0000000100004084                 mov     [rbp+var_100], rdi
__text:000000010000408B                 mov     rdi, [rbp+var_100]
__text:0000000100004092                 mov     [rbp+var_F8], rdi
__text:0000000100004099                 mov     rdi, [rbp+var_F8]
__text:00000001000040A0                 mov     r9, [rsi]
__text:00000001000040A3                 mov     r10, [rsi+8]
__text:00000001000040A7                 mov     r11, [rbp+var_118]
__text:00000001000040AE                 add     r11, 8
__text:00000001000040B5                 mov     [rbp+var_8], rdi
__text:00000001000040B9                 mov     [rbp+var_10], r9
__text:00000001000040BD                 mov     [rbp+var_18], r10
__text:00000001000040C1                 mov     [rbp+var_20], r11
__text:00000001000040C5                 mov     rdi, [rbp+var_18]
__text:00000001000040C9                 mov     r9, [rbp+var_10]
__text:00000001000040CD                 sub     rdi, r9
__text:00000001000040D0                 sar     rdi, 2
__text:00000001000040D4                 mov     [rbp+var_28], rdi
__text:00000001000040D8                 mov     rdi, [rbp+var_28]
__text:00000001000040DC                 mov     r9, [rbp+var_20]
__text:00000001000040E0                 mov     r10, [r9]
__text:00000001000040E3                 sub     r8, rdi
__text:00000001000040E6                 shl     r8, 2
__text:00000001000040EA                 add     r10, r8
__text:00000001000040ED                 mov     [r9], r10
__text:00000001000040F0                 mov     rdi, [rbp+var_20]
__text:00000001000040F4                 mov     rdi, [rdi]      ; void *
__text:00000001000040F7                 mov     r8, [rbp+var_10]
__text:00000001000040FB                 mov     r9, [rbp+var_28]
__text:00000001000040FF                 shl     r9, 2
__text:0000000100004103                 mov     [rbp+var_120], rsi
__text:000000010000410A                 mov     rsi, r8         ; void *
__text:000000010000410D                 mov     [rbp+var_128], rdx
__text:0000000100004114                 mov     rdx, r9         ; size_t
__text:0000000100004117                 mov     [rbp+var_130], rcx
__text:000000010000411E                 mov     [rbp+var_138], rax
__text:0000000100004125                 call    _memcpy
__text:000000010000412A                 mov     rax, [rbp+var_120]
__text:0000000100004131                 mov     rcx, [rbp+var_118]
__text:0000000100004138                 add     rcx, 8
__text:000000010000413F                 mov     [rbp+var_48], rax
__text:0000000100004143                 mov     [rbp+var_50], rcx
__text:0000000100004147                 mov     rax, [rbp+var_48]
__text:000000010000414B                 mov     [rbp+var_40], rax
__text:000000010000414F                 mov     rax, [rbp+var_40]
__text:0000000100004153                 mov     rax, [rax]
__text:0000000100004156                 mov     [rbp+var_58], rax
__text:000000010000415A                 mov     rax, [rbp+var_50]
__text:000000010000415E                 mov     [rbp+var_30], rax
__text:0000000100004162                 mov     rax, [rbp+var_30]
__text:0000000100004166                 mov     rax, [rax]
__text:0000000100004169                 mov     rcx, [rbp+var_48]
__text:000000010000416D                 mov     [rcx], rax
__text:0000000100004170                 mov     rax, [rbp+var_128]
__text:0000000100004177                 mov     [rbp+var_38], rax
__text:000000010000417B                 mov     rcx, [rbp+var_38]
__text:000000010000417F                 mov     rcx, [rcx]
__text:0000000100004182                 mov     rdx, [rbp+var_50]
__text:0000000100004186                 mov     [rdx], rcx
__text:0000000100004189                 mov     rcx, [rbp+var_120]
__text:0000000100004190                 add     rcx, 8
__text:0000000100004197                 mov     rdx, [rbp+var_118]
__text:000000010000419E                 add     rdx, 10h
__text:00000001000041A5                 mov     [rbp+var_78], rcx
__text:00000001000041A9                 mov     [rbp+var_80], rdx
__text:00000001000041AD                 mov     rcx, [rbp+var_78]
__text:00000001000041B1                 mov     [rbp+var_70], rcx
__text:00000001000041B5                 mov     rcx, [rbp+var_70]
__text:00000001000041B9                 mov     rcx, [rcx]
__text:00000001000041BC                 mov     [rbp+var_88], rcx
__text:00000001000041C3                 mov     rcx, [rbp+var_80]
__text:00000001000041C7                 mov     [rbp+var_60], rcx
__text:00000001000041CB                 mov     rcx, [rbp+var_60]
__text:00000001000041CF                 mov     rcx, [rcx]
__text:00000001000041D2                 mov     rdx, [rbp+var_78]
__text:00000001000041D6                 mov     [rdx], rcx
__text:00000001000041D9                 mov     rcx, [rbp+var_130]
__text:00000001000041E0                 mov     [rbp+var_68], rcx
__text:00000001000041E4                 mov     rdx, [rbp+var_68]
__text:00000001000041E8                 mov     rdx, [rdx]
__text:00000001000041EB                 mov     rsi, [rbp+var_80]
__text:00000001000041EF                 mov     [rsi], rdx
__text:00000001000041F2                 mov     rdx, [rbp+var_120]
__text:00000001000041F9                 mov     [rbp+var_A0], rdx
__text:0000000100004200                 mov     rdx, [rbp+var_A0]
__text:0000000100004207                 add     rdx, 10h
__text:000000010000420E                 mov     [rbp+var_98], rdx
__text:0000000100004215                 mov     rdx, [rbp+var_98]
__text:000000010000421C                 mov     [rbp+var_90], rdx
__text:0000000100004223                 mov     rdx, [rbp+var_90]
__text:000000010000422A                 mov     rsi, [rbp+var_118]
__text:0000000100004231                 mov     [rbp+var_B8], rsi
__text:0000000100004238                 mov     rsi, [rbp+var_B8]
__text:000000010000423F                 add     rsi, 18h
__text:0000000100004246                 mov     [rbp+var_B0], rsi
__text:000000010000424D                 mov     rsi, [rbp+var_B0]
__text:0000000100004254                 mov     [rbp+var_A8], rsi
__text:000000010000425B                 mov     rsi, [rbp+var_A8]
__text:0000000100004262                 mov     [rbp+var_D8], rdx
__text:0000000100004269                 mov     [rbp+var_E0], rsi
__text:0000000100004270                 mov     rdx, [rbp+var_D8]
__text:0000000100004277                 mov     [rbp+var_D0], rdx
__text:000000010000427E                 mov     rdx, [rbp+var_D0]
__text:0000000100004285                 mov     rdx, [rdx]
__text:0000000100004288                 mov     [rbp+var_E8], rdx
__text:000000010000428F                 mov     rdx, [rbp+var_E0]
__text:0000000100004296                 mov     [rbp+var_C0], rdx
__text:000000010000429D                 mov     rdx, [rbp+var_C0]
__text:00000001000042A4                 mov     rdx, [rdx]
__text:00000001000042A7                 mov     rsi, [rbp+var_D8]
__text:00000001000042AE                 mov     [rsi], rdx
__text:00000001000042B1                 mov     rdx, [rbp+var_138]
__text:00000001000042B8                 mov     [rbp+var_C8], rdx
__text:00000001000042BF                 mov     rsi, [rbp+var_C8]
__text:00000001000042C6                 mov     rsi, [rsi]
__text:00000001000042C9                 mov     rdi, [rbp+var_E0]
__text:00000001000042D0                 mov     [rdi], rsi
__text:00000001000042D3                 mov     rsi, [rbp+var_118]
__text:00000001000042DA                 mov     rsi, [rsi+8]
__text:00000001000042DE                 mov     rdi, [rbp+var_118]
__text:00000001000042E5                 mov     [rdi], rsi
__text:00000001000042E8                 mov     rsi, [rbp+var_120]
__text:00000001000042EF                 mov     [rbp+var_F0], rsi
__text:00000001000042F6                 add     rsp, 140h
__text:00000001000042FD                 pop     rbp
__text:00000001000042FE                 retn
__text:00000001000042FE __ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE endp
__text:00000001000042FE
__text:00000001000042FE ; ---------------------------------------------------------------------------
__text:00000001000042FF                 align 20h
__text:0000000100004300
__text:0000000100004300 ; =============== S U B R O U T I N E =======================================
__text:0000000100004300
__text:0000000100004300 ; Attributes: bp-based frame
__text:0000000100004300
__text:0000000100004300 ; std::__1::__split_buffer<int, std::__1::allocator<int> &>::~__split_buffer()
__text:0000000100004300 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev proc near
__text:0000000100004300                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev_ptr↓o
__text:0000000100004300
__text:0000000100004300 var_8           = qword ptr -8
__text:0000000100004300
__text:0000000100004300                 push    rbp
__text:0000000100004301                 mov     rbp, rsp
__text:0000000100004304                 sub     rsp, 10h
__text:0000000100004308                 mov     [rbp+var_8], rdi
__text:000000010000430C                 mov     rdi, [rbp+var_8]
__text:0000000100004310                 call    j___ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev ; std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()
__text:0000000100004315                 add     rsp, 10h
__text:0000000100004319                 pop     rbp
__text:000000010000431A                 retn
__text:000000010000431A __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev endp
__text:000000010000431A
__text:000000010000431A ; ---------------------------------------------------------------------------
__text:000000010000431B                 align 20h
__text:0000000100004320
__text:0000000100004320 ; =============== S U B R O U T I N E =======================================
__text:0000000100004320
__text:0000000100004320 ; Attributes: bp-based frame
__text:0000000100004320
__text:0000000100004320 ; std::__1::__split_buffer<int, std::__1::allocator<int> &>::~__split_buffer()
__text:0000000100004320 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev proc near
__text:0000000100004320                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev_ptr↓o
__text:0000000100004320
__text:0000000100004320 var_118         = qword ptr -118h
__text:0000000100004320 var_110         = qword ptr -110h
__text:0000000100004320 var_108         = qword ptr -108h
__text:0000000100004320 var_100         = qword ptr -100h
__text:0000000100004320 var_F0          = qword ptr -0F0h
__text:0000000100004320 var_E8          = qword ptr -0E8h
__text:0000000100004320 var_C8          = qword ptr -0C8h
__text:0000000100004320 var_C0          = qword ptr -0C0h
__text:0000000100004320 var_B8          = qword ptr -0B8h
__text:0000000100004320 var_B0          = qword ptr -0B0h
__text:0000000100004320 var_A8          = qword ptr -0A8h
__text:0000000100004320 var_90          = qword ptr -90h
__text:0000000100004320 var_88          = qword ptr -88h
__text:0000000100004320 var_80          = qword ptr -80h
__text:0000000100004320 var_78          = qword ptr -78h
__text:0000000100004320 var_70          = qword ptr -70h
__text:0000000100004320 var_68          = qword ptr -68h
__text:0000000100004320 var_60          = qword ptr -60h
__text:0000000100004320 var_58          = qword ptr -58h
__text:0000000100004320 var_50          = qword ptr -50h
__text:0000000100004320 var_48          = qword ptr -48h
__text:0000000100004320 var_40          = qword ptr -40h
__text:0000000100004320 var_38          = qword ptr -38h
__text:0000000100004320 var_30          = qword ptr -30h
__text:0000000100004320 var_28          = qword ptr -28h
__text:0000000100004320 var_20          = qword ptr -20h
__text:0000000100004320 var_18          = qword ptr -18h
__text:0000000100004320 var_10          = qword ptr -10h
__text:0000000100004320 var_8           = qword ptr -8
__text:0000000100004320
__text:0000000100004320                 push    rbp
__text:0000000100004321                 mov     rbp, rsp
__text:0000000100004324                 sub     rsp, 120h
__text:000000010000432B                 mov     [rbp+var_108], rdi
__text:0000000100004332                 mov     rdi, [rbp+var_108]
__text:0000000100004339                 mov     [rbp+var_100], rdi
__text:0000000100004340                 mov     rax, [rbp+var_100]
__text:0000000100004347                 mov     rcx, [rax+8]
__text:000000010000434B                 mov     [rbp+var_E8], rax
__text:0000000100004352                 mov     [rbp+var_F0], rcx
__text:0000000100004359                 mov     rax, [rbp+var_E8]
__text:0000000100004360                 mov     rcx, [rbp+var_F0]
__text:0000000100004367                 mov     [rbp+var_C0], rax
__text:000000010000436E                 mov     [rbp+var_C8], rcx
__text:0000000100004375                 mov     rax, [rbp+var_C0]
__text:000000010000437C                 mov     [rbp+var_110], rdi
__text:0000000100004383                 mov     [rbp+var_118], rax
__text:000000010000438A
__text:000000010000438A loc_10000438A:                          ; CODE XREF: std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()+F9↓j
__text:000000010000438A                 mov     rax, [rbp+var_C8]
__text:0000000100004391                 mov     rcx, [rbp+var_118]
__text:0000000100004398                 cmp     rax, [rcx+10h]
__text:000000010000439C                 jz      loc_10000441E
__text:00000001000043A2                 mov     rax, [rbp+var_118]
__text:00000001000043A9                 mov     [rbp+var_B8], rax
__text:00000001000043B0                 mov     rcx, [rbp+var_B8]
__text:00000001000043B7                 add     rcx, 18h
__text:00000001000043BE                 mov     [rbp+var_B0], rcx
__text:00000001000043C5                 mov     rcx, [rbp+var_B0]
__text:00000001000043CC                 mov     [rbp+var_A8], rcx
__text:00000001000043D3                 mov     rcx, [rbp+var_A8]
__text:00000001000043DA                 mov     rcx, [rcx+8]
__text:00000001000043DE                 mov     rdx, [rax+10h]
__text:00000001000043E2                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:00000001000043E9                 mov     [rax+10h], rdx
__text:00000001000043ED                 mov     [rbp+var_70], rdx
__text:00000001000043F1                 mov     rdx, [rbp+var_70]
__text:00000001000043F5                 mov     [rbp+var_88], rcx
__text:00000001000043FC                 mov     [rbp+var_90], rdx
__text:0000000100004403                 mov     rcx, [rbp+var_88]
__text:000000010000440A                 mov     rdx, [rbp+var_90]
__text:0000000100004411                 mov     [rbp+var_78], rcx
__text:0000000100004415                 mov     [rbp+var_80], rdx
__text:0000000100004419                 jmp     loc_10000438A
__text:000000010000441E ; ---------------------------------------------------------------------------
__text:000000010000441E
__text:000000010000441E loc_10000441E:                          ; CODE XREF: std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()+7C↑j
__text:000000010000441E                 mov     rax, [rbp+var_110]
__text:0000000100004425                 cmp     qword ptr [rax], 0
__text:000000010000442C                 jz      loc_1000044C3
__text:0000000100004432                 mov     rax, [rbp+var_110]
__text:0000000100004439                 mov     [rbp+var_38], rax
__text:000000010000443D                 mov     rcx, [rbp+var_38]
__text:0000000100004441                 add     rcx, 18h
__text:0000000100004448                 mov     [rbp+var_30], rcx
__text:000000010000444C                 mov     rcx, [rbp+var_30]
__text:0000000100004450                 mov     [rbp+var_28], rcx
__text:0000000100004454                 mov     rcx, [rbp+var_28]
__text:0000000100004458                 mov     rcx, [rcx+8]
__text:000000010000445C                 mov     rdx, [rax]
__text:000000010000445F                 mov     [rbp+var_20], rax
__text:0000000100004463                 mov     rsi, [rbp+var_20]
__text:0000000100004467                 mov     [rbp+var_18], rsi
__text:000000010000446B                 mov     rdi, [rbp+var_18]
__text:000000010000446F                 add     rdi, 18h
__text:0000000100004476                 mov     [rbp+var_10], rdi
__text:000000010000447A                 mov     rdi, [rbp+var_10]
__text:000000010000447E                 mov     [rbp+var_8], rdi
__text:0000000100004482                 mov     rdi, [rbp+var_8]
__text:0000000100004486                 mov     rdi, [rdi]
__text:0000000100004489                 mov     rsi, [rsi]
__text:000000010000448C                 sub     rdi, rsi
__text:000000010000448F                 sar     rdi, 2
__text:0000000100004493                 mov     [rbp+var_58], rcx
__text:0000000100004497                 mov     [rbp+var_60], rdx
__text:000000010000449B                 mov     [rbp+var_68], rdi
__text:000000010000449F                 mov     rcx, [rbp+var_58]
__text:00000001000044A3                 mov     rdx, [rbp+var_60]
__text:00000001000044A7                 mov     rsi, [rbp+var_68]
__text:00000001000044AB                 mov     [rbp+var_40], rcx
__text:00000001000044AF                 mov     [rbp+var_48], rdx
__text:00000001000044B3                 mov     [rbp+var_50], rsi
__text:00000001000044B7                 mov     rcx, [rbp+var_48]
__text:00000001000044BB                 mov     rdi, rcx        ; void *
__text:00000001000044BE                 call    __ZdlPv         ; operator delete(void *)
__text:00000001000044C3
__text:00000001000044C3 loc_1000044C3:                          ; CODE XREF: std::__1::__split_buffer<int,std::__1::allocator<int> &>::~__split_buffer()+10C↑j
__text:00000001000044C3                 add     rsp, 120h
__text:00000001000044CA                 pop     rbp
__text:00000001000044CB                 retn
__text:00000001000044CB __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev endp
__text:00000001000044CB
__text:00000001000044CB ; ---------------------------------------------------------------------------
__text:00000001000044CC                 align 10h
__text:00000001000044D0
__text:00000001000044D0 ; =============== S U B R O U T I N E =======================================
__text:00000001000044D0
__text:00000001000044D0 ; Attributes: bp-based frame
__text:00000001000044D0
__text:00000001000044D0 ; std::__1::vector<int, std::__1::allocator<int>>::max_size(void)const
__text:00000001000044D0 __ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv proc near
__text:00000001000044D0                                         ; DATA XREF: __la_symbol_ptr:__ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv_ptr↓o
__text:00000001000044D0
__text:00000001000044D0 var_D8          = qword ptr -0D8h
__text:00000001000044D0 var_D0          = qword ptr -0D0h
__text:00000001000044D0 var_B8          = qword ptr -0B8h
__text:00000001000044D0 var_B0          = qword ptr -0B0h
__text:00000001000044D0 var_A8          = qword ptr -0A8h
__text:00000001000044D0 var_A0          = qword ptr -0A0h
__text:00000001000044D0 var_98          = qword ptr -98h
__text:00000001000044D0 var_90          = qword ptr -90h
__text:00000001000044D0 var_80          = qword ptr -80h
__text:00000001000044D0 var_78          = qword ptr -78h
__text:00000001000044D0 var_70          = byte ptr -70h
__text:00000001000044D0 var_68          = qword ptr -68h
__text:00000001000044D0 var_60          = qword ptr -60h
__text:00000001000044D0 var_58          = qword ptr -58h
__text:00000001000044D0 var_50          = qword ptr -50h
__text:00000001000044D0 var_48          = qword ptr -48h
__text:00000001000044D0 var_20          = qword ptr -20h
__text:00000001000044D0 var_18          = qword ptr -18h
__text:00000001000044D0 var_8           = qword ptr -8
__text:00000001000044D0
__text:00000001000044D0                 push    rbp
__text:00000001000044D1                 mov     rbp, rsp
__text:00000001000044D4                 sub     rsp, 58h
__text:00000001000044D8                 lea     rax, [rbp+var_70]
__text:00000001000044DC                 lea     rcx, [rbp+var_B8]
__text:00000001000044E3                 lea     rdx, [rbp+var_B0]
__text:00000001000044EA                 mov     rsi, 0FFFFFFFFFFFFFFFFh
__text:00000001000044F4                 mov     r8, 3FFFFFFFFFFFFFFFh
__text:00000001000044FE                 mov     [rbp+var_A8], rdi
__text:0000000100004505                 mov     rdi, [rbp+var_A8]
__text:000000010000450C                 mov     [rbp+var_A0], rdi
__text:0000000100004513                 mov     rdi, [rbp+var_A0]
__text:000000010000451A                 add     rdi, 10h
__text:0000000100004521                 mov     [rbp+var_98], rdi
__text:0000000100004528                 mov     rdi, [rbp+var_98]
__text:000000010000452F                 mov     [rbp+var_90], rdi
__text:0000000100004536                 mov     rdi, [rbp+var_90]
__text:000000010000453D                 mov     [rbp+var_20], rdi
__text:0000000100004541                 mov     rdi, [rbp+var_20]
__text:0000000100004545                 mov     [rbp+var_18], rdi
__text:0000000100004549                 mov     rdi, [rbp+var_18]
__text:000000010000454D                 mov     [rbp+var_8], rdi
__text:0000000100004551                 mov     [rbp+var_B0], r8
__text:0000000100004558                 shr     rsi, 1
__text:000000010000455C                 mov     [rbp+var_B8], rsi
__text:0000000100004563                 mov     [rbp+var_78], rdx
__text:0000000100004567                 mov     [rbp+var_80], rcx
__text:000000010000456B                 mov     rcx, [rbp+var_78]
__text:000000010000456F                 mov     rdx, [rbp+var_80]
__text:0000000100004573                 mov     [rbp+var_60], rcx
__text:0000000100004577                 mov     [rbp+var_68], rdx
__text:000000010000457B                 mov     rcx, [rbp+var_68]
__text:000000010000457F                 mov     rdx, [rbp+var_60]
__text:0000000100004583                 mov     [rbp+var_48], rax
__text:0000000100004587                 mov     [rbp+var_50], rcx
__text:000000010000458B                 mov     [rbp+var_58], rdx
__text:000000010000458F                 mov     rax, [rbp+var_50]
__text:0000000100004593                 mov     rax, [rax]
__text:0000000100004596                 mov     rcx, [rbp+var_58]
__text:000000010000459A                 cmp     rax, [rcx]
__text:000000010000459D                 jnb     loc_1000045B3
__text:00000001000045A3                 mov     rax, [rbp+var_68]
__text:00000001000045A7                 mov     [rbp+var_D0], rax
__text:00000001000045AE                 jmp     loc_1000045BE
__text:00000001000045B3 ; ---------------------------------------------------------------------------
__text:00000001000045B3
__text:00000001000045B3 loc_1000045B3:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::max_size(void)+CD↑j
__text:00000001000045B3                 mov     rax, [rbp+var_60]
__text:00000001000045B7                 mov     [rbp+var_D0], rax
__text:00000001000045BE
__text:00000001000045BE loc_1000045BE:                          ; CODE XREF: std::__1::vector<int,std::__1::allocator<int>>::max_size(void)+DE↑j
__text:00000001000045BE                 mov     rax, [rbp+var_D0]
__text:00000001000045C5                 mov     [rbp+var_D8], rax
__text:00000001000045CC                 mov     rax, [rbp+var_D8]
__text:00000001000045D3                 mov     rax, [rax]
__text:00000001000045D6                 add     rsp, 58h
__text:00000001000045DA                 pop     rbp
__text:00000001000045DB                 retn
__text:00000001000045DB __ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv endp
__text:00000001000045DB
__text:00000001000045DB ; ---------------------------------------------------------------------------
__text:00000001000045DC                 align 20h
__text:00000001000045E0
__text:00000001000045E0 ; =============== S U B R O U T I N E =======================================
__text:00000001000045E0
__text:00000001000045E0 ; Attributes: bp-based frame
__text:00000001000045E0
__text:00000001000045E0 ; std::__1::__split_buffer<int, std::__1::allocator<int> &>::__split_buffer(unsigned long, unsigned long, std::__1::allocator<int> &)
__text:00000001000045E0 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_ proc near
__text:00000001000045E0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EmmS3__ptr↓o
__text:00000001000045E0
__text:00000001000045E0 var_160         = qword ptr -160h
__text:00000001000045E0 var_158         = qword ptr -158h
__text:00000001000045E0 var_150         = qword ptr -150h
__text:00000001000045E0 var_148         = qword ptr -148h
__text:00000001000045E0 var_140         = qword ptr -140h
__text:00000001000045E0 var_138         = qword ptr -138h
__text:00000001000045E0 var_130         = qword ptr -130h
__text:00000001000045E0 var_128         = qword ptr -128h
__text:00000001000045E0 var_120         = qword ptr -120h
__text:00000001000045E0 var_118         = qword ptr -118h
__text:00000001000045E0 var_110         = qword ptr -110h
__text:00000001000045E0 var_108         = qword ptr -108h
__text:00000001000045E0 var_100         = qword ptr -100h
__text:00000001000045E0 var_F8          = qword ptr -0F8h
__text:00000001000045E0 var_F0          = qword ptr -0F0h
__text:00000001000045E0 var_E8          = qword ptr -0E8h
__text:00000001000045E0 var_E0          = qword ptr -0E0h
__text:00000001000045E0 var_D8          = qword ptr -0D8h
__text:00000001000045E0 var_D0          = qword ptr -0D0h
__text:00000001000045E0 var_C8          = qword ptr -0C8h
__text:00000001000045E0 var_C0          = qword ptr -0C0h
__text:00000001000045E0 var_B8          = qword ptr -0B8h
__text:00000001000045E0 var_B0          = qword ptr -0B0h
__text:00000001000045E0 var_A8          = qword ptr -0A8h
__text:00000001000045E0 var_A0          = qword ptr -0A0h
__text:00000001000045E0 var_98          = qword ptr -98h
__text:00000001000045E0 var_90          = qword ptr -90h
__text:00000001000045E0 var_88          = qword ptr -88h
__text:00000001000045E0 var_80          = qword ptr -80h
__text:00000001000045E0 var_78          = qword ptr -78h
__text:00000001000045E0 var_70          = qword ptr -70h
__text:00000001000045E0 var_68          = qword ptr -68h
__text:00000001000045E0 var_60          = qword ptr -60h
__text:00000001000045E0 var_58          = qword ptr -58h
__text:00000001000045E0 var_50          = qword ptr -50h
__text:00000001000045E0 var_48          = qword ptr -48h
__text:00000001000045E0 var_40          = qword ptr -40h
__text:00000001000045E0 var_38          = qword ptr -38h
__text:00000001000045E0 var_30          = qword ptr -30h
__text:00000001000045E0 var_28          = qword ptr -28h
__text:00000001000045E0 var_20          = qword ptr -20h
__text:00000001000045E0 var_18          = qword ptr -18h
__text:00000001000045E0 var_10          = qword ptr -10h
__text:00000001000045E0 var_8           = qword ptr -8
__text:00000001000045E0
__text:00000001000045E0                 push    rbp
__text:00000001000045E1                 mov     rbp, rsp
__text:00000001000045E4                 sub     rsp, 160h
__text:00000001000045EB                 lea     rax, [rbp+var_28]
__text:00000001000045EF                 lea     r8, [rbp+var_48]
__text:00000001000045F3                 lea     r9, [rbp+var_148]
__text:00000001000045FA                 lea     r10, [rbp+var_120]
__text:0000000100004601                 mov     [rbp+var_128], rdi
__text:0000000100004608                 mov     [rbp+var_130], rsi
__text:000000010000460F                 mov     [rbp+var_138], rdx
__text:0000000100004616                 mov     [rbp+var_140], rcx
__text:000000010000461D                 mov     rcx, [rbp+var_128]
__text:0000000100004624                 mov     rdx, rcx
__text:0000000100004627                 add     rdx, 18h
__text:000000010000462E                 mov     [rbp+var_110], r10
__text:0000000100004635                 mov     [rbp+var_118], 0FFFFFFFFFFFFFFFFh
__text:0000000100004640                 mov     rsi, [rbp+var_110]
__text:0000000100004647                 mov     rdi, [rbp+var_118]
__text:000000010000464E                 mov     [rbp+var_100], rsi
__text:0000000100004655                 mov     [rbp+var_108], rdi
__text:000000010000465C                 mov     rsi, [rbp+var_100]
__text:0000000100004663                 mov     qword ptr [rsi], 0
__text:000000010000466A                 mov     rsi, [rbp+var_120]
__text:0000000100004671                 mov     [rbp+var_148], rsi
__text:0000000100004678                 mov     [rbp+var_88], r9
__text:000000010000467F                 mov     rsi, [rbp+var_140]
__text:0000000100004686                 mov     [rbp+var_58], rdx
__text:000000010000468A                 mov     [rbp+var_60], 0
__text:0000000100004692                 mov     [rbp+var_68], rsi
__text:0000000100004696                 mov     rdx, [rbp+var_58]
__text:000000010000469A                 mov     rsi, [rbp+var_60]
__text:000000010000469E                 mov     rdi, [rbp+var_68]
__text:00000001000046A2                 mov     [rbp+var_40], rdx
__text:00000001000046A6                 mov     [rbp+var_48], rsi
__text:00000001000046AA                 mov     [rbp+var_50], rdi
__text:00000001000046AE                 mov     rdx, [rbp+var_40]
__text:00000001000046B2                 mov     [rbp+var_38], r8
__text:00000001000046B6                 mov     rsi, [rbp+var_38]
__text:00000001000046BA                 mov     rsi, [rsi]
__text:00000001000046BD                 mov     rdi, [rbp+var_50]
__text:00000001000046C1                 mov     [rbp+var_8], rdi
__text:00000001000046C5                 mov     rdi, [rbp+var_8]
__text:00000001000046C9                 mov     [rbp+var_20], rdx
__text:00000001000046CD                 mov     [rbp+var_28], rsi
__text:00000001000046D1                 mov     [rbp+var_30], rdi
__text:00000001000046D5                 mov     rdx, [rbp+var_20]
__text:00000001000046D9                 mov     [rbp+var_18], rax
__text:00000001000046DD                 mov     rax, [rbp+var_18]
__text:00000001000046E1                 mov     rax, [rax]
__text:00000001000046E4                 mov     [rdx], rax
__text:00000001000046E7                 mov     rax, [rbp+var_30]
__text:00000001000046EB                 mov     [rbp+var_10], rax
__text:00000001000046EF                 mov     rax, [rbp+var_10]
__text:00000001000046F3                 mov     [rdx+8], rax
__text:00000001000046F7                 cmp     [rbp+var_130], 0
__text:0000000100004702                 mov     [rbp+var_158], rcx
__text:0000000100004709                 jz      loc_100004794
__text:000000010000470F                 mov     rax, [rbp+var_158]
__text:0000000100004716                 mov     [rbp+var_80], rax
__text:000000010000471A                 mov     rcx, [rbp+var_80]
__text:000000010000471E                 add     rcx, 18h
__text:0000000100004725                 mov     [rbp+var_78], rcx
__text:0000000100004729                 mov     rcx, [rbp+var_78]
__text:000000010000472D                 mov     [rbp+var_70], rcx
__text:0000000100004731                 mov     rcx, [rbp+var_70]
__text:0000000100004735                 mov     rcx, [rcx+8]
__text:0000000100004739                 mov     rdx, [rbp+var_130]
__text:0000000100004740                 mov     [rbp+var_A8], rcx
__text:0000000100004747                 mov     [rbp+var_B0], rdx
__text:000000010000474E                 mov     rcx, [rbp+var_A8]
__text:0000000100004755                 mov     rdx, [rbp+var_B0]
__text:000000010000475C                 mov     [rbp+var_90], rcx
__text:0000000100004763                 mov     [rbp+var_98], rdx
__text:000000010000476A                 mov     [rbp+var_A0], 0
__text:0000000100004775                 mov     rcx, [rbp+var_98]
__text:000000010000477C                 shl     rcx, 2
__text:0000000100004780                 mov     rdi, rcx        ; unsigned __int64
__text:0000000100004783                 call    __Znwm          ; operator new(ulong)
__text:0000000100004788                 mov     [rbp+var_160], rax
__text:000000010000478F                 jmp     loc_100004804
__text:0000000100004794 ; ---------------------------------------------------------------------------
__text:0000000100004794
__text:0000000100004794 loc_100004794:                          ; CODE XREF: std::__1::__split_buffer<int,std::__1::allocator<int> &>::__split_buffer(ulong,ulong,std::__1::allocator<int> &)+129↑j
__text:0000000100004794                 mov     rax, 0
__text:000000010000479E                 lea     rcx, [rbp+var_150]
__text:00000001000047A5                 lea     rdx, [rbp+var_D8]
__text:00000001000047AC                 mov     [rbp+var_C8], rdx
__text:00000001000047B3                 mov     [rbp+var_D0], 0FFFFFFFFFFFFFFFFh
__text:00000001000047BE                 mov     rdx, [rbp+var_C8]
__text:00000001000047C5                 mov     rsi, [rbp+var_D0]
__text:00000001000047CC                 mov     [rbp+var_B8], rdx
__text:00000001000047D3                 mov     [rbp+var_C0], rsi
__text:00000001000047DA                 mov     rdx, [rbp+var_B8]
__text:00000001000047E1                 mov     qword ptr [rdx], 0
__text:00000001000047E8                 mov     rdx, [rbp+var_D8]
__text:00000001000047EF                 mov     [rbp+var_150], rdx
__text:00000001000047F6                 mov     [rbp+var_E0], rcx
__text:00000001000047FD                 mov     [rbp+var_160], rax
__text:0000000100004804
__text:0000000100004804 loc_100004804:                          ; CODE XREF: std::__1::__split_buffer<int,std::__1::allocator<int> &>::__split_buffer(ulong,ulong,std::__1::allocator<int> &)+1AF↑j
__text:0000000100004804                 mov     rax, [rbp+var_160]
__text:000000010000480B                 mov     rcx, [rbp+var_158]
__text:0000000100004812                 mov     [rcx], rax
__text:0000000100004815                 mov     rax, [rcx]
__text:0000000100004818                 mov     rdx, [rbp+var_138]
__text:000000010000481F                 shl     rdx, 2
__text:0000000100004823                 add     rax, rdx
__text:0000000100004826                 mov     [rcx+10h], rax
__text:000000010000482A                 mov     [rcx+8], rax
__text:000000010000482E                 mov     rax, [rcx]
__text:0000000100004831                 mov     rdx, [rbp+var_130]
__text:0000000100004838                 shl     rdx, 2
__text:000000010000483C                 add     rax, rdx
__text:000000010000483F                 mov     [rbp+var_F8], rcx
__text:0000000100004846                 mov     rdx, [rbp+var_F8]
__text:000000010000484D                 add     rdx, 18h
__text:0000000100004854                 mov     [rbp+var_F0], rdx
__text:000000010000485B                 mov     rdx, [rbp+var_F0]
__text:0000000100004862                 mov     [rbp+var_E8], rdx
__text:0000000100004869                 mov     rdx, [rbp+var_E8]
__text:0000000100004870                 mov     [rdx], rax
__text:0000000100004873                 add     rsp, 160h
__text:000000010000487A                 pop     rbp
__text:000000010000487B                 retn
__text:000000010000487B __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_ endp
__text:000000010000487B
__text:000000010000487B ; ---------------------------------------------------------------------------
__text:000000010000487C                 align 20h
__text:0000000100004880
__text:0000000100004880 ; =============== S U B R O U T I N E =======================================
__text:0000000100004880
__text:0000000100004880 ; Attributes: bp-based frame
__text:0000000100004880
__text:0000000100004880 ; __int64 __fastcall isascii(int)
__text:0000000100004880 __Z7isasciii    proc near               ; DATA XREF: __la_symbol_ptr:__Z7isasciii_ptr↓o
__text:0000000100004880
__text:0000000100004880 var_4           = dword ptr -4
__text:0000000100004880
__text:0000000100004880                 push    rbp
__text:0000000100004881                 mov     rbp, rsp
__text:0000000100004884                 mov     [rbp+var_4], edi
__text:0000000100004887                 mov     edi, [rbp+var_4]
__text:000000010000488A                 and     edi, 0FFFFFF80h
__text:0000000100004890                 cmp     edi, 0
__text:0000000100004896                 setz    al
__text:0000000100004899                 and     al, 1
__text:000000010000489B                 movzx   eax, al
__text:000000010000489E                 pop     rbp
__text:000000010000489F                 retn
__text:000000010000489F __Z7isasciii    endp
__text:000000010000489F
__text:00000001000048A0
__text:00000001000048A0 ; =============== S U B R O U T I N E =======================================
__text:00000001000048A0
__text:00000001000048A0 ; Attributes: bp-based frame
__text:00000001000048A0
__text:00000001000048A0 ; std::__1::vector<int, std::__1::allocator<int>>::~vector()
__text:00000001000048A0 __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev proc near
__text:00000001000048A0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev_ptr↓o
__text:00000001000048A0
__text:00000001000048A0 var_8           = qword ptr -8
__text:00000001000048A0
__text:00000001000048A0                 push    rbp
__text:00000001000048A1                 mov     rbp, rsp
__text:00000001000048A4                 sub     rsp, 10h
__text:00000001000048A8                 mov     [rbp+var_8], rdi
__text:00000001000048AC                 mov     rdi, [rbp+var_8]
__text:00000001000048B0                 call    j___ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev ; std::__1::__vector_base<int,std::__1::allocator<int>>::~__vector_base()
__text:00000001000048B5                 add     rsp, 10h
__text:00000001000048B9                 pop     rbp
__text:00000001000048BA                 retn
__text:00000001000048BA __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev endp
__text:00000001000048BA
__text:00000001000048BA ; ---------------------------------------------------------------------------
__text:00000001000048BB                 align 20h
__text:00000001000048C0
__text:00000001000048C0 ; =============== S U B R O U T I N E =======================================
__text:00000001000048C0
__text:00000001000048C0 ; Attributes: bp-based frame
__text:00000001000048C0
__text:00000001000048C0 ; std::__1::__vector_base<int, std::__1::allocator<int>>::~__vector_base()
__text:00000001000048C0 __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev proc near
__text:00000001000048C0                                         ; DATA XREF: __la_symbol_ptr:__ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev_ptr↓o
__text:00000001000048C0
__text:00000001000048C0 var_130         = qword ptr -130h
__text:00000001000048C0 var_128         = qword ptr -128h
__text:00000001000048C0 var_120         = qword ptr -120h
__text:00000001000048C0 var_118         = qword ptr -118h
__text:00000001000048C0 var_110         = qword ptr -110h
__text:00000001000048C0 var_108         = qword ptr -108h
__text:00000001000048C0 var_100         = qword ptr -100h
__text:00000001000048C0 var_F8          = qword ptr -0F8h
__text:00000001000048C0 var_F0          = qword ptr -0F0h
__text:00000001000048C0 var_E8          = qword ptr -0E8h
__text:00000001000048C0 var_E0          = qword ptr -0E0h
__text:00000001000048C0 var_D8          = qword ptr -0D8h
__text:00000001000048C0 var_D0          = qword ptr -0D0h
__text:00000001000048C0 var_C8          = qword ptr -0C8h
__text:00000001000048C0 var_C0          = qword ptr -0C0h
__text:00000001000048C0 var_B8          = qword ptr -0B8h
__text:00000001000048C0 var_B0          = qword ptr -0B0h
__text:00000001000048C0 var_A8          = qword ptr -0A8h
__text:00000001000048C0 var_A0          = qword ptr -0A0h
__text:00000001000048C0 var_98          = qword ptr -98h
__text:00000001000048C0 var_90          = qword ptr -90h
__text:00000001000048C0 var_88          = qword ptr -88h
__text:00000001000048C0 var_80          = qword ptr -80h
__text:00000001000048C0 var_78          = qword ptr -78h
__text:00000001000048C0 var_60          = qword ptr -60h
__text:00000001000048C0 var_58          = qword ptr -58h
__text:00000001000048C0 var_50          = qword ptr -50h
__text:00000001000048C0 var_48          = qword ptr -48h
__text:00000001000048C0 var_40          = qword ptr -40h
__text:00000001000048C0 var_28          = qword ptr -28h
__text:00000001000048C0 var_20          = qword ptr -20h
__text:00000001000048C0 var_18          = qword ptr -18h
__text:00000001000048C0 var_10          = qword ptr -10h
__text:00000001000048C0 var_8           = qword ptr -8
__text:00000001000048C0
__text:00000001000048C0                 push    rbp
__text:00000001000048C1                 mov     rbp, rsp
__text:00000001000048C4                 sub     rsp, 130h
__text:00000001000048CB                 lea     rax, [rbp+var_120]
__text:00000001000048D2                 lea     rcx, [rbp+var_110]
__text:00000001000048D9                 mov     [rbp+var_118], rdi
__text:00000001000048E0                 mov     rdi, [rbp+var_118]
__text:00000001000048E7                 mov     rdx, [rdi]
__text:00000001000048EA                 mov     [rbp+var_100], rcx
__text:00000001000048F1                 mov     [rbp+var_108], 0FFFFFFFFFFFFFFFFh
__text:00000001000048FC                 mov     rcx, [rbp+var_100]
__text:0000000100004903                 mov     rsi, [rbp+var_108]
__text:000000010000490A                 mov     [rbp+var_F0], rcx
__text:0000000100004911                 mov     [rbp+var_F8], rsi
__text:0000000100004918                 mov     rcx, [rbp+var_F0]
__text:000000010000491F                 mov     qword ptr [rcx], 0
__text:0000000100004926                 mov     rcx, [rbp+var_110]
__text:000000010000492D                 mov     [rbp+var_120], rcx
__text:0000000100004934                 mov     [rbp+var_B8], rax
__text:000000010000493B                 cmp     rdx, 0
__text:0000000100004942                 mov     [rbp+var_128], rdi
__text:0000000100004949                 jz      loc_100004AB2
__text:000000010000494F                 mov     rax, [rbp+var_128]
__text:0000000100004956                 mov     [rbp+var_78], rax
__text:000000010000495A                 mov     rcx, [rbp+var_78]
__text:000000010000495E                 mov     rdx, [rcx]
__text:0000000100004961                 mov     [rbp+var_58], rcx
__text:0000000100004965                 mov     [rbp+var_60], rdx
__text:0000000100004969                 mov     rcx, [rbp+var_58]
__text:000000010000496D                 mov     [rbp+var_130], rcx
__text:0000000100004974
__text:0000000100004974 loc_100004974:                          ; CODE XREF: std::__1::__vector_base<int,std::__1::allocator<int>>::~__vector_base()+11E↓j
__text:0000000100004974                 mov     rax, [rbp+var_60]
__text:0000000100004978                 mov     rcx, [rbp+var_130]
__text:000000010000497F                 cmp     rax, [rcx+8]
__text:0000000100004983                 jz      loc_1000049E3
__text:0000000100004989                 mov     rax, [rbp+var_130]
__text:0000000100004990                 mov     [rbp+var_50], rax
__text:0000000100004994                 mov     rcx, [rbp+var_50]
__text:0000000100004998                 add     rcx, 10h
__text:000000010000499F                 mov     [rbp+var_48], rcx
__text:00000001000049A3                 mov     rcx, [rbp+var_48]
__text:00000001000049A7                 mov     [rbp+var_40], rcx
__text:00000001000049AB                 mov     rcx, [rbp+var_40]
__text:00000001000049AF                 mov     rdx, [rax+8]
__text:00000001000049B3                 add     rdx, 0FFFFFFFFFFFFFFFCh
__text:00000001000049BA                 mov     [rax+8], rdx
__text:00000001000049BE                 mov     [rbp+var_8], rdx
__text:00000001000049C2                 mov     rdx, [rbp+var_8]
__text:00000001000049C6                 mov     [rbp+var_20], rcx
__text:00000001000049CA                 mov     [rbp+var_28], rdx
__text:00000001000049CE                 mov     rcx, [rbp+var_20]
__text:00000001000049D2                 mov     rdx, [rbp+var_28]
__text:00000001000049D6                 mov     [rbp+var_10], rcx
__text:00000001000049DA                 mov     [rbp+var_18], rdx
__text:00000001000049DE                 jmp     loc_100004974
__text:00000001000049E3 ; ---------------------------------------------------------------------------
__text:00000001000049E3
__text:00000001000049E3 loc_1000049E3:                          ; CODE XREF: std::__1::__vector_base<int,std::__1::allocator<int>>::~__vector_base()+C3↑j
__text:00000001000049E3                 mov     rax, [rbp+var_128]
__text:00000001000049EA                 mov     [rbp+var_90], rax
__text:00000001000049F1                 mov     rcx, [rbp+var_90]
__text:00000001000049F8                 add     rcx, 10h
__text:00000001000049FF                 mov     [rbp+var_88], rcx
__text:0000000100004A06                 mov     rcx, [rbp+var_88]
__text:0000000100004A0D                 mov     [rbp+var_80], rcx
__text:0000000100004A11                 mov     rcx, [rbp+var_80]
__text:0000000100004A15                 mov     rdx, [rax]
__text:0000000100004A18                 mov     [rbp+var_B0], rax
__text:0000000100004A1F                 mov     rsi, [rbp+var_B0]
__text:0000000100004A26                 mov     [rbp+var_A8], rsi
__text:0000000100004A2D                 mov     rdi, [rbp+var_A8]
__text:0000000100004A34                 add     rdi, 10h
__text:0000000100004A3B                 mov     [rbp+var_A0], rdi
__text:0000000100004A42                 mov     rdi, [rbp+var_A0]
__text:0000000100004A49                 mov     [rbp+var_98], rdi
__text:0000000100004A50                 mov     rdi, [rbp+var_98]
__text:0000000100004A57                 mov     rdi, [rdi]
__text:0000000100004A5A                 mov     rsi, [rsi]
__text:0000000100004A5D                 sub     rdi, rsi
__text:0000000100004A60                 sar     rdi, 2
__text:0000000100004A64                 mov     [rbp+var_D8], rcx
__text:0000000100004A6B                 mov     [rbp+var_E0], rdx
__text:0000000100004A72                 mov     [rbp+var_E8], rdi
__text:0000000100004A79                 mov     rcx, [rbp+var_D8]
__text:0000000100004A80                 mov     rdx, [rbp+var_E0]
__text:0000000100004A87                 mov     rsi, [rbp+var_E8]
__text:0000000100004A8E                 mov     [rbp+var_C0], rcx
__text:0000000100004A95                 mov     [rbp+var_C8], rdx
__text:0000000100004A9C                 mov     [rbp+var_D0], rsi
__text:0000000100004AA3                 mov     rcx, [rbp+var_C8]
__text:0000000100004AAA                 mov     rdi, rcx        ; void *
__text:0000000100004AAD                 call    __ZdlPv         ; operator delete(void *)
__text:0000000100004AB2
__text:0000000100004AB2 loc_100004AB2:                          ; CODE XREF: std::__1::__vector_base<int,std::__1::allocator<int>>::~__vector_base()+89↑j
__text:0000000100004AB2                 add     rsp, 130h
__text:0000000100004AB9                 pop     rbp
__text:0000000100004ABA                 retn
__text:0000000100004ABA __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev endp
__text:0000000100004ABA
__text:0000000100004ABA __text          ends
__text:0000000100004ABA