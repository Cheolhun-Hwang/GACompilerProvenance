.text:0000000000400F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000400F90
.text:0000000000400F90 ; Attributes: noreturn fuzzy-sp
.text:0000000000400F90
.text:0000000000400F90                 public _start
.text:0000000000400F90 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o
.text:0000000000400F90                 xor     ebp, ebp
.text:0000000000400F92                 mov     r9, rdx         ; rtld_fini
.text:0000000000400F95                 pop     rsi             ; argc
.text:0000000000400F96                 mov     rdx, rsp        ; ubp_av
.text:0000000000400F99                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000400F9D                 push    rax
.text:0000000000400F9E                 push    rsp             ; stack_end
.text:0000000000400F9F                 mov     r8, offset __libc_csu_fini ; fini
.text:0000000000400FA6                 mov     rcx, offset __libc_csu_init ; init
.text:0000000000400FAD                 mov     rdi, offset main ; main
.text:0000000000400FB4                 call    ___libc_start_main
.text:0000000000400FB9                 hlt
.text:0000000000400FB9 _start          endp
.text:0000000000400FB9
.text:0000000000400FB9 ; ---------------------------------------------------------------------------
.text:0000000000400FBA                 align 4
.text:0000000000400FBC
.text:0000000000400FBC ; =============== S U B R O U T I N E =======================================
.text:0000000000400FBC
.text:0000000000400FBC
.text:0000000000400FBC call_gmon_start proc near               ; CODE XREF: _init_proc+4↑p
.text:0000000000400FBC                 sub     rsp, 8
.text:0000000000400FC0                 mov     rax, cs:__gmon_start___ptr
.text:0000000000400FC7                 test    rax, rax
.text:0000000000400FCA                 jz      short loc_400FCE
.text:0000000000400FCC                 call    rax ; __gmon_start__
.text:0000000000400FCE
.text:0000000000400FCE loc_400FCE:                             ; CODE XREF: call_gmon_start+E↑j
.text:0000000000400FCE                 add     rsp, 8
.text:0000000000400FD2                 retn
.text:0000000000400FD2 call_gmon_start endp
.text:0000000000400FD2
.text:0000000000400FD2 ; ---------------------------------------------------------------------------
.text:0000000000400FD3                 align 20h
.text:0000000000400FE0
.text:0000000000400FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000400FE0
.text:0000000000400FE0 ; Attributes: bp-based frame
.text:0000000000400FE0
.text:0000000000400FE0 __do_global_dtors_aux proc near         ; CODE XREF: _term_proc+4↓p
.text:0000000000400FE0                 push    rbp
.text:0000000000400FE1                 mov     rbp, rsp
.text:0000000000400FE4                 push    rbx
.text:0000000000400FE5                 sub     rsp, 8
.text:0000000000400FE9                 cmp     cs:completed_6531, 0
.text:0000000000400FF0                 jnz     short loc_40103D
.text:0000000000400FF2                 mov     ebx, offset __DTOR_END__
.text:0000000000400FF7                 mov     rax, cs:dtor_idx_6533
.text:0000000000400FFE                 sub     rbx, offset __DTOR_LIST__
.text:0000000000401005                 sar     rbx, 3
.text:0000000000401009                 sub     rbx, 1
.text:000000000040100D                 cmp     rax, rbx
.text:0000000000401010                 jnb     short loc_401036
.text:0000000000401012                 nop     word ptr [rax+rax+00h]
.text:0000000000401018
.text:0000000000401018 loc_401018:                             ; CODE XREF: __do_global_dtors_aux+54↓j
.text:0000000000401018                 add     rax, 1
.text:000000000040101C                 mov     cs:dtor_idx_6533, rax
.text:0000000000401023                 call    ds:__DTOR_LIST__[rax*8]
.text:000000000040102A                 mov     rax, cs:dtor_idx_6533
.text:0000000000401031                 cmp     rax, rbx
.text:0000000000401034                 jb      short loc_401018
.text:0000000000401036
.text:0000000000401036 loc_401036:                             ; CODE XREF: __do_global_dtors_aux+30↑j
.text:0000000000401036                 mov     cs:completed_6531, 1
.text:000000000040103D
.text:000000000040103D loc_40103D:                             ; CODE XREF: __do_global_dtors_aux+10↑j
.text:000000000040103D                 add     rsp, 8
.text:0000000000401041                 pop     rbx
.text:0000000000401042                 pop     rbp
.text:0000000000401043                 retn
.text:0000000000401043 __do_global_dtors_aux endp
.text:0000000000401043
.text:0000000000401043 ; ---------------------------------------------------------------------------
.text:0000000000401044                 align 10h
.text:0000000000401050
.text:0000000000401050 ; =============== S U B R O U T I N E =======================================
.text:0000000000401050
.text:0000000000401050 ; Attributes: bp-based frame
.text:0000000000401050
.text:0000000000401050 frame_dummy     proc near               ; CODE XREF: _init_proc+9↑p
.text:0000000000401050                 cmp     cs:__JCR_LIST__, 0
.text:0000000000401058                 push    rbp
.text:0000000000401059                 mov     rbp, rsp
.text:000000000040105C                 jz      short loc_401070
.text:000000000040105E                 mov     eax, 0
.text:0000000000401063                 test    rax, rax
.text:0000000000401066                 jz      short loc_401070
.text:0000000000401068                 pop     rbp
.text:0000000000401069                 mov     edi, offset __JCR_LIST__
.text:000000000040106E                 jmp     rax
.text:0000000000401070 ; ---------------------------------------------------------------------------
.text:0000000000401070
.text:0000000000401070 loc_401070:                             ; CODE XREF: frame_dummy+C↑j
.text:0000000000401070                                         ; frame_dummy+16↑j
.text:0000000000401070                 pop     rbp
.text:0000000000401071                 retn
.text:0000000000401071 frame_dummy     endp
.text:0000000000401071
.text:0000000000401071 ; ---------------------------------------------------------------------------
.text:0000000000401072                 align 20h
.text:0000000000401080
.text:0000000000401080 ; =============== S U B R O U T I N E =======================================
.text:0000000000401080
.text:0000000000401080 ; Attributes: bp-based frame fuzzy-sp
.text:0000000000401080
.text:0000000000401080 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000401080                 public main
.text:0000000000401080 main            proc near               ; DATA XREF: _start+1D↑o
.text:0000000000401080
.text:0000000000401080 var_80          = qword ptr -80h
.text:0000000000401080 var_78          = qword ptr -78h
.text:0000000000401080 var_70          = qword ptr -70h
.text:0000000000401080 var_68          = qword ptr -68h
.text:0000000000401080 var_60          = qword ptr -60h
.text:0000000000401080 var_58          = qword ptr -58h
.text:0000000000401080 var_50          = dword ptr -50h
.text:0000000000401080 var_4C          = dword ptr -4Ch
.text:0000000000401080 var_48          = dword ptr -48h
.text:0000000000401080 var_40          = dword ptr -40h
.text:0000000000401080 var_38          = qword ptr -38h
.text:0000000000401080 var_30          = dword ptr -30h
.text:0000000000401080
.text:0000000000401080 ; __unwind { // ___gxx_personality_v0
.text:0000000000401080                 push    rbp
.text:0000000000401081                 mov     rbp, rsp
.text:0000000000401084                 and     rsp, 0FFFFFFFFFFFFFF80h
.text:0000000000401088                 sub     rsp, 80h
.text:000000000040108F                 mov     rsi, 0
.text:0000000000401099                 mov     edi, 3
.text:000000000040109E                 call    __intel_new_feature_proc_init
.text:00000000004010A3                 stmxcsr dword ptr [rsp+80h+var_80]
.text:00000000004010A7                 mov     edi, offset _ZSt3cin@@GLIBCXX_3_4
.text:00000000004010AC                 lea     rsi, [rsp+80h+var_50]
.text:00000000004010B1                 or      dword ptr [rsp+80h+var_80], 8040h
.text:00000000004010B8                 ldmxcsr dword ptr [rsp+80h+var_80]
.text:00000000004010BC                 call    __ZNSirsERi     ; std::istream::operator>>(int &)
.text:00000000004010C1                 mov     esi, 1
.text:00000000004010C6                 mov     ecx, esi
.text:00000000004010C8                 cmp     [rsp+80h+var_50], 0
.text:00000000004010CD                 jle     loc_40157A
.text:00000000004010D3                 mov     edx, offset unk_605C80
.text:00000000004010D8                 xor     edi, edi
.text:00000000004010DA                 mov     eax, offset v
.text:00000000004010DF                 mov     [rsp+80h+var_78], r12
.text:00000000004010E4                 mov     r12d, esi
.text:00000000004010E7                 mov     [rsp+80h+var_70], r13
.text:00000000004010EC                 mov     r13, rax
.text:00000000004010EF                 mov     [rsp+80h+var_68], r14
.text:00000000004010F4                 mov     r14, rdi
.text:00000000004010F7                 mov     [rsp+80h+var_60], r15
.text:00000000004010FC                 mov     r15, rdx
.text:00000000004010FF                 mov     [rsp+80h+var_58], rbx
.text:0000000000401104                 mov     ebx, ecx
.text:0000000000401106
.text:0000000000401106 loc_401106:                             ; CODE XREF: main+4DB↓j
.text:0000000000401106                 mov     edi, offset format ; "%d%d%d"
.text:000000000040110B                 mov     esi, offset m
.text:0000000000401110                 mov     edx, offset f
.text:0000000000401115                 mov     ecx, offset n
.text:000000000040111A                 xor     eax, eax
.text:000000000040111C                 call    _scanf
.text:0000000000401121                 mov     r8, r14
.text:0000000000401124                 mov     eax, cs:n
.text:000000000040112A                 mov     rcx, r8
.text:000000000040112D                 test    eax, eax
.text:000000000040112F                 jle     loc_401FF5
.text:0000000000401135                 mov     rbx, rcx
.text:0000000000401138                 mov     r15, r8
.text:000000000040113B
.text:000000000040113B loc_40113B:                             ; CODE XREF: main+10B↓j
.text:000000000040113B                 mov     edi, offset aDD ; "%d%d"
.text:0000000000401140                 lea     rsi, dword_605C04[rbx]
.text:0000000000401147                 xor     eax, eax
.text:0000000000401149                 lea     rdx, v[rbx]
.text:0000000000401150                 call    _scanf
.text:0000000000401155                 mov     edx, ds:dword_605C04[rbx]
.text:000000000040115B                 mov     edi, offset all
.text:0000000000401160                 mov     r9d, ds:v[rbx]
.text:0000000000401167                 lea     rsi, [rsp+80h+var_4C]
.text:000000000040116C                 mov     [rsp+80h+var_4C], edx
.text:0000000000401170                 mov     [rsp+80h+var_48], r9d
.text:0000000000401175                 call    _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueERKS1_ ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)
.text:000000000040117A                 inc     r15
.text:000000000040117D                 add     rbx, 8
.text:0000000000401181                 movsxd  rax, cs:n
.text:0000000000401188                 cmp     r15, rax
.text:000000000040118B                 jl      short loc_40113B
.text:000000000040118D                 mov     r15d, offset unk_605C80
.text:0000000000401193                 mov     ebx, 1
.text:0000000000401198
.text:0000000000401198 loc_401198:                             ; CODE XREF: main+F78↓j
.text:0000000000401198                 lea     rcx, [r13+rax*8+0]
.text:000000000040119D                 cmp     r13, rcx
.text:00000000004011A0                 jnz     loc_401581
.text:00000000004011A6
.text:00000000004011A6 loc_4011A6:                             ; CODE XREF: main+9BC↓j
.text:00000000004011A6                                         ; main+A18↓j ...
.text:00000000004011A6                 mov     r11, r14
.text:00000000004011A9                 xor     r10d, r10d
.text:00000000004011AC                 mov     r8d, cs:m
.text:00000000004011B3                 mov     r9, r11
.text:00000000004011B6                 mov     ecx, cs:f
.text:00000000004011BC                 test    r8d, r8d
.text:00000000004011BF                 jl      loc_4013D2
.text:00000000004011C5                 movsxd  rdx, cs:n
.text:00000000004011CC                 mov     rdi, r14
.text:00000000004011CF                 mov     rax, cs:qword_1548698
.text:00000000004011D6                 mov     r14d, r10d
.text:00000000004011D9                 mov     [rsp+80h+var_40], r12d
.text:00000000004011DE                 mov     r15, r11
.text:00000000004011E1
.text:00000000004011E1 loc_4011E1:                             ; CODE XREF: main+333↓j
.text:00000000004011E1                 test    rax, rax
.text:00000000004011E4                 lea     r12d, [r8+1]
.text:00000000004011E8                 mov     esi, r12d
.text:00000000004011EB                 jz      short loc_4011F7
.text:00000000004011ED                 mov     rsi, qword ptr cs:xmmword_1548680+8
.text:00000000004011F4                 mov     esi, [rsi+20h]
.text:00000000004011F7
.text:00000000004011F7 loc_4011F7:                             ; CODE XREF: main+16B↑j
.text:00000000004011F7                 add     ecx, esi
.text:00000000004011F9                 cmp     ecx, r12d
.text:00000000004011FC                 cmovge  ecx, r12d
.text:0000000000401200                 cmp     r15, rdx
.text:0000000000401203                 mov     ds:cnt[r9*4], ecx
.text:000000000040120B                 jge     loc_4013AA
.text:0000000000401211                 mov     [rsp+80h+var_38], r9
.text:0000000000401216                 mov     [rsp+80h+var_30], ecx
.text:000000000040121A
.text:000000000040121A loc_40121A:                             ; CODE XREF: main+314↓j
.text:000000000040121A                 mov     ecx, ds:v[r15*8]
.text:0000000000401222                 cmp     ecx, r14d
.text:0000000000401225                 jnz     loc_40139A
.text:000000000040122B                 mov     r12, qword ptr cs:xmmword_1548680
.text:0000000000401232                 mov     r13, r12
.text:0000000000401235                 mov     esi, ds:dword_605C04[r15*8]
.text:000000000040123D                 mov     ebx, offset qword_1548678
.text:0000000000401242                 test    r12, r12
.text:0000000000401245                 jz      loc_4012D2
.text:000000000040124B
.text:000000000040124B loc_40124B:                             ; CODE XREF: main+24C↓j
.text:000000000040124B                 mov     r8d, [r13+20h]
.text:000000000040124F                 cmp     r8d, esi
.text:0000000000401252                 jl      short loc_40125F
.text:0000000000401254                 cmp     esi, r8d
.text:0000000000401257                 jl      short loc_4012C2
.text:0000000000401259                 cmp     ecx, [r13+24h]
.text:000000000040125D                 jle     short loc_401265
.text:000000000040125F
.text:000000000040125F loc_40125F:                             ; CODE XREF: main+1D2↑j
.text:000000000040125F                 mov     r13, [r13+18h]
.text:0000000000401263                 jmp     short loc_4012C9
.text:0000000000401265 ; ---------------------------------------------------------------------------
.text:0000000000401265
.text:0000000000401265 loc_401265:                             ; CODE XREF: main+1DD↑j
.text:0000000000401265                 jl      short loc_4012C2
.text:0000000000401267                 mov     r8, [r13+10h]
.text:000000000040126B                 test    r8, r8
.text:000000000040126E                 mov     r9, [r13+18h]
.text:0000000000401272                 jz      short loc_40129A
.text:0000000000401274
.text:0000000000401274 loc_401274:                             ; CODE XREF: main+218↓j
.text:0000000000401274                 mov     r10d, [r8+20h]
.text:0000000000401278                 cmp     r10d, esi
.text:000000000040127B                 jl      short loc_401288
.text:000000000040127D                 cmp     esi, r10d
.text:0000000000401280                 jl      short loc_40128E
.text:0000000000401282                 cmp     ecx, [r8+24h]
.text:0000000000401286                 jle     short loc_40128E
.text:0000000000401288
.text:0000000000401288 loc_401288:                             ; CODE XREF: main+1FB↑j
.text:0000000000401288                 mov     r8, [r8+18h]
.text:000000000040128C                 jmp     short loc_401295
.text:000000000040128E ; ---------------------------------------------------------------------------
.text:000000000040128E
.text:000000000040128E loc_40128E:                             ; CODE XREF: main+200↑j
.text:000000000040128E                                         ; main+206↑j
.text:000000000040128E                 mov     r13, r8
.text:0000000000401291                 mov     r8, [r8+10h]
.text:0000000000401295
.text:0000000000401295 loc_401295:                             ; CODE XREF: main+20C↑j
.text:0000000000401295                 test    r8, r8
.text:0000000000401298                 jnz     short loc_401274
.text:000000000040129A
.text:000000000040129A loc_40129A:                             ; CODE XREF: main+1F2↑j
.text:000000000040129A                                         ; main+23A↓j ...
.text:000000000040129A                 test    r9, r9
.text:000000000040129D                 jz      short loc_4012D5
.text:000000000040129F                 mov     r8d, [r9+20h]
.text:00000000004012A3                 cmp     esi, r8d
.text:00000000004012A6                 jl      short loc_4012B3
.text:00000000004012A8                 cmp     r8d, esi
.text:00000000004012AB                 jl      short loc_4012BC
.text:00000000004012AD                 cmp     ecx, [r9+24h]
.text:00000000004012B1                 jge     short loc_4012BC
.text:00000000004012B3
.text:00000000004012B3 loc_4012B3:                             ; CODE XREF: main+226↑j
.text:00000000004012B3                 mov     rbx, r9
.text:00000000004012B6                 mov     r9, [r9+10h]
.text:00000000004012BA                 jmp     short loc_40129A
.text:00000000004012BC ; ---------------------------------------------------------------------------
.text:00000000004012BC
.text:00000000004012BC loc_4012BC:                             ; CODE XREF: main+22B↑j
.text:00000000004012BC                                         ; main+231↑j
.text:00000000004012BC                 mov     r9, [r9+18h]
.text:00000000004012C0                 jmp     short loc_40129A
.text:00000000004012C2 ; ---------------------------------------------------------------------------
.text:00000000004012C2
.text:00000000004012C2 loc_4012C2:                             ; CODE XREF: main+1D7↑j
.text:00000000004012C2                                         ; main:loc_401265↑j
.text:00000000004012C2                 mov     rbx, r13
.text:00000000004012C5                 mov     r13, [r13+10h]
.text:00000000004012C9
.text:00000000004012C9 loc_4012C9:                             ; CODE XREF: main+1E3↑j
.text:00000000004012C9                 test    r13, r13
.text:00000000004012CC                 jnz     loc_40124B
.text:00000000004012D2
.text:00000000004012D2 loc_4012D2:                             ; CODE XREF: main+1C5↑j
.text:00000000004012D2                 mov     r13, rbx
.text:00000000004012D5
.text:00000000004012D5 loc_4012D5:                             ; CODE XREF: main+21D↑j
.text:00000000004012D5                 cmp     r13, qword ptr cs:xmmword_1548680+8
.text:00000000004012DC                 jnz     short loc_401347
.text:00000000004012DE                 mov     ecx, offset qword_1548678
.text:00000000004012E3                 cmp     rbx, rcx
.text:00000000004012E6                 jnz     short loc_401347
.text:00000000004012E8                 test    r12, r12
.text:00000000004012EB                 jz      short loc_40131E
.text:00000000004012ED                 mov     rbx, rdi
.text:00000000004012F0
.text:00000000004012F0 loc_4012F0:                             ; CODE XREF: main+292↓j
.text:00000000004012F0                 mov     edi, offset all
.text:00000000004012F5                 mov     rsi, [r12+18h]
.text:00000000004012FA                 call    _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_erase(std::_Rb_tree_node<std::pair<int,int>> *)
.text:00000000004012FF                 mov     rdi, r12        ; void *
.text:0000000000401302                 mov     r13, [r12+10h]
.text:0000000000401307                 call    __ZdlPv         ; operator delete(void *)
.text:000000000040130C                 mov     r12, r13
.text:000000000040130F                 test    r13, r13
.text:0000000000401312                 jnz     short loc_4012F0
.text:0000000000401314                 movsxd  rdx, cs:n
.text:000000000040131B                 mov     rdi, rbx
.text:000000000040131E
.text:000000000040131E loc_40131E:                             ; CODE XREF: main+26B↑j
.text:000000000040131E                 mov     qword ptr cs:xmmword_1548680+8, offset qword_1548678
.text:0000000000401329                 mov     rax, rdi
.text:000000000040132C                 mov     qword ptr cs:xmmword_1548680, rdi
.text:0000000000401333                 mov     cs:qword_1548690, offset qword_1548678
.text:000000000040133E                 mov     cs:qword_1548698, rdi
.text:0000000000401345                 jmp     short loc_40138E
.text:0000000000401347 ; ---------------------------------------------------------------------------
.text:0000000000401347
.text:0000000000401347 loc_401347:                             ; CODE XREF: main+25C↑j
.text:0000000000401347                                         ; main+266↑j
.text:0000000000401347                 cmp     r13, rbx
.text:000000000040134A                 jz      short loc_40138E
.text:000000000040134C
.text:000000000040134C loc_40134C:                             ; CODE XREF: main+303↓j
.text:000000000040134C                 mov     rdi, r13
.text:000000000040134F                 mov     r12, r13
.text:0000000000401352                 call    __ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base ; std::_Rb_tree_increment(std::_Rb_tree_node_base const*)
.text:0000000000401357                 mov     r13, rax
.text:000000000040135A                 mov     rdi, r12
.text:000000000040135D                 mov     esi, offset qword_1548678
.text:0000000000401362                 call    __ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_ ; std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000401367                 mov     rdi, rax        ; void *
.text:000000000040136A                 call    __ZdlPv         ; operator delete(void *)
.text:000000000040136F                 mov     rax, cs:qword_1548698
.text:0000000000401376                 dec     rax
.text:0000000000401379                 mov     cs:qword_1548698, rax
.text:0000000000401380                 cmp     r13, rbx
.text:0000000000401383                 jnz     short loc_40134C
.text:0000000000401385                 movsxd  rdx, cs:n
.text:000000000040138C                 xor     edi, edi
.text:000000000040138E
.text:000000000040138E loc_40138E:                             ; CODE XREF: main+2C5↑j
.text:000000000040138E                                         ; main+2CA↑j
.text:000000000040138E                 inc     r15
.text:0000000000401391                 cmp     r15, rdx
.text:0000000000401394                 jl      loc_40121A
.text:000000000040139A
.text:000000000040139A loc_40139A:                             ; CODE XREF: main+1A5↑j
.text:000000000040139A                 mov     r9, [rsp+80h+var_38]
.text:000000000040139F                 mov     ecx, [rsp+80h+var_30]
.text:00000000004013A3                 mov     r8d, cs:m
.text:00000000004013AA
.text:00000000004013AA loc_4013AA:                             ; CODE XREF: main+18B↑j
.text:00000000004013AA                 inc     r14d
.text:00000000004013AD                 inc     r9
.text:00000000004013B0                 cmp     r14d, r8d
.text:00000000004013B3                 jle     loc_4011E1
.text:00000000004013B9                 mov     r12d, [rsp+80h+var_40]
.text:00000000004013BE                 mov     r14, rdi
.text:00000000004013C1                 mov     r13d, offset v
.text:00000000004013C7                 mov     r15d, offset unk_605C80
.text:00000000004013CD                 mov     ebx, 1
.text:00000000004013D2
.text:00000000004013D2 loc_4013D2:                             ; CODE XREF: main+13F↑j
.text:00000000004013D2                 mov     cs:res, 0
.text:00000000004013DC                 xor     edi, edi
.text:00000000004013DE                 mov     ecx, 1
.text:00000000004013E3                 mov     edx, 4
.text:00000000004013E8                 test    r8d, r8d
.text:00000000004013EB                 jle     loc_4014EC
.text:00000000004013F1                 movsxd  rax, r8d
.text:00000000004013F4
.text:00000000004013F4 loc_4013F4:                             ; CODE XREF: main+466↓j
.text:00000000004013F4                 movsxd  r10, edi
.text:00000000004013F7                 mov     ds:res[rdx], 0
.text:0000000000401401                 movsxd  r9, ds:dword_606244[r10*4]
.text:0000000000401409                 cmp     r9, rcx
.text:000000000040140C                 jg      short loc_40145D
.text:000000000040140E
.text:000000000040140E loc_40140E:                             ; CODE XREF: main+3DB↓j
.text:000000000040140E                 movsxd  r11, ds:cnt[r10*4]
.text:0000000000401416                 movsxd  r10, ds:dword_606244[r10*4]
.text:000000000040141E                 shl     r11, 2
.text:0000000000401422                 shl     r10, 2
.text:0000000000401426                 neg     r11
.text:0000000000401429                 neg     r10
.text:000000000040142C                 mov     r9d, ds:res[r11+rdx]
.text:0000000000401434                 mov     r10d, ds:res[r10+rdx]
.text:000000000040143C                 lea     r9d, [r9+rdi+1]
.text:0000000000401441                 lea     r10d, [r10+rdi+2]
.text:0000000000401446                 cmp     r9d, r10d
.text:0000000000401449                 jg      short loc_40145D
.text:000000000040144B                 inc     edi
.text:000000000040144D                 movsxd  r10, edi
.text:0000000000401450                 movsxd  r9, ds:dword_606244[r10*4]
.text:0000000000401458                 cmp     r9, rcx
.text:000000000040145B                 jle     short loc_40140E
.text:000000000040145D
.text:000000000040145D loc_40145D:                             ; CODE XREF: main+38C↑j
.text:000000000040145D                                         ; main+3C9↑j
.text:000000000040145D                 mov     r9d, edi
.text:0000000000401460                 xor     r10d, r10d
.text:0000000000401463                 add     r9d, 0FFFFFE0Ch
.text:000000000040146A                 lea     r11d, [rdi+1F4h]
.text:0000000000401471                 cmovs   r9d, r10d
.text:0000000000401475                 cmp     r11d, r8d
.text:0000000000401478                 cmovge  r11d, r8d
.text:000000000040147C                 cmp     r9d, r11d
.text:000000000040147F                 jg      short loc_4014D8
.text:0000000000401481
.text:0000000000401481 loc_401481:                             ; CODE XREF: main+456↓j
.text:0000000000401481                 movsxd  r9, r9d
.text:0000000000401484                 movsxd  rsi, ds:cnt[r9*4]
.text:000000000040148C                 cmp     rcx, rsi
.text:000000000040148F                 jl      short loc_4014D0
.text:0000000000401491                 shl     rsi, 2
.text:0000000000401495                 neg     rsi
.text:0000000000401498                 add     rsi, rdx
.text:000000000040149B                 mov     r10d, ds:res[rdx]
.text:00000000004014A2                 mov     esi, ds:res[rsi]
.text:00000000004014A8                 lea     esi, [r9+rsi+1]
.text:00000000004014AD                 cmp     esi, r10d
.text:00000000004014B0                 jl      short loc_4014D0
.text:00000000004014B2                 cmp     r10d, esi
.text:00000000004014B5                 lea     r11d, [r9+1F4h]
.text:00000000004014BC                 mov     edi, r9d
.text:00000000004014BF                 cmovge  esi, r10d
.text:00000000004014C3                 cmp     r11d, r8d
.text:00000000004014C6                 mov     ds:res[rdx], esi
.text:00000000004014CC                 cmovge  r11d, r8d
.text:00000000004014D0
.text:00000000004014D0 loc_4014D0:                             ; CODE XREF: main+40F↑j
.text:00000000004014D0                                         ; main+430↑j
.text:00000000004014D0                 inc     r9d
.text:00000000004014D3                 cmp     r9d, r11d
.text:00000000004014D6                 jle     short loc_401481
.text:00000000004014D8
.text:00000000004014D8 loc_4014D8:                             ; CODE XREF: main+3FF↑j
.text:00000000004014D8                 nop     dword ptr [rax+00h]
.text:00000000004014DC                 inc     rcx
.text:00000000004014DF                 add     rdx, 4
.text:00000000004014E3                 cmp     rcx, rax
.text:00000000004014E6                 jle     loc_4013F4
.text:00000000004014EC
.text:00000000004014EC loc_4014EC:                             ; CODE XREF: main+36B↑j
.text:00000000004014EC                 mov     edi, offset _ZSt4cout@@GLIBCXX_3_4
.text:00000000004014F1                 mov     esi, offset aCase ; "Case #"
.text:00000000004014F6                 call    __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const*)
.text:00000000004014FB                 mov     rdi, rax
.text:00000000004014FE                 mov     esi, r12d
.text:0000000000401501                 call    __ZNSolsEi      ; std::ostream::operator<<(int)
.text:0000000000401506                 mov     rdi, rax
.text:0000000000401509                 mov     esi, offset asc_4035FC ; ": "
.text:000000000040150E                 call    __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const*)
.text:0000000000401513                 movsxd  r8, cs:m
.text:000000000040151A                 mov     rdi, rax
.text:000000000040151D                 mov     esi, ds:res[r8*4]
.text:0000000000401525                 call    __ZNSolsEi      ; std::ostream::operator<<(int)
.text:000000000040152A                 mov     edi, offset _ZSt4cout@@GLIBCXX_3_4
.text:000000000040152F                 mov     esi, offset __ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ ; std::endl<char,std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &)
.text:0000000000401534                 call    __ZNSolsEPFRSoS_E ; std::ostream::operator<<(std::ostream & (*)(std::ostream &))
.text:0000000000401539                 mov     edi, offset _ZSt4cerr@@GLIBCXX_3_4
.text:000000000040153E                 mov     esi, r12d
.text:0000000000401541                 call    __ZNSolsEi      ; std::ostream::operator<<(int)
.text:0000000000401546                 mov     rdi, rax
.text:0000000000401549                 mov     esi, offset __ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ ; std::endl<char,std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &)
.text:000000000040154E                 call    __ZNSolsEPFRSoS_E ; std::ostream::operator<<(std::ostream & (*)(std::ostream &))
.text:0000000000401553                 inc     r12d
.text:0000000000401556                 cmp     r12d, [rsp+80h+var_50]
.text:000000000040155B                 jle     loc_401106
.text:0000000000401561                 mov     r12, [rsp+80h+var_78]
.text:0000000000401566                 mov     r13, [rsp+80h+var_70]
.text:000000000040156B                 mov     r14, [rsp+80h+var_68]
.text:0000000000401570                 mov     r15, [rsp+80h+var_60]
.text:0000000000401575                 mov     rbx, [rsp+80h+var_58]
.text:000000000040157A
.text:000000000040157A loc_40157A:                             ; CODE XREF: main+4D↑j
.text:000000000040157A                 xor     eax, eax
.text:000000000040157C                 mov     rsp, rbp
.text:000000000040157F                 pop     rbp
.text:0000000000401580                 retn
.text:0000000000401581 ; ---------------------------------------------------------------------------
.text:0000000000401581
.text:0000000000401581 loc_401581:                             ; CODE XREF: main+120↑j
.text:0000000000401581                 mov     r9, rcx
.text:0000000000401584                 mov     rsi, rcx
.text:0000000000401587                 sub     r9, r13
.text:000000000040158A                 mov     r8, r9
.text:000000000040158D                 sar     r8, 23h
.text:0000000000401591                 sar     r9, 3
.text:0000000000401595                 bsr     r10d, r9d
.text:0000000000401599                 bsr     edx, r8d
.text:000000000040159D                 neg     r10d
.text:00000000004015A0                 neg     edx
.text:00000000004015A2                 add     r10d, 3Fh ; '?'
.text:00000000004015A6                 add     edx, 1Fh
.text:00000000004015A9                 test    r8d, r8d
.text:00000000004015AC                 cmovz   edx, r10d
.text:00000000004015B0                 movsxd  rdx, edx
.text:00000000004015B3                 add     rdx, rdx
.text:00000000004015B6                 neg     rdx
.text:00000000004015B9                 add     rdx, 7Eh ; '~'
.text:00000000004015BD                 cmp     r9, 10h
.text:00000000004015C1                 jle     loc_401DD1
.text:00000000004015C7                 mov     [rsp+80h+var_40], r12d
.text:00000000004015CC                 mov     r15, rdx
.text:00000000004015CF                 mov     r12, rcx
.text:00000000004015D2
.text:00000000004015D2 loc_4015D2:                             ; CODE XREF: main+78B↓j
.text:00000000004015D2                 mov     rax, rsi
.text:00000000004015D5                 sub     rax, r13
.text:00000000004015D8                 sar     rax, 3
.text:00000000004015DC                 test    r15, r15
.text:00000000004015DF                 jz      loc_401A9D
.text:00000000004015E5                 mov     r8, rax
.text:00000000004015E8                 dec     r15
.text:00000000004015EB                 shr     r8, 3Fh
.text:00000000004015EF                 add     rax, r8
.text:00000000004015F2                 sar     rax, 1
.text:00000000004015F5                 mov     r9d, cs:v
.text:00000000004015FC                 mov     ebx, ds:v[rax*8]
.text:0000000000401603                 cmp     r9d, ebx
.text:0000000000401606                 jl      short loc_401626
.text:0000000000401608                 cmp     ebx, r9d
.text:000000000040160B                 jl      loc_4016C8
.text:0000000000401611                 mov     r8d, cs:dword_605C04
.text:0000000000401618                 cmp     r8d, ds:dword_605C04[rax*8]
.text:0000000000401620                 jge     loc_4016C8
.text:0000000000401626
.text:0000000000401626 loc_401626:                             ; CODE XREF: main+586↑j
.text:0000000000401626                 mov     r10d, [rsi-8]
.text:000000000040162A                 cmp     ebx, r10d
.text:000000000040162D                 jl      short loc_401642
.text:000000000040162F                 cmp     r10d, ebx
.text:0000000000401632                 jl      short loc_40167A
.text:0000000000401634                 mov     r8d, ds:dword_605C04[rax*8]
.text:000000000040163C                 cmp     r8d, [rsi-4]
.text:0000000000401640                 jge     short loc_40167A
.text:0000000000401642
.text:0000000000401642 loc_401642:                             ; CODE XREF: main+5AD↑j
.text:0000000000401642                 mov     cs:v, ebx
.text:0000000000401648                 mov     r8d, ds:dword_605C04[rax*8]
.text:0000000000401650                 mov     r10d, cs:dword_605C04
.text:0000000000401657                 mov     cs:dword_605C04, r8d
.text:000000000040165E                 mov     ds:v[rax*8], r9d
.text:0000000000401666                 mov     ds:dword_605C04[rax*8], r10d
.text:000000000040166E                 mov     r9d, cs:v
.text:0000000000401675                 jmp     loc_40174A
.text:000000000040167A ; ---------------------------------------------------------------------------
.text:000000000040167A
.text:000000000040167A loc_40167A:                             ; CODE XREF: main+5B2↑j
.text:000000000040167A                                         ; main+5C0↑j
.text:000000000040167A                 cmp     r9d, r10d
.text:000000000040167D                 jge     short loc_401688
.text:000000000040167F                 mov     r11d, cs:dword_605C04
.text:0000000000401686                 jmp     short loc_4016A2
.text:0000000000401688 ; ---------------------------------------------------------------------------
.text:0000000000401688
.text:0000000000401688 loc_401688:                             ; CODE XREF: main+5FD↑j
.text:0000000000401688                 cmp     r10d, r9d
.text:000000000040168B                 jl      loc_40174A
.text:0000000000401691                 mov     r11d, cs:dword_605C04
.text:0000000000401698                 cmp     r11d, [rsi-4]
.text:000000000040169C                 jge     loc_40174A
.text:00000000004016A2
.text:00000000004016A2 loc_4016A2:                             ; CODE XREF: main+606↑j
.text:00000000004016A2                 mov     cs:v, r10d
.text:00000000004016A9                 mov     r8d, [rsi-4]
.text:00000000004016AD                 mov     cs:dword_605C04, r8d
.text:00000000004016B4                 mov     [rsi-8], r9d
.text:00000000004016B8                 mov     [rsi-4], r11d
.text:00000000004016BC                 mov     r9d, cs:v
.text:00000000004016C3                 jmp     loc_40174A
.text:00000000004016C8 ; ---------------------------------------------------------------------------
.text:00000000004016C8
.text:00000000004016C8 loc_4016C8:                             ; CODE XREF: main+58B↑j
.text:00000000004016C8                                         ; main+5A0↑j
.text:00000000004016C8                 mov     r10d, [rsi-8]
.text:00000000004016CC                 cmp     r9d, r10d
.text:00000000004016CF                 jl      short loc_40174A
.text:00000000004016D1                 mov     r11d, cs:dword_605C04
.text:00000000004016D8                 cmp     r10d, r9d
.text:00000000004016DB                 jl      short loc_4016E3
.text:00000000004016DD                 cmp     r11d, [rsi-4]
.text:00000000004016E1                 jl      short loc_40174A
.text:00000000004016E3
.text:00000000004016E3 loc_4016E3:                             ; CODE XREF: main+65B↑j
.text:00000000004016E3                 cmp     ebx, r10d
.text:00000000004016E6                 jl      short loc_4016FB
.text:00000000004016E8                 cmp     r10d, ebx
.text:00000000004016EB                 jl      short loc_40171E
.text:00000000004016ED                 mov     r8d, ds:dword_605C04[rax*8]
.text:00000000004016F5                 cmp     r8d, [rsi-4]
.text:00000000004016F9                 jge     short loc_40171E
.text:00000000004016FB
.text:00000000004016FB loc_4016FB:                             ; CODE XREF: main+666↑j
.text:00000000004016FB                 mov     cs:v, r10d
.text:0000000000401702                 mov     r8d, [rsi-4]
.text:0000000000401706                 mov     cs:dword_605C04, r8d
.text:000000000040170D                 mov     [rsi-8], r9d
.text:0000000000401711                 mov     [rsi-4], r11d
.text:0000000000401715                 mov     r9d, cs:v
.text:000000000040171C                 jmp     short loc_40174A
.text:000000000040171E ; ---------------------------------------------------------------------------
.text:000000000040171E
.text:000000000040171E loc_40171E:                             ; CODE XREF: main+66B↑j
.text:000000000040171E                                         ; main+679↑j
.text:000000000040171E                 mov     cs:v, ebx
.text:0000000000401724                 mov     r8d, ds:dword_605C04[rax*8]
.text:000000000040172C                 mov     cs:dword_605C04, r8d
.text:0000000000401733                 mov     ds:v[rax*8], r9d
.text:000000000040173B                 mov     ds:dword_605C04[rax*8], r11d
.text:0000000000401743                 mov     r9d, cs:v
.text:000000000040174A
.text:000000000040174A loc_40174A:                             ; CODE XREF: main+5F5↑j
.text:000000000040174A                                         ; main+60B↑j ...
.text:000000000040174A                 mov     ebx, offset dword_605C08
.text:000000000040174F                 mov     rax, rsi
.text:0000000000401752                 jmp     short loc_401775
.text:0000000000401754 ; ---------------------------------------------------------------------------
.text:0000000000401754
.text:0000000000401754 loc_401754:                             ; CODE XREF: main+76C↓j
.text:0000000000401754                 mov     [rbx], r10d
.text:0000000000401757                 mov     r10d, [rax+4]
.text:000000000040175B                 mov     r9d, [rbx+4]
.text:000000000040175F                 mov     [rbx+4], r10d
.text:0000000000401763                 add     rbx, 8
.text:0000000000401767                 mov     [rax], r8d
.text:000000000040176A                 mov     [rax+4], r9d
.text:000000000040176E                 mov     r9d, cs:v
.text:0000000000401775
.text:0000000000401775 loc_401775:                             ; CODE XREF: main+6D2↑j
.text:0000000000401775                 mov     r8d, [rbx]
.text:0000000000401778                 cmp     r8d, r9d
.text:000000000040177B                 jl      short loc_40178F
.text:000000000040177D                 cmp     r9d, r8d
.text:0000000000401780                 jl      short loc_4017AD
.text:0000000000401782                 mov     r10d, [rbx+4]
.text:0000000000401786                 cmp     r10d, cs:dword_605C04
.text:000000000040178D                 jge     short loc_4017AD
.text:000000000040178F
.text:000000000040178F loc_40178F:                             ; CODE XREF: main+6FB↑j
.text:000000000040178F                                         ; main+719↓j ...
.text:000000000040178F                 add     rbx, 8
.text:0000000000401793                 mov     r8d, [rbx]
.text:0000000000401796                 cmp     r8d, r9d
.text:0000000000401799                 jl      short loc_40178F
.text:000000000040179B                 cmp     r9d, r8d
.text:000000000040179E                 jl      short loc_4017AD
.text:00000000004017A0                 mov     r10d, [rbx+4]
.text:00000000004017A4                 cmp     r10d, cs:dword_605C04
.text:00000000004017AB                 jl      short loc_40178F
.text:00000000004017AD
.text:00000000004017AD loc_4017AD:                             ; CODE XREF: main+700↑j
.text:00000000004017AD                                         ; main+70D↑j ...
.text:00000000004017AD                 add     rax, 0FFFFFFFFFFFFFFF8h
.text:00000000004017B1                 mov     r10d, [rax]
.text:00000000004017B4                 cmp     r9d, r10d
.text:00000000004017B7                 jl      short loc_4017CB
.text:00000000004017B9                 cmp     r10d, r9d
.text:00000000004017BC                 jl      short loc_4017E9
.text:00000000004017BE                 mov     r11d, cs:dword_605C04
.text:00000000004017C5                 cmp     r11d, [rax+4]
.text:00000000004017C9                 jge     short loc_4017E9
.text:00000000004017CB
.text:00000000004017CB loc_4017CB:                             ; CODE XREF: main+737↑j
.text:00000000004017CB                                         ; main+755↓j ...
.text:00000000004017CB                 add     rax, 0FFFFFFFFFFFFFFF8h
.text:00000000004017CF                 mov     r10d, [rax]
.text:00000000004017D2                 cmp     r9d, r10d
.text:00000000004017D5                 jl      short loc_4017CB
.text:00000000004017D7                 cmp     r10d, r9d
.text:00000000004017DA                 jl      short loc_4017E9
.text:00000000004017DC                 mov     r11d, cs:dword_605C04
.text:00000000004017E3                 cmp     r11d, [rax+4]
.text:00000000004017E7                 jl      short loc_4017CB
.text:00000000004017E9
.text:00000000004017E9 loc_4017E9:                             ; CODE XREF: main+73C↑j
.text:00000000004017E9                                         ; main+749↑j ...
.text:00000000004017E9                 cmp     rbx, rax
.text:00000000004017EC                 jb      loc_401754
.text:00000000004017F2                 mov     rdi, rbx
.text:00000000004017F5                 mov     rdx, r15
.text:00000000004017F8                 call    _ZSt16__introsort_loopIPSt4pairIiiElEvT_S3_T0_ ; std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)
.text:00000000004017FD                 mov     rsi, rbx
.text:0000000000401800                 sub     rbx, r13
.text:0000000000401803                 sar     rbx, 3
.text:0000000000401807                 cmp     rbx, 10h
.text:000000000040180B                 jg      loc_4015D2
.text:0000000000401811                 mov     rcx, r12
.text:0000000000401814                 mov     r15d, offset unk_605C80
.text:000000000040181A                 mov     r12d, [rsp+80h+var_40]
.text:000000000040181F                 mov     ebx, 1
.text:0000000000401824
.text:0000000000401824 loc_401824:                             ; CODE XREF: main+A44↓j
.text:0000000000401824                                         ; main+BCB↓j
.text:0000000000401824                 cmp     r13, r15
.text:0000000000401827                 jz      loc_401A36
.text:000000000040182D                 mov     edi, offset dword_605C08
.text:0000000000401832                 mov     r9, r13
.text:0000000000401835                 mov     [rsp+80h+var_80], rcx
.text:0000000000401839                 mov     [rsp+80h+var_40], r12d
.text:000000000040183E
.text:000000000040183E loc_40183E:                             ; CODE XREF: main+9A2↓j
.text:000000000040183E                 mov     edx, cs:v
.text:0000000000401844                 mov     eax, [rdi]
.text:0000000000401846                 cmp     eax, edx
.text:0000000000401848                 mov     ebx, [rdi+4]
.text:000000000040184B                 jl      short loc_401861
.text:000000000040184D                 cmp     edx, eax
.text:000000000040184F                 jl      loc_4019C8
.text:0000000000401855                 cmp     ebx, cs:dword_605C04
.text:000000000040185B                 jge     loc_4019C8
.text:0000000000401861
.text:0000000000401861 loc_401861:                             ; CODE XREF: main+7CB↑j
.text:0000000000401861                 mov     rsi, rdi
.text:0000000000401864                 lea     rcx, [r9+8]
.text:0000000000401868                 sub     rsi, r13
.text:000000000040186B                 lea     rdx, [rdi+8]
.text:000000000040186F                 sar     rsi, 3
.text:0000000000401873                 test    rsi, rsi
.text:0000000000401876                 jle     loc_4019BA
.text:000000000040187C                 cmp     rdi, r9
.text:000000000040187F                 jbe     short loc_401894
.text:0000000000401881                 mov     r10, rdi
.text:0000000000401884                 lea     r8, ds:0FFFFFFFFFFFFFFFCh[rsi*8]
.text:000000000040188C                 sub     r10, r9
.text:000000000040188F                 cmp     r8, r10
.text:0000000000401892                 jl      short loc_4018B4
.text:0000000000401894
.text:0000000000401894 loc_401894:                             ; CODE XREF: main+7FF↑j
.text:0000000000401894                 cmp     r9, rdi
.text:0000000000401897                 jbe     loc_40193E
.text:000000000040189D                 mov     r10, r9
.text:00000000004018A0                 lea     r8, ds:0FFFFFFFFFFFFFFFCh[rsi*8]
.text:00000000004018A8                 sub     r10, rdi
.text:00000000004018AB                 cmp     r10, r8
.text:00000000004018AE                 jle     loc_40193E
.text:00000000004018B4
.text:00000000004018B4 loc_4018B4:                             ; CODE XREF: main+812↑j
.text:00000000004018B4                 add     r9, 4
.text:00000000004018B8                 lea     r11, [rdi+4]
.text:00000000004018BC                 cmp     r11, r9
.text:00000000004018BF                 jbe     short loc_4018CC
.text:00000000004018C1                 mov     r10, r11
.text:00000000004018C4                 sub     r10, r9
.text:00000000004018C7                 cmp     r8, r10
.text:00000000004018CA                 jl      short loc_4018D9
.text:00000000004018CC
.text:00000000004018CC loc_4018CC:                             ; CODE XREF: main+83F↑j
.text:00000000004018CC                 cmp     r9, r11
.text:00000000004018CF                 jbe     short loc_40193E
.text:00000000004018D1                 sub     r9, r11
.text:00000000004018D4                 cmp     r9, r8
.text:00000000004018D7                 jle     short loc_40193E
.text:00000000004018D9
.text:00000000004018D9 loc_4018D9:                             ; CODE XREF: main+84A↑j
.text:00000000004018D9                 mov     r8, rsi
.text:00000000004018DC                 mov     r12d, 1
.text:00000000004018E2                 shr     r8, 3Fh
.text:00000000004018E6                 mov     r9, r14
.text:00000000004018E9                 add     r8, rsi
.text:00000000004018EC                 mov     r10, rdi
.text:00000000004018EF                 sar     r8, 1
.text:00000000004018F2                 mov     r11, rdx
.text:00000000004018F5                 test    r8, r8
.text:00000000004018F8                 jbe     short loc_401932
.text:00000000004018FA
.text:00000000004018FA loc_4018FA:                             ; CODE XREF: main+8A8↓j
.text:00000000004018FA                 mov     r12d, [r10-8]
.text:00000000004018FE                 inc     r9
.text:0000000000401901                 mov     [r11-8], r12d
.text:0000000000401905                 mov     r12d, [r10-4]
.text:0000000000401909                 mov     [r11-4], r12d
.text:000000000040190D                 mov     r12d, [r10-10h]
.text:0000000000401911                 mov     [r11-10h], r12d
.text:0000000000401915                 mov     r12d, [r10-0Ch]
.text:0000000000401919                 add     r10, 0FFFFFFFFFFFFFFF0h
.text:000000000040191D                 mov     [r11-0Ch], r12d
.text:0000000000401921                 add     r11, 0FFFFFFFFFFFFFFF0h
.text:0000000000401925                 cmp     r9, r8
.text:0000000000401928                 jb      short loc_4018FA
.text:000000000040192A                 lea     r12, ds:1[r9*2]
.text:0000000000401932
.text:0000000000401932 loc_401932:                             ; CODE XREF: main+878↑j
.text:0000000000401932                 lea     r8, [r12-1]
.text:0000000000401937                 cmp     rsi, r8
.text:000000000040193A                 ja      short loc_4019A1
.text:000000000040193C                 jmp     short loc_4019BA
.text:000000000040193E ; ---------------------------------------------------------------------------
.text:000000000040193E
.text:000000000040193E loc_40193E:                             ; CODE XREF: main+817↑j
.text:000000000040193E                                         ; main+82E↑j ...
.text:000000000040193E                 mov     r8, rsi
.text:0000000000401941                 mov     r12d, 1
.text:0000000000401947                 shr     r8, 3Fh
.text:000000000040194B                 mov     r9, r14
.text:000000000040194E                 add     r8, rsi
.text:0000000000401951                 mov     r10, rdi
.text:0000000000401954                 sar     r8, 1
.text:0000000000401957                 mov     r11, rdx
.text:000000000040195A                 test    r8, r8
.text:000000000040195D                 jbe     short loc_401997
.text:000000000040195F
.text:000000000040195F loc_40195F:                             ; CODE XREF: main+90D↓j
.text:000000000040195F                 mov     r12d, [r10-8]
.text:0000000000401963                 inc     r9
.text:0000000000401966                 mov     [r11-8], r12d
.text:000000000040196A                 mov     r12d, [r10-4]
.text:000000000040196E                 mov     [r11-4], r12d
.text:0000000000401972                 mov     r12d, [r10-10h]
.text:0000000000401976                 mov     [r11-10h], r12d
.text:000000000040197A                 mov     r12d, [r10-0Ch]
.text:000000000040197E                 add     r10, 0FFFFFFFFFFFFFFF0h
.text:0000000000401982                 mov     [r11-0Ch], r12d
.text:0000000000401986                 add     r11, 0FFFFFFFFFFFFFFF0h
.text:000000000040198A                 cmp     r9, r8
.text:000000000040198D                 jb      short loc_40195F
.text:000000000040198F                 lea     r12, ds:1[r9*2]
.text:0000000000401997
.text:0000000000401997 loc_401997:                             ; CODE XREF: main+8DD↑j
.text:0000000000401997                 lea     r8, [r12-1]
.text:000000000040199C                 cmp     rsi, r8
.text:000000000040199F                 jbe     short loc_4019BA
.text:00000000004019A1
.text:00000000004019A1 loc_4019A1:                             ; CODE XREF: main+8BA↑j
.text:00000000004019A1                 shl     r12, 3
.text:00000000004019A5                 neg     r12
.text:00000000004019A8                 mov     esi, [r12+rdi]
.text:00000000004019AC                 mov     r8d, [r12+rdx-4]
.text:00000000004019B1                 mov     [r12+rdx], esi
.text:00000000004019B5                 mov     [r12+rdx+4], r8d
.text:00000000004019BA
.text:00000000004019BA loc_4019BA:                             ; CODE XREF: main+7F6↑j
.text:00000000004019BA                                         ; main+8BC↑j ...
.text:00000000004019BA                 mov     cs:v, eax
.text:00000000004019C0                 mov     cs:dword_605C04, ebx
.text:00000000004019C6                 jmp     short loc_401A19
.text:00000000004019C8 ; ---------------------------------------------------------------------------
.text:00000000004019C8
.text:00000000004019C8 loc_4019C8:                             ; CODE XREF: main+7CF↑j
.text:00000000004019C8                                         ; main+7DB↑j
.text:00000000004019C8                 mov     edx, [r9]
.text:00000000004019CB                 mov     rcx, rdi
.text:00000000004019CE                 mov     rsi, r9
.text:00000000004019D1                 cmp     eax, edx
.text:00000000004019D3                 jl      short loc_4019EE
.text:00000000004019D5                 cmp     edx, eax
.text:00000000004019D7                 jl      short loc_4019DF
.text:00000000004019D9                 cmp     ebx, [r9+4]
.text:00000000004019DD                 jl      short loc_4019EE
.text:00000000004019DF
.text:00000000004019DF loc_4019DF:                             ; CODE XREF: main+957↑j
.text:00000000004019DF                 mov     [rdi], eax
.text:00000000004019E1                 lea     rcx, [r9+8]
.text:00000000004019E5                 mov     [rdi+4], ebx
.text:00000000004019E8                 lea     rdx, [rdi+8]
.text:00000000004019EC                 jmp     short loc_401A19
.text:00000000004019EE ; ---------------------------------------------------------------------------
.text:00000000004019EE
.text:00000000004019EE loc_4019EE:                             ; CODE XREF: main+953↑j
.text:00000000004019EE                                         ; main+95D↑j ...
.text:00000000004019EE                 mov     [rcx], edx
.text:00000000004019F0                 mov     edx, [rsi+4]
.text:00000000004019F3                 mov     [rcx+4], edx
.text:00000000004019F6                 mov     rcx, rsi
.text:00000000004019F9                 add     rsi, 0FFFFFFFFFFFFFFF8h
.text:00000000004019FD                 mov     edx, [rsi]
.text:00000000004019FF                 cmp     eax, edx
.text:0000000000401A01                 jl      short loc_4019EE
.text:0000000000401A03                 cmp     edx, eax
.text:0000000000401A05                 jl      short loc_401A0C
.text:0000000000401A07                 cmp     ebx, [rsi+4]
.text:0000000000401A0A                 jl      short loc_4019EE
.text:0000000000401A0C
.text:0000000000401A0C loc_401A0C:                             ; CODE XREF: main+985↑j
.text:0000000000401A0C                 mov     [rcx], eax
.text:0000000000401A0E                 lea     rdx, [rdi+8]
.text:0000000000401A12                 mov     [rcx+4], ebx
.text:0000000000401A15                 lea     rcx, [r9+8]
.text:0000000000401A19
.text:0000000000401A19 loc_401A19:                             ; CODE XREF: main+946↑j
.text:0000000000401A19                                         ; main+96C↑j
.text:0000000000401A19                 mov     r9, rcx
.text:0000000000401A1C                 mov     rdi, rdx
.text:0000000000401A1F                 cmp     rdx, r15
.text:0000000000401A22                 jnz     loc_40183E
.text:0000000000401A28                 mov     rcx, [rsp+80h+var_80]
.text:0000000000401A2C                 mov     ebx, 1
.text:0000000000401A31                 mov     r12d, [rsp+80h+var_40]
.text:0000000000401A36
.text:0000000000401A36 loc_401A36:                             ; CODE XREF: main+7A7↑j
.text:0000000000401A36                 mov     rax, r15
.text:0000000000401A39                 cmp     r15, rcx
.text:0000000000401A3C                 jz      loc_4011A6
.text:0000000000401A42
.text:0000000000401A42 loc_401A42:                             ; CODE XREF: main+A16↓j
.text:0000000000401A42                 mov     r11d, [rax]
.text:0000000000401A45                 mov     r8, rax
.text:0000000000401A48                 mov     edx, [rax-8]
.text:0000000000401A4B                 lea     r9, [rax-8]
.text:0000000000401A4F                 mov     r10d, [rax+4]
.text:0000000000401A53                 cmp     r11d, edx
.text:0000000000401A56                 jl      short loc_401A63
.text:0000000000401A58                 cmp     edx, r11d
.text:0000000000401A5B                 jl      short loc_401A88
.text:0000000000401A5D                 cmp     r10d, [rax-4]
.text:0000000000401A61                 jge     short loc_401A88
.text:0000000000401A63
.text:0000000000401A63 loc_401A63:                             ; CODE XREF: main+9D6↑j
.text:0000000000401A63                                         ; main+9FB↓j ...
.text:0000000000401A63                 mov     [r8], edx
.text:0000000000401A66                 mov     edx, [r9+4]
.text:0000000000401A6A                 mov     [r8+4], edx
.text:0000000000401A6E                 mov     r8, r9
.text:0000000000401A71                 add     r9, 0FFFFFFFFFFFFFFF8h
.text:0000000000401A75                 mov     edx, [r9]
.text:0000000000401A78                 cmp     r11d, edx
.text:0000000000401A7B                 jl      short loc_401A63
.text:0000000000401A7D                 cmp     edx, r11d
.text:0000000000401A80                 jl      short loc_401A88
.text:0000000000401A82                 cmp     r10d, [r9+4]
.text:0000000000401A86                 jl      short loc_401A63
.text:0000000000401A88
.text:0000000000401A88 loc_401A88:                             ; CODE XREF: main+9DB↑j
.text:0000000000401A88                                         ; main+9E1↑j ...
.text:0000000000401A88                 add     rax, 8
.text:0000000000401A8C                 mov     [r8], r11d
.text:0000000000401A8F                 cmp     rax, rcx
.text:0000000000401A92                 mov     [r8+4], r10d
.text:0000000000401A96                 jnz     short loc_401A42
.text:0000000000401A98                 jmp     loc_4011A6
.text:0000000000401A9D ; ---------------------------------------------------------------------------
.text:0000000000401A9D
.text:0000000000401A9D loc_401A9D:                             ; CODE XREF: main+55F↑j
.text:0000000000401A9D                 mov     rcx, r12
.text:0000000000401AA0                 mov     r15d, offset unk_605C80
.text:0000000000401AA6                 mov     r12d, [rsp+80h+var_40]
.text:0000000000401AAB                 mov     ebx, 1
.text:0000000000401AB0                 cmp     rax, 2
.text:0000000000401AB4                 jge     loc_401C50
.text:0000000000401ABA
.text:0000000000401ABA loc_401ABA:                             ; CODE XREF: main+D4C↓j
.text:0000000000401ABA                 mov     rdx, rsi
.text:0000000000401ABD                 sub     rdx, r13
.text:0000000000401AC0                 cmp     rax, 1
.text:0000000000401AC4                 jle     loc_401824
.text:0000000000401ACA                 mov     [rsp+80h+var_40], r12d
.text:0000000000401ACF
.text:0000000000401ACF loc_401ACF:                             ; CODE XREF: main+BBA↓j
.text:0000000000401ACF                 add     rdx, 0FFFFFFFFFFFFFFF8h
.text:0000000000401AD3                 xor     eax, eax
.text:0000000000401AD5                 mov     r15, rdx
.text:0000000000401AD8                 add     rsi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401ADC                 sar     r15, 3
.text:0000000000401AE0                 test    r15, r15
.text:0000000000401AE3                 mov     r8d, cs:v
.text:0000000000401AEA                 cmovle  eax, ebx
.text:0000000000401AED                 mov     r9d, [rsi]
.text:0000000000401AF0                 mov     [rsi], r8d
.text:0000000000401AF3                 mov     r10d, cs:dword_605C04
.text:0000000000401AFA                 mov     r11d, [rsi+4]
.text:0000000000401AFE                 lea     rax, [r15+rax-1]
.text:0000000000401B03                 sar     rax, 1
.text:0000000000401B06                 mov     [rsi+4], r10d
.text:0000000000401B0A                 mov     r10, r14
.text:0000000000401B0D                 mov     r8, r10
.text:0000000000401B10                 test    rax, rax
.text:0000000000401B13                 jle     short loc_401B74
.text:0000000000401B15
.text:0000000000401B15 loc_401B15:                             ; CODE XREF: main+AF2↓j
.text:0000000000401B15                 lea     r8, ds:2[r8*2]
.text:0000000000401B1D                 mov     edi, dword ptr ds:dtor_idx_6533[r8*8]
.text:0000000000401B25                 mov     r12d, ds:v[r8*8]
.text:0000000000401B2D                 cmp     r12d, edi
.text:0000000000401B30                 jl      short loc_401B49
.text:0000000000401B32                 cmp     edi, r12d
.text:0000000000401B35                 jl      short loc_401B4C
.text:0000000000401B37                 mov     edi, ds:dword_605C04[r8*8]
.text:0000000000401B3F                 cmp     edi, dword ptr ds:dtor_idx_6533+4[r8*8]
.text:0000000000401B47                 jge     short loc_401B4C
.text:0000000000401B49
.text:0000000000401B49 loc_401B49:                             ; CODE XREF: main+AB0↑j
.text:0000000000401B49                 dec     r8
.text:0000000000401B4C
.text:0000000000401B4C loc_401B4C:                             ; CODE XREF: main+AB5↑j
.text:0000000000401B4C                                         ; main+AC7↑j
.text:0000000000401B4C                 cmp     r8, rax
.text:0000000000401B4F                 mov     edi, ds:v[r8*8]
.text:0000000000401B57                 mov     ds:v[r10*8], edi
.text:0000000000401B5F                 mov     r12d, ds:dword_605C04[r8*8]
.text:0000000000401B67                 mov     ds:dword_605C04[r10*8], r12d
.text:0000000000401B6F                 mov     r10, r8
.text:0000000000401B72                 jl      short loc_401B15
.text:0000000000401B74
.text:0000000000401B74 loc_401B74:                             ; CODE XREF: main+A93↑j
.text:0000000000401B74                 test    r15, 1
.text:0000000000401B7B                 jnz     short loc_401BBD
.text:0000000000401B7D                 lea     rax, [r15-2]
.text:0000000000401B81                 shr     rax, 3Fh
.text:0000000000401B85                 lea     rax, [r15+rax-2]
.text:0000000000401B8A                 sar     rax, 1
.text:0000000000401B8D                 cmp     r8, rax
.text:0000000000401B90                 jnz     short loc_401BBD
.text:0000000000401B92                 lea     rdi, ds:2[r8*2]
.text:0000000000401B9A                 mov     eax, dword ptr ds:dtor_idx_6533[rdi*8]
.text:0000000000401BA1                 mov     ds:v[r10*8], eax
.text:0000000000401BA9                 mov     r8d, dword ptr ds:dtor_idx_6533+4[rdi*8]
.text:0000000000401BB1                 mov     ds:dword_605C04[r10*8], r8d
.text:0000000000401BB9                 lea     r10, [rdi-1]
.text:0000000000401BBD
.text:0000000000401BBD loc_401BBD:                             ; CODE XREF: main+AFB↑j
.text:0000000000401BBD                                         ; main+B10↑j
.text:0000000000401BBD                 lea     rax, [r10-1]
.text:0000000000401BC1                 shr     rax, 3Fh
.text:0000000000401BC5                 lea     rax, [r10+rax-1]
.text:0000000000401BCA                 sar     rax, 1
.text:0000000000401BCD                 test    r10, r10
.text:0000000000401BD0                 jle     short loc_401C26
.text:0000000000401BD2
.text:0000000000401BD2 loc_401BD2:                             ; CODE XREF: main+BA4↓j
.text:0000000000401BD2                 mov     r8d, ds:v[rax*8]
.text:0000000000401BDA                 cmp     r8d, r9d
.text:0000000000401BDD                 jl      short loc_401BEE
.text:0000000000401BDF                 cmp     r9d, r8d
.text:0000000000401BE2                 jl      short loc_401C26
.text:0000000000401BE4                 cmp     r11d, ds:dword_605C04[rax*8]
.text:0000000000401BEC                 jle     short loc_401C26
.text:0000000000401BEE
.text:0000000000401BEE loc_401BEE:                             ; CODE XREF: main+B5D↑j
.text:0000000000401BEE                 mov     r8d, ds:v[rax*8]
.text:0000000000401BF6                 mov     ds:v[r10*8], r8d
.text:0000000000401BFE                 mov     r8d, ds:dword_605C04[rax*8]
.text:0000000000401C06                 mov     ds:dword_605C04[r10*8], r8d
.text:0000000000401C0E                 lea     r8, [rax-1]
.text:0000000000401C12                 shr     r8, 3Fh
.text:0000000000401C16                 mov     r10, rax
.text:0000000000401C19                 lea     rax, [rax+r8-1]
.text:0000000000401C1E                 sar     rax, 1
.text:0000000000401C21                 test    r10, r10
.text:0000000000401C24                 jg      short loc_401BD2
.text:0000000000401C26
.text:0000000000401C26 loc_401C26:                             ; CODE XREF: main+B50↑j
.text:0000000000401C26                                         ; main+B62↑j ...
.text:0000000000401C26                 mov     ds:v[r10*8], r9d
.text:0000000000401C2E                 cmp     r15, 1
.text:0000000000401C32                 mov     ds:dword_605C04[r10*8], r11d
.text:0000000000401C3A                 jg      loc_401ACF
.text:0000000000401C40                 mov     r12d, [rsp+80h+var_40]
.text:0000000000401C45                 mov     r15d, offset unk_605C80
.text:0000000000401C4B                 jmp     loc_401824
.text:0000000000401C50 ; ---------------------------------------------------------------------------
.text:0000000000401C50
.text:0000000000401C50 loc_401C50:                             ; CODE XREF: main+A34↑j
.text:0000000000401C50                 xor     r8d, r8d
.text:0000000000401C53                 test    rax, rax
.text:0000000000401C56                 lea     r9, [rax-2]
.text:0000000000401C5A                 mov     rdi, rax
.text:0000000000401C5D                 cmovle  r8d, ebx
.text:0000000000401C61                 and     rdi, 1
.text:0000000000401C65                 shr     r9, 3Fh
.text:0000000000401C69                 mov     [rsp+80h+var_40], r12d
.text:0000000000401C6E                 lea     r9, [rax+r9-2]
.text:0000000000401C73                 sar     r9, 1
.text:0000000000401C76                 lea     r8, [rax+r8-1]
.text:0000000000401C7B                 sar     r8, 1
.text:0000000000401C7E                 mov     rdx, r9
.text:0000000000401C81                 jmp     short loc_401C86
.text:0000000000401C83 ; ---------------------------------------------------------------------------
.text:0000000000401C83
.text:0000000000401C83 loc_401C83:                             ; CODE XREF: main+D33↓j
.text:0000000000401C83                 dec     r9
.text:0000000000401C86
.text:0000000000401C86 loc_401C86:                             ; CODE XREF: main+C01↑j
.text:0000000000401C86                 mov     r14d, ds:v[r9*8]
.text:0000000000401C8E                 mov     r10, r9
.text:0000000000401C91                 mov     r11d, ds:dword_605C04[r9*8]
.text:0000000000401C99                 mov     rbx, r9
.text:0000000000401C9C                 cmp     r9, r8
.text:0000000000401C9F                 jge     short loc_401D00
.text:0000000000401CA1
.text:0000000000401CA1 loc_401CA1:                             ; CODE XREF: main+C7E↓j
.text:0000000000401CA1                 lea     rbx, ds:2[rbx*2]
.text:0000000000401CA9                 mov     r15d, dword ptr ds:dtor_idx_6533[rbx*8]
.text:0000000000401CB1                 mov     r12d, ds:v[rbx*8]
.text:0000000000401CB9                 cmp     r12d, r15d
.text:0000000000401CBC                 jl      short loc_401CD5
.text:0000000000401CBE                 cmp     r15d, r12d
.text:0000000000401CC1                 jl      short loc_401CD8
.text:0000000000401CC3                 mov     r15d, ds:dword_605C04[rbx*8]
.text:0000000000401CCB                 cmp     r15d, dword ptr ds:dtor_idx_6533+4[rbx*8]
.text:0000000000401CD3                 jge     short loc_401CD8
.text:0000000000401CD5
.text:0000000000401CD5 loc_401CD5:                             ; CODE XREF: main+C3C↑j
.text:0000000000401CD5                 dec     rbx
.text:0000000000401CD8
.text:0000000000401CD8 loc_401CD8:                             ; CODE XREF: main+C41↑j
.text:0000000000401CD8                                         ; main+C53↑j
.text:0000000000401CD8                 cmp     rbx, r8
.text:0000000000401CDB                 mov     r15d, ds:v[rbx*8]
.text:0000000000401CE3                 mov     ds:v[r10*8], r15d
.text:0000000000401CEB                 mov     r15d, ds:dword_605C04[rbx*8]
.text:0000000000401CF3                 mov     ds:dword_605C04[r10*8], r15d
.text:0000000000401CFB                 mov     r10, rbx
.text:0000000000401CFE                 jl      short loc_401CA1
.text:0000000000401D00
.text:0000000000401D00 loc_401D00:                             ; CODE XREF: main+C1F↑j
.text:0000000000401D00                 test    rdi, rdi
.text:0000000000401D03                 jnz     short loc_401D37
.text:0000000000401D05                 cmp     rbx, rdx
.text:0000000000401D08                 jnz     short loc_401D37
.text:0000000000401D0A                 lea     r12, ds:2[rbx*2]
.text:0000000000401D12                 mov     ebx, dword ptr ds:dtor_idx_6533[r12*8]
.text:0000000000401D1A                 mov     ds:v[r10*8], ebx
.text:0000000000401D22                 mov     r15d, dword ptr ds:dtor_idx_6533+4[r12*8]
.text:0000000000401D2A                 mov     ds:dword_605C04[r10*8], r15d
.text:0000000000401D32                 lea     r10, [r12-1]
.text:0000000000401D37
.text:0000000000401D37 loc_401D37:                             ; CODE XREF: main+C83↑j
.text:0000000000401D37                                         ; main+C88↑j
.text:0000000000401D37                 lea     rbx, [r10-1]
.text:0000000000401D3B                 shr     rbx, 3Fh
.text:0000000000401D3F                 lea     rbx, [r10+rbx-1]
.text:0000000000401D44                 sar     rbx, 1
.text:0000000000401D47                 cmp     r10, r9
.text:0000000000401D4A                 jle     short loc_401DA0
.text:0000000000401D4C
.text:0000000000401D4C loc_401D4C:                             ; CODE XREF: main+D1E↓j
.text:0000000000401D4C                 mov     r15d, ds:v[rbx*8]
.text:0000000000401D54                 cmp     r15d, r14d
.text:0000000000401D57                 jl      short loc_401D68
.text:0000000000401D59                 cmp     r14d, r15d
.text:0000000000401D5C                 jl      short loc_401DA0
.text:0000000000401D5E                 cmp     r11d, ds:dword_605C04[rbx*8]
.text:0000000000401D66                 jle     short loc_401DA0
.text:0000000000401D68
.text:0000000000401D68 loc_401D68:                             ; CODE XREF: main+CD7↑j
.text:0000000000401D68                 mov     r15d, ds:v[rbx*8]
.text:0000000000401D70                 mov     ds:v[r10*8], r15d
.text:0000000000401D78                 mov     r15d, ds:dword_605C04[rbx*8]
.text:0000000000401D80                 mov     ds:dword_605C04[r10*8], r15d
.text:0000000000401D88                 lea     r15, [rbx-1]
.text:0000000000401D8C                 shr     r15, 3Fh
.text:0000000000401D90                 mov     r10, rbx
.text:0000000000401D93                 lea     rbx, [rbx+r15-1]
.text:0000000000401D98                 sar     rbx, 1
.text:0000000000401D9B                 cmp     r10, r9
.text:0000000000401D9E                 jg      short loc_401D4C
.text:0000000000401DA0
.text:0000000000401DA0 loc_401DA0:                             ; CODE XREF: main+CCA↑j
.text:0000000000401DA0                                         ; main+CDC↑j ...
.text:0000000000401DA0                 mov     ds:v[r10*8], r14d
.text:0000000000401DA8                 test    r9, r9
.text:0000000000401DAB                 mov     ds:dword_605C04[r10*8], r11d
.text:0000000000401DB3                 jnz     loc_401C83
.text:0000000000401DB9                 mov     r12d, [rsp+80h+var_40]
.text:0000000000401DBE                 xor     r14d, r14d
.text:0000000000401DC1                 mov     r15d, offset unk_605C80
.text:0000000000401DC7                 mov     ebx, 1
.text:0000000000401DCC                 jmp     loc_401ABA
.text:0000000000401DD1 ; ---------------------------------------------------------------------------
.text:0000000000401DD1
.text:0000000000401DD1 loc_401DD1:                             ; CODE XREF: main+541↑j
.text:0000000000401DD1                 mov     r8d, offset dword_605C08
.text:0000000000401DD7                 mov     r10, r13
.text:0000000000401DDA                 mov     r9, r8
.text:0000000000401DDD                 cmp     r9, rcx
.text:0000000000401DE0                 jz      loc_4011A6
.text:0000000000401DE6                 mov     [rsp+80h+var_40], r12d
.text:0000000000401DEB
.text:0000000000401DEB loc_401DEB:                             ; CODE XREF: main+F5A↓j
.text:0000000000401DEB                 mov     eax, [r8]
.text:0000000000401DEE                 mov     edx, cs:v
.text:0000000000401DF4                 cmp     eax, edx
.text:0000000000401DF6                 mov     esi, [r8+4]
.text:0000000000401DFA                 jl      short loc_401E10
.text:0000000000401DFC                 cmp     edx, eax
.text:0000000000401DFE                 jl      loc_401F77
.text:0000000000401E04                 cmp     esi, cs:dword_605C04
.text:0000000000401E0A                 jge     loc_401F77
.text:0000000000401E10
.text:0000000000401E10 loc_401E10:                             ; CODE XREF: main+D7A↑j
.text:0000000000401E10                 mov     rdi, r8
.text:0000000000401E13                 lea     rbx, [r10+8]
.text:0000000000401E17                 sub     rdi, r13
.text:0000000000401E1A                 lea     rdx, [r8+8]
.text:0000000000401E1E                 sar     rdi, 3
.text:0000000000401E22                 test    rdi, rdi
.text:0000000000401E25                 jle     loc_401F69
.text:0000000000401E2B                 cmp     r8, r10
.text:0000000000401E2E                 jbe     short loc_401E43
.text:0000000000401E30                 mov     r11, r8
.text:0000000000401E33                 lea     r9, ds:0FFFFFFFFFFFFFFFCh[rdi*8]
.text:0000000000401E3B                 sub     r11, r10
.text:0000000000401E3E                 cmp     r9, r11
.text:0000000000401E41                 jl      short loc_401E63
.text:0000000000401E43
.text:0000000000401E43 loc_401E43:                             ; CODE XREF: main+DAE↑j
.text:0000000000401E43                 cmp     r10, r8
.text:0000000000401E46                 jbe     loc_401EED
.text:0000000000401E4C                 mov     r11, r10
.text:0000000000401E4F                 lea     r9, ds:0FFFFFFFFFFFFFFFCh[rdi*8]
.text:0000000000401E57                 sub     r11, r8
.text:0000000000401E5A                 cmp     r11, r9
.text:0000000000401E5D                 jle     loc_401EED
.text:0000000000401E63
.text:0000000000401E63 loc_401E63:                             ; CODE XREF: main+DC1↑j
.text:0000000000401E63                 add     r10, 4
.text:0000000000401E67                 lea     r15, [r8+4]
.text:0000000000401E6B                 cmp     r15, r10
.text:0000000000401E6E                 jbe     short loc_401E7B
.text:0000000000401E70                 mov     r11, r15
.text:0000000000401E73                 sub     r11, r10
.text:0000000000401E76                 cmp     r9, r11
.text:0000000000401E79                 jl      short loc_401E88
.text:0000000000401E7B
.text:0000000000401E7B loc_401E7B:                             ; CODE XREF: main+DEE↑j
.text:0000000000401E7B                 cmp     r10, r15
.text:0000000000401E7E                 jbe     short loc_401EED
.text:0000000000401E80                 sub     r10, r15
.text:0000000000401E83                 cmp     r10, r9
.text:0000000000401E86                 jle     short loc_401EED
.text:0000000000401E88
.text:0000000000401E88 loc_401E88:                             ; CODE XREF: main+DF9↑j
.text:0000000000401E88                 mov     r9, rdi
.text:0000000000401E8B                 mov     r12d, 1
.text:0000000000401E91                 shr     r9, 3Fh
.text:0000000000401E95                 mov     r10, r14
.text:0000000000401E98                 add     r9, rdi
.text:0000000000401E9B                 mov     r11, r8
.text:0000000000401E9E                 sar     r9, 1
.text:0000000000401EA1                 mov     r15, rdx
.text:0000000000401EA4                 test    r9, r9
.text:0000000000401EA7                 jbe     short loc_401EE1
.text:0000000000401EA9
.text:0000000000401EA9 loc_401EA9:                             ; CODE XREF: main+E57↓j
.text:0000000000401EA9                 mov     r12d, [r11-8]
.text:0000000000401EAD                 inc     r10
.text:0000000000401EB0                 mov     [r15-8], r12d
.text:0000000000401EB4                 mov     r12d, [r11-4]
.text:0000000000401EB8                 mov     [r15-4], r12d
.text:0000000000401EBC                 mov     r12d, [r11-10h]
.text:0000000000401EC0                 mov     [r15-10h], r12d
.text:0000000000401EC4                 mov     r12d, [r11-0Ch]
.text:0000000000401EC8                 add     r11, 0FFFFFFFFFFFFFFF0h
.text:0000000000401ECC                 mov     [r15-0Ch], r12d
.text:0000000000401ED0                 add     r15, 0FFFFFFFFFFFFFFF0h
.text:0000000000401ED4                 cmp     r10, r9
.text:0000000000401ED7                 jb      short loc_401EA9
.text:0000000000401ED9                 lea     r12, ds:1[r10*2]
.text:0000000000401EE1
.text:0000000000401EE1 loc_401EE1:                             ; CODE XREF: main+E27↑j
.text:0000000000401EE1                 lea     r9, [r12-1]
.text:0000000000401EE6                 cmp     rdi, r9
.text:0000000000401EE9                 ja      short loc_401F50
.text:0000000000401EEB                 jmp     short loc_401F69
.text:0000000000401EED ; ---------------------------------------------------------------------------
.text:0000000000401EED
.text:0000000000401EED loc_401EED:                             ; CODE XREF: main+DC6↑j
.text:0000000000401EED                                         ; main+DDD↑j ...
.text:0000000000401EED                 mov     r9, rdi
.text:0000000000401EF0                 mov     r12d, 1
.text:0000000000401EF6                 shr     r9, 3Fh
.text:0000000000401EFA                 mov     r10, r14
.text:0000000000401EFD                 add     r9, rdi
.text:0000000000401F00                 mov     r11, r8
.text:0000000000401F03                 sar     r9, 1
.text:0000000000401F06                 mov     r15, rdx
.text:0000000000401F09                 test    r9, r9
.text:0000000000401F0C                 jbe     short loc_401F46
.text:0000000000401F0E
.text:0000000000401F0E loc_401F0E:                             ; CODE XREF: main+EBC↓j
.text:0000000000401F0E                 mov     r12d, [r11-8]
.text:0000000000401F12                 inc     r10
.text:0000000000401F15                 mov     [r15-8], r12d
.text:0000000000401F19                 mov     r12d, [r11-4]
.text:0000000000401F1D                 mov     [r15-4], r12d
.text:0000000000401F21                 mov     r12d, [r11-10h]
.text:0000000000401F25                 mov     [r15-10h], r12d
.text:0000000000401F29                 mov     r12d, [r11-0Ch]
.text:0000000000401F2D                 add     r11, 0FFFFFFFFFFFFFFF0h
.text:0000000000401F31                 mov     [r15-0Ch], r12d
.text:0000000000401F35                 add     r15, 0FFFFFFFFFFFFFFF0h
.text:0000000000401F39                 cmp     r10, r9
.text:0000000000401F3C                 jb      short loc_401F0E
.text:0000000000401F3E                 lea     r12, ds:1[r10*2]
.text:0000000000401F46
.text:0000000000401F46 loc_401F46:                             ; CODE XREF: main+E8C↑j
.text:0000000000401F46                 lea     r9, [r12-1]
.text:0000000000401F4B                 cmp     rdi, r9
.text:0000000000401F4E                 jbe     short loc_401F69
.text:0000000000401F50
.text:0000000000401F50 loc_401F50:                             ; CODE XREF: main+E69↑j
.text:0000000000401F50                 shl     r12, 3
.text:0000000000401F54                 neg     r12
.text:0000000000401F57                 mov     r8d, [r12+r8]
.text:0000000000401F5B                 mov     r9d, [r12+rdx-4]
.text:0000000000401F60                 mov     [r12+rdx], r8d
.text:0000000000401F64                 mov     [r12+rdx+4], r9d
.text:0000000000401F69
.text:0000000000401F69 loc_401F69:                             ; CODE XREF: main+DA5↑j
.text:0000000000401F69                                         ; main+E6B↑j ...
.text:0000000000401F69                 mov     cs:v, eax
.text:0000000000401F6F                 mov     cs:dword_605C04, esi
.text:0000000000401F75                 jmp     short loc_401FD1
.text:0000000000401F77 ; ---------------------------------------------------------------------------
.text:0000000000401F77
.text:0000000000401F77 loc_401F77:                             ; CODE XREF: main+D7E↑j
.text:0000000000401F77                                         ; main+D8A↑j
.text:0000000000401F77                 mov     edx, [r10]
.text:0000000000401F7A                 mov     r9, r8
.text:0000000000401F7D                 mov     r11, r10
.text:0000000000401F80                 cmp     eax, edx
.text:0000000000401F82                 jl      short loc_401F9F
.text:0000000000401F84                 cmp     edx, eax
.text:0000000000401F86                 jl      short loc_401F8E
.text:0000000000401F88                 cmp     esi, [r10+4]
.text:0000000000401F8C                 jl      short loc_401F9F
.text:0000000000401F8E
.text:0000000000401F8E loc_401F8E:                             ; CODE XREF: main+F06↑j
.text:0000000000401F8E                 mov     [r8], eax
.text:0000000000401F91                 lea     rbx, [r10+8]
.text:0000000000401F95                 mov     [r8+4], esi
.text:0000000000401F99                 lea     rdx, [r8+8]
.text:0000000000401F9D                 jmp     short loc_401FD1
.text:0000000000401F9F ; ---------------------------------------------------------------------------
.text:0000000000401F9F
.text:0000000000401F9F loc_401F9F:                             ; CODE XREF: main+F02↑j
.text:0000000000401F9F                                         ; main+F0C↑j ...
.text:0000000000401F9F                 mov     [r9], edx
.text:0000000000401FA2                 mov     edx, [r11+4]
.text:0000000000401FA6                 mov     [r9+4], edx
.text:0000000000401FAA                 mov     r9, r11
.text:0000000000401FAD                 add     r11, 0FFFFFFFFFFFFFFF8h
.text:0000000000401FB1                 mov     edx, [r11]
.text:0000000000401FB4                 cmp     eax, edx
.text:0000000000401FB6                 jl      short loc_401F9F
.text:0000000000401FB8                 cmp     edx, eax
.text:0000000000401FBA                 jl      short loc_401FC2
.text:0000000000401FBC                 cmp     esi, [r11+4]
.text:0000000000401FC0                 jl      short loc_401F9F
.text:0000000000401FC2
.text:0000000000401FC2 loc_401FC2:                             ; CODE XREF: main+F3A↑j
.text:0000000000401FC2                 mov     [r9], eax
.text:0000000000401FC5                 lea     rbx, [r10+8]
.text:0000000000401FC9                 mov     [r9+4], esi
.text:0000000000401FCD                 lea     rdx, [r8+8]
.text:0000000000401FD1
.text:0000000000401FD1 loc_401FD1:                             ; CODE XREF: main+EF5↑j
.text:0000000000401FD1                                         ; main+F1D↑j
.text:0000000000401FD1                 mov     r10, rbx
.text:0000000000401FD4                 mov     r8, rdx
.text:0000000000401FD7                 cmp     rdx, rcx
.text:0000000000401FDA                 jnz     loc_401DEB
.text:0000000000401FE0                 mov     r12d, [rsp+80h+var_40]
.text:0000000000401FE5                 mov     r15d, offset unk_605C80
.text:0000000000401FEB                 mov     ebx, 1
.text:0000000000401FF0                 jmp     loc_4011A6
.text:0000000000401FF5 ; ---------------------------------------------------------------------------
.text:0000000000401FF5
.text:0000000000401FF5 loc_401FF5:                             ; CODE XREF: main+AF↑j
.text:0000000000401FF5                 movsxd  rax, eax
.text:0000000000401FF8                 jmp     loc_401198
.text:0000000000401FF8 main            endp
.text:0000000000401FF8
.text:0000000000401FF8 ; ---------------------------------------------------------------------------
.text:0000000000401FFD                 align 20h
.text:0000000000401FFD ; } // starts at 401080
.text:0000000000402000
.text:0000000000402000 ; =============== S U B R O U T I N E =======================================
.text:0000000000402000
.text:0000000000402000
.text:0000000000402000 __sti__$E       proc near               ; CODE XREF: __libc_csu_init+59↓p
.text:0000000000402000                                         ; DATA XREF: .init_array:__init_array_start↓o
.text:0000000000402000 ; __unwind { // ___gxx_personality_v0
.text:0000000000402000                 push    r14
.text:0000000000402002                 mov     edi, offset _ZSt8__ioinit ; this
.text:0000000000402007                 call    __ZNSt8ios_base4InitC1Ev ; std::ios_base::Init::Init(void)
.text:000000000040200C                 mov     edi, offset __ZNSt8ios_base4InitD1Ev ; lpfunc
.text:0000000000402011                 mov     esi, offset _ZSt8__ioinit ; obj
.text:0000000000402016                 mov     edx, offset __dso_handle ; lpdso_handle
.text:000000000040201B                 call    ___cxa_atexit
.text:0000000000402020                 pxor    xmm0, xmm0
.text:0000000000402024                 movq    cs:qword_1548678, xmm0
.text:000000000040202C                 movaps  cs:xmmword_1548680, xmm0
.text:0000000000402033                 movq    cs:qword_1548690, xmm0
.text:000000000040203B                 mov     edi, offset _ZNSt3setISt4pairIiiESt4lessIS1_ESaIS1_EED1Ev ; lpfunc
.text:0000000000402040                 mov     esi, offset all ; obj
.text:0000000000402045                 mov     edx, offset __dso_handle ; lpdso_handle
.text:000000000040204A                 xor     r14d, r14d
.text:000000000040204D                 mov     cs:qword_1548698, r14
.text:0000000000402054                 mov     dword ptr cs:qword_1548678, 0
.text:000000000040205E                 mov     qword ptr cs:xmmword_1548680, r14
.text:0000000000402065                 mov     qword ptr cs:xmmword_1548680+8, offset qword_1548678
.text:0000000000402070                 mov     cs:qword_1548690, offset qword_1548678
.text:000000000040207B                 call    ___cxa_atexit
.text:0000000000402080                 xor     dl, dl
.text:0000000000402082                 xor     eax, eax
.text:0000000000402084
.text:0000000000402084 loc_402084:                             ; CODE XREF: __sti__$E+A9↓j
.text:0000000000402084                 inc     dl
.text:0000000000402086                 mov     ds:v[r14], eax
.text:000000000040208D                 mov     ds:dword_605C04[r14], eax
.text:0000000000402094                 mov     ds:dword_605C08[r14], eax
.text:000000000040209B                 mov     ds:dword_605C0C[r14], eax
.text:00000000004020A2                 add     r14, 10h
.text:00000000004020A6                 cmp     dl, 64h ; 'd'
.text:00000000004020A9                 jb      short loc_402084
.text:00000000004020AB                 pop     r14
.text:00000000004020AD                 retn
.text:00000000004020AD __sti__$E       endp
.text:00000000004020AD
.text:00000000004020AD ; ---------------------------------------------------------------------------
.text:00000000004020AE                 align 10h
.text:00000000004020AE ; } // starts at 402000
.text:00000000004020B0
.text:00000000004020B0 ; =============== S U B R O U T I N E =======================================
.text:00000000004020B0
.text:00000000004020B0
.text:00000000004020B0 ; void std::__introsort_loop<std::pair<int, int> *, long>(std::pair<int, int> *, std::pair<int, int> *, long)
.text:00000000004020B0                 public _ZSt16__introsort_loopIPSt4pairIiiElEvT_S3_T0_ ; weak
.text:00000000004020B0 _ZSt16__introsort_loopIPSt4pairIiiElEvT_S3_T0_ proc near
.text:00000000004020B0                                         ; CODE XREF: main+778↑p
.text:00000000004020B0                                         ; std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+1BE↓p
.text:00000000004020B0 ; __unwind { // ___gxx_personality_v0
.text:00000000004020B0                 push    r12
.text:00000000004020B2                 push    r15
.text:00000000004020B4                 push    rbx
.text:00000000004020B5                 push    rbp
.text:00000000004020B6                 push    rsi
.text:00000000004020B7                 mov     r9, rdi
.text:00000000004020BA                 mov     rax, rsi
.text:00000000004020BD                 sub     rax, r9
.text:00000000004020C0                 sar     rax, 3
.text:00000000004020C4                 cmp     rax, 10h
.text:00000000004020C8                 jle     loc_402287
.text:00000000004020CE                 mov     rbp, rdx
.text:00000000004020D1                 lea     r10, [r9+8]
.text:00000000004020D5                 mov     r15, r9
.text:00000000004020D8                 mov     r12, r10
.text:00000000004020DB
.text:00000000004020DB loc_4020DB:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+1D1↓j
.text:00000000004020DB                 mov     rax, rsi
.text:00000000004020DE                 sub     rax, r15
.text:00000000004020E1                 sar     rax, 3
.text:00000000004020E5                 test    rbp, rbp
.text:00000000004020E8                 jz      loc_40228F
.text:00000000004020EE                 mov     rcx, rax
.text:00000000004020F1                 dec     rbp
.text:00000000004020F4                 shr     rcx, 3Fh
.text:00000000004020F8                 add     rax, rcx
.text:00000000004020FB                 sar     rax, 1
.text:00000000004020FE                 mov     r8d, [r15]
.text:0000000000402101                 mov     ecx, [r15+rax*8]
.text:0000000000402105                 cmp     r8d, ecx
.text:0000000000402108                 jl      short loc_40211A
.text:000000000040210A                 cmp     ecx, r8d
.text:000000000040210D                 jl      short loc_40217F
.text:000000000040210F                 mov     ebx, [r15+4]
.text:0000000000402113                 cmp     ebx, [r15+rax*8+4]
.text:0000000000402118                 jge     short loc_40217F
.text:000000000040211A
.text:000000000040211A loc_40211A:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+58↑j
.text:000000000040211A                 mov     edi, [rsi-8]
.text:000000000040211D                 cmp     ecx, edi
.text:000000000040211F                 jl      short loc_40212F
.text:0000000000402121                 cmp     edi, ecx
.text:0000000000402123                 jl      short loc_402150
.text:0000000000402125                 mov     ebx, [r15+rax*8+4]
.text:000000000040212A                 cmp     ebx, [rsi-4]
.text:000000000040212D                 jge     short loc_402150
.text:000000000040212F
.text:000000000040212F loc_40212F:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+6F↑j
.text:000000000040212F                 mov     [r15], ecx
.text:0000000000402132                 mov     ecx, [r15+rax*8+4]
.text:0000000000402137                 mov     ebx, [r15+4]
.text:000000000040213B                 mov     [r15+4], ecx
.text:000000000040213F                 mov     [r15+rax*8], r8d
.text:0000000000402143                 mov     [r15+rax*8+4], ebx
.text:0000000000402148                 mov     r8d, [r15]
.text:000000000040214B                 jmp     loc_4021D7
.text:0000000000402150 ; ---------------------------------------------------------------------------
.text:0000000000402150
.text:0000000000402150 loc_402150:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+73↑j
.text:0000000000402150                                         ; std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+7D↑j
.text:0000000000402150                 cmp     r8d, edi
.text:0000000000402153                 jge     short loc_40215B
.text:0000000000402155                 mov     ecx, [r15+4]
.text:0000000000402159                 jmp     short loc_402169
.text:000000000040215B ; ---------------------------------------------------------------------------
.text:000000000040215B
.text:000000000040215B loc_40215B:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+A3↑j
.text:000000000040215B                 cmp     edi, r8d
.text:000000000040215E                 jl      short loc_4021D7
.text:0000000000402160                 mov     ecx, [r15+4]
.text:0000000000402164                 cmp     ecx, [rsi-4]
.text:0000000000402167                 jge     short loc_4021D7
.text:0000000000402169
.text:0000000000402169 loc_402169:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+A9↑j
.text:0000000000402169                 mov     [r15], edi
.text:000000000040216C                 mov     eax, [rsi-4]
.text:000000000040216F                 mov     [r15+4], eax
.text:0000000000402173                 mov     [rsi-8], r8d
.text:0000000000402177                 mov     [rsi-4], ecx
.text:000000000040217A                 mov     r8d, [r15]
.text:000000000040217D                 jmp     short loc_4021D7
.text:000000000040217F ; ---------------------------------------------------------------------------
.text:000000000040217F
.text:000000000040217F loc_40217F:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+5D↑j
.text:000000000040217F                                         ; std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+68↑j
.text:000000000040217F                 mov     edi, [rsi-8]
.text:0000000000402182                 cmp     r8d, edi
.text:0000000000402185                 jl      short loc_4021D7
.text:0000000000402187                 mov     r11d, [r15+4]
.text:000000000040218B                 cmp     edi, r8d
.text:000000000040218E                 jl      short loc_402196
.text:0000000000402190                 cmp     r11d, [rsi-4]
.text:0000000000402194                 jl      short loc_4021D7
.text:0000000000402196
.text:0000000000402196 loc_402196:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+DE↑j
.text:0000000000402196                 cmp     ecx, edi
.text:0000000000402198                 jl      short loc_4021A8
.text:000000000040219A                 cmp     edi, ecx
.text:000000000040219C                 jl      short loc_4021BF
.text:000000000040219E                 mov     ebx, [r15+rax*8+4]
.text:00000000004021A3                 cmp     ebx, [rsi-4]
.text:00000000004021A6                 jge     short loc_4021BF
.text:00000000004021A8
.text:00000000004021A8 loc_4021A8:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+E8↑j
.text:00000000004021A8                 mov     [r15], edi
.text:00000000004021AB                 mov     eax, [rsi-4]
.text:00000000004021AE                 mov     [r15+4], eax
.text:00000000004021B2                 mov     [rsi-8], r8d
.text:00000000004021B6                 mov     [rsi-4], r11d
.text:00000000004021BA                 mov     r8d, [r15]
.text:00000000004021BD                 jmp     short loc_4021D7
.text:00000000004021BF ; ---------------------------------------------------------------------------
.text:00000000004021BF
.text:00000000004021BF loc_4021BF:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+EC↑j
.text:00000000004021BF                                         ; std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+F6↑j
.text:00000000004021BF                 mov     [r15], ecx
.text:00000000004021C2                 mov     ecx, [r15+rax*8+4]
.text:00000000004021C7                 mov     [r15+4], ecx
.text:00000000004021CB                 mov     [r15+rax*8], r8d
.text:00000000004021CF                 mov     [r15+rax*8+4], r11d
.text:00000000004021D4                 mov     r8d, [r15]
.text:00000000004021D7
.text:00000000004021D7 loc_4021D7:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+9B↑j
.text:00000000004021D7                                         ; std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+AE↑j ...
.text:00000000004021D7                 mov     rbx, r12
.text:00000000004021DA                 mov     rcx, rsi
.text:00000000004021DD                 jmp     short loc_4021FB
.text:00000000004021DF ; ---------------------------------------------------------------------------
.text:00000000004021DF
.text:00000000004021DF loc_4021DF:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+1B2↓j
.text:00000000004021DF                 mov     [rbx], r11d
.text:00000000004021E2                 mov     r11d, [rcx+4]
.text:00000000004021E6                 mov     r8d, [rbx+4]
.text:00000000004021EA                 mov     [rbx+4], r11d
.text:00000000004021EE                 add     rbx, 8
.text:00000000004021F2                 mov     [rcx], eax
.text:00000000004021F4                 mov     [rcx+4], r8d
.text:00000000004021F8                 mov     r8d, [r15]
.text:00000000004021FB
.text:00000000004021FB loc_4021FB:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+12D↑j
.text:00000000004021FB                 mov     eax, [rbx]
.text:00000000004021FD                 cmp     eax, r8d
.text:0000000000402200                 jl      short loc_402211
.text:0000000000402202                 cmp     r8d, eax
.text:0000000000402205                 jl      short loc_40222B
.text:0000000000402207                 mov     r11d, [rbx+4]
.text:000000000040220B                 cmp     r11d, [r15+4]
.text:000000000040220F                 jge     short loc_40222B
.text:0000000000402211
.text:0000000000402211 loc_402211:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+150↑j
.text:0000000000402211                                         ; std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+16A↓j ...
.text:0000000000402211                 add     rbx, 8
.text:0000000000402215                 mov     eax, [rbx]
.text:0000000000402217                 cmp     eax, r8d
.text:000000000040221A                 jl      short loc_402211
.text:000000000040221C                 cmp     r8d, eax
.text:000000000040221F                 jl      short loc_40222B
.text:0000000000402221                 mov     r11d, [rbx+4]
.text:0000000000402225                 cmp     r11d, [r15+4]
.text:0000000000402229                 jl      short loc_402211
.text:000000000040222B
.text:000000000040222B loc_40222B:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+155↑j
.text:000000000040222B                                         ; std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+15F↑j ...
.text:000000000040222B                 add     rcx, 0FFFFFFFFFFFFFFF8h
.text:000000000040222F                 mov     r11d, [rcx]
.text:0000000000402232                 cmp     r8d, r11d
.text:0000000000402235                 jl      short loc_402245
.text:0000000000402237                 cmp     r11d, r8d
.text:000000000040223A                 jl      short loc_40225F
.text:000000000040223C                 mov     edx, [r15+4]
.text:0000000000402240                 cmp     edx, [rcx+4]
.text:0000000000402243                 jge     short loc_40225F
.text:0000000000402245
.text:0000000000402245 loc_402245:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+185↑j
.text:0000000000402245                                         ; std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+19F↓j ...
.text:0000000000402245                 add     rcx, 0FFFFFFFFFFFFFFF8h
.text:0000000000402249                 mov     r11d, [rcx]
.text:000000000040224C                 cmp     r8d, r11d
.text:000000000040224F                 jl      short loc_402245
.text:0000000000402251                 cmp     r11d, r8d
.text:0000000000402254                 jl      short loc_40225F
.text:0000000000402256                 mov     edx, [r15+4]
.text:000000000040225A                 cmp     edx, [rcx+4]
.text:000000000040225D                 jl      short loc_402245
.text:000000000040225F
.text:000000000040225F loc_40225F:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+18A↑j
.text:000000000040225F                                         ; std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+193↑j ...
.text:000000000040225F                 cmp     rbx, rcx
.text:0000000000402262                 jb      loc_4021DF
.text:0000000000402268                 mov     rdi, rbx
.text:000000000040226B                 mov     rdx, rbp
.text:000000000040226E                 call    _ZSt16__introsort_loopIPSt4pairIiiElEvT_S3_T0_ ; std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)
.text:0000000000402273                 mov     rsi, rbx
.text:0000000000402276                 sub     rbx, r15
.text:0000000000402279                 sar     rbx, 3
.text:000000000040227D                 cmp     rbx, 10h
.text:0000000000402281                 jg      loc_4020DB
.text:0000000000402287
.text:0000000000402287 loc_402287:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+18↑j
.text:0000000000402287                 pop     rcx
.text:0000000000402288                 pop     rbp
.text:0000000000402289                 pop     rbx
.text:000000000040228A                 pop     r15
.text:000000000040228C                 pop     r12
.text:000000000040228E                 retn
.text:000000000040228F ; ---------------------------------------------------------------------------
.text:000000000040228F
.text:000000000040228F loc_40228F:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+38↑j
.text:000000000040228F                 mov     r9, r15
.text:0000000000402292                 cmp     rax, 2
.text:0000000000402296                 jge     loc_4023DD
.text:000000000040229C
.text:000000000040229C loc_40229C:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+442↓j
.text:000000000040229C                 mov     rdx, rsi
.text:000000000040229F                 sub     rdx, r9
.text:00000000004022A2                 cmp     rax, 1
.text:00000000004022A6                 jle     loc_4023D5
.text:00000000004022AC                 mov     eax, 1
.text:00000000004022B1
.text:00000000004022B1 loc_4022B1:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+31F↓j
.text:00000000004022B1                 add     rdx, 0FFFFFFFFFFFFFFF8h
.text:00000000004022B5                 xor     ecx, ecx
.text:00000000004022B7                 mov     rdi, rdx
.text:00000000004022BA                 add     rsi, 0FFFFFFFFFFFFFFF8h
.text:00000000004022BE                 sar     rdi, 3
.text:00000000004022C2                 test    rdi, rdi
.text:00000000004022C5                 mov     ebx, [r9]
.text:00000000004022C8                 cmovle  ecx, eax
.text:00000000004022CB                 mov     r10d, [rsi]
.text:00000000004022CE                 mov     [rsi], ebx
.text:00000000004022D0                 mov     ebp, [r9+4]
.text:00000000004022D4                 mov     r8d, [rsi+4]
.text:00000000004022D8                 lea     rcx, [rdi+rcx-1]
.text:00000000004022DD                 sar     rcx, 1
.text:00000000004022E0                 mov     [rsi+4], ebp
.text:00000000004022E3                 xor     ebp, ebp
.text:00000000004022E5                 xor     ebx, ebx
.text:00000000004022E7                 test    rcx, rcx
.text:00000000004022EA                 jle     short loc_402330
.text:00000000004022EC
.text:00000000004022EC loc_4022EC:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+27E↓j
.text:00000000004022EC                 lea     rbx, ds:2[rbx*2]
.text:00000000004022F4                 mov     r11d, [r9+rbx*8-8]
.text:00000000004022F9                 mov     r15d, [r9+rbx*8]
.text:00000000004022FD                 cmp     r15d, r11d
.text:0000000000402300                 jl      short loc_402313
.text:0000000000402302                 cmp     r11d, r15d
.text:0000000000402305                 jl      short loc_402316
.text:0000000000402307                 mov     r11d, [r9+rbx*8+4]
.text:000000000040230C                 cmp     r11d, [r9+rbx*8-4]
.text:0000000000402311                 jge     short loc_402316
.text:0000000000402313
.text:0000000000402313 loc_402313:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+250↑j
.text:0000000000402313                 dec     rbx
.text:0000000000402316
.text:0000000000402316 loc_402316:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+255↑j
.text:0000000000402316                                         ; std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+261↑j
.text:0000000000402316                 cmp     rbx, rcx
.text:0000000000402319                 mov     r11d, [r9+rbx*8]
.text:000000000040231D                 mov     [r9+rbp*8], r11d
.text:0000000000402321                 mov     r11d, [r9+rbx*8+4]
.text:0000000000402326                 mov     [r9+rbp*8+4], r11d
.text:000000000040232B                 mov     rbp, rbx
.text:000000000040232E                 jl      short loc_4022EC
.text:0000000000402330
.text:0000000000402330 loc_402330:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+23A↑j
.text:0000000000402330                 test    rdi, 1
.text:0000000000402337                 jnz     short loc_40236D
.text:0000000000402339                 lea     rcx, [rdi-2]
.text:000000000040233D                 shr     rcx, 3Fh
.text:0000000000402341                 lea     r11, [rdi+rcx-2]
.text:0000000000402346                 sar     r11, 1
.text:0000000000402349                 cmp     rbx, r11
.text:000000000040234C                 jnz     short loc_40236D
.text:000000000040234E                 lea     r11, ds:2[rbx*2]
.text:0000000000402356                 mov     ecx, [r9+r11*8-8]
.text:000000000040235B                 mov     [r9+rbp*8], ecx
.text:000000000040235F                 mov     ebx, [r9+r11*8-4]
.text:0000000000402364                 mov     [r9+rbp*8+4], ebx
.text:0000000000402369                 lea     rbp, [r11-1]
.text:000000000040236D
.text:000000000040236D loc_40236D:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+287↑j
.text:000000000040236D                                         ; std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+29C↑j
.text:000000000040236D                 lea     rcx, [rbp-1]
.text:0000000000402371                 shr     rcx, 3Fh
.text:0000000000402375                 lea     rcx, [rbp+rcx-1]
.text:000000000040237A                 sar     rcx, 1
.text:000000000040237D                 test    rbp, rbp
.text:0000000000402380                 jle     short loc_4023C1
.text:0000000000402382
.text:0000000000402382 loc_402382:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+30F↓j
.text:0000000000402382                 mov     ebx, [r9+rcx*8]
.text:0000000000402386                 cmp     ebx, r10d
.text:0000000000402389                 jl      short loc_402397
.text:000000000040238B                 cmp     r10d, ebx
.text:000000000040238E                 jl      short loc_4023C1
.text:0000000000402390                 cmp     r8d, [r9+rcx*8+4]
.text:0000000000402395                 jle     short loc_4023C1
.text:0000000000402397
.text:0000000000402397 loc_402397:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+2D9↑j
.text:0000000000402397                 mov     ebx, [r9+rcx*8]
.text:000000000040239B                 mov     [r9+rbp*8], ebx
.text:000000000040239F                 lea     rbx, [rcx-1]
.text:00000000004023A3                 shr     rbx, 3Fh
.text:00000000004023A7                 mov     r11d, [r9+rcx*8+4]
.text:00000000004023AC                 mov     [r9+rbp*8+4], r11d
.text:00000000004023B1                 mov     rbp, rcx
.text:00000000004023B4                 lea     rcx, [rcx+rbx-1]
.text:00000000004023B9                 sar     rcx, 1
.text:00000000004023BC                 test    rbp, rbp
.text:00000000004023BF                 jg      short loc_402382
.text:00000000004023C1
.text:00000000004023C1 loc_4023C1:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+2D0↑j
.text:00000000004023C1                                         ; std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+2DE↑j ...
.text:00000000004023C1                 nop
.text:00000000004023C2                 mov     [r9+rbp*8], r10d
.text:00000000004023C6                 cmp     rdi, 1
.text:00000000004023CA                 mov     [r9+rbp*8+4], r8d
.text:00000000004023CF                 jg      loc_4022B1
.text:00000000004023D5
.text:00000000004023D5 loc_4023D5:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+1F6↑j
.text:00000000004023D5                 pop     rcx
.text:00000000004023D6                 pop     rbp
.text:00000000004023D7                 pop     rbx
.text:00000000004023D8                 pop     r15
.text:00000000004023DA                 pop     r12
.text:00000000004023DC                 retn
.text:00000000004023DD ; ---------------------------------------------------------------------------
.text:00000000004023DD
.text:00000000004023DD loc_4023DD:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+1E6↑j
.text:00000000004023DD                 mov     edx, 1
.text:00000000004023E2                 xor     ecx, ecx
.text:00000000004023E4                 test    rax, rax
.text:00000000004023E7                 lea     r8, [rax-2]
.text:00000000004023EB                 cmovle  ecx, edx
.text:00000000004023EE                 shr     r8, 3Fh
.text:00000000004023F2                 lea     r8, [rax+r8-2]
.text:00000000004023F7                 sar     r8, 1
.text:00000000004023FA                 lea     rdi, [rax+rcx-1]
.text:00000000004023FF                 mov     rcx, rax
.text:0000000000402402                 mov     rdx, r8
.text:0000000000402405                 sar     rdi, 1
.text:0000000000402408                 and     rcx, 1
.text:000000000040240C                 jmp     short loc_402411
.text:000000000040240E ; ---------------------------------------------------------------------------
.text:000000000040240E
.text:000000000040240E loc_40240E:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+448↓j
.text:000000000040240E                 dec     r8
.text:0000000000402411
.text:0000000000402411 loc_402411:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+35C↑j
.text:0000000000402411                 mov     r11d, [r9+r8*8]
.text:0000000000402415                 mov     rbp, r8
.text:0000000000402418                 mov     r10d, [r9+r8*8+4]
.text:000000000040241D                 mov     rbx, r8
.text:0000000000402420                 cmp     r8, rdi
.text:0000000000402423                 jge     short loc_402469
.text:0000000000402425
.text:0000000000402425 loc_402425:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+3B7↓j
.text:0000000000402425                 lea     rbx, ds:2[rbx*2]
.text:000000000040242D                 mov     r12d, [r9+rbx*8-8]
.text:0000000000402432                 mov     r15d, [r9+rbx*8]
.text:0000000000402436                 cmp     r15d, r12d
.text:0000000000402439                 jl      short loc_40244C
.text:000000000040243B                 cmp     r12d, r15d
.text:000000000040243E                 jl      short loc_40244F
.text:0000000000402440                 mov     r12d, [r9+rbx*8+4]
.text:0000000000402445                 cmp     r12d, [r9+rbx*8-4]
.text:000000000040244A                 jge     short loc_40244F
.text:000000000040244C
.text:000000000040244C loc_40244C:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+389↑j
.text:000000000040244C                 dec     rbx
.text:000000000040244F
.text:000000000040244F loc_40244F:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+38E↑j
.text:000000000040244F                                         ; std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+39A↑j
.text:000000000040244F                 cmp     rbx, rdi
.text:0000000000402452                 mov     r12d, [r9+rbx*8]
.text:0000000000402456                 mov     [r9+rbp*8], r12d
.text:000000000040245A                 mov     r12d, [r9+rbx*8+4]
.text:000000000040245F                 mov     [r9+rbp*8+4], r12d
.text:0000000000402464                 mov     rbp, rbx
.text:0000000000402467                 jl      short loc_402425
.text:0000000000402469
.text:0000000000402469 loc_402469:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+373↑j
.text:0000000000402469                 test    rcx, rcx
.text:000000000040246C                 jnz     short loc_402492
.text:000000000040246E                 cmp     rbx, rdx
.text:0000000000402471                 jnz     short loc_402492
.text:0000000000402473                 lea     r15, ds:2[rbx*2]
.text:000000000040247B                 mov     ebx, [r9+r15*8-8]
.text:0000000000402480                 mov     [r9+rbp*8], ebx
.text:0000000000402484                 mov     r12d, [r9+r15*8-4]
.text:0000000000402489                 mov     [r9+rbp*8+4], r12d
.text:000000000040248E                 lea     rbp, [r15-1]
.text:0000000000402492
.text:0000000000402492 loc_402492:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+3BC↑j
.text:0000000000402492                                         ; std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+3C1↑j
.text:0000000000402492                 lea     rbx, [rbp-1]
.text:0000000000402496                 shr     rbx, 3Fh
.text:000000000040249A                 lea     rbx, [rbp+rbx-1]
.text:000000000040249F                 sar     rbx, 1
.text:00000000004024A2                 cmp     rbp, r8
.text:00000000004024A5                 jle     short loc_4024E6
.text:00000000004024A7
.text:00000000004024A7 loc_4024A7:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+434↓j
.text:00000000004024A7                 mov     r12d, [r9+rbx*8]
.text:00000000004024AB                 cmp     r12d, r11d
.text:00000000004024AE                 jl      short loc_4024BC
.text:00000000004024B0                 cmp     r11d, r12d
.text:00000000004024B3                 jl      short loc_4024E6
.text:00000000004024B5                 cmp     r10d, [r9+rbx*8+4]
.text:00000000004024BA                 jle     short loc_4024E6
.text:00000000004024BC
.text:00000000004024BC loc_4024BC:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+3FE↑j
.text:00000000004024BC                 mov     r12d, [r9+rbx*8]
.text:00000000004024C0                 mov     [r9+rbp*8], r12d
.text:00000000004024C4                 mov     r12d, [r9+rbx*8+4]
.text:00000000004024C9                 mov     [r9+rbp*8+4], r12d
.text:00000000004024CE                 lea     r12, [rbx-1]
.text:00000000004024D2                 shr     r12, 3Fh
.text:00000000004024D6                 mov     rbp, rbx
.text:00000000004024D9                 lea     rbx, [rbx+r12-1]
.text:00000000004024DE                 sar     rbx, 1
.text:00000000004024E1                 cmp     rbp, r8
.text:00000000004024E4                 jg      short loc_4024A7
.text:00000000004024E6
.text:00000000004024E6 loc_4024E6:                             ; CODE XREF: std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+3F5↑j
.text:00000000004024E6                                         ; std::__introsort_loop<std::pair<int,int> *,long>(std::pair<int,int> *,std::pair<int,int> *,long)+403↑j ...
.text:00000000004024E6                 mov     [r9+rbp*8], r11d
.text:00000000004024EA                 test    r8, r8
.text:00000000004024ED                 mov     [r9+rbp*8+4], r10d
.text:00000000004024F2                 jz      loc_40229C
.text:00000000004024F8                 jmp     loc_40240E
.text:00000000004024F8 _ZSt16__introsort_loopIPSt4pairIiiElEvT_S3_T0_ endp
.text:00000000004024F8
.text:00000000004024F8 ; ---------------------------------------------------------------------------
.text:00000000004024FD                 align 20h
.text:00000000004024FD ; } // starts at 4020B0
.text:0000000000402500
.text:0000000000402500 ; =============== S U B R O U T I N E =======================================
.text:0000000000402500
.text:0000000000402500
.text:0000000000402500 ; std::_Rb_tree<std::pair<int, int>, std::pair<int, int>, std::_Identity<std::pair<int, int>>, std::less<std::pair<int, int>>, std::allocator<std::pair<int, int>>>::_M_insert_unique(std::pair<int, int> const&)
.text:0000000000402500                 public _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueERKS1_ ; weak
.text:0000000000402500 _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueERKS1_ proc near
.text:0000000000402500                                         ; CODE XREF: main+F5↑p
.text:0000000000402500
.text:0000000000402500 var_48          = qword ptr -48h
.text:0000000000402500 var_40          = qword ptr -40h
.text:0000000000402500
.text:0000000000402500 ; __unwind { // ___gxx_personality_v0
.text:0000000000402500                 push    r12
.text:0000000000402502                 push    r13
.text:0000000000402504                 push    r14
.text:0000000000402506                 push    r15
.text:0000000000402508                 push    rbx
.text:0000000000402509                 push    rbp
.text:000000000040250A                 sub     rsp, 18h
.text:000000000040250E                 mov     r12, rdi
.text:0000000000402511                 mov     r13, rsi
.text:0000000000402514                 mov     r9b, 1
.text:0000000000402517                 mov     r8, [r12+10h]
.text:000000000040251C                 lea     rbp, [r12+8]
.text:0000000000402521                 mov     rbx, rbp
.text:0000000000402524                 test    r8, r8
.text:0000000000402527                 jz      short loc_402564
.text:0000000000402529                 mov     esi, [r13+0]
.text:000000000040252D                 mov     eax, [r13+4]
.text:0000000000402531
.text:0000000000402531 loc_402531:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+62↓j
.text:0000000000402531                 mov     r9d, [r8+20h]
.text:0000000000402535                 mov     rbx, r8
.text:0000000000402538                 cmp     esi, r9d
.text:000000000040253B                 jl      short loc_402548
.text:000000000040253D                 cmp     r9d, esi
.text:0000000000402540                 jl      short loc_40254D
.text:0000000000402542                 cmp     eax, [r8+24h]
.text:0000000000402546                 jge     short loc_40254D
.text:0000000000402548
.text:0000000000402548 loc_402548:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+3B↑j
.text:0000000000402548                 mov     r9b, 1
.text:000000000040254B                 jmp     short loc_402550
.text:000000000040254D ; ---------------------------------------------------------------------------
.text:000000000040254D
.text:000000000040254D loc_40254D:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+40↑j
.text:000000000040254D                                         ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+46↑j
.text:000000000040254D                 xor     r9b, r9b
.text:0000000000402550
.text:0000000000402550 loc_402550:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+4B↑j
.text:0000000000402550                 test    r9b, r9b
.text:0000000000402553                 jz      short loc_40255B
.text:0000000000402555                 mov     r8, [r8+10h]
.text:0000000000402559                 jmp     short loc_40255F
.text:000000000040255B ; ---------------------------------------------------------------------------
.text:000000000040255B
.text:000000000040255B loc_40255B:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+53↑j
.text:000000000040255B                 mov     r8, [r8+18h]
.text:000000000040255F
.text:000000000040255F loc_40255F:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+59↑j
.text:000000000040255F                 test    r8, r8
.text:0000000000402562                 jnz     short loc_402531
.text:0000000000402564
.text:0000000000402564 loc_402564:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+27↑j
.text:0000000000402564                 mov     rax, rbx
.text:0000000000402567                 test    r9b, r9b
.text:000000000040256A                 jz      short loc_40257F
.text:000000000040256C                 cmp     rbx, [r12+18h]
.text:0000000000402571                 jz      loc_402645
.text:0000000000402577                 mov     rdi, rbx
.text:000000000040257A                 call    __ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base ; std::_Rb_tree_decrement(std::_Rb_tree_node_base *)
.text:000000000040257F
.text:000000000040257F loc_40257F:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+6A↑j
.text:000000000040257F                 mov     r8d, [r13+0]
.text:0000000000402583                 mov     esi, [rax+20h]
.text:0000000000402586                 cmp     esi, r8d
.text:0000000000402589                 jl      short loc_4025A1
.text:000000000040258B                 cmp     r8d, esi
.text:000000000040258E                 jl      loc_402628
.text:0000000000402594                 mov     esi, [rax+24h]
.text:0000000000402597                 cmp     esi, [r13+4]
.text:000000000040259B                 jge     loc_402628
.text:00000000004025A1
.text:00000000004025A1 loc_4025A1:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+89↑j
.text:00000000004025A1                 cmp     rbx, rbp
.text:00000000004025A4                 jnz     short loc_4025AE
.text:00000000004025A6                 mov     r15d, 1
.text:00000000004025AC                 jmp     short loc_4025CF
.text:00000000004025AE ; ---------------------------------------------------------------------------
.text:00000000004025AE
.text:00000000004025AE loc_4025AE:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+A4↑j
.text:00000000004025AE                 mov     eax, [rbx+20h]
.text:00000000004025B1                 cmp     r8d, eax
.text:00000000004025B4                 jl      short loc_4025C4
.text:00000000004025B6                 cmp     eax, r8d
.text:00000000004025B9                 jl      short loc_4025CC
.text:00000000004025BB                 mov     eax, [r13+4]
.text:00000000004025BF                 cmp     eax, [rbx+24h]
.text:00000000004025C2                 jge     short loc_4025CC
.text:00000000004025C4
.text:00000000004025C4 loc_4025C4:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+B4↑j
.text:00000000004025C4                 mov     r15d, 1
.text:00000000004025CA                 jmp     short loc_4025CF
.text:00000000004025CC ; ---------------------------------------------------------------------------
.text:00000000004025CC
.text:00000000004025CC loc_4025CC:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+B9↑j
.text:00000000004025CC                                         ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+C2↑j
.text:00000000004025CC                 xor     r15d, r15d
.text:00000000004025CF
.text:00000000004025CF loc_4025CF:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+AC↑j
.text:00000000004025CF                                         ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+CA↑j
.text:00000000004025CF                 mov     edi, 28h ; '('  ; unsigned __int64
.text:00000000004025D4                 call    __Znwm          ; operator new(ulong)
.text:00000000004025D9                 mov     r14, rax
.text:00000000004025DC                 cmp     r14, 0FFFFFFFFFFFFFFE0h
.text:00000000004025E0                 jz      short loc_4025F2
.text:00000000004025E2                 mov     r8d, [r13+0]
.text:00000000004025E6                 mov     [r14+20h], r8d
.text:00000000004025EA                 mov     r9d, [r13+4]
.text:00000000004025EE                 mov     [r14+24h], r9d
.text:00000000004025F2
.text:00000000004025F2 loc_4025F2:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+E0↑j
.text:00000000004025F2                 mov     edi, r15d
.text:00000000004025F5                 mov     rsi, r14
.text:00000000004025F8                 mov     rdx, rbx
.text:00000000004025FB                 mov     rcx, rbp
.text:00000000004025FE                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000402603                 mov     byte ptr [rsp+48h+var_40], 1
.text:0000000000402608                 mov     rax, r14
.text:000000000040260B                 inc     qword ptr [r12+28h]
.text:0000000000402610                 mov     [rsp+48h+var_48], r14
.text:0000000000402614                 mov     rdx, [rsp+48h+var_40]
.text:0000000000402619                 add     rsp, 18h
.text:000000000040261D                 pop     rbp
.text:000000000040261E                 pop     rbx
.text:000000000040261F                 pop     r15
.text:0000000000402621                 pop     r14
.text:0000000000402623                 pop     r13
.text:0000000000402625                 pop     r12
.text:0000000000402627                 retn
.text:0000000000402628 ; ---------------------------------------------------------------------------
.text:0000000000402628
.text:0000000000402628 loc_402628:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+8E↑j
.text:0000000000402628                                         ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+9B↑j
.text:0000000000402628                 mov     byte ptr [rsp+48h+var_40], 0
.text:000000000040262D                 mov     [rsp+48h+var_48], rax
.text:0000000000402631                 mov     rdx, [rsp+48h+var_40]
.text:0000000000402636                 add     rsp, 18h
.text:000000000040263A                 pop     rbp
.text:000000000040263B                 pop     rbx
.text:000000000040263C                 pop     r15
.text:000000000040263E                 pop     r14
.text:0000000000402640                 pop     r13
.text:0000000000402642                 pop     r12
.text:0000000000402644                 retn
.text:0000000000402645 ; ---------------------------------------------------------------------------
.text:0000000000402645
.text:0000000000402645 loc_402645:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+71↑j
.text:0000000000402645                 cmp     rbx, rbp
.text:0000000000402648                 jnz     short loc_402652
.text:000000000040264A                 mov     r15d, 1
.text:0000000000402650                 jmp     short loc_402675
.text:0000000000402652 ; ---------------------------------------------------------------------------
.text:0000000000402652
.text:0000000000402652 loc_402652:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+148↑j
.text:0000000000402652                 mov     esi, [r13+0]
.text:0000000000402656                 mov     eax, [rbx+20h]
.text:0000000000402659                 cmp     esi, eax
.text:000000000040265B                 jl      short loc_40266A
.text:000000000040265D                 cmp     eax, esi
.text:000000000040265F                 jl      short loc_402672
.text:0000000000402661                 mov     eax, [r13+4]
.text:0000000000402665                 cmp     eax, [rbx+24h]
.text:0000000000402668                 jge     short loc_402672
.text:000000000040266A
.text:000000000040266A loc_40266A:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+15B↑j
.text:000000000040266A                 mov     r15d, 1
.text:0000000000402670                 jmp     short loc_402675
.text:0000000000402672 ; ---------------------------------------------------------------------------
.text:0000000000402672
.text:0000000000402672 loc_402672:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+15F↑j
.text:0000000000402672                                         ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+168↑j
.text:0000000000402672                 xor     r15d, r15d
.text:0000000000402675
.text:0000000000402675 loc_402675:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+150↑j
.text:0000000000402675                                         ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+170↑j
.text:0000000000402675                 mov     edi, 28h ; '('  ; unsigned __int64
.text:000000000040267A                 call    __Znwm          ; operator new(ulong)
.text:000000000040267F                 mov     r14, rax
.text:0000000000402682                 cmp     r14, 0FFFFFFFFFFFFFFE0h
.text:0000000000402686                 jz      short loc_402698
.text:0000000000402688                 mov     r8d, [r13+0]
.text:000000000040268C                 mov     [r14+20h], r8d
.text:0000000000402690                 mov     r9d, [r13+4]
.text:0000000000402694                 mov     [r14+24h], r9d
.text:0000000000402698
.text:0000000000402698 loc_402698:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+186↑j
.text:0000000000402698                 mov     edi, r15d
.text:000000000040269B                 mov     rsi, r14
.text:000000000040269E                 mov     rdx, rbx
.text:00000000004026A1                 mov     rcx, rbp
.text:00000000004026A4                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:00000000004026A9                 mov     byte ptr [rsp+48h+var_40], 1
.text:00000000004026AE                 mov     rax, r14
.text:00000000004026B1                 inc     qword ptr [r12+28h]
.text:00000000004026B6                 mov     [rsp+48h+var_48], r14
.text:00000000004026BA                 mov     rdx, [rsp+48h+var_40]
.text:00000000004026BF                 add     rsp, 18h
.text:00000000004026C3                 pop     rbp
.text:00000000004026C4                 pop     rbx
.text:00000000004026C5                 pop     r15
.text:00000000004026C7                 pop     r14
.text:00000000004026C9                 pop     r13
.text:00000000004026CB                 pop     r12
.text:00000000004026CD                 retn
.text:00000000004026CD _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueERKS1_ endp
.text:00000000004026CD
.text:00000000004026CD ; ---------------------------------------------------------------------------
.text:00000000004026CE                 align 10h
.text:00000000004026CE ; } // starts at 402500
.text:00000000004026D0
.text:00000000004026D0 ; =============== S U B R O U T I N E =======================================
.text:00000000004026D0
.text:00000000004026D0
.text:00000000004026D0 ; std::_Rb_tree<std::pair<int, int>, std::pair<int, int>, std::_Identity<std::pair<int, int>>, std::less<std::pair<int, int>>, std::allocator<std::pair<int, int>>>::_M_put_node(std::_Rb_tree_node<std::pair<int, int>> *)
.text:00000000004026D0                 public _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS1_E ; weak
.text:00000000004026D0 _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS1_E proc near
.text:00000000004026D0 ; __unwind { // ___gxx_personality_v0
.text:00000000004026D0                 mov     rdi, rsi        ; void *
.text:00000000004026D3                 jmp     __ZdlPv         ; operator delete(void *)
.text:00000000004026D3 _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS1_E endp
.text:00000000004026D3
.text:00000000004026D3 ; ---------------------------------------------------------------------------
.text:00000000004026D8                 align 20h
.text:00000000004026D8 ; } // starts at 4026D0
.text:00000000004026E0
.text:00000000004026E0 ; =============== S U B R O U T I N E =======================================
.text:00000000004026E0
.text:00000000004026E0
.text:00000000004026E0 ; std::_Rb_tree<std::pair<int, int>, std::pair<int, int>, std::_Identity<std::pair<int, int>>, std::less<std::pair<int, int>>, std::allocator<std::pair<int, int>>>::_M_erase(std::_Rb_tree_node<std::pair<int, int>> *)
.text:00000000004026E0                 public _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E ; weak
.text:00000000004026E0 _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E proc near
.text:00000000004026E0                                         ; CODE XREF: main+27A↑p
.text:00000000004026E0                                         ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_erase(std::_Rb_tree_node<std::pair<int,int>> *)+24↓p ...
.text:00000000004026E0
.text:00000000004026E0 var_18          = qword ptr -18h
.text:00000000004026E0 var_10          = qword ptr -10h
.text:00000000004026E0 var_8           = qword ptr -8
.text:00000000004026E0
.text:00000000004026E0 ; __unwind { // ___gxx_personality_v0
.text:00000000004026E0                 sub     rsp, 18h
.text:00000000004026E4                 test    rsi, rsi
.text:00000000004026E7                 jz      short loc_40272B
.text:00000000004026E9                 mov     [rsp+18h+var_8], r12
.text:00000000004026EE                 mov     r12, rdi
.text:00000000004026F1                 mov     [rsp+18h+var_10], r13
.text:00000000004026F6                 mov     r13, rsi
.text:00000000004026F9                 mov     [rsp+18h+var_18], r14
.text:00000000004026FD
.text:00000000004026FD loc_4026FD:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_erase(std::_Rb_tree_node<std::pair<int,int>> *)+3B↓j
.text:00000000004026FD                 mov     rdi, r12
.text:0000000000402700                 mov     rsi, [r13+18h]
.text:0000000000402704                 call    _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_erase(std::_Rb_tree_node<std::pair<int,int>> *)
.text:0000000000402709                 mov     rdi, r13        ; void *
.text:000000000040270C                 mov     r14, [r13+10h]
.text:0000000000402710                 call    __ZdlPv         ; operator delete(void *)
.text:0000000000402715                 mov     r13, r14
.text:0000000000402718                 test    r14, r14
.text:000000000040271B                 jnz     short loc_4026FD
.text:000000000040271D                 mov     r12, [rsp+18h+var_8]
.text:0000000000402722                 mov     r13, [rsp+18h+var_10]
.text:0000000000402727                 mov     r14, [rsp+18h+var_18]
.text:000000000040272B
.text:000000000040272B loc_40272B:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_erase(std::_Rb_tree_node<std::pair<int,int>> *)+7↑j
.text:000000000040272B                 add     rsp, 18h
.text:000000000040272F                 retn
.text:000000000040272F ; } // starts at 4026E0
.text:000000000040272F _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E endp
.text:000000000040272F
.text:0000000000402730
.text:0000000000402730 ; =============== S U B R O U T I N E =======================================
.text:0000000000402730
.text:0000000000402730
.text:0000000000402730 ; std::char_traits<char>::length(char const*)
.text:0000000000402730                 public _ZNSt11char_traitsIcE6lengthEPKc ; weak
.text:0000000000402730 _ZNSt11char_traitsIcE6lengthEPKc proc near
.text:0000000000402730 ; __unwind { // ___gxx_personality_v0
.text:0000000000402730                 push    rsi
.text:0000000000402731                 mov     rdx, rdi
.text:0000000000402734                 mov     rcx, rdx
.text:0000000000402737                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:000000000040273B                 pxor    xmm0, xmm0
.text:000000000040273F                 pcmpeqb xmm0, xmmword ptr [rdx]
.text:0000000000402743                 pmovmskb eax, xmm0
.text:0000000000402747                 and     ecx, 0Fh
.text:000000000040274A                 shr     eax, cl
.text:000000000040274C                 bsf     eax, eax
.text:000000000040274F                 jnz     short loc_40275C
.text:0000000000402751                 mov     rax, rdx
.text:0000000000402754                 add     rdx, rcx
.text:0000000000402757                 call    __intel_sse2_strlen
.text:000000000040275C
.text:000000000040275C loc_40275C:                             ; CODE XREF: std::char_traits<char>::length(char const*)+1F↑j
.text:000000000040275C                 pop     rcx
.text:000000000040275D                 retn
.text:000000000040275D _ZNSt11char_traitsIcE6lengthEPKc endp
.text:000000000040275D
.text:000000000040275D ; ---------------------------------------------------------------------------
.text:000000000040275E                 align 20h
.text:000000000040275E ; } // starts at 402730
.text:0000000000402760
.text:0000000000402760 ; =============== S U B R O U T I N E =======================================
.text:0000000000402760
.text:0000000000402760
.text:0000000000402760 ; void __fastcall std::set<std::pair<int,int>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::~set(void *)
.text:0000000000402760                 public _ZNSt3setISt4pairIiiESt4lessIS1_ESaIS1_EED1Ev ; weak
.text:0000000000402760 _ZNSt3setISt4pairIiiESt4lessIS1_ESaIS1_EED1Ev proc near
.text:0000000000402760                                         ; DATA XREF: __sti__$E+3B↑o
.text:0000000000402760
.text:0000000000402760 var_18          = qword ptr -18h
.text:0000000000402760 var_10          = qword ptr -10h
.text:0000000000402760 var_8           = qword ptr -8
.text:0000000000402760
.text:0000000000402760 ; __unwind { // ___gxx_personality_v0
.text:0000000000402760                 sub     rsp, 18h
.text:0000000000402764                 mov     rax, rdi
.text:0000000000402767                 mov     rdi, [rax+10h]
.text:000000000040276B                 test    rdi, rdi
.text:000000000040276E                 jz      short loc_4027B4
.text:0000000000402770                 mov     [rsp+18h+var_8], r12
.text:0000000000402775                 mov     r12, rdi
.text:0000000000402778                 mov     [rsp+18h+var_10], r13
.text:000000000040277D                 mov     r13, rax
.text:0000000000402780                 mov     [rsp+18h+var_18], r14
.text:0000000000402784
.text:0000000000402784 loc_402784:                             ; CODE XREF: std::set<std::pair<int,int>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::~set()+44↓j
.text:0000000000402784                 mov     rdi, r13
.text:0000000000402787                 mov     rsi, [r12+18h]
.text:000000000040278C                 call    _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_erase(std::_Rb_tree_node<std::pair<int,int>> *)
.text:0000000000402791                 mov     rdi, r12        ; void *
.text:0000000000402794                 mov     r14, [r12+10h]
.text:0000000000402799                 call    __ZdlPv         ; operator delete(void *)
.text:000000000040279E                 mov     r12, r14
.text:00000000004027A1                 test    r14, r14
.text:00000000004027A4                 jnz     short loc_402784
.text:00000000004027A6                 mov     r12, [rsp+18h+var_8]
.text:00000000004027AB                 mov     r13, [rsp+18h+var_10]
.text:00000000004027B0                 mov     r14, [rsp+18h+var_18]
.text:00000000004027B4
.text:00000000004027B4 loc_4027B4:                             ; CODE XREF: std::set<std::pair<int,int>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::~set()+E↑j
.text:00000000004027B4                 add     rsp, 18h
.text:00000000004027B8                 retn
.text:00000000004027B8 _ZNSt3setISt4pairIiiESt4lessIS1_ESaIS1_EED1Ev endp
.text:00000000004027B8
.text:00000000004027B8 ; ---------------------------------------------------------------------------
.text:00000000004027B9                 align 20h
.text:00000000004027B9 ; } // starts at 402760
.text:00000000004027C0
.text:00000000004027C0 ; =============== S U B R O U T I N E =======================================
.text:00000000004027C0
.text:00000000004027C0
.text:00000000004027C0                 public __intel_new_feature_proc_init
.text:00000000004027C0 __intel_new_feature_proc_init proc near ; CODE XREF: main+1E↑p
.text:00000000004027C0
.text:00000000004027C0 dest            = byte ptr -448h
.text:00000000004027C0 var_48          = qword ptr -48h
.text:00000000004027C0 var_40          = qword ptr -40h
.text:00000000004027C0 var_38          = qword ptr -38h
.text:00000000004027C0 var_30          = qword ptr -30h
.text:00000000004027C0 var_28          = qword ptr -28h
.text:00000000004027C0 s               = qword ptr -20h
.text:00000000004027C0
.text:00000000004027C0 ; __unwind {
.text:00000000004027C0                 push    r12
.text:00000000004027C2                 push    r13
.text:00000000004027C4                 push    r14
.text:00000000004027C6                 sub     rsp, 430h
.text:00000000004027CD                 mov     r14, rsi
.text:00000000004027D0                 mov     rax, cs:__intel_cpu_feature_indicator_ptr
.text:00000000004027D7                 mov     r13d, edi
.text:00000000004027DA                 mov     r12, [rax]
.text:00000000004027DD                 test    r12, r12
.text:00000000004027E0                 jz      loc_402B1D
.text:00000000004027E6
.text:00000000004027E6 loc_4027E6:                             ; CODE XREF: __intel_new_feature_proc_init+371↓j
.text:00000000004027E6                 mov     rax, r12
.text:00000000004027E9                 and     rax, r14
.text:00000000004027EC                 cmp     r14, rax
.text:00000000004027EF                 jnz     short loc_40280C
.text:00000000004027F1                 test    r12, 6
.text:00000000004027F8                 jnz     loc_402A8D
.text:00000000004027FE
.text:00000000004027FE loc_4027FE:                             ; CODE XREF: __intel_new_feature_proc_init+2D7↓j
.text:00000000004027FE                 add     rsp, 430h
.text:0000000000402805                 pop     r14
.text:0000000000402807                 pop     r13
.text:0000000000402809                 pop     r12
.text:000000000040280B                 retn
.text:000000000040280C ; ---------------------------------------------------------------------------
.text:000000000040280C
.text:000000000040280C loc_40280C:                             ; CODE XREF: __intel_new_feature_proc_init+2F↑j
.text:000000000040280C                 test    r14, 1
.text:0000000000402813                 jnz     loc_402B08
.text:0000000000402819                 not     r12
.text:000000000040281C                 mov     edi, 39h ; '9'  ; number
.text:0000000000402821                 and     r12, r14
.text:0000000000402824                 xor     r14d, r14d
.text:0000000000402827                 xor     esi, esi
.text:0000000000402829                 xor     eax, eax
.text:000000000040282B                 call    __libirc_get_msg
.text:0000000000402830                 xor     edx, edx
.text:0000000000402832                 mov     r8b, 1
.text:0000000000402835                 mov     [rsp+448h+dest], 0
.text:0000000000402839                 xor     r13d, r13d
.text:000000000040283C                 mov     [rsp+448h+s], rax
.text:0000000000402844                 mov     [rsp+448h+var_28], r15
.text:000000000040284C                 mov     r15, r12
.text:000000000040284F                 mov     [rsp+448h+var_30], rbx
.text:0000000000402857                 mov     r12b, r8b
.text:000000000040285A                 mov     [rsp+448h+var_38], rbp
.text:0000000000402862                 mov     rbp, r14
.text:0000000000402865                 mov     r14, rdx
.text:0000000000402868
.text:0000000000402868 loc_402868:                             ; CODE XREF: __intel_new_feature_proc_init+1CE↓j
.text:0000000000402868                 mov     ecx, r13d
.text:000000000040286B                 mov     eax, 1
.text:0000000000402870                 shl     rax, cl
.text:0000000000402873                 test    rax, r15
.text:0000000000402876                 jz      loc_402984
.text:000000000040287C                 cmp     r12b, 26h ; '&'
.text:0000000000402880                 jnb     loc_402A63
.text:0000000000402886                 movzx   ebx, r12b
.text:000000000040288A                 lea     rax, c_feature_names
.text:0000000000402891                 mov     rbx, [rax+rbx*8]
.text:0000000000402895                 test    rbx, rbx
.text:0000000000402898                 jz      loc_402A63
.text:000000000040289E                 cmp     byte ptr [rbx], 0
.text:00000000004028A1                 jz      loc_402A63
.text:00000000004028A7                 cmp     [rsp+448h+dest], 0
.text:00000000004028AB                 jz      loc_40295F
.text:00000000004028B1                 test    rbp, rbp
.text:00000000004028B4                 jz      loc_40295A
.text:00000000004028BA                 mov     rdi, rbp        ; s
.text:00000000004028BD                 call    _strlen
.text:00000000004028C2                 mov     [rsp+448h+var_40], rax
.text:00000000004028CA                 mov     rdi, [rsp+448h+s] ; s
.text:00000000004028D2                 call    _strlen
.text:00000000004028D7                 mov     [rsp+448h+var_48], rax
.text:00000000004028DF                 mov     rdi, rbx        ; s
.text:00000000004028E2                 call    _strlen
.text:00000000004028E7                 mov     r9, rax
.text:00000000004028EA                 mov     rax, [rsp+448h+var_40]
.text:00000000004028F2                 add     rax, r14
.text:00000000004028F5                 add     rax, [rsp+448h+var_48]
.text:00000000004028FD                 lea     r9, [rax+r9+2]
.text:0000000000402902                 cmp     r9, 400h
.text:0000000000402909                 jnb     loc_402A9C
.text:000000000040290F                 neg     r14
.text:0000000000402912                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000402916                 add     r14, 3FFh
.text:000000000040291D                 lea     rsi, src        ; ", "
.text:0000000000402924                 mov     rdx, r14        ; n
.text:0000000000402927                 call    _strncat
.text:000000000040292C                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000402930                 call    _strlen
.text:0000000000402935                 movsxd  rdx, eax
.text:0000000000402938                 lea     rdi, [rsp+448h+dest] ; dest
.text:000000000040293C                 neg     rdx
.text:000000000040293F                 mov     rsi, rbp        ; src
.text:0000000000402942                 add     rdx, 3FFh       ; n
.text:0000000000402949                 call    _strncat
.text:000000000040294E                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000402952                 call    _strlen
.text:0000000000402957                 movsxd  r14, eax
.text:000000000040295A
.text:000000000040295A loc_40295A:                             ; CODE XREF: __intel_new_feature_proc_init+F4↑j
.text:000000000040295A                 mov     rbp, rbx
.text:000000000040295D                 jmp     short loc_402984
.text:000000000040295F ; ---------------------------------------------------------------------------
.text:000000000040295F
.text:000000000040295F loc_40295F:                             ; CODE XREF: __intel_new_feature_proc_init+EB↑j
.text:000000000040295F                 neg     r14
.text:0000000000402962                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000402966                 add     r14, 3FFh
.text:000000000040296D                 mov     rsi, rbx        ; src
.text:0000000000402970                 mov     rdx, r14        ; n
.text:0000000000402973                 call    _strncat
.text:0000000000402978                 lea     rdi, [rsp+448h+dest] ; s
.text:000000000040297C                 call    _strlen
.text:0000000000402981                 movsxd  r14, eax
.text:0000000000402984
.text:0000000000402984 loc_402984:                             ; CODE XREF: __intel_new_feature_proc_init+B6↑j
.text:0000000000402984                                         ; __intel_new_feature_proc_init+19D↑j
.text:0000000000402984                 inc     r12b
.text:0000000000402987                 inc     r13d
.text:000000000040298A                 cmp     r12b, 25h ; '%'
.text:000000000040298E                 jle     loc_402868
.text:0000000000402994                 mov     rdx, r14
.text:0000000000402997                 mov     r14, rbp
.text:000000000040299A                 mov     rax, [rsp+448h+s]
.text:00000000004029A2                 test    r14, r14
.text:00000000004029A5                 mov     r15, [rsp+448h+var_28]
.text:00000000004029AD                 mov     rbx, [rsp+448h+var_30]
.text:00000000004029B5                 mov     rbp, [rsp+448h+var_38]
.text:00000000004029BD                 jz      short loc_4029F7
.text:00000000004029BF                 neg     rdx
.text:00000000004029C2                 lea     rdi, [rsp+448h+dest] ; dest
.text:00000000004029C6                 add     rdx, 3FFh       ; n
.text:00000000004029CD                 mov     rsi, rax        ; src
.text:00000000004029D0                 call    _strncat
.text:00000000004029D5                 lea     rdi, [rsp+448h+dest] ; s
.text:00000000004029D9                 call    _strlen
.text:00000000004029DE                 movsxd  rdx, eax
.text:00000000004029E1                 lea     rdi, [rsp+448h+dest] ; dest
.text:00000000004029E5                 neg     rdx
.text:00000000004029E8                 mov     rsi, r14        ; src
.text:00000000004029EB                 add     rdx, 3FFh       ; n
.text:00000000004029F2                 call    _strncat
.text:00000000004029F7
.text:00000000004029F7 loc_4029F7:                             ; CODE XREF: __intel_new_feature_proc_init+1FD↑j
.text:00000000004029F7                                         ; __intel_new_feature_proc_init+343↓j
.text:00000000004029F7                 cmp     [rsp+448h+dest], 0
.text:00000000004029FB                 jnz     short loc_402A3A
.text:00000000004029FD                 xor     esi, esi
.text:00000000004029FF                 mov     edi, 1
.text:0000000000402A04                 xor     edx, edx
.text:0000000000402A06                 xor     eax, eax
.text:0000000000402A08                 call    __libirc_print
.text:0000000000402A0D
.text:0000000000402A0D loc_402A0D:                             ; CODE XREF: __intel_new_feature_proc_init+2CB↓j
.text:0000000000402A0D                                         ; __intel_new_feature_proc_init+358↓j
.text:0000000000402A0D                 mov     edi, 1
.text:0000000000402A12                 mov     esi, 3Ah ; ':'
.text:0000000000402A17                 xor     edx, edx
.text:0000000000402A19                 xor     eax, eax
.text:0000000000402A1B                 call    __libirc_print
.text:0000000000402A20
.text:0000000000402A20 loc_402A20:                             ; CODE XREF: __intel_new_feature_proc_init+2A1↓j
.text:0000000000402A20                                         ; __intel_new_feature_proc_init+39A↓j
.text:0000000000402A20                 xor     esi, esi
.text:0000000000402A22                 mov     edi, 1
.text:0000000000402A27                 xor     edx, edx
.text:0000000000402A29                 xor     eax, eax
.text:0000000000402A2B                 call    __libirc_print
.text:0000000000402A30                 mov     edi, 1          ; status
.text:0000000000402A35                 call    _exit
.text:0000000000402A3A ; ---------------------------------------------------------------------------
.text:0000000000402A3A
.text:0000000000402A3A loc_402A3A:                             ; CODE XREF: __intel_new_feature_proc_init+23B↑j
.text:0000000000402A3A                 xor     esi, esi
.text:0000000000402A3C                 mov     edi, 1
.text:0000000000402A41                 xor     edx, edx
.text:0000000000402A43                 xor     eax, eax
.text:0000000000402A45                 call    __libirc_print
.text:0000000000402A4A                 mov     edi, 1
.text:0000000000402A4F                 mov     esi, 38h ; '8'
.text:0000000000402A54                 mov     edx, edi
.text:0000000000402A56                 lea     rcx, [rsp+448h+dest]
.text:0000000000402A5A                 xor     eax, eax
.text:0000000000402A5C                 call    __libirc_print
.text:0000000000402A61                 jmp     short loc_402A20
.text:0000000000402A63 ; ---------------------------------------------------------------------------
.text:0000000000402A63
.text:0000000000402A63 loc_402A63:                             ; CODE XREF: __intel_new_feature_proc_init+C0↑j
.text:0000000000402A63                                         ; __intel_new_feature_proc_init+D8↑j ...
.text:0000000000402A63                 mov     r15, [rsp+448h+var_28]
.text:0000000000402A6B                 mov     rbx, [rsp+448h+var_30]
.text:0000000000402A73                 mov     rbp, [rsp+448h+var_38]
.text:0000000000402A7B                 xor     esi, esi
.text:0000000000402A7D                 mov     edi, 1
.text:0000000000402A82                 xor     edx, edx
.text:0000000000402A84                 xor     eax, eax
.text:0000000000402A86                 call    __libirc_print
.text:0000000000402A8B                 jmp     short loc_402A0D
.text:0000000000402A8D ; ---------------------------------------------------------------------------
.text:0000000000402A8D
.text:0000000000402A8D loc_402A8D:                             ; CODE XREF: __intel_new_feature_proc_init+38↑j
.text:0000000000402A8D                 xor     edi, edi
.text:0000000000402A8F                 mov     esi, r13d
.text:0000000000402A92                 call    __intel_proc_init_ftzdazule
.text:0000000000402A97                 jmp     loc_4027FE
.text:0000000000402A9C ; ---------------------------------------------------------------------------
.text:0000000000402A9C
.text:0000000000402A9C loc_402A9C:                             ; CODE XREF: __intel_new_feature_proc_init+149↑j
.text:0000000000402A9C                 mov     rdx, r14
.text:0000000000402A9F                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000402AA3                 neg     rdx
.text:0000000000402AA6                 mov     r14, rbp
.text:0000000000402AA9                 mov     rax, [rsp+448h+s]
.text:0000000000402AB1                 add     rdx, 3FFh       ; n
.text:0000000000402AB8                 mov     rsi, rax        ; src
.text:0000000000402ABB                 mov     r15, [rsp+448h+var_28]
.text:0000000000402AC3                 mov     rbx, [rsp+448h+var_30]
.text:0000000000402ACB                 mov     rbp, [rsp+448h+var_38]
.text:0000000000402AD3                 call    _strncat
.text:0000000000402AD8                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000402ADC                 call    _strlen
.text:0000000000402AE1                 movsxd  rdx, eax
.text:0000000000402AE4                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000402AE8                 neg     rdx
.text:0000000000402AEB                 mov     rsi, r14        ; src
.text:0000000000402AEE                 add     rdx, 3FFh       ; n
.text:0000000000402AF5                 call    _strncat
.text:0000000000402AFA                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000402AFE                 call    _strlen
.text:0000000000402B03                 jmp     loc_4029F7
.text:0000000000402B08 ; ---------------------------------------------------------------------------
.text:0000000000402B08
.text:0000000000402B08 loc_402B08:                             ; CODE XREF: __intel_new_feature_proc_init+53↑j
.text:0000000000402B08                 xor     esi, esi
.text:0000000000402B0A                 mov     edi, 1
.text:0000000000402B0F                 xor     edx, edx
.text:0000000000402B11                 xor     eax, eax
.text:0000000000402B13                 call    __libirc_print
.text:0000000000402B18                 jmp     loc_402A0D
.text:0000000000402B1D ; ---------------------------------------------------------------------------
.text:0000000000402B1D
.text:0000000000402B1D loc_402B1D:                             ; CODE XREF: __intel_new_feature_proc_init+20↑j
.text:0000000000402B1D                 xor     eax, eax
.text:0000000000402B1F                 call    __intel_cpu_features_init
.text:0000000000402B24                 mov     rax, cs:__intel_cpu_feature_indicator_ptr
.text:0000000000402B2B                 mov     r12, [rax]
.text:0000000000402B2E                 test    r12, r12
.text:0000000000402B31                 jnz     loc_4027E6
.text:0000000000402B37                 xor     esi, esi
.text:0000000000402B39                 mov     edi, 1
.text:0000000000402B3E                 xor     edx, edx
.text:0000000000402B40                 xor     eax, eax
.text:0000000000402B42                 call    __libirc_print
.text:0000000000402B47                 mov     edi, 1
.text:0000000000402B4C                 mov     esi, 3Bh ; ';'
.text:0000000000402B51                 xor     edx, edx
.text:0000000000402B53                 xor     eax, eax
.text:0000000000402B55                 call    __libirc_print
.text:0000000000402B5A                 jmp     loc_402A20
.text:0000000000402B5A __intel_new_feature_proc_init endp
.text:0000000000402B5A
.text:0000000000402B5A ; ---------------------------------------------------------------------------
.text:0000000000402B5F                 align 20h
.text:0000000000402B5F ; } // starts at 4027C0
.text:0000000000402B60
.text:0000000000402B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000402B60
.text:0000000000402B60
.text:0000000000402B60                 public __intel_sse2_strlen
.text:0000000000402B60 __intel_sse2_strlen proc near           ; CODE XREF: std::char_traits<char>::length(char const*)+27↑p
.text:0000000000402B60 ; __unwind {
.text:0000000000402B60                 pxor    xmm0, xmm0
.text:0000000000402B64
.text:0000000000402B64 loc_402B64:                             ; CODE XREF: __intel_sse2_strlen+16↓j
.text:0000000000402B64                 add     rax, 10h
.text:0000000000402B68                 movdqa  xmm1, xmmword ptr [rax]
.text:0000000000402B6C                 pcmpeqb xmm1, xmm0
.text:0000000000402B70                 pmovmskb ecx, xmm1
.text:0000000000402B74                 test    ecx, ecx
.text:0000000000402B76                 jz      short loc_402B64
.text:0000000000402B78                 bsf     ecx, ecx
.text:0000000000402B7B                 sub     rcx, rdx
.text:0000000000402B7E                 add     rax, rcx
.text:0000000000402B81                 retn
.text:0000000000402B81 __intel_sse2_strlen endp
.text:0000000000402B81
.text:0000000000402B81 ; ---------------------------------------------------------------------------
.text:0000000000402B82                 align 10h
.text:0000000000402B82 ; } // starts at 402B60
.text:0000000000402B90
.text:0000000000402B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000402B90
.text:0000000000402B90
.text:0000000000402B90 ; __int64 __usercall _libirc_get_msg@<rax>(int number@<edi>, char)
.text:0000000000402B90                 public __libirc_get_msg
.text:0000000000402B90 __libirc_get_msg proc near              ; CODE XREF: __intel_new_feature_proc_init+6B↑p
.text:0000000000402B90
.text:0000000000402B90 dest            = byte ptr -168h
.text:0000000000402B90 var_E8          = byte ptr -0E8h
.text:0000000000402B90 var_D8          = qword ptr -0D8h
.text:0000000000402B90 var_D0          = qword ptr -0D0h
.text:0000000000402B90 var_C8          = qword ptr -0C8h
.text:0000000000402B90 var_C0          = qword ptr -0C0h
.text:0000000000402B90 var_39          = byte ptr -39h
.text:0000000000402B90 arg             = dword ptr -38h
.text:0000000000402B90 var_34          = dword ptr -34h
.text:0000000000402B90 var_30          = qword ptr -30h
.text:0000000000402B90 var_28          = qword ptr -28h
.text:0000000000402B90 arg_0           = byte ptr  8
.text:0000000000402B90
.text:0000000000402B90 ; __unwind {
.text:0000000000402B90                 push    r12
.text:0000000000402B92                 push    r13
.text:0000000000402B94                 push    r14
.text:0000000000402B96                 sub     rsp, 150h
.text:0000000000402B9D                 mov     [rsp+168h+var_D8], rdx
.text:0000000000402BA5                 mov     [rsp+168h+var_D0], rcx
.text:0000000000402BAD                 mov     [rsp+168h+var_C8], r8
.text:0000000000402BB5                 mov     [rsp+168h+var_C0], r9
.text:0000000000402BBD                 movzx   r11d, al
.text:0000000000402BC1                 lea     rax, ds:0[r11*4]
.text:0000000000402BC9                 lea     r11, loc_402BFE
.text:0000000000402BD0                 sub     r11, rax
.text:0000000000402BD3                 lea     rax, [rsp+168h+var_39]
.text:0000000000402BDB                 jmp     r11
.text:0000000000402BDE                 movaps  xmmword ptr [rax-0Fh], xmm7
.text:0000000000402BE2                 movaps  xmmword ptr [rax-1Fh], xmm6
.text:0000000000402BE6                 movaps  xmmword ptr [rax-2Fh], xmm5
.text:0000000000402BEA                 movaps  xmmword ptr [rax-3Fh], xmm4
.text:0000000000402BEE                 movaps  xmmword ptr [rax-4Fh], xmm3
.text:0000000000402BF2                 movaps  xmmword ptr [rax-5Fh], xmm2
.text:0000000000402BF6                 movaps  xmmword ptr [rax-6Fh], xmm1
.text:0000000000402BFA                 movaps  xmmword ptr [rax-7Fh], xmm0
.text:0000000000402BFE
.text:0000000000402BFE loc_402BFE:                             ; DATA XREF: __libirc_get_msg+39↑o
.text:0000000000402BFE                 mov     r13d, edi
.text:0000000000402C01                 mov     r14d, esi
.text:0000000000402C04                 test    r13d, r13d
.text:0000000000402C07                 jz      loc_402C97
.text:0000000000402C0D                 cmp     cs:first_msg, 0
.text:0000000000402C14                 jz      short loc_402C64
.text:0000000000402C16                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:0000000000402C1D                 xor     esi, esi        ; flag
.text:0000000000402C1F                 mov     cs:first_msg, 0
.text:0000000000402C29                 call    _catopen
.text:0000000000402C2E                 mov     cs:message_catalog, rax
.text:0000000000402C35                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000402C39                 jz      loc_402D16
.text:0000000000402C3F                 mov     rdi, cs:message_catalog ; catalog
.text:0000000000402C46
.text:0000000000402C46 loc_402C46:                             ; CODE XREF: __libirc_get_msg+212↓j
.text:0000000000402C46                 movsxd  rax, r13d
.text:0000000000402C49                 lea     rcx, off_605048 ; "\n"
.text:0000000000402C50                 shl     rax, 4
.text:0000000000402C54                 mov     cs:use_internal_msg, 0
.text:0000000000402C5E                 mov     rcx, [rax+rcx]  ; string
.text:0000000000402C62                 jmp     short loc_402C85
.text:0000000000402C64 ; ---------------------------------------------------------------------------
.text:0000000000402C64
.text:0000000000402C64 loc_402C64:                             ; CODE XREF: __libirc_get_msg+84↑j
.text:0000000000402C64                                         ; __libirc_get_msg+218↓j
.text:0000000000402C64                 mov     edi, cs:use_internal_msg
.text:0000000000402C6A                 movsxd  rax, r13d
.text:0000000000402C6D                 lea     rcx, off_605048 ; "\n"
.text:0000000000402C74                 shl     rax, 4
.text:0000000000402C78                 test    edi, edi
.text:0000000000402C7A                 mov     rcx, [rax+rcx]
.text:0000000000402C7E                 jnz     short loc_402C9E
.text:0000000000402C80                 jmp     loc_402DAD
.text:0000000000402C85 ; ---------------------------------------------------------------------------
.text:0000000000402C85
.text:0000000000402C85 loc_402C85:                             ; CODE XREF: __libirc_get_msg+D2↑j
.text:0000000000402C85                                         ; __libirc_get_msg+224↓j
.text:0000000000402C85                 mov     esi, 1          ; set
.text:0000000000402C8A                 mov     edx, r13d       ; number
.text:0000000000402C8D                 call    _catgets
.text:0000000000402C92                 mov     rcx, rax
.text:0000000000402C95                 jmp     short loc_402C9E
.text:0000000000402C97 ; ---------------------------------------------------------------------------
.text:0000000000402C97
.text:0000000000402C97 loc_402C97:                             ; CODE XREF: __libirc_get_msg+77↑j
.text:0000000000402C97                 lea     rcx, aCannotAllocate+34h ; ""
.text:0000000000402C9E
.text:0000000000402C9E loc_402C9E:                             ; CODE XREF: __libirc_get_msg+EE↑j
.text:0000000000402C9E                                         ; __libirc_get_msg+105↑j
.text:0000000000402C9E                 test    r14d, r14d
.text:0000000000402CA1                 jle     short loc_402D05
.text:0000000000402CA3                 mov     [rsp+168h+arg], 10h
.text:0000000000402CAE                 lea     rdx, [rsp+168h+arg_0]
.text:0000000000402CB6                 mov     [rsp+168h+var_34], 30h ; '0'
.text:0000000000402CC1                 lea     rdi, [rsp+168h+var_E8]
.text:0000000000402CC9                 mov     [rsp+168h+var_30], rdx
.text:0000000000402CD1                 mov     [rsp+168h+var_28], rdi
.text:0000000000402CD9                 lea     rdi, get_msg_buf ; s
.text:0000000000402CE0                 mov     rsi, rcx        ; format
.text:0000000000402CE3                 lea     rdx, [rsp+168h+arg] ; arg
.text:0000000000402CEB                 call    _vsprintf
.text:0000000000402CF0                 lea     rax, get_msg_buf
.text:0000000000402CF7                 add     rsp, 150h
.text:0000000000402CFE                 pop     r14
.text:0000000000402D00                 pop     r13
.text:0000000000402D02                 pop     r12
.text:0000000000402D04                 retn
.text:0000000000402D05 ; ---------------------------------------------------------------------------
.text:0000000000402D05
.text:0000000000402D05 loc_402D05:                             ; CODE XREF: __libirc_get_msg+111↑j
.text:0000000000402D05                 mov     rax, rcx
.text:0000000000402D08                 add     rsp, 150h
.text:0000000000402D0F                 pop     r14
.text:0000000000402D11                 pop     r13
.text:0000000000402D13                 pop     r12
.text:0000000000402D15                 retn
.text:0000000000402D16 ; ---------------------------------------------------------------------------
.text:0000000000402D16
.text:0000000000402D16 loc_402D16:                             ; CODE XREF: __libirc_get_msg+A9↑j
.text:0000000000402D16                 lea     rdi, name       ; "LANG"
.text:0000000000402D1D                 call    _getenv
.text:0000000000402D22                 test    rax, rax
.text:0000000000402D25                 jz      short loc_402D97
.text:0000000000402D27                 mov     rsi, rax        ; src
.text:0000000000402D2A                 lea     rdi, [rsp+168h+dest] ; dest
.text:0000000000402D2E                 mov     edx, 80h        ; n
.text:0000000000402D33                 call    _strncpy
.text:0000000000402D38                 mov     esi, 2Eh ; '.'  ; c
.text:0000000000402D3D                 lea     rdi, [rsp+168h+dest] ; s
.text:0000000000402D41                 call    _strchr
.text:0000000000402D46                 mov     r12, rax
.text:0000000000402D49                 test    r12, r12
.text:0000000000402D4C                 jz      short loc_402D97
.text:0000000000402D4E                 lea     rdi, name       ; "LANG"
.text:0000000000402D55                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000402D59                 mov     edx, 1          ; replace
.text:0000000000402D5E                 mov     byte ptr [r12], 0
.text:0000000000402D63                 call    _setenv
.text:0000000000402D68                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:0000000000402D6F                 xor     esi, esi        ; flag
.text:0000000000402D71                 call    _catopen
.text:0000000000402D76                 lea     rdi, name       ; "LANG"
.text:0000000000402D7D                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000402D81                 mov     edx, 1          ; replace
.text:0000000000402D86                 mov     cs:message_catalog, rax
.text:0000000000402D8D                 mov     byte ptr [r12], 2Eh ; '.'
.text:0000000000402D92                 call    _setenv
.text:0000000000402D97
.text:0000000000402D97 loc_402D97:                             ; CODE XREF: __libirc_get_msg+195↑j
.text:0000000000402D97                                         ; __libirc_get_msg+1BC↑j
.text:0000000000402D97                 mov     rdi, cs:message_catalog
.text:0000000000402D9E                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000402DA2                 jnz     loc_402C46
.text:0000000000402DA8                 jmp     loc_402C64
.text:0000000000402DAD ; ---------------------------------------------------------------------------
.text:0000000000402DAD
.text:0000000000402DAD loc_402DAD:                             ; CODE XREF: __libirc_get_msg+F0↑j
.text:0000000000402DAD                 mov     rdi, cs:message_catalog
.text:0000000000402DB4                 jmp     loc_402C85
.text:0000000000402DB4 __libirc_get_msg endp
.text:0000000000402DB4
.text:0000000000402DB4 ; ---------------------------------------------------------------------------
.text:0000000000402DB9                 align 20h
.text:0000000000402DB9 ; } // starts at 402B90
.text:0000000000402DC0
.text:0000000000402DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000402DC0
.text:0000000000402DC0
.text:0000000000402DC0                 public __libirc_print
.text:0000000000402DC0 __libirc_print  proc near               ; CODE XREF: __intel_new_feature_proc_init+248↑p
.text:0000000000402DC0                                         ; __intel_new_feature_proc_init+25B↑p ...
.text:0000000000402DC0
.text:0000000000402DC0 dest            = byte ptr -168h
.text:0000000000402DC0 var_E8          = byte ptr -0E8h
.text:0000000000402DC0 var_D0          = qword ptr -0D0h
.text:0000000000402DC0 var_C8          = qword ptr -0C8h
.text:0000000000402DC0 var_C0          = qword ptr -0C0h
.text:0000000000402DC0 var_39          = byte ptr -39h
.text:0000000000402DC0 arg             = dword ptr -38h
.text:0000000000402DC0 var_34          = dword ptr -34h
.text:0000000000402DC0 var_30          = qword ptr -30h
.text:0000000000402DC0 var_28          = qword ptr -28h
.text:0000000000402DC0 arg_0           = byte ptr  8
.text:0000000000402DC0
.text:0000000000402DC0 ; __unwind {
.text:0000000000402DC0                 push    r13
.text:0000000000402DC2                 push    r14
.text:0000000000402DC4                 push    r15
.text:0000000000402DC6                 push    rbx
.text:0000000000402DC7                 sub     rsp, 148h
.text:0000000000402DCE                 mov     [rsp+168h+var_D0], rcx
.text:0000000000402DD6                 mov     [rsp+168h+var_C8], r8
.text:0000000000402DDE                 mov     [rsp+168h+var_C0], r9
.text:0000000000402DE6                 movzx   r11d, al
.text:0000000000402DEA                 lea     rax, ds:0[r11*4]
.text:0000000000402DF2                 lea     r11, loc_402E27
.text:0000000000402DF9                 sub     r11, rax
.text:0000000000402DFC                 lea     rax, [rsp+168h+var_39]
.text:0000000000402E04                 jmp     r11
.text:0000000000402E07                 movaps  xmmword ptr [rax-0Fh], xmm7
.text:0000000000402E0B                 movaps  xmmword ptr [rax-1Fh], xmm6
.text:0000000000402E0F                 movaps  xmmword ptr [rax-2Fh], xmm5
.text:0000000000402E13                 movaps  xmmword ptr [rax-3Fh], xmm4
.text:0000000000402E17                 movaps  xmmword ptr [rax-4Fh], xmm3
.text:0000000000402E1B                 movaps  xmmword ptr [rax-5Fh], xmm2
.text:0000000000402E1F                 movaps  xmmword ptr [rax-6Fh], xmm1
.text:0000000000402E23                 movaps  xmmword ptr [rax-7Fh], xmm0
.text:0000000000402E27
.text:0000000000402E27 loc_402E27:                             ; DATA XREF: __libirc_print+32↑o
.text:0000000000402E27                 mov     r14d, esi
.text:0000000000402E2A                 mov     r15d, edx
.text:0000000000402E2D                 mov     r13d, edi
.text:0000000000402E30                 test    r14d, r14d
.text:0000000000402E33                 jnz     short loc_402E5C
.text:0000000000402E35                 cmp     r13d, 1
.text:0000000000402E39                 jz      loc_402F6E
.text:0000000000402E3F                 lea     rdi, asc_403724 ; "\n"
.text:0000000000402E46                 xor     eax, eax
.text:0000000000402E48                 call    _printf
.text:0000000000402E4D                 add     rsp, 148h
.text:0000000000402E54                 pop     rbx
.text:0000000000402E55                 pop     r15
.text:0000000000402E57                 pop     r14
.text:0000000000402E59                 pop     r13
.text:0000000000402E5B                 retn
.text:0000000000402E5C ; ---------------------------------------------------------------------------
.text:0000000000402E5C
.text:0000000000402E5C loc_402E5C:                             ; CODE XREF: __libirc_print+73↑j
.text:0000000000402E5C                 cmp     cs:first_msg, 0
.text:0000000000402E63                 jz      short loc_402EB3
.text:0000000000402E65                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:0000000000402E6C                 xor     esi, esi        ; flag
.text:0000000000402E6E                 mov     cs:first_msg, 0
.text:0000000000402E78                 call    _catopen
.text:0000000000402E7D                 mov     cs:message_catalog, rax
.text:0000000000402E84                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000402E88                 jz      loc_402F95
.text:0000000000402E8E                 mov     rdi, cs:message_catalog ; catalog
.text:0000000000402E95
.text:0000000000402E95 loc_402E95:                             ; CODE XREF: __libirc_print+25D↓j
.text:0000000000402E95                 movsxd  rax, r14d
.text:0000000000402E98                 lea     rcx, off_605048 ; "\n"
.text:0000000000402E9F                 shl     rax, 4
.text:0000000000402EA3                 mov     cs:use_internal_msg, 0
.text:0000000000402EAD                 mov     rcx, [rax+rcx]  ; string
.text:0000000000402EB1                 jmp     short loc_402ED4
.text:0000000000402EB3 ; ---------------------------------------------------------------------------
.text:0000000000402EB3
.text:0000000000402EB3 loc_402EB3:                             ; CODE XREF: __libirc_print+A3↑j
.text:0000000000402EB3                                         ; __libirc_print+263↓j
.text:0000000000402EB3                 mov     ebx, cs:use_internal_msg
.text:0000000000402EB9                 movsxd  rax, r14d
.text:0000000000402EBC                 lea     rcx, off_605048 ; "\n"
.text:0000000000402EC3                 shl     rax, 4
.text:0000000000402EC7                 test    ebx, ebx
.text:0000000000402EC9                 mov     rcx, [rax+rcx]
.text:0000000000402ECD                 jnz     short loc_402EE4
.text:0000000000402ECF                 jmp     loc_403063
.text:0000000000402ED4 ; ---------------------------------------------------------------------------
.text:0000000000402ED4
.text:0000000000402ED4 loc_402ED4:                             ; CODE XREF: __libirc_print+F1↑j
.text:0000000000402ED4                                         ; __libirc_print+2AA↓j
.text:0000000000402ED4                 mov     esi, 1          ; set
.text:0000000000402ED9                 mov     edx, r14d       ; number
.text:0000000000402EDC                 call    _catgets
.text:0000000000402EE1                 mov     rcx, rax
.text:0000000000402EE4
.text:0000000000402EE4 loc_402EE4:                             ; CODE XREF: __libirc_print+10D↑j
.text:0000000000402EE4                 test    r15d, r15d
.text:0000000000402EE7                 jle     short loc_402F3D
.text:0000000000402EE9                 mov     [rsp+168h+arg], 18h
.text:0000000000402EF4                 lea     rax, [rsp+168h+arg_0]
.text:0000000000402EFC                 mov     [rsp+168h+var_34], 30h ; '0'
.text:0000000000402F07                 lea     rdx, [rsp+168h+var_E8]
.text:0000000000402F0F                 mov     [rsp+168h+var_30], rax
.text:0000000000402F17                 mov     [rsp+168h+var_28], rdx
.text:0000000000402F1F                 lea     rdi, print_buf  ; s
.text:0000000000402F26                 mov     rsi, rcx        ; format
.text:0000000000402F29                 lea     rdx, [rsp+168h+arg] ; arg
.text:0000000000402F31                 call    _vsprintf
.text:0000000000402F36                 lea     rcx, print_buf
.text:0000000000402F3D
.text:0000000000402F3D loc_402F3D:                             ; CODE XREF: __libirc_print+127↑j
.text:0000000000402F3D                 cmp     r13d, 1
.text:0000000000402F41                 jz      loc_403028
.text:0000000000402F47                 mov     rdi, rcx        ; format
.text:0000000000402F4A                 xor     eax, eax
.text:0000000000402F4C                 call    _printf
.text:0000000000402F51                 lea     rdi, asc_403724 ; "\n"
.text:0000000000402F58                 xor     eax, eax
.text:0000000000402F5A                 call    _printf
.text:0000000000402F5F                 add     rsp, 148h
.text:0000000000402F66                 pop     rbx
.text:0000000000402F67                 pop     r15
.text:0000000000402F69                 pop     r14
.text:0000000000402F6B                 pop     r13
.text:0000000000402F6D                 retn
.text:0000000000402F6E ; ---------------------------------------------------------------------------
.text:0000000000402F6E
.text:0000000000402F6E loc_402F6E:                             ; CODE XREF: __libirc_print+79↑j
.text:0000000000402F6E                 mov     rax, cs:stderr_ptr
.text:0000000000402F75                 lea     rsi, asc_403724 ; "\n"
.text:0000000000402F7C                 mov     rdi, [rax]      ; stream
.text:0000000000402F7F                 xor     eax, eax
.text:0000000000402F81                 call    _fprintf
.text:0000000000402F86                 add     rsp, 148h
.text:0000000000402F8D                 pop     rbx
.text:0000000000402F8E                 pop     r15
.text:0000000000402F90                 pop     r14
.text:0000000000402F92                 pop     r13
.text:0000000000402F94                 retn
.text:0000000000402F95 ; ---------------------------------------------------------------------------
.text:0000000000402F95
.text:0000000000402F95 loc_402F95:                             ; CODE XREF: __libirc_print+C8↑j
.text:0000000000402F95                 lea     rdi, name       ; "LANG"
.text:0000000000402F9C                 call    _getenv
.text:0000000000402FA1                 test    rax, rax
.text:0000000000402FA4                 jz      short loc_403012
.text:0000000000402FA6                 mov     rsi, rax        ; src
.text:0000000000402FA9                 lea     rdi, [rsp+168h+dest] ; dest
.text:0000000000402FAD                 mov     edx, 80h        ; n
.text:0000000000402FB2                 call    _strncpy
.text:0000000000402FB7                 mov     esi, 2Eh ; '.'  ; c
.text:0000000000402FBC                 lea     rdi, [rsp+168h+dest] ; s
.text:0000000000402FC0                 call    _strchr
.text:0000000000402FC5                 mov     rbx, rax
.text:0000000000402FC8                 test    rbx, rbx
.text:0000000000402FCB                 jz      short loc_403012
.text:0000000000402FCD                 lea     rdi, name       ; "LANG"
.text:0000000000402FD4                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000402FD8                 mov     edx, 1          ; replace
.text:0000000000402FDD                 mov     byte ptr [rbx], 0
.text:0000000000402FE0                 call    _setenv
.text:0000000000402FE5                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:0000000000402FEC                 xor     esi, esi        ; flag
.text:0000000000402FEE                 call    _catopen
.text:0000000000402FF3                 lea     rdi, name       ; "LANG"
.text:0000000000402FFA                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000402FFE                 mov     edx, 1          ; replace
.text:0000000000403003                 mov     cs:message_catalog, rax
.text:000000000040300A                 mov     byte ptr [rbx], 2Eh ; '.'
.text:000000000040300D                 call    _setenv
.text:0000000000403012
.text:0000000000403012 loc_403012:                             ; CODE XREF: __libirc_print+1E4↑j
.text:0000000000403012                                         ; __libirc_print+20B↑j
.text:0000000000403012                 mov     rdi, cs:message_catalog
.text:0000000000403019                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000040301D                 jnz     loc_402E95
.text:0000000000403023                 jmp     loc_402EB3
.text:0000000000403028 ; ---------------------------------------------------------------------------
.text:0000000000403028
.text:0000000000403028 loc_403028:                             ; CODE XREF: __libirc_print+181↑j
.text:0000000000403028                 mov     rax, cs:stderr_ptr
.text:000000000040302F                 mov     rsi, rcx        ; format
.text:0000000000403032                 mov     rdi, [rax]      ; stream
.text:0000000000403035                 xor     eax, eax
.text:0000000000403037                 call    _fprintf
.text:000000000040303C                 mov     rax, cs:stderr_ptr
.text:0000000000403043                 lea     rsi, asc_403724 ; "\n"
.text:000000000040304A                 mov     rdi, [rax]      ; stream
.text:000000000040304D                 xor     eax, eax
.text:000000000040304F                 call    _fprintf
.text:0000000000403054                 add     rsp, 148h
.text:000000000040305B                 pop     rbx
.text:000000000040305C                 pop     r15
.text:000000000040305E                 pop     r14
.text:0000000000403060                 pop     r13
.text:0000000000403062                 retn
.text:0000000000403063 ; ---------------------------------------------------------------------------
.text:0000000000403063
.text:0000000000403063 loc_403063:                             ; CODE XREF: __libirc_print+10F↑j
.text:0000000000403063                 mov     rdi, cs:message_catalog
.text:000000000040306A                 jmp     loc_402ED4
.text:000000000040306A __libirc_print  endp
.text:000000000040306A
.text:000000000040306A ; ---------------------------------------------------------------------------
.text:000000000040306F                 align 10h
.text:000000000040306F ; } // starts at 402DC0
.text:0000000000403070
.text:0000000000403070 ; =============== S U B R O U T I N E =======================================
.text:0000000000403070
.text:0000000000403070
.text:0000000000403070                 public __intel_cpu_features_init_x
.text:0000000000403070 __intel_cpu_features_init_x proc near
.text:0000000000403070 ; __unwind {
.text:0000000000403070                 push    rax
.text:0000000000403071                 push    rdx
.text:0000000000403072                 push    rcx
.text:0000000000403073                 push    rsi
.text:0000000000403074                 push    rdi
.text:0000000000403075                 push    r8
.text:0000000000403077                 push    r9
.text:0000000000403079                 xor     edi, edi
.text:000000000040307B                 call    __intel_cpu_features_init_body
.text:0000000000403080                 pop     r9
.text:0000000000403082                 pop     r8
.text:0000000000403084                 pop     rdi
.text:0000000000403085                 pop     rsi
.text:0000000000403086                 pop     rcx
.text:0000000000403087                 pop     rdx
.text:0000000000403088                 pop     rax
.text:0000000000403089                 retn
.text:0000000000403089 __intel_cpu_features_init_x endp
.text:0000000000403089
.text:0000000000403089 ; ---------------------------------------------------------------------------
.text:000000000040308A                 align 10h
.text:000000000040308A ; } // starts at 403070
.text:0000000000403090
.text:0000000000403090 ; =============== S U B R O U T I N E =======================================
.text:0000000000403090
.text:0000000000403090
.text:0000000000403090                 public __intel_cpu_features_init
.text:0000000000403090 __intel_cpu_features_init proc near     ; CODE XREF: __intel_new_feature_proc_init+35F↑p
.text:0000000000403090 ; __unwind {
.text:0000000000403090                 push    rax
.text:0000000000403091                 push    rdx
.text:0000000000403092                 push    rcx
.text:0000000000403093                 push    rsi
.text:0000000000403094                 push    rdi
.text:0000000000403095                 push    r8
.text:0000000000403097                 push    r9
.text:0000000000403099                 mov     edi, 1
.text:000000000040309E                 call    __intel_cpu_features_init_body
.text:00000000004030A3                 pop     r9
.text:00000000004030A5                 pop     r8
.text:00000000004030A7                 pop     rdi
.text:00000000004030A8                 pop     rsi
.text:00000000004030A9                 pop     rcx
.text:00000000004030AA                 pop     rdx
.text:00000000004030AB                 pop     rax
.text:00000000004030AC                 retn
.text:00000000004030AC __intel_cpu_features_init endp
.text:00000000004030AC
.text:00000000004030AC ; ---------------------------------------------------------------------------
.text:00000000004030AD                 align 10h
.text:00000000004030AD ; } // starts at 403090
.text:00000000004030B0
.text:00000000004030B0 ; =============== S U B R O U T I N E =======================================
.text:00000000004030B0
.text:00000000004030B0
.text:00000000004030B0 __intel_cpu_features_init_body proc near
.text:00000000004030B0                                         ; CODE XREF: __intel_cpu_features_init_x+B↑p
.text:00000000004030B0                                         ; __intel_cpu_features_init+E↑p
.text:00000000004030B0
.text:00000000004030B0 var_18          = dword ptr -18h
.text:00000000004030B0 var_14          = dword ptr -14h
.text:00000000004030B0 var_10          = dword ptr -10h
.text:00000000004030B0 var_C           = dword ptr -0Ch
.text:00000000004030B0
.text:00000000004030B0 ; __unwind {
.text:00000000004030B0                 push    rbx
.text:00000000004030B1                 mov     r11d, edi
.text:00000000004030B4                 xor     eax, eax
.text:00000000004030B6                 cpuid
.text:00000000004030B8                 mov     [rsp+8+var_18], eax
.text:00000000004030BC                 mov     [rsp+8+var_14], ebx
.text:00000000004030C0                 mov     [rsp+8+var_10], ecx
.text:00000000004030C4                 mov     [rsp+8+var_C], edx
.text:00000000004030C8                 xor     sil, sil
.text:00000000004030CB                 cmp     [rsp+8+var_18], 0
.text:00000000004030D0                 jz      loc_40340F
.text:00000000004030D6                 cmp     r11d, 1
.text:00000000004030DA                 jz      loc_40341C
.text:00000000004030E0
.text:00000000004030E0 loc_4030E0:                             ; CODE XREF: __intel_cpu_features_init_body+38A↓j
.text:00000000004030E0                 mov     eax, 1
.text:00000000004030E5                 cpuid
.text:00000000004030E7                 mov     r8d, edx
.text:00000000004030EA                 mov     r9d, eax
.text:00000000004030ED                 and     r8d, 1
.text:00000000004030F1                 mov     edi, ecx
.text:00000000004030F3                 lea     r8, ds:1[r8*2]
.text:00000000004030FB                 mov     rax, r8
.text:00000000004030FE                 or      rax, 4
.text:0000000000403102                 test    edx, 8000h
.text:0000000000403108                 cmovnz  r8, rax
.text:000000000040310C                 mov     rcx, r8
.text:000000000040310F                 or      rcx, 8
.text:0000000000403113                 test    edx, 800000h
.text:0000000000403119                 cmovnz  r8, rcx
.text:000000000040311D                 test    edx, 1000000h
.text:0000000000403123                 jz      loc_403214
.text:0000000000403129                 or      r8, 10h
.text:000000000040312D                 mov     r10, r8
.text:0000000000403130                 or      r10, 20h
.text:0000000000403134                 test    edx, 2000000h
.text:000000000040313A                 cmovnz  r8, r10
.text:000000000040313E                 mov     rsi, r8
.text:0000000000403141                 or      rsi, 40h
.text:0000000000403145                 test    edx, 4000000h
.text:000000000040314B                 cmovnz  r8, rsi
.text:000000000040314F                 mov     r10, r8
.text:0000000000403152                 or      r10, 80h
.text:0000000000403159                 test    edi, 1
.text:000000000040315F                 cmovnz  r8, r10
.text:0000000000403163                 mov     rax, r8
.text:0000000000403166                 or      rax, 100h
.text:000000000040316C                 test    edi, 200h
.text:0000000000403172                 cmovnz  r8, rax
.text:0000000000403176                 mov     rbx, r8
.text:0000000000403179                 or      rbx, 800h
.text:0000000000403180                 test    edi, 400000h
.text:0000000000403186                 cmovnz  r8, rbx
.text:000000000040318A                 mov     rcx, r8
.text:000000000040318D                 or      rcx, 200h
.text:0000000000403194                 test    edi, 80000h
.text:000000000040319A                 cmovnz  r8, rcx
.text:000000000040319E                 mov     rdx, r8
.text:00000000004031A1                 or      rdx, 400h
.text:00000000004031A8                 test    edi, 100000h
.text:00000000004031AE                 cmovnz  r8, rdx
.text:00000000004031B2                 mov     r10, r8
.text:00000000004031B5                 or      r10, 1000h
.text:00000000004031BC                 test    edi, 800000h
.text:00000000004031C2                 cmovnz  r8, r10
.text:00000000004031C6                 mov     rsi, r8
.text:00000000004031C9                 or      rsi, 2000h
.text:00000000004031D0                 test    edi, 2
.text:00000000004031D6                 cmovnz  r8, rsi
.text:00000000004031DA                 mov     sil, 1
.text:00000000004031DD                 mov     rax, r8
.text:00000000004031E0                 or      rax, 4000h
.text:00000000004031E6                 test    edi, 2000000h
.text:00000000004031EC                 cmovnz  r8, rax
.text:00000000004031F0                 mov     eax, 7
.text:00000000004031F5                 xor     ecx, ecx
.text:00000000004031F7                 cpuid
.text:00000000004031F9                 mov     r10d, ebx
.text:00000000004031FC                 mov     rbx, 800000000h
.text:0000000000403206                 or      rbx, r8
.text:0000000000403209                 test    r10d, 20000000h
.text:0000000000403210                 cmovnz  r8, rbx
.text:0000000000403214
.text:0000000000403214 loc_403214:                             ; CODE XREF: __intel_cpu_features_init_body+73↑j
.text:0000000000403214                 mov     rax, r8
.text:0000000000403217                 or      rax, 20000h
.text:000000000040321D                 test    edi, 40000000h
.text:0000000000403223                 cmovnz  r8, rax
.text:0000000000403227                 test    sil, sil
.text:000000000040322A                 jnz     short loc_403238
.text:000000000040322C                 mov     eax, 7
.text:0000000000403231                 xor     ecx, ecx
.text:0000000000403233                 cpuid
.text:0000000000403235                 mov     r10d, ebx
.text:0000000000403238
.text:0000000000403238 loc_403238:                             ; CODE XREF: __intel_cpu_features_init_body+17A↑j
.text:0000000000403238                 mov     esi, r10d
.text:000000000040323B                 mov     rcx, r8
.text:000000000040323E                 and     esi, 108h
.text:0000000000403244                 or      rcx, 80000h
.text:000000000040324B                 cmp     esi, 108h
.text:0000000000403251                 cmovz   r8, rcx
.text:0000000000403255                 mov     eax, 80000001h
.text:000000000040325A                 cpuid
.text:000000000040325C                 mov     rdx, r8
.text:000000000040325F                 or      rdx, 100000h
.text:0000000000403266                 test    cl, 20h
.text:0000000000403269                 cmovnz  r8, rdx
.text:000000000040326D                 mov     rcx, r8
.text:0000000000403270                 or      rcx, 200000h
.text:0000000000403277                 test    r10d, 10h
.text:000000000040327E                 cmovnz  r8, rcx
.text:0000000000403282                 mov     rbx, r8
.text:0000000000403285                 or      rbx, 400000h
.text:000000000040328C                 test    r10d, 800h
.text:0000000000403293                 cmovnz  r8, rbx
.text:0000000000403297                 mov     rsi, r8
.text:000000000040329A                 or      rsi, 10000000h
.text:00000000004032A1                 test    r10d, 80000h
.text:00000000004032A8                 cmovnz  r8, rsi
.text:00000000004032AC                 mov     rax, r8
.text:00000000004032AF                 or      rax, 20000000h
.text:00000000004032B5                 test    r10d, 40000h
.text:00000000004032BC                 cmovnz  r8, rax
.text:00000000004032C0                 test    edi, 8000000h
.text:00000000004032C6                 jz      loc_4033C6
.text:00000000004032CC                 xor     ecx, ecx
.text:00000000004032CE                 xgetbv
.text:00000000004032D1                 or      r8, 1
.text:00000000004032D5                 mov     edx, eax
.text:00000000004032D7                 and     edx, 6
.text:00000000004032DA                 cmp     edx, 6
.text:00000000004032DD                 jnz     loc_4033C6
.text:00000000004032E3                 mov     rdx, r8
.text:00000000004032E6                 or      rdx, 10000h
.text:00000000004032ED                 test    edi, 10000000h
.text:00000000004032F3                 cmovnz  r8, rdx
.text:00000000004032F7                 mov     rcx, r8
.text:00000000004032FA                 or      rcx, 8000h
.text:0000000000403301                 test    edi, 20000000h
.text:0000000000403307                 cmovnz  r8, rcx
.text:000000000040330B                 mov     rbx, r8
.text:000000000040330E                 or      rbx, 800000h
.text:0000000000403315                 test    r10d, 20h
.text:000000000040331C                 cmovnz  r8, rbx
.text:0000000000403320                 mov     rsi, r8
.text:0000000000403323                 or      rsi, 40000h
.text:000000000040332A                 test    edi, 1000h
.text:0000000000403330                 mov     edi, eax
.text:0000000000403332                 cmovnz  r8, rsi
.text:0000000000403336                 and     edi, 18h
.text:0000000000403339                 cmp     edi, 18h
.text:000000000040333C                 jnz     short loc_40335A
.text:000000000040333E                 or      r8, 1
.text:0000000000403342                 mov     rdx, 1000000000h
.text:000000000040334C                 or      rdx, r8
.text:000000000040334F                 test    r10d, 4000h
.text:0000000000403356                 cmovnz  r8, rdx
.text:000000000040335A
.text:000000000040335A loc_40335A:                             ; CODE XREF: __intel_cpu_features_init_body+28C↑j
.text:000000000040335A                 and     eax, 0E0h
.text:000000000040335F                 cmp     eax, 0E0h
.text:0000000000403364                 jnz     short loc_4033C6
.text:0000000000403366                 or      r8, 1
.text:000000000040336A                 mov     rdx, 400000000h
.text:0000000000403374                 mov     rax, r8
.text:0000000000403377                 mov     rcx, 100000000h
.text:0000000000403381                 or      rax, 8000000h
.text:0000000000403387                 test    r10d, 10000h
.text:000000000040338E                 mov     rbx, 200000000h
.text:0000000000403398                 cmovnz  r8, rax
.text:000000000040339C                 or      rdx, r8
.text:000000000040339F                 test    r10d, 10000000h
.text:00000000004033A6                 cmovnz  r8, rdx
.text:00000000004033AA                 or      rcx, r8
.text:00000000004033AD                 test    r10d, 8000000h
.text:00000000004033B4                 cmovnz  r8, rcx
.text:00000000004033B8                 or      rbx, r8
.text:00000000004033BB                 test    r10d, 4000000h
.text:00000000004033C2                 cmovnz  r8, rbx
.text:00000000004033C6
.text:00000000004033C6 loc_4033C6:                             ; CODE XREF: __intel_cpu_features_init_body+216↑j
.text:00000000004033C6                                         ; __intel_cpu_features_init_body+22D↑j ...
.text:00000000004033C6                 mov     eax, r9d
.text:00000000004033C9                 shr     eax, 0Ch
.text:00000000004033CC                 shr     r9d, 4
.text:00000000004033D0                 and     eax, 0F0h
.text:00000000004033D5                 and     r9d, 0Fh
.text:00000000004033D9                 add     eax, r9d
.text:00000000004033DC                 cmp     eax, 1Ch
.text:00000000004033DF                 jz      short loc_4033EB
.text:00000000004033E1                 cmp     eax, 26h ; '&'
.text:00000000004033E4                 jz      short loc_4033EB
.text:00000000004033E6                 cmp     eax, 27h ; '''
.text:00000000004033E9                 jnz     short loc_4033F0
.text:00000000004033EB
.text:00000000004033EB loc_4033EB:                             ; CODE XREF: __intel_cpu_features_init_body+32F↑j
.text:00000000004033EB                                         ; __intel_cpu_features_init_body+334↑j
.text:00000000004033EB                 bts     r8, 1Fh
.text:00000000004033F0
.text:00000000004033F0 loc_4033F0:                             ; CODE XREF: __intel_cpu_features_init_body+339↑j
.text:00000000004033F0                 cmp     r11d, 1
.text:00000000004033F4                 jz      short loc_4033FF
.text:00000000004033F6                 mov     cs:__intel_cpu_feature_indicator_x, r8
.text:00000000004033FD                 pop     rbx
.text:00000000004033FE                 retn
.text:00000000004033FF ; ---------------------------------------------------------------------------
.text:00000000004033FF
.text:00000000004033FF loc_4033FF:                             ; CODE XREF: __intel_cpu_features_init_body+344↑j
.text:00000000004033FF                 mov     cs:__intel_cpu_feature_indicator, r8
.text:0000000000403406                 mov     cs:__intel_cpu_feature_indicator_x, r8
.text:000000000040340D                 pop     rbx
.text:000000000040340E                 retn
.text:000000000040340F ; ---------------------------------------------------------------------------
.text:000000000040340F
.text:000000000040340F loc_40340F:                             ; CODE XREF: __intel_cpu_features_init_body+20↑j
.text:000000000040340F                                         ; __intel_cpu_features_init_body+374↓j ...
.text:000000000040340F                 mov     cs:__intel_cpu_feature_indicator, 1
.text:000000000040341A                 pop     rbx
.text:000000000040341B                 retn
.text:000000000040341C ; ---------------------------------------------------------------------------
.text:000000000040341C
.text:000000000040341C loc_40341C:                             ; CODE XREF: __intel_cpu_features_init_body+2A↑j
.text:000000000040341C                 cmp     [rsp+8+var_14], 756E6547h
.text:0000000000403424                 jnz     short loc_40340F
.text:0000000000403426                 cmp     [rsp+8+var_C], 49656E69h
.text:000000000040342E                 jnz     short loc_40340F
.text:0000000000403430                 cmp     [rsp+8+var_10], 6C65746Eh
.text:0000000000403438                 jnz     short loc_40340F
.text:000000000040343A                 jmp     loc_4030E0
.text:000000000040343A __intel_cpu_features_init_body endp
.text:000000000040343A
.text:000000000040343A ; ---------------------------------------------------------------------------
.text:000000000040343F                 align 20h
.text:000000000040343F ; } // starts at 4030B0
.text:0000000000403440
.text:0000000000403440 ; =============== S U B R O U T I N E =======================================
.text:0000000000403440
.text:0000000000403440
.text:0000000000403440                 public __intel_proc_init_ftzdazule
.text:0000000000403440 __intel_proc_init_ftzdazule proc near   ; CODE XREF: __intel_new_feature_proc_init+2D2↑p
.text:0000000000403440
.text:0000000000403440 s               = dword ptr -218h
.text:0000000000403440 var_1FC         = dword ptr -1FCh
.text:0000000000403440
.text:0000000000403440 ; __unwind {
.text:0000000000403440                 push    r15
.text:0000000000403442                 push    rbx
.text:0000000000403443                 push    rbp
.text:0000000000403444                 sub     rsp, 200h
.text:000000000040344B                 mov     ebx, esi
.text:000000000040344D                 mov     ebp, ebx
.text:000000000040344F                 mov     r15d, ebx
.text:0000000000403452                 and     ebp, 4
.text:0000000000403455                 and     r15d, 2
.text:0000000000403459                 jz      short loc_403463
.text:000000000040345B                 test    edi, 2
.text:0000000000403461                 jz      short loc_40346F
.text:0000000000403463
.text:0000000000403463 loc_403463:                             ; CODE XREF: __intel_proc_init_ftzdazule+19↑j
.text:0000000000403463                 test    ebp, ebp
.text:0000000000403465                 jz      short loc_403497
.text:0000000000403467                 test    edi, 4
.text:000000000040346D                 jnz     short loc_403497
.text:000000000040346F
.text:000000000040346F loc_40346F:                             ; CODE XREF: __intel_proc_init_ftzdazule+21↑j
.text:000000000040346F                 xor     esi, esi        ; c
.text:0000000000403471                 lea     rdi, [rsp+218h+s] ; s
.text:0000000000403475                 mov     edx, 200h       ; n
.text:000000000040347A                 call    _memset
.text:000000000040347F                 fxsave  [rsp+218h+s]
.text:0000000000403483                 xor     edx, edx
.text:0000000000403485                 mov     eax, [rsp+218h+var_1FC]
.text:0000000000403489                 test    al, 40h
.text:000000000040348B                 cmovz   r15d, edx
.text:000000000040348F                 test    eax, 20000h
.text:0000000000403494                 cmovz   ebp, edx
.text:0000000000403497
.text:0000000000403497 loc_403497:                             ; CODE XREF: __intel_proc_init_ftzdazule+25↑j
.text:0000000000403497                                         ; __intel_proc_init_ftzdazule+2D↑j
.text:0000000000403497                 test    bl, 1
.text:000000000040349A                 jnz     short loc_4034D5
.text:000000000040349C
.text:000000000040349C loc_40349C:                             ; CODE XREF: __intel_proc_init_ftzdazule+A8↓j
.text:000000000040349C                 test    r15d, r15d
.text:000000000040349F                 jz      short loc_4034B2
.text:00000000004034A1                 stmxcsr [rsp+218h+s]
.text:00000000004034A5                 mov     eax, [rsp+218h+s]
.text:00000000004034A8                 or      eax, 40h
.text:00000000004034AB                 mov     [rsp+218h+s], eax
.text:00000000004034AE                 ldmxcsr [rsp+218h+s]
.text:00000000004034B2
.text:00000000004034B2 loc_4034B2:                             ; CODE XREF: __intel_proc_init_ftzdazule+5F↑j
.text:00000000004034B2                 test    ebp, ebp
.text:00000000004034B4                 jz      short loc_4034C9
.text:00000000004034B6                 stmxcsr [rsp+218h+s]
.text:00000000004034BA                 mov     eax, [rsp+218h+s]
.text:00000000004034BD                 or      eax, 20000h
.text:00000000004034C2                 mov     [rsp+218h+s], eax
.text:00000000004034C5                 ldmxcsr [rsp+218h+s]
.text:00000000004034C9
.text:00000000004034C9 loc_4034C9:                             ; CODE XREF: __intel_proc_init_ftzdazule+74↑j
.text:00000000004034C9                 add     rsp, 200h
.text:00000000004034D0                 pop     rbp
.text:00000000004034D1                 pop     rbx
.text:00000000004034D2                 pop     r15
.text:00000000004034D4                 retn
.text:00000000004034D5 ; ---------------------------------------------------------------------------
.text:00000000004034D5
.text:00000000004034D5 loc_4034D5:                             ; CODE XREF: __intel_proc_init_ftzdazule+5A↑j
.text:00000000004034D5                 stmxcsr [rsp+218h+s]
.text:00000000004034D9                 mov     eax, [rsp+218h+s]
.text:00000000004034DC                 or      eax, 8000h
.text:00000000004034E1                 mov     [rsp+218h+s], eax
.text:00000000004034E4                 ldmxcsr [rsp+218h+s]
.text:00000000004034E8                 jmp     short loc_40349C
.text:00000000004034E8 __intel_proc_init_ftzdazule endp
.text:00000000004034E8
.text:00000000004034E8 ; ---------------------------------------------------------------------------
.text:00000000004034EA                 align 10h
.text:00000000004034EA ; } // starts at 403440
.text:00000000004034F0
.text:00000000004034F0 ; =============== S U B R O U T I N E =======================================
.text:00000000004034F0
.text:00000000004034F0
.text:00000000004034F0 ; void _libc_csu_init(void)
.text:00000000004034F0                 public __libc_csu_init
.text:00000000004034F0 __libc_csu_init proc near               ; DATA XREF: _start+16↑o
.text:00000000004034F0
.text:00000000004034F0 var_30          = qword ptr -30h
.text:00000000004034F0 var_28          = qword ptr -28h
.text:00000000004034F0 var_20          = qword ptr -20h
.text:00000000004034F0 var_18          = qword ptr -18h
.text:00000000004034F0 var_10          = qword ptr -10h
.text:00000000004034F0 var_8           = qword ptr -8
.text:00000000004034F0
.text:00000000004034F0 ; __unwind {
.text:00000000004034F0                 mov     [rsp+var_28], rbp
.text:00000000004034F5                 mov     [rsp+var_20], r12
.text:00000000004034FA                 lea     rbp, __CTOR_LIST__
.text:0000000000403501                 lea     r12, __init_array_start
.text:0000000000403508                 mov     [rsp+var_18], r13
.text:000000000040350D                 mov     [rsp+var_10], r14
.text:0000000000403512                 mov     [rsp+var_8], r15
.text:0000000000403517                 mov     [rsp+var_30], rbx
.text:000000000040351C                 sub     rsp, 38h
.text:0000000000403520                 sub     rbp, r12
.text:0000000000403523                 mov     r13d, edi
.text:0000000000403526                 mov     r14, rsi
.text:0000000000403529                 sar     rbp, 3
.text:000000000040352D                 mov     r15, rdx
.text:0000000000403530                 call    _init_proc
.text:0000000000403535                 test    rbp, rbp
.text:0000000000403538                 jz      short loc_403556
.text:000000000040353A                 xor     ebx, ebx
.text:000000000040353C                 nop     dword ptr [rax+00h]
.text:0000000000403540
.text:0000000000403540 loc_403540:                             ; CODE XREF: __libc_csu_init+64↓j
.text:0000000000403540                 mov     rdx, r15
.text:0000000000403543                 mov     rsi, r14
.text:0000000000403546                 mov     edi, r13d
.text:0000000000403549                 call    ds:(__init_array_start - 605000h)[r12+rbx*8]
.text:000000000040354D                 add     rbx, 1
.text:0000000000403551                 cmp     rbx, rbp
.text:0000000000403554                 jnz     short loc_403540
.text:0000000000403556
.text:0000000000403556 loc_403556:                             ; CODE XREF: __libc_csu_init+48↑j
.text:0000000000403556                 mov     rbx, [rsp+38h+var_30]
.text:000000000040355B                 mov     rbp, [rsp+38h+var_28]
.text:0000000000403560                 mov     r12, [rsp+38h+var_20]
.text:0000000000403565                 mov     r13, [rsp+38h+var_18]
.text:000000000040356A                 mov     r14, [rsp+38h+var_10]
.text:000000000040356F                 mov     r15, [rsp+38h+var_8]
.text:0000000000403574                 add     rsp, 38h
.text:0000000000403578                 retn
.text:0000000000403578 ; } // starts at 4034F0
.text:0000000000403578 __libc_csu_init endp
.text:0000000000403578
.text:0000000000403578 ; ---------------------------------------------------------------------------
.text:0000000000403579                 align 20h
.text:0000000000403580
.text:0000000000403580 ; =============== S U B R O U T I N E =======================================
.text:0000000000403580
.text:0000000000403580
.text:0000000000403580 ; void _libc_csu_fini(void)
.text:0000000000403580                 public __libc_csu_fini
.text:0000000000403580 __libc_csu_fini proc near               ; DATA XREF: _start+F↑o
.text:0000000000403580 ; __unwind {
.text:0000000000403580                 rep retn
.text:0000000000403580 ; } // starts at 403580
.text:0000000000403580 __libc_csu_fini endp
.text:0000000000403580
.text:0000000000403580 ; ---------------------------------------------------------------------------
.text:0000000000403582                 align 10h
.text:0000000000403590
.text:0000000000403590 ; =============== S U B R O U T I N E =======================================
.text:0000000000403590
.text:0000000000403590 ; Attributes: bp-based frame
.text:0000000000403590
.text:0000000000403590 __do_global_ctors_aux proc near         ; CODE XREF: _init_proc+E↑p
.text:0000000000403590                 push    rbp
.text:0000000000403591                 mov     rbp, rsp
.text:0000000000403594                 push    rbx
.text:0000000000403595                 sub     rsp, 8
.text:0000000000403599                 mov     rax, cs:__CTOR_LIST__
.text:00000000004035A0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000004035A4                 jz      short loc_4035BF
.text:00000000004035A6                 mov     ebx, offset __CTOR_LIST__
.text:00000000004035AB                 nop     dword ptr [rax+rax+00h]
.text:00000000004035B0
.text:00000000004035B0 loc_4035B0:                             ; CODE XREF: __do_global_ctors_aux+2D↓j
.text:00000000004035B0                 sub     rbx, 8
.text:00000000004035B4                 call    rax ; __CTOR_LIST__
.text:00000000004035B6                 mov     rax, [rbx]
.text:00000000004035B9                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000004035BD                 jnz     short loc_4035B0
.text:00000000004035BF
.text:00000000004035BF loc_4035BF:                             ; CODE XREF: __do_global_ctors_aux+14↑j
.text:00000000004035BF                 add     rsp, 8
.text:00000000004035C3                 pop     rbx
.text:00000000004035C4                 pop     rbp
.text:00000000004035C5                 retn
.text:00000000004035C5 __do_global_ctors_aux endp
.text:00000000004035C5
.text:00000000004035C5 ; ---------------------------------------------------------------------------
.text:00000000004035C6                 align 8
.text:00000000004035C6 _text           ends
.text:00000000004035C6