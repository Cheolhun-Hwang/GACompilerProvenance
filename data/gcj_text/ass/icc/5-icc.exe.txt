.text:0000000000400D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000400D60
.text:0000000000400D60 ; Attributes: noreturn fuzzy-sp
.text:0000000000400D60
.text:0000000000400D60                 public _start
.text:0000000000400D60 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o
.text:0000000000400D60                 xor     ebp, ebp
.text:0000000000400D62                 mov     r9, rdx         ; rtld_fini
.text:0000000000400D65                 pop     rsi             ; argc
.text:0000000000400D66                 mov     rdx, rsp        ; ubp_av
.text:0000000000400D69                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000400D6D                 push    rax
.text:0000000000400D6E                 push    rsp             ; stack_end
.text:0000000000400D6F                 mov     r8, offset __libc_csu_fini ; fini
.text:0000000000400D76                 mov     rcx, offset __libc_csu_init ; init
.text:0000000000400D7D                 mov     rdi, offset main ; main
.text:0000000000400D84                 call    ___libc_start_main
.text:0000000000400D89                 hlt
.text:0000000000400D89 _start          endp
.text:0000000000400D89
.text:0000000000400D89 ; ---------------------------------------------------------------------------
.text:0000000000400D8A                 align 4
.text:0000000000400D8C
.text:0000000000400D8C ; =============== S U B R O U T I N E =======================================
.text:0000000000400D8C
.text:0000000000400D8C
.text:0000000000400D8C call_gmon_start proc near               ; CODE XREF: _init_proc+4↑p
.text:0000000000400D8C                 sub     rsp, 8
.text:0000000000400D90                 mov     rax, cs:__gmon_start___ptr
.text:0000000000400D97                 test    rax, rax
.text:0000000000400D9A                 jz      short loc_400D9E
.text:0000000000400D9C                 call    rax ; __gmon_start__
.text:0000000000400D9E
.text:0000000000400D9E loc_400D9E:                             ; CODE XREF: call_gmon_start+E↑j
.text:0000000000400D9E                 add     rsp, 8
.text:0000000000400DA2                 retn
.text:0000000000400DA2 call_gmon_start endp
.text:0000000000400DA2
.text:0000000000400DA2 ; ---------------------------------------------------------------------------
.text:0000000000400DA3                 align 10h
.text:0000000000400DB0
.text:0000000000400DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000400DB0
.text:0000000000400DB0 ; Attributes: bp-based frame
.text:0000000000400DB0
.text:0000000000400DB0 __do_global_dtors_aux proc near         ; CODE XREF: _term_proc+4↓p
.text:0000000000400DB0                 push    rbp
.text:0000000000400DB1                 mov     rbp, rsp
.text:0000000000400DB4                 push    rbx
.text:0000000000400DB5                 sub     rsp, 8
.text:0000000000400DB9                 cmp     cs:completed_6531, 0
.text:0000000000400DC0                 jnz     short loc_400E0D
.text:0000000000400DC2                 mov     ebx, offset __DTOR_END__
.text:0000000000400DC7                 mov     rax, cs:dtor_idx_6533
.text:0000000000400DCE                 sub     rbx, offset __DTOR_LIST__
.text:0000000000400DD5                 sar     rbx, 3
.text:0000000000400DD9                 sub     rbx, 1
.text:0000000000400DDD                 cmp     rax, rbx
.text:0000000000400DE0                 jnb     short loc_400E06
.text:0000000000400DE2                 nop     word ptr [rax+rax+00h]
.text:0000000000400DE8
.text:0000000000400DE8 loc_400DE8:                             ; CODE XREF: __do_global_dtors_aux+54↓j
.text:0000000000400DE8                 add     rax, 1
.text:0000000000400DEC                 mov     cs:dtor_idx_6533, rax
.text:0000000000400DF3                 call    ds:__DTOR_LIST__[rax*8]
.text:0000000000400DFA                 mov     rax, cs:dtor_idx_6533
.text:0000000000400E01                 cmp     rax, rbx
.text:0000000000400E04                 jb      short loc_400DE8
.text:0000000000400E06
.text:0000000000400E06 loc_400E06:                             ; CODE XREF: __do_global_dtors_aux+30↑j
.text:0000000000400E06                 mov     cs:completed_6531, 1
.text:0000000000400E0D
.text:0000000000400E0D loc_400E0D:                             ; CODE XREF: __do_global_dtors_aux+10↑j
.text:0000000000400E0D                 add     rsp, 8
.text:0000000000400E11                 pop     rbx
.text:0000000000400E12                 pop     rbp
.text:0000000000400E13                 retn
.text:0000000000400E13 __do_global_dtors_aux endp
.text:0000000000400E13
.text:0000000000400E13 ; ---------------------------------------------------------------------------
.text:0000000000400E14                 align 20h
.text:0000000000400E20
.text:0000000000400E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000400E20
.text:0000000000400E20 ; Attributes: bp-based frame
.text:0000000000400E20
.text:0000000000400E20 frame_dummy     proc near               ; CODE XREF: _init_proc+9↑p
.text:0000000000400E20                 cmp     cs:__JCR_LIST__, 0
.text:0000000000400E28                 push    rbp
.text:0000000000400E29                 mov     rbp, rsp
.text:0000000000400E2C                 jz      short loc_400E40
.text:0000000000400E2E                 mov     eax, 0
.text:0000000000400E33                 test    rax, rax
.text:0000000000400E36                 jz      short loc_400E40
.text:0000000000400E38                 pop     rbp
.text:0000000000400E39                 mov     edi, offset __JCR_LIST__
.text:0000000000400E3E                 jmp     rax
.text:0000000000400E40 ; ---------------------------------------------------------------------------
.text:0000000000400E40
.text:0000000000400E40 loc_400E40:                             ; CODE XREF: frame_dummy+C↑j
.text:0000000000400E40                                         ; frame_dummy+16↑j
.text:0000000000400E40                 pop     rbp
.text:0000000000400E41                 retn
.text:0000000000400E41 frame_dummy     endp
.text:0000000000400E41
.text:0000000000400E41 ; ---------------------------------------------------------------------------
.text:0000000000400E42                 align 10h
.text:0000000000400E50
.text:0000000000400E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000400E50
.text:0000000000400E50 ; Attributes: bp-based frame fuzzy-sp
.text:0000000000400E50
.text:0000000000400E50 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000400E50                 public main
.text:0000000000400E50 main            proc near               ; DATA XREF: _start+1D↑o
.text:0000000000400E50
.text:0000000000400E50 var_80          = dword ptr -80h
.text:0000000000400E50 var_7C          = dword ptr -7Ch
.text:0000000000400E50
.text:0000000000400E50 ; __unwind { // ___gxx_personality_v0
.text:0000000000400E50                 push    rbp
.text:0000000000400E51                 mov     rbp, rsp
.text:0000000000400E54                 and     rsp, 0FFFFFFFFFFFFFF80h
.text:0000000000400E58                 push    r12
.text:0000000000400E5A                 push    r13
.text:0000000000400E5C                 push    r14
.text:0000000000400E5E                 push    r15
.text:0000000000400E60                 push    rbx
.text:0000000000400E61                 sub     rsp, 58h
.text:0000000000400E65                 mov     rsi, 0
.text:0000000000400E6F                 mov     edi, 3
.text:0000000000400E74                 call    __intel_new_feature_proc_init
.text:0000000000400E79                 stmxcsr [rsp+80h+var_80]
.text:0000000000400E7D                 mov     edi, offset _ZSt3cin@@GLIBCXX_3_4
.text:0000000000400E82                 lea     rsi, [rsp+80h+var_7C]
.text:0000000000400E87                 or      [rsp+80h+var_80], 8040h
.text:0000000000400E8E                 ldmxcsr [rsp+80h+var_80]
.text:0000000000400E92                 call    __ZNSirsERi     ; std::istream::operator>>(int &)
.text:0000000000400E97                 xor     esi, esi
.text:0000000000400E99                 cmp     [rsp+80h+var_7C], 0
.text:0000000000400E9E                 jle     loc_40111B
.text:0000000000400EA4                 mov     ebx, esi
.text:0000000000400EA6
.text:0000000000400EA6 loc_400EA6:                             ; CODE XREF: main+2C5↓j
.text:0000000000400EA6                 mov     edi, offset _ZSt4cerr@@GLIBCXX_3_4
.text:0000000000400EAB                 mov     esi, ebx
.text:0000000000400EAD                 call    __ZNSolsEi      ; std::ostream::operator<<(int)
.text:0000000000400EB2                 mov     rdi, rax
.text:0000000000400EB5                 mov     esi, offset unk_402464
.text:0000000000400EBA                 call    __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const*)
.text:0000000000400EBF                 mov     rdi, rax
.text:0000000000400EC2                 mov     esi, [rsp+80h+var_7C]
.text:0000000000400EC6                 call    __ZNSolsEi      ; std::ostream::operator<<(int)
.text:0000000000400ECB                 mov     rdi, rax
.text:0000000000400ECE                 mov     esi, offset __ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ ; std::endl<char,std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &)
.text:0000000000400ED3                 call    __ZNSolsEPFRSoS_E ; std::ostream::operator<<(std::ostream & (*)(std::ostream &))
.text:0000000000400ED8                 mov     edi, offset format ; "%d"
.text:0000000000400EDD                 mov     esi, offset n
.text:0000000000400EE2                 xor     eax, eax
.text:0000000000400EE4                 call    _scanf
.text:0000000000400EE9                 mov     r12d, cs:n
.text:0000000000400EF0                 xor     r13d, r13d
.text:0000000000400EF3                 xor     r14d, r14d
.text:0000000000400EF6                 mov     r15d, offset a
.text:0000000000400EFC                 lea     eax, [r12-1]
.text:0000000000400F01                 test    eax, eax
.text:0000000000400F03                 jle     short loc_400F38
.text:0000000000400F05
.text:0000000000400F05 loc_400F05:                             ; CODE XREF: main+E6↓j
.text:0000000000400F05                 mov     edi, offset format ; "%d"
.text:0000000000400F0A                 mov     rsi, r15
.text:0000000000400F0D                 xor     eax, eax
.text:0000000000400F0F                 call    _scanf
.text:0000000000400F14                 mov     r12d, cs:n
.text:0000000000400F1B                 inc     r13
.text:0000000000400F1E                 movsxd  rax, r12d
.text:0000000000400F21                 add     r15, 4
.text:0000000000400F25                 dec     rax
.text:0000000000400F28                 dec     dword ptr ds:a[r14]
.text:0000000000400F2F                 add     r14, 4
.text:0000000000400F33                 cmp     r13, rax
.text:0000000000400F36                 jl      short loc_400F05
.text:0000000000400F38
.text:0000000000400F38 loc_400F38:                             ; CODE XREF: main+B3↑j
.text:0000000000400F38                 inc     ebx
.text:0000000000400F3A                 mov     edi, offset aCaseD ; "Case #%d: "
.text:0000000000400F3F                 mov     esi, ebx
.text:0000000000400F41                 xor     eax, eax
.text:0000000000400F43                 call    _printf
.text:0000000000400F48                 movsxd  r12, r12d
.text:0000000000400F4B                 mov     al, 1
.text:0000000000400F4D                 mov     ds:dword_66FB1C[r12*4], 3B9ACA00h
.text:0000000000400F59                 dec     r12d
.text:0000000000400F5C                 jz      short loc_400FCE
.text:0000000000400F5E                 test    r12d, r12d
.text:0000000000400F61                 jle     short loc_400FC2
.text:0000000000400F63                 cmp     r12d, 4
.text:0000000000400F67                 jl      loc_401194
.text:0000000000400F6D                 mov     r13d, r12d
.text:0000000000400F70                 movd    xmm0, r12d
.text:0000000000400F75                 and     r13d, 0FFFFFFFCh
.text:0000000000400F79                 xor     edi, edi
.text:0000000000400F7B                 movsxd  r13, r13d
.text:0000000000400F7E                 pshufd  xmm0, xmm0, 0
.text:0000000000400F83
.text:0000000000400F83 loc_400F83:                             ; CODE XREF: main+152↓j
.text:0000000000400F83                 movdqa  xmm1, ds:a[rdi*4]
.text:0000000000400F8C                 pcmpeqd xmm1, xmm0
.text:0000000000400F90                 movmskps eax, xmm1
.text:0000000000400F93                 test    eax, eax
.text:0000000000400F95                 jnz     loc_401189
.text:0000000000400F9B                 add     rdi, 4
.text:0000000000400F9F                 cmp     rdi, r13
.text:0000000000400FA2                 jb      short loc_400F83
.text:0000000000400FA4
.text:0000000000400FA4 loc_400FA4:                             ; CODE XREF: main+347↓j
.text:0000000000400FA4                 movsxd  rax, r12d
.text:0000000000400FA7                 cmp     r13, rax
.text:0000000000400FAA                 jnb     short loc_400FC2
.text:0000000000400FAC
.text:0000000000400FAC loc_400FAC:                             ; CODE XREF: main+170↓j
.text:0000000000400FAC                 cmp     r12d, dword ptr ds:a[r13*4]
.text:0000000000400FB4                 jz      loc_40112F
.text:0000000000400FBA                 inc     r13
.text:0000000000400FBD                 cmp     r13, rax
.text:0000000000400FC0                 jb      short loc_400FAC
.text:0000000000400FC2
.text:0000000000400FC2 loc_400FC2:                             ; CODE XREF: main+111↑j
.text:0000000000400FC2                                         ; main+15A↑j ...
.text:0000000000400FC2                 mov     cs:ans, 0
.text:0000000000400FC9                 jmp     loc_401107
.text:0000000000400FCE ; ---------------------------------------------------------------------------
.text:0000000000400FCE
.text:0000000000400FCE loc_400FCE:                             ; CODE XREF: main+10C↑j
.text:0000000000400FCE                 mov     cs:ans, 1
.text:0000000000400FD5
.text:0000000000400FD5 loc_400FD5:                             ; CODE XREF: main+334↓j
.text:0000000000400FD5                 test    al, al
.text:0000000000400FD7                 jz      loc_401107
.text:0000000000400FDD                 mov     r15d, cs:n
.text:0000000000400FE4                 xor     r11d, r11d
.text:0000000000400FE7                 xor     r9d, r9d
.text:0000000000400FEA                 xor     r8d, r8d
.text:0000000000400FED                 lea     edi, [r15-1]
.text:0000000000400FF1                 test    edi, edi
.text:0000000000400FF3                 jle     loc_4010AB
.text:0000000000400FF9
.text:0000000000400FF9 loc_400FF9:                             ; CODE XREF: main+253↓j
.text:0000000000400FF9                 inc     r11d
.text:0000000000400FFC                 lea     rcx, [r8+1]
.text:0000000000401000                 mov     eax, r11d
.text:0000000000401003                 cmp     r11d, r15d
.text:0000000000401006                 mov     r10d, eax
.text:0000000000401009                 jge     loc_40109A
.text:000000000040100F
.text:000000000040100F loc_40100F:                             ; CODE XREF: main+244↓j
.text:000000000040100F                 movsxd  rax, eax
.text:0000000000401012                 pxor    xmm2, xmm2
.text:0000000000401016                 mov     r14d, ds:h[r8*4]
.text:000000000040101E                 pxor    xmm1, xmm1
.text:0000000000401022                 cvtsi2sd xmm2, r14d
.text:0000000000401027                 mov     esi, ds:h[rax*4]
.text:000000000040102E                 pxor    xmm0, xmm0
.text:0000000000401032                 sub     esi, r14d
.text:0000000000401035                 lea     r14d, [r9+rax]
.text:0000000000401039                 cvtsi2sd xmm1, esi
.text:000000000040103D                 cvtsi2sd xmm0, r14d
.text:0000000000401042                 mov     r12, rcx
.text:0000000000401045                 mov     r13d, r10d
.text:0000000000401048                 lea     edx, [r9+r11]
.text:000000000040104C
.text:000000000040104C loc_40104C:                             ; CODE XREF: main+234↓j
.text:000000000040104C                 cmp     r13d, eax
.text:000000000040104F                 jz      short loc_401079
.text:0000000000401051                 pxor    xmm4, xmm4
.text:0000000000401055                 pxor    xmm3, xmm3
.text:0000000000401059                 cvtsi2sd xmm4, edx
.text:000000000040105D                 cvtsi2sd xmm3, ds:h[r12*4]
.text:0000000000401067                 divsd   xmm4, xmm0
.text:000000000040106B                 mulsd   xmm4, xmm1
.text:000000000040106F                 addsd   xmm4, xmm2
.text:0000000000401073                 comisd  xmm3, xmm4
.text:0000000000401077                 ja      short loc_40108F
.text:0000000000401079
.text:0000000000401079 loc_401079:                             ; CODE XREF: main+1FF↑j
.text:0000000000401079                 inc     r13d
.text:000000000040107C                 inc     r12
.text:000000000040107F                 inc     edx
.text:0000000000401081                 cmp     r13d, r15d
.text:0000000000401084                 jl      short loc_40104C
.text:0000000000401086                 nop
.text:0000000000401087                 mov     ds:b[r8*4], eax
.text:000000000040108F
.text:000000000040108F loc_40108F:                             ; CODE XREF: main+227↑j
.text:000000000040108F                 inc     eax
.text:0000000000401091                 cmp     eax, r15d
.text:0000000000401094                 jl      loc_40100F
.text:000000000040109A
.text:000000000040109A loc_40109A:                             ; CODE XREF: main+1B9↑j
.text:000000000040109A                 dec     r9d
.text:000000000040109D                 mov     r8, rcx
.text:00000000004010A0                 cmp     r11d, edi
.text:00000000004010A3                 jl      loc_400FF9
.text:00000000004010A9                 test    edi, edi
.text:00000000004010AB
.text:00000000004010AB loc_4010AB:                             ; CODE XREF: main+1A3↑j
.text:00000000004010AB                 mov     edx, 0
.text:00000000004010B0                 jle     short loc_4010D4
.text:00000000004010B2                 movsxd  rax, r15d
.text:00000000004010B5                 dec     rax
.text:00000000004010B8
.text:00000000004010B8 loc_4010B8:                             ; CODE XREF: main+282↓j
.text:00000000004010B8                 mov     ecx, dword ptr ds:a[rdx*4]
.text:00000000004010BF                 cmp     ecx, ds:b[rdx*4]
.text:00000000004010C6                 jnz     loc_40119C
.text:00000000004010CC                 inc     rdx
.text:00000000004010CF                 cmp     rdx, rax
.text:00000000004010D2                 jl      short loc_4010B8
.text:00000000004010D4
.text:00000000004010D4 loc_4010D4:                             ; CODE XREF: main+260↑j
.text:00000000004010D4                 xor     r12d, r12d
.text:00000000004010D7                 test    r15d, r15d
.text:00000000004010DA                 jle     short loc_4010FB
.text:00000000004010DC                 movsxd  r15, r15d
.text:00000000004010DF
.text:00000000004010DF loc_4010DF:                             ; CODE XREF: main+2A9↓j
.text:00000000004010DF                 mov     edi, offset aD  ; "%d "
.text:00000000004010E4                 xor     eax, eax
.text:00000000004010E6                 mov     esi, ds:h[r12*4]
.text:00000000004010EE                 call    _printf
.text:00000000004010F3                 inc     r12
.text:00000000004010F6                 cmp     r12, r15
.text:00000000004010F9                 jl      short loc_4010DF
.text:00000000004010FB
.text:00000000004010FB loc_4010FB:                             ; CODE XREF: main+28A↑j
.text:00000000004010FB                 mov     edi, offset s   ; s
.text:0000000000401100                 call    _puts
.text:0000000000401105                 jmp     short loc_401111
.text:0000000000401107 ; ---------------------------------------------------------------------------
.text:0000000000401107
.text:0000000000401107 loc_401107:                             ; CODE XREF: main+179↑j
.text:0000000000401107                                         ; main+187↑j
.text:0000000000401107                 mov     edi, offset aImpossible ; "Impossible"
.text:000000000040110C                 call    _puts
.text:0000000000401111
.text:0000000000401111 loc_401111:                             ; CODE XREF: main+2B5↑j
.text:0000000000401111                 cmp     ebx, [rsp+80h+var_7C]
.text:0000000000401115                 jl      loc_400EA6
.text:000000000040111B
.text:000000000040111B loc_40111B:                             ; CODE XREF: main+4E↑j
.text:000000000040111B                 xor     eax, eax
.text:000000000040111D                 add     rsp, 58h
.text:0000000000401121                 pop     rbx
.text:0000000000401122                 pop     r15
.text:0000000000401124                 pop     r14
.text:0000000000401126                 pop     r13
.text:0000000000401128                 pop     r12
.text:000000000040112A                 mov     rsp, rbp
.text:000000000040112D                 pop     rbp
.text:000000000040112E                 retn
.text:000000000040112F ; ---------------------------------------------------------------------------
.text:000000000040112F
.text:000000000040112F loc_40112F:                             ; CODE XREF: main+164↑j
.text:000000000040112F                                         ; main+342↓j
.text:000000000040112F                 cmp     r13d, 0FFFFFFFFh
.text:0000000000401133                 jz      loc_400FC2
.text:0000000000401139                 movsxd  r12, r12d
.text:000000000040113C                 xor     edi, edi        ; int
.text:000000000040113E                 mov     edx, 2          ; int
.text:0000000000401143                 mov     cs:ans, 1
.text:000000000040114A                 mov     eax, ds:h[r12*4]
.text:0000000000401152                 sub     eax, r12d
.text:0000000000401155                 add     eax, r13d
.text:0000000000401158                 movsxd  r13, r13d
.text:000000000040115B                 mov     esi, r13d       ; int
.text:000000000040115E                 mov     ds:h[r13*4], eax
.text:0000000000401166                 call    _Z3reciii       ; rec(int,int,int)
.text:000000000040116B                 inc     r13d
.text:000000000040116E                 mov     esi, r12d       ; int
.text:0000000000401171                 mov     edi, r13d       ; int
.text:0000000000401174                 mov     edx, 2          ; int
.text:0000000000401179                 call    _Z3reciii       ; rec(int,int,int)
.text:000000000040117E                 mov     al, cs:ans
.text:0000000000401184                 jmp     loc_400FD5
.text:0000000000401189 ; ---------------------------------------------------------------------------
.text:0000000000401189
.text:0000000000401189 loc_401189:                             ; CODE XREF: main+145↑j
.text:0000000000401189                 bsf     eax, eax
.text:000000000040118C                 mov     r13d, edi
.text:000000000040118F                 add     r13d, eax
.text:0000000000401192                 jmp     short loc_40112F
.text:0000000000401194 ; ---------------------------------------------------------------------------
.text:0000000000401194
.text:0000000000401194 loc_401194:                             ; CODE XREF: main+117↑j
.text:0000000000401194                 xor     r13d, r13d
.text:0000000000401197                 jmp     loc_400FA4
.text:000000000040119C ; ---------------------------------------------------------------------------
.text:000000000040119C
.text:000000000040119C loc_40119C:                             ; CODE XREF: main+276↑j
.text:000000000040119C                 call    ___cxa_rethrow
.text:000000000040119C main            endp
.text:000000000040119C
.text:000000000040119C ; ---------------------------------------------------------------------------
.text:00000000004011A1                 align 10h
.text:00000000004011A1 ; } // starts at 400E50
.text:00000000004011B0
.text:00000000004011B0 ; =============== S U B R O U T I N E =======================================
.text:00000000004011B0
.text:00000000004011B0
.text:00000000004011B0 ; __int64 __fastcall rec(int, int, int)
.text:00000000004011B0                 public _Z3reciii
.text:00000000004011B0 _Z3reciii       proc near               ; CODE XREF: main+316↑p
.text:00000000004011B0                                         ; main+329↑p ...
.text:00000000004011B0 ; __unwind { // ___gxx_personality_v0
.text:00000000004011B0                 push    r12
.text:00000000004011B2                 push    r13
.text:00000000004011B4                 push    r14
.text:00000000004011B6                 push    r15
.text:00000000004011B8                 push    rsi
.text:00000000004011B9                 mov     r13d, edx
.text:00000000004011BC                 movsxd  rax, esi
.text:00000000004011BF                 mov     r15d, esi
.text:00000000004011C2                 mov     r14, rax
.text:00000000004011C5
.text:00000000004011C5 loc_4011C5:                             ; CODE XREF: rec(int,int,int)+88↓j
.text:00000000004011C5                 cmp     edi, r15d
.text:00000000004011C8                 jz      short loc_4011F2
.text:00000000004011CA                 movsxd  rcx, edi
.text:00000000004011CD                 jge     short loc_4011E1
.text:00000000004011CF
.text:00000000004011CF loc_4011CF:                             ; CODE XREF: rec(int,int,int)+2F↓j
.text:00000000004011CF                 cmp     r15d, dword ptr ds:a[rcx*4]
.text:00000000004011D7                 jz      short loc_4011FC
.text:00000000004011D9                 inc     rcx
.text:00000000004011DC                 cmp     rcx, r14
.text:00000000004011DF                 jl      short loc_4011CF
.text:00000000004011E1
.text:00000000004011E1 loc_4011E1:                             ; CODE XREF: rec(int,int,int)+1D↑j
.text:00000000004011E1                                         ; rec(int,int,int)+53↓j
.text:00000000004011E1                 mov     cs:ans, 0
.text:00000000004011E8                 pop     rcx
.text:00000000004011E9                 pop     r15
.text:00000000004011EB                 pop     r14
.text:00000000004011ED                 pop     r13
.text:00000000004011EF                 pop     r12
.text:00000000004011F1                 retn
.text:00000000004011F2 ; ---------------------------------------------------------------------------
.text:00000000004011F2
.text:00000000004011F2 loc_4011F2:                             ; CODE XREF: rec(int,int,int)+18↑j
.text:00000000004011F2                 pop     rcx
.text:00000000004011F3                 pop     r15
.text:00000000004011F5                 pop     r14
.text:00000000004011F7                 pop     r13
.text:00000000004011F9                 pop     r12
.text:00000000004011FB                 retn
.text:00000000004011FC ; ---------------------------------------------------------------------------
.text:00000000004011FC
.text:00000000004011FC loc_4011FC:                             ; CODE XREF: rec(int,int,int)+27↑j
.text:00000000004011FC                 mov     r12d, ecx
.text:00000000004011FF                 cmp     r12d, 0FFFFFFFFh
.text:0000000000401203                 jz      short loc_4011E1
.text:0000000000401205                 mov     r8d, r15d
.text:0000000000401208                 mov     esi, r12d       ; int
.text:000000000040120B                 sub     r8d, r12d
.text:000000000040120E                 imul    r8d, r13d
.text:0000000000401212                 inc     r13d
.text:0000000000401215                 movsxd  rcx, ecx
.text:0000000000401218                 mov     edx, r13d       ; int
.text:000000000040121B                 mov     r9d, ds:h[r14*4]
.text:0000000000401223                 sub     r9d, r8d
.text:0000000000401226                 mov     ds:h[rcx*4], r9d
.text:000000000040122E                 call    _Z3reciii       ; rec(int,int,int)
.text:0000000000401233                 lea     edi, [r12+1]
.text:0000000000401238                 jmp     short loc_4011C5
.text:0000000000401238 _Z3reciii       endp
.text:0000000000401238
.text:0000000000401238 ; ---------------------------------------------------------------------------
.text:000000000040123A                 align 20h
.text:000000000040123A ; } // starts at 4011B0
.text:0000000000401240
.text:0000000000401240 ; =============== S U B R O U T I N E =======================================
.text:0000000000401240
.text:0000000000401240
.text:0000000000401240 ; __int64 read(void)
.text:0000000000401240                 public _Z4readv
.text:0000000000401240 _Z4readv        proc near
.text:0000000000401240 ; __unwind { // ___gxx_personality_v0
.text:0000000000401240                 push    r12
.text:0000000000401242                 push    r13
.text:0000000000401244                 push    r14
.text:0000000000401246                 mov     edi, offset format ; "%d"
.text:000000000040124B                 mov     esi, offset n
.text:0000000000401250                 xor     eax, eax
.text:0000000000401252                 call    _scanf
.text:0000000000401257                 mov     eax, cs:n
.text:000000000040125D                 xor     ecx, ecx
.text:000000000040125F                 dec     eax
.text:0000000000401261                 xor     edx, edx
.text:0000000000401263                 mov     esi, offset a
.text:0000000000401268                 test    eax, eax
.text:000000000040126A                 jle     short loc_4012A5
.text:000000000040126C                 mov     r13, rdx
.text:000000000040126F                 mov     r14, rcx
.text:0000000000401272                 mov     r12, rsi
.text:0000000000401275
.text:0000000000401275 loc_401275:                             ; CODE XREF: read(void)+63↓j
.text:0000000000401275                 mov     edi, offset format ; "%d"
.text:000000000040127A                 mov     rsi, r12
.text:000000000040127D                 xor     eax, eax
.text:000000000040127F                 call    _scanf
.text:0000000000401284                 movsxd  rax, cs:n
.text:000000000040128B                 inc     r14
.text:000000000040128E                 dec     rax
.text:0000000000401291                 add     r12, 4
.text:0000000000401295                 dec     dword ptr ds:a[r13]
.text:000000000040129C                 add     r13, 4
.text:00000000004012A0                 cmp     r14, rax
.text:00000000004012A3                 jl      short loc_401275
.text:00000000004012A5
.text:00000000004012A5 loc_4012A5:                             ; CODE XREF: read(void)+2A↑j
.text:00000000004012A5                 pop     r14
.text:00000000004012A7                 pop     r13
.text:00000000004012A9                 pop     r12
.text:00000000004012AB                 retn
.text:00000000004012AB _Z4readv        endp
.text:00000000004012AB
.text:00000000004012AB ; ---------------------------------------------------------------------------
.text:00000000004012AC                 align 10h
.text:00000000004012AC ; } // starts at 401240
.text:00000000004012B0
.text:00000000004012B0 ; =============== S U B R O U T I N E =======================================
.text:00000000004012B0
.text:00000000004012B0
.text:00000000004012B0 ; __int64 build(void)
.text:00000000004012B0                 public _Z5buildv
.text:00000000004012B0 _Z5buildv       proc near
.text:00000000004012B0 ; __unwind { // ___gxx_personality_v0
.text:00000000004012B0                 push    r14
.text:00000000004012B2                 push    r15
.text:00000000004012B4                 push    rbx
.text:00000000004012B5                 push    rbp
.text:00000000004012B6                 xor     edx, edx
.text:00000000004012B8                 mov     edi, cs:n
.text:00000000004012BE                 xor     ecx, ecx
.text:00000000004012C0                 xor     eax, eax
.text:00000000004012C2                 lea     esi, [rdi-1]
.text:00000000004012C5                 test    esi, esi
.text:00000000004012C7                 jle     loc_40137C
.text:00000000004012CD
.text:00000000004012CD loc_4012CD:                             ; CODE XREF: build(void)+C6↓j
.text:00000000004012CD                 inc     edx
.text:00000000004012CF                 lea     rbp, [rax+1]
.text:00000000004012D3                 mov     ebx, edx
.text:00000000004012D5                 cmp     edx, edi
.text:00000000004012D7                 mov     r9d, ebx
.text:00000000004012DA                 jge     loc_40136F
.text:00000000004012E0
.text:00000000004012E0 loc_4012E0:                             ; CODE XREF: build(void)+B9↓j
.text:00000000004012E0                 movsxd  rbx, ebx
.text:00000000004012E3                 pxor    xmm2, xmm2
.text:00000000004012E7                 mov     r14d, ds:h[rax*4]
.text:00000000004012EF                 pxor    xmm1, xmm1
.text:00000000004012F3                 cvtsi2sd xmm2, r14d
.text:00000000004012F8                 mov     r15d, ds:h[rbx*4]
.text:0000000000401300                 pxor    xmm0, xmm0
.text:0000000000401304                 sub     r15d, r14d
.text:0000000000401307                 lea     r14d, [rcx+rbx]
.text:000000000040130B                 cvtsi2sd xmm1, r15d
.text:0000000000401310                 cvtsi2sd xmm0, r14d
.text:0000000000401315                 mov     r10, rbp
.text:0000000000401318                 mov     r11d, r9d
.text:000000000040131B                 lea     r8d, [rcx+rdx]
.text:000000000040131F
.text:000000000040131F loc_40131F:                             ; CODE XREF: build(void)+A9↓j
.text:000000000040131F                 cmp     r11d, ebx
.text:0000000000401322                 jz      short loc_40134D
.text:0000000000401324                 pxor    xmm4, xmm4
.text:0000000000401328                 pxor    xmm3, xmm3
.text:000000000040132C                 cvtsi2sd xmm4, r8d
.text:0000000000401331                 cvtsi2sd xmm3, ds:h[r10*4]
.text:000000000040133B                 divsd   xmm4, xmm0
.text:000000000040133F                 mulsd   xmm4, xmm1
.text:0000000000401343                 addsd   xmm4, xmm2
.text:0000000000401347                 comisd  xmm3, xmm4
.text:000000000040134B                 ja      short loc_401365
.text:000000000040134D
.text:000000000040134D loc_40134D:                             ; CODE XREF: build(void)+72↑j
.text:000000000040134D                 inc     r11d
.text:0000000000401350                 inc     r10
.text:0000000000401353                 inc     r8d
.text:0000000000401356                 cmp     r11d, edi
.text:0000000000401359                 jl      short loc_40131F
.text:000000000040135B                 nop     dword ptr [rax]
.text:000000000040135E                 mov     ds:b[rax*4], ebx
.text:0000000000401365
.text:0000000000401365 loc_401365:                             ; CODE XREF: build(void)+9B↑j
.text:0000000000401365                 inc     ebx
.text:0000000000401367                 cmp     ebx, edi
.text:0000000000401369                 jl      loc_4012E0
.text:000000000040136F
.text:000000000040136F loc_40136F:                             ; CODE XREF: build(void)+2A↑j
.text:000000000040136F                 dec     ecx
.text:0000000000401371                 mov     rax, rbp
.text:0000000000401374                 cmp     edx, esi
.text:0000000000401376                 jl      loc_4012CD
.text:000000000040137C
.text:000000000040137C loc_40137C:                             ; CODE XREF: build(void)+17↑j
.text:000000000040137C                 pop     rbp
.text:000000000040137D                 pop     rbx
.text:000000000040137E                 pop     r15
.text:0000000000401380                 pop     r14
.text:0000000000401382                 retn
.text:0000000000401382 _Z5buildv       endp
.text:0000000000401382
.text:0000000000401382 ; ---------------------------------------------------------------------------
.text:0000000000401383                 align 10h
.text:0000000000401383 ; } // starts at 4012B0
.text:0000000000401390
.text:0000000000401390 ; =============== S U B R O U T I N E =======================================
.text:0000000000401390
.text:0000000000401390
.text:0000000000401390 ; __int64 solve(void)
.text:0000000000401390                 public _Z5solvev
.text:0000000000401390 _Z5solvev       proc near
.text:0000000000401390 ; __unwind { // ___gxx_personality_v0
.text:0000000000401390                 push    r14
.text:0000000000401392                 push    r15
.text:0000000000401394                 push    rbx
.text:0000000000401395                 push    rbp
.text:0000000000401396                 push    rsi
.text:0000000000401397                 mov     al, 1
.text:0000000000401399                 mov     r8d, cs:n
.text:00000000004013A0                 movsxd  r8, r8d
.text:00000000004013A3                 mov     ebp, r8d
.text:00000000004013A6                 dec     ebp
.text:00000000004013A8                 mov     ds:dword_66FB1C[r8*4], 3B9ACA00h
.text:00000000004013B4                 jz      short loc_401432
.text:00000000004013B6                 test    ebp, ebp
.text:00000000004013B8                 jle     short loc_401417
.text:00000000004013BA                 cmp     ebp, 4
.text:00000000004013BD                 jl      loc_4015C9
.text:00000000004013C3                 mov     r14d, ebp
.text:00000000004013C6                 movd    xmm0, ebp
.text:00000000004013CA                 and     r14d, 0FFFFFFFCh
.text:00000000004013CE                 xor     edi, edi
.text:00000000004013D0                 movsxd  r14, r14d
.text:00000000004013D3                 pshufd  xmm0, xmm0, 0
.text:00000000004013D8
.text:00000000004013D8 loc_4013D8:                             ; CODE XREF: solve(void)+67↓j
.text:00000000004013D8                 movdqa  xmm1, ds:a[rdi*4]
.text:00000000004013E1                 pcmpeqd xmm1, xmm0
.text:00000000004013E5                 movmskps eax, xmm1
.text:00000000004013E8                 test    eax, eax
.text:00000000004013EA                 jnz     loc_4015BE
.text:00000000004013F0                 add     rdi, 4
.text:00000000004013F4                 cmp     rdi, r14
.text:00000000004013F7                 jb      short loc_4013D8
.text:00000000004013F9
.text:00000000004013F9 loc_4013F9:                             ; CODE XREF: solve(void)+23C↓j
.text:00000000004013F9                 movsxd  rax, ebp
.text:00000000004013FC                 cmp     r14, rax
.text:00000000004013FF                 jnb     short loc_401417
.text:0000000000401401
.text:0000000000401401 loc_401401:                             ; CODE XREF: solve(void)+85↓j
.text:0000000000401401                 cmp     ebp, dword ptr ds:a[r14*4]
.text:0000000000401409                 jz      loc_401560
.text:000000000040140F                 inc     r14
.text:0000000000401412                 cmp     r14, rax
.text:0000000000401415                 jb      short loc_401401
.text:0000000000401417
.text:0000000000401417 loc_401417:                             ; CODE XREF: solve(void)+28↑j
.text:0000000000401417                                         ; solve(void)+6F↑j ...
.text:0000000000401417                 mov     cs:ans, 0
.text:000000000040141E
.text:000000000040141E loc_40141E:                             ; CODE XREF: solve(void)+AB↓j
.text:000000000040141E                 mov     edi, offset aImpossible ; "Impossible"
.text:0000000000401423                 add     rsp, 8
.text:0000000000401427                 pop     rbp
.text:0000000000401428                 pop     rbx
.text:0000000000401429                 pop     r15
.text:000000000040142B                 pop     r14
.text:000000000040142D                 jmp     _puts
.text:0000000000401432 ; ---------------------------------------------------------------------------
.text:0000000000401432
.text:0000000000401432 loc_401432:                             ; CODE XREF: solve(void)+24↑j
.text:0000000000401432                 mov     cs:ans, 1
.text:0000000000401439
.text:0000000000401439 loc_401439:                             ; CODE XREF: solve(void)+229↓j
.text:0000000000401439                 test    al, al
.text:000000000040143B                 jz      short loc_40141E
.text:000000000040143D                 xor     edx, edx
.text:000000000040143F                 lea     ebp, [r8-1]
.text:0000000000401443                 xor     eax, eax
.text:0000000000401445                 xor     ecx, ecx
.text:0000000000401447                 test    ebp, ebp
.text:0000000000401449                 jle     loc_4014FE
.text:000000000040144F
.text:000000000040144F loc_40144F:                             ; CODE XREF: solve(void)+166↓j
.text:000000000040144F                 inc     edx
.text:0000000000401451                 lea     rsi, [rcx+1]
.text:0000000000401455                 mov     ebx, edx
.text:0000000000401457                 cmp     edx, r8d
.text:000000000040145A                 mov     r9d, ebx
.text:000000000040145D                 jge     loc_4014EF
.text:0000000000401463
.text:0000000000401463 loc_401463:                             ; CODE XREF: solve(void)+159↓j
.text:0000000000401463                 movsxd  rbx, ebx
.text:0000000000401466                 pxor    xmm1, xmm1
.text:000000000040146A                 mov     r14d, ds:h[rcx*4]
.text:0000000000401472                 pxor    xmm2, xmm2
.text:0000000000401476                 pxor    xmm0, xmm0
.text:000000000040147A                 lea     edi, [rax+rdx]
.text:000000000040147D                 cvtsi2sd xmm2, r14d
.text:0000000000401482                 mov     r15d, ds:h[rbx*4]
.text:000000000040148A                 mov     r10, rsi
.text:000000000040148D                 sub     r15d, r14d
.text:0000000000401490                 mov     r11d, r9d
.text:0000000000401493                 cvtsi2sd xmm1, r15d
.text:0000000000401498                 lea     r15d, [rax+rbx]
.text:000000000040149C                 cvtsi2sd xmm0, r15d
.text:00000000004014A1
.text:00000000004014A1 loc_4014A1:                             ; CODE XREF: solve(void)+149↓j
.text:00000000004014A1                 cmp     r11d, ebx
.text:00000000004014A4                 jz      short loc_4014CE
.text:00000000004014A6                 pxor    xmm4, xmm4
.text:00000000004014AA                 pxor    xmm3, xmm3
.text:00000000004014AE                 cvtsi2sd xmm4, edi
.text:00000000004014B2                 cvtsi2sd xmm3, ds:h[r10*4]
.text:00000000004014BC                 divsd   xmm4, xmm0
.text:00000000004014C0                 mulsd   xmm4, xmm1
.text:00000000004014C4                 addsd   xmm4, xmm2
.text:00000000004014C8                 comisd  xmm3, xmm4
.text:00000000004014CC                 ja      short loc_4014E4
.text:00000000004014CE
.text:00000000004014CE loc_4014CE:                             ; CODE XREF: solve(void)+114↑j
.text:00000000004014CE                 inc     r11d
.text:00000000004014D1                 inc     r10
.text:00000000004014D4                 inc     edi
.text:00000000004014D6                 cmp     r11d, r8d
.text:00000000004014D9                 jl      short loc_4014A1
.text:00000000004014DB                 xchg    ax, ax
.text:00000000004014DD                 mov     ds:b[rcx*4], ebx
.text:00000000004014E4
.text:00000000004014E4 loc_4014E4:                             ; CODE XREF: solve(void)+13C↑j
.text:00000000004014E4                 inc     ebx
.text:00000000004014E6                 cmp     ebx, r8d
.text:00000000004014E9                 jl      loc_401463
.text:00000000004014EF
.text:00000000004014EF loc_4014EF:                             ; CODE XREF: solve(void)+CD↑j
.text:00000000004014EF                 dec     eax
.text:00000000004014F1                 mov     rcx, rsi
.text:00000000004014F4                 cmp     edx, ebp
.text:00000000004014F6                 jl      loc_40144F
.text:00000000004014FC                 test    ebp, ebp
.text:00000000004014FE
.text:00000000004014FE loc_4014FE:                             ; CODE XREF: solve(void)+B9↑j
.text:00000000004014FE                 mov     edx, 0
.text:0000000000401503                 jle     short loc_401527
.text:0000000000401505                 movsxd  rax, r8d
.text:0000000000401508                 dec     rax
.text:000000000040150B
.text:000000000040150B loc_40150B:                             ; CODE XREF: solve(void)+195↓j
.text:000000000040150B                 mov     ecx, dword ptr ds:a[rdx*4]
.text:0000000000401512                 cmp     ecx, ds:b[rdx*4]
.text:0000000000401519                 jnz     loc_4015D1
.text:000000000040151F                 inc     rdx
.text:0000000000401522                 cmp     rdx, rax
.text:0000000000401525                 jl      short loc_40150B
.text:0000000000401527
.text:0000000000401527 loc_401527:                             ; CODE XREF: solve(void)+173↑j
.text:0000000000401527                 xor     ebp, ebp
.text:0000000000401529                 test    r8d, r8d
.text:000000000040152C                 jle     short loc_40154C
.text:000000000040152E                 movsxd  r14, r8d
.text:0000000000401531
.text:0000000000401531 loc_401531:                             ; CODE XREF: solve(void)+1BA↓j
.text:0000000000401531                 mov     edi, offset aD  ; "%d "
.text:0000000000401536                 xor     eax, eax
.text:0000000000401538                 mov     esi, ds:h[rbp*4]
.text:000000000040153F                 call    _printf
.text:0000000000401544                 inc     rbp
.text:0000000000401547                 cmp     rbp, r14
.text:000000000040154A                 jl      short loc_401531
.text:000000000040154C
.text:000000000040154C loc_40154C:                             ; CODE XREF: solve(void)+19C↑j
.text:000000000040154C                 mov     edi, offset s   ; s
.text:0000000000401551                 add     rsp, 8
.text:0000000000401555                 pop     rbp
.text:0000000000401556                 pop     rbx
.text:0000000000401557                 pop     r15
.text:0000000000401559                 pop     r14
.text:000000000040155B                 jmp     _puts
.text:0000000000401560 ; ---------------------------------------------------------------------------
.text:0000000000401560
.text:0000000000401560 loc_401560:                             ; CODE XREF: solve(void)+79↑j
.text:0000000000401560                                         ; solve(void)+237↓j
.text:0000000000401560                 cmp     r14d, 0FFFFFFFFh
.text:0000000000401564                 jz      loc_401417
.text:000000000040156A                 movsxd  rbp, ebp
.text:000000000040156D                 xor     edi, edi        ; int
.text:000000000040156F                 mov     edx, 2          ; int
.text:0000000000401574                 mov     cs:ans, 1
.text:000000000040157B                 mov     eax, ds:h[rbp*4]
.text:0000000000401582                 sub     eax, ebp
.text:0000000000401584                 add     eax, r14d
.text:0000000000401587                 movsxd  r14, r14d
.text:000000000040158A                 mov     esi, r14d       ; int
.text:000000000040158D                 mov     ds:h[r14*4], eax
.text:0000000000401595                 call    _Z3reciii       ; rec(int,int,int)
.text:000000000040159A                 inc     r14d
.text:000000000040159D                 mov     esi, ebp        ; int
.text:000000000040159F                 mov     edi, r14d       ; int
.text:00000000004015A2                 mov     edx, 2          ; int
.text:00000000004015A7                 call    _Z3reciii       ; rec(int,int,int)
.text:00000000004015AC                 mov     al, cs:ans
.text:00000000004015B2                 mov     r8d, cs:n
.text:00000000004015B9                 jmp     loc_401439
.text:00000000004015BE ; ---------------------------------------------------------------------------
.text:00000000004015BE
.text:00000000004015BE loc_4015BE:                             ; CODE XREF: solve(void)+5A↑j
.text:00000000004015BE                 bsf     eax, eax
.text:00000000004015C1                 mov     r14d, edi
.text:00000000004015C4                 add     r14d, eax
.text:00000000004015C7                 jmp     short loc_401560
.text:00000000004015C9 ; ---------------------------------------------------------------------------
.text:00000000004015C9
.text:00000000004015C9 loc_4015C9:                             ; CODE XREF: solve(void)+2D↑j
.text:00000000004015C9                 xor     r14d, r14d
.text:00000000004015CC                 jmp     loc_4013F9
.text:00000000004015D1 ; ---------------------------------------------------------------------------
.text:00000000004015D1
.text:00000000004015D1 loc_4015D1:                             ; CODE XREF: solve(void)+189↑j
.text:00000000004015D1                 call    ___cxa_rethrow
.text:00000000004015D1 _Z5solvev       endp
.text:00000000004015D1
.text:00000000004015D1 ; ---------------------------------------------------------------------------
.text:00000000004015D6                 align 20h
.text:00000000004015D6 ; } // starts at 401390
.text:00000000004015E0
.text:00000000004015E0 ; =============== S U B R O U T I N E =======================================
.text:00000000004015E0
.text:00000000004015E0
.text:00000000004015E0 __sti__$E       proc near               ; CODE XREF: __libc_csu_init+59↓p
.text:00000000004015E0                                         ; DATA XREF: .init_array:__init_array_start↓o
.text:00000000004015E0 ; __unwind { // ___gxx_personality_v0
.text:00000000004015E0                 push    rsi
.text:00000000004015E1                 mov     edi, offset _ZSt8__ioinit ; this
.text:00000000004015E6                 call    __ZNSt8ios_base4InitC1Ev ; std::ios_base::Init::Init(void)
.text:00000000004015EB                 mov     edi, offset __ZNSt8ios_base4InitD1Ev ; lpfunc
.text:00000000004015F0                 mov     esi, offset _ZSt8__ioinit ; obj
.text:00000000004015F5                 mov     edx, offset __dso_handle ; lpdso_handle
.text:00000000004015FA                 add     rsp, 8
.text:00000000004015FE                 jmp     ___cxa_atexit
.text:00000000004015FE __sti__$E       endp
.text:00000000004015FE
.text:00000000004015FE ; ---------------------------------------------------------------------------
.text:0000000000401603                 align 10h
.text:0000000000401603 ; } // starts at 4015E0
.text:0000000000401610
.text:0000000000401610 ; =============== S U B R O U T I N E =======================================
.text:0000000000401610
.text:0000000000401610
.text:0000000000401610 ; std::char_traits<char>::length(char const*)
.text:0000000000401610                 public _ZNSt11char_traitsIcE6lengthEPKc ; weak
.text:0000000000401610 _ZNSt11char_traitsIcE6lengthEPKc proc near
.text:0000000000401610 ; __unwind { // ___gxx_personality_v0
.text:0000000000401610                 push    rsi
.text:0000000000401611                 mov     rdx, rdi
.text:0000000000401614                 mov     rcx, rdx
.text:0000000000401617                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:000000000040161B                 pxor    xmm0, xmm0
.text:000000000040161F                 pcmpeqb xmm0, xmmword ptr [rdx]
.text:0000000000401623                 pmovmskb eax, xmm0
.text:0000000000401627                 and     ecx, 0Fh
.text:000000000040162A                 shr     eax, cl
.text:000000000040162C                 bsf     eax, eax
.text:000000000040162F                 jnz     short loc_40163C
.text:0000000000401631                 mov     rax, rdx
.text:0000000000401634                 add     rdx, rcx
.text:0000000000401637                 call    __intel_sse2_strlen
.text:000000000040163C
.text:000000000040163C loc_40163C:                             ; CODE XREF: std::char_traits<char>::length(char const*)+1F↑j
.text:000000000040163C                 pop     rcx
.text:000000000040163D                 retn
.text:000000000040163D _ZNSt11char_traitsIcE6lengthEPKc endp
.text:000000000040163D
.text:000000000040163D ; ---------------------------------------------------------------------------
.text:000000000040163E                 align 20h
.text:000000000040163E ; } // starts at 401610
.text:0000000000401640
.text:0000000000401640 ; =============== S U B R O U T I N E =======================================
.text:0000000000401640
.text:0000000000401640
.text:0000000000401640                 public __intel_new_feature_proc_init
.text:0000000000401640 __intel_new_feature_proc_init proc near ; CODE XREF: main+24↑p
.text:0000000000401640
.text:0000000000401640 dest            = byte ptr -448h
.text:0000000000401640 var_48          = qword ptr -48h
.text:0000000000401640 var_40          = qword ptr -40h
.text:0000000000401640 var_38          = qword ptr -38h
.text:0000000000401640 var_30          = qword ptr -30h
.text:0000000000401640 var_28          = qword ptr -28h
.text:0000000000401640 s               = qword ptr -20h
.text:0000000000401640
.text:0000000000401640 ; __unwind {
.text:0000000000401640                 push    r12
.text:0000000000401642                 push    r13
.text:0000000000401644                 push    r14
.text:0000000000401646                 sub     rsp, 430h
.text:000000000040164D                 mov     r14, rsi
.text:0000000000401650                 mov     rax, cs:__intel_cpu_feature_indicator_ptr
.text:0000000000401657                 mov     r13d, edi
.text:000000000040165A                 mov     r12, [rax]
.text:000000000040165D                 test    r12, r12
.text:0000000000401660                 jz      loc_40199D
.text:0000000000401666
.text:0000000000401666 loc_401666:                             ; CODE XREF: __intel_new_feature_proc_init+371↓j
.text:0000000000401666                 mov     rax, r12
.text:0000000000401669                 and     rax, r14
.text:000000000040166C                 cmp     r14, rax
.text:000000000040166F                 jnz     short loc_40168C
.text:0000000000401671                 test    r12, 6
.text:0000000000401678                 jnz     loc_40190D
.text:000000000040167E
.text:000000000040167E loc_40167E:                             ; CODE XREF: __intel_new_feature_proc_init+2D7↓j
.text:000000000040167E                 add     rsp, 430h
.text:0000000000401685                 pop     r14
.text:0000000000401687                 pop     r13
.text:0000000000401689                 pop     r12
.text:000000000040168B                 retn
.text:000000000040168C ; ---------------------------------------------------------------------------
.text:000000000040168C
.text:000000000040168C loc_40168C:                             ; CODE XREF: __intel_new_feature_proc_init+2F↑j
.text:000000000040168C                 test    r14, 1
.text:0000000000401693                 jnz     loc_401988
.text:0000000000401699                 not     r12
.text:000000000040169C                 mov     edi, 39h ; '9'  ; number
.text:00000000004016A1                 and     r12, r14
.text:00000000004016A4                 xor     r14d, r14d
.text:00000000004016A7                 xor     esi, esi
.text:00000000004016A9                 xor     eax, eax
.text:00000000004016AB                 call    __libirc_get_msg
.text:00000000004016B0                 xor     edx, edx
.text:00000000004016B2                 mov     r8b, 1
.text:00000000004016B5                 mov     [rsp+448h+dest], 0
.text:00000000004016B9                 xor     r13d, r13d
.text:00000000004016BC                 mov     [rsp+448h+s], rax
.text:00000000004016C4                 mov     [rsp+448h+var_28], r15
.text:00000000004016CC                 mov     r15, r12
.text:00000000004016CF                 mov     [rsp+448h+var_30], rbx
.text:00000000004016D7                 mov     r12b, r8b
.text:00000000004016DA                 mov     [rsp+448h+var_38], rbp
.text:00000000004016E2                 mov     rbp, r14
.text:00000000004016E5                 mov     r14, rdx
.text:00000000004016E8
.text:00000000004016E8 loc_4016E8:                             ; CODE XREF: __intel_new_feature_proc_init+1CE↓j
.text:00000000004016E8                 mov     ecx, r13d
.text:00000000004016EB                 mov     eax, 1
.text:00000000004016F0                 shl     rax, cl
.text:00000000004016F3                 test    rax, r15
.text:00000000004016F6                 jz      loc_401804
.text:00000000004016FC                 cmp     r12b, 26h ; '&'
.text:0000000000401700                 jnb     loc_4018E3
.text:0000000000401706                 movzx   ebx, r12b
.text:000000000040170A                 lea     rax, c_feature_names
.text:0000000000401711                 mov     rbx, [rax+rbx*8]
.text:0000000000401715                 test    rbx, rbx
.text:0000000000401718                 jz      loc_4018E3
.text:000000000040171E                 cmp     byte ptr [rbx], 0
.text:0000000000401721                 jz      loc_4018E3
.text:0000000000401727                 cmp     [rsp+448h+dest], 0
.text:000000000040172B                 jz      loc_4017DF
.text:0000000000401731                 test    rbp, rbp
.text:0000000000401734                 jz      loc_4017DA
.text:000000000040173A                 mov     rdi, rbp        ; s
.text:000000000040173D                 call    _strlen
.text:0000000000401742                 mov     [rsp+448h+var_40], rax
.text:000000000040174A                 mov     rdi, [rsp+448h+s] ; s
.text:0000000000401752                 call    _strlen
.text:0000000000401757                 mov     [rsp+448h+var_48], rax
.text:000000000040175F                 mov     rdi, rbx        ; s
.text:0000000000401762                 call    _strlen
.text:0000000000401767                 mov     r9, rax
.text:000000000040176A                 mov     rax, [rsp+448h+var_40]
.text:0000000000401772                 add     rax, r14
.text:0000000000401775                 add     rax, [rsp+448h+var_48]
.text:000000000040177D                 lea     r9, [rax+r9+2]
.text:0000000000401782                 cmp     r9, 400h
.text:0000000000401789                 jnb     loc_40191C
.text:000000000040178F                 neg     r14
.text:0000000000401792                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000401796                 add     r14, 3FFh
.text:000000000040179D                 lea     rsi, src        ; ", "
.text:00000000004017A4                 mov     rdx, r14        ; n
.text:00000000004017A7                 call    _strncat
.text:00000000004017AC                 lea     rdi, [rsp+448h+dest] ; s
.text:00000000004017B0                 call    _strlen
.text:00000000004017B5                 movsxd  rdx, eax
.text:00000000004017B8                 lea     rdi, [rsp+448h+dest] ; dest
.text:00000000004017BC                 neg     rdx
.text:00000000004017BF                 mov     rsi, rbp        ; src
.text:00000000004017C2                 add     rdx, 3FFh       ; n
.text:00000000004017C9                 call    _strncat
.text:00000000004017CE                 lea     rdi, [rsp+448h+dest] ; s
.text:00000000004017D2                 call    _strlen
.text:00000000004017D7                 movsxd  r14, eax
.text:00000000004017DA
.text:00000000004017DA loc_4017DA:                             ; CODE XREF: __intel_new_feature_proc_init+F4↑j
.text:00000000004017DA                 mov     rbp, rbx
.text:00000000004017DD                 jmp     short loc_401804
.text:00000000004017DF ; ---------------------------------------------------------------------------
.text:00000000004017DF
.text:00000000004017DF loc_4017DF:                             ; CODE XREF: __intel_new_feature_proc_init+EB↑j
.text:00000000004017DF                 neg     r14
.text:00000000004017E2                 lea     rdi, [rsp+448h+dest] ; dest
.text:00000000004017E6                 add     r14, 3FFh
.text:00000000004017ED                 mov     rsi, rbx        ; src
.text:00000000004017F0                 mov     rdx, r14        ; n
.text:00000000004017F3                 call    _strncat
.text:00000000004017F8                 lea     rdi, [rsp+448h+dest] ; s
.text:00000000004017FC                 call    _strlen
.text:0000000000401801                 movsxd  r14, eax
.text:0000000000401804
.text:0000000000401804 loc_401804:                             ; CODE XREF: __intel_new_feature_proc_init+B6↑j
.text:0000000000401804                                         ; __intel_new_feature_proc_init+19D↑j
.text:0000000000401804                 inc     r12b
.text:0000000000401807                 inc     r13d
.text:000000000040180A                 cmp     r12b, 25h ; '%'
.text:000000000040180E                 jle     loc_4016E8
.text:0000000000401814                 mov     rdx, r14
.text:0000000000401817                 mov     r14, rbp
.text:000000000040181A                 mov     rax, [rsp+448h+s]
.text:0000000000401822                 test    r14, r14
.text:0000000000401825                 mov     r15, [rsp+448h+var_28]
.text:000000000040182D                 mov     rbx, [rsp+448h+var_30]
.text:0000000000401835                 mov     rbp, [rsp+448h+var_38]
.text:000000000040183D                 jz      short loc_401877
.text:000000000040183F                 neg     rdx
.text:0000000000401842                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000401846                 add     rdx, 3FFh       ; n
.text:000000000040184D                 mov     rsi, rax        ; src
.text:0000000000401850                 call    _strncat
.text:0000000000401855                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000401859                 call    _strlen
.text:000000000040185E                 movsxd  rdx, eax
.text:0000000000401861                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000401865                 neg     rdx
.text:0000000000401868                 mov     rsi, r14        ; src
.text:000000000040186B                 add     rdx, 3FFh       ; n
.text:0000000000401872                 call    _strncat
.text:0000000000401877
.text:0000000000401877 loc_401877:                             ; CODE XREF: __intel_new_feature_proc_init+1FD↑j
.text:0000000000401877                                         ; __intel_new_feature_proc_init+343↓j
.text:0000000000401877                 cmp     [rsp+448h+dest], 0
.text:000000000040187B                 jnz     short loc_4018BA
.text:000000000040187D                 xor     esi, esi
.text:000000000040187F                 mov     edi, 1
.text:0000000000401884                 xor     edx, edx
.text:0000000000401886                 xor     eax, eax
.text:0000000000401888                 call    __libirc_print
.text:000000000040188D
.text:000000000040188D loc_40188D:                             ; CODE XREF: __intel_new_feature_proc_init+2CB↓j
.text:000000000040188D                                         ; __intel_new_feature_proc_init+358↓j
.text:000000000040188D                 mov     edi, 1
.text:0000000000401892                 mov     esi, 3Ah ; ':'
.text:0000000000401897                 xor     edx, edx
.text:0000000000401899                 xor     eax, eax
.text:000000000040189B                 call    __libirc_print
.text:00000000004018A0
.text:00000000004018A0 loc_4018A0:                             ; CODE XREF: __intel_new_feature_proc_init+2A1↓j
.text:00000000004018A0                                         ; __intel_new_feature_proc_init+39A↓j
.text:00000000004018A0                 xor     esi, esi
.text:00000000004018A2                 mov     edi, 1
.text:00000000004018A7                 xor     edx, edx
.text:00000000004018A9                 xor     eax, eax
.text:00000000004018AB                 call    __libirc_print
.text:00000000004018B0                 mov     edi, 1          ; status
.text:00000000004018B5                 call    _exit
.text:00000000004018BA ; ---------------------------------------------------------------------------
.text:00000000004018BA
.text:00000000004018BA loc_4018BA:                             ; CODE XREF: __intel_new_feature_proc_init+23B↑j
.text:00000000004018BA                 xor     esi, esi
.text:00000000004018BC                 mov     edi, 1
.text:00000000004018C1                 xor     edx, edx
.text:00000000004018C3                 xor     eax, eax
.text:00000000004018C5                 call    __libirc_print
.text:00000000004018CA                 mov     edi, 1
.text:00000000004018CF                 mov     esi, 38h ; '8'
.text:00000000004018D4                 mov     edx, edi
.text:00000000004018D6                 lea     rcx, [rsp+448h+dest]
.text:00000000004018DA                 xor     eax, eax
.text:00000000004018DC                 call    __libirc_print
.text:00000000004018E1                 jmp     short loc_4018A0
.text:00000000004018E3 ; ---------------------------------------------------------------------------
.text:00000000004018E3
.text:00000000004018E3 loc_4018E3:                             ; CODE XREF: __intel_new_feature_proc_init+C0↑j
.text:00000000004018E3                                         ; __intel_new_feature_proc_init+D8↑j ...
.text:00000000004018E3                 mov     r15, [rsp+448h+var_28]
.text:00000000004018EB                 mov     rbx, [rsp+448h+var_30]
.text:00000000004018F3                 mov     rbp, [rsp+448h+var_38]
.text:00000000004018FB                 xor     esi, esi
.text:00000000004018FD                 mov     edi, 1
.text:0000000000401902                 xor     edx, edx
.text:0000000000401904                 xor     eax, eax
.text:0000000000401906                 call    __libirc_print
.text:000000000040190B                 jmp     short loc_40188D
.text:000000000040190D ; ---------------------------------------------------------------------------
.text:000000000040190D
.text:000000000040190D loc_40190D:                             ; CODE XREF: __intel_new_feature_proc_init+38↑j
.text:000000000040190D                 xor     edi, edi
.text:000000000040190F                 mov     esi, r13d
.text:0000000000401912                 call    __intel_proc_init_ftzdazule
.text:0000000000401917                 jmp     loc_40167E
.text:000000000040191C ; ---------------------------------------------------------------------------
.text:000000000040191C
.text:000000000040191C loc_40191C:                             ; CODE XREF: __intel_new_feature_proc_init+149↑j
.text:000000000040191C                 mov     rdx, r14
.text:000000000040191F                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000401923                 neg     rdx
.text:0000000000401926                 mov     r14, rbp
.text:0000000000401929                 mov     rax, [rsp+448h+s]
.text:0000000000401931                 add     rdx, 3FFh       ; n
.text:0000000000401938                 mov     rsi, rax        ; src
.text:000000000040193B                 mov     r15, [rsp+448h+var_28]
.text:0000000000401943                 mov     rbx, [rsp+448h+var_30]
.text:000000000040194B                 mov     rbp, [rsp+448h+var_38]
.text:0000000000401953                 call    _strncat
.text:0000000000401958                 lea     rdi, [rsp+448h+dest] ; s
.text:000000000040195C                 call    _strlen
.text:0000000000401961                 movsxd  rdx, eax
.text:0000000000401964                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000401968                 neg     rdx
.text:000000000040196B                 mov     rsi, r14        ; src
.text:000000000040196E                 add     rdx, 3FFh       ; n
.text:0000000000401975                 call    _strncat
.text:000000000040197A                 lea     rdi, [rsp+448h+dest] ; s
.text:000000000040197E                 call    _strlen
.text:0000000000401983                 jmp     loc_401877
.text:0000000000401988 ; ---------------------------------------------------------------------------
.text:0000000000401988
.text:0000000000401988 loc_401988:                             ; CODE XREF: __intel_new_feature_proc_init+53↑j
.text:0000000000401988                 xor     esi, esi
.text:000000000040198A                 mov     edi, 1
.text:000000000040198F                 xor     edx, edx
.text:0000000000401991                 xor     eax, eax
.text:0000000000401993                 call    __libirc_print
.text:0000000000401998                 jmp     loc_40188D
.text:000000000040199D ; ---------------------------------------------------------------------------
.text:000000000040199D
.text:000000000040199D loc_40199D:                             ; CODE XREF: __intel_new_feature_proc_init+20↑j
.text:000000000040199D                 xor     eax, eax
.text:000000000040199F                 call    __intel_cpu_features_init
.text:00000000004019A4                 mov     rax, cs:__intel_cpu_feature_indicator_ptr
.text:00000000004019AB                 mov     r12, [rax]
.text:00000000004019AE                 test    r12, r12
.text:00000000004019B1                 jnz     loc_401666
.text:00000000004019B7                 xor     esi, esi
.text:00000000004019B9                 mov     edi, 1
.text:00000000004019BE                 xor     edx, edx
.text:00000000004019C0                 xor     eax, eax
.text:00000000004019C2                 call    __libirc_print
.text:00000000004019C7                 mov     edi, 1
.text:00000000004019CC                 mov     esi, 3Bh ; ';'
.text:00000000004019D1                 xor     edx, edx
.text:00000000004019D3                 xor     eax, eax
.text:00000000004019D5                 call    __libirc_print
.text:00000000004019DA                 jmp     loc_4018A0
.text:00000000004019DA __intel_new_feature_proc_init endp
.text:00000000004019DA
.text:00000000004019DA ; ---------------------------------------------------------------------------
.text:00000000004019DF                 align 20h
.text:00000000004019DF ; } // starts at 401640
.text:00000000004019E0
.text:00000000004019E0 ; =============== S U B R O U T I N E =======================================
.text:00000000004019E0
.text:00000000004019E0
.text:00000000004019E0                 public __intel_sse2_strlen
.text:00000000004019E0 __intel_sse2_strlen proc near           ; CODE XREF: std::char_traits<char>::length(char const*)+27↑p
.text:00000000004019E0 ; __unwind {
.text:00000000004019E0                 pxor    xmm0, xmm0
.text:00000000004019E4
.text:00000000004019E4 loc_4019E4:                             ; CODE XREF: __intel_sse2_strlen+16↓j
.text:00000000004019E4                 add     rax, 10h
.text:00000000004019E8                 movdqa  xmm1, xmmword ptr [rax]
.text:00000000004019EC                 pcmpeqb xmm1, xmm0
.text:00000000004019F0                 pmovmskb ecx, xmm1
.text:00000000004019F4                 test    ecx, ecx
.text:00000000004019F6                 jz      short loc_4019E4
.text:00000000004019F8                 bsf     ecx, ecx
.text:00000000004019FB                 sub     rcx, rdx
.text:00000000004019FE                 add     rax, rcx
.text:0000000000401A01                 retn
.text:0000000000401A01 __intel_sse2_strlen endp
.text:0000000000401A01
.text:0000000000401A01 ; ---------------------------------------------------------------------------
.text:0000000000401A02                 align 10h
.text:0000000000401A02 ; } // starts at 4019E0
.text:0000000000401A10
.text:0000000000401A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000401A10
.text:0000000000401A10
.text:0000000000401A10 ; __int64 __usercall _libirc_get_msg@<rax>(int number@<edi>, char)
.text:0000000000401A10                 public __libirc_get_msg
.text:0000000000401A10 __libirc_get_msg proc near              ; CODE XREF: __intel_new_feature_proc_init+6B↑p
.text:0000000000401A10
.text:0000000000401A10 dest            = byte ptr -168h
.text:0000000000401A10 var_E8          = byte ptr -0E8h
.text:0000000000401A10 var_D8          = qword ptr -0D8h
.text:0000000000401A10 var_D0          = qword ptr -0D0h
.text:0000000000401A10 var_C8          = qword ptr -0C8h
.text:0000000000401A10 var_C0          = qword ptr -0C0h
.text:0000000000401A10 var_39          = byte ptr -39h
.text:0000000000401A10 arg             = dword ptr -38h
.text:0000000000401A10 var_34          = dword ptr -34h
.text:0000000000401A10 var_30          = qword ptr -30h
.text:0000000000401A10 var_28          = qword ptr -28h
.text:0000000000401A10 arg_0           = byte ptr  8
.text:0000000000401A10
.text:0000000000401A10 ; __unwind {
.text:0000000000401A10                 push    r12
.text:0000000000401A12                 push    r13
.text:0000000000401A14                 push    r14
.text:0000000000401A16                 sub     rsp, 150h
.text:0000000000401A1D                 mov     [rsp+168h+var_D8], rdx
.text:0000000000401A25                 mov     [rsp+168h+var_D0], rcx
.text:0000000000401A2D                 mov     [rsp+168h+var_C8], r8
.text:0000000000401A35                 mov     [rsp+168h+var_C0], r9
.text:0000000000401A3D                 movzx   r11d, al
.text:0000000000401A41                 lea     rax, ds:0[r11*4]
.text:0000000000401A49                 lea     r11, loc_401A7E
.text:0000000000401A50                 sub     r11, rax
.text:0000000000401A53                 lea     rax, [rsp+168h+var_39]
.text:0000000000401A5B                 jmp     r11
.text:0000000000401A5E                 movaps  xmmword ptr [rax-0Fh], xmm7
.text:0000000000401A62                 movaps  xmmword ptr [rax-1Fh], xmm6
.text:0000000000401A66                 movaps  xmmword ptr [rax-2Fh], xmm5
.text:0000000000401A6A                 movaps  xmmword ptr [rax-3Fh], xmm4
.text:0000000000401A6E                 movaps  xmmword ptr [rax-4Fh], xmm3
.text:0000000000401A72                 movaps  xmmword ptr [rax-5Fh], xmm2
.text:0000000000401A76                 movaps  xmmword ptr [rax-6Fh], xmm1
.text:0000000000401A7A                 movaps  xmmword ptr [rax-7Fh], xmm0
.text:0000000000401A7E
.text:0000000000401A7E loc_401A7E:                             ; DATA XREF: __libirc_get_msg+39↑o
.text:0000000000401A7E                 mov     r13d, edi
.text:0000000000401A81                 mov     r14d, esi
.text:0000000000401A84                 test    r13d, r13d
.text:0000000000401A87                 jz      loc_401B17
.text:0000000000401A8D                 cmp     cs:first_msg, 0
.text:0000000000401A94                 jz      short loc_401AE4
.text:0000000000401A96                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:0000000000401A9D                 xor     esi, esi        ; flag
.text:0000000000401A9F                 mov     cs:first_msg, 0
.text:0000000000401AA9                 call    _catopen
.text:0000000000401AAE                 mov     cs:message_catalog, rax
.text:0000000000401AB5                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000401AB9                 jz      loc_401B96
.text:0000000000401ABF                 mov     rdi, cs:message_catalog ; catalog
.text:0000000000401AC6
.text:0000000000401AC6 loc_401AC6:                             ; CODE XREF: __libirc_get_msg+212↓j
.text:0000000000401AC6                 movsxd  rax, r13d
.text:0000000000401AC9                 lea     rcx, off_6039E8 ; "\n"
.text:0000000000401AD0                 shl     rax, 4
.text:0000000000401AD4                 mov     cs:use_internal_msg, 0
.text:0000000000401ADE                 mov     rcx, [rax+rcx]  ; string
.text:0000000000401AE2                 jmp     short loc_401B05
.text:0000000000401AE4 ; ---------------------------------------------------------------------------
.text:0000000000401AE4
.text:0000000000401AE4 loc_401AE4:                             ; CODE XREF: __libirc_get_msg+84↑j
.text:0000000000401AE4                                         ; __libirc_get_msg+218↓j
.text:0000000000401AE4                 mov     edi, cs:use_internal_msg
.text:0000000000401AEA                 movsxd  rax, r13d
.text:0000000000401AED                 lea     rcx, off_6039E8 ; "\n"
.text:0000000000401AF4                 shl     rax, 4
.text:0000000000401AF8                 test    edi, edi
.text:0000000000401AFA                 mov     rcx, [rax+rcx]
.text:0000000000401AFE                 jnz     short loc_401B1E
.text:0000000000401B00                 jmp     loc_401C2D
.text:0000000000401B05 ; ---------------------------------------------------------------------------
.text:0000000000401B05
.text:0000000000401B05 loc_401B05:                             ; CODE XREF: __libirc_get_msg+D2↑j
.text:0000000000401B05                                         ; __libirc_get_msg+224↓j
.text:0000000000401B05                 mov     esi, 1          ; set
.text:0000000000401B0A                 mov     edx, r13d       ; number
.text:0000000000401B0D                 call    _catgets
.text:0000000000401B12                 mov     rcx, rax
.text:0000000000401B15                 jmp     short loc_401B1E
.text:0000000000401B17 ; ---------------------------------------------------------------------------
.text:0000000000401B17
.text:0000000000401B17 loc_401B17:                             ; CODE XREF: __libirc_get_msg+77↑j
.text:0000000000401B17                 lea     rcx, s
.text:0000000000401B1E
.text:0000000000401B1E loc_401B1E:                             ; CODE XREF: __libirc_get_msg+EE↑j
.text:0000000000401B1E                                         ; __libirc_get_msg+105↑j
.text:0000000000401B1E                 test    r14d, r14d
.text:0000000000401B21                 jle     short loc_401B85
.text:0000000000401B23                 mov     [rsp+168h+arg], 10h
.text:0000000000401B2E                 lea     rdx, [rsp+168h+arg_0]
.text:0000000000401B36                 mov     [rsp+168h+var_34], 30h ; '0'
.text:0000000000401B41                 lea     rdi, [rsp+168h+var_E8]
.text:0000000000401B49                 mov     [rsp+168h+var_30], rdx
.text:0000000000401B51                 mov     [rsp+168h+var_28], rdi
.text:0000000000401B59                 lea     rdi, get_msg_buf ; s
.text:0000000000401B60                 mov     rsi, rcx        ; format
.text:0000000000401B63                 lea     rdx, [rsp+168h+arg] ; arg
.text:0000000000401B6B                 call    _vsprintf
.text:0000000000401B70                 lea     rax, get_msg_buf
.text:0000000000401B77                 add     rsp, 150h
.text:0000000000401B7E                 pop     r14
.text:0000000000401B80                 pop     r13
.text:0000000000401B82                 pop     r12
.text:0000000000401B84                 retn
.text:0000000000401B85 ; ---------------------------------------------------------------------------
.text:0000000000401B85
.text:0000000000401B85 loc_401B85:                             ; CODE XREF: __libirc_get_msg+111↑j
.text:0000000000401B85                 mov     rax, rcx
.text:0000000000401B88                 add     rsp, 150h
.text:0000000000401B8F                 pop     r14
.text:0000000000401B91                 pop     r13
.text:0000000000401B93                 pop     r12
.text:0000000000401B95                 retn
.text:0000000000401B96 ; ---------------------------------------------------------------------------
.text:0000000000401B96
.text:0000000000401B96 loc_401B96:                             ; CODE XREF: __libirc_get_msg+A9↑j
.text:0000000000401B96                 lea     rdi, name       ; "LANG"
.text:0000000000401B9D                 call    _getenv
.text:0000000000401BA2                 test    rax, rax
.text:0000000000401BA5                 jz      short loc_401C17
.text:0000000000401BA7                 mov     rsi, rax        ; src
.text:0000000000401BAA                 lea     rdi, [rsp+168h+dest] ; dest
.text:0000000000401BAE                 mov     edx, 80h        ; n
.text:0000000000401BB3                 call    _strncpy
.text:0000000000401BB8                 mov     esi, 2Eh ; '.'  ; c
.text:0000000000401BBD                 lea     rdi, [rsp+168h+dest] ; s
.text:0000000000401BC1                 call    _strchr
.text:0000000000401BC6                 mov     r12, rax
.text:0000000000401BC9                 test    r12, r12
.text:0000000000401BCC                 jz      short loc_401C17
.text:0000000000401BCE                 lea     rdi, name       ; "LANG"
.text:0000000000401BD5                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000401BD9                 mov     edx, 1          ; replace
.text:0000000000401BDE                 mov     byte ptr [r12], 0
.text:0000000000401BE3                 call    _setenv
.text:0000000000401BE8                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:0000000000401BEF                 xor     esi, esi        ; flag
.text:0000000000401BF1                 call    _catopen
.text:0000000000401BF6                 lea     rdi, name       ; "LANG"
.text:0000000000401BFD                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000401C01                 mov     edx, 1          ; replace
.text:0000000000401C06                 mov     cs:message_catalog, rax
.text:0000000000401C0D                 mov     byte ptr [r12], 2Eh ; '.'
.text:0000000000401C12                 call    _setenv
.text:0000000000401C17
.text:0000000000401C17 loc_401C17:                             ; CODE XREF: __libirc_get_msg+195↑j
.text:0000000000401C17                                         ; __libirc_get_msg+1BC↑j
.text:0000000000401C17                 mov     rdi, cs:message_catalog
.text:0000000000401C1E                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000401C22                 jnz     loc_401AC6
.text:0000000000401C28                 jmp     loc_401AE4
.text:0000000000401C2D ; ---------------------------------------------------------------------------
.text:0000000000401C2D
.text:0000000000401C2D loc_401C2D:                             ; CODE XREF: __libirc_get_msg+F0↑j
.text:0000000000401C2D                 mov     rdi, cs:message_catalog
.text:0000000000401C34                 jmp     loc_401B05
.text:0000000000401C34 __libirc_get_msg endp
.text:0000000000401C34
.text:0000000000401C34 ; ---------------------------------------------------------------------------
.text:0000000000401C39                 align 20h
.text:0000000000401C39 ; } // starts at 401A10
.text:0000000000401C40
.text:0000000000401C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000401C40
.text:0000000000401C40
.text:0000000000401C40                 public __libirc_print
.text:0000000000401C40 __libirc_print  proc near               ; CODE XREF: __intel_new_feature_proc_init+248↑p
.text:0000000000401C40                                         ; __intel_new_feature_proc_init+25B↑p ...
.text:0000000000401C40
.text:0000000000401C40 dest            = byte ptr -168h
.text:0000000000401C40 var_E8          = byte ptr -0E8h
.text:0000000000401C40 var_D0          = qword ptr -0D0h
.text:0000000000401C40 var_C8          = qword ptr -0C8h
.text:0000000000401C40 var_C0          = qword ptr -0C0h
.text:0000000000401C40 var_39          = byte ptr -39h
.text:0000000000401C40 arg             = dword ptr -38h
.text:0000000000401C40 var_34          = dword ptr -34h
.text:0000000000401C40 var_30          = qword ptr -30h
.text:0000000000401C40 var_28          = qword ptr -28h
.text:0000000000401C40 arg_0           = byte ptr  8
.text:0000000000401C40
.text:0000000000401C40 ; __unwind {
.text:0000000000401C40                 push    r13
.text:0000000000401C42                 push    r14
.text:0000000000401C44                 push    r15
.text:0000000000401C46                 push    rbx
.text:0000000000401C47                 sub     rsp, 148h
.text:0000000000401C4E                 mov     [rsp+168h+var_D0], rcx
.text:0000000000401C56                 mov     [rsp+168h+var_C8], r8
.text:0000000000401C5E                 mov     [rsp+168h+var_C0], r9
.text:0000000000401C66                 movzx   r11d, al
.text:0000000000401C6A                 lea     rax, ds:0[r11*4]
.text:0000000000401C72                 lea     r11, loc_401CA7
.text:0000000000401C79                 sub     r11, rax
.text:0000000000401C7C                 lea     rax, [rsp+168h+var_39]
.text:0000000000401C84                 jmp     r11
.text:0000000000401C87                 movaps  xmmword ptr [rax-0Fh], xmm7
.text:0000000000401C8B                 movaps  xmmword ptr [rax-1Fh], xmm6
.text:0000000000401C8F                 movaps  xmmword ptr [rax-2Fh], xmm5
.text:0000000000401C93                 movaps  xmmword ptr [rax-3Fh], xmm4
.text:0000000000401C97                 movaps  xmmword ptr [rax-4Fh], xmm3
.text:0000000000401C9B                 movaps  xmmword ptr [rax-5Fh], xmm2
.text:0000000000401C9F                 movaps  xmmword ptr [rax-6Fh], xmm1
.text:0000000000401CA3                 movaps  xmmword ptr [rax-7Fh], xmm0
.text:0000000000401CA7
.text:0000000000401CA7 loc_401CA7:                             ; DATA XREF: __libirc_print+32↑o
.text:0000000000401CA7                 mov     r14d, esi
.text:0000000000401CAA                 mov     r15d, edx
.text:0000000000401CAD                 mov     r13d, edi
.text:0000000000401CB0                 test    r14d, r14d
.text:0000000000401CB3                 jnz     short loc_401CDC
.text:0000000000401CB5                 cmp     r13d, 1
.text:0000000000401CB9                 jz      loc_401DEE
.text:0000000000401CBF                 lea     rdi, asc_4025A8 ; "\n"
.text:0000000000401CC6                 xor     eax, eax
.text:0000000000401CC8                 call    _printf
.text:0000000000401CCD                 add     rsp, 148h
.text:0000000000401CD4                 pop     rbx
.text:0000000000401CD5                 pop     r15
.text:0000000000401CD7                 pop     r14
.text:0000000000401CD9                 pop     r13
.text:0000000000401CDB                 retn
.text:0000000000401CDC ; ---------------------------------------------------------------------------
.text:0000000000401CDC
.text:0000000000401CDC loc_401CDC:                             ; CODE XREF: __libirc_print+73↑j
.text:0000000000401CDC                 cmp     cs:first_msg, 0
.text:0000000000401CE3                 jz      short loc_401D33
.text:0000000000401CE5                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:0000000000401CEC                 xor     esi, esi        ; flag
.text:0000000000401CEE                 mov     cs:first_msg, 0
.text:0000000000401CF8                 call    _catopen
.text:0000000000401CFD                 mov     cs:message_catalog, rax
.text:0000000000401D04                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000401D08                 jz      loc_401E15
.text:0000000000401D0E                 mov     rdi, cs:message_catalog ; catalog
.text:0000000000401D15
.text:0000000000401D15 loc_401D15:                             ; CODE XREF: __libirc_print+25D↓j
.text:0000000000401D15                 movsxd  rax, r14d
.text:0000000000401D18                 lea     rcx, off_6039E8 ; "\n"
.text:0000000000401D1F                 shl     rax, 4
.text:0000000000401D23                 mov     cs:use_internal_msg, 0
.text:0000000000401D2D                 mov     rcx, [rax+rcx]  ; string
.text:0000000000401D31                 jmp     short loc_401D54
.text:0000000000401D33 ; ---------------------------------------------------------------------------
.text:0000000000401D33
.text:0000000000401D33 loc_401D33:                             ; CODE XREF: __libirc_print+A3↑j
.text:0000000000401D33                                         ; __libirc_print+263↓j
.text:0000000000401D33                 mov     ebx, cs:use_internal_msg
.text:0000000000401D39                 movsxd  rax, r14d
.text:0000000000401D3C                 lea     rcx, off_6039E8 ; "\n"
.text:0000000000401D43                 shl     rax, 4
.text:0000000000401D47                 test    ebx, ebx
.text:0000000000401D49                 mov     rcx, [rax+rcx]
.text:0000000000401D4D                 jnz     short loc_401D64
.text:0000000000401D4F                 jmp     loc_401EE3
.text:0000000000401D54 ; ---------------------------------------------------------------------------
.text:0000000000401D54
.text:0000000000401D54 loc_401D54:                             ; CODE XREF: __libirc_print+F1↑j
.text:0000000000401D54                                         ; __libirc_print+2AA↓j
.text:0000000000401D54                 mov     esi, 1          ; set
.text:0000000000401D59                 mov     edx, r14d       ; number
.text:0000000000401D5C                 call    _catgets
.text:0000000000401D61                 mov     rcx, rax
.text:0000000000401D64
.text:0000000000401D64 loc_401D64:                             ; CODE XREF: __libirc_print+10D↑j
.text:0000000000401D64                 test    r15d, r15d
.text:0000000000401D67                 jle     short loc_401DBD
.text:0000000000401D69                 mov     [rsp+168h+arg], 18h
.text:0000000000401D74                 lea     rax, [rsp+168h+arg_0]
.text:0000000000401D7C                 mov     [rsp+168h+var_34], 30h ; '0'
.text:0000000000401D87                 lea     rdx, [rsp+168h+var_E8]
.text:0000000000401D8F                 mov     [rsp+168h+var_30], rax
.text:0000000000401D97                 mov     [rsp+168h+var_28], rdx
.text:0000000000401D9F                 lea     rdi, print_buf  ; s
.text:0000000000401DA6                 mov     rsi, rcx        ; format
.text:0000000000401DA9                 lea     rdx, [rsp+168h+arg] ; arg
.text:0000000000401DB1                 call    _vsprintf
.text:0000000000401DB6                 lea     rcx, print_buf
.text:0000000000401DBD
.text:0000000000401DBD loc_401DBD:                             ; CODE XREF: __libirc_print+127↑j
.text:0000000000401DBD                 cmp     r13d, 1
.text:0000000000401DC1                 jz      loc_401EA8
.text:0000000000401DC7                 mov     rdi, rcx        ; format
.text:0000000000401DCA                 xor     eax, eax
.text:0000000000401DCC                 call    _printf
.text:0000000000401DD1                 lea     rdi, asc_4025A8 ; "\n"
.text:0000000000401DD8                 xor     eax, eax
.text:0000000000401DDA                 call    _printf
.text:0000000000401DDF                 add     rsp, 148h
.text:0000000000401DE6                 pop     rbx
.text:0000000000401DE7                 pop     r15
.text:0000000000401DE9                 pop     r14
.text:0000000000401DEB                 pop     r13
.text:0000000000401DED                 retn
.text:0000000000401DEE ; ---------------------------------------------------------------------------
.text:0000000000401DEE
.text:0000000000401DEE loc_401DEE:                             ; CODE XREF: __libirc_print+79↑j
.text:0000000000401DEE                 mov     rax, cs:stderr_ptr
.text:0000000000401DF5                 lea     rsi, asc_4025A8 ; "\n"
.text:0000000000401DFC                 mov     rdi, [rax]      ; stream
.text:0000000000401DFF                 xor     eax, eax
.text:0000000000401E01                 call    _fprintf
.text:0000000000401E06                 add     rsp, 148h
.text:0000000000401E0D                 pop     rbx
.text:0000000000401E0E                 pop     r15
.text:0000000000401E10                 pop     r14
.text:0000000000401E12                 pop     r13
.text:0000000000401E14                 retn
.text:0000000000401E15 ; ---------------------------------------------------------------------------
.text:0000000000401E15
.text:0000000000401E15 loc_401E15:                             ; CODE XREF: __libirc_print+C8↑j
.text:0000000000401E15                 lea     rdi, name       ; "LANG"
.text:0000000000401E1C                 call    _getenv
.text:0000000000401E21                 test    rax, rax
.text:0000000000401E24                 jz      short loc_401E92
.text:0000000000401E26                 mov     rsi, rax        ; src
.text:0000000000401E29                 lea     rdi, [rsp+168h+dest] ; dest
.text:0000000000401E2D                 mov     edx, 80h        ; n
.text:0000000000401E32                 call    _strncpy
.text:0000000000401E37                 mov     esi, 2Eh ; '.'  ; c
.text:0000000000401E3C                 lea     rdi, [rsp+168h+dest] ; s
.text:0000000000401E40                 call    _strchr
.text:0000000000401E45                 mov     rbx, rax
.text:0000000000401E48                 test    rbx, rbx
.text:0000000000401E4B                 jz      short loc_401E92
.text:0000000000401E4D                 lea     rdi, name       ; "LANG"
.text:0000000000401E54                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000401E58                 mov     edx, 1          ; replace
.text:0000000000401E5D                 mov     byte ptr [rbx], 0
.text:0000000000401E60                 call    _setenv
.text:0000000000401E65                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:0000000000401E6C                 xor     esi, esi        ; flag
.text:0000000000401E6E                 call    _catopen
.text:0000000000401E73                 lea     rdi, name       ; "LANG"
.text:0000000000401E7A                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000401E7E                 mov     edx, 1          ; replace
.text:0000000000401E83                 mov     cs:message_catalog, rax
.text:0000000000401E8A                 mov     byte ptr [rbx], 2Eh ; '.'
.text:0000000000401E8D                 call    _setenv
.text:0000000000401E92
.text:0000000000401E92 loc_401E92:                             ; CODE XREF: __libirc_print+1E4↑j
.text:0000000000401E92                                         ; __libirc_print+20B↑j
.text:0000000000401E92                 mov     rdi, cs:message_catalog
.text:0000000000401E99                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000401E9D                 jnz     loc_401D15
.text:0000000000401EA3                 jmp     loc_401D33
.text:0000000000401EA8 ; ---------------------------------------------------------------------------
.text:0000000000401EA8
.text:0000000000401EA8 loc_401EA8:                             ; CODE XREF: __libirc_print+181↑j
.text:0000000000401EA8                 mov     rax, cs:stderr_ptr
.text:0000000000401EAF                 mov     rsi, rcx        ; format
.text:0000000000401EB2                 mov     rdi, [rax]      ; stream
.text:0000000000401EB5                 xor     eax, eax
.text:0000000000401EB7                 call    _fprintf
.text:0000000000401EBC                 mov     rax, cs:stderr_ptr
.text:0000000000401EC3                 lea     rsi, asc_4025A8 ; "\n"
.text:0000000000401ECA                 mov     rdi, [rax]      ; stream
.text:0000000000401ECD                 xor     eax, eax
.text:0000000000401ECF                 call    _fprintf
.text:0000000000401ED4                 add     rsp, 148h
.text:0000000000401EDB                 pop     rbx
.text:0000000000401EDC                 pop     r15
.text:0000000000401EDE                 pop     r14
.text:0000000000401EE0                 pop     r13
.text:0000000000401EE2                 retn
.text:0000000000401EE3 ; ---------------------------------------------------------------------------
.text:0000000000401EE3
.text:0000000000401EE3 loc_401EE3:                             ; CODE XREF: __libirc_print+10F↑j
.text:0000000000401EE3                 mov     rdi, cs:message_catalog
.text:0000000000401EEA                 jmp     loc_401D54
.text:0000000000401EEA __libirc_print  endp
.text:0000000000401EEA
.text:0000000000401EEA ; ---------------------------------------------------------------------------
.text:0000000000401EEF                 align 10h
.text:0000000000401EEF ; } // starts at 401C40
.text:0000000000401EF0
.text:0000000000401EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000401EF0
.text:0000000000401EF0
.text:0000000000401EF0                 public __intel_cpu_features_init_x
.text:0000000000401EF0 __intel_cpu_features_init_x proc near
.text:0000000000401EF0 ; __unwind {
.text:0000000000401EF0                 push    rax
.text:0000000000401EF1                 push    rdx
.text:0000000000401EF2                 push    rcx
.text:0000000000401EF3                 push    rsi
.text:0000000000401EF4                 push    rdi
.text:0000000000401EF5                 push    r8
.text:0000000000401EF7                 push    r9
.text:0000000000401EF9                 xor     edi, edi
.text:0000000000401EFB                 call    __intel_cpu_features_init_body
.text:0000000000401F00                 pop     r9
.text:0000000000401F02                 pop     r8
.text:0000000000401F04                 pop     rdi
.text:0000000000401F05                 pop     rsi
.text:0000000000401F06                 pop     rcx
.text:0000000000401F07                 pop     rdx
.text:0000000000401F08                 pop     rax
.text:0000000000401F09                 retn
.text:0000000000401F09 __intel_cpu_features_init_x endp
.text:0000000000401F09
.text:0000000000401F09 ; ---------------------------------------------------------------------------
.text:0000000000401F0A                 align 10h
.text:0000000000401F0A ; } // starts at 401EF0
.text:0000000000401F10
.text:0000000000401F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000401F10
.text:0000000000401F10
.text:0000000000401F10                 public __intel_cpu_features_init
.text:0000000000401F10 __intel_cpu_features_init proc near     ; CODE XREF: __intel_new_feature_proc_init+35F↑p
.text:0000000000401F10 ; __unwind {
.text:0000000000401F10                 push    rax
.text:0000000000401F11                 push    rdx
.text:0000000000401F12                 push    rcx
.text:0000000000401F13                 push    rsi
.text:0000000000401F14                 push    rdi
.text:0000000000401F15                 push    r8
.text:0000000000401F17                 push    r9
.text:0000000000401F19                 mov     edi, 1
.text:0000000000401F1E                 call    __intel_cpu_features_init_body
.text:0000000000401F23                 pop     r9
.text:0000000000401F25                 pop     r8
.text:0000000000401F27                 pop     rdi
.text:0000000000401F28                 pop     rsi
.text:0000000000401F29                 pop     rcx
.text:0000000000401F2A                 pop     rdx
.text:0000000000401F2B                 pop     rax
.text:0000000000401F2C                 retn
.text:0000000000401F2C __intel_cpu_features_init endp
.text:0000000000401F2C
.text:0000000000401F2C ; ---------------------------------------------------------------------------
.text:0000000000401F2D                 align 10h
.text:0000000000401F2D ; } // starts at 401F10
.text:0000000000401F30
.text:0000000000401F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000401F30
.text:0000000000401F30
.text:0000000000401F30 __intel_cpu_features_init_body proc near
.text:0000000000401F30                                         ; CODE XREF: __intel_cpu_features_init_x+B↑p
.text:0000000000401F30                                         ; __intel_cpu_features_init+E↑p
.text:0000000000401F30
.text:0000000000401F30 var_18          = dword ptr -18h
.text:0000000000401F30 var_14          = dword ptr -14h
.text:0000000000401F30 var_10          = dword ptr -10h
.text:0000000000401F30 var_C           = dword ptr -0Ch
.text:0000000000401F30
.text:0000000000401F30 ; __unwind {
.text:0000000000401F30                 push    rbx
.text:0000000000401F31                 mov     r11d, edi
.text:0000000000401F34                 xor     eax, eax
.text:0000000000401F36                 cpuid
.text:0000000000401F38                 mov     [rsp+8+var_18], eax
.text:0000000000401F3C                 mov     [rsp+8+var_14], ebx
.text:0000000000401F40                 mov     [rsp+8+var_10], ecx
.text:0000000000401F44                 mov     [rsp+8+var_C], edx
.text:0000000000401F48                 xor     sil, sil
.text:0000000000401F4B                 cmp     [rsp+8+var_18], 0
.text:0000000000401F50                 jz      loc_40228F
.text:0000000000401F56                 cmp     r11d, 1
.text:0000000000401F5A                 jz      loc_40229C
.text:0000000000401F60
.text:0000000000401F60 loc_401F60:                             ; CODE XREF: __intel_cpu_features_init_body+38A↓j
.text:0000000000401F60                 mov     eax, 1
.text:0000000000401F65                 cpuid
.text:0000000000401F67                 mov     r8d, edx
.text:0000000000401F6A                 mov     r9d, eax
.text:0000000000401F6D                 and     r8d, 1
.text:0000000000401F71                 mov     edi, ecx
.text:0000000000401F73                 lea     r8, ds:1[r8*2]
.text:0000000000401F7B                 mov     rax, r8
.text:0000000000401F7E                 or      rax, 4
.text:0000000000401F82                 test    edx, 8000h
.text:0000000000401F88                 cmovnz  r8, rax
.text:0000000000401F8C                 mov     rcx, r8
.text:0000000000401F8F                 or      rcx, 8
.text:0000000000401F93                 test    edx, 800000h
.text:0000000000401F99                 cmovnz  r8, rcx
.text:0000000000401F9D                 test    edx, 1000000h
.text:0000000000401FA3                 jz      loc_402094
.text:0000000000401FA9                 or      r8, 10h
.text:0000000000401FAD                 mov     r10, r8
.text:0000000000401FB0                 or      r10, 20h
.text:0000000000401FB4                 test    edx, 2000000h
.text:0000000000401FBA                 cmovnz  r8, r10
.text:0000000000401FBE                 mov     rsi, r8
.text:0000000000401FC1                 or      rsi, 40h
.text:0000000000401FC5                 test    edx, 4000000h
.text:0000000000401FCB                 cmovnz  r8, rsi
.text:0000000000401FCF                 mov     r10, r8
.text:0000000000401FD2                 or      r10, 80h
.text:0000000000401FD9                 test    edi, 1
.text:0000000000401FDF                 cmovnz  r8, r10
.text:0000000000401FE3                 mov     rax, r8
.text:0000000000401FE6                 or      rax, 100h
.text:0000000000401FEC                 test    edi, 200h
.text:0000000000401FF2                 cmovnz  r8, rax
.text:0000000000401FF6                 mov     rbx, r8
.text:0000000000401FF9                 or      rbx, 800h
.text:0000000000402000                 test    edi, 400000h
.text:0000000000402006                 cmovnz  r8, rbx
.text:000000000040200A                 mov     rcx, r8
.text:000000000040200D                 or      rcx, 200h
.text:0000000000402014                 test    edi, 80000h
.text:000000000040201A                 cmovnz  r8, rcx
.text:000000000040201E                 mov     rdx, r8
.text:0000000000402021                 or      rdx, 400h
.text:0000000000402028                 test    edi, 100000h
.text:000000000040202E                 cmovnz  r8, rdx
.text:0000000000402032                 mov     r10, r8
.text:0000000000402035                 or      r10, 1000h
.text:000000000040203C                 test    edi, 800000h
.text:0000000000402042                 cmovnz  r8, r10
.text:0000000000402046                 mov     rsi, r8
.text:0000000000402049                 or      rsi, 2000h
.text:0000000000402050                 test    edi, 2
.text:0000000000402056                 cmovnz  r8, rsi
.text:000000000040205A                 mov     sil, 1
.text:000000000040205D                 mov     rax, r8
.text:0000000000402060                 or      rax, 4000h
.text:0000000000402066                 test    edi, 2000000h
.text:000000000040206C                 cmovnz  r8, rax
.text:0000000000402070                 mov     eax, 7
.text:0000000000402075                 xor     ecx, ecx
.text:0000000000402077                 cpuid
.text:0000000000402079                 mov     r10d, ebx
.text:000000000040207C                 mov     rbx, 800000000h
.text:0000000000402086                 or      rbx, r8
.text:0000000000402089                 test    r10d, 20000000h
.text:0000000000402090                 cmovnz  r8, rbx
.text:0000000000402094
.text:0000000000402094 loc_402094:                             ; CODE XREF: __intel_cpu_features_init_body+73↑j
.text:0000000000402094                 mov     rax, r8
.text:0000000000402097                 or      rax, 20000h
.text:000000000040209D                 test    edi, 40000000h
.text:00000000004020A3                 cmovnz  r8, rax
.text:00000000004020A7                 test    sil, sil
.text:00000000004020AA                 jnz     short loc_4020B8
.text:00000000004020AC                 mov     eax, 7
.text:00000000004020B1                 xor     ecx, ecx
.text:00000000004020B3                 cpuid
.text:00000000004020B5                 mov     r10d, ebx
.text:00000000004020B8
.text:00000000004020B8 loc_4020B8:                             ; CODE XREF: __intel_cpu_features_init_body+17A↑j
.text:00000000004020B8                 mov     esi, r10d
.text:00000000004020BB                 mov     rcx, r8
.text:00000000004020BE                 and     esi, 108h
.text:00000000004020C4                 or      rcx, 80000h
.text:00000000004020CB                 cmp     esi, 108h
.text:00000000004020D1                 cmovz   r8, rcx
.text:00000000004020D5                 mov     eax, 80000001h
.text:00000000004020DA                 cpuid
.text:00000000004020DC                 mov     rdx, r8
.text:00000000004020DF                 or      rdx, 100000h
.text:00000000004020E6                 test    cl, 20h
.text:00000000004020E9                 cmovnz  r8, rdx
.text:00000000004020ED                 mov     rcx, r8
.text:00000000004020F0                 or      rcx, 200000h
.text:00000000004020F7                 test    r10d, 10h
.text:00000000004020FE                 cmovnz  r8, rcx
.text:0000000000402102                 mov     rbx, r8
.text:0000000000402105                 or      rbx, 400000h
.text:000000000040210C                 test    r10d, 800h
.text:0000000000402113                 cmovnz  r8, rbx
.text:0000000000402117                 mov     rsi, r8
.text:000000000040211A                 or      rsi, 10000000h
.text:0000000000402121                 test    r10d, 80000h
.text:0000000000402128                 cmovnz  r8, rsi
.text:000000000040212C                 mov     rax, r8
.text:000000000040212F                 or      rax, 20000000h
.text:0000000000402135                 test    r10d, 40000h
.text:000000000040213C                 cmovnz  r8, rax
.text:0000000000402140                 test    edi, 8000000h
.text:0000000000402146                 jz      loc_402246
.text:000000000040214C                 xor     ecx, ecx
.text:000000000040214E                 xgetbv
.text:0000000000402151                 or      r8, 1
.text:0000000000402155                 mov     edx, eax
.text:0000000000402157                 and     edx, 6
.text:000000000040215A                 cmp     edx, 6
.text:000000000040215D                 jnz     loc_402246
.text:0000000000402163                 mov     rdx, r8
.text:0000000000402166                 or      rdx, 10000h
.text:000000000040216D                 test    edi, 10000000h
.text:0000000000402173                 cmovnz  r8, rdx
.text:0000000000402177                 mov     rcx, r8
.text:000000000040217A                 or      rcx, 8000h
.text:0000000000402181                 test    edi, 20000000h
.text:0000000000402187                 cmovnz  r8, rcx
.text:000000000040218B                 mov     rbx, r8
.text:000000000040218E                 or      rbx, 800000h
.text:0000000000402195                 test    r10d, 20h
.text:000000000040219C                 cmovnz  r8, rbx
.text:00000000004021A0                 mov     rsi, r8
.text:00000000004021A3                 or      rsi, 40000h
.text:00000000004021AA                 test    edi, 1000h
.text:00000000004021B0                 mov     edi, eax
.text:00000000004021B2                 cmovnz  r8, rsi
.text:00000000004021B6                 and     edi, 18h
.text:00000000004021B9                 cmp     edi, 18h
.text:00000000004021BC                 jnz     short loc_4021DA
.text:00000000004021BE                 or      r8, 1
.text:00000000004021C2                 mov     rdx, 1000000000h
.text:00000000004021CC                 or      rdx, r8
.text:00000000004021CF                 test    r10d, 4000h
.text:00000000004021D6                 cmovnz  r8, rdx
.text:00000000004021DA
.text:00000000004021DA loc_4021DA:                             ; CODE XREF: __intel_cpu_features_init_body+28C↑j
.text:00000000004021DA                 and     eax, 0E0h
.text:00000000004021DF                 cmp     eax, 0E0h
.text:00000000004021E4                 jnz     short loc_402246
.text:00000000004021E6                 or      r8, 1
.text:00000000004021EA                 mov     rdx, 400000000h
.text:00000000004021F4                 mov     rax, r8
.text:00000000004021F7                 mov     rcx, 100000000h
.text:0000000000402201                 or      rax, 8000000h
.text:0000000000402207                 test    r10d, 10000h
.text:000000000040220E                 mov     rbx, 200000000h
.text:0000000000402218                 cmovnz  r8, rax
.text:000000000040221C                 or      rdx, r8
.text:000000000040221F                 test    r10d, 10000000h
.text:0000000000402226                 cmovnz  r8, rdx
.text:000000000040222A                 or      rcx, r8
.text:000000000040222D                 test    r10d, 8000000h
.text:0000000000402234                 cmovnz  r8, rcx
.text:0000000000402238                 or      rbx, r8
.text:000000000040223B                 test    r10d, 4000000h
.text:0000000000402242                 cmovnz  r8, rbx
.text:0000000000402246
.text:0000000000402246 loc_402246:                             ; CODE XREF: __intel_cpu_features_init_body+216↑j
.text:0000000000402246                                         ; __intel_cpu_features_init_body+22D↑j ...
.text:0000000000402246                 mov     eax, r9d
.text:0000000000402249                 shr     eax, 0Ch
.text:000000000040224C                 shr     r9d, 4
.text:0000000000402250                 and     eax, 0F0h
.text:0000000000402255                 and     r9d, 0Fh
.text:0000000000402259                 add     eax, r9d
.text:000000000040225C                 cmp     eax, 1Ch
.text:000000000040225F                 jz      short loc_40226B
.text:0000000000402261                 cmp     eax, 26h ; '&'
.text:0000000000402264                 jz      short loc_40226B
.text:0000000000402266                 cmp     eax, 27h ; '''
.text:0000000000402269                 jnz     short loc_402270
.text:000000000040226B
.text:000000000040226B loc_40226B:                             ; CODE XREF: __intel_cpu_features_init_body+32F↑j
.text:000000000040226B                                         ; __intel_cpu_features_init_body+334↑j
.text:000000000040226B                 bts     r8, 1Fh
.text:0000000000402270
.text:0000000000402270 loc_402270:                             ; CODE XREF: __intel_cpu_features_init_body+339↑j
.text:0000000000402270                 cmp     r11d, 1
.text:0000000000402274                 jz      short loc_40227F
.text:0000000000402276                 mov     cs:__intel_cpu_feature_indicator_x, r8
.text:000000000040227D                 pop     rbx
.text:000000000040227E                 retn
.text:000000000040227F ; ---------------------------------------------------------------------------
.text:000000000040227F
.text:000000000040227F loc_40227F:                             ; CODE XREF: __intel_cpu_features_init_body+344↑j
.text:000000000040227F                 mov     cs:__intel_cpu_feature_indicator, r8
.text:0000000000402286                 mov     cs:__intel_cpu_feature_indicator_x, r8
.text:000000000040228D                 pop     rbx
.text:000000000040228E                 retn
.text:000000000040228F ; ---------------------------------------------------------------------------
.text:000000000040228F
.text:000000000040228F loc_40228F:                             ; CODE XREF: __intel_cpu_features_init_body+20↑j
.text:000000000040228F                                         ; __intel_cpu_features_init_body+374↓j ...
.text:000000000040228F                 mov     cs:__intel_cpu_feature_indicator, 1
.text:000000000040229A                 pop     rbx
.text:000000000040229B                 retn
.text:000000000040229C ; ---------------------------------------------------------------------------
.text:000000000040229C
.text:000000000040229C loc_40229C:                             ; CODE XREF: __intel_cpu_features_init_body+2A↑j
.text:000000000040229C                 cmp     [rsp+8+var_14], 756E6547h
.text:00000000004022A4                 jnz     short loc_40228F
.text:00000000004022A6                 cmp     [rsp+8+var_C], 49656E69h
.text:00000000004022AE                 jnz     short loc_40228F
.text:00000000004022B0                 cmp     [rsp+8+var_10], 6C65746Eh
.text:00000000004022B8                 jnz     short loc_40228F
.text:00000000004022BA                 jmp     loc_401F60
.text:00000000004022BA __intel_cpu_features_init_body endp
.text:00000000004022BA
.text:00000000004022BA ; ---------------------------------------------------------------------------
.text:00000000004022BF                 align 20h
.text:00000000004022BF ; } // starts at 401F30
.text:00000000004022C0
.text:00000000004022C0 ; =============== S U B R O U T I N E =======================================
.text:00000000004022C0
.text:00000000004022C0
.text:00000000004022C0                 public __intel_proc_init_ftzdazule
.text:00000000004022C0 __intel_proc_init_ftzdazule proc near   ; CODE XREF: __intel_new_feature_proc_init+2D2↑p
.text:00000000004022C0
.text:00000000004022C0 s               = dword ptr -218h
.text:00000000004022C0 var_1FC         = dword ptr -1FCh
.text:00000000004022C0
.text:00000000004022C0 ; __unwind {
.text:00000000004022C0                 push    r15
.text:00000000004022C2                 push    rbx
.text:00000000004022C3                 push    rbp
.text:00000000004022C4                 sub     rsp, 200h
.text:00000000004022CB                 mov     ebx, esi
.text:00000000004022CD                 mov     ebp, ebx
.text:00000000004022CF                 mov     r15d, ebx
.text:00000000004022D2                 and     ebp, 4
.text:00000000004022D5                 and     r15d, 2
.text:00000000004022D9                 jz      short loc_4022E3
.text:00000000004022DB                 test    edi, 2
.text:00000000004022E1                 jz      short loc_4022EF
.text:00000000004022E3
.text:00000000004022E3 loc_4022E3:                             ; CODE XREF: __intel_proc_init_ftzdazule+19↑j
.text:00000000004022E3                 test    ebp, ebp
.text:00000000004022E5                 jz      short loc_402317
.text:00000000004022E7                 test    edi, 4
.text:00000000004022ED                 jnz     short loc_402317
.text:00000000004022EF
.text:00000000004022EF loc_4022EF:                             ; CODE XREF: __intel_proc_init_ftzdazule+21↑j
.text:00000000004022EF                 xor     esi, esi        ; c
.text:00000000004022F1                 lea     rdi, [rsp+218h+s] ; s
.text:00000000004022F5                 mov     edx, 200h       ; n
.text:00000000004022FA                 call    _memset
.text:00000000004022FF                 fxsave  [rsp+218h+s]
.text:0000000000402303                 xor     edx, edx
.text:0000000000402305                 mov     eax, [rsp+218h+var_1FC]
.text:0000000000402309                 test    al, 40h
.text:000000000040230B                 cmovz   r15d, edx
.text:000000000040230F                 test    eax, 20000h
.text:0000000000402314                 cmovz   ebp, edx
.text:0000000000402317
.text:0000000000402317 loc_402317:                             ; CODE XREF: __intel_proc_init_ftzdazule+25↑j
.text:0000000000402317                                         ; __intel_proc_init_ftzdazule+2D↑j
.text:0000000000402317                 test    bl, 1
.text:000000000040231A                 jnz     short loc_402355
.text:000000000040231C
.text:000000000040231C loc_40231C:                             ; CODE XREF: __intel_proc_init_ftzdazule+A8↓j
.text:000000000040231C                 test    r15d, r15d
.text:000000000040231F                 jz      short loc_402332
.text:0000000000402321                 stmxcsr [rsp+218h+s]
.text:0000000000402325                 mov     eax, [rsp+218h+s]
.text:0000000000402328                 or      eax, 40h
.text:000000000040232B                 mov     [rsp+218h+s], eax
.text:000000000040232E                 ldmxcsr [rsp+218h+s]
.text:0000000000402332
.text:0000000000402332 loc_402332:                             ; CODE XREF: __intel_proc_init_ftzdazule+5F↑j
.text:0000000000402332                 test    ebp, ebp
.text:0000000000402334                 jz      short loc_402349
.text:0000000000402336                 stmxcsr [rsp+218h+s]
.text:000000000040233A                 mov     eax, [rsp+218h+s]
.text:000000000040233D                 or      eax, 20000h
.text:0000000000402342                 mov     [rsp+218h+s], eax
.text:0000000000402345                 ldmxcsr [rsp+218h+s]
.text:0000000000402349
.text:0000000000402349 loc_402349:                             ; CODE XREF: __intel_proc_init_ftzdazule+74↑j
.text:0000000000402349                 add     rsp, 200h
.text:0000000000402350                 pop     rbp
.text:0000000000402351                 pop     rbx
.text:0000000000402352                 pop     r15
.text:0000000000402354                 retn
.text:0000000000402355 ; ---------------------------------------------------------------------------
.text:0000000000402355
.text:0000000000402355 loc_402355:                             ; CODE XREF: __intel_proc_init_ftzdazule+5A↑j
.text:0000000000402355                 stmxcsr [rsp+218h+s]
.text:0000000000402359                 mov     eax, [rsp+218h+s]
.text:000000000040235C                 or      eax, 8000h
.text:0000000000402361                 mov     [rsp+218h+s], eax
.text:0000000000402364                 ldmxcsr [rsp+218h+s]
.text:0000000000402368                 jmp     short loc_40231C
.text:0000000000402368 __intel_proc_init_ftzdazule endp
.text:0000000000402368
.text:0000000000402368 ; ---------------------------------------------------------------------------
.text:000000000040236A                 align 10h
.text:000000000040236A ; } // starts at 4022C0
.text:0000000000402370
.text:0000000000402370 ; =============== S U B R O U T I N E =======================================
.text:0000000000402370
.text:0000000000402370
.text:0000000000402370 ; void _libc_csu_init(void)
.text:0000000000402370                 public __libc_csu_init
.text:0000000000402370 __libc_csu_init proc near               ; DATA XREF: _start+16↑o
.text:0000000000402370
.text:0000000000402370 var_30          = qword ptr -30h
.text:0000000000402370 var_28          = qword ptr -28h
.text:0000000000402370 var_20          = qword ptr -20h
.text:0000000000402370 var_18          = qword ptr -18h
.text:0000000000402370 var_10          = qword ptr -10h
.text:0000000000402370 var_8           = qword ptr -8
.text:0000000000402370
.text:0000000000402370 ; __unwind {
.text:0000000000402370                 mov     [rsp+var_28], rbp
.text:0000000000402375                 mov     [rsp+var_20], r12
.text:000000000040237A                 lea     rbp, __CTOR_LIST__
.text:0000000000402381                 lea     r12, __init_array_start
.text:0000000000402388                 mov     [rsp+var_18], r13
.text:000000000040238D                 mov     [rsp+var_10], r14
.text:0000000000402392                 mov     [rsp+var_8], r15
.text:0000000000402397                 mov     [rsp+var_30], rbx
.text:000000000040239C                 sub     rsp, 38h
.text:00000000004023A0                 sub     rbp, r12
.text:00000000004023A3                 mov     r13d, edi
.text:00000000004023A6                 mov     r14, rsi
.text:00000000004023A9                 sar     rbp, 3
.text:00000000004023AD                 mov     r15, rdx
.text:00000000004023B0                 call    _init_proc
.text:00000000004023B5                 test    rbp, rbp
.text:00000000004023B8                 jz      short loc_4023D6
.text:00000000004023BA                 xor     ebx, ebx
.text:00000000004023BC                 nop     dword ptr [rax+00h]
.text:00000000004023C0
.text:00000000004023C0 loc_4023C0:                             ; CODE XREF: __libc_csu_init+64↓j
.text:00000000004023C0                 mov     rdx, r15
.text:00000000004023C3                 mov     rsi, r14
.text:00000000004023C6                 mov     edi, r13d
.text:00000000004023C9                 call    ds:(__init_array_start - 6039A0h)[r12+rbx*8]
.text:00000000004023CD                 add     rbx, 1
.text:00000000004023D1                 cmp     rbx, rbp
.text:00000000004023D4                 jnz     short loc_4023C0
.text:00000000004023D6
.text:00000000004023D6 loc_4023D6:                             ; CODE XREF: __libc_csu_init+48↑j
.text:00000000004023D6                 mov     rbx, [rsp+38h+var_30]
.text:00000000004023DB                 mov     rbp, [rsp+38h+var_28]
.text:00000000004023E0                 mov     r12, [rsp+38h+var_20]
.text:00000000004023E5                 mov     r13, [rsp+38h+var_18]
.text:00000000004023EA                 mov     r14, [rsp+38h+var_10]
.text:00000000004023EF                 mov     r15, [rsp+38h+var_8]
.text:00000000004023F4                 add     rsp, 38h
.text:00000000004023F8                 retn
.text:00000000004023F8 ; } // starts at 402370
.text:00000000004023F8 __libc_csu_init endp
.text:00000000004023F8
.text:00000000004023F8 ; ---------------------------------------------------------------------------
.text:00000000004023F9                 align 20h
.text:0000000000402400
.text:0000000000402400 ; =============== S U B R O U T I N E =======================================
.text:0000000000402400
.text:0000000000402400
.text:0000000000402400 ; void _libc_csu_fini(void)
.text:0000000000402400                 public __libc_csu_fini
.text:0000000000402400 __libc_csu_fini proc near               ; DATA XREF: _start+F↑o
.text:0000000000402400 ; __unwind {
.text:0000000000402400                 rep retn
.text:0000000000402400 ; } // starts at 402400
.text:0000000000402400 __libc_csu_fini endp
.text:0000000000402400
.text:0000000000402400 ; ---------------------------------------------------------------------------
.text:0000000000402402                 align 10h
.text:0000000000402410
.text:0000000000402410 ; =============== S U B R O U T I N E =======================================
.text:0000000000402410
.text:0000000000402410 ; Attributes: bp-based frame
.text:0000000000402410
.text:0000000000402410 __do_global_ctors_aux proc near         ; CODE XREF: _init_proc+E↑p
.text:0000000000402410                 push    rbp
.text:0000000000402411                 mov     rbp, rsp
.text:0000000000402414                 push    rbx
.text:0000000000402415                 sub     rsp, 8
.text:0000000000402419                 mov     rax, cs:__CTOR_LIST__
.text:0000000000402420                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000402424                 jz      short loc_40243F
.text:0000000000402426                 mov     ebx, offset __CTOR_LIST__
.text:000000000040242B                 nop     dword ptr [rax+rax+00h]
.text:0000000000402430
.text:0000000000402430 loc_402430:                             ; CODE XREF: __do_global_ctors_aux+2D↓j
.text:0000000000402430                 sub     rbx, 8
.text:0000000000402434                 call    rax ; __CTOR_LIST__
.text:0000000000402436                 mov     rax, [rbx]
.text:0000000000402439                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000040243D                 jnz     short loc_402430
.text:000000000040243F
.text:000000000040243F loc_40243F:                             ; CODE XREF: __do_global_ctors_aux+14↑j
.text:000000000040243F                 add     rsp, 8
.text:0000000000402443                 pop     rbx
.text:0000000000402444                 pop     rbp
.text:0000000000402445                 retn
.text:0000000000402445 __do_global_ctors_aux endp
.text:0000000000402445
.text:0000000000402445 ; ---------------------------------------------------------------------------
.text:0000000000402446                 align 8
.text:0000000000402446 _text           ends
.text:0000000000402446