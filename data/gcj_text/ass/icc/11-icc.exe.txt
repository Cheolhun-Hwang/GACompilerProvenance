.text:0000000000400A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000400A50
.text:0000000000400A50 ; Attributes: noreturn fuzzy-sp
.text:0000000000400A50
.text:0000000000400A50                 public _start
.text:0000000000400A50 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o
.text:0000000000400A50                 xor     ebp, ebp
.text:0000000000400A52                 mov     r9, rdx         ; rtld_fini
.text:0000000000400A55                 pop     rsi             ; argc
.text:0000000000400A56                 mov     rdx, rsp        ; ubp_av
.text:0000000000400A59                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000400A5D                 push    rax
.text:0000000000400A5E                 push    rsp             ; stack_end
.text:0000000000400A5F                 mov     r8, offset __libc_csu_fini ; fini
.text:0000000000400A66                 mov     rcx, offset __libc_csu_init ; init
.text:0000000000400A6D                 mov     rdi, offset main ; main
.text:0000000000400A74                 call    ___libc_start_main
.text:0000000000400A79                 hlt
.text:0000000000400A79 _start          endp
.text:0000000000400A79
.text:0000000000400A79 ; ---------------------------------------------------------------------------
.text:0000000000400A7A                 align 4
.text:0000000000400A7C
.text:0000000000400A7C ; =============== S U B R O U T I N E =======================================
.text:0000000000400A7C
.text:0000000000400A7C
.text:0000000000400A7C call_gmon_start proc near               ; CODE XREF: _init_proc+4↑p
.text:0000000000400A7C                 sub     rsp, 8
.text:0000000000400A80                 mov     rax, cs:__gmon_start___ptr
.text:0000000000400A87                 test    rax, rax
.text:0000000000400A8A                 jz      short loc_400A8E
.text:0000000000400A8C                 call    rax ; __gmon_start__
.text:0000000000400A8E
.text:0000000000400A8E loc_400A8E:                             ; CODE XREF: call_gmon_start+E↑j
.text:0000000000400A8E                 add     rsp, 8
.text:0000000000400A92                 retn
.text:0000000000400A92 call_gmon_start endp
.text:0000000000400A92
.text:0000000000400A92 ; ---------------------------------------------------------------------------
.text:0000000000400A93                 align 20h
.text:0000000000400AA0
.text:0000000000400AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000400AA0
.text:0000000000400AA0 ; Attributes: bp-based frame
.text:0000000000400AA0
.text:0000000000400AA0 __do_global_dtors_aux proc near         ; CODE XREF: _term_proc+4↓p
.text:0000000000400AA0                 push    rbp
.text:0000000000400AA1                 mov     rbp, rsp
.text:0000000000400AA4                 push    rbx
.text:0000000000400AA5                 sub     rsp, 8
.text:0000000000400AA9                 cmp     cs:completed_6531, 0
.text:0000000000400AB0                 jnz     short loc_400AFD
.text:0000000000400AB2                 mov     ebx, offset __DTOR_END__
.text:0000000000400AB7                 mov     rax, cs:dtor_idx_6533
.text:0000000000400ABE                 sub     rbx, offset __DTOR_LIST__
.text:0000000000400AC5                 sar     rbx, 3
.text:0000000000400AC9                 sub     rbx, 1
.text:0000000000400ACD                 cmp     rax, rbx
.text:0000000000400AD0                 jnb     short loc_400AF6
.text:0000000000400AD2                 nop     word ptr [rax+rax+00h]
.text:0000000000400AD8
.text:0000000000400AD8 loc_400AD8:                             ; CODE XREF: __do_global_dtors_aux+54↓j
.text:0000000000400AD8                 add     rax, 1
.text:0000000000400ADC                 mov     cs:dtor_idx_6533, rax
.text:0000000000400AE3                 call    ds:__DTOR_LIST__[rax*8]
.text:0000000000400AEA                 mov     rax, cs:dtor_idx_6533
.text:0000000000400AF1                 cmp     rax, rbx
.text:0000000000400AF4                 jb      short loc_400AD8
.text:0000000000400AF6
.text:0000000000400AF6 loc_400AF6:                             ; CODE XREF: __do_global_dtors_aux+30↑j
.text:0000000000400AF6                 mov     cs:completed_6531, 1
.text:0000000000400AFD
.text:0000000000400AFD loc_400AFD:                             ; CODE XREF: __do_global_dtors_aux+10↑j
.text:0000000000400AFD                 add     rsp, 8
.text:0000000000400B01                 pop     rbx
.text:0000000000400B02                 pop     rbp
.text:0000000000400B03                 retn
.text:0000000000400B03 __do_global_dtors_aux endp
.text:0000000000400B03
.text:0000000000400B03 ; ---------------------------------------------------------------------------
.text:0000000000400B04                 align 10h
.text:0000000000400B10
.text:0000000000400B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000400B10
.text:0000000000400B10 ; Attributes: bp-based frame
.text:0000000000400B10
.text:0000000000400B10 frame_dummy     proc near               ; CODE XREF: _init_proc+9↑p
.text:0000000000400B10                 cmp     cs:__JCR_LIST__, 0
.text:0000000000400B18                 push    rbp
.text:0000000000400B19                 mov     rbp, rsp
.text:0000000000400B1C                 jz      short loc_400B30
.text:0000000000400B1E                 mov     eax, 0
.text:0000000000400B23                 test    rax, rax
.text:0000000000400B26                 jz      short loc_400B30
.text:0000000000400B28                 pop     rbp
.text:0000000000400B29                 mov     edi, offset __JCR_LIST__
.text:0000000000400B2E                 jmp     rax
.text:0000000000400B30 ; ---------------------------------------------------------------------------
.text:0000000000400B30
.text:0000000000400B30 loc_400B30:                             ; CODE XREF: frame_dummy+C↑j
.text:0000000000400B30                                         ; frame_dummy+16↑j
.text:0000000000400B30                 pop     rbp
.text:0000000000400B31                 retn
.text:0000000000400B31 frame_dummy     endp
.text:0000000000400B31
.text:0000000000400B31 ; ---------------------------------------------------------------------------
.text:0000000000400B32                 align 20h
.text:0000000000400B40
.text:0000000000400B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000400B40
.text:0000000000400B40 ; Attributes: bp-based frame fuzzy-sp
.text:0000000000400B40
.text:0000000000400B40 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000400B40                 public main
.text:0000000000400B40 main            proc near               ; DATA XREF: _start+1D↑o
.text:0000000000400B40
.text:0000000000400B40 var_80          = qword ptr -80h
.text:0000000000400B40 var_78          = qword ptr -78h
.text:0000000000400B40 var_70          = qword ptr -70h
.text:0000000000400B40 var_68          = qword ptr -68h
.text:0000000000400B40 var_60          = dword ptr -60h
.text:0000000000400B40 var_5C          = dword ptr -5Ch
.text:0000000000400B40
.text:0000000000400B40 ; __unwind { // ___gxx_personality_v0
.text:0000000000400B40                 push    rbp
.text:0000000000400B41                 mov     rbp, rsp
.text:0000000000400B44                 and     rsp, 0FFFFFFFFFFFFFF80h
.text:0000000000400B48                 sub     rsp, 80h
.text:0000000000400B4F                 mov     rsi, 0
.text:0000000000400B59                 mov     edi, 3
.text:0000000000400B5E                 call    __intel_new_feature_proc_init
.text:0000000000400B63                 stmxcsr dword ptr [rsp+80h+var_80]
.text:0000000000400B67                 mov     edi, offset format ; "%d"
.text:0000000000400B6C                 lea     rsi, [rsp+80h+var_60]
.text:0000000000400B71                 or      dword ptr [rsp+80h+var_80], 8040h
.text:0000000000400B78                 xor     eax, eax
.text:0000000000400B7A                 ldmxcsr dword ptr [rsp+80h+var_80]
.text:0000000000400B7E                 call    _scanf
.text:0000000000400B83                 mov     esi, 1
.text:0000000000400B88                 cmp     [rsp+80h+var_60], 0
.text:0000000000400B8D                 jle     loc_400C6C
.text:0000000000400B93                 xor     r8d, r8d
.text:0000000000400B96                 mov     [rsp+80h+var_80], r13
.text:0000000000400B9A                 mov     [rsp+80h+var_78], r14
.text:0000000000400B9F                 mov     r14d, r8d
.text:0000000000400BA2                 mov     [rsp+80h+var_70], r15
.text:0000000000400BA7                 mov     [rsp+80h+var_68], rbx
.text:0000000000400BAC                 mov     ebx, esi
.text:0000000000400BAE
.text:0000000000400BAE loc_400BAE:                             ; CODE XREF: main+113↓j
.text:0000000000400BAE                 mov     edi, offset aDDD ; "%d%d%d"
.text:0000000000400BB3                 mov     esi, offset n
.text:0000000000400BB8                 mov     edx, offset m
.text:0000000000400BBD                 mov     ecx, offset p
.text:0000000000400BC2                 xor     eax, eax
.text:0000000000400BC4                 call    _scanf
.text:0000000000400BC9                 mov     r15d, r14d
.text:0000000000400BCC                 mov     r13d, r15d
.text:0000000000400BCF                 cmp     cs:n, 0
.text:0000000000400BD6                 jle     short loc_400C3C
.text:0000000000400BD8
.text:0000000000400BD8 loc_400BD8:                             ; CODE XREF: main+FA↓j
.text:0000000000400BD8                 mov     edi, offset format ; "%d"
.text:0000000000400BDD                 lea     rsi, [rsp+80h+var_5C]
.text:0000000000400BE2                 xor     eax, eax
.text:0000000000400BE4                 call    _scanf
.text:0000000000400BE9                 mov     edi, cs:p
.text:0000000000400BEF                 mov     r9d, [rsp+80h+var_5C]
.text:0000000000400BF4                 lea     eax, [rdi-1]
.text:0000000000400BF7                 test    eax, eax
.text:0000000000400BF9                 cmovle  eax, r14d
.text:0000000000400BFD                 lea     ecx, [rdi+rax*2]
.text:0000000000400C00                 cmp     r9d, ecx
.text:0000000000400C03                 jl      short loc_400C0A
.text:0000000000400C05                 inc     r15d
.text:0000000000400C08                 jmp     short loc_400C30
.text:0000000000400C0A ; ---------------------------------------------------------------------------
.text:0000000000400C0A
.text:0000000000400C0A loc_400C0A:                             ; CODE XREF: main+C3↑j
.text:0000000000400C0A                 lea     eax, [rdi-2]
.text:0000000000400C0D                 test    eax, eax
.text:0000000000400C0F                 cmovle  eax, r14d
.text:0000000000400C13                 lea     ecx, [rdi+rax*2]
.text:0000000000400C16                 cmp     r9d, ecx
.text:0000000000400C19                 jl      short loc_400C30
.text:0000000000400C1B                 mov     eax, cs:m
.text:0000000000400C21                 test    eax, eax
.text:0000000000400C23                 jz      short loc_400C30
.text:0000000000400C25                 dec     eax
.text:0000000000400C27                 inc     r15d
.text:0000000000400C2A                 mov     cs:m, eax
.text:0000000000400C30
.text:0000000000400C30 loc_400C30:                             ; CODE XREF: main+C8↑j
.text:0000000000400C30                                         ; main+D9↑j ...
.text:0000000000400C30                 inc     r13d
.text:0000000000400C33                 cmp     r13d, cs:n
.text:0000000000400C3A                 jl      short loc_400BD8
.text:0000000000400C3C
.text:0000000000400C3C loc_400C3C:                             ; CODE XREF: main+96↑j
.text:0000000000400C3C                 mov     edi, offset aCaseDD ; "Case #%d: %d\n"
.text:0000000000400C41                 mov     esi, ebx
.text:0000000000400C43                 mov     edx, r15d
.text:0000000000400C46                 xor     eax, eax
.text:0000000000400C48                 call    _printf
.text:0000000000400C4D                 inc     ebx
.text:0000000000400C4F                 cmp     ebx, [rsp+80h+var_60]
.text:0000000000400C53                 jle     loc_400BAE
.text:0000000000400C59                 mov     r13, [rsp+80h+var_80]
.text:0000000000400C5D                 mov     r14, [rsp+80h+var_78]
.text:0000000000400C62                 mov     r15, [rsp+80h+var_70]
.text:0000000000400C67                 mov     rbx, [rsp+80h+var_68]
.text:0000000000400C6C
.text:0000000000400C6C loc_400C6C:                             ; CODE XREF: main+4D↑j
.text:0000000000400C6C                 xor     eax, eax
.text:0000000000400C6E                 mov     rsp, rbp
.text:0000000000400C71                 pop     rbp
.text:0000000000400C72                 retn
.text:0000000000400C72 main            endp
.text:0000000000400C72
.text:0000000000400C72 ; ---------------------------------------------------------------------------
.text:0000000000400C73                 align 20h
.text:0000000000400C73 ; } // starts at 400B40
.text:0000000000400C80
.text:0000000000400C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000400C80
.text:0000000000400C80
.text:0000000000400C80 __sti__$E       proc near               ; CODE XREF: __libc_csu_init+59↓p
.text:0000000000400C80                                         ; DATA XREF: .init_array:__init_array_start↓o
.text:0000000000400C80 ; __unwind { // ___gxx_personality_v0
.text:0000000000400C80                 push    rsi
.text:0000000000400C81                 mov     edi, offset _ZSt8__ioinit ; this
.text:0000000000400C86                 call    __ZNSt8ios_base4InitC1Ev ; std::ios_base::Init::Init(void)
.text:0000000000400C8B                 mov     edi, offset __ZNSt8ios_base4InitD1Ev ; lpfunc
.text:0000000000400C90                 mov     esi, offset _ZSt8__ioinit ; obj
.text:0000000000400C95                 mov     edx, offset __dso_handle ; lpdso_handle
.text:0000000000400C9A                 add     rsp, 8
.text:0000000000400C9E                 jmp     ___cxa_atexit
.text:0000000000400C9E __sti__$E       endp
.text:0000000000400C9E
.text:0000000000400C9E ; ---------------------------------------------------------------------------
.text:0000000000400CA3                 align 10h
.text:0000000000400CA3 ; } // starts at 400C80
.text:0000000000400CB0
.text:0000000000400CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000400CB0
.text:0000000000400CB0
.text:0000000000400CB0                 public __intel_new_feature_proc_init
.text:0000000000400CB0 __intel_new_feature_proc_init proc near ; CODE XREF: main+1E↑p
.text:0000000000400CB0
.text:0000000000400CB0 dest            = byte ptr -448h
.text:0000000000400CB0 var_48          = qword ptr -48h
.text:0000000000400CB0 var_40          = qword ptr -40h
.text:0000000000400CB0 var_38          = qword ptr -38h
.text:0000000000400CB0 var_30          = qword ptr -30h
.text:0000000000400CB0 var_28          = qword ptr -28h
.text:0000000000400CB0 s               = qword ptr -20h
.text:0000000000400CB0
.text:0000000000400CB0 ; __unwind {
.text:0000000000400CB0                 push    r12
.text:0000000000400CB2                 push    r13
.text:0000000000400CB4                 push    r14
.text:0000000000400CB6                 sub     rsp, 430h
.text:0000000000400CBD                 mov     r14, rsi
.text:0000000000400CC0                 mov     rax, cs:__intel_cpu_feature_indicator_ptr
.text:0000000000400CC7                 mov     r13d, edi
.text:0000000000400CCA                 mov     r12, [rax]
.text:0000000000400CCD                 test    r12, r12
.text:0000000000400CD0                 jz      loc_40100D
.text:0000000000400CD6
.text:0000000000400CD6 loc_400CD6:                             ; CODE XREF: __intel_new_feature_proc_init+371↓j
.text:0000000000400CD6                 mov     rax, r12
.text:0000000000400CD9                 and     rax, r14
.text:0000000000400CDC                 cmp     r14, rax
.text:0000000000400CDF                 jnz     short loc_400CFC
.text:0000000000400CE1                 test    r12, 6
.text:0000000000400CE8                 jnz     loc_400F7D
.text:0000000000400CEE
.text:0000000000400CEE loc_400CEE:                             ; CODE XREF: __intel_new_feature_proc_init+2D7↓j
.text:0000000000400CEE                 add     rsp, 430h
.text:0000000000400CF5                 pop     r14
.text:0000000000400CF7                 pop     r13
.text:0000000000400CF9                 pop     r12
.text:0000000000400CFB                 retn
.text:0000000000400CFC ; ---------------------------------------------------------------------------
.text:0000000000400CFC
.text:0000000000400CFC loc_400CFC:                             ; CODE XREF: __intel_new_feature_proc_init+2F↑j
.text:0000000000400CFC                 test    r14, 1
.text:0000000000400D03                 jnz     loc_400FF8
.text:0000000000400D09                 not     r12
.text:0000000000400D0C                 mov     edi, 39h ; '9'  ; number
.text:0000000000400D11                 and     r12, r14
.text:0000000000400D14                 xor     r14d, r14d
.text:0000000000400D17                 xor     esi, esi
.text:0000000000400D19                 xor     eax, eax
.text:0000000000400D1B                 call    __libirc_get_msg
.text:0000000000400D20                 xor     edx, edx
.text:0000000000400D22                 mov     r8b, 1
.text:0000000000400D25                 mov     [rsp+448h+dest], 0
.text:0000000000400D29                 xor     r13d, r13d
.text:0000000000400D2C                 mov     [rsp+448h+s], rax
.text:0000000000400D34                 mov     [rsp+448h+var_28], r15
.text:0000000000400D3C                 mov     r15, r12
.text:0000000000400D3F                 mov     [rsp+448h+var_30], rbx
.text:0000000000400D47                 mov     r12b, r8b
.text:0000000000400D4A                 mov     [rsp+448h+var_38], rbp
.text:0000000000400D52                 mov     rbp, r14
.text:0000000000400D55                 mov     r14, rdx
.text:0000000000400D58
.text:0000000000400D58 loc_400D58:                             ; CODE XREF: __intel_new_feature_proc_init+1CE↓j
.text:0000000000400D58                 mov     ecx, r13d
.text:0000000000400D5B                 mov     eax, 1
.text:0000000000400D60                 shl     rax, cl
.text:0000000000400D63                 test    rax, r15
.text:0000000000400D66                 jz      loc_400E74
.text:0000000000400D6C                 cmp     r12b, 26h ; '&'
.text:0000000000400D70                 jnb     loc_400F53
.text:0000000000400D76                 movzx   ebx, r12b
.text:0000000000400D7A                 lea     rax, c_feature_names
.text:0000000000400D81                 mov     rbx, [rax+rbx*8]
.text:0000000000400D85                 test    rbx, rbx
.text:0000000000400D88                 jz      loc_400F53
.text:0000000000400D8E                 cmp     byte ptr [rbx], 0
.text:0000000000400D91                 jz      loc_400F53
.text:0000000000400D97                 cmp     [rsp+448h+dest], 0
.text:0000000000400D9B                 jz      loc_400E4F
.text:0000000000400DA1                 test    rbp, rbp
.text:0000000000400DA4                 jz      loc_400E4A
.text:0000000000400DAA                 mov     rdi, rbp        ; s
.text:0000000000400DAD                 call    _strlen
.text:0000000000400DB2                 mov     [rsp+448h+var_40], rax
.text:0000000000400DBA                 mov     rdi, [rsp+448h+s] ; s
.text:0000000000400DC2                 call    _strlen
.text:0000000000400DC7                 mov     [rsp+448h+var_48], rax
.text:0000000000400DCF                 mov     rdi, rbx        ; s
.text:0000000000400DD2                 call    _strlen
.text:0000000000400DD7                 mov     r9, rax
.text:0000000000400DDA                 mov     rax, [rsp+448h+var_40]
.text:0000000000400DE2                 add     rax, r14
.text:0000000000400DE5                 add     rax, [rsp+448h+var_48]
.text:0000000000400DED                 lea     r9, [rax+r9+2]
.text:0000000000400DF2                 cmp     r9, 400h
.text:0000000000400DF9                 jnb     loc_400F8C
.text:0000000000400DFF                 neg     r14
.text:0000000000400E02                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000400E06                 add     r14, 3FFh
.text:0000000000400E0D                 lea     rsi, src        ; ", "
.text:0000000000400E14                 mov     rdx, r14        ; n
.text:0000000000400E17                 call    _strncat
.text:0000000000400E1C                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000400E20                 call    _strlen
.text:0000000000400E25                 movsxd  rdx, eax
.text:0000000000400E28                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000400E2C                 neg     rdx
.text:0000000000400E2F                 mov     rsi, rbp        ; src
.text:0000000000400E32                 add     rdx, 3FFh       ; n
.text:0000000000400E39                 call    _strncat
.text:0000000000400E3E                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000400E42                 call    _strlen
.text:0000000000400E47                 movsxd  r14, eax
.text:0000000000400E4A
.text:0000000000400E4A loc_400E4A:                             ; CODE XREF: __intel_new_feature_proc_init+F4↑j
.text:0000000000400E4A                 mov     rbp, rbx
.text:0000000000400E4D                 jmp     short loc_400E74
.text:0000000000400E4F ; ---------------------------------------------------------------------------
.text:0000000000400E4F
.text:0000000000400E4F loc_400E4F:                             ; CODE XREF: __intel_new_feature_proc_init+EB↑j
.text:0000000000400E4F                 neg     r14
.text:0000000000400E52                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000400E56                 add     r14, 3FFh
.text:0000000000400E5D                 mov     rsi, rbx        ; src
.text:0000000000400E60                 mov     rdx, r14        ; n
.text:0000000000400E63                 call    _strncat
.text:0000000000400E68                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000400E6C                 call    _strlen
.text:0000000000400E71                 movsxd  r14, eax
.text:0000000000400E74
.text:0000000000400E74 loc_400E74:                             ; CODE XREF: __intel_new_feature_proc_init+B6↑j
.text:0000000000400E74                                         ; __intel_new_feature_proc_init+19D↑j
.text:0000000000400E74                 inc     r12b
.text:0000000000400E77                 inc     r13d
.text:0000000000400E7A                 cmp     r12b, 25h ; '%'
.text:0000000000400E7E                 jle     loc_400D58
.text:0000000000400E84                 mov     rdx, r14
.text:0000000000400E87                 mov     r14, rbp
.text:0000000000400E8A                 mov     rax, [rsp+448h+s]
.text:0000000000400E92                 test    r14, r14
.text:0000000000400E95                 mov     r15, [rsp+448h+var_28]
.text:0000000000400E9D                 mov     rbx, [rsp+448h+var_30]
.text:0000000000400EA5                 mov     rbp, [rsp+448h+var_38]
.text:0000000000400EAD                 jz      short loc_400EE7
.text:0000000000400EAF                 neg     rdx
.text:0000000000400EB2                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000400EB6                 add     rdx, 3FFh       ; n
.text:0000000000400EBD                 mov     rsi, rax        ; src
.text:0000000000400EC0                 call    _strncat
.text:0000000000400EC5                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000400EC9                 call    _strlen
.text:0000000000400ECE                 movsxd  rdx, eax
.text:0000000000400ED1                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000400ED5                 neg     rdx
.text:0000000000400ED8                 mov     rsi, r14        ; src
.text:0000000000400EDB                 add     rdx, 3FFh       ; n
.text:0000000000400EE2                 call    _strncat
.text:0000000000400EE7
.text:0000000000400EE7 loc_400EE7:                             ; CODE XREF: __intel_new_feature_proc_init+1FD↑j
.text:0000000000400EE7                                         ; __intel_new_feature_proc_init+343↓j
.text:0000000000400EE7                 cmp     [rsp+448h+dest], 0
.text:0000000000400EEB                 jnz     short loc_400F2A
.text:0000000000400EED                 xor     esi, esi
.text:0000000000400EEF                 mov     edi, 1
.text:0000000000400EF4                 xor     edx, edx
.text:0000000000400EF6                 xor     eax, eax
.text:0000000000400EF8                 call    __libirc_print
.text:0000000000400EFD
.text:0000000000400EFD loc_400EFD:                             ; CODE XREF: __intel_new_feature_proc_init+2CB↓j
.text:0000000000400EFD                                         ; __intel_new_feature_proc_init+358↓j
.text:0000000000400EFD                 mov     edi, 1
.text:0000000000400F02                 mov     esi, 3Ah ; ':'
.text:0000000000400F07                 xor     edx, edx
.text:0000000000400F09                 xor     eax, eax
.text:0000000000400F0B                 call    __libirc_print
.text:0000000000400F10
.text:0000000000400F10 loc_400F10:                             ; CODE XREF: __intel_new_feature_proc_init+2A1↓j
.text:0000000000400F10                                         ; __intel_new_feature_proc_init+39A↓j
.text:0000000000400F10                 xor     esi, esi
.text:0000000000400F12                 mov     edi, 1
.text:0000000000400F17                 xor     edx, edx
.text:0000000000400F19                 xor     eax, eax
.text:0000000000400F1B                 call    __libirc_print
.text:0000000000400F20                 mov     edi, 1          ; status
.text:0000000000400F25                 call    _exit
.text:0000000000400F2A ; ---------------------------------------------------------------------------
.text:0000000000400F2A
.text:0000000000400F2A loc_400F2A:                             ; CODE XREF: __intel_new_feature_proc_init+23B↑j
.text:0000000000400F2A                 xor     esi, esi
.text:0000000000400F2C                 mov     edi, 1
.text:0000000000400F31                 xor     edx, edx
.text:0000000000400F33                 xor     eax, eax
.text:0000000000400F35                 call    __libirc_print
.text:0000000000400F3A                 mov     edi, 1
.text:0000000000400F3F                 mov     esi, 38h ; '8'
.text:0000000000400F44                 mov     edx, edi
.text:0000000000400F46                 lea     rcx, [rsp+448h+dest]
.text:0000000000400F4A                 xor     eax, eax
.text:0000000000400F4C                 call    __libirc_print
.text:0000000000400F51                 jmp     short loc_400F10
.text:0000000000400F53 ; ---------------------------------------------------------------------------
.text:0000000000400F53
.text:0000000000400F53 loc_400F53:                             ; CODE XREF: __intel_new_feature_proc_init+C0↑j
.text:0000000000400F53                                         ; __intel_new_feature_proc_init+D8↑j ...
.text:0000000000400F53                 mov     r15, [rsp+448h+var_28]
.text:0000000000400F5B                 mov     rbx, [rsp+448h+var_30]
.text:0000000000400F63                 mov     rbp, [rsp+448h+var_38]
.text:0000000000400F6B                 xor     esi, esi
.text:0000000000400F6D                 mov     edi, 1
.text:0000000000400F72                 xor     edx, edx
.text:0000000000400F74                 xor     eax, eax
.text:0000000000400F76                 call    __libirc_print
.text:0000000000400F7B                 jmp     short loc_400EFD
.text:0000000000400F7D ; ---------------------------------------------------------------------------
.text:0000000000400F7D
.text:0000000000400F7D loc_400F7D:                             ; CODE XREF: __intel_new_feature_proc_init+38↑j
.text:0000000000400F7D                 xor     edi, edi
.text:0000000000400F7F                 mov     esi, r13d
.text:0000000000400F82                 call    __intel_proc_init_ftzdazule
.text:0000000000400F87                 jmp     loc_400CEE
.text:0000000000400F8C ; ---------------------------------------------------------------------------
.text:0000000000400F8C
.text:0000000000400F8C loc_400F8C:                             ; CODE XREF: __intel_new_feature_proc_init+149↑j
.text:0000000000400F8C                 mov     rdx, r14
.text:0000000000400F8F                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000400F93                 neg     rdx
.text:0000000000400F96                 mov     r14, rbp
.text:0000000000400F99                 mov     rax, [rsp+448h+s]
.text:0000000000400FA1                 add     rdx, 3FFh       ; n
.text:0000000000400FA8                 mov     rsi, rax        ; src
.text:0000000000400FAB                 mov     r15, [rsp+448h+var_28]
.text:0000000000400FB3                 mov     rbx, [rsp+448h+var_30]
.text:0000000000400FBB                 mov     rbp, [rsp+448h+var_38]
.text:0000000000400FC3                 call    _strncat
.text:0000000000400FC8                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000400FCC                 call    _strlen
.text:0000000000400FD1                 movsxd  rdx, eax
.text:0000000000400FD4                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000400FD8                 neg     rdx
.text:0000000000400FDB                 mov     rsi, r14        ; src
.text:0000000000400FDE                 add     rdx, 3FFh       ; n
.text:0000000000400FE5                 call    _strncat
.text:0000000000400FEA                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000400FEE                 call    _strlen
.text:0000000000400FF3                 jmp     loc_400EE7
.text:0000000000400FF8 ; ---------------------------------------------------------------------------
.text:0000000000400FF8
.text:0000000000400FF8 loc_400FF8:                             ; CODE XREF: __intel_new_feature_proc_init+53↑j
.text:0000000000400FF8                 xor     esi, esi
.text:0000000000400FFA                 mov     edi, 1
.text:0000000000400FFF                 xor     edx, edx
.text:0000000000401001                 xor     eax, eax
.text:0000000000401003                 call    __libirc_print
.text:0000000000401008                 jmp     loc_400EFD
.text:000000000040100D ; ---------------------------------------------------------------------------
.text:000000000040100D
.text:000000000040100D loc_40100D:                             ; CODE XREF: __intel_new_feature_proc_init+20↑j
.text:000000000040100D                 xor     eax, eax
.text:000000000040100F                 call    __intel_cpu_features_init
.text:0000000000401014                 mov     rax, cs:__intel_cpu_feature_indicator_ptr
.text:000000000040101B                 mov     r12, [rax]
.text:000000000040101E                 test    r12, r12
.text:0000000000401021                 jnz     loc_400CD6
.text:0000000000401027                 xor     esi, esi
.text:0000000000401029                 mov     edi, 1
.text:000000000040102E                 xor     edx, edx
.text:0000000000401030                 xor     eax, eax
.text:0000000000401032                 call    __libirc_print
.text:0000000000401037                 mov     edi, 1
.text:000000000040103C                 mov     esi, 3Bh ; ';'
.text:0000000000401041                 xor     edx, edx
.text:0000000000401043                 xor     eax, eax
.text:0000000000401045                 call    __libirc_print
.text:000000000040104A                 jmp     loc_400F10
.text:000000000040104A __intel_new_feature_proc_init endp
.text:000000000040104A
.text:000000000040104A ; ---------------------------------------------------------------------------
.text:000000000040104F                 align 10h
.text:000000000040104F ; } // starts at 400CB0
.text:0000000000401050
.text:0000000000401050 ; =============== S U B R O U T I N E =======================================
.text:0000000000401050
.text:0000000000401050
.text:0000000000401050 ; __int64 __usercall _libirc_get_msg@<rax>(int number@<edi>, char)
.text:0000000000401050                 public __libirc_get_msg
.text:0000000000401050 __libirc_get_msg proc near              ; CODE XREF: __intel_new_feature_proc_init+6B↑p
.text:0000000000401050
.text:0000000000401050 dest            = byte ptr -168h
.text:0000000000401050 var_E8          = byte ptr -0E8h
.text:0000000000401050 var_D8          = qword ptr -0D8h
.text:0000000000401050 var_D0          = qword ptr -0D0h
.text:0000000000401050 var_C8          = qword ptr -0C8h
.text:0000000000401050 var_C0          = qword ptr -0C0h
.text:0000000000401050 var_39          = byte ptr -39h
.text:0000000000401050 arg             = dword ptr -38h
.text:0000000000401050 var_34          = dword ptr -34h
.text:0000000000401050 var_30          = qword ptr -30h
.text:0000000000401050 var_28          = qword ptr -28h
.text:0000000000401050 arg_0           = byte ptr  8
.text:0000000000401050
.text:0000000000401050 ; __unwind {
.text:0000000000401050                 push    r12
.text:0000000000401052                 push    r13
.text:0000000000401054                 push    r14
.text:0000000000401056                 sub     rsp, 150h
.text:000000000040105D                 mov     [rsp+168h+var_D8], rdx
.text:0000000000401065                 mov     [rsp+168h+var_D0], rcx
.text:000000000040106D                 mov     [rsp+168h+var_C8], r8
.text:0000000000401075                 mov     [rsp+168h+var_C0], r9
.text:000000000040107D                 movzx   r11d, al
.text:0000000000401081                 lea     rax, ds:0[r11*4]
.text:0000000000401089                 lea     r11, loc_4010BE
.text:0000000000401090                 sub     r11, rax
.text:0000000000401093                 lea     rax, [rsp+168h+var_39]
.text:000000000040109B                 jmp     r11
.text:000000000040109E                 movaps  xmmword ptr [rax-0Fh], xmm7
.text:00000000004010A2                 movaps  xmmword ptr [rax-1Fh], xmm6
.text:00000000004010A6                 movaps  xmmword ptr [rax-2Fh], xmm5
.text:00000000004010AA                 movaps  xmmword ptr [rax-3Fh], xmm4
.text:00000000004010AE                 movaps  xmmword ptr [rax-4Fh], xmm3
.text:00000000004010B2                 movaps  xmmword ptr [rax-5Fh], xmm2
.text:00000000004010B6                 movaps  xmmword ptr [rax-6Fh], xmm1
.text:00000000004010BA                 movaps  xmmword ptr [rax-7Fh], xmm0
.text:00000000004010BE
.text:00000000004010BE loc_4010BE:                             ; DATA XREF: __libirc_get_msg+39↑o
.text:00000000004010BE                 mov     r13d, edi
.text:00000000004010C1                 mov     r14d, esi
.text:00000000004010C4                 test    r13d, r13d
.text:00000000004010C7                 jz      loc_401157
.text:00000000004010CD                 cmp     cs:first_msg, 0
.text:00000000004010D4                 jz      short loc_401124
.text:00000000004010D6                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:00000000004010DD                 xor     esi, esi        ; flag
.text:00000000004010DF                 mov     cs:first_msg, 0
.text:00000000004010E9                 call    _catopen
.text:00000000004010EE                 mov     cs:message_catalog, rax
.text:00000000004010F5                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000004010F9                 jz      loc_4011D6
.text:00000000004010FF                 mov     rdi, cs:message_catalog ; catalog
.text:0000000000401106
.text:0000000000401106 loc_401106:                             ; CODE XREF: __libirc_get_msg+212↓j
.text:0000000000401106                 movsxd  rax, r13d
.text:0000000000401109                 lea     rcx, off_603048 ; "\n"
.text:0000000000401110                 shl     rax, 4
.text:0000000000401114                 mov     cs:use_internal_msg, 0
.text:000000000040111E                 mov     rcx, [rax+rcx]  ; string
.text:0000000000401122                 jmp     short loc_401145
.text:0000000000401124 ; ---------------------------------------------------------------------------
.text:0000000000401124
.text:0000000000401124 loc_401124:                             ; CODE XREF: __libirc_get_msg+84↑j
.text:0000000000401124                                         ; __libirc_get_msg+218↓j
.text:0000000000401124                 mov     edi, cs:use_internal_msg
.text:000000000040112A                 movsxd  rax, r13d
.text:000000000040112D                 lea     rcx, off_603048 ; "\n"
.text:0000000000401134                 shl     rax, 4
.text:0000000000401138                 test    edi, edi
.text:000000000040113A                 mov     rcx, [rax+rcx]
.text:000000000040113E                 jnz     short loc_40115E
.text:0000000000401140                 jmp     loc_40126D
.text:0000000000401145 ; ---------------------------------------------------------------------------
.text:0000000000401145
.text:0000000000401145 loc_401145:                             ; CODE XREF: __libirc_get_msg+D2↑j
.text:0000000000401145                                         ; __libirc_get_msg+224↓j
.text:0000000000401145                 mov     esi, 1          ; set
.text:000000000040114A                 mov     edx, r13d       ; number
.text:000000000040114D                 call    _catgets
.text:0000000000401152                 mov     rcx, rax
.text:0000000000401155                 jmp     short loc_40115E
.text:0000000000401157 ; ---------------------------------------------------------------------------
.text:0000000000401157
.text:0000000000401157 loc_401157:                             ; CODE XREF: __libirc_get_msg+77↑j
.text:0000000000401157                 lea     rcx, aCannotAllocate+34h ; ""
.text:000000000040115E
.text:000000000040115E loc_40115E:                             ; CODE XREF: __libirc_get_msg+EE↑j
.text:000000000040115E                                         ; __libirc_get_msg+105↑j
.text:000000000040115E                 test    r14d, r14d
.text:0000000000401161                 jle     short loc_4011C5
.text:0000000000401163                 mov     [rsp+168h+arg], 10h
.text:000000000040116E                 lea     rdx, [rsp+168h+arg_0]
.text:0000000000401176                 mov     [rsp+168h+var_34], 30h ; '0'
.text:0000000000401181                 lea     rdi, [rsp+168h+var_E8]
.text:0000000000401189                 mov     [rsp+168h+var_30], rdx
.text:0000000000401191                 mov     [rsp+168h+var_28], rdi
.text:0000000000401199                 lea     rdi, get_msg_buf ; s
.text:00000000004011A0                 mov     rsi, rcx        ; format
.text:00000000004011A3                 lea     rdx, [rsp+168h+arg] ; arg
.text:00000000004011AB                 call    _vsprintf
.text:00000000004011B0                 lea     rax, get_msg_buf
.text:00000000004011B7                 add     rsp, 150h
.text:00000000004011BE                 pop     r14
.text:00000000004011C0                 pop     r13
.text:00000000004011C2                 pop     r12
.text:00000000004011C4                 retn
.text:00000000004011C5 ; ---------------------------------------------------------------------------
.text:00000000004011C5
.text:00000000004011C5 loc_4011C5:                             ; CODE XREF: __libirc_get_msg+111↑j
.text:00000000004011C5                 mov     rax, rcx
.text:00000000004011C8                 add     rsp, 150h
.text:00000000004011CF                 pop     r14
.text:00000000004011D1                 pop     r13
.text:00000000004011D3                 pop     r12
.text:00000000004011D5                 retn
.text:00000000004011D6 ; ---------------------------------------------------------------------------
.text:00000000004011D6
.text:00000000004011D6 loc_4011D6:                             ; CODE XREF: __libirc_get_msg+A9↑j
.text:00000000004011D6                 lea     rdi, name       ; "LANG"
.text:00000000004011DD                 call    _getenv
.text:00000000004011E2                 test    rax, rax
.text:00000000004011E5                 jz      short loc_401257
.text:00000000004011E7                 mov     rsi, rax        ; src
.text:00000000004011EA                 lea     rdi, [rsp+168h+dest] ; dest
.text:00000000004011EE                 mov     edx, 80h        ; n
.text:00000000004011F3                 call    _strncpy
.text:00000000004011F8                 mov     esi, 2Eh ; '.'  ; c
.text:00000000004011FD                 lea     rdi, [rsp+168h+dest] ; s
.text:0000000000401201                 call    _strchr
.text:0000000000401206                 mov     r12, rax
.text:0000000000401209                 test    r12, r12
.text:000000000040120C                 jz      short loc_401257
.text:000000000040120E                 lea     rdi, name       ; "LANG"
.text:0000000000401215                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000401219                 mov     edx, 1          ; replace
.text:000000000040121E                 mov     byte ptr [r12], 0
.text:0000000000401223                 call    _setenv
.text:0000000000401228                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:000000000040122F                 xor     esi, esi        ; flag
.text:0000000000401231                 call    _catopen
.text:0000000000401236                 lea     rdi, name       ; "LANG"
.text:000000000040123D                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000401241                 mov     edx, 1          ; replace
.text:0000000000401246                 mov     cs:message_catalog, rax
.text:000000000040124D                 mov     byte ptr [r12], 2Eh ; '.'
.text:0000000000401252                 call    _setenv
.text:0000000000401257
.text:0000000000401257 loc_401257:                             ; CODE XREF: __libirc_get_msg+195↑j
.text:0000000000401257                                         ; __libirc_get_msg+1BC↑j
.text:0000000000401257                 mov     rdi, cs:message_catalog
.text:000000000040125E                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000401262                 jnz     loc_401106
.text:0000000000401268                 jmp     loc_401124
.text:000000000040126D ; ---------------------------------------------------------------------------
.text:000000000040126D
.text:000000000040126D loc_40126D:                             ; CODE XREF: __libirc_get_msg+F0↑j
.text:000000000040126D                 mov     rdi, cs:message_catalog
.text:0000000000401274                 jmp     loc_401145
.text:0000000000401274 __libirc_get_msg endp
.text:0000000000401274
.text:0000000000401274 ; ---------------------------------------------------------------------------
.text:0000000000401279                 align 20h
.text:0000000000401279 ; } // starts at 401050
.text:0000000000401280
.text:0000000000401280 ; =============== S U B R O U T I N E =======================================
.text:0000000000401280
.text:0000000000401280
.text:0000000000401280                 public __libirc_print
.text:0000000000401280 __libirc_print  proc near               ; CODE XREF: __intel_new_feature_proc_init+248↑p
.text:0000000000401280                                         ; __intel_new_feature_proc_init+25B↑p ...
.text:0000000000401280
.text:0000000000401280 dest            = byte ptr -168h
.text:0000000000401280 var_E8          = byte ptr -0E8h
.text:0000000000401280 var_D0          = qword ptr -0D0h
.text:0000000000401280 var_C8          = qword ptr -0C8h
.text:0000000000401280 var_C0          = qword ptr -0C0h
.text:0000000000401280 var_39          = byte ptr -39h
.text:0000000000401280 arg             = dword ptr -38h
.text:0000000000401280 var_34          = dword ptr -34h
.text:0000000000401280 var_30          = qword ptr -30h
.text:0000000000401280 var_28          = qword ptr -28h
.text:0000000000401280 arg_0           = byte ptr  8
.text:0000000000401280
.text:0000000000401280 ; __unwind {
.text:0000000000401280                 push    r13
.text:0000000000401282                 push    r14
.text:0000000000401284                 push    r15
.text:0000000000401286                 push    rbx
.text:0000000000401287                 sub     rsp, 148h
.text:000000000040128E                 mov     [rsp+168h+var_D0], rcx
.text:0000000000401296                 mov     [rsp+168h+var_C8], r8
.text:000000000040129E                 mov     [rsp+168h+var_C0], r9
.text:00000000004012A6                 movzx   r11d, al
.text:00000000004012AA                 lea     rax, ds:0[r11*4]
.text:00000000004012B2                 lea     r11, loc_4012E7
.text:00000000004012B9                 sub     r11, rax
.text:00000000004012BC                 lea     rax, [rsp+168h+var_39]
.text:00000000004012C4                 jmp     r11
.text:00000000004012C7                 movaps  xmmword ptr [rax-0Fh], xmm7
.text:00000000004012CB                 movaps  xmmword ptr [rax-1Fh], xmm6
.text:00000000004012CF                 movaps  xmmword ptr [rax-2Fh], xmm5
.text:00000000004012D3                 movaps  xmmword ptr [rax-3Fh], xmm4
.text:00000000004012D7                 movaps  xmmword ptr [rax-4Fh], xmm3
.text:00000000004012DB                 movaps  xmmword ptr [rax-5Fh], xmm2
.text:00000000004012DF                 movaps  xmmword ptr [rax-6Fh], xmm1
.text:00000000004012E3                 movaps  xmmword ptr [rax-7Fh], xmm0
.text:00000000004012E7
.text:00000000004012E7 loc_4012E7:                             ; DATA XREF: __libirc_print+32↑o
.text:00000000004012E7                 mov     r14d, esi
.text:00000000004012EA                 mov     r15d, edx
.text:00000000004012ED                 mov     r13d, edi
.text:00000000004012F0                 test    r14d, r14d
.text:00000000004012F3                 jnz     short loc_40131C
.text:00000000004012F5                 cmp     r13d, 1
.text:00000000004012F9                 jz      loc_40142E
.text:00000000004012FF                 lea     rdi, aCaseDD+0Ch ; format
.text:0000000000401306                 xor     eax, eax
.text:0000000000401308                 call    _printf
.text:000000000040130D                 add     rsp, 148h
.text:0000000000401314                 pop     rbx
.text:0000000000401315                 pop     r15
.text:0000000000401317                 pop     r14
.text:0000000000401319                 pop     r13
.text:000000000040131B                 retn
.text:000000000040131C ; ---------------------------------------------------------------------------
.text:000000000040131C
.text:000000000040131C loc_40131C:                             ; CODE XREF: __libirc_print+73↑j
.text:000000000040131C                 cmp     cs:first_msg, 0
.text:0000000000401323                 jz      short loc_401373
.text:0000000000401325                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:000000000040132C                 xor     esi, esi        ; flag
.text:000000000040132E                 mov     cs:first_msg, 0
.text:0000000000401338                 call    _catopen
.text:000000000040133D                 mov     cs:message_catalog, rax
.text:0000000000401344                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000401348                 jz      loc_401455
.text:000000000040134E                 mov     rdi, cs:message_catalog ; catalog
.text:0000000000401355
.text:0000000000401355 loc_401355:                             ; CODE XREF: __libirc_print+25D↓j
.text:0000000000401355                 movsxd  rax, r14d
.text:0000000000401358                 lea     rcx, off_603048 ; "\n"
.text:000000000040135F                 shl     rax, 4
.text:0000000000401363                 mov     cs:use_internal_msg, 0
.text:000000000040136D                 mov     rcx, [rax+rcx]  ; string
.text:0000000000401371                 jmp     short loc_401394
.text:0000000000401373 ; ---------------------------------------------------------------------------
.text:0000000000401373
.text:0000000000401373 loc_401373:                             ; CODE XREF: __libirc_print+A3↑j
.text:0000000000401373                                         ; __libirc_print+263↓j
.text:0000000000401373                 mov     ebx, cs:use_internal_msg
.text:0000000000401379                 movsxd  rax, r14d
.text:000000000040137C                 lea     rcx, off_603048 ; "\n"
.text:0000000000401383                 shl     rax, 4
.text:0000000000401387                 test    ebx, ebx
.text:0000000000401389                 mov     rcx, [rax+rcx]
.text:000000000040138D                 jnz     short loc_4013A4
.text:000000000040138F                 jmp     loc_401523
.text:0000000000401394 ; ---------------------------------------------------------------------------
.text:0000000000401394
.text:0000000000401394 loc_401394:                             ; CODE XREF: __libirc_print+F1↑j
.text:0000000000401394                                         ; __libirc_print+2AA↓j
.text:0000000000401394                 mov     esi, 1          ; set
.text:0000000000401399                 mov     edx, r14d       ; number
.text:000000000040139C                 call    _catgets
.text:00000000004013A1                 mov     rcx, rax
.text:00000000004013A4
.text:00000000004013A4 loc_4013A4:                             ; CODE XREF: __libirc_print+10D↑j
.text:00000000004013A4                 test    r15d, r15d
.text:00000000004013A7                 jle     short loc_4013FD
.text:00000000004013A9                 mov     [rsp+168h+arg], 18h
.text:00000000004013B4                 lea     rax, [rsp+168h+arg_0]
.text:00000000004013BC                 mov     [rsp+168h+var_34], 30h ; '0'
.text:00000000004013C7                 lea     rdx, [rsp+168h+var_E8]
.text:00000000004013CF                 mov     [rsp+168h+var_30], rax
.text:00000000004013D7                 mov     [rsp+168h+var_28], rdx
.text:00000000004013DF                 lea     rdi, print_buf  ; s
.text:00000000004013E6                 mov     rsi, rcx        ; format
.text:00000000004013E9                 lea     rdx, [rsp+168h+arg] ; arg
.text:00000000004013F1                 call    _vsprintf
.text:00000000004013F6                 lea     rcx, print_buf
.text:00000000004013FD
.text:00000000004013FD loc_4013FD:                             ; CODE XREF: __libirc_print+127↑j
.text:00000000004013FD                 cmp     r13d, 1
.text:0000000000401401                 jz      loc_4014E8
.text:0000000000401407                 mov     rdi, rcx        ; format
.text:000000000040140A                 xor     eax, eax
.text:000000000040140C                 call    _printf
.text:0000000000401411                 lea     rdi, aCaseDD+0Ch ; format
.text:0000000000401418                 xor     eax, eax
.text:000000000040141A                 call    _printf
.text:000000000040141F                 add     rsp, 148h
.text:0000000000401426                 pop     rbx
.text:0000000000401427                 pop     r15
.text:0000000000401429                 pop     r14
.text:000000000040142B                 pop     r13
.text:000000000040142D                 retn
.text:000000000040142E ; ---------------------------------------------------------------------------
.text:000000000040142E
.text:000000000040142E loc_40142E:                             ; CODE XREF: __libirc_print+79↑j
.text:000000000040142E                 mov     rax, cs:stderr_ptr
.text:0000000000401435                 lea     rsi, aCaseDD+0Ch ; format
.text:000000000040143C                 mov     rdi, [rax]      ; stream
.text:000000000040143F                 xor     eax, eax
.text:0000000000401441                 call    _fprintf
.text:0000000000401446                 add     rsp, 148h
.text:000000000040144D                 pop     rbx
.text:000000000040144E                 pop     r15
.text:0000000000401450                 pop     r14
.text:0000000000401452                 pop     r13
.text:0000000000401454                 retn
.text:0000000000401455 ; ---------------------------------------------------------------------------
.text:0000000000401455
.text:0000000000401455 loc_401455:                             ; CODE XREF: __libirc_print+C8↑j
.text:0000000000401455                 lea     rdi, name       ; "LANG"
.text:000000000040145C                 call    _getenv
.text:0000000000401461                 test    rax, rax
.text:0000000000401464                 jz      short loc_4014D2
.text:0000000000401466                 mov     rsi, rax        ; src
.text:0000000000401469                 lea     rdi, [rsp+168h+dest] ; dest
.text:000000000040146D                 mov     edx, 80h        ; n
.text:0000000000401472                 call    _strncpy
.text:0000000000401477                 mov     esi, 2Eh ; '.'  ; c
.text:000000000040147C                 lea     rdi, [rsp+168h+dest] ; s
.text:0000000000401480                 call    _strchr
.text:0000000000401485                 mov     rbx, rax
.text:0000000000401488                 test    rbx, rbx
.text:000000000040148B                 jz      short loc_4014D2
.text:000000000040148D                 lea     rdi, name       ; "LANG"
.text:0000000000401494                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000401498                 mov     edx, 1          ; replace
.text:000000000040149D                 mov     byte ptr [rbx], 0
.text:00000000004014A0                 call    _setenv
.text:00000000004014A5                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:00000000004014AC                 xor     esi, esi        ; flag
.text:00000000004014AE                 call    _catopen
.text:00000000004014B3                 lea     rdi, name       ; "LANG"
.text:00000000004014BA                 lea     rsi, [rsp+168h+dest] ; value
.text:00000000004014BE                 mov     edx, 1          ; replace
.text:00000000004014C3                 mov     cs:message_catalog, rax
.text:00000000004014CA                 mov     byte ptr [rbx], 2Eh ; '.'
.text:00000000004014CD                 call    _setenv
.text:00000000004014D2
.text:00000000004014D2 loc_4014D2:                             ; CODE XREF: __libirc_print+1E4↑j
.text:00000000004014D2                                         ; __libirc_print+20B↑j
.text:00000000004014D2                 mov     rdi, cs:message_catalog
.text:00000000004014D9                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:00000000004014DD                 jnz     loc_401355
.text:00000000004014E3                 jmp     loc_401373
.text:00000000004014E8 ; ---------------------------------------------------------------------------
.text:00000000004014E8
.text:00000000004014E8 loc_4014E8:                             ; CODE XREF: __libirc_print+181↑j
.text:00000000004014E8                 mov     rax, cs:stderr_ptr
.text:00000000004014EF                 mov     rsi, rcx        ; format
.text:00000000004014F2                 mov     rdi, [rax]      ; stream
.text:00000000004014F5                 xor     eax, eax
.text:00000000004014F7                 call    _fprintf
.text:00000000004014FC                 mov     rax, cs:stderr_ptr
.text:0000000000401503                 lea     rsi, aCaseDD+0Ch ; format
.text:000000000040150A                 mov     rdi, [rax]      ; stream
.text:000000000040150D                 xor     eax, eax
.text:000000000040150F                 call    _fprintf
.text:0000000000401514                 add     rsp, 148h
.text:000000000040151B                 pop     rbx
.text:000000000040151C                 pop     r15
.text:000000000040151E                 pop     r14
.text:0000000000401520                 pop     r13
.text:0000000000401522                 retn
.text:0000000000401523 ; ---------------------------------------------------------------------------
.text:0000000000401523
.text:0000000000401523 loc_401523:                             ; CODE XREF: __libirc_print+10F↑j
.text:0000000000401523                 mov     rdi, cs:message_catalog
.text:000000000040152A                 jmp     loc_401394
.text:000000000040152A __libirc_print  endp
.text:000000000040152A
.text:000000000040152A ; ---------------------------------------------------------------------------
.text:000000000040152F                 align 10h
.text:000000000040152F ; } // starts at 401280
.text:0000000000401530
.text:0000000000401530 ; =============== S U B R O U T I N E =======================================
.text:0000000000401530
.text:0000000000401530
.text:0000000000401530                 public __intel_cpu_features_init_x
.text:0000000000401530 __intel_cpu_features_init_x proc near
.text:0000000000401530 ; __unwind {
.text:0000000000401530                 push    rax
.text:0000000000401531                 push    rdx
.text:0000000000401532                 push    rcx
.text:0000000000401533                 push    rsi
.text:0000000000401534                 push    rdi
.text:0000000000401535                 push    r8
.text:0000000000401537                 push    r9
.text:0000000000401539                 xor     edi, edi
.text:000000000040153B                 call    __intel_cpu_features_init_body
.text:0000000000401540                 pop     r9
.text:0000000000401542                 pop     r8
.text:0000000000401544                 pop     rdi
.text:0000000000401545                 pop     rsi
.text:0000000000401546                 pop     rcx
.text:0000000000401547                 pop     rdx
.text:0000000000401548                 pop     rax
.text:0000000000401549                 retn
.text:0000000000401549 __intel_cpu_features_init_x endp
.text:0000000000401549
.text:0000000000401549 ; ---------------------------------------------------------------------------
.text:000000000040154A                 align 10h
.text:000000000040154A ; } // starts at 401530
.text:0000000000401550
.text:0000000000401550 ; =============== S U B R O U T I N E =======================================
.text:0000000000401550
.text:0000000000401550
.text:0000000000401550                 public __intel_cpu_features_init
.text:0000000000401550 __intel_cpu_features_init proc near     ; CODE XREF: __intel_new_feature_proc_init+35F↑p
.text:0000000000401550 ; __unwind {
.text:0000000000401550                 push    rax
.text:0000000000401551                 push    rdx
.text:0000000000401552                 push    rcx
.text:0000000000401553                 push    rsi
.text:0000000000401554                 push    rdi
.text:0000000000401555                 push    r8
.text:0000000000401557                 push    r9
.text:0000000000401559                 mov     edi, 1
.text:000000000040155E                 call    __intel_cpu_features_init_body
.text:0000000000401563                 pop     r9
.text:0000000000401565                 pop     r8
.text:0000000000401567                 pop     rdi
.text:0000000000401568                 pop     rsi
.text:0000000000401569                 pop     rcx
.text:000000000040156A                 pop     rdx
.text:000000000040156B                 pop     rax
.text:000000000040156C                 retn
.text:000000000040156C __intel_cpu_features_init endp
.text:000000000040156C
.text:000000000040156C ; ---------------------------------------------------------------------------
.text:000000000040156D                 align 10h
.text:000000000040156D ; } // starts at 401550
.text:0000000000401570
.text:0000000000401570 ; =============== S U B R O U T I N E =======================================
.text:0000000000401570
.text:0000000000401570
.text:0000000000401570 __intel_cpu_features_init_body proc near
.text:0000000000401570                                         ; CODE XREF: __intel_cpu_features_init_x+B↑p
.text:0000000000401570                                         ; __intel_cpu_features_init+E↑p
.text:0000000000401570
.text:0000000000401570 var_18          = dword ptr -18h
.text:0000000000401570 var_14          = dword ptr -14h
.text:0000000000401570 var_10          = dword ptr -10h
.text:0000000000401570 var_C           = dword ptr -0Ch
.text:0000000000401570
.text:0000000000401570 ; __unwind {
.text:0000000000401570                 push    rbx
.text:0000000000401571                 mov     r11d, edi
.text:0000000000401574                 xor     eax, eax
.text:0000000000401576                 cpuid
.text:0000000000401578                 mov     [rsp+8+var_18], eax
.text:000000000040157C                 mov     [rsp+8+var_14], ebx
.text:0000000000401580                 mov     [rsp+8+var_10], ecx
.text:0000000000401584                 mov     [rsp+8+var_C], edx
.text:0000000000401588                 xor     sil, sil
.text:000000000040158B                 cmp     [rsp+8+var_18], 0
.text:0000000000401590                 jz      loc_4018CF
.text:0000000000401596                 cmp     r11d, 1
.text:000000000040159A                 jz      loc_4018DC
.text:00000000004015A0
.text:00000000004015A0 loc_4015A0:                             ; CODE XREF: __intel_cpu_features_init_body+38A↓j
.text:00000000004015A0                 mov     eax, 1
.text:00000000004015A5                 cpuid
.text:00000000004015A7                 mov     r8d, edx
.text:00000000004015AA                 mov     r9d, eax
.text:00000000004015AD                 and     r8d, 1
.text:00000000004015B1                 mov     edi, ecx
.text:00000000004015B3                 lea     r8, ds:1[r8*2]
.text:00000000004015BB                 mov     rax, r8
.text:00000000004015BE                 or      rax, 4
.text:00000000004015C2                 test    edx, 8000h
.text:00000000004015C8                 cmovnz  r8, rax
.text:00000000004015CC                 mov     rcx, r8
.text:00000000004015CF                 or      rcx, 8
.text:00000000004015D3                 test    edx, 800000h
.text:00000000004015D9                 cmovnz  r8, rcx
.text:00000000004015DD                 test    edx, 1000000h
.text:00000000004015E3                 jz      loc_4016D4
.text:00000000004015E9                 or      r8, 10h
.text:00000000004015ED                 mov     r10, r8
.text:00000000004015F0                 or      r10, 20h
.text:00000000004015F4                 test    edx, 2000000h
.text:00000000004015FA                 cmovnz  r8, r10
.text:00000000004015FE                 mov     rsi, r8
.text:0000000000401601                 or      rsi, 40h
.text:0000000000401605                 test    edx, 4000000h
.text:000000000040160B                 cmovnz  r8, rsi
.text:000000000040160F                 mov     r10, r8
.text:0000000000401612                 or      r10, 80h
.text:0000000000401619                 test    edi, 1
.text:000000000040161F                 cmovnz  r8, r10
.text:0000000000401623                 mov     rax, r8
.text:0000000000401626                 or      rax, 100h
.text:000000000040162C                 test    edi, 200h
.text:0000000000401632                 cmovnz  r8, rax
.text:0000000000401636                 mov     rbx, r8
.text:0000000000401639                 or      rbx, 800h
.text:0000000000401640                 test    edi, 400000h
.text:0000000000401646                 cmovnz  r8, rbx
.text:000000000040164A                 mov     rcx, r8
.text:000000000040164D                 or      rcx, 200h
.text:0000000000401654                 test    edi, 80000h
.text:000000000040165A                 cmovnz  r8, rcx
.text:000000000040165E                 mov     rdx, r8
.text:0000000000401661                 or      rdx, 400h
.text:0000000000401668                 test    edi, 100000h
.text:000000000040166E                 cmovnz  r8, rdx
.text:0000000000401672                 mov     r10, r8
.text:0000000000401675                 or      r10, 1000h
.text:000000000040167C                 test    edi, 800000h
.text:0000000000401682                 cmovnz  r8, r10
.text:0000000000401686                 mov     rsi, r8
.text:0000000000401689                 or      rsi, 2000h
.text:0000000000401690                 test    edi, 2
.text:0000000000401696                 cmovnz  r8, rsi
.text:000000000040169A                 mov     sil, 1
.text:000000000040169D                 mov     rax, r8
.text:00000000004016A0                 or      rax, 4000h
.text:00000000004016A6                 test    edi, 2000000h
.text:00000000004016AC                 cmovnz  r8, rax
.text:00000000004016B0                 mov     eax, 7
.text:00000000004016B5                 xor     ecx, ecx
.text:00000000004016B7                 cpuid
.text:00000000004016B9                 mov     r10d, ebx
.text:00000000004016BC                 mov     rbx, 800000000h
.text:00000000004016C6                 or      rbx, r8
.text:00000000004016C9                 test    r10d, 20000000h
.text:00000000004016D0                 cmovnz  r8, rbx
.text:00000000004016D4
.text:00000000004016D4 loc_4016D4:                             ; CODE XREF: __intel_cpu_features_init_body+73↑j
.text:00000000004016D4                 mov     rax, r8
.text:00000000004016D7                 or      rax, 20000h
.text:00000000004016DD                 test    edi, 40000000h
.text:00000000004016E3                 cmovnz  r8, rax
.text:00000000004016E7                 test    sil, sil
.text:00000000004016EA                 jnz     short loc_4016F8
.text:00000000004016EC                 mov     eax, 7
.text:00000000004016F1                 xor     ecx, ecx
.text:00000000004016F3                 cpuid
.text:00000000004016F5                 mov     r10d, ebx
.text:00000000004016F8
.text:00000000004016F8 loc_4016F8:                             ; CODE XREF: __intel_cpu_features_init_body+17A↑j
.text:00000000004016F8                 mov     esi, r10d
.text:00000000004016FB                 mov     rcx, r8
.text:00000000004016FE                 and     esi, 108h
.text:0000000000401704                 or      rcx, 80000h
.text:000000000040170B                 cmp     esi, 108h
.text:0000000000401711                 cmovz   r8, rcx
.text:0000000000401715                 mov     eax, 80000001h
.text:000000000040171A                 cpuid
.text:000000000040171C                 mov     rdx, r8
.text:000000000040171F                 or      rdx, 100000h
.text:0000000000401726                 test    cl, 20h
.text:0000000000401729                 cmovnz  r8, rdx
.text:000000000040172D                 mov     rcx, r8
.text:0000000000401730                 or      rcx, 200000h
.text:0000000000401737                 test    r10d, 10h
.text:000000000040173E                 cmovnz  r8, rcx
.text:0000000000401742                 mov     rbx, r8
.text:0000000000401745                 or      rbx, 400000h
.text:000000000040174C                 test    r10d, 800h
.text:0000000000401753                 cmovnz  r8, rbx
.text:0000000000401757                 mov     rsi, r8
.text:000000000040175A                 or      rsi, 10000000h
.text:0000000000401761                 test    r10d, 80000h
.text:0000000000401768                 cmovnz  r8, rsi
.text:000000000040176C                 mov     rax, r8
.text:000000000040176F                 or      rax, 20000000h
.text:0000000000401775                 test    r10d, 40000h
.text:000000000040177C                 cmovnz  r8, rax
.text:0000000000401780                 test    edi, 8000000h
.text:0000000000401786                 jz      loc_401886
.text:000000000040178C                 xor     ecx, ecx
.text:000000000040178E                 xgetbv
.text:0000000000401791                 or      r8, 1
.text:0000000000401795                 mov     edx, eax
.text:0000000000401797                 and     edx, 6
.text:000000000040179A                 cmp     edx, 6
.text:000000000040179D                 jnz     loc_401886
.text:00000000004017A3                 mov     rdx, r8
.text:00000000004017A6                 or      rdx, 10000h
.text:00000000004017AD                 test    edi, 10000000h
.text:00000000004017B3                 cmovnz  r8, rdx
.text:00000000004017B7                 mov     rcx, r8
.text:00000000004017BA                 or      rcx, 8000h
.text:00000000004017C1                 test    edi, 20000000h
.text:00000000004017C7                 cmovnz  r8, rcx
.text:00000000004017CB                 mov     rbx, r8
.text:00000000004017CE                 or      rbx, 800000h
.text:00000000004017D5                 test    r10d, 20h
.text:00000000004017DC                 cmovnz  r8, rbx
.text:00000000004017E0                 mov     rsi, r8
.text:00000000004017E3                 or      rsi, 40000h
.text:00000000004017EA                 test    edi, 1000h
.text:00000000004017F0                 mov     edi, eax
.text:00000000004017F2                 cmovnz  r8, rsi
.text:00000000004017F6                 and     edi, 18h
.text:00000000004017F9                 cmp     edi, 18h
.text:00000000004017FC                 jnz     short loc_40181A
.text:00000000004017FE                 or      r8, 1
.text:0000000000401802                 mov     rdx, 1000000000h
.text:000000000040180C                 or      rdx, r8
.text:000000000040180F                 test    r10d, 4000h
.text:0000000000401816                 cmovnz  r8, rdx
.text:000000000040181A
.text:000000000040181A loc_40181A:                             ; CODE XREF: __intel_cpu_features_init_body+28C↑j
.text:000000000040181A                 and     eax, 0E0h
.text:000000000040181F                 cmp     eax, 0E0h
.text:0000000000401824                 jnz     short loc_401886
.text:0000000000401826                 or      r8, 1
.text:000000000040182A                 mov     rdx, 400000000h
.text:0000000000401834                 mov     rax, r8
.text:0000000000401837                 mov     rcx, 100000000h
.text:0000000000401841                 or      rax, 8000000h
.text:0000000000401847                 test    r10d, 10000h
.text:000000000040184E                 mov     rbx, 200000000h
.text:0000000000401858                 cmovnz  r8, rax
.text:000000000040185C                 or      rdx, r8
.text:000000000040185F                 test    r10d, 10000000h
.text:0000000000401866                 cmovnz  r8, rdx
.text:000000000040186A                 or      rcx, r8
.text:000000000040186D                 test    r10d, 8000000h
.text:0000000000401874                 cmovnz  r8, rcx
.text:0000000000401878                 or      rbx, r8
.text:000000000040187B                 test    r10d, 4000000h
.text:0000000000401882                 cmovnz  r8, rbx
.text:0000000000401886
.text:0000000000401886 loc_401886:                             ; CODE XREF: __intel_cpu_features_init_body+216↑j
.text:0000000000401886                                         ; __intel_cpu_features_init_body+22D↑j ...
.text:0000000000401886                 mov     eax, r9d
.text:0000000000401889                 shr     eax, 0Ch
.text:000000000040188C                 shr     r9d, 4
.text:0000000000401890                 and     eax, 0F0h
.text:0000000000401895                 and     r9d, 0Fh
.text:0000000000401899                 add     eax, r9d
.text:000000000040189C                 cmp     eax, 1Ch
.text:000000000040189F                 jz      short loc_4018AB
.text:00000000004018A1                 cmp     eax, 26h ; '&'
.text:00000000004018A4                 jz      short loc_4018AB
.text:00000000004018A6                 cmp     eax, 27h ; '''
.text:00000000004018A9                 jnz     short loc_4018B0
.text:00000000004018AB
.text:00000000004018AB loc_4018AB:                             ; CODE XREF: __intel_cpu_features_init_body+32F↑j
.text:00000000004018AB                                         ; __intel_cpu_features_init_body+334↑j
.text:00000000004018AB                 bts     r8, 1Fh
.text:00000000004018B0
.text:00000000004018B0 loc_4018B0:                             ; CODE XREF: __intel_cpu_features_init_body+339↑j
.text:00000000004018B0                 cmp     r11d, 1
.text:00000000004018B4                 jz      short loc_4018BF
.text:00000000004018B6                 mov     cs:__intel_cpu_feature_indicator_x, r8
.text:00000000004018BD                 pop     rbx
.text:00000000004018BE                 retn
.text:00000000004018BF ; ---------------------------------------------------------------------------
.text:00000000004018BF
.text:00000000004018BF loc_4018BF:                             ; CODE XREF: __intel_cpu_features_init_body+344↑j
.text:00000000004018BF                 mov     cs:__intel_cpu_feature_indicator, r8
.text:00000000004018C6                 mov     cs:__intel_cpu_feature_indicator_x, r8
.text:00000000004018CD                 pop     rbx
.text:00000000004018CE                 retn
.text:00000000004018CF ; ---------------------------------------------------------------------------
.text:00000000004018CF
.text:00000000004018CF loc_4018CF:                             ; CODE XREF: __intel_cpu_features_init_body+20↑j
.text:00000000004018CF                                         ; __intel_cpu_features_init_body+374↓j ...
.text:00000000004018CF                 mov     cs:__intel_cpu_feature_indicator, 1
.text:00000000004018DA                 pop     rbx
.text:00000000004018DB                 retn
.text:00000000004018DC ; ---------------------------------------------------------------------------
.text:00000000004018DC
.text:00000000004018DC loc_4018DC:                             ; CODE XREF: __intel_cpu_features_init_body+2A↑j
.text:00000000004018DC                 cmp     [rsp+8+var_14], 756E6547h
.text:00000000004018E4                 jnz     short loc_4018CF
.text:00000000004018E6                 cmp     [rsp+8+var_C], 49656E69h
.text:00000000004018EE                 jnz     short loc_4018CF
.text:00000000004018F0                 cmp     [rsp+8+var_10], 6C65746Eh
.text:00000000004018F8                 jnz     short loc_4018CF
.text:00000000004018FA                 jmp     loc_4015A0
.text:00000000004018FA __intel_cpu_features_init_body endp
.text:00000000004018FA
.text:00000000004018FA ; ---------------------------------------------------------------------------
.text:00000000004018FF                 align 20h
.text:00000000004018FF ; } // starts at 401570
.text:0000000000401900
.text:0000000000401900 ; =============== S U B R O U T I N E =======================================
.text:0000000000401900
.text:0000000000401900
.text:0000000000401900                 public __intel_proc_init_ftzdazule
.text:0000000000401900 __intel_proc_init_ftzdazule proc near   ; CODE XREF: __intel_new_feature_proc_init+2D2↑p
.text:0000000000401900
.text:0000000000401900 s               = dword ptr -218h
.text:0000000000401900 var_1FC         = dword ptr -1FCh
.text:0000000000401900
.text:0000000000401900 ; __unwind {
.text:0000000000401900                 push    r15
.text:0000000000401902                 push    rbx
.text:0000000000401903                 push    rbp
.text:0000000000401904                 sub     rsp, 200h
.text:000000000040190B                 mov     ebx, esi
.text:000000000040190D                 mov     ebp, ebx
.text:000000000040190F                 mov     r15d, ebx
.text:0000000000401912                 and     ebp, 4
.text:0000000000401915                 and     r15d, 2
.text:0000000000401919                 jz      short loc_401923
.text:000000000040191B                 test    edi, 2
.text:0000000000401921                 jz      short loc_40192F
.text:0000000000401923
.text:0000000000401923 loc_401923:                             ; CODE XREF: __intel_proc_init_ftzdazule+19↑j
.text:0000000000401923                 test    ebp, ebp
.text:0000000000401925                 jz      short loc_401957
.text:0000000000401927                 test    edi, 4
.text:000000000040192D                 jnz     short loc_401957
.text:000000000040192F
.text:000000000040192F loc_40192F:                             ; CODE XREF: __intel_proc_init_ftzdazule+21↑j
.text:000000000040192F                 xor     esi, esi        ; c
.text:0000000000401931                 lea     rdi, [rsp+218h+s] ; s
.text:0000000000401935                 mov     edx, 200h       ; n
.text:000000000040193A                 call    _memset
.text:000000000040193F                 fxsave  [rsp+218h+s]
.text:0000000000401943                 xor     edx, edx
.text:0000000000401945                 mov     eax, [rsp+218h+var_1FC]
.text:0000000000401949                 test    al, 40h
.text:000000000040194B                 cmovz   r15d, edx
.text:000000000040194F                 test    eax, 20000h
.text:0000000000401954                 cmovz   ebp, edx
.text:0000000000401957
.text:0000000000401957 loc_401957:                             ; CODE XREF: __intel_proc_init_ftzdazule+25↑j
.text:0000000000401957                                         ; __intel_proc_init_ftzdazule+2D↑j
.text:0000000000401957                 test    bl, 1
.text:000000000040195A                 jnz     short loc_401995
.text:000000000040195C
.text:000000000040195C loc_40195C:                             ; CODE XREF: __intel_proc_init_ftzdazule+A8↓j
.text:000000000040195C                 test    r15d, r15d
.text:000000000040195F                 jz      short loc_401972
.text:0000000000401961                 stmxcsr [rsp+218h+s]
.text:0000000000401965                 mov     eax, [rsp+218h+s]
.text:0000000000401968                 or      eax, 40h
.text:000000000040196B                 mov     [rsp+218h+s], eax
.text:000000000040196E                 ldmxcsr [rsp+218h+s]
.text:0000000000401972
.text:0000000000401972 loc_401972:                             ; CODE XREF: __intel_proc_init_ftzdazule+5F↑j
.text:0000000000401972                 test    ebp, ebp
.text:0000000000401974                 jz      short loc_401989
.text:0000000000401976                 stmxcsr [rsp+218h+s]
.text:000000000040197A                 mov     eax, [rsp+218h+s]
.text:000000000040197D                 or      eax, 20000h
.text:0000000000401982                 mov     [rsp+218h+s], eax
.text:0000000000401985                 ldmxcsr [rsp+218h+s]
.text:0000000000401989
.text:0000000000401989 loc_401989:                             ; CODE XREF: __intel_proc_init_ftzdazule+74↑j
.text:0000000000401989                 add     rsp, 200h
.text:0000000000401990                 pop     rbp
.text:0000000000401991                 pop     rbx
.text:0000000000401992                 pop     r15
.text:0000000000401994                 retn
.text:0000000000401995 ; ---------------------------------------------------------------------------
.text:0000000000401995
.text:0000000000401995 loc_401995:                             ; CODE XREF: __intel_proc_init_ftzdazule+5A↑j
.text:0000000000401995                 stmxcsr [rsp+218h+s]
.text:0000000000401999                 mov     eax, [rsp+218h+s]
.text:000000000040199C                 or      eax, 8000h
.text:00000000004019A1                 mov     [rsp+218h+s], eax
.text:00000000004019A4                 ldmxcsr [rsp+218h+s]
.text:00000000004019A8                 jmp     short loc_40195C
.text:00000000004019A8 __intel_proc_init_ftzdazule endp
.text:00000000004019A8
.text:00000000004019A8 ; ---------------------------------------------------------------------------
.text:00000000004019AA                 align 10h
.text:00000000004019AA ; } // starts at 401900
.text:00000000004019B0
.text:00000000004019B0 ; =============== S U B R O U T I N E =======================================
.text:00000000004019B0
.text:00000000004019B0
.text:00000000004019B0 ; void _libc_csu_init(void)
.text:00000000004019B0                 public __libc_csu_init
.text:00000000004019B0 __libc_csu_init proc near               ; DATA XREF: _start+16↑o
.text:00000000004019B0
.text:00000000004019B0 var_30          = qword ptr -30h
.text:00000000004019B0 var_28          = qword ptr -28h
.text:00000000004019B0 var_20          = qword ptr -20h
.text:00000000004019B0 var_18          = qword ptr -18h
.text:00000000004019B0 var_10          = qword ptr -10h
.text:00000000004019B0 var_8           = qword ptr -8
.text:00000000004019B0
.text:00000000004019B0 ; __unwind {
.text:00000000004019B0                 mov     [rsp+var_28], rbp
.text:00000000004019B5                 mov     [rsp+var_20], r12
.text:00000000004019BA                 lea     rbp, __CTOR_LIST__
.text:00000000004019C1                 lea     r12, __init_array_start
.text:00000000004019C8                 mov     [rsp+var_18], r13
.text:00000000004019CD                 mov     [rsp+var_10], r14
.text:00000000004019D2                 mov     [rsp+var_8], r15
.text:00000000004019D7                 mov     [rsp+var_30], rbx
.text:00000000004019DC                 sub     rsp, 38h
.text:00000000004019E0                 sub     rbp, r12
.text:00000000004019E3                 mov     r13d, edi
.text:00000000004019E6                 mov     r14, rsi
.text:00000000004019E9                 sar     rbp, 3
.text:00000000004019ED                 mov     r15, rdx
.text:00000000004019F0                 call    _init_proc
.text:00000000004019F5                 test    rbp, rbp
.text:00000000004019F8                 jz      short loc_401A16
.text:00000000004019FA                 xor     ebx, ebx
.text:00000000004019FC                 nop     dword ptr [rax+00h]
.text:0000000000401A00
.text:0000000000401A00 loc_401A00:                             ; CODE XREF: __libc_csu_init+64↓j
.text:0000000000401A00                 mov     rdx, r15
.text:0000000000401A03                 mov     rsi, r14
.text:0000000000401A06                 mov     edi, r13d
.text:0000000000401A09                 call    ds:(__init_array_start - 603000h)[r12+rbx*8]
.text:0000000000401A0D                 add     rbx, 1
.text:0000000000401A11                 cmp     rbx, rbp
.text:0000000000401A14                 jnz     short loc_401A00
.text:0000000000401A16
.text:0000000000401A16 loc_401A16:                             ; CODE XREF: __libc_csu_init+48↑j
.text:0000000000401A16                 mov     rbx, [rsp+38h+var_30]
.text:0000000000401A1B                 mov     rbp, [rsp+38h+var_28]
.text:0000000000401A20                 mov     r12, [rsp+38h+var_20]
.text:0000000000401A25                 mov     r13, [rsp+38h+var_18]
.text:0000000000401A2A                 mov     r14, [rsp+38h+var_10]
.text:0000000000401A2F                 mov     r15, [rsp+38h+var_8]
.text:0000000000401A34                 add     rsp, 38h
.text:0000000000401A38                 retn
.text:0000000000401A38 ; } // starts at 4019B0
.text:0000000000401A38 __libc_csu_init endp
.text:0000000000401A38
.text:0000000000401A38 ; ---------------------------------------------------------------------------
.text:0000000000401A39                 align 20h
.text:0000000000401A40
.text:0000000000401A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000401A40
.text:0000000000401A40
.text:0000000000401A40 ; void _libc_csu_fini(void)
.text:0000000000401A40                 public __libc_csu_fini
.text:0000000000401A40 __libc_csu_fini proc near               ; DATA XREF: _start+F↑o
.text:0000000000401A40 ; __unwind {
.text:0000000000401A40                 rep retn
.text:0000000000401A40 ; } // starts at 401A40
.text:0000000000401A40 __libc_csu_fini endp
.text:0000000000401A40
.text:0000000000401A40 ; ---------------------------------------------------------------------------
.text:0000000000401A42                 align 10h
.text:0000000000401A50
.text:0000000000401A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000401A50
.text:0000000000401A50 ; Attributes: bp-based frame
.text:0000000000401A50
.text:0000000000401A50 __do_global_ctors_aux proc near         ; CODE XREF: _init_proc+E↑p
.text:0000000000401A50                 push    rbp
.text:0000000000401A51                 mov     rbp, rsp
.text:0000000000401A54                 push    rbx
.text:0000000000401A55                 sub     rsp, 8
.text:0000000000401A59                 mov     rax, cs:__CTOR_LIST__
.text:0000000000401A60                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000401A64                 jz      short loc_401A7F
.text:0000000000401A66                 mov     ebx, offset __CTOR_LIST__
.text:0000000000401A6B                 nop     dword ptr [rax+rax+00h]
.text:0000000000401A70
.text:0000000000401A70 loc_401A70:                             ; CODE XREF: __do_global_ctors_aux+2D↓j
.text:0000000000401A70                 sub     rbx, 8
.text:0000000000401A74                 call    rax ; __CTOR_LIST__
.text:0000000000401A76                 mov     rax, [rbx]
.text:0000000000401A79                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000401A7D                 jnz     short loc_401A70
.text:0000000000401A7F
.text:0000000000401A7F loc_401A7F:                             ; CODE XREF: __do_global_ctors_aux+14↑j
.text:0000000000401A7F                 add     rsp, 8
.text:0000000000401A83                 pop     rbx
.text:0000000000401A84                 pop     rbp
.text:0000000000401A85                 retn
.text:0000000000401A85 __do_global_ctors_aux endp
.text:0000000000401A85
.text:0000000000401A85 ; ---------------------------------------------------------------------------
.text:0000000000401A86                 align 8
.text:0000000000401A86 _text           ends
.text:0000000000401A86