.text:0000000000401150 ; =============== S U B R O U T I N E =======================================
.text:0000000000401150
.text:0000000000401150 ; Attributes: noreturn fuzzy-sp
.text:0000000000401150
.text:0000000000401150                 public _start
.text:0000000000401150 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o
.text:0000000000401150                 xor     ebp, ebp
.text:0000000000401152                 mov     r9, rdx         ; rtld_fini
.text:0000000000401155                 pop     rsi             ; argc
.text:0000000000401156                 mov     rdx, rsp        ; ubp_av
.text:0000000000401159                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000040115D                 push    rax
.text:000000000040115E                 push    rsp             ; stack_end
.text:000000000040115F                 mov     r8, offset __libc_csu_fini ; fini
.text:0000000000401166                 mov     rcx, offset __libc_csu_init ; init
.text:000000000040116D                 mov     rdi, offset main ; main
.text:0000000000401174                 call    ___libc_start_main
.text:0000000000401179                 hlt
.text:0000000000401179 _start          endp
.text:0000000000401179
.text:0000000000401179 ; ---------------------------------------------------------------------------
.text:000000000040117A                 align 4
.text:000000000040117C
.text:000000000040117C ; =============== S U B R O U T I N E =======================================
.text:000000000040117C
.text:000000000040117C
.text:000000000040117C call_gmon_start proc near               ; CODE XREF: _init_proc+4↑p
.text:000000000040117C                 sub     rsp, 8
.text:0000000000401180                 mov     rax, cs:__gmon_start___ptr
.text:0000000000401187                 test    rax, rax
.text:000000000040118A                 jz      short loc_40118E
.text:000000000040118C                 call    rax ; __gmon_start__
.text:000000000040118E
.text:000000000040118E loc_40118E:                             ; CODE XREF: call_gmon_start+E↑j
.text:000000000040118E                 add     rsp, 8
.text:0000000000401192                 retn
.text:0000000000401192 call_gmon_start endp
.text:0000000000401192
.text:0000000000401192 ; ---------------------------------------------------------------------------
.text:0000000000401193                 align 20h
.text:00000000004011A0
.text:00000000004011A0 ; =============== S U B R O U T I N E =======================================
.text:00000000004011A0
.text:00000000004011A0 ; Attributes: bp-based frame
.text:00000000004011A0
.text:00000000004011A0 __do_global_dtors_aux proc near         ; CODE XREF: _term_proc+4↓p
.text:00000000004011A0                 push    rbp
.text:00000000004011A1                 mov     rbp, rsp
.text:00000000004011A4                 push    rbx
.text:00000000004011A5                 sub     rsp, 8
.text:00000000004011A9                 cmp     cs:completed_6531, 0
.text:00000000004011B0                 jnz     short loc_4011FD
.text:00000000004011B2                 mov     ebx, offset __DTOR_END__
.text:00000000004011B7                 mov     rax, cs:dtor_idx_6533
.text:00000000004011BE                 sub     rbx, offset __DTOR_LIST__
.text:00000000004011C5                 sar     rbx, 3
.text:00000000004011C9                 sub     rbx, 1
.text:00000000004011CD                 cmp     rax, rbx
.text:00000000004011D0                 jnb     short loc_4011F6
.text:00000000004011D2                 nop     word ptr [rax+rax+00h]
.text:00000000004011D8
.text:00000000004011D8 loc_4011D8:                             ; CODE XREF: __do_global_dtors_aux+54↓j
.text:00000000004011D8                 add     rax, 1
.text:00000000004011DC                 mov     cs:dtor_idx_6533, rax
.text:00000000004011E3                 call    ds:__DTOR_LIST__[rax*8]
.text:00000000004011EA                 mov     rax, cs:dtor_idx_6533
.text:00000000004011F1                 cmp     rax, rbx
.text:00000000004011F4                 jb      short loc_4011D8
.text:00000000004011F6
.text:00000000004011F6 loc_4011F6:                             ; CODE XREF: __do_global_dtors_aux+30↑j
.text:00000000004011F6                 mov     cs:completed_6531, 1
.text:00000000004011FD
.text:00000000004011FD loc_4011FD:                             ; CODE XREF: __do_global_dtors_aux+10↑j
.text:00000000004011FD                 add     rsp, 8
.text:0000000000401201                 pop     rbx
.text:0000000000401202                 pop     rbp
.text:0000000000401203                 retn
.text:0000000000401203 __do_global_dtors_aux endp
.text:0000000000401203
.text:0000000000401203 ; ---------------------------------------------------------------------------
.text:0000000000401204                 align 10h
.text:0000000000401210
.text:0000000000401210 ; =============== S U B R O U T I N E =======================================
.text:0000000000401210
.text:0000000000401210 ; Attributes: bp-based frame
.text:0000000000401210
.text:0000000000401210 frame_dummy     proc near               ; CODE XREF: _init_proc+9↑p
.text:0000000000401210                 cmp     cs:__JCR_LIST__, 0
.text:0000000000401218                 push    rbp
.text:0000000000401219                 mov     rbp, rsp
.text:000000000040121C                 jz      short loc_401230
.text:000000000040121E                 mov     eax, 0
.text:0000000000401223                 test    rax, rax
.text:0000000000401226                 jz      short loc_401230
.text:0000000000401228                 pop     rbp
.text:0000000000401229                 mov     edi, offset __JCR_LIST__
.text:000000000040122E                 jmp     rax
.text:0000000000401230 ; ---------------------------------------------------------------------------
.text:0000000000401230
.text:0000000000401230 loc_401230:                             ; CODE XREF: frame_dummy+C↑j
.text:0000000000401230                                         ; frame_dummy+16↑j
.text:0000000000401230                 pop     rbp
.text:0000000000401231                 retn
.text:0000000000401231 frame_dummy     endp
.text:0000000000401231
.text:0000000000401231 ; ---------------------------------------------------------------------------
.text:0000000000401232                 align 20h
.text:0000000000401240
.text:0000000000401240 ; =============== S U B R O U T I N E =======================================
.text:0000000000401240
.text:0000000000401240 ; Attributes: bp-based frame fuzzy-sp
.text:0000000000401240
.text:0000000000401240 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000401240                 public main
.text:0000000000401240 main            proc near               ; DATA XREF: _start+1D↑o
.text:0000000000401240
.text:0000000000401240 var_80          = dword ptr -80h
.text:0000000000401240 var_7C          = dword ptr -7Ch
.text:0000000000401240 var_70          = qword ptr -70h
.text:0000000000401240 var_68          = qword ptr -68h
.text:0000000000401240 var_60          = qword ptr -60h
.text:0000000000401240 var_58          = byte ptr -58h
.text:0000000000401240 var_57          = byte ptr -57h
.text:0000000000401240 var_56          = byte ptr -56h
.text:0000000000401240 var_55          = byte ptr -55h
.text:0000000000401240 arg_0           = qword ptr  10h
.text:0000000000401240 arg_8           = qword ptr  18h
.text:0000000000401240 arg_10          = qword ptr  20h
.text:0000000000401240 arg_18          = qword ptr  28h
.text:0000000000401240
.text:0000000000401240 ; __unwind { // ___gxx_personality_v0
.text:0000000000401240                 push    rbp
.text:0000000000401241                 mov     rbp, rsp
.text:0000000000401244                 and     rsp, 0FFFFFFFFFFFFFF80h
.text:0000000000401248                 push    r13
.text:000000000040124A                 push    r14
.text:000000000040124C                 push    r15
.text:000000000040124E                 push    rbx
.text:000000000040124F                 sub     rsp, 60h
.text:0000000000401253                 mov     rsi, 0
.text:000000000040125D                 mov     edi, 3
.text:0000000000401262                 call    __intel_new_feature_proc_init
.text:0000000000401267                 stmxcsr [rsp+80h+var_80]
.text:000000000040126B                 xor     r15d, r15d
.text:000000000040126E                 or      [rsp+80h+var_80], 8040h
.text:0000000000401275                 xor     r14d, r14d
.text:0000000000401278                 ldmxcsr [rsp+80h+var_80]
.text:000000000040127C
.text:000000000040127C loc_40127C:                             ; CODE XREF: main+16A↓j
.text:000000000040127C                 lea     rsi, cons[r14]
.text:0000000000401283                 lea     rdi, [rsp+80h+var_68]
.text:0000000000401288                 call    __ZNSsC1ERKSs   ; std::string::string(std::string const&)
.text:000000000040128D                 lea     rsi, qword_605A48[r14]
.text:0000000000401294                 lea     rdi, [rsp+80h+var_60]
.text:0000000000401299 ;   try {
.text:0000000000401299                 call    __ZNSsC1ERKSs   ; std::string::string(std::string const&)
.text:0000000000401299 ;   } // starts at 401299
.text:000000000040129E                 mov     rdi, [rsp+80h+var_68]
.text:00000000004012A3                 xor     ebx, ebx
.text:00000000004012A5                 cmp     dword ptr [rdi-18h], 0
.text:00000000004012A9                 jle     loc_401376
.text:00000000004012AF
.text:00000000004012AF loc_4012AF:                             ; CODE XREF: main+130↓j
.text:00000000004012AF                 cmp     dword ptr [rdi-8], 0
.text:00000000004012B3                 jl      short loc_4012C4
.text:00000000004012B5                 lea     rdi, [rsp+80h+var_68] ; this
.text:00000000004012BA ;   try {
.text:00000000004012BA                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:00000000004012BF                 mov     rdi, [rsp+80h+var_68]
.text:00000000004012C4
.text:00000000004012C4 loc_4012C4:                             ; CODE XREF: main+73↑j
.text:00000000004012C4                 cmp     byte ptr [rdi+rbx], 20h ; ' '
.text:00000000004012C8                 jz      loc_401366
.text:00000000004012CE                 mov     rax, [rsp+80h+var_60]
.text:00000000004012D3                 cmp     dword ptr [rax-8], 0
.text:00000000004012D7                 jl      short loc_4012ED
.text:00000000004012D9                 lea     rdi, [rsp+80h+var_60] ; this
.text:00000000004012DE                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:00000000004012E3                 mov     rdi, [rsp+80h+var_68]
.text:00000000004012E8                 mov     rax, [rsp+80h+var_60]
.text:00000000004012ED
.text:00000000004012ED loc_4012ED:                             ; CODE XREF: main+97↑j
.text:00000000004012ED                 mov     r13b, [rax+rbx]
.text:00000000004012F1                 cmp     dword ptr [rdi-8], 0
.text:00000000004012F5                 jl      short loc_401306
.text:00000000004012F7                 lea     rdi, [rsp+80h+var_68] ; this
.text:00000000004012FC                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:0000000000401301                 mov     rdi, [rsp+80h+var_68]
.text:0000000000401306
.text:0000000000401306 loc_401306:                             ; CODE XREF: main+B5↑j
.text:0000000000401306                 mov     esi, offset qword_605A78
.text:000000000040130B                 mov     rax, qword ptr cs:xmmword_605A80
.text:0000000000401312                 mov     rcx, rsi
.text:0000000000401315                 mov     dl, [rbx+rdi]
.text:0000000000401318                 test    rax, rax
.text:000000000040131B                 jz      short loc_401338
.text:000000000040131D
.text:000000000040131D loc_40131D:                             ; CODE XREF: main+F6↓j
.text:000000000040131D                 mov     dil, [rax+20h]
.text:0000000000401321                 cmp     dil, dl
.text:0000000000401324                 jl      short loc_40132F
.text:0000000000401326                 mov     rsi, rax
.text:0000000000401329                 mov     rax, [rax+10h]
.text:000000000040132D                 jmp     short loc_401333
.text:000000000040132F ; ---------------------------------------------------------------------------
.text:000000000040132F
.text:000000000040132F loc_40132F:                             ; CODE XREF: main+E4↑j
.text:000000000040132F                 mov     rax, [rax+18h]
.text:0000000000401333
.text:0000000000401333 loc_401333:                             ; CODE XREF: main+ED↑j
.text:0000000000401333                 test    rax, rax
.text:0000000000401336                 jnz     short loc_40131D
.text:0000000000401338
.text:0000000000401338 loc_401338:                             ; CODE XREF: main+DB↑j
.text:0000000000401338                 cmp     rsi, rcx
.text:000000000040133B                 jz      short loc_401342
.text:000000000040133D                 cmp     dl, [rsi+20h]
.text:0000000000401340                 jge     short loc_40135D
.text:0000000000401342
.text:0000000000401342 loc_401342:                             ; CODE XREF: main+FB↑j
.text:0000000000401342                 mov     [rsp+80h+var_58], dl
.text:0000000000401346                 mov     edi, offset ma
.text:000000000040134B                 mov     [rsp+80h+var_57], 0
.text:0000000000401350                 lea     rdx, [rsp+80h+var_58]
.text:0000000000401355                 call    _ZNSt8_Rb_treeIcSt4pairIKccESt10_Select1stIS2_ESt4lessIcESaIS2_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS2_ERKS2_ ; std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)
.text:0000000000401355 ;   } // starts at 4012BA
.text:000000000040135A                 mov     rsi, rax
.text:000000000040135D
.text:000000000040135D loc_40135D:                             ; CODE XREF: main+100↑j
.text:000000000040135D                 mov     [rsi+21h], r13b
.text:0000000000401361                 mov     rdi, [rsp+80h+var_68]
.text:0000000000401366
.text:0000000000401366 loc_401366:                             ; CODE XREF: main+88↑j
.text:0000000000401366                 inc     rbx
.text:0000000000401369                 movsxd  rax, dword ptr [rdi-18h]
.text:000000000040136D                 cmp     rbx, rax
.text:0000000000401370                 jl      loc_4012AF
.text:0000000000401376
.text:0000000000401376 loc_401376:                             ; CODE XREF: main+69↑j
.text:0000000000401376                 mov     rdx, [rsp+80h+var_60]
.text:000000000040137B                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401380                 lea     rbx, [rdx-18h]
.text:0000000000401384                 cmp     rbx, rax
.text:0000000000401387                 jnz     loc_4015FA
.text:000000000040138D
.text:000000000040138D loc_40138D:                             ; CODE XREF: main+3E8↓j
.text:000000000040138D                                         ; main+3FF↓j
.text:000000000040138D                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401392                 lea     rdx, [rdi-18h]
.text:0000000000401396                 cmp     rdx, rax
.text:0000000000401399                 jnz     loc_4015BE
.text:000000000040139F
.text:000000000040139F loc_40139F:                             ; CODE XREF: main+3A2↓j
.text:000000000040139F                                         ; main+3B5↓j
.text:000000000040139F                 inc     r15
.text:00000000004013A2                 add     r14, 8
.text:00000000004013A6                 cmp     r15, 5
.text:00000000004013AA                 jl      loc_40127C
.text:00000000004013B0                 mov     edi, offset format ; "%d\n"
.text:00000000004013B5                 lea     rsi, [rsp+80h+var_7C]
.text:00000000004013BA                 xor     eax, eax
.text:00000000004013BC                 call    _scanf
.text:00000000004013C1                 xor     r15d, r15d
.text:00000000004013C4                 cmp     [rsp+80h+var_7C], 0
.text:00000000004013C9                 jle     loc_401513
.text:00000000004013CF                 mov     r14d, offset unk_6059F8
.text:00000000004013D5
.text:00000000004013D5 loc_4013D5:                             ; CODE XREF: main+2CD↓j
.text:00000000004013D5                 mov     rax, cs:_ZSt3cin@@GLIBCXX_3_4
.text:00000000004013DC                 mov     [rsp+80h+var_70], r14
.text:00000000004013E1                 mov     rdx, [rax-18h]
.text:00000000004013E5                 mov     rbx, ds:qword_6059B0[rdx]
.text:00000000004013EC                 test    rbx, rbx
.text:00000000004013EF                 jz      loc_4015B9
.text:00000000004013F5                 cmp     byte ptr [rbx+38h], 0
.text:00000000004013F9                 jz      loc_40159C
.text:00000000004013FF                 movsx   edx, byte ptr [rbx+43h]
.text:0000000000401403
.text:0000000000401403 loc_401403:                             ; CODE XREF: main+374↓j
.text:0000000000401403                 mov     edi, offset _ZSt3cin@@GLIBCXX_3_4
.text:0000000000401408                 lea     rsi, [rsp+80h+var_70]
.text:000000000040140D ;   try {
.text:000000000040140D                 call    __ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_ES4_ ; std::getline<char,std::char_traits<char>,std::allocator<char>>(std::basic_istream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> &,char)
.text:0000000000401412                 mov     rdx, [rsp+80h+var_70]
.text:0000000000401417                 xor     r13d, r13d
.text:000000000040141A                 cmp     dword ptr [rdx-18h], 0
.text:000000000040141E                 jle     loc_4014E3
.text:0000000000401424
.text:0000000000401424 loc_401424:                             ; CODE XREF: main+29D↓j
.text:0000000000401424                 cmp     dword ptr [rdx-8], 0
.text:0000000000401428                 jl      short loc_401439
.text:000000000040142A                 lea     rdi, [rsp+80h+var_70] ; this
.text:000000000040142F                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:0000000000401434                 mov     rdx, [rsp+80h+var_70]
.text:0000000000401439
.text:0000000000401439 loc_401439:                             ; CODE XREF: main+1E8↑j
.text:0000000000401439                 cmp     byte ptr [rdx+r13], 20h ; ' '
.text:000000000040143E                 jz      loc_4014D3
.text:0000000000401444                 cmp     dword ptr [rdx-8], 0
.text:0000000000401448                 jl      short loc_401459
.text:000000000040144A                 lea     rdi, [rsp+80h+var_70] ; this
.text:000000000040144F                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:0000000000401454                 mov     rdx, [rsp+80h+var_70]
.text:0000000000401459
.text:0000000000401459 loc_401459:                             ; CODE XREF: main+208↑j
.text:0000000000401459                 mov     esi, offset qword_605A78
.text:000000000040145E                 mov     rbx, qword ptr cs:xmmword_605A80
.text:0000000000401465                 mov     rcx, rsi
.text:0000000000401468                 mov     al, [r13+rdx+0]
.text:000000000040146D                 test    rbx, rbx
.text:0000000000401470                 jz      short loc_40148D
.text:0000000000401472
.text:0000000000401472 loc_401472:                             ; CODE XREF: main+24B↓j
.text:0000000000401472                 mov     dil, [rbx+20h]
.text:0000000000401476                 cmp     dil, al
.text:0000000000401479                 jl      short loc_401484
.text:000000000040147B                 mov     rsi, rbx
.text:000000000040147E                 mov     rbx, [rbx+10h]
.text:0000000000401482                 jmp     short loc_401488
.text:0000000000401484 ; ---------------------------------------------------------------------------
.text:0000000000401484
.text:0000000000401484 loc_401484:                             ; CODE XREF: main+239↑j
.text:0000000000401484                 mov     rbx, [rbx+18h]
.text:0000000000401488
.text:0000000000401488 loc_401488:                             ; CODE XREF: main+242↑j
.text:0000000000401488                 test    rbx, rbx
.text:000000000040148B                 jnz     short loc_401472
.text:000000000040148D
.text:000000000040148D loc_40148D:                             ; CODE XREF: main+230↑j
.text:000000000040148D                 cmp     rsi, rcx
.text:0000000000401490                 jz      short loc_401497
.text:0000000000401492                 cmp     al, [rsi+20h]
.text:0000000000401495                 jge     short loc_4014B7
.text:0000000000401497
.text:0000000000401497 loc_401497:                             ; CODE XREF: main+250↑j
.text:0000000000401497                 mov     edi, offset ma
.text:000000000040149C                 lea     rdx, [rsp+80h+var_56]
.text:00000000004014A1                 mov     [rsp+80h+var_56], al
.text:00000000004014A5                 mov     [rsp+80h+var_55], 0
.text:00000000004014AA                 call    _ZNSt8_Rb_treeIcSt4pairIKccESt10_Select1stIS2_ESt4lessIcESaIS2_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS2_ERKS2_ ; std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)
.text:00000000004014AF                 mov     rsi, rax
.text:00000000004014B2                 mov     rdx, [rsp+80h+var_70]
.text:00000000004014B7
.text:00000000004014B7 loc_4014B7:                             ; CODE XREF: main+255↑j
.text:00000000004014B7                 mov     bl, [rsi+21h]
.text:00000000004014BA                 cmp     dword ptr [rdx-8], 0
.text:00000000004014BE                 jl      short loc_4014CF
.text:00000000004014C0                 lea     rdi, [rsp+80h+var_70] ; this
.text:00000000004014C5                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:00000000004014CA                 mov     rdx, [rsp+80h+var_70]
.text:00000000004014CF
.text:00000000004014CF loc_4014CF:                             ; CODE XREF: main+27E↑j
.text:00000000004014CF                 mov     [rdx+r13], bl
.text:00000000004014D3
.text:00000000004014D3 loc_4014D3:                             ; CODE XREF: main+1FE↑j
.text:00000000004014D3                 inc     r13
.text:00000000004014D6                 movsxd  rax, dword ptr [rdx-18h]
.text:00000000004014DA                 cmp     r13, rax
.text:00000000004014DD                 jl      loc_401424
.text:00000000004014E3
.text:00000000004014E3 loc_4014E3:                             ; CODE XREF: main+1DE↑j
.text:00000000004014E3                 inc     r15d
.text:00000000004014E6                 mov     edi, offset aCaseDS ; "Case #%d: %s\n"
.text:00000000004014EB                 mov     esi, r15d
.text:00000000004014EE                 xor     eax, eax
.text:00000000004014F0                 call    _printf
.text:00000000004014F0 ;   } // starts at 40140D
.text:00000000004014F5                 mov     rdi, [rsp+80h+var_70]
.text:00000000004014FA                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:00000000004014FF                 lea     rdx, [rdi-18h]
.text:0000000000401503                 cmp     rdx, rax
.text:0000000000401506                 jnz     short loc_401525
.text:0000000000401508
.text:0000000000401508 loc_401508:                             ; CODE XREF: main+309↓j
.text:0000000000401508                                         ; main+318↓j
.text:0000000000401508                 cmp     r15d, [rsp+80h+var_7C]
.text:000000000040150D                 jl      loc_4013D5
.text:0000000000401513
.text:0000000000401513 loc_401513:                             ; CODE XREF: main+189↑j
.text:0000000000401513                 xor     eax, eax
.text:0000000000401515                 add     rsp, 60h
.text:0000000000401519                 pop     rbx
.text:000000000040151A                 pop     r15
.text:000000000040151C                 pop     r14
.text:000000000040151E                 pop     r13
.text:0000000000401520                 mov     rsp, rbp
.text:0000000000401523                 pop     rbp
.text:0000000000401524                 retn
.text:0000000000401525 ; ---------------------------------------------------------------------------
.text:0000000000401525
.text:0000000000401525 loc_401525:                             ; CODE XREF: main+2C6↑j
.text:0000000000401525                 mov     eax, 0
.text:000000000040152A                 test    rax, rax
.text:000000000040152D                 jz      short loc_40153E
.text:000000000040152F                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401533                 mov     ecx, 0FFFFFFFFh
.text:0000000000401538                 lock xadd [rdi], ecx
.text:000000000040153C                 jmp     short loc_401547
.text:000000000040153E ; ---------------------------------------------------------------------------
.text:000000000040153E
.text:000000000040153E loc_40153E:                             ; CODE XREF: main+2ED↑j
.text:000000000040153E                 mov     ecx, [rdx+10h]
.text:0000000000401541                 lea     eax, [rcx-1]
.text:0000000000401544                 mov     [rdx+10h], eax
.text:0000000000401547
.text:0000000000401547 loc_401547:                             ; CODE XREF: main+2FC↑j
.text:0000000000401547                 test    ecx, ecx
.text:0000000000401549                 jg      short loc_401508
.text:000000000040154B                 mov     rdi, rdx
.text:000000000040154E                 lea     rsi, [rsp+80h+var_80+1]
.text:0000000000401553                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401558                 jmp     short loc_401508
.text:000000000040155A ; ---------------------------------------------------------------------------
.text:000000000040155A ;   cleanup() // owned by 40140D
.text:000000000040155A ;   cleanup() // owned by 40159F
.text:000000000040155A                 mov     [rsp-8+arg_0], rax
.text:000000000040155F                 mov     rdi, [rsp-8+arg_8]
.text:0000000000401564                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401569                 lea     rbx, [rdi-18h]
.text:000000000040156D                 cmp     rbx, rax
.text:0000000000401570                 jnz     short loc_40157C
.text:0000000000401572
.text:0000000000401572 loc_401572:                             ; CODE XREF: main+34C↓j
.text:0000000000401572                                         ; main+35A↓j ...
.text:0000000000401572                 mov     rdi, [rsp-8+arg_0] ; struct _Unwind_Exception *
.text:0000000000401577                 call    __Unwind_Resume
.text:000000000040157C ; ---------------------------------------------------------------------------
.text:000000000040157C
.text:000000000040157C loc_40157C:                             ; CODE XREF: main+330↑j
.text:000000000040157C                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401580                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401585                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:000000000040158A                 test    eax, eax
.text:000000000040158C                 jg      short loc_401572
.text:000000000040158E                 mov     rdi, rbx
.text:0000000000401591                 lea     rsi, [rsp+0]
.text:0000000000401595                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:000000000040159A                 jmp     short loc_401572
.text:000000000040159C ; ---------------------------------------------------------------------------
.text:000000000040159C
.text:000000000040159C loc_40159C:                             ; CODE XREF: main+1B9↑j
.text:000000000040159C                 mov     rdi, rbx
.text:000000000040159F ;   try {
.text:000000000040159F                 call    __ZNKSt5ctypeIcE13_M_widen_initEv ; std::ctype<char>::_M_widen_init(void)
.text:00000000004015A4                 mov     rax, [rbx]
.text:00000000004015A7                 mov     rdi, rbx
.text:00000000004015AA                 mov     esi, 0Ah
.text:00000000004015AF                 call    qword ptr [rax+30h]
.text:00000000004015B2                 mov     edx, eax
.text:00000000004015B4                 jmp     loc_401403
.text:00000000004015B9 ; ---------------------------------------------------------------------------
.text:00000000004015B9
.text:00000000004015B9 loc_4015B9:                             ; CODE XREF: main+1AF↑j
.text:00000000004015B9                 call    __ZSt16__throw_bad_castv ; std::__throw_bad_cast(void)
.text:00000000004015B9 ;   } // starts at 40159F
.text:00000000004015BE ; ---------------------------------------------------------------------------
.text:00000000004015BE
.text:00000000004015BE loc_4015BE:                             ; CODE XREF: main+159↑j
.text:00000000004015BE                 mov     eax, 0
.text:00000000004015C3                 test    rax, rax
.text:00000000004015C6                 jz      short loc_4015D7
.text:00000000004015C8                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:00000000004015CC                 mov     ecx, 0FFFFFFFFh
.text:00000000004015D1                 lock xadd [rdi], ecx
.text:00000000004015D5                 jmp     short loc_4015E0
.text:00000000004015D7 ; ---------------------------------------------------------------------------
.text:00000000004015D7
.text:00000000004015D7 loc_4015D7:                             ; CODE XREF: main+386↑j
.text:00000000004015D7                 mov     ecx, [rdx+10h]
.text:00000000004015DA                 lea     eax, [rcx-1]
.text:00000000004015DD                 mov     [rdx+10h], eax
.text:00000000004015E0
.text:00000000004015E0 loc_4015E0:                             ; CODE XREF: main+395↑j
.text:00000000004015E0                 test    ecx, ecx
.text:00000000004015E2                 jg      loc_40139F
.text:00000000004015E8                 mov     rdi, rdx
.text:00000000004015EB                 lea     rsi, [rsp+80h+var_80+3]
.text:00000000004015F0                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:00000000004015F5                 jmp     loc_40139F
.text:00000000004015FA ; ---------------------------------------------------------------------------
.text:00000000004015FA
.text:00000000004015FA loc_4015FA:                             ; CODE XREF: main+147↑j
.text:00000000004015FA                 mov     eax, 0
.text:00000000004015FF                 test    rax, rax
.text:0000000000401602                 jz      short loc_401616
.text:0000000000401604                 add     rdx, 0FFFFFFFFFFFFFFF8h
.text:0000000000401608                 mov     ecx, 0FFFFFFFFh
.text:000000000040160D                 mov     rdi, rdx
.text:0000000000401610                 lock xadd [rdi], ecx
.text:0000000000401614                 jmp     short loc_40161F
.text:0000000000401616 ; ---------------------------------------------------------------------------
.text:0000000000401616
.text:0000000000401616 loc_401616:                             ; CODE XREF: main+3C2↑j
.text:0000000000401616                 mov     ecx, [rbx+10h]
.text:0000000000401619                 lea     eax, [rcx-1]
.text:000000000040161C                 mov     [rbx+10h], eax
.text:000000000040161F
.text:000000000040161F loc_40161F:                             ; CODE XREF: main+3D4↑j
.text:000000000040161F                 test    ecx, ecx
.text:0000000000401621                 jle     short loc_40162D
.text:0000000000401623                 mov     rdi, [rsp+80h+var_68]
.text:0000000000401628                 jmp     loc_40138D
.text:000000000040162D ; ---------------------------------------------------------------------------
.text:000000000040162D
.text:000000000040162D loc_40162D:                             ; CODE XREF: main+3E1↑j
.text:000000000040162D                 mov     rdi, rbx
.text:0000000000401630                 lea     rsi, [rsp+80h+var_80+2]
.text:0000000000401635                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:000000000040163A                 mov     rdi, [rsp+80h+var_68]
.text:000000000040163F                 jmp     loc_40138D
.text:0000000000401644 ; ---------------------------------------------------------------------------
.text:0000000000401644 ;   cleanup() // owned by 4012BA
.text:0000000000401644                 mov     [rsp-8+arg_0], rax
.text:0000000000401649                 mov     rdi, [rsp-8+arg_18]
.text:000000000040164E                 mov     r13d, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401654                 lea     rbx, [rdi-18h]
.text:0000000000401658                 cmp     rbx, r13
.text:000000000040165B                 jnz     short loc_401696
.text:000000000040165D
.text:000000000040165D loc_40165D:                             ; CODE XREF: main+466↓j
.text:000000000040165D                                         ; main+475↓j ...
.text:000000000040165D                 mov     rdi, [rsp-8+arg_10]
.text:0000000000401662                 lea     rbx, [rdi-18h]
.text:0000000000401666                 cmp     rbx, r13
.text:0000000000401669                 jz      loc_401572
.text:000000000040166F                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401673                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401678                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:000000000040167D                 test    eax, eax
.text:000000000040167F                 jg      loc_401572
.text:0000000000401685                 mov     rdi, rbx
.text:0000000000401688                 lea     rsi, [rsp+0]
.text:000000000040168C                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401691                 jmp     loc_401572
.text:0000000000401696 ; ---------------------------------------------------------------------------
.text:0000000000401696
.text:0000000000401696 loc_401696:                             ; CODE XREF: main+41B↑j
.text:0000000000401696                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:000000000040169A                 mov     esi, 0FFFFFFFFh ; int
.text:000000000040169F                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:00000000004016A4                 test    eax, eax
.text:00000000004016A6                 jg      short loc_40165D
.text:00000000004016A8                 mov     rdi, rbx
.text:00000000004016AB                 lea     rsi, [rsp+1]
.text:00000000004016B0                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:00000000004016B5                 jmp     short loc_40165D
.text:00000000004016B7 ; ---------------------------------------------------------------------------
.text:00000000004016B7 ;   cleanup() // owned by 401299
.text:00000000004016B7                 mov     [rsp-8+arg_0], rax
.text:00000000004016BC                 mov     r13d, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:00000000004016C2                 jmp     short loc_40165D
.text:00000000004016C2 main            endp
.text:00000000004016C2
.text:00000000004016C2 ; ---------------------------------------------------------------------------
.text:00000000004016C4                 align 10h
.text:00000000004016C4 ; } // starts at 401240
.text:00000000004016D0
.text:00000000004016D0 ; =============== S U B R O U T I N E =======================================
.text:00000000004016D0
.text:00000000004016D0
.text:00000000004016D0 ; __int64 __fastcall _sti___E(char, int, struct _Unwind_Exception *, __int64)
.text:00000000004016D0 __sti__$E       proc near               ; CODE XREF: __libc_csu_init+59↓p
.text:00000000004016D0                                         ; DATA XREF: .init_array:__init_array_start↓o
.text:00000000004016D0
.text:00000000004016D0 var_1E          = byte ptr -1Eh
.text:00000000004016D0 var_1D          = byte ptr -1Dh
.text:00000000004016D0 var_1C          = byte ptr -1Ch
.text:00000000004016D0 var_1B          = byte ptr -1Bh
.text:00000000004016D0 var_1A          = byte ptr -1Ah
.text:00000000004016D0 var_19          = byte ptr -19h
.text:00000000004016D0 var_8           = byte ptr -8
.text:00000000004016D0 var_7           = byte ptr -7
.text:00000000004016D0 var_6           = byte ptr -6
.text:00000000004016D0 var_5           = byte ptr -5
.text:00000000004016D0 arg_0           = byte ptr  8
.text:00000000004016D0 arg_1           = byte ptr  9
.text:00000000004016D0 arg_8           = qword ptr  10h
.text:00000000004016D0 arg_10          = qword ptr  18h
.text:00000000004016D0
.text:00000000004016D0 ; __unwind { // ___gxx_personality_v0
.text:00000000004016D0                 sub     rsp, 28h
.text:00000000004016D4                 mov     edi, offset _ZSt8__ioinit ; this
.text:00000000004016D9                 call    __ZNSt8ios_base4InitC1Ev ; std::ios_base::Init::Init(void)
.text:00000000004016DE                 mov     edi, offset __ZNSt8ios_base4InitD1Ev ; lpfunc
.text:00000000004016E3                 mov     esi, offset _ZSt8__ioinit ; obj
.text:00000000004016E8                 mov     edx, offset __dso_handle ; lpdso_handle
.text:00000000004016ED                 call    ___cxa_atexit
.text:00000000004016F2                 mov     edi, offset cons
.text:00000000004016F7                 mov     esi, offset aEjpMysljylcKdK ; "ejp mysljylc kd kxveddknmc re jsicpdrys"...
.text:00000000004016FC                 lea     rdx, [rsp+28h+var_1E]
.text:0000000000401701 ;   try {
.text:0000000000401701                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0000000000401701 ;   } // starts at 401701
.text:0000000000401706                 mov     edi, offset qword_605A28
.text:000000000040170B                 mov     esi, offset aRbcpcYpcRtcsra ; "rbcpc ypc rtcsra dkh wyfrepkym veddknkm"...
.text:0000000000401710                 lea     rdx, [rsp+28h+var_1D]
.text:0000000000401715 ;   try {
.text:0000000000401715                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0000000000401715 ;   } // starts at 401715
.text:000000000040171A                 mov     edi, offset qword_605A30
.text:000000000040171F                 mov     esi, offset aDeKrKdEoyaKwAe ; "de kr kd eoya kw aej tysr re ujdr lkgc "...
.text:0000000000401724                 lea     rdx, [rsp+28h+var_1C]
.text:0000000000401729 ;   try {
.text:0000000000401729                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0000000000401729 ;   } // starts at 401729
.text:000000000040172E                 mov     edi, offset qword_605A38
.text:0000000000401733                 mov     esi, offset aYQee ; "y qee"
.text:0000000000401738                 lea     rdx, [rsp+28h+var_1B]
.text:000000000040173D ;   try {
.text:000000000040173D                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:000000000040173D ;   } // starts at 40173D
.text:0000000000401742                 mov     edi, offset qword_605A40
.text:0000000000401747                 mov     esi, offset aZ  ; "z"
.text:000000000040174C                 lea     rdx, [rsp+28h+var_1A]
.text:0000000000401751 ;   try {
.text:0000000000401751                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0000000000401751 ;   } // starts at 401751
.text:0000000000401756                 mov     edi, offset qword_605A48
.text:000000000040175B                 mov     esi, offset aOurLanguageIsI ; "our language is impossible to understan"...
.text:0000000000401760                 lea     rdx, [rsp+28h+var_19]
.text:0000000000401765 ;   try {
.text:0000000000401765                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0000000000401765 ;   } // starts at 401765
.text:000000000040176A                 mov     edi, offset qword_605A50
.text:000000000040176F                 mov     esi, offset aThereAreTwenty ; "there are twenty six factorial possibil"...
.text:0000000000401774                 lea     rdx, [rsp+28h+var_8]
.text:0000000000401779 ;   try {
.text:0000000000401779                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0000000000401779 ;   } // starts at 401779
.text:000000000040177E                 mov     edi, offset qword_605A58
.text:0000000000401783                 mov     esi, offset aSoItIsOkayIfYo ; "so it is okay if you want to just give "...
.text:0000000000401788                 lea     rdx, [rsp+28h+var_7]
.text:000000000040178D ;   try {
.text:000000000040178D                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:000000000040178D ;   } // starts at 40178D
.text:0000000000401792                 mov     edi, offset qword_605A60
.text:0000000000401797                 mov     esi, offset aAZoo ; "a zoo"
.text:000000000040179C                 lea     rdx, [rsp+28h+var_6]
.text:00000000004017A1 ;   try {
.text:00000000004017A1                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:00000000004017A1 ;   } // starts at 4017A1
.text:00000000004017A6                 mov     edi, offset qword_605A68
.text:00000000004017AB                 mov     esi, offset aQ  ; "q"
.text:00000000004017B0                 lea     rdx, [rsp+28h+var_5]
.text:00000000004017B5 ;   try {
.text:00000000004017B5                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:00000000004017B5 ;   } // starts at 4017B5
.text:00000000004017BA                 mov     edi, offset __$U0 ; lpfunc
.text:00000000004017BF                 xor     esi, esi        ; obj
.text:00000000004017C1                 mov     edx, offset __dso_handle ; lpdso_handle
.text:00000000004017C6 ;   try {
.text:00000000004017C6                 call    ___cxa_atexit
.text:00000000004017CB                 pxor    xmm0, xmm0
.text:00000000004017CF                 movq    cs:qword_605A78, xmm0
.text:00000000004017D7                 movaps  cs:xmmword_605A80, xmm0
.text:00000000004017DE                 movq    cs:qword_605A90, xmm0
.text:00000000004017E6                 mov     edi, offset _ZNSt3mapIccSt4lessIcESaISt4pairIKccEEED1Ev ; lpfunc
.text:00000000004017EB                 mov     esi, offset ma  ; obj
.text:00000000004017F0                 mov     edx, offset __dso_handle ; lpdso_handle
.text:00000000004017F5                 xor     eax, eax
.text:00000000004017F7                 mov     cs:qword_605A98, rax
.text:00000000004017FE                 mov     dword ptr cs:qword_605A78, 0
.text:0000000000401808                 mov     qword ptr cs:xmmword_605A80, rax
.text:000000000040180F                 mov     qword ptr cs:xmmword_605A80+8, offset qword_605A78
.text:000000000040181A                 mov     cs:qword_605A90, offset qword_605A78
.text:0000000000401825                 call    ___cxa_atexit
.text:0000000000401825 ;   } // starts at 4017C6
.text:000000000040182A                 add     rsp, 28h
.text:000000000040182E                 retn
.text:000000000040182F ; ---------------------------------------------------------------------------
.text:000000000040182F ;   cleanup() // owned by 4017C6
.text:000000000040182F                 mov     [rsp+arg_8], rax
.text:0000000000401834                 mov     rdi, cs:qword_605A68
.text:000000000040183B                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401840                 lea     rax, [rdi-18h]
.text:0000000000401844                 mov     [rsp+0], rax
.text:0000000000401848                 cmp     rax, rdx
.text:000000000040184B                 jnz     loc_401ACA
.text:0000000000401851
.text:0000000000401851 loc_401851:                             ; CODE XREF: __sti__$E+40A↓j
.text:0000000000401851                                         ; __sti__$E+41E↓j ...
.text:0000000000401851                 mov     rdi, cs:qword_605A60
.text:0000000000401858                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:000000000040185D                 lea     rax, [rdi-18h]
.text:0000000000401861                 mov     [rsp+0], rax
.text:0000000000401865                 cmp     rax, rdx
.text:0000000000401868                 jnz     loc_401AA1
.text:000000000040186E
.text:000000000040186E loc_40186E:                             ; CODE XREF: __sti__$E+3E1↓j
.text:000000000040186E                                         ; __sti__$E+3F5↓j ...
.text:000000000040186E                 mov     rdi, cs:qword_605A58
.text:0000000000401875                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:000000000040187A                 lea     rax, [rdi-18h]
.text:000000000040187E                 mov     [rsp+arg_10], rax
.text:0000000000401883                 cmp     rax, rdx
.text:0000000000401886                 jnz     loc_401A77
.text:000000000040188C
.text:000000000040188C loc_40188C:                             ; CODE XREF: __sti__$E+3B7↓j
.text:000000000040188C                                         ; __sti__$E+3CC↓j ...
.text:000000000040188C                 mov     rdi, cs:qword_605A50
.text:0000000000401893                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401898                 lea     rax, [rdi-18h]
.text:000000000040189C                 mov     [rsp+arg_10], rax
.text:00000000004018A1                 cmp     rax, rdx
.text:00000000004018A4                 jnz     loc_401A4D
.text:00000000004018AA
.text:00000000004018AA loc_4018AA:                             ; CODE XREF: __sti__$E+38D↓j
.text:00000000004018AA                                         ; __sti__$E+3A2↓j ...
.text:00000000004018AA                 mov     rdi, cs:qword_605A48
.text:00000000004018B1                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:00000000004018B6                 lea     rax, [rdi-18h]
.text:00000000004018BA                 mov     [rsp+arg_10], rax
.text:00000000004018BF                 cmp     rax, rdx
.text:00000000004018C2                 jnz     loc_401A23
.text:00000000004018C8
.text:00000000004018C8 loc_4018C8:                             ; CODE XREF: __sti__$E+363↓j
.text:00000000004018C8                                         ; __sti__$E+378↓j ...
.text:00000000004018C8                 mov     rdi, cs:qword_605A40
.text:00000000004018CF                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:00000000004018D4                 lea     rax, [rdi-18h]
.text:00000000004018D8                 mov     [rsp+arg_10], rax
.text:00000000004018DD                 cmp     rax, rdx
.text:00000000004018E0                 jnz     loc_4019F9
.text:00000000004018E6
.text:00000000004018E6 loc_4018E6:                             ; CODE XREF: __sti__$E+339↓j
.text:00000000004018E6                                         ; __sti__$E+34E↓j ...
.text:00000000004018E6                 mov     rdi, cs:qword_605A38
.text:00000000004018ED                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:00000000004018F2                 lea     rax, [rdi-18h]
.text:00000000004018F6                 mov     [rsp+arg_10], rax
.text:00000000004018FB                 cmp     rax, rdx
.text:00000000004018FE                 jnz     loc_4019CF
.text:0000000000401904
.text:0000000000401904 loc_401904:                             ; CODE XREF: __sti__$E+30F↓j
.text:0000000000401904                                         ; __sti__$E+324↓j ...
.text:0000000000401904                 mov     rdi, cs:qword_605A30
.text:000000000040190B                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401910                 lea     rax, [rdi-18h]
.text:0000000000401914                 mov     [rsp+arg_10], rax
.text:0000000000401919                 cmp     rax, rdx
.text:000000000040191C                 jnz     loc_4019A5
.text:0000000000401922
.text:0000000000401922 loc_401922:                             ; CODE XREF: __sti__$E+2E5↓j
.text:0000000000401922                                         ; __sti__$E+2FA↓j ...
.text:0000000000401922                 mov     rdi, cs:qword_605A28
.text:0000000000401929                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:000000000040192E                 lea     rax, [rdi-18h]
.text:0000000000401932                 mov     [rsp+arg_10], rax
.text:0000000000401937                 cmp     rax, rdx
.text:000000000040193A                 jnz     short loc_401982
.text:000000000040193C
.text:000000000040193C loc_40193C:                             ; CODE XREF: __sti__$E+2C2↓j
.text:000000000040193C                                         ; __sti__$E+2D3↓j ...
.text:000000000040193C                 mov     rdi, cs:cons
.text:0000000000401943                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401948                 lea     rax, [rdi-18h]
.text:000000000040194C                 mov     [rsp+arg_10], rax
.text:0000000000401951                 cmp     rax, rdx
.text:0000000000401954                 jnz     short loc_401960
.text:0000000000401956
.text:0000000000401956 loc_401956:                             ; CODE XREF: __sti__$E+2A0↓j
.text:0000000000401956                                         ; __sti__$E+2B0↓j ...
.text:0000000000401956                 mov     rdi, [rsp+arg_8] ; struct _Unwind_Exception *
.text:000000000040195B                 call    __Unwind_Resume
.text:0000000000401960 ; ---------------------------------------------------------------------------
.text:0000000000401960
.text:0000000000401960 loc_401960:                             ; CODE XREF: __sti__$E+284↑j
.text:0000000000401960                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401964                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401969                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:000000000040196E                 test    eax, eax
.text:0000000000401970                 jg      short loc_401956
.text:0000000000401972                 mov     rdi, [rsp+arg_10]
.text:0000000000401977                 lea     rsi, [rsp+0]
.text:000000000040197B                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401980                 jmp     short loc_401956
.text:0000000000401982 ; ---------------------------------------------------------------------------
.text:0000000000401982
.text:0000000000401982 loc_401982:                             ; CODE XREF: __sti__$E+26A↑j
.text:0000000000401982                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401986                 mov     esi, 0FFFFFFFFh ; int
.text:000000000040198B                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401990                 test    eax, eax
.text:0000000000401992                 jg      short loc_40193C
.text:0000000000401994                 mov     rdi, [rsp+arg_10]
.text:0000000000401999                 lea     rsi, [rsp+1]
.text:000000000040199E                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:00000000004019A3                 jmp     short loc_40193C
.text:00000000004019A5 ; ---------------------------------------------------------------------------
.text:00000000004019A5
.text:00000000004019A5 loc_4019A5:                             ; CODE XREF: __sti__$E+24C↑j
.text:00000000004019A5                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:00000000004019A9                 mov     esi, 0FFFFFFFFh ; int
.text:00000000004019AE                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:00000000004019B3                 test    eax, eax
.text:00000000004019B5                 jg      loc_401922
.text:00000000004019BB                 mov     rdi, [rsp+arg_10]
.text:00000000004019C0                 lea     rsi, [rsp+2]
.text:00000000004019C5                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:00000000004019CA                 jmp     loc_401922
.text:00000000004019CF ; ---------------------------------------------------------------------------
.text:00000000004019CF
.text:00000000004019CF loc_4019CF:                             ; CODE XREF: __sti__$E+22E↑j
.text:00000000004019CF                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:00000000004019D3                 mov     esi, 0FFFFFFFFh ; int
.text:00000000004019D8                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:00000000004019DD                 test    eax, eax
.text:00000000004019DF                 jg      loc_401904
.text:00000000004019E5                 mov     rdi, [rsp+arg_10]
.text:00000000004019EA                 lea     rsi, [rsp+3]
.text:00000000004019EF                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:00000000004019F4                 jmp     loc_401904
.text:00000000004019F9 ; ---------------------------------------------------------------------------
.text:00000000004019F9
.text:00000000004019F9 loc_4019F9:                             ; CODE XREF: __sti__$E+210↑j
.text:00000000004019F9                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:00000000004019FD                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401A02                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401A07                 test    eax, eax
.text:0000000000401A09                 jg      loc_4018E6
.text:0000000000401A0F                 mov     rdi, [rsp+arg_10]
.text:0000000000401A14                 lea     rsi, [rsp+4]
.text:0000000000401A19                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401A1E                 jmp     loc_4018E6
.text:0000000000401A23 ; ---------------------------------------------------------------------------
.text:0000000000401A23
.text:0000000000401A23 loc_401A23:                             ; CODE XREF: __sti__$E+1F2↑j
.text:0000000000401A23                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401A27                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401A2C                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401A31                 test    eax, eax
.text:0000000000401A33                 jg      loc_4018C8
.text:0000000000401A39                 mov     rdi, [rsp+arg_10]
.text:0000000000401A3E                 lea     rsi, [rsp+5]
.text:0000000000401A43                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401A48                 jmp     loc_4018C8
.text:0000000000401A4D ; ---------------------------------------------------------------------------
.text:0000000000401A4D
.text:0000000000401A4D loc_401A4D:                             ; CODE XREF: __sti__$E+1D4↑j
.text:0000000000401A4D                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401A51                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401A56                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401A5B                 test    eax, eax
.text:0000000000401A5D                 jg      loc_4018AA
.text:0000000000401A63                 mov     rdi, [rsp+arg_10]
.text:0000000000401A68                 lea     rsi, [rsp+6]
.text:0000000000401A6D                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401A72                 jmp     loc_4018AA
.text:0000000000401A77 ; ---------------------------------------------------------------------------
.text:0000000000401A77
.text:0000000000401A77 loc_401A77:                             ; CODE XREF: __sti__$E+1B6↑j
.text:0000000000401A77                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401A7B                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401A80                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401A85                 test    eax, eax
.text:0000000000401A87                 jg      loc_40188C
.text:0000000000401A8D                 mov     rdi, [rsp+arg_10]
.text:0000000000401A92                 lea     rsi, [rsp+7]
.text:0000000000401A97                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401A9C                 jmp     loc_40188C
.text:0000000000401AA1 ; ---------------------------------------------------------------------------
.text:0000000000401AA1
.text:0000000000401AA1 loc_401AA1:                             ; CODE XREF: __sti__$E+198↑j
.text:0000000000401AA1                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401AA5                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401AAA                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401AAF                 test    eax, eax
.text:0000000000401AB1                 jg      loc_40186E
.text:0000000000401AB7                 mov     rdi, [rsp+0]
.text:0000000000401ABB                 lea     rsi, [rsp+arg_1]
.text:0000000000401AC0                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401AC5                 jmp     loc_40186E
.text:0000000000401ACA ; ---------------------------------------------------------------------------
.text:0000000000401ACA
.text:0000000000401ACA loc_401ACA:                             ; CODE XREF: __sti__$E+17B↑j
.text:0000000000401ACA                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401ACE                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401AD3                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401AD8                 test    eax, eax
.text:0000000000401ADA                 jg      loc_401851
.text:0000000000401AE0                 mov     rdi, [rsp+0]
.text:0000000000401AE4                 lea     rsi, [rsp+arg_0]
.text:0000000000401AE9                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401AEE                 jmp     loc_401851
.text:0000000000401AF3 ; ---------------------------------------------------------------------------
.text:0000000000401AF3 ;   cleanup() // owned by 4017B5
.text:0000000000401AF3                 mov     [rsp+arg_8], rax
.text:0000000000401AF8                 jmp     loc_401851
.text:0000000000401AFD ; ---------------------------------------------------------------------------
.text:0000000000401AFD ;   cleanup() // owned by 4017A1
.text:0000000000401AFD                 mov     [rsp+arg_8], rax
.text:0000000000401B02                 jmp     loc_40186E
.text:0000000000401B07 ; ---------------------------------------------------------------------------
.text:0000000000401B07 ;   cleanup() // owned by 40178D
.text:0000000000401B07                 mov     [rsp+arg_8], rax
.text:0000000000401B0C                 jmp     loc_40188C
.text:0000000000401B11 ; ---------------------------------------------------------------------------
.text:0000000000401B11 ;   cleanup() // owned by 401779
.text:0000000000401B11                 mov     [rsp+arg_8], rax
.text:0000000000401B16                 jmp     loc_4018AA
.text:0000000000401B1B ; ---------------------------------------------------------------------------
.text:0000000000401B1B ;   cleanup() // owned by 401765
.text:0000000000401B1B                 mov     [rsp+arg_8], rax
.text:0000000000401B20                 jmp     loc_4018C8
.text:0000000000401B25 ; ---------------------------------------------------------------------------
.text:0000000000401B25 ;   cleanup() // owned by 401751
.text:0000000000401B25                 mov     [rsp+arg_8], rax
.text:0000000000401B2A                 jmp     loc_4018E6
.text:0000000000401B2F ; ---------------------------------------------------------------------------
.text:0000000000401B2F ;   cleanup() // owned by 40173D
.text:0000000000401B2F                 mov     [rsp+arg_8], rax
.text:0000000000401B34                 jmp     loc_401904
.text:0000000000401B39 ; ---------------------------------------------------------------------------
.text:0000000000401B39 ;   cleanup() // owned by 401729
.text:0000000000401B39                 mov     [rsp+arg_8], rax
.text:0000000000401B3E                 jmp     loc_401922
.text:0000000000401B43 ; ---------------------------------------------------------------------------
.text:0000000000401B43 ;   cleanup() // owned by 401715
.text:0000000000401B43                 mov     [rsp+arg_8], rax
.text:0000000000401B48                 jmp     loc_40193C
.text:0000000000401B4D ; ---------------------------------------------------------------------------
.text:0000000000401B4D ;   cleanup() // owned by 401701
.text:0000000000401B4D                 mov     [rsp+arg_8], rax
.text:0000000000401B52                 jmp     loc_401956
.text:0000000000401B52 __sti__$E       endp
.text:0000000000401B52
.text:0000000000401B52 ; ---------------------------------------------------------------------------
.text:0000000000401B57                 align 20h
.text:0000000000401B57 ; } // starts at 4016D0
.text:0000000000401B60
.text:0000000000401B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000401B60
.text:0000000000401B60
.text:0000000000401B60 ; __int64 __fastcall __gnu_cxx::__exchange_and_add_dispatch(int *, int)
.text:0000000000401B60 _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii proc near
.text:0000000000401B60                                         ; CODE XREF: main+345↑p
.text:0000000000401B60                                         ; main+438↑p ...
.text:0000000000401B60 ; __unwind { // ___gxx_personality_v0
.text:0000000000401B60                 mov     eax, 0
.text:0000000000401B65                 test    rax, rax
.text:0000000000401B68                 jz      short loc_401B76
.text:0000000000401B6A                 mov     ecx, 0FFFFFFFFh
.text:0000000000401B6F                 lock xadd [rdi], ecx
.text:0000000000401B73                 mov     eax, ecx
.text:0000000000401B75                 retn
.text:0000000000401B76 ; ---------------------------------------------------------------------------
.text:0000000000401B76
.text:0000000000401B76 loc_401B76:                             ; CODE XREF: __gnu_cxx::__exchange_and_add_dispatch(int *,int)+8↑j
.text:0000000000401B76                 mov     eax, [rdi]
.text:0000000000401B78                 lea     edx, [rax-1]
.text:0000000000401B7B                 mov     [rdi], edx
.text:0000000000401B7D                 retn
.text:0000000000401B7D _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii endp
.text:0000000000401B7D
.text:0000000000401B7D ; ---------------------------------------------------------------------------
.text:0000000000401B7E                 align 20h
.text:0000000000401B7E ; } // starts at 401B60
.text:0000000000401B80
.text:0000000000401B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000401B80
.text:0000000000401B80
.text:0000000000401B80 ; void __fastcall __U0(void *)
.text:0000000000401B80 __$U0           proc near               ; DATA XREF: __sti__$E+EA↑o
.text:0000000000401B80
.text:0000000000401B80 var_8           = byte ptr -8
.text:0000000000401B80
.text:0000000000401B80 ; __unwind { // ___gxx_personality_v0
.text:0000000000401B80                 push    rsi
.text:0000000000401B81                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401B86                 mov     rdi, cs:qword_605A68
.text:0000000000401B8D                 lea     rax, [rdi-18h]
.text:0000000000401B91                 cmp     rax, rdx
.text:0000000000401B94                 jnz     loc_401E68
.text:0000000000401B9A
.text:0000000000401B9A loc_401B9A:                             ; CODE XREF: __$U0+30A↓j
.text:0000000000401B9A                                         ; __$U0+31C↓j
.text:0000000000401B9A                 mov     rdi, cs:qword_605A60
.text:0000000000401BA1                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401BA6                 lea     rax, [rdi-18h]
.text:0000000000401BAA                 cmp     rax, rdx
.text:0000000000401BAD                 jnz     loc_401E2F
.text:0000000000401BB3
.text:0000000000401BB3 loc_401BB3:                             ; CODE XREF: __$U0+2D1↓j
.text:0000000000401BB3                                         ; __$U0+2E3↓j
.text:0000000000401BB3                 mov     rdi, cs:qword_605A58
.text:0000000000401BBA                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401BBF                 lea     rax, [rdi-18h]
.text:0000000000401BC3                 cmp     rax, rdx
.text:0000000000401BC6                 jnz     loc_401DF6
.text:0000000000401BCC
.text:0000000000401BCC loc_401BCC:                             ; CODE XREF: __$U0+298↓j
.text:0000000000401BCC                                         ; __$U0+2AA↓j
.text:0000000000401BCC                 mov     rdi, cs:qword_605A50
.text:0000000000401BD3                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401BD8                 lea     rax, [rdi-18h]
.text:0000000000401BDC                 cmp     rax, rdx
.text:0000000000401BDF                 jnz     loc_401DBD
.text:0000000000401BE5
.text:0000000000401BE5 loc_401BE5:                             ; CODE XREF: __$U0+25F↓j
.text:0000000000401BE5                                         ; __$U0+271↓j
.text:0000000000401BE5                 mov     rdi, cs:qword_605A48
.text:0000000000401BEC                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401BF1                 lea     rax, [rdi-18h]
.text:0000000000401BF5                 cmp     rax, rdx
.text:0000000000401BF8                 jnz     loc_401D84
.text:0000000000401BFE
.text:0000000000401BFE loc_401BFE:                             ; CODE XREF: __$U0+226↓j
.text:0000000000401BFE                                         ; __$U0+238↓j
.text:0000000000401BFE                 mov     rdi, cs:qword_605A40
.text:0000000000401C05                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401C0A                 lea     rax, [rdi-18h]
.text:0000000000401C0E                 cmp     rax, rdx
.text:0000000000401C11                 jnz     loc_401D4B
.text:0000000000401C17
.text:0000000000401C17 loc_401C17:                             ; CODE XREF: __$U0+1ED↓j
.text:0000000000401C17                                         ; __$U0+1FF↓j
.text:0000000000401C17                 mov     rdi, cs:qword_605A38
.text:0000000000401C1E                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401C23                 lea     rax, [rdi-18h]
.text:0000000000401C27                 cmp     rax, rdx
.text:0000000000401C2A                 jnz     loc_401D12
.text:0000000000401C30
.text:0000000000401C30 loc_401C30:                             ; CODE XREF: __$U0+1B4↓j
.text:0000000000401C30                                         ; __$U0+1C6↓j
.text:0000000000401C30                 mov     rdi, cs:qword_605A30
.text:0000000000401C37                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401C3C                 lea     rax, [rdi-18h]
.text:0000000000401C40                 cmp     rax, rdx
.text:0000000000401C43                 jnz     loc_401CD9
.text:0000000000401C49
.text:0000000000401C49 loc_401C49:                             ; CODE XREF: __$U0+17B↓j
.text:0000000000401C49                                         ; __$U0+18D↓j
.text:0000000000401C49                 mov     rdi, cs:qword_605A28
.text:0000000000401C50                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401C55                 lea     rax, [rdi-18h]
.text:0000000000401C59                 cmp     rax, rdx
.text:0000000000401C5C                 jnz     short loc_401CA7
.text:0000000000401C5E
.text:0000000000401C5E loc_401C5E:                             ; CODE XREF: __$U0+149↓j
.text:0000000000401C5E                                         ; __$U0+157↓j
.text:0000000000401C5E                 mov     rdi, cs:cons
.text:0000000000401C65                 mov     edx, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401C6A                 lea     rax, [rdi-18h]
.text:0000000000401C6E                 cmp     rax, rdx
.text:0000000000401C71                 jnz     short loc_401C75
.text:0000000000401C73
.text:0000000000401C73 loc_401C73:                             ; CODE XREF: __$U0+117↓j
.text:0000000000401C73                 pop     rcx
.text:0000000000401C74                 retn
.text:0000000000401C75 ; ---------------------------------------------------------------------------
.text:0000000000401C75
.text:0000000000401C75 loc_401C75:                             ; CODE XREF: __$U0+F1↑j
.text:0000000000401C75                 mov     edx, 0
.text:0000000000401C7A                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401C7E                 test    rdx, rdx
.text:0000000000401C81                 jz      short loc_401C8E
.text:0000000000401C83                 mov     ecx, 0FFFFFFFFh
.text:0000000000401C88                 lock xadd [rdi], ecx
.text:0000000000401C8C                 jmp     short loc_401C95
.text:0000000000401C8E ; ---------------------------------------------------------------------------
.text:0000000000401C8E
.text:0000000000401C8E loc_401C8E:                             ; CODE XREF: __$U0+101↑j
.text:0000000000401C8E                 mov     ecx, [rdi]
.text:0000000000401C90                 lea     edx, [rcx-1]
.text:0000000000401C93                 mov     [rdi], edx
.text:0000000000401C95
.text:0000000000401C95 loc_401C95:                             ; CODE XREF: __$U0+10C↑j
.text:0000000000401C95                 test    ecx, ecx
.text:0000000000401C97                 jg      short loc_401C73
.text:0000000000401C99                 mov     rdi, rax
.text:0000000000401C9C                 lea     rsi, [rsp+8+var_8]
.text:0000000000401CA0                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401CA5                 pop     rcx
.text:0000000000401CA6                 retn
.text:0000000000401CA7 ; ---------------------------------------------------------------------------
.text:0000000000401CA7
.text:0000000000401CA7 loc_401CA7:                             ; CODE XREF: __$U0+DC↑j
.text:0000000000401CA7                 mov     edx, 0
.text:0000000000401CAC                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401CB0                 test    rdx, rdx
.text:0000000000401CB3                 jz      short loc_401CC0
.text:0000000000401CB5                 mov     ecx, 0FFFFFFFFh
.text:0000000000401CBA                 lock xadd [rdi], ecx
.text:0000000000401CBE                 jmp     short loc_401CC7
.text:0000000000401CC0 ; ---------------------------------------------------------------------------
.text:0000000000401CC0
.text:0000000000401CC0 loc_401CC0:                             ; CODE XREF: __$U0+133↑j
.text:0000000000401CC0                 mov     ecx, [rdi]
.text:0000000000401CC2                 lea     edx, [rcx-1]
.text:0000000000401CC5                 mov     [rdi], edx
.text:0000000000401CC7
.text:0000000000401CC7 loc_401CC7:                             ; CODE XREF: __$U0+13E↑j
.text:0000000000401CC7                 test    ecx, ecx
.text:0000000000401CC9                 jg      short loc_401C5E
.text:0000000000401CCB                 mov     rdi, rax
.text:0000000000401CCE                 lea     rsi, [rsp+8+var_8]
.text:0000000000401CD2                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401CD7                 jmp     short loc_401C5E
.text:0000000000401CD9 ; ---------------------------------------------------------------------------
.text:0000000000401CD9
.text:0000000000401CD9 loc_401CD9:                             ; CODE XREF: __$U0+C3↑j
.text:0000000000401CD9                 mov     edx, 0
.text:0000000000401CDE                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401CE2                 test    rdx, rdx
.text:0000000000401CE5                 jz      short loc_401CF2
.text:0000000000401CE7                 mov     ecx, 0FFFFFFFFh
.text:0000000000401CEC                 lock xadd [rdi], ecx
.text:0000000000401CF0                 jmp     short loc_401CF9
.text:0000000000401CF2 ; ---------------------------------------------------------------------------
.text:0000000000401CF2
.text:0000000000401CF2 loc_401CF2:                             ; CODE XREF: __$U0+165↑j
.text:0000000000401CF2                 mov     ecx, [rdi]
.text:0000000000401CF4                 lea     edx, [rcx-1]
.text:0000000000401CF7                 mov     [rdi], edx
.text:0000000000401CF9
.text:0000000000401CF9 loc_401CF9:                             ; CODE XREF: __$U0+170↑j
.text:0000000000401CF9                 test    ecx, ecx
.text:0000000000401CFB                 jg      loc_401C49
.text:0000000000401D01                 mov     rdi, rax
.text:0000000000401D04                 lea     rsi, [rsp+8+var_8]
.text:0000000000401D08                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401D0D                 jmp     loc_401C49
.text:0000000000401D12 ; ---------------------------------------------------------------------------
.text:0000000000401D12
.text:0000000000401D12 loc_401D12:                             ; CODE XREF: __$U0+AA↑j
.text:0000000000401D12                 mov     edx, 0
.text:0000000000401D17                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401D1B                 test    rdx, rdx
.text:0000000000401D1E                 jz      short loc_401D2B
.text:0000000000401D20                 mov     ecx, 0FFFFFFFFh
.text:0000000000401D25                 lock xadd [rdi], ecx
.text:0000000000401D29                 jmp     short loc_401D32
.text:0000000000401D2B ; ---------------------------------------------------------------------------
.text:0000000000401D2B
.text:0000000000401D2B loc_401D2B:                             ; CODE XREF: __$U0+19E↑j
.text:0000000000401D2B                 mov     ecx, [rdi]
.text:0000000000401D2D                 lea     edx, [rcx-1]
.text:0000000000401D30                 mov     [rdi], edx
.text:0000000000401D32
.text:0000000000401D32 loc_401D32:                             ; CODE XREF: __$U0+1A9↑j
.text:0000000000401D32                 test    ecx, ecx
.text:0000000000401D34                 jg      loc_401C30
.text:0000000000401D3A                 mov     rdi, rax
.text:0000000000401D3D                 lea     rsi, [rsp+8+var_8]
.text:0000000000401D41                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401D46                 jmp     loc_401C30
.text:0000000000401D4B ; ---------------------------------------------------------------------------
.text:0000000000401D4B
.text:0000000000401D4B loc_401D4B:                             ; CODE XREF: __$U0+91↑j
.text:0000000000401D4B                 mov     edx, 0
.text:0000000000401D50                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401D54                 test    rdx, rdx
.text:0000000000401D57                 jz      short loc_401D64
.text:0000000000401D59                 mov     ecx, 0FFFFFFFFh
.text:0000000000401D5E                 lock xadd [rdi], ecx
.text:0000000000401D62                 jmp     short loc_401D6B
.text:0000000000401D64 ; ---------------------------------------------------------------------------
.text:0000000000401D64
.text:0000000000401D64 loc_401D64:                             ; CODE XREF: __$U0+1D7↑j
.text:0000000000401D64                 mov     ecx, [rdi]
.text:0000000000401D66                 lea     edx, [rcx-1]
.text:0000000000401D69                 mov     [rdi], edx
.text:0000000000401D6B
.text:0000000000401D6B loc_401D6B:                             ; CODE XREF: __$U0+1E2↑j
.text:0000000000401D6B                 test    ecx, ecx
.text:0000000000401D6D                 jg      loc_401C17
.text:0000000000401D73                 mov     rdi, rax
.text:0000000000401D76                 lea     rsi, [rsp+8+var_8]
.text:0000000000401D7A                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401D7F                 jmp     loc_401C17
.text:0000000000401D84 ; ---------------------------------------------------------------------------
.text:0000000000401D84
.text:0000000000401D84 loc_401D84:                             ; CODE XREF: __$U0+78↑j
.text:0000000000401D84                 mov     edx, 0
.text:0000000000401D89                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401D8D                 test    rdx, rdx
.text:0000000000401D90                 jz      short loc_401D9D
.text:0000000000401D92                 mov     ecx, 0FFFFFFFFh
.text:0000000000401D97                 lock xadd [rdi], ecx
.text:0000000000401D9B                 jmp     short loc_401DA4
.text:0000000000401D9D ; ---------------------------------------------------------------------------
.text:0000000000401D9D
.text:0000000000401D9D loc_401D9D:                             ; CODE XREF: __$U0+210↑j
.text:0000000000401D9D                 mov     ecx, [rdi]
.text:0000000000401D9F                 lea     edx, [rcx-1]
.text:0000000000401DA2                 mov     [rdi], edx
.text:0000000000401DA4
.text:0000000000401DA4 loc_401DA4:                             ; CODE XREF: __$U0+21B↑j
.text:0000000000401DA4                 test    ecx, ecx
.text:0000000000401DA6                 jg      loc_401BFE
.text:0000000000401DAC                 mov     rdi, rax
.text:0000000000401DAF                 lea     rsi, [rsp+8+var_8]
.text:0000000000401DB3                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401DB8                 jmp     loc_401BFE
.text:0000000000401DBD ; ---------------------------------------------------------------------------
.text:0000000000401DBD
.text:0000000000401DBD loc_401DBD:                             ; CODE XREF: __$U0+5F↑j
.text:0000000000401DBD                 mov     edx, 0
.text:0000000000401DC2                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401DC6                 test    rdx, rdx
.text:0000000000401DC9                 jz      short loc_401DD6
.text:0000000000401DCB                 mov     ecx, 0FFFFFFFFh
.text:0000000000401DD0                 lock xadd [rdi], ecx
.text:0000000000401DD4                 jmp     short loc_401DDD
.text:0000000000401DD6 ; ---------------------------------------------------------------------------
.text:0000000000401DD6
.text:0000000000401DD6 loc_401DD6:                             ; CODE XREF: __$U0+249↑j
.text:0000000000401DD6                 mov     ecx, [rdi]
.text:0000000000401DD8                 lea     edx, [rcx-1]
.text:0000000000401DDB                 mov     [rdi], edx
.text:0000000000401DDD
.text:0000000000401DDD loc_401DDD:                             ; CODE XREF: __$U0+254↑j
.text:0000000000401DDD                 test    ecx, ecx
.text:0000000000401DDF                 jg      loc_401BE5
.text:0000000000401DE5                 mov     rdi, rax
.text:0000000000401DE8                 lea     rsi, [rsp+8+var_8]
.text:0000000000401DEC                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401DF1                 jmp     loc_401BE5
.text:0000000000401DF6 ; ---------------------------------------------------------------------------
.text:0000000000401DF6
.text:0000000000401DF6 loc_401DF6:                             ; CODE XREF: __$U0+46↑j
.text:0000000000401DF6                 mov     edx, 0
.text:0000000000401DFB                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401DFF                 test    rdx, rdx
.text:0000000000401E02                 jz      short loc_401E0F
.text:0000000000401E04                 mov     ecx, 0FFFFFFFFh
.text:0000000000401E09                 lock xadd [rdi], ecx
.text:0000000000401E0D                 jmp     short loc_401E16
.text:0000000000401E0F ; ---------------------------------------------------------------------------
.text:0000000000401E0F
.text:0000000000401E0F loc_401E0F:                             ; CODE XREF: __$U0+282↑j
.text:0000000000401E0F                 mov     ecx, [rdi]
.text:0000000000401E11                 lea     edx, [rcx-1]
.text:0000000000401E14                 mov     [rdi], edx
.text:0000000000401E16
.text:0000000000401E16 loc_401E16:                             ; CODE XREF: __$U0+28D↑j
.text:0000000000401E16                 test    ecx, ecx
.text:0000000000401E18                 jg      loc_401BCC
.text:0000000000401E1E                 mov     rdi, rax
.text:0000000000401E21                 lea     rsi, [rsp+8+var_8]
.text:0000000000401E25                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401E2A                 jmp     loc_401BCC
.text:0000000000401E2F ; ---------------------------------------------------------------------------
.text:0000000000401E2F
.text:0000000000401E2F loc_401E2F:                             ; CODE XREF: __$U0+2D↑j
.text:0000000000401E2F                 mov     edx, 0
.text:0000000000401E34                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401E38                 test    rdx, rdx
.text:0000000000401E3B                 jz      short loc_401E48
.text:0000000000401E3D                 mov     ecx, 0FFFFFFFFh
.text:0000000000401E42                 lock xadd [rdi], ecx
.text:0000000000401E46                 jmp     short loc_401E4F
.text:0000000000401E48 ; ---------------------------------------------------------------------------
.text:0000000000401E48
.text:0000000000401E48 loc_401E48:                             ; CODE XREF: __$U0+2BB↑j
.text:0000000000401E48                 mov     ecx, [rdi]
.text:0000000000401E4A                 lea     edx, [rcx-1]
.text:0000000000401E4D                 mov     [rdi], edx
.text:0000000000401E4F
.text:0000000000401E4F loc_401E4F:                             ; CODE XREF: __$U0+2C6↑j
.text:0000000000401E4F                 test    ecx, ecx
.text:0000000000401E51                 jg      loc_401BB3
.text:0000000000401E57                 mov     rdi, rax
.text:0000000000401E5A                 lea     rsi, [rsp+8+var_8]
.text:0000000000401E5E                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401E63                 jmp     loc_401BB3
.text:0000000000401E68 ; ---------------------------------------------------------------------------
.text:0000000000401E68
.text:0000000000401E68 loc_401E68:                             ; CODE XREF: __$U0+14↑j
.text:0000000000401E68                 mov     edx, 0
.text:0000000000401E6D                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401E71                 test    rdx, rdx
.text:0000000000401E74                 jz      short loc_401E81
.text:0000000000401E76                 mov     ecx, 0FFFFFFFFh
.text:0000000000401E7B                 lock xadd [rdi], ecx
.text:0000000000401E7F                 jmp     short loc_401E88
.text:0000000000401E81 ; ---------------------------------------------------------------------------
.text:0000000000401E81
.text:0000000000401E81 loc_401E81:                             ; CODE XREF: __$U0+2F4↑j
.text:0000000000401E81                 mov     ecx, [rdi]
.text:0000000000401E83                 lea     edx, [rcx-1]
.text:0000000000401E86                 mov     [rdi], edx
.text:0000000000401E88
.text:0000000000401E88 loc_401E88:                             ; CODE XREF: __$U0+2FF↑j
.text:0000000000401E88                 test    ecx, ecx
.text:0000000000401E8A                 jg      loc_401B9A
.text:0000000000401E90                 mov     rdi, rax
.text:0000000000401E93                 lea     rsi, [rsp+8+var_8]
.text:0000000000401E97                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401E9C                 jmp     loc_401B9A
.text:0000000000401E9C __$U0           endp
.text:0000000000401E9C
.text:0000000000401E9C ; ---------------------------------------------------------------------------
.text:0000000000401EA1                 align 10h
.text:0000000000401EA1 ; } // starts at 401B80
.text:0000000000401EB0
.text:0000000000401EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000401EB0
.text:0000000000401EB0
.text:0000000000401EB0 ; std::_Rb_tree<char, std::pair<char const, char>, std::_Select1st<std::pair<char const, char>>, std::less<char>, std::allocator<std::pair<char const, char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const, char>>, std::pair<char const, char> const&)
.text:0000000000401EB0                 public _ZNSt8_Rb_treeIcSt4pairIKccESt10_Select1stIS2_ESt4lessIcESaIS2_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS2_ERKS2_ ; weak
.text:0000000000401EB0 _ZNSt8_Rb_treeIcSt4pairIKccESt10_Select1stIS2_ESt4lessIcESaIS2_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS2_ERKS2_ proc near
.text:0000000000401EB0                                         ; CODE XREF: main+115↑p
.text:0000000000401EB0                                         ; main+26A↑p
.text:0000000000401EB0
.text:0000000000401EB0 var_58          = qword ptr -58h
.text:0000000000401EB0 var_50          = qword ptr -50h
.text:0000000000401EB0 var_48          = qword ptr -48h
.text:0000000000401EB0 var_40          = qword ptr -40h
.text:0000000000401EB0
.text:0000000000401EB0 ; __unwind { // ___gxx_personality_v0
.text:0000000000401EB0                 push    r12
.text:0000000000401EB2                 push    r13
.text:0000000000401EB4                 push    r14
.text:0000000000401EB6                 push    r15
.text:0000000000401EB8                 push    rbx
.text:0000000000401EB9                 push    rbp
.text:0000000000401EBA                 sub     rsp, 28h
.text:0000000000401EBE                 mov     rbp, rdi
.text:0000000000401EC1                 mov     r13, rsi
.text:0000000000401EC4                 mov     rbx, rdx
.text:0000000000401EC7                 mov     [rsp+58h+var_58], r13
.text:0000000000401ECB                 lea     r12, [rbp+8]
.text:0000000000401ECF                 cmp     r13, r12
.text:0000000000401ED2                 jz      loc_402151
.text:0000000000401ED8                 movsx   r15d, byte ptr [rbx]
.text:0000000000401EDC                 movsx   edx, byte ptr [r13+20h]
.text:0000000000401EE1                 cmp     r15d, edx
.text:0000000000401EE4                 jge     loc_401F73
.text:0000000000401EEA                 cmp     r13, [rbp+18h]
.text:0000000000401EEE                 jz      loc_402050
.text:0000000000401EF4                 mov     rdi, r13
.text:0000000000401EF7                 call    __ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base ; std::_Rb_tree_decrement(std::_Rb_tree_node_base const*)
.text:0000000000401EFC                 mov     r14, rax
.text:0000000000401EFF                 movsx   eax, byte ptr [r14+20h]
.text:0000000000401F04                 cmp     eax, r15d
.text:0000000000401F07                 jge     short loc_401F59
.text:0000000000401F09                 cmp     qword ptr [r14+18h], 0
.text:0000000000401F0E                 jz      loc_401FFA
.text:0000000000401F14                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000401F19                 call    __Znwm          ; operator new(ulong)
.text:0000000000401F1E                 mov     r13, rax
.text:0000000000401F21                 cmp     r13, 0FFFFFFFFFFFFFFE0h
.text:0000000000401F25                 jz      short loc_401F2F
.text:0000000000401F27                 movzx   edx, word ptr [rbx]
.text:0000000000401F2A                 mov     [r13+20h], dx
.text:0000000000401F2F
.text:0000000000401F2F loc_401F2F:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+75↑j
.text:0000000000401F2F                 mov     edi, 1
.text:0000000000401F34                 mov     rsi, r13
.text:0000000000401F37                 mov     rcx, r12
.text:0000000000401F3A                 mov     rdx, [rsp+58h+var_58]
.text:0000000000401F3E                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000401F43                 inc     qword ptr [rbp+28h]
.text:0000000000401F47                 mov     rax, r13
.text:0000000000401F4A                 add     rsp, 28h
.text:0000000000401F4E                 pop     rbp
.text:0000000000401F4F                 pop     rbx
.text:0000000000401F50                 pop     r15
.text:0000000000401F52                 pop     r14
.text:0000000000401F54                 pop     r13
.text:0000000000401F56                 pop     r12
.text:0000000000401F58                 retn
.text:0000000000401F59 ; ---------------------------------------------------------------------------
.text:0000000000401F59
.text:0000000000401F59 loc_401F59:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+57↑j
.text:0000000000401F59                                         ; std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+E7↓j
.text:0000000000401F59                 mov     rdi, rbp
.text:0000000000401F5C                 mov     rsi, rbx
.text:0000000000401F5F                 call    _ZNSt8_Rb_treeIcSt4pairIKccESt10_Select1stIS2_ESt4lessIcESaIS2_EE16_M_insert_uniqueERKS2_ ; std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique(std::pair<char const,char> const&)
.text:0000000000401F64                 add     rsp, 28h
.text:0000000000401F68                 pop     rbp
.text:0000000000401F69                 pop     rbx
.text:0000000000401F6A                 pop     r15
.text:0000000000401F6C                 pop     r14
.text:0000000000401F6E                 pop     r13
.text:0000000000401F70                 pop     r12
.text:0000000000401F72                 retn
.text:0000000000401F73 ; ---------------------------------------------------------------------------
.text:0000000000401F73
.text:0000000000401F73 loc_401F73:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+34↑j
.text:0000000000401F73                 cmp     edx, r15d
.text:0000000000401F76                 jge     short loc_401FE8
.text:0000000000401F78                 mov     r14, [rbp+20h]
.text:0000000000401F7C                 cmp     r13, r14
.text:0000000000401F7F                 jz      loc_4020F6
.text:0000000000401F85                 mov     rdi, r13
.text:0000000000401F88                 call    __ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base ; std::_Rb_tree_increment(std::_Rb_tree_node_base const*)
.text:0000000000401F8D                 mov     r14, rax
.text:0000000000401F90                 mov     r8b, [rbx]
.text:0000000000401F93                 cmp     r8b, [r14+20h]
.text:0000000000401F97                 jge     short loc_401F59
.text:0000000000401F99                 cmp     qword ptr [r13+18h], 0
.text:0000000000401F9E                 jz      loc_4020B4
.text:0000000000401FA4                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000401FA9                 call    __Znwm          ; operator new(ulong)
.text:0000000000401FAE                 mov     r13, rax
.text:0000000000401FB1                 cmp     r13, 0FFFFFFFFFFFFFFE0h
.text:0000000000401FB5                 jz      short loc_401FBF
.text:0000000000401FB7                 movzx   ebx, word ptr [rbx]
.text:0000000000401FBA                 mov     [r13+20h], bx
.text:0000000000401FBF
.text:0000000000401FBF loc_401FBF:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+105↑j
.text:0000000000401FBF                 mov     edi, 1
.text:0000000000401FC4                 mov     rsi, r13
.text:0000000000401FC7                 mov     rdx, r14
.text:0000000000401FCA                 mov     rcx, r12
.text:0000000000401FCD                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000401FD2                 inc     qword ptr [rbp+28h]
.text:0000000000401FD6                 mov     rax, r13
.text:0000000000401FD9                 add     rsp, 28h
.text:0000000000401FDD                 pop     rbp
.text:0000000000401FDE                 pop     rbx
.text:0000000000401FDF                 pop     r15
.text:0000000000401FE1                 pop     r14
.text:0000000000401FE3                 pop     r13
.text:0000000000401FE5                 pop     r12
.text:0000000000401FE7                 retn
.text:0000000000401FE8 ; ---------------------------------------------------------------------------
.text:0000000000401FE8
.text:0000000000401FE8 loc_401FE8:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+C6↑j
.text:0000000000401FE8                 mov     rax, r13
.text:0000000000401FEB                 add     rsp, 28h
.text:0000000000401FEF                 pop     rbp
.text:0000000000401FF0                 pop     rbx
.text:0000000000401FF1                 pop     r15
.text:0000000000401FF3                 pop     r14
.text:0000000000401FF5                 pop     r13
.text:0000000000401FF7                 pop     r12
.text:0000000000401FF9                 retn
.text:0000000000401FFA ; ---------------------------------------------------------------------------
.text:0000000000401FFA
.text:0000000000401FFA loc_401FFA:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+5E↑j
.text:0000000000401FFA                 cmp     r14, r12
.text:0000000000401FFD                 jnz     short loc_402007
.text:0000000000401FFF                 mov     r15d, 1
.text:0000000000402005                 jmp     short loc_40200E
.text:0000000000402007 ; ---------------------------------------------------------------------------
.text:0000000000402007
.text:0000000000402007 loc_402007:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+14D↑j
.text:0000000000402007                 sub     r15d, eax
.text:000000000040200A                 shr     r15d, 1Fh
.text:000000000040200E
.text:000000000040200E loc_40200E:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+155↑j
.text:000000000040200E                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000402013                 call    __Znwm          ; operator new(ulong)
.text:0000000000402018                 mov     r13, rax
.text:000000000040201B                 cmp     r13, 0FFFFFFFFFFFFFFE0h
.text:000000000040201F                 jz      short loc_402029
.text:0000000000402021                 movzx   ebx, word ptr [rbx]
.text:0000000000402024                 mov     [r13+20h], bx
.text:0000000000402029
.text:0000000000402029 loc_402029:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+16F↑j
.text:0000000000402029                 mov     edi, r15d
.text:000000000040202C                 mov     rsi, r13
.text:000000000040202F                 mov     rdx, r14
.text:0000000000402032                 mov     rcx, r12
.text:0000000000402035                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:000000000040203A                 inc     qword ptr [rbp+28h]
.text:000000000040203E                 mov     rax, r13
.text:0000000000402041                 add     rsp, 28h
.text:0000000000402045                 pop     rbp
.text:0000000000402046                 pop     rbx
.text:0000000000402047                 pop     r15
.text:0000000000402049                 pop     r14
.text:000000000040204B                 pop     r13
.text:000000000040204D                 pop     r12
.text:000000000040204F                 retn
.text:0000000000402050 ; ---------------------------------------------------------------------------
.text:0000000000402050
.text:0000000000402050 loc_402050:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+3E↑j
.text:0000000000402050                 mov     r14, [rbp+18h]
.text:0000000000402054                 test    r14, r14
.text:0000000000402057                 jz      short loc_4020A1
.text:0000000000402059
.text:0000000000402059 loc_402059:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+1F4↓j
.text:0000000000402059                 mov     r15d, 1
.text:000000000040205F
.text:000000000040205F loc_40205F:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+202↓j
.text:000000000040205F                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000402064                 call    __Znwm          ; operator new(ulong)
.text:0000000000402069                 mov     r13, rax
.text:000000000040206C                 cmp     r13, 0FFFFFFFFFFFFFFE0h
.text:0000000000402070                 jz      short loc_40207A
.text:0000000000402072                 movzx   ebx, word ptr [rbx]
.text:0000000000402075                 mov     [r13+20h], bx
.text:000000000040207A
.text:000000000040207A loc_40207A:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+1C0↑j
.text:000000000040207A                 mov     edi, r15d
.text:000000000040207D                 mov     rsi, r13
.text:0000000000402080                 mov     rdx, r14
.text:0000000000402083                 mov     rcx, r12
.text:0000000000402086                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:000000000040208B                 inc     qword ptr [rbp+28h]
.text:000000000040208F                 mov     rax, r13
.text:0000000000402092                 add     rsp, 28h
.text:0000000000402096                 pop     rbp
.text:0000000000402097                 pop     rbx
.text:0000000000402098                 pop     r15
.text:000000000040209A                 pop     r14
.text:000000000040209C                 pop     r13
.text:000000000040209E                 pop     r12
.text:00000000004020A0                 retn
.text:00000000004020A1 ; ---------------------------------------------------------------------------
.text:00000000004020A1
.text:00000000004020A1 loc_4020A1:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+1A7↑j
.text:00000000004020A1                 cmp     r14, r12
.text:00000000004020A4                 jz      short loc_402059
.text:00000000004020A6                 movsx   eax, byte ptr [r14+20h]
.text:00000000004020AB                 sub     r15d, eax
.text:00000000004020AE                 shr     r15d, 1Fh
.text:00000000004020B2                 jmp     short loc_40205F
.text:00000000004020B4 ; ---------------------------------------------------------------------------
.text:00000000004020B4
.text:00000000004020B4 loc_4020B4:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+EE↑j
.text:00000000004020B4                 mov     edi, 28h ; '('  ; unsigned __int64
.text:00000000004020B9                 call    __Znwm          ; operator new(ulong)
.text:00000000004020BE                 mov     r13, rax
.text:00000000004020C1                 cmp     r13, 0FFFFFFFFFFFFFFE0h
.text:00000000004020C5                 jz      short loc_4020CF
.text:00000000004020C7                 movzx   edx, word ptr [rbx]
.text:00000000004020CA                 mov     [r13+20h], dx
.text:00000000004020CF
.text:00000000004020CF loc_4020CF:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+215↑j
.text:00000000004020CF                 xor     edi, edi
.text:00000000004020D1                 mov     rsi, r13
.text:00000000004020D4                 mov     rcx, r12
.text:00000000004020D7                 mov     rdx, [rsp+58h+var_58]
.text:00000000004020DB                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:00000000004020E0                 inc     qword ptr [rbp+28h]
.text:00000000004020E4                 mov     rax, r13
.text:00000000004020E7                 add     rsp, 28h
.text:00000000004020EB                 pop     rbp
.text:00000000004020EC                 pop     rbx
.text:00000000004020ED                 pop     r15
.text:00000000004020EF                 pop     r14
.text:00000000004020F1                 pop     r13
.text:00000000004020F3                 pop     r12
.text:00000000004020F5                 retn
.text:00000000004020F6 ; ---------------------------------------------------------------------------
.text:00000000004020F6
.text:00000000004020F6 loc_4020F6:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+CF↑j
.text:00000000004020F6                 cmp     r14, r12
.text:00000000004020F9                 jnz     short loc_402103
.text:00000000004020FB                 mov     r15d, 1
.text:0000000000402101                 jmp     short loc_40210F
.text:0000000000402103 ; ---------------------------------------------------------------------------
.text:0000000000402103
.text:0000000000402103 loc_402103:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+249↑j
.text:0000000000402103                 movsx   eax, byte ptr [r14+20h]
.text:0000000000402108                 sub     r15d, eax
.text:000000000040210B                 shr     r15d, 1Fh
.text:000000000040210F
.text:000000000040210F loc_40210F:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+251↑j
.text:000000000040210F                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000402114                 call    __Znwm          ; operator new(ulong)
.text:0000000000402119                 mov     r13, rax
.text:000000000040211C                 cmp     r13, 0FFFFFFFFFFFFFFE0h
.text:0000000000402120                 jz      short loc_40212A
.text:0000000000402122                 movzx   ebx, word ptr [rbx]
.text:0000000000402125                 mov     [r13+20h], bx
.text:000000000040212A
.text:000000000040212A loc_40212A:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+270↑j
.text:000000000040212A                 mov     edi, r15d
.text:000000000040212D                 mov     rsi, r13
.text:0000000000402130                 mov     rdx, r14
.text:0000000000402133                 mov     rcx, r12
.text:0000000000402136                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:000000000040213B                 inc     qword ptr [rbp+28h]
.text:000000000040213F                 mov     rax, r13
.text:0000000000402142                 add     rsp, 28h
.text:0000000000402146                 pop     rbp
.text:0000000000402147                 pop     rbx
.text:0000000000402148                 pop     r15
.text:000000000040214A                 pop     r14
.text:000000000040214C                 pop     r13
.text:000000000040214E                 pop     r12
.text:0000000000402150                 retn
.text:0000000000402151 ; ---------------------------------------------------------------------------
.text:0000000000402151
.text:0000000000402151 loc_402151:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+22↑j
.text:0000000000402151                 cmp     qword ptr [rbp+28h], 0
.text:0000000000402156                 jbe     short loc_4021C0
.text:0000000000402158                 mov     r14, [rbp+20h]
.text:000000000040215C                 movsx   r15d, byte ptr [rbx]
.text:0000000000402160                 movsx   eax, byte ptr [r14+20h]
.text:0000000000402165                 cmp     eax, r15d
.text:0000000000402168                 jge     short loc_4021C0
.text:000000000040216A                 cmp     r14, r12
.text:000000000040216D                 jnz     short loc_402177
.text:000000000040216F                 mov     r15d, 1
.text:0000000000402175                 jmp     short loc_40217E
.text:0000000000402177 ; ---------------------------------------------------------------------------
.text:0000000000402177
.text:0000000000402177 loc_402177:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+2BD↑j
.text:0000000000402177                 sub     r15d, eax
.text:000000000040217A                 shr     r15d, 1Fh
.text:000000000040217E
.text:000000000040217E loc_40217E:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+2C5↑j
.text:000000000040217E                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000402183                 call    __Znwm          ; operator new(ulong)
.text:0000000000402188                 mov     r13, rax
.text:000000000040218B                 cmp     r13, 0FFFFFFFFFFFFFFE0h
.text:000000000040218F                 jz      short loc_402199
.text:0000000000402191                 movzx   ebx, word ptr [rbx]
.text:0000000000402194                 mov     [r13+20h], bx
.text:0000000000402199
.text:0000000000402199 loc_402199:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+2DF↑j
.text:0000000000402199                 mov     edi, r15d
.text:000000000040219C                 mov     rsi, r13
.text:000000000040219F                 mov     rdx, r14
.text:00000000004021A2                 mov     rcx, r12
.text:00000000004021A5                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:00000000004021AA                 inc     qword ptr [rbp+28h]
.text:00000000004021AE                 mov     rax, r13
.text:00000000004021B1                 add     rsp, 28h
.text:00000000004021B5                 pop     rbp
.text:00000000004021B6                 pop     rbx
.text:00000000004021B7                 pop     r15
.text:00000000004021B9                 pop     r14
.text:00000000004021BB                 pop     r13
.text:00000000004021BD                 pop     r12
.text:00000000004021BF                 retn
.text:00000000004021C0 ; ---------------------------------------------------------------------------
.text:00000000004021C0
.text:00000000004021C0 loc_4021C0:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+2A6↑j
.text:00000000004021C0                                         ; std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+2B8↑j
.text:00000000004021C0                 mov     r9, [rbp+10h]
.text:00000000004021C4                 mov     r13, r12
.text:00000000004021C7                 mov     eax, 1
.text:00000000004021CC                 test    r9, r9
.text:00000000004021CF                 jz      short loc_4021F8
.text:00000000004021D1                 movsx   r8d, byte ptr [rbx]
.text:00000000004021D5
.text:00000000004021D5 loc_4021D5:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+346↓j
.text:00000000004021D5                 movsx   eax, byte ptr [r9+20h]
.text:00000000004021DA                 mov     r13, r9
.text:00000000004021DD                 neg     eax
.text:00000000004021DF                 add     eax, r8d
.text:00000000004021E2                 shr     eax, 1Fh
.text:00000000004021E5                 test    eax, eax
.text:00000000004021E7                 jz      short loc_4021EF
.text:00000000004021E9                 mov     r9, [r9+10h]
.text:00000000004021ED                 jmp     short loc_4021F3
.text:00000000004021EF ; ---------------------------------------------------------------------------
.text:00000000004021EF
.text:00000000004021EF loc_4021EF:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+337↑j
.text:00000000004021EF                 mov     r9, [r9+18h]
.text:00000000004021F3
.text:00000000004021F3 loc_4021F3:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+33D↑j
.text:00000000004021F3                 test    r9, r9
.text:00000000004021F6                 jnz     short loc_4021D5
.text:00000000004021F8
.text:00000000004021F8 loc_4021F8:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+31F↑j
.text:00000000004021F8                 mov     r8, r13
.text:00000000004021FB                 test    eax, eax
.text:00000000004021FD                 jz      short loc_402214
.text:00000000004021FF                 cmp     r13, [rbp+18h]
.text:0000000000402203                 jz      loc_40229B
.text:0000000000402209                 mov     rdi, r13
.text:000000000040220C                 call    __ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base ; std::_Rb_tree_decrement(std::_Rb_tree_node_base *)
.text:0000000000402211                 mov     r8, rax
.text:0000000000402214
.text:0000000000402214 loc_402214:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+34D↑j
.text:0000000000402214                 movsx   r15d, byte ptr [rbx]
.text:0000000000402218                 cmp     r15b, [r8+20h]
.text:000000000040221C                 jle     short loc_402281
.text:000000000040221E                 cmp     r13, r12
.text:0000000000402221                 jnz     short loc_40222B
.text:0000000000402223                 mov     r15d, 1
.text:0000000000402229                 jmp     short loc_402237
.text:000000000040222B ; ---------------------------------------------------------------------------
.text:000000000040222B
.text:000000000040222B loc_40222B:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+371↑j
.text:000000000040222B                 movsx   eax, byte ptr [r13+20h]
.text:0000000000402230                 sub     r15d, eax
.text:0000000000402233                 shr     r15d, 1Fh
.text:0000000000402237
.text:0000000000402237 loc_402237:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+379↑j
.text:0000000000402237                 mov     edi, 28h ; '('  ; unsigned __int64
.text:000000000040223C                 call    __Znwm          ; operator new(ulong)
.text:0000000000402241                 mov     r14, rax
.text:0000000000402244                 cmp     r14, 0FFFFFFFFFFFFFFE0h
.text:0000000000402248                 jz      short loc_402252
.text:000000000040224A                 movzx   eax, word ptr [rbx]
.text:000000000040224D                 mov     [r14+20h], ax
.text:0000000000402252
.text:0000000000402252 loc_402252:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+398↑j
.text:0000000000402252                 mov     edi, r15d
.text:0000000000402255                 mov     rsi, r14
.text:0000000000402258                 mov     rdx, r13
.text:000000000040225B                 mov     rcx, r12
.text:000000000040225E                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000402263                 mov     byte ptr [rsp+58h+var_50], 1
.text:0000000000402268                 mov     rax, [rsp+58h+var_50]
.text:000000000040226D                 inc     qword ptr [rbp+28h]
.text:0000000000402271                 mov     [rsp+58h+var_58], r14
.text:0000000000402275                 mov     [rsp+58h+var_48], r14
.text:000000000040227A                 mov     [rsp+58h+var_40], rax
.text:000000000040227F                 jmp     short loc_402300
.text:0000000000402281 ; ---------------------------------------------------------------------------
.text:0000000000402281
.text:0000000000402281 loc_402281:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+36C↑j
.text:0000000000402281                 mov     byte ptr [rsp+58h+var_50], 0
.text:0000000000402286                 mov     rax, [rsp+58h+var_50]
.text:000000000040228B                 mov     [rsp+58h+var_58], r8
.text:000000000040228F                 mov     [rsp+58h+var_48], r8
.text:0000000000402294                 mov     [rsp+58h+var_40], rax
.text:0000000000402299                 jmp     short loc_402300
.text:000000000040229B ; ---------------------------------------------------------------------------
.text:000000000040229B
.text:000000000040229B loc_40229B:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+353↑j
.text:000000000040229B                 cmp     r13, r12
.text:000000000040229E                 jnz     short loc_4022A8
.text:00000000004022A0                 mov     r15d, 1
.text:00000000004022A6                 jmp     short loc_4022B8
.text:00000000004022A8 ; ---------------------------------------------------------------------------
.text:00000000004022A8
.text:00000000004022A8 loc_4022A8:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+3EE↑j
.text:00000000004022A8                 movsx   r15d, byte ptr [rbx]
.text:00000000004022AC                 movsx   eax, byte ptr [r13+20h]
.text:00000000004022B1                 sub     r15d, eax
.text:00000000004022B4                 shr     r15d, 1Fh
.text:00000000004022B8
.text:00000000004022B8 loc_4022B8:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+3F6↑j
.text:00000000004022B8                 mov     edi, 28h ; '('  ; unsigned __int64
.text:00000000004022BD                 call    __Znwm          ; operator new(ulong)
.text:00000000004022C2                 mov     r14, rax
.text:00000000004022C5                 cmp     r14, 0FFFFFFFFFFFFFFE0h
.text:00000000004022C9                 jz      short loc_4022D3
.text:00000000004022CB                 movzx   eax, word ptr [rbx]
.text:00000000004022CE                 mov     [r14+20h], ax
.text:00000000004022D3
.text:00000000004022D3 loc_4022D3:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+419↑j
.text:00000000004022D3                 mov     edi, r15d
.text:00000000004022D6                 mov     rsi, r14
.text:00000000004022D9                 mov     rdx, r13
.text:00000000004022DC                 mov     rcx, r12
.text:00000000004022DF                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:00000000004022E4                 mov     byte ptr [rsp+58h+var_50], 1
.text:00000000004022E9                 mov     rax, [rsp+58h+var_50]
.text:00000000004022EE                 inc     qword ptr [rbp+28h]
.text:00000000004022F2                 mov     [rsp+58h+var_58], r14
.text:00000000004022F6                 mov     [rsp+58h+var_48], r14
.text:00000000004022FB                 mov     [rsp+58h+var_40], rax
.text:0000000000402300
.text:0000000000402300 loc_402300:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+3CF↑j
.text:0000000000402300                                         ; std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+3E9↑j
.text:0000000000402300                 mov     rax, [rsp+58h+var_48]
.text:0000000000402305                 add     rsp, 28h
.text:0000000000402309                 pop     rbp
.text:000000000040230A                 pop     rbx
.text:000000000040230B                 pop     r15
.text:000000000040230D                 pop     r14
.text:000000000040230F                 pop     r13
.text:0000000000402311                 pop     r12
.text:0000000000402313                 retn
.text:0000000000402313 _ZNSt8_Rb_treeIcSt4pairIKccESt10_Select1stIS2_ESt4lessIcESaIS2_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS2_ERKS2_ endp
.text:0000000000402313
.text:0000000000402313 ; ---------------------------------------------------------------------------
.text:0000000000402314                 align 20h
.text:0000000000402314 ; } // starts at 401EB0
.text:0000000000402320
.text:0000000000402320 ; =============== S U B R O U T I N E =======================================
.text:0000000000402320
.text:0000000000402320
.text:0000000000402320 ; std::_Rb_tree<char, std::pair<char const, char>, std::_Select1st<std::pair<char const, char>>, std::less<char>, std::allocator<std::pair<char const, char>>>::_M_put_node(std::_Rb_tree_node<std::pair<char const, char>> *)
.text:0000000000402320                 public _ZNSt8_Rb_treeIcSt4pairIKccESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E ; weak
.text:0000000000402320 _ZNSt8_Rb_treeIcSt4pairIKccESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E proc near
.text:0000000000402320 ; __unwind { // ___gxx_personality_v0
.text:0000000000402320                 mov     rdi, rsi        ; void *
.text:0000000000402323                 jmp     __ZdlPv         ; operator delete(void *)
.text:0000000000402323 _ZNSt8_Rb_treeIcSt4pairIKccESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E endp
.text:0000000000402323
.text:0000000000402323 ; ---------------------------------------------------------------------------
.text:0000000000402328                 align 10h
.text:0000000000402328 ; } // starts at 402320
.text:0000000000402330
.text:0000000000402330 ; =============== S U B R O U T I N E =======================================
.text:0000000000402330
.text:0000000000402330
.text:0000000000402330 ; std::_Rb_tree<char, std::pair<char const, char>, std::_Select1st<std::pair<char const, char>>, std::less<char>, std::allocator<std::pair<char const, char>>>::_M_insert_unique(std::pair<char const, char> const&)
.text:0000000000402330                 public _ZNSt8_Rb_treeIcSt4pairIKccESt10_Select1stIS2_ESt4lessIcESaIS2_EE16_M_insert_uniqueERKS2_ ; weak
.text:0000000000402330 _ZNSt8_Rb_treeIcSt4pairIKccESt10_Select1stIS2_ESt4lessIcESaIS2_EE16_M_insert_uniqueERKS2_ proc near
.text:0000000000402330                                         ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<char const,char>>,std::pair<char const,char> const&)+AF↑p
.text:0000000000402330
.text:0000000000402330 var_48          = qword ptr -48h
.text:0000000000402330 var_40          = qword ptr -40h
.text:0000000000402330
.text:0000000000402330 ; __unwind { // ___gxx_personality_v0
.text:0000000000402330                 push    r12
.text:0000000000402332                 push    r13
.text:0000000000402334                 push    r14
.text:0000000000402336                 push    r15
.text:0000000000402338                 push    rbx
.text:0000000000402339                 push    rbp
.text:000000000040233A                 sub     rsp, 18h
.text:000000000040233E                 mov     r12, rdi
.text:0000000000402341                 mov     r13, rsi
.text:0000000000402344                 mov     r8d, 1
.text:000000000040234A                 mov     rsi, [r12+10h]
.text:000000000040234F                 lea     rbp, [r12+8]
.text:0000000000402354                 mov     rbx, rbp
.text:0000000000402357                 test    rsi, rsi
.text:000000000040235A                 jz      short loc_402387
.text:000000000040235C                 movsx   eax, byte ptr [r13+0]
.text:0000000000402361
.text:0000000000402361 loc_402361:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique(std::pair<char const,char> const&)+55↓j
.text:0000000000402361                 movsx   r8d, byte ptr [rsi+20h]
.text:0000000000402366                 mov     rbx, rsi
.text:0000000000402369                 neg     r8d
.text:000000000040236C                 add     r8d, eax
.text:000000000040236F                 shr     r8d, 1Fh
.text:0000000000402373                 test    r8d, r8d
.text:0000000000402376                 jz      short loc_40237E
.text:0000000000402378                 mov     rsi, [rsi+10h]
.text:000000000040237C                 jmp     short loc_402382
.text:000000000040237E ; ---------------------------------------------------------------------------
.text:000000000040237E
.text:000000000040237E loc_40237E:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique(std::pair<char const,char> const&)+46↑j
.text:000000000040237E                 mov     rsi, [rsi+18h]
.text:0000000000402382
.text:0000000000402382 loc_402382:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique(std::pair<char const,char> const&)+4C↑j
.text:0000000000402382                 test    rsi, rsi
.text:0000000000402385                 jnz     short loc_402361
.text:0000000000402387
.text:0000000000402387 loc_402387:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique(std::pair<char const,char> const&)+2A↑j
.text:0000000000402387                 mov     rax, rbx
.text:000000000040238A                 test    r8d, r8d
.text:000000000040238D                 jz      short loc_4023A2
.text:000000000040238F                 cmp     rbx, [r12+18h]
.text:0000000000402394                 jz      loc_402435
.text:000000000040239A                 mov     rdi, rbx
.text:000000000040239D                 call    __ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base ; std::_Rb_tree_decrement(std::_Rb_tree_node_base *)
.text:00000000004023A2
.text:00000000004023A2 loc_4023A2:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique(std::pair<char const,char> const&)+5D↑j
.text:00000000004023A2                 movsx   r15d, byte ptr [r13+0]
.text:00000000004023A7                 cmp     r15b, [rax+20h]
.text:00000000004023AB                 jle     short loc_402418
.text:00000000004023AD                 cmp     rbx, rbp
.text:00000000004023B0                 jnz     short loc_4023BA
.text:00000000004023B2                 mov     r15d, 1
.text:00000000004023B8                 jmp     short loc_4023C5
.text:00000000004023BA ; ---------------------------------------------------------------------------
.text:00000000004023BA
.text:00000000004023BA loc_4023BA:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique(std::pair<char const,char> const&)+80↑j
.text:00000000004023BA                 movsx   eax, byte ptr [rbx+20h]
.text:00000000004023BE                 sub     r15d, eax
.text:00000000004023C1                 shr     r15d, 1Fh
.text:00000000004023C5
.text:00000000004023C5 loc_4023C5:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique(std::pair<char const,char> const&)+88↑j
.text:00000000004023C5                 mov     edi, 28h ; '('  ; unsigned __int64
.text:00000000004023CA                 call    __Znwm          ; operator new(ulong)
.text:00000000004023CF                 mov     r14, rax
.text:00000000004023D2                 cmp     r14, 0FFFFFFFFFFFFFFE0h
.text:00000000004023D6                 jz      short loc_4023E2
.text:00000000004023D8                 movzx   r8d, word ptr [r13+0]
.text:00000000004023DD                 mov     [r14+20h], r8w
.text:00000000004023E2
.text:00000000004023E2 loc_4023E2:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique(std::pair<char const,char> const&)+A6↑j
.text:00000000004023E2                 mov     edi, r15d
.text:00000000004023E5                 mov     rsi, r14
.text:00000000004023E8                 mov     rdx, rbx
.text:00000000004023EB                 mov     rcx, rbp
.text:00000000004023EE                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:00000000004023F3                 mov     byte ptr [rsp+48h+var_40], 1
.text:00000000004023F8                 mov     rax, r14
.text:00000000004023FB                 inc     qword ptr [r12+28h]
.text:0000000000402400                 mov     [rsp+48h+var_48], r14
.text:0000000000402404                 mov     rdx, [rsp+48h+var_40]
.text:0000000000402409                 add     rsp, 18h
.text:000000000040240D                 pop     rbp
.text:000000000040240E                 pop     rbx
.text:000000000040240F                 pop     r15
.text:0000000000402411                 pop     r14
.text:0000000000402413                 pop     r13
.text:0000000000402415                 pop     r12
.text:0000000000402417                 retn
.text:0000000000402418 ; ---------------------------------------------------------------------------
.text:0000000000402418
.text:0000000000402418 loc_402418:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique(std::pair<char const,char> const&)+7B↑j
.text:0000000000402418                 mov     byte ptr [rsp+48h+var_40], 0
.text:000000000040241D                 mov     [rsp+48h+var_48], rax
.text:0000000000402421                 mov     rdx, [rsp+48h+var_40]
.text:0000000000402426                 add     rsp, 18h
.text:000000000040242A                 pop     rbp
.text:000000000040242B                 pop     rbx
.text:000000000040242C                 pop     r15
.text:000000000040242E                 pop     r14
.text:0000000000402430                 pop     r13
.text:0000000000402432                 pop     r12
.text:0000000000402434                 retn
.text:0000000000402435 ; ---------------------------------------------------------------------------
.text:0000000000402435
.text:0000000000402435 loc_402435:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique(std::pair<char const,char> const&)+64↑j
.text:0000000000402435                 cmp     rbx, rbp
.text:0000000000402438                 jnz     short loc_402442
.text:000000000040243A                 mov     r15d, 1
.text:0000000000402440                 jmp     short loc_402452
.text:0000000000402442 ; ---------------------------------------------------------------------------
.text:0000000000402442
.text:0000000000402442 loc_402442:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique(std::pair<char const,char> const&)+108↑j
.text:0000000000402442                 movsx   r15d, byte ptr [r13+0]
.text:0000000000402447                 movsx   eax, byte ptr [rbx+20h]
.text:000000000040244B                 sub     r15d, eax
.text:000000000040244E                 shr     r15d, 1Fh
.text:0000000000402452
.text:0000000000402452 loc_402452:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique(std::pair<char const,char> const&)+110↑j
.text:0000000000402452                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000402457                 call    __Znwm          ; operator new(ulong)
.text:000000000040245C                 mov     r14, rax
.text:000000000040245F                 cmp     r14, 0FFFFFFFFFFFFFFE0h
.text:0000000000402463                 jz      short loc_40246F
.text:0000000000402465                 movzx   r8d, word ptr [r13+0]
.text:000000000040246A                 mov     [r14+20h], r8w
.text:000000000040246F
.text:000000000040246F loc_40246F:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique(std::pair<char const,char> const&)+133↑j
.text:000000000040246F                 mov     edi, r15d
.text:0000000000402472                 mov     rsi, r14
.text:0000000000402475                 mov     rdx, rbx
.text:0000000000402478                 mov     rcx, rbp
.text:000000000040247B                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000402480                 mov     byte ptr [rsp+48h+var_40], 1
.text:0000000000402485                 mov     rax, r14
.text:0000000000402488                 inc     qword ptr [r12+28h]
.text:000000000040248D                 mov     [rsp+48h+var_48], r14
.text:0000000000402491                 mov     rdx, [rsp+48h+var_40]
.text:0000000000402496                 add     rsp, 18h
.text:000000000040249A                 pop     rbp
.text:000000000040249B                 pop     rbx
.text:000000000040249C                 pop     r15
.text:000000000040249E                 pop     r14
.text:00000000004024A0                 pop     r13
.text:00000000004024A2                 pop     r12
.text:00000000004024A4                 retn
.text:00000000004024A4 _ZNSt8_Rb_treeIcSt4pairIKccESt10_Select1stIS2_ESt4lessIcESaIS2_EE16_M_insert_uniqueERKS2_ endp
.text:00000000004024A4
.text:00000000004024A4 ; ---------------------------------------------------------------------------
.text:00000000004024A5                 align 10h
.text:00000000004024A5 ; } // starts at 402330
.text:00000000004024B0
.text:00000000004024B0 ; =============== S U B R O U T I N E =======================================
.text:00000000004024B0
.text:00000000004024B0
.text:00000000004024B0 ; void __fastcall std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::~map(void *)
.text:00000000004024B0                 public _ZNSt3mapIccSt4lessIcESaISt4pairIKccEEED1Ev ; weak
.text:00000000004024B0 _ZNSt3mapIccSt4lessIcESaISt4pairIKccEEED1Ev proc near
.text:00000000004024B0                                         ; DATA XREF: __sti__$E+116↑o
.text:00000000004024B0
.text:00000000004024B0 var_18          = qword ptr -18h
.text:00000000004024B0 var_10          = qword ptr -10h
.text:00000000004024B0 var_8           = qword ptr -8
.text:00000000004024B0
.text:00000000004024B0 ; __unwind { // ___gxx_personality_v0
.text:00000000004024B0                 sub     rsp, 18h
.text:00000000004024B4                 mov     rax, rdi
.text:00000000004024B7                 mov     rdi, [rax+10h]
.text:00000000004024BB                 test    rdi, rdi
.text:00000000004024BE                 jz      short loc_402504
.text:00000000004024C0                 mov     [rsp+18h+var_8], r12
.text:00000000004024C5                 mov     r12, rdi
.text:00000000004024C8                 mov     [rsp+18h+var_10], r13
.text:00000000004024CD                 mov     r13, rax
.text:00000000004024D0                 mov     [rsp+18h+var_18], r14
.text:00000000004024D4
.text:00000000004024D4 loc_4024D4:                             ; CODE XREF: std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::~map()+44↓j
.text:00000000004024D4                 mov     rdi, r13
.text:00000000004024D7                 mov     rsi, [r12+18h]
.text:00000000004024DC                 call    _ZNSt8_Rb_treeIcSt4pairIKccESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E ; std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_erase(std::_Rb_tree_node<std::pair<char const,char>> *)
.text:00000000004024E1                 mov     rdi, r12        ; void *
.text:00000000004024E4                 mov     r14, [r12+10h]
.text:00000000004024E9                 call    __ZdlPv         ; operator delete(void *)
.text:00000000004024EE                 mov     r12, r14
.text:00000000004024F1                 test    r14, r14
.text:00000000004024F4                 jnz     short loc_4024D4
.text:00000000004024F6                 mov     r12, [rsp+18h+var_8]
.text:00000000004024FB                 mov     r13, [rsp+18h+var_10]
.text:0000000000402500                 mov     r14, [rsp+18h+var_18]
.text:0000000000402504
.text:0000000000402504 loc_402504:                             ; CODE XREF: std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::~map()+E↑j
.text:0000000000402504                 add     rsp, 18h
.text:0000000000402508                 retn
.text:0000000000402508 _ZNSt3mapIccSt4lessIcESaISt4pairIKccEEED1Ev endp
.text:0000000000402508
.text:0000000000402508 ; ---------------------------------------------------------------------------
.text:0000000000402509                 align 10h
.text:0000000000402509 ; } // starts at 4024B0
.text:0000000000402510
.text:0000000000402510 ; =============== S U B R O U T I N E =======================================
.text:0000000000402510
.text:0000000000402510
.text:0000000000402510 ; std::_Rb_tree<char, std::pair<char const, char>, std::_Select1st<std::pair<char const, char>>, std::less<char>, std::allocator<std::pair<char const, char>>>::_M_erase(std::_Rb_tree_node<std::pair<char const, char>> *)
.text:0000000000402510                 public _ZNSt8_Rb_treeIcSt4pairIKccESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E ; weak
.text:0000000000402510 _ZNSt8_Rb_treeIcSt4pairIKccESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E proc near
.text:0000000000402510                                         ; CODE XREF: std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::~map()+2C↑p
.text:0000000000402510                                         ; std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_erase(std::_Rb_tree_node<std::pair<char const,char>> *)+24↓p
.text:0000000000402510
.text:0000000000402510 var_18          = qword ptr -18h
.text:0000000000402510 var_10          = qword ptr -10h
.text:0000000000402510 var_8           = qword ptr -8
.text:0000000000402510
.text:0000000000402510 ; __unwind { // ___gxx_personality_v0
.text:0000000000402510                 sub     rsp, 18h
.text:0000000000402514                 test    rsi, rsi
.text:0000000000402517                 jz      short loc_40255B
.text:0000000000402519                 mov     [rsp+18h+var_8], r12
.text:000000000040251E                 mov     r12, rdi
.text:0000000000402521                 mov     [rsp+18h+var_10], r13
.text:0000000000402526                 mov     r13, rsi
.text:0000000000402529                 mov     [rsp+18h+var_18], r14
.text:000000000040252D
.text:000000000040252D loc_40252D:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_erase(std::_Rb_tree_node<std::pair<char const,char>> *)+3B↓j
.text:000000000040252D                 mov     rdi, r12
.text:0000000000402530                 mov     rsi, [r13+18h]
.text:0000000000402534                 call    _ZNSt8_Rb_treeIcSt4pairIKccESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E ; std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_erase(std::_Rb_tree_node<std::pair<char const,char>> *)
.text:0000000000402539                 mov     rdi, r13        ; void *
.text:000000000040253C                 mov     r14, [r13+10h]
.text:0000000000402540                 call    __ZdlPv         ; operator delete(void *)
.text:0000000000402545                 mov     r13, r14
.text:0000000000402548                 test    r14, r14
.text:000000000040254B                 jnz     short loc_40252D
.text:000000000040254D                 mov     r12, [rsp+18h+var_8]
.text:0000000000402552                 mov     r13, [rsp+18h+var_10]
.text:0000000000402557                 mov     r14, [rsp+18h+var_18]
.text:000000000040255B
.text:000000000040255B loc_40255B:                             ; CODE XREF: std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_erase(std::_Rb_tree_node<std::pair<char const,char>> *)+7↑j
.text:000000000040255B                 add     rsp, 18h
.text:000000000040255F                 retn
.text:000000000040255F ; } // starts at 402510
.text:000000000040255F _ZNSt8_Rb_treeIcSt4pairIKccESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E endp
.text:000000000040255F
.text:0000000000402560
.text:0000000000402560 ; =============== S U B R O U T I N E =======================================
.text:0000000000402560
.text:0000000000402560
.text:0000000000402560                 public __intel_new_feature_proc_init
.text:0000000000402560 __intel_new_feature_proc_init proc near ; CODE XREF: main+22↑p
.text:0000000000402560
.text:0000000000402560 dest            = byte ptr -448h
.text:0000000000402560 var_48          = qword ptr -48h
.text:0000000000402560 var_40          = qword ptr -40h
.text:0000000000402560 var_38          = qword ptr -38h
.text:0000000000402560 var_30          = qword ptr -30h
.text:0000000000402560 var_28          = qword ptr -28h
.text:0000000000402560 s               = qword ptr -20h
.text:0000000000402560
.text:0000000000402560 ; __unwind {
.text:0000000000402560                 push    r12
.text:0000000000402562                 push    r13
.text:0000000000402564                 push    r14
.text:0000000000402566                 sub     rsp, 430h
.text:000000000040256D                 mov     r14, rsi
.text:0000000000402570                 mov     rax, cs:__intel_cpu_feature_indicator_ptr
.text:0000000000402577                 mov     r13d, edi
.text:000000000040257A                 mov     r12, [rax]
.text:000000000040257D                 test    r12, r12
.text:0000000000402580                 jz      loc_4028BD
.text:0000000000402586
.text:0000000000402586 loc_402586:                             ; CODE XREF: __intel_new_feature_proc_init+371↓j
.text:0000000000402586                 mov     rax, r12
.text:0000000000402589                 and     rax, r14
.text:000000000040258C                 cmp     r14, rax
.text:000000000040258F                 jnz     short loc_4025AC
.text:0000000000402591                 test    r12, 6
.text:0000000000402598                 jnz     loc_40282D
.text:000000000040259E
.text:000000000040259E loc_40259E:                             ; CODE XREF: __intel_new_feature_proc_init+2D7↓j
.text:000000000040259E                 add     rsp, 430h
.text:00000000004025A5                 pop     r14
.text:00000000004025A7                 pop     r13
.text:00000000004025A9                 pop     r12
.text:00000000004025AB                 retn
.text:00000000004025AC ; ---------------------------------------------------------------------------
.text:00000000004025AC
.text:00000000004025AC loc_4025AC:                             ; CODE XREF: __intel_new_feature_proc_init+2F↑j
.text:00000000004025AC                 test    r14, 1
.text:00000000004025B3                 jnz     loc_4028A8
.text:00000000004025B9                 not     r12
.text:00000000004025BC                 mov     edi, 39h ; '9'  ; number
.text:00000000004025C1                 and     r12, r14
.text:00000000004025C4                 xor     r14d, r14d
.text:00000000004025C7                 xor     esi, esi
.text:00000000004025C9                 xor     eax, eax
.text:00000000004025CB                 call    __libirc_get_msg
.text:00000000004025D0                 xor     edx, edx
.text:00000000004025D2                 mov     r8b, 1
.text:00000000004025D5                 mov     [rsp+448h+dest], 0
.text:00000000004025D9                 xor     r13d, r13d
.text:00000000004025DC                 mov     [rsp+448h+s], rax
.text:00000000004025E4                 mov     [rsp+448h+var_28], r15
.text:00000000004025EC                 mov     r15, r12
.text:00000000004025EF                 mov     [rsp+448h+var_30], rbx
.text:00000000004025F7                 mov     r12b, r8b
.text:00000000004025FA                 mov     [rsp+448h+var_38], rbp
.text:0000000000402602                 mov     rbp, r14
.text:0000000000402605                 mov     r14, rdx
.text:0000000000402608
.text:0000000000402608 loc_402608:                             ; CODE XREF: __intel_new_feature_proc_init+1CE↓j
.text:0000000000402608                 mov     ecx, r13d
.text:000000000040260B                 mov     eax, 1
.text:0000000000402610                 shl     rax, cl
.text:0000000000402613                 test    rax, r15
.text:0000000000402616                 jz      loc_402724
.text:000000000040261C                 cmp     r12b, 26h ; '&'
.text:0000000000402620                 jnb     loc_402803
.text:0000000000402626                 movzx   ebx, r12b
.text:000000000040262A                 lea     rax, c_feature_names
.text:0000000000402631                 mov     rbx, [rax+rbx*8]
.text:0000000000402635                 test    rbx, rbx
.text:0000000000402638                 jz      loc_402803
.text:000000000040263E                 cmp     byte ptr [rbx], 0
.text:0000000000402641                 jz      loc_402803
.text:0000000000402647                 cmp     [rsp+448h+dest], 0
.text:000000000040264B                 jz      loc_4026FF
.text:0000000000402651                 test    rbp, rbp
.text:0000000000402654                 jz      loc_4026FA
.text:000000000040265A                 mov     rdi, rbp        ; s
.text:000000000040265D                 call    _strlen
.text:0000000000402662                 mov     [rsp+448h+var_40], rax
.text:000000000040266A                 mov     rdi, [rsp+448h+s] ; s
.text:0000000000402672                 call    _strlen
.text:0000000000402677                 mov     [rsp+448h+var_48], rax
.text:000000000040267F                 mov     rdi, rbx        ; s
.text:0000000000402682                 call    _strlen
.text:0000000000402687                 mov     r9, rax
.text:000000000040268A                 mov     rax, [rsp+448h+var_40]
.text:0000000000402692                 add     rax, r14
.text:0000000000402695                 add     rax, [rsp+448h+var_48]
.text:000000000040269D                 lea     r9, [rax+r9+2]
.text:00000000004026A2                 cmp     r9, 400h
.text:00000000004026A9                 jnb     loc_40283C
.text:00000000004026AF                 neg     r14
.text:00000000004026B2                 lea     rdi, [rsp+448h+dest] ; dest
.text:00000000004026B6                 add     r14, 3FFh
.text:00000000004026BD                 lea     rsi, src        ; ", "
.text:00000000004026C4                 mov     rdx, r14        ; n
.text:00000000004026C7                 call    _strncat
.text:00000000004026CC                 lea     rdi, [rsp+448h+dest] ; s
.text:00000000004026D0                 call    _strlen
.text:00000000004026D5                 movsxd  rdx, eax
.text:00000000004026D8                 lea     rdi, [rsp+448h+dest] ; dest
.text:00000000004026DC                 neg     rdx
.text:00000000004026DF                 mov     rsi, rbp        ; src
.text:00000000004026E2                 add     rdx, 3FFh       ; n
.text:00000000004026E9                 call    _strncat
.text:00000000004026EE                 lea     rdi, [rsp+448h+dest] ; s
.text:00000000004026F2                 call    _strlen
.text:00000000004026F7                 movsxd  r14, eax
.text:00000000004026FA
.text:00000000004026FA loc_4026FA:                             ; CODE XREF: __intel_new_feature_proc_init+F4↑j
.text:00000000004026FA                 mov     rbp, rbx
.text:00000000004026FD                 jmp     short loc_402724
.text:00000000004026FF ; ---------------------------------------------------------------------------
.text:00000000004026FF
.text:00000000004026FF loc_4026FF:                             ; CODE XREF: __intel_new_feature_proc_init+EB↑j
.text:00000000004026FF                 neg     r14
.text:0000000000402702                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000402706                 add     r14, 3FFh
.text:000000000040270D                 mov     rsi, rbx        ; src
.text:0000000000402710                 mov     rdx, r14        ; n
.text:0000000000402713                 call    _strncat
.text:0000000000402718                 lea     rdi, [rsp+448h+dest] ; s
.text:000000000040271C                 call    _strlen
.text:0000000000402721                 movsxd  r14, eax
.text:0000000000402724
.text:0000000000402724 loc_402724:                             ; CODE XREF: __intel_new_feature_proc_init+B6↑j
.text:0000000000402724                                         ; __intel_new_feature_proc_init+19D↑j
.text:0000000000402724                 inc     r12b
.text:0000000000402727                 inc     r13d
.text:000000000040272A                 cmp     r12b, 25h ; '%'
.text:000000000040272E                 jle     loc_402608
.text:0000000000402734                 mov     rdx, r14
.text:0000000000402737                 mov     r14, rbp
.text:000000000040273A                 mov     rax, [rsp+448h+s]
.text:0000000000402742                 test    r14, r14
.text:0000000000402745                 mov     r15, [rsp+448h+var_28]
.text:000000000040274D                 mov     rbx, [rsp+448h+var_30]
.text:0000000000402755                 mov     rbp, [rsp+448h+var_38]
.text:000000000040275D                 jz      short loc_402797
.text:000000000040275F                 neg     rdx
.text:0000000000402762                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000402766                 add     rdx, 3FFh       ; n
.text:000000000040276D                 mov     rsi, rax        ; src
.text:0000000000402770                 call    _strncat
.text:0000000000402775                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000402779                 call    _strlen
.text:000000000040277E                 movsxd  rdx, eax
.text:0000000000402781                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000402785                 neg     rdx
.text:0000000000402788                 mov     rsi, r14        ; src
.text:000000000040278B                 add     rdx, 3FFh       ; n
.text:0000000000402792                 call    _strncat
.text:0000000000402797
.text:0000000000402797 loc_402797:                             ; CODE XREF: __intel_new_feature_proc_init+1FD↑j
.text:0000000000402797                                         ; __intel_new_feature_proc_init+343↓j
.text:0000000000402797                 cmp     [rsp+448h+dest], 0
.text:000000000040279B                 jnz     short loc_4027DA
.text:000000000040279D                 xor     esi, esi
.text:000000000040279F                 mov     edi, 1
.text:00000000004027A4                 xor     edx, edx
.text:00000000004027A6                 xor     eax, eax
.text:00000000004027A8                 call    __libirc_print
.text:00000000004027AD
.text:00000000004027AD loc_4027AD:                             ; CODE XREF: __intel_new_feature_proc_init+2CB↓j
.text:00000000004027AD                                         ; __intel_new_feature_proc_init+358↓j
.text:00000000004027AD                 mov     edi, 1
.text:00000000004027B2                 mov     esi, 3Ah ; ':'
.text:00000000004027B7                 xor     edx, edx
.text:00000000004027B9                 xor     eax, eax
.text:00000000004027BB                 call    __libirc_print
.text:00000000004027C0
.text:00000000004027C0 loc_4027C0:                             ; CODE XREF: __intel_new_feature_proc_init+2A1↓j
.text:00000000004027C0                                         ; __intel_new_feature_proc_init+39A↓j
.text:00000000004027C0                 xor     esi, esi
.text:00000000004027C2                 mov     edi, 1
.text:00000000004027C7                 xor     edx, edx
.text:00000000004027C9                 xor     eax, eax
.text:00000000004027CB                 call    __libirc_print
.text:00000000004027D0                 mov     edi, 1          ; status
.text:00000000004027D5                 call    _exit
.text:00000000004027DA ; ---------------------------------------------------------------------------
.text:00000000004027DA
.text:00000000004027DA loc_4027DA:                             ; CODE XREF: __intel_new_feature_proc_init+23B↑j
.text:00000000004027DA                 xor     esi, esi
.text:00000000004027DC                 mov     edi, 1
.text:00000000004027E1                 xor     edx, edx
.text:00000000004027E3                 xor     eax, eax
.text:00000000004027E5                 call    __libirc_print
.text:00000000004027EA                 mov     edi, 1
.text:00000000004027EF                 mov     esi, 38h ; '8'
.text:00000000004027F4                 mov     edx, edi
.text:00000000004027F6                 lea     rcx, [rsp+448h+dest]
.text:00000000004027FA                 xor     eax, eax
.text:00000000004027FC                 call    __libirc_print
.text:0000000000402801                 jmp     short loc_4027C0
.text:0000000000402803 ; ---------------------------------------------------------------------------
.text:0000000000402803
.text:0000000000402803 loc_402803:                             ; CODE XREF: __intel_new_feature_proc_init+C0↑j
.text:0000000000402803                                         ; __intel_new_feature_proc_init+D8↑j ...
.text:0000000000402803                 mov     r15, [rsp+448h+var_28]
.text:000000000040280B                 mov     rbx, [rsp+448h+var_30]
.text:0000000000402813                 mov     rbp, [rsp+448h+var_38]
.text:000000000040281B                 xor     esi, esi
.text:000000000040281D                 mov     edi, 1
.text:0000000000402822                 xor     edx, edx
.text:0000000000402824                 xor     eax, eax
.text:0000000000402826                 call    __libirc_print
.text:000000000040282B                 jmp     short loc_4027AD
.text:000000000040282D ; ---------------------------------------------------------------------------
.text:000000000040282D
.text:000000000040282D loc_40282D:                             ; CODE XREF: __intel_new_feature_proc_init+38↑j
.text:000000000040282D                 xor     edi, edi
.text:000000000040282F                 mov     esi, r13d
.text:0000000000402832                 call    __intel_proc_init_ftzdazule
.text:0000000000402837                 jmp     loc_40259E
.text:000000000040283C ; ---------------------------------------------------------------------------
.text:000000000040283C
.text:000000000040283C loc_40283C:                             ; CODE XREF: __intel_new_feature_proc_init+149↑j
.text:000000000040283C                 mov     rdx, r14
.text:000000000040283F                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000402843                 neg     rdx
.text:0000000000402846                 mov     r14, rbp
.text:0000000000402849                 mov     rax, [rsp+448h+s]
.text:0000000000402851                 add     rdx, 3FFh       ; n
.text:0000000000402858                 mov     rsi, rax        ; src
.text:000000000040285B                 mov     r15, [rsp+448h+var_28]
.text:0000000000402863                 mov     rbx, [rsp+448h+var_30]
.text:000000000040286B                 mov     rbp, [rsp+448h+var_38]
.text:0000000000402873                 call    _strncat
.text:0000000000402878                 lea     rdi, [rsp+448h+dest] ; s
.text:000000000040287C                 call    _strlen
.text:0000000000402881                 movsxd  rdx, eax
.text:0000000000402884                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000402888                 neg     rdx
.text:000000000040288B                 mov     rsi, r14        ; src
.text:000000000040288E                 add     rdx, 3FFh       ; n
.text:0000000000402895                 call    _strncat
.text:000000000040289A                 lea     rdi, [rsp+448h+dest] ; s
.text:000000000040289E                 call    _strlen
.text:00000000004028A3                 jmp     loc_402797
.text:00000000004028A8 ; ---------------------------------------------------------------------------
.text:00000000004028A8
.text:00000000004028A8 loc_4028A8:                             ; CODE XREF: __intel_new_feature_proc_init+53↑j
.text:00000000004028A8                 xor     esi, esi
.text:00000000004028AA                 mov     edi, 1
.text:00000000004028AF                 xor     edx, edx
.text:00000000004028B1                 xor     eax, eax
.text:00000000004028B3                 call    __libirc_print
.text:00000000004028B8                 jmp     loc_4027AD
.text:00000000004028BD ; ---------------------------------------------------------------------------
.text:00000000004028BD
.text:00000000004028BD loc_4028BD:                             ; CODE XREF: __intel_new_feature_proc_init+20↑j
.text:00000000004028BD                 xor     eax, eax
.text:00000000004028BF                 call    __intel_cpu_features_init
.text:00000000004028C4                 mov     rax, cs:__intel_cpu_feature_indicator_ptr
.text:00000000004028CB                 mov     r12, [rax]
.text:00000000004028CE                 test    r12, r12
.text:00000000004028D1                 jnz     loc_402586
.text:00000000004028D7                 xor     esi, esi
.text:00000000004028D9                 mov     edi, 1
.text:00000000004028DE                 xor     edx, edx
.text:00000000004028E0                 xor     eax, eax
.text:00000000004028E2                 call    __libirc_print
.text:00000000004028E7                 mov     edi, 1
.text:00000000004028EC                 mov     esi, 3Bh ; ';'
.text:00000000004028F1                 xor     edx, edx
.text:00000000004028F3                 xor     eax, eax
.text:00000000004028F5                 call    __libirc_print
.text:00000000004028FA                 jmp     loc_4027C0
.text:00000000004028FA __intel_new_feature_proc_init endp
.text:00000000004028FA
.text:00000000004028FA ; ---------------------------------------------------------------------------
.text:00000000004028FF                 align 20h
.text:00000000004028FF ; } // starts at 402560
.text:0000000000402900
.text:0000000000402900 ; =============== S U B R O U T I N E =======================================
.text:0000000000402900
.text:0000000000402900
.text:0000000000402900 ; __int64 __usercall _libirc_get_msg@<rax>(int number@<edi>, char)
.text:0000000000402900                 public __libirc_get_msg
.text:0000000000402900 __libirc_get_msg proc near              ; CODE XREF: __intel_new_feature_proc_init+6B↑p
.text:0000000000402900
.text:0000000000402900 dest            = byte ptr -168h
.text:0000000000402900 var_E8          = byte ptr -0E8h
.text:0000000000402900 var_D8          = qword ptr -0D8h
.text:0000000000402900 var_D0          = qword ptr -0D0h
.text:0000000000402900 var_C8          = qword ptr -0C8h
.text:0000000000402900 var_C0          = qword ptr -0C0h
.text:0000000000402900 var_39          = byte ptr -39h
.text:0000000000402900 arg             = dword ptr -38h
.text:0000000000402900 var_34          = dword ptr -34h
.text:0000000000402900 var_30          = qword ptr -30h
.text:0000000000402900 var_28          = qword ptr -28h
.text:0000000000402900 arg_0           = byte ptr  8
.text:0000000000402900
.text:0000000000402900 ; __unwind {
.text:0000000000402900                 push    r12
.text:0000000000402902                 push    r13
.text:0000000000402904                 push    r14
.text:0000000000402906                 sub     rsp, 150h
.text:000000000040290D                 mov     [rsp+168h+var_D8], rdx
.text:0000000000402915                 mov     [rsp+168h+var_D0], rcx
.text:000000000040291D                 mov     [rsp+168h+var_C8], r8
.text:0000000000402925                 mov     [rsp+168h+var_C0], r9
.text:000000000040292D                 movzx   r11d, al
.text:0000000000402931                 lea     rax, ds:0[r11*4]
.text:0000000000402939                 lea     r11, loc_40296E
.text:0000000000402940                 sub     r11, rax
.text:0000000000402943                 lea     rax, [rsp+168h+var_39]
.text:000000000040294B                 jmp     r11
.text:000000000040294E                 movaps  xmmword ptr [rax-0Fh], xmm7
.text:0000000000402952                 movaps  xmmword ptr [rax-1Fh], xmm6
.text:0000000000402956                 movaps  xmmword ptr [rax-2Fh], xmm5
.text:000000000040295A                 movaps  xmmword ptr [rax-3Fh], xmm4
.text:000000000040295E                 movaps  xmmword ptr [rax-4Fh], xmm3
.text:0000000000402962                 movaps  xmmword ptr [rax-5Fh], xmm2
.text:0000000000402966                 movaps  xmmword ptr [rax-6Fh], xmm1
.text:000000000040296A                 movaps  xmmword ptr [rax-7Fh], xmm0
.text:000000000040296E
.text:000000000040296E loc_40296E:                             ; DATA XREF: __libirc_get_msg+39↑o
.text:000000000040296E                 mov     r13d, edi
.text:0000000000402971                 mov     r14d, esi
.text:0000000000402974                 test    r13d, r13d
.text:0000000000402977                 jz      loc_402A07
.text:000000000040297D                 cmp     cs:first_msg, 0
.text:0000000000402984                 jz      short loc_4029D4
.text:0000000000402986                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:000000000040298D                 xor     esi, esi        ; flag
.text:000000000040298F                 mov     cs:first_msg, 0
.text:0000000000402999                 call    _catopen
.text:000000000040299E                 mov     cs:message_catalog, rax
.text:00000000004029A5                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000004029A9                 jz      loc_402A86
.text:00000000004029AF                 mov     rdi, cs:message_catalog ; catalog
.text:00000000004029B6
.text:00000000004029B6 loc_4029B6:                             ; CODE XREF: __libirc_get_msg+212↓j
.text:00000000004029B6                 movsxd  rax, r13d
.text:00000000004029B9                 lea     rcx, off_605048 ; "\n"
.text:00000000004029C0                 shl     rax, 4
.text:00000000004029C4                 mov     cs:use_internal_msg, 0
.text:00000000004029CE                 mov     rcx, [rax+rcx]  ; string
.text:00000000004029D2                 jmp     short loc_4029F5
.text:00000000004029D4 ; ---------------------------------------------------------------------------
.text:00000000004029D4
.text:00000000004029D4 loc_4029D4:                             ; CODE XREF: __libirc_get_msg+84↑j
.text:00000000004029D4                                         ; __libirc_get_msg+218↓j
.text:00000000004029D4                 mov     edi, cs:use_internal_msg
.text:00000000004029DA                 movsxd  rax, r13d
.text:00000000004029DD                 lea     rcx, off_605048 ; "\n"
.text:00000000004029E4                 shl     rax, 4
.text:00000000004029E8                 test    edi, edi
.text:00000000004029EA                 mov     rcx, [rax+rcx]
.text:00000000004029EE                 jnz     short loc_402A0E
.text:00000000004029F0                 jmp     loc_402B1D
.text:00000000004029F5 ; ---------------------------------------------------------------------------
.text:00000000004029F5
.text:00000000004029F5 loc_4029F5:                             ; CODE XREF: __libirc_get_msg+D2↑j
.text:00000000004029F5                                         ; __libirc_get_msg+224↓j
.text:00000000004029F5                 mov     esi, 1          ; set
.text:00000000004029FA                 mov     edx, r13d       ; number
.text:00000000004029FD                 call    _catgets
.text:0000000000402A02                 mov     rcx, rax
.text:0000000000402A05                 jmp     short loc_402A0E
.text:0000000000402A07 ; ---------------------------------------------------------------------------
.text:0000000000402A07
.text:0000000000402A07 loc_402A07:                             ; CODE XREF: __libirc_get_msg+77↑j
.text:0000000000402A07                 lea     rcx, aCannotAllocate+34h ; ""
.text:0000000000402A0E
.text:0000000000402A0E loc_402A0E:                             ; CODE XREF: __libirc_get_msg+EE↑j
.text:0000000000402A0E                                         ; __libirc_get_msg+105↑j
.text:0000000000402A0E                 test    r14d, r14d
.text:0000000000402A11                 jle     short loc_402A75
.text:0000000000402A13                 mov     [rsp+168h+arg], 10h
.text:0000000000402A1E                 lea     rdx, [rsp+168h+arg_0]
.text:0000000000402A26                 mov     [rsp+168h+var_34], 30h ; '0'
.text:0000000000402A31                 lea     rdi, [rsp+168h+var_E8]
.text:0000000000402A39                 mov     [rsp+168h+var_30], rdx
.text:0000000000402A41                 mov     [rsp+168h+var_28], rdi
.text:0000000000402A49                 lea     rdi, get_msg_buf ; s
.text:0000000000402A50                 mov     rsi, rcx        ; format
.text:0000000000402A53                 lea     rdx, [rsp+168h+arg] ; arg
.text:0000000000402A5B                 call    _vsprintf
.text:0000000000402A60                 lea     rax, get_msg_buf
.text:0000000000402A67                 add     rsp, 150h
.text:0000000000402A6E                 pop     r14
.text:0000000000402A70                 pop     r13
.text:0000000000402A72                 pop     r12
.text:0000000000402A74                 retn
.text:0000000000402A75 ; ---------------------------------------------------------------------------
.text:0000000000402A75
.text:0000000000402A75 loc_402A75:                             ; CODE XREF: __libirc_get_msg+111↑j
.text:0000000000402A75                 mov     rax, rcx
.text:0000000000402A78                 add     rsp, 150h
.text:0000000000402A7F                 pop     r14
.text:0000000000402A81                 pop     r13
.text:0000000000402A83                 pop     r12
.text:0000000000402A85                 retn
.text:0000000000402A86 ; ---------------------------------------------------------------------------
.text:0000000000402A86
.text:0000000000402A86 loc_402A86:                             ; CODE XREF: __libirc_get_msg+A9↑j
.text:0000000000402A86                 lea     rdi, name       ; "LANG"
.text:0000000000402A8D                 call    _getenv
.text:0000000000402A92                 test    rax, rax
.text:0000000000402A95                 jz      short loc_402B07
.text:0000000000402A97                 mov     rsi, rax        ; src
.text:0000000000402A9A                 lea     rdi, [rsp+168h+dest] ; dest
.text:0000000000402A9E                 mov     edx, 80h        ; n
.text:0000000000402AA3                 call    _strncpy
.text:0000000000402AA8                 mov     esi, 2Eh ; '.'  ; c
.text:0000000000402AAD                 lea     rdi, [rsp+168h+dest] ; s
.text:0000000000402AB1                 call    _strchr
.text:0000000000402AB6                 mov     r12, rax
.text:0000000000402AB9                 test    r12, r12
.text:0000000000402ABC                 jz      short loc_402B07
.text:0000000000402ABE                 lea     rdi, name       ; "LANG"
.text:0000000000402AC5                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000402AC9                 mov     edx, 1          ; replace
.text:0000000000402ACE                 mov     byte ptr [r12], 0
.text:0000000000402AD3                 call    _setenv
.text:0000000000402AD8                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:0000000000402ADF                 xor     esi, esi        ; flag
.text:0000000000402AE1                 call    _catopen
.text:0000000000402AE6                 lea     rdi, name       ; "LANG"
.text:0000000000402AED                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000402AF1                 mov     edx, 1          ; replace
.text:0000000000402AF6                 mov     cs:message_catalog, rax
.text:0000000000402AFD                 mov     byte ptr [r12], 2Eh ; '.'
.text:0000000000402B02                 call    _setenv
.text:0000000000402B07
.text:0000000000402B07 loc_402B07:                             ; CODE XREF: __libirc_get_msg+195↑j
.text:0000000000402B07                                         ; __libirc_get_msg+1BC↑j
.text:0000000000402B07                 mov     rdi, cs:message_catalog
.text:0000000000402B0E                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000402B12                 jnz     loc_4029B6
.text:0000000000402B18                 jmp     loc_4029D4
.text:0000000000402B1D ; ---------------------------------------------------------------------------
.text:0000000000402B1D
.text:0000000000402B1D loc_402B1D:                             ; CODE XREF: __libirc_get_msg+F0↑j
.text:0000000000402B1D                 mov     rdi, cs:message_catalog
.text:0000000000402B24                 jmp     loc_4029F5
.text:0000000000402B24 __libirc_get_msg endp
.text:0000000000402B24
.text:0000000000402B24 ; ---------------------------------------------------------------------------
.text:0000000000402B29                 align 10h
.text:0000000000402B29 ; } // starts at 402900
.text:0000000000402B30
.text:0000000000402B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000402B30
.text:0000000000402B30
.text:0000000000402B30                 public __libirc_print
.text:0000000000402B30 __libirc_print  proc near               ; CODE XREF: __intel_new_feature_proc_init+248↑p
.text:0000000000402B30                                         ; __intel_new_feature_proc_init+25B↑p ...
.text:0000000000402B30
.text:0000000000402B30 dest            = byte ptr -168h
.text:0000000000402B30 var_E8          = byte ptr -0E8h
.text:0000000000402B30 var_D0          = qword ptr -0D0h
.text:0000000000402B30 var_C8          = qword ptr -0C8h
.text:0000000000402B30 var_C0          = qword ptr -0C0h
.text:0000000000402B30 var_39          = byte ptr -39h
.text:0000000000402B30 arg             = dword ptr -38h
.text:0000000000402B30 var_34          = dword ptr -34h
.text:0000000000402B30 var_30          = qword ptr -30h
.text:0000000000402B30 var_28          = qword ptr -28h
.text:0000000000402B30 arg_0           = byte ptr  8
.text:0000000000402B30
.text:0000000000402B30 ; __unwind {
.text:0000000000402B30                 push    r13
.text:0000000000402B32                 push    r14
.text:0000000000402B34                 push    r15
.text:0000000000402B36                 push    rbx
.text:0000000000402B37                 sub     rsp, 148h
.text:0000000000402B3E                 mov     [rsp+168h+var_D0], rcx
.text:0000000000402B46                 mov     [rsp+168h+var_C8], r8
.text:0000000000402B4E                 mov     [rsp+168h+var_C0], r9
.text:0000000000402B56                 movzx   r11d, al
.text:0000000000402B5A                 lea     rax, ds:0[r11*4]
.text:0000000000402B62                 lea     r11, loc_402B97
.text:0000000000402B69                 sub     r11, rax
.text:0000000000402B6C                 lea     rax, [rsp+168h+var_39]
.text:0000000000402B74                 jmp     r11
.text:0000000000402B77                 movaps  xmmword ptr [rax-0Fh], xmm7
.text:0000000000402B7B                 movaps  xmmword ptr [rax-1Fh], xmm6
.text:0000000000402B7F                 movaps  xmmword ptr [rax-2Fh], xmm5
.text:0000000000402B83                 movaps  xmmword ptr [rax-3Fh], xmm4
.text:0000000000402B87                 movaps  xmmword ptr [rax-4Fh], xmm3
.text:0000000000402B8B                 movaps  xmmword ptr [rax-5Fh], xmm2
.text:0000000000402B8F                 movaps  xmmword ptr [rax-6Fh], xmm1
.text:0000000000402B93                 movaps  xmmword ptr [rax-7Fh], xmm0
.text:0000000000402B97
.text:0000000000402B97 loc_402B97:                             ; DATA XREF: __libirc_print+32↑o
.text:0000000000402B97                 mov     r14d, esi
.text:0000000000402B9A                 mov     r15d, edx
.text:0000000000402B9D                 mov     r13d, edi
.text:0000000000402BA0                 test    r14d, r14d
.text:0000000000402BA3                 jnz     short loc_402BCC
.text:0000000000402BA5                 cmp     r13d, 1
.text:0000000000402BA9                 jz      loc_402CDE
.text:0000000000402BAF                 lea     rdi, aCaseDS+0Ch ; format
.text:0000000000402BB6                 xor     eax, eax
.text:0000000000402BB8                 call    _printf
.text:0000000000402BBD                 add     rsp, 148h
.text:0000000000402BC4                 pop     rbx
.text:0000000000402BC5                 pop     r15
.text:0000000000402BC7                 pop     r14
.text:0000000000402BC9                 pop     r13
.text:0000000000402BCB                 retn
.text:0000000000402BCC ; ---------------------------------------------------------------------------
.text:0000000000402BCC
.text:0000000000402BCC loc_402BCC:                             ; CODE XREF: __libirc_print+73↑j
.text:0000000000402BCC                 cmp     cs:first_msg, 0
.text:0000000000402BD3                 jz      short loc_402C23
.text:0000000000402BD5                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:0000000000402BDC                 xor     esi, esi        ; flag
.text:0000000000402BDE                 mov     cs:first_msg, 0
.text:0000000000402BE8                 call    _catopen
.text:0000000000402BED                 mov     cs:message_catalog, rax
.text:0000000000402BF4                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000402BF8                 jz      loc_402D05
.text:0000000000402BFE                 mov     rdi, cs:message_catalog ; catalog
.text:0000000000402C05
.text:0000000000402C05 loc_402C05:                             ; CODE XREF: __libirc_print+25D↓j
.text:0000000000402C05                 movsxd  rax, r14d
.text:0000000000402C08                 lea     rcx, off_605048 ; "\n"
.text:0000000000402C0F                 shl     rax, 4
.text:0000000000402C13                 mov     cs:use_internal_msg, 0
.text:0000000000402C1D                 mov     rcx, [rax+rcx]  ; string
.text:0000000000402C21                 jmp     short loc_402C44
.text:0000000000402C23 ; ---------------------------------------------------------------------------
.text:0000000000402C23
.text:0000000000402C23 loc_402C23:                             ; CODE XREF: __libirc_print+A3↑j
.text:0000000000402C23                                         ; __libirc_print+263↓j
.text:0000000000402C23                 mov     ebx, cs:use_internal_msg
.text:0000000000402C29                 movsxd  rax, r14d
.text:0000000000402C2C                 lea     rcx, off_605048 ; "\n"
.text:0000000000402C33                 shl     rax, 4
.text:0000000000402C37                 test    ebx, ebx
.text:0000000000402C39                 mov     rcx, [rax+rcx]
.text:0000000000402C3D                 jnz     short loc_402C54
.text:0000000000402C3F                 jmp     loc_402DD3
.text:0000000000402C44 ; ---------------------------------------------------------------------------
.text:0000000000402C44
.text:0000000000402C44 loc_402C44:                             ; CODE XREF: __libirc_print+F1↑j
.text:0000000000402C44                                         ; __libirc_print+2AA↓j
.text:0000000000402C44                 mov     esi, 1          ; set
.text:0000000000402C49                 mov     edx, r14d       ; number
.text:0000000000402C4C                 call    _catgets
.text:0000000000402C51                 mov     rcx, rax
.text:0000000000402C54
.text:0000000000402C54 loc_402C54:                             ; CODE XREF: __libirc_print+10D↑j
.text:0000000000402C54                 test    r15d, r15d
.text:0000000000402C57                 jle     short loc_402CAD
.text:0000000000402C59                 mov     [rsp+168h+arg], 18h
.text:0000000000402C64                 lea     rax, [rsp+168h+arg_0]
.text:0000000000402C6C                 mov     [rsp+168h+var_34], 30h ; '0'
.text:0000000000402C77                 lea     rdx, [rsp+168h+var_E8]
.text:0000000000402C7F                 mov     [rsp+168h+var_30], rax
.text:0000000000402C87                 mov     [rsp+168h+var_28], rdx
.text:0000000000402C8F                 lea     rdi, print_buf  ; s
.text:0000000000402C96                 mov     rsi, rcx        ; format
.text:0000000000402C99                 lea     rdx, [rsp+168h+arg] ; arg
.text:0000000000402CA1                 call    _vsprintf
.text:0000000000402CA6                 lea     rcx, print_buf
.text:0000000000402CAD
.text:0000000000402CAD loc_402CAD:                             ; CODE XREF: __libirc_print+127↑j
.text:0000000000402CAD                 cmp     r13d, 1
.text:0000000000402CB1                 jz      loc_402D98
.text:0000000000402CB7                 mov     rdi, rcx        ; format
.text:0000000000402CBA                 xor     eax, eax
.text:0000000000402CBC                 call    _printf
.text:0000000000402CC1                 lea     rdi, aCaseDS+0Ch ; format
.text:0000000000402CC8                 xor     eax, eax
.text:0000000000402CCA                 call    _printf
.text:0000000000402CCF                 add     rsp, 148h
.text:0000000000402CD6                 pop     rbx
.text:0000000000402CD7                 pop     r15
.text:0000000000402CD9                 pop     r14
.text:0000000000402CDB                 pop     r13
.text:0000000000402CDD                 retn
.text:0000000000402CDE ; ---------------------------------------------------------------------------
.text:0000000000402CDE
.text:0000000000402CDE loc_402CDE:                             ; CODE XREF: __libirc_print+79↑j
.text:0000000000402CDE                 mov     rax, cs:stderr_ptr
.text:0000000000402CE5                 lea     rsi, aCaseDS+0Ch ; format
.text:0000000000402CEC                 mov     rdi, [rax]      ; stream
.text:0000000000402CEF                 xor     eax, eax
.text:0000000000402CF1                 call    _fprintf
.text:0000000000402CF6                 add     rsp, 148h
.text:0000000000402CFD                 pop     rbx
.text:0000000000402CFE                 pop     r15
.text:0000000000402D00                 pop     r14
.text:0000000000402D02                 pop     r13
.text:0000000000402D04                 retn
.text:0000000000402D05 ; ---------------------------------------------------------------------------
.text:0000000000402D05
.text:0000000000402D05 loc_402D05:                             ; CODE XREF: __libirc_print+C8↑j
.text:0000000000402D05                 lea     rdi, name       ; "LANG"
.text:0000000000402D0C                 call    _getenv
.text:0000000000402D11                 test    rax, rax
.text:0000000000402D14                 jz      short loc_402D82
.text:0000000000402D16                 mov     rsi, rax        ; src
.text:0000000000402D19                 lea     rdi, [rsp+168h+dest] ; dest
.text:0000000000402D1D                 mov     edx, 80h        ; n
.text:0000000000402D22                 call    _strncpy
.text:0000000000402D27                 mov     esi, 2Eh ; '.'  ; c
.text:0000000000402D2C                 lea     rdi, [rsp+168h+dest] ; s
.text:0000000000402D30                 call    _strchr
.text:0000000000402D35                 mov     rbx, rax
.text:0000000000402D38                 test    rbx, rbx
.text:0000000000402D3B                 jz      short loc_402D82
.text:0000000000402D3D                 lea     rdi, name       ; "LANG"
.text:0000000000402D44                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000402D48                 mov     edx, 1          ; replace
.text:0000000000402D4D                 mov     byte ptr [rbx], 0
.text:0000000000402D50                 call    _setenv
.text:0000000000402D55                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:0000000000402D5C                 xor     esi, esi        ; flag
.text:0000000000402D5E                 call    _catopen
.text:0000000000402D63                 lea     rdi, name       ; "LANG"
.text:0000000000402D6A                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000402D6E                 mov     edx, 1          ; replace
.text:0000000000402D73                 mov     cs:message_catalog, rax
.text:0000000000402D7A                 mov     byte ptr [rbx], 2Eh ; '.'
.text:0000000000402D7D                 call    _setenv
.text:0000000000402D82
.text:0000000000402D82 loc_402D82:                             ; CODE XREF: __libirc_print+1E4↑j
.text:0000000000402D82                                         ; __libirc_print+20B↑j
.text:0000000000402D82                 mov     rdi, cs:message_catalog
.text:0000000000402D89                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000402D8D                 jnz     loc_402C05
.text:0000000000402D93                 jmp     loc_402C23
.text:0000000000402D98 ; ---------------------------------------------------------------------------
.text:0000000000402D98
.text:0000000000402D98 loc_402D98:                             ; CODE XREF: __libirc_print+181↑j
.text:0000000000402D98                 mov     rax, cs:stderr_ptr
.text:0000000000402D9F                 mov     rsi, rcx        ; format
.text:0000000000402DA2                 mov     rdi, [rax]      ; stream
.text:0000000000402DA5                 xor     eax, eax
.text:0000000000402DA7                 call    _fprintf
.text:0000000000402DAC                 mov     rax, cs:stderr_ptr
.text:0000000000402DB3                 lea     rsi, aCaseDS+0Ch ; format
.text:0000000000402DBA                 mov     rdi, [rax]      ; stream
.text:0000000000402DBD                 xor     eax, eax
.text:0000000000402DBF                 call    _fprintf
.text:0000000000402DC4                 add     rsp, 148h
.text:0000000000402DCB                 pop     rbx
.text:0000000000402DCC                 pop     r15
.text:0000000000402DCE                 pop     r14
.text:0000000000402DD0                 pop     r13
.text:0000000000402DD2                 retn
.text:0000000000402DD3 ; ---------------------------------------------------------------------------
.text:0000000000402DD3
.text:0000000000402DD3 loc_402DD3:                             ; CODE XREF: __libirc_print+10F↑j
.text:0000000000402DD3                 mov     rdi, cs:message_catalog
.text:0000000000402DDA                 jmp     loc_402C44
.text:0000000000402DDA __libirc_print  endp
.text:0000000000402DDA
.text:0000000000402DDA ; ---------------------------------------------------------------------------
.text:0000000000402DDF                 align 20h
.text:0000000000402DDF ; } // starts at 402B30
.text:0000000000402DE0
.text:0000000000402DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000402DE0
.text:0000000000402DE0
.text:0000000000402DE0                 public __intel_cpu_features_init_x
.text:0000000000402DE0 __intel_cpu_features_init_x proc near
.text:0000000000402DE0 ; __unwind {
.text:0000000000402DE0                 push    rax
.text:0000000000402DE1                 push    rdx
.text:0000000000402DE2                 push    rcx
.text:0000000000402DE3                 push    rsi
.text:0000000000402DE4                 push    rdi
.text:0000000000402DE5                 push    r8
.text:0000000000402DE7                 push    r9
.text:0000000000402DE9                 xor     edi, edi
.text:0000000000402DEB                 call    __intel_cpu_features_init_body
.text:0000000000402DF0                 pop     r9
.text:0000000000402DF2                 pop     r8
.text:0000000000402DF4                 pop     rdi
.text:0000000000402DF5                 pop     rsi
.text:0000000000402DF6                 pop     rcx
.text:0000000000402DF7                 pop     rdx
.text:0000000000402DF8                 pop     rax
.text:0000000000402DF9                 retn
.text:0000000000402DF9 __intel_cpu_features_init_x endp
.text:0000000000402DF9
.text:0000000000402DF9 ; ---------------------------------------------------------------------------
.text:0000000000402DFA                 align 20h
.text:0000000000402DFA ; } // starts at 402DE0
.text:0000000000402E00
.text:0000000000402E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000402E00
.text:0000000000402E00
.text:0000000000402E00                 public __intel_cpu_features_init
.text:0000000000402E00 __intel_cpu_features_init proc near     ; CODE XREF: __intel_new_feature_proc_init+35F↑p
.text:0000000000402E00 ; __unwind {
.text:0000000000402E00                 push    rax
.text:0000000000402E01                 push    rdx
.text:0000000000402E02                 push    rcx
.text:0000000000402E03                 push    rsi
.text:0000000000402E04                 push    rdi
.text:0000000000402E05                 push    r8
.text:0000000000402E07                 push    r9
.text:0000000000402E09                 mov     edi, 1
.text:0000000000402E0E                 call    __intel_cpu_features_init_body
.text:0000000000402E13                 pop     r9
.text:0000000000402E15                 pop     r8
.text:0000000000402E17                 pop     rdi
.text:0000000000402E18                 pop     rsi
.text:0000000000402E19                 pop     rcx
.text:0000000000402E1A                 pop     rdx
.text:0000000000402E1B                 pop     rax
.text:0000000000402E1C                 retn
.text:0000000000402E1C __intel_cpu_features_init endp
.text:0000000000402E1C
.text:0000000000402E1C ; ---------------------------------------------------------------------------
.text:0000000000402E1D                 align 20h
.text:0000000000402E1D ; } // starts at 402E00
.text:0000000000402E20
.text:0000000000402E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000402E20
.text:0000000000402E20
.text:0000000000402E20 __intel_cpu_features_init_body proc near
.text:0000000000402E20                                         ; CODE XREF: __intel_cpu_features_init_x+B↑p
.text:0000000000402E20                                         ; __intel_cpu_features_init+E↑p
.text:0000000000402E20
.text:0000000000402E20 var_18          = dword ptr -18h
.text:0000000000402E20 var_14          = dword ptr -14h
.text:0000000000402E20 var_10          = dword ptr -10h
.text:0000000000402E20 var_C           = dword ptr -0Ch
.text:0000000000402E20
.text:0000000000402E20 ; __unwind {
.text:0000000000402E20                 push    rbx
.text:0000000000402E21                 mov     r11d, edi
.text:0000000000402E24                 xor     eax, eax
.text:0000000000402E26                 cpuid
.text:0000000000402E28                 mov     [rsp+8+var_18], eax
.text:0000000000402E2C                 mov     [rsp+8+var_14], ebx
.text:0000000000402E30                 mov     [rsp+8+var_10], ecx
.text:0000000000402E34                 mov     [rsp+8+var_C], edx
.text:0000000000402E38                 xor     sil, sil
.text:0000000000402E3B                 cmp     [rsp+8+var_18], 0
.text:0000000000402E40                 jz      loc_40317F
.text:0000000000402E46                 cmp     r11d, 1
.text:0000000000402E4A                 jz      loc_40318C
.text:0000000000402E50
.text:0000000000402E50 loc_402E50:                             ; CODE XREF: __intel_cpu_features_init_body+38A↓j
.text:0000000000402E50                 mov     eax, 1
.text:0000000000402E55                 cpuid
.text:0000000000402E57                 mov     r8d, edx
.text:0000000000402E5A                 mov     r9d, eax
.text:0000000000402E5D                 and     r8d, 1
.text:0000000000402E61                 mov     edi, ecx
.text:0000000000402E63                 lea     r8, ds:1[r8*2]
.text:0000000000402E6B                 mov     rax, r8
.text:0000000000402E6E                 or      rax, 4
.text:0000000000402E72                 test    edx, 8000h
.text:0000000000402E78                 cmovnz  r8, rax
.text:0000000000402E7C                 mov     rcx, r8
.text:0000000000402E7F                 or      rcx, 8
.text:0000000000402E83                 test    edx, 800000h
.text:0000000000402E89                 cmovnz  r8, rcx
.text:0000000000402E8D                 test    edx, 1000000h
.text:0000000000402E93                 jz      loc_402F84
.text:0000000000402E99                 or      r8, 10h
.text:0000000000402E9D                 mov     r10, r8
.text:0000000000402EA0                 or      r10, 20h
.text:0000000000402EA4                 test    edx, 2000000h
.text:0000000000402EAA                 cmovnz  r8, r10
.text:0000000000402EAE                 mov     rsi, r8
.text:0000000000402EB1                 or      rsi, 40h
.text:0000000000402EB5                 test    edx, 4000000h
.text:0000000000402EBB                 cmovnz  r8, rsi
.text:0000000000402EBF                 mov     r10, r8
.text:0000000000402EC2                 or      r10, 80h
.text:0000000000402EC9                 test    edi, 1
.text:0000000000402ECF                 cmovnz  r8, r10
.text:0000000000402ED3                 mov     rax, r8
.text:0000000000402ED6                 or      rax, 100h
.text:0000000000402EDC                 test    edi, 200h
.text:0000000000402EE2                 cmovnz  r8, rax
.text:0000000000402EE6                 mov     rbx, r8
.text:0000000000402EE9                 or      rbx, 800h
.text:0000000000402EF0                 test    edi, 400000h
.text:0000000000402EF6                 cmovnz  r8, rbx
.text:0000000000402EFA                 mov     rcx, r8
.text:0000000000402EFD                 or      rcx, 200h
.text:0000000000402F04                 test    edi, 80000h
.text:0000000000402F0A                 cmovnz  r8, rcx
.text:0000000000402F0E                 mov     rdx, r8
.text:0000000000402F11                 or      rdx, 400h
.text:0000000000402F18                 test    edi, 100000h
.text:0000000000402F1E                 cmovnz  r8, rdx
.text:0000000000402F22                 mov     r10, r8
.text:0000000000402F25                 or      r10, 1000h
.text:0000000000402F2C                 test    edi, 800000h
.text:0000000000402F32                 cmovnz  r8, r10
.text:0000000000402F36                 mov     rsi, r8
.text:0000000000402F39                 or      rsi, 2000h
.text:0000000000402F40                 test    edi, 2
.text:0000000000402F46                 cmovnz  r8, rsi
.text:0000000000402F4A                 mov     sil, 1
.text:0000000000402F4D                 mov     rax, r8
.text:0000000000402F50                 or      rax, 4000h
.text:0000000000402F56                 test    edi, 2000000h
.text:0000000000402F5C                 cmovnz  r8, rax
.text:0000000000402F60                 mov     eax, 7
.text:0000000000402F65                 xor     ecx, ecx
.text:0000000000402F67                 cpuid
.text:0000000000402F69                 mov     r10d, ebx
.text:0000000000402F6C                 mov     rbx, 800000000h
.text:0000000000402F76                 or      rbx, r8
.text:0000000000402F79                 test    r10d, 20000000h
.text:0000000000402F80                 cmovnz  r8, rbx
.text:0000000000402F84
.text:0000000000402F84 loc_402F84:                             ; CODE XREF: __intel_cpu_features_init_body+73↑j
.text:0000000000402F84                 mov     rax, r8
.text:0000000000402F87                 or      rax, 20000h
.text:0000000000402F8D                 test    edi, 40000000h
.text:0000000000402F93                 cmovnz  r8, rax
.text:0000000000402F97                 test    sil, sil
.text:0000000000402F9A                 jnz     short loc_402FA8
.text:0000000000402F9C                 mov     eax, 7
.text:0000000000402FA1                 xor     ecx, ecx
.text:0000000000402FA3                 cpuid
.text:0000000000402FA5                 mov     r10d, ebx
.text:0000000000402FA8
.text:0000000000402FA8 loc_402FA8:                             ; CODE XREF: __intel_cpu_features_init_body+17A↑j
.text:0000000000402FA8                 mov     esi, r10d
.text:0000000000402FAB                 mov     rcx, r8
.text:0000000000402FAE                 and     esi, 108h
.text:0000000000402FB4                 or      rcx, 80000h
.text:0000000000402FBB                 cmp     esi, 108h
.text:0000000000402FC1                 cmovz   r8, rcx
.text:0000000000402FC5                 mov     eax, 80000001h
.text:0000000000402FCA                 cpuid
.text:0000000000402FCC                 mov     rdx, r8
.text:0000000000402FCF                 or      rdx, 100000h
.text:0000000000402FD6                 test    cl, 20h
.text:0000000000402FD9                 cmovnz  r8, rdx
.text:0000000000402FDD                 mov     rcx, r8
.text:0000000000402FE0                 or      rcx, 200000h
.text:0000000000402FE7                 test    r10d, 10h
.text:0000000000402FEE                 cmovnz  r8, rcx
.text:0000000000402FF2                 mov     rbx, r8
.text:0000000000402FF5                 or      rbx, 400000h
.text:0000000000402FFC                 test    r10d, 800h
.text:0000000000403003                 cmovnz  r8, rbx
.text:0000000000403007                 mov     rsi, r8
.text:000000000040300A                 or      rsi, 10000000h
.text:0000000000403011                 test    r10d, 80000h
.text:0000000000403018                 cmovnz  r8, rsi
.text:000000000040301C                 mov     rax, r8
.text:000000000040301F                 or      rax, 20000000h
.text:0000000000403025                 test    r10d, 40000h
.text:000000000040302C                 cmovnz  r8, rax
.text:0000000000403030                 test    edi, 8000000h
.text:0000000000403036                 jz      loc_403136
.text:000000000040303C                 xor     ecx, ecx
.text:000000000040303E                 xgetbv
.text:0000000000403041                 or      r8, 1
.text:0000000000403045                 mov     edx, eax
.text:0000000000403047                 and     edx, 6
.text:000000000040304A                 cmp     edx, 6
.text:000000000040304D                 jnz     loc_403136
.text:0000000000403053                 mov     rdx, r8
.text:0000000000403056                 or      rdx, 10000h
.text:000000000040305D                 test    edi, 10000000h
.text:0000000000403063                 cmovnz  r8, rdx
.text:0000000000403067                 mov     rcx, r8
.text:000000000040306A                 or      rcx, 8000h
.text:0000000000403071                 test    edi, 20000000h
.text:0000000000403077                 cmovnz  r8, rcx
.text:000000000040307B                 mov     rbx, r8
.text:000000000040307E                 or      rbx, 800000h
.text:0000000000403085                 test    r10d, 20h
.text:000000000040308C                 cmovnz  r8, rbx
.text:0000000000403090                 mov     rsi, r8
.text:0000000000403093                 or      rsi, 40000h
.text:000000000040309A                 test    edi, 1000h
.text:00000000004030A0                 mov     edi, eax
.text:00000000004030A2                 cmovnz  r8, rsi
.text:00000000004030A6                 and     edi, 18h
.text:00000000004030A9                 cmp     edi, 18h
.text:00000000004030AC                 jnz     short loc_4030CA
.text:00000000004030AE                 or      r8, 1
.text:00000000004030B2                 mov     rdx, 1000000000h
.text:00000000004030BC                 or      rdx, r8
.text:00000000004030BF                 test    r10d, 4000h
.text:00000000004030C6                 cmovnz  r8, rdx
.text:00000000004030CA
.text:00000000004030CA loc_4030CA:                             ; CODE XREF: __intel_cpu_features_init_body+28C↑j
.text:00000000004030CA                 and     eax, 0E0h
.text:00000000004030CF                 cmp     eax, 0E0h
.text:00000000004030D4                 jnz     short loc_403136
.text:00000000004030D6                 or      r8, 1
.text:00000000004030DA                 mov     rdx, 400000000h
.text:00000000004030E4                 mov     rax, r8
.text:00000000004030E7                 mov     rcx, 100000000h
.text:00000000004030F1                 or      rax, 8000000h
.text:00000000004030F7                 test    r10d, 10000h
.text:00000000004030FE                 mov     rbx, 200000000h
.text:0000000000403108                 cmovnz  r8, rax
.text:000000000040310C                 or      rdx, r8
.text:000000000040310F                 test    r10d, 10000000h
.text:0000000000403116                 cmovnz  r8, rdx
.text:000000000040311A                 or      rcx, r8
.text:000000000040311D                 test    r10d, 8000000h
.text:0000000000403124                 cmovnz  r8, rcx
.text:0000000000403128                 or      rbx, r8
.text:000000000040312B                 test    r10d, 4000000h
.text:0000000000403132                 cmovnz  r8, rbx
.text:0000000000403136
.text:0000000000403136 loc_403136:                             ; CODE XREF: __intel_cpu_features_init_body+216↑j
.text:0000000000403136                                         ; __intel_cpu_features_init_body+22D↑j ...
.text:0000000000403136                 mov     eax, r9d
.text:0000000000403139                 shr     eax, 0Ch
.text:000000000040313C                 shr     r9d, 4
.text:0000000000403140                 and     eax, 0F0h
.text:0000000000403145                 and     r9d, 0Fh
.text:0000000000403149                 add     eax, r9d
.text:000000000040314C                 cmp     eax, 1Ch
.text:000000000040314F                 jz      short loc_40315B
.text:0000000000403151                 cmp     eax, 26h ; '&'
.text:0000000000403154                 jz      short loc_40315B
.text:0000000000403156                 cmp     eax, 27h ; '''
.text:0000000000403159                 jnz     short loc_403160
.text:000000000040315B
.text:000000000040315B loc_40315B:                             ; CODE XREF: __intel_cpu_features_init_body+32F↑j
.text:000000000040315B                                         ; __intel_cpu_features_init_body+334↑j
.text:000000000040315B                 bts     r8, 1Fh
.text:0000000000403160
.text:0000000000403160 loc_403160:                             ; CODE XREF: __intel_cpu_features_init_body+339↑j
.text:0000000000403160                 cmp     r11d, 1
.text:0000000000403164                 jz      short loc_40316F
.text:0000000000403166                 mov     cs:__intel_cpu_feature_indicator_x, r8
.text:000000000040316D                 pop     rbx
.text:000000000040316E                 retn
.text:000000000040316F ; ---------------------------------------------------------------------------
.text:000000000040316F
.text:000000000040316F loc_40316F:                             ; CODE XREF: __intel_cpu_features_init_body+344↑j
.text:000000000040316F                 mov     cs:__intel_cpu_feature_indicator, r8
.text:0000000000403176                 mov     cs:__intel_cpu_feature_indicator_x, r8
.text:000000000040317D                 pop     rbx
.text:000000000040317E                 retn
.text:000000000040317F ; ---------------------------------------------------------------------------
.text:000000000040317F
.text:000000000040317F loc_40317F:                             ; CODE XREF: __intel_cpu_features_init_body+20↑j
.text:000000000040317F                                         ; __intel_cpu_features_init_body+374↓j ...
.text:000000000040317F                 mov     cs:__intel_cpu_feature_indicator, 1
.text:000000000040318A                 pop     rbx
.text:000000000040318B                 retn
.text:000000000040318C ; ---------------------------------------------------------------------------
.text:000000000040318C
.text:000000000040318C loc_40318C:                             ; CODE XREF: __intel_cpu_features_init_body+2A↑j
.text:000000000040318C                 cmp     [rsp+8+var_14], 756E6547h
.text:0000000000403194                 jnz     short loc_40317F
.text:0000000000403196                 cmp     [rsp+8+var_C], 49656E69h
.text:000000000040319E                 jnz     short loc_40317F
.text:00000000004031A0                 cmp     [rsp+8+var_10], 6C65746Eh
.text:00000000004031A8                 jnz     short loc_40317F
.text:00000000004031AA                 jmp     loc_402E50
.text:00000000004031AA __intel_cpu_features_init_body endp
.text:00000000004031AA
.text:00000000004031AA ; ---------------------------------------------------------------------------
.text:00000000004031AF                 align 10h
.text:00000000004031AF ; } // starts at 402E20
.text:00000000004031B0
.text:00000000004031B0 ; =============== S U B R O U T I N E =======================================
.text:00000000004031B0
.text:00000000004031B0
.text:00000000004031B0                 public __intel_proc_init_ftzdazule
.text:00000000004031B0 __intel_proc_init_ftzdazule proc near   ; CODE XREF: __intel_new_feature_proc_init+2D2↑p
.text:00000000004031B0
.text:00000000004031B0 s               = dword ptr -218h
.text:00000000004031B0 var_1FC         = dword ptr -1FCh
.text:00000000004031B0
.text:00000000004031B0 ; __unwind {
.text:00000000004031B0                 push    r15
.text:00000000004031B2                 push    rbx
.text:00000000004031B3                 push    rbp
.text:00000000004031B4                 sub     rsp, 200h
.text:00000000004031BB                 mov     ebx, esi
.text:00000000004031BD                 mov     ebp, ebx
.text:00000000004031BF                 mov     r15d, ebx
.text:00000000004031C2                 and     ebp, 4
.text:00000000004031C5                 and     r15d, 2
.text:00000000004031C9                 jz      short loc_4031D3
.text:00000000004031CB                 test    edi, 2
.text:00000000004031D1                 jz      short loc_4031DF
.text:00000000004031D3
.text:00000000004031D3 loc_4031D3:                             ; CODE XREF: __intel_proc_init_ftzdazule+19↑j
.text:00000000004031D3                 test    ebp, ebp
.text:00000000004031D5                 jz      short loc_403207
.text:00000000004031D7                 test    edi, 4
.text:00000000004031DD                 jnz     short loc_403207
.text:00000000004031DF
.text:00000000004031DF loc_4031DF:                             ; CODE XREF: __intel_proc_init_ftzdazule+21↑j
.text:00000000004031DF                 xor     esi, esi        ; c
.text:00000000004031E1                 lea     rdi, [rsp+218h+s] ; s
.text:00000000004031E5                 mov     edx, 200h       ; n
.text:00000000004031EA                 call    _memset
.text:00000000004031EF                 fxsave  [rsp+218h+s]
.text:00000000004031F3                 xor     edx, edx
.text:00000000004031F5                 mov     eax, [rsp+218h+var_1FC]
.text:00000000004031F9                 test    al, 40h
.text:00000000004031FB                 cmovz   r15d, edx
.text:00000000004031FF                 test    eax, 20000h
.text:0000000000403204                 cmovz   ebp, edx
.text:0000000000403207
.text:0000000000403207 loc_403207:                             ; CODE XREF: __intel_proc_init_ftzdazule+25↑j
.text:0000000000403207                                         ; __intel_proc_init_ftzdazule+2D↑j
.text:0000000000403207                 test    bl, 1
.text:000000000040320A                 jnz     short loc_403245
.text:000000000040320C
.text:000000000040320C loc_40320C:                             ; CODE XREF: __intel_proc_init_ftzdazule+A8↓j
.text:000000000040320C                 test    r15d, r15d
.text:000000000040320F                 jz      short loc_403222
.text:0000000000403211                 stmxcsr [rsp+218h+s]
.text:0000000000403215                 mov     eax, [rsp+218h+s]
.text:0000000000403218                 or      eax, 40h
.text:000000000040321B                 mov     [rsp+218h+s], eax
.text:000000000040321E                 ldmxcsr [rsp+218h+s]
.text:0000000000403222
.text:0000000000403222 loc_403222:                             ; CODE XREF: __intel_proc_init_ftzdazule+5F↑j
.text:0000000000403222                 test    ebp, ebp
.text:0000000000403224                 jz      short loc_403239
.text:0000000000403226                 stmxcsr [rsp+218h+s]
.text:000000000040322A                 mov     eax, [rsp+218h+s]
.text:000000000040322D                 or      eax, 20000h
.text:0000000000403232                 mov     [rsp+218h+s], eax
.text:0000000000403235                 ldmxcsr [rsp+218h+s]
.text:0000000000403239
.text:0000000000403239 loc_403239:                             ; CODE XREF: __intel_proc_init_ftzdazule+74↑j
.text:0000000000403239                 add     rsp, 200h
.text:0000000000403240                 pop     rbp
.text:0000000000403241                 pop     rbx
.text:0000000000403242                 pop     r15
.text:0000000000403244                 retn
.text:0000000000403245 ; ---------------------------------------------------------------------------
.text:0000000000403245
.text:0000000000403245 loc_403245:                             ; CODE XREF: __intel_proc_init_ftzdazule+5A↑j
.text:0000000000403245                 stmxcsr [rsp+218h+s]
.text:0000000000403249                 mov     eax, [rsp+218h+s]
.text:000000000040324C                 or      eax, 8000h
.text:0000000000403251                 mov     [rsp+218h+s], eax
.text:0000000000403254                 ldmxcsr [rsp+218h+s]
.text:0000000000403258                 jmp     short loc_40320C
.text:0000000000403258 __intel_proc_init_ftzdazule endp
.text:0000000000403258
.text:0000000000403258 ; ---------------------------------------------------------------------------
.text:000000000040325A                 align 20h
.text:000000000040325A ; } // starts at 4031B0
.text:0000000000403260
.text:0000000000403260 ; =============== S U B R O U T I N E =======================================
.text:0000000000403260
.text:0000000000403260
.text:0000000000403260 ; void _libc_csu_init(void)
.text:0000000000403260                 public __libc_csu_init
.text:0000000000403260 __libc_csu_init proc near               ; DATA XREF: _start+16↑o
.text:0000000000403260
.text:0000000000403260 var_30          = qword ptr -30h
.text:0000000000403260 var_28          = qword ptr -28h
.text:0000000000403260 var_20          = qword ptr -20h
.text:0000000000403260 var_18          = qword ptr -18h
.text:0000000000403260 var_10          = qword ptr -10h
.text:0000000000403260 var_8           = qword ptr -8
.text:0000000000403260
.text:0000000000403260 ; __unwind {
.text:0000000000403260                 mov     [rsp+var_28], rbp
.text:0000000000403265                 mov     [rsp+var_20], r12
.text:000000000040326A                 lea     rbp, __CTOR_LIST__
.text:0000000000403271                 lea     r12, __init_array_start
.text:0000000000403278                 mov     [rsp+var_18], r13
.text:000000000040327D                 mov     [rsp+var_10], r14
.text:0000000000403282                 mov     [rsp+var_8], r15
.text:0000000000403287                 mov     [rsp+var_30], rbx
.text:000000000040328C                 sub     rsp, 38h
.text:0000000000403290                 sub     rbp, r12
.text:0000000000403293                 mov     r13d, edi
.text:0000000000403296                 mov     r14, rsi
.text:0000000000403299                 sar     rbp, 3
.text:000000000040329D                 mov     r15, rdx
.text:00000000004032A0                 call    _init_proc
.text:00000000004032A5                 test    rbp, rbp
.text:00000000004032A8                 jz      short loc_4032C6
.text:00000000004032AA                 xor     ebx, ebx
.text:00000000004032AC                 nop     dword ptr [rax+00h]
.text:00000000004032B0
.text:00000000004032B0 loc_4032B0:                             ; CODE XREF: __libc_csu_init+64↓j
.text:00000000004032B0                 mov     rdx, r15        ; struct _Unwind_Exception *
.text:00000000004032B3                 mov     rsi, r14        ; int
.text:00000000004032B6                 mov     edi, r13d       ; char
.text:00000000004032B9                 call    ds:(__init_array_start - 605000h)[r12+rbx*8]
.text:00000000004032BD                 add     rbx, 1
.text:00000000004032C1                 cmp     rbx, rbp
.text:00000000004032C4                 jnz     short loc_4032B0
.text:00000000004032C6
.text:00000000004032C6 loc_4032C6:                             ; CODE XREF: __libc_csu_init+48↑j
.text:00000000004032C6                 mov     rbx, [rsp+38h+var_30]
.text:00000000004032CB                 mov     rbp, [rsp+38h+var_28]
.text:00000000004032D0                 mov     r12, [rsp+38h+var_20]
.text:00000000004032D5                 mov     r13, [rsp+38h+var_18]
.text:00000000004032DA                 mov     r14, [rsp+38h+var_10]
.text:00000000004032DF                 mov     r15, [rsp+38h+var_8]
.text:00000000004032E4                 add     rsp, 38h
.text:00000000004032E8                 retn
.text:00000000004032E8 ; } // starts at 403260
.text:00000000004032E8 __libc_csu_init endp
.text:00000000004032E8
.text:00000000004032E8 ; ---------------------------------------------------------------------------
.text:00000000004032E9                 align 10h
.text:00000000004032F0
.text:00000000004032F0 ; =============== S U B R O U T I N E =======================================
.text:00000000004032F0
.text:00000000004032F0
.text:00000000004032F0 ; void _libc_csu_fini(void)
.text:00000000004032F0                 public __libc_csu_fini
.text:00000000004032F0 __libc_csu_fini proc near               ; DATA XREF: _start+F↑o
.text:00000000004032F0 ; __unwind {
.text:00000000004032F0                 rep retn
.text:00000000004032F0 ; } // starts at 4032F0
.text:00000000004032F0 __libc_csu_fini endp
.text:00000000004032F0
.text:00000000004032F0 ; ---------------------------------------------------------------------------
.text:00000000004032F2                 align 20h
.text:0000000000403300
.text:0000000000403300 ; =============== S U B R O U T I N E =======================================
.text:0000000000403300
.text:0000000000403300 ; Attributes: bp-based frame
.text:0000000000403300
.text:0000000000403300 __do_global_ctors_aux proc near         ; CODE XREF: _init_proc+E↑p
.text:0000000000403300                 push    rbp
.text:0000000000403301                 mov     rbp, rsp
.text:0000000000403304                 push    rbx
.text:0000000000403305                 sub     rsp, 8
.text:0000000000403309                 mov     rax, cs:__CTOR_LIST__
.text:0000000000403310                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000403314                 jz      short loc_40332F
.text:0000000000403316                 mov     ebx, offset __CTOR_LIST__
.text:000000000040331B                 nop     dword ptr [rax+rax+00h]
.text:0000000000403320
.text:0000000000403320 loc_403320:                             ; CODE XREF: __do_global_ctors_aux+2D↓j
.text:0000000000403320                 sub     rbx, 8
.text:0000000000403324                 call    rax ; __CTOR_LIST__
.text:0000000000403326                 mov     rax, [rbx]
.text:0000000000403329                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000040332D                 jnz     short loc_403320
.text:000000000040332F
.text:000000000040332F loc_40332F:                             ; CODE XREF: __do_global_ctors_aux+14↑j
.text:000000000040332F                 add     rsp, 8
.text:0000000000403333                 pop     rbx
.text:0000000000403334                 pop     rbp
.text:0000000000403335                 retn
.text:0000000000403335 __do_global_ctors_aux endp
.text:0000000000403335
.text:0000000000403335 ; ---------------------------------------------------------------------------
.text:0000000000403336                 align 8
.text:0000000000403336 _text           ends
.text:0000000000403336