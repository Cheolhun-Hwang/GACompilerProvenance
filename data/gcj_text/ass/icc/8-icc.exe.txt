.text:00000000004013C0 ; =============== S U B R O U T I N E =======================================
.text:00000000004013C0
.text:00000000004013C0 ; Attributes: noreturn fuzzy-sp
.text:00000000004013C0
.text:00000000004013C0                 public _start
.text:00000000004013C0 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o
.text:00000000004013C0                 xor     ebp, ebp
.text:00000000004013C2                 mov     r9, rdx         ; rtld_fini
.text:00000000004013C5                 pop     rsi             ; argc
.text:00000000004013C6                 mov     rdx, rsp        ; ubp_av
.text:00000000004013C9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000004013CD                 push    rax
.text:00000000004013CE                 push    rsp             ; stack_end
.text:00000000004013CF                 mov     r8, offset __libc_csu_fini ; fini
.text:00000000004013D6                 mov     rcx, offset __libc_csu_init ; init
.text:00000000004013DD                 mov     rdi, offset main ; main
.text:00000000004013E4                 call    ___libc_start_main
.text:00000000004013E9                 hlt
.text:00000000004013E9 _start          endp
.text:00000000004013E9
.text:00000000004013E9 ; ---------------------------------------------------------------------------
.text:00000000004013EA                 align 4
.text:00000000004013EC
.text:00000000004013EC ; =============== S U B R O U T I N E =======================================
.text:00000000004013EC
.text:00000000004013EC
.text:00000000004013EC call_gmon_start proc near               ; CODE XREF: _init_proc+4↑p
.text:00000000004013EC                 sub     rsp, 8
.text:00000000004013F0                 mov     rax, cs:__gmon_start___ptr
.text:00000000004013F7                 test    rax, rax
.text:00000000004013FA                 jz      short loc_4013FE
.text:00000000004013FC                 call    rax ; __gmon_start__
.text:00000000004013FE
.text:00000000004013FE loc_4013FE:                             ; CODE XREF: call_gmon_start+E↑j
.text:00000000004013FE                 add     rsp, 8
.text:0000000000401402                 retn
.text:0000000000401402 call_gmon_start endp
.text:0000000000401402
.text:0000000000401402 ; ---------------------------------------------------------------------------
.text:0000000000401403                 align 10h
.text:0000000000401410
.text:0000000000401410 ; =============== S U B R O U T I N E =======================================
.text:0000000000401410
.text:0000000000401410 ; Attributes: bp-based frame
.text:0000000000401410
.text:0000000000401410 __do_global_dtors_aux proc near         ; CODE XREF: _term_proc+4↓p
.text:0000000000401410                 push    rbp
.text:0000000000401411                 mov     rbp, rsp
.text:0000000000401414                 push    rbx
.text:0000000000401415                 sub     rsp, 8
.text:0000000000401419                 cmp     cs:completed_6531, 0
.text:0000000000401420                 jnz     short loc_40146D
.text:0000000000401422                 mov     ebx, offset __DTOR_END__
.text:0000000000401427                 mov     rax, cs:dtor_idx_6533
.text:000000000040142E                 sub     rbx, offset __DTOR_LIST__
.text:0000000000401435                 sar     rbx, 3
.text:0000000000401439                 sub     rbx, 1
.text:000000000040143D                 cmp     rax, rbx
.text:0000000000401440                 jnb     short loc_401466
.text:0000000000401442                 nop     word ptr [rax+rax+00h]
.text:0000000000401448
.text:0000000000401448 loc_401448:                             ; CODE XREF: __do_global_dtors_aux+54↓j
.text:0000000000401448                 add     rax, 1
.text:000000000040144C                 mov     cs:dtor_idx_6533, rax
.text:0000000000401453                 call    ds:__DTOR_LIST__[rax*8]
.text:000000000040145A                 mov     rax, cs:dtor_idx_6533
.text:0000000000401461                 cmp     rax, rbx
.text:0000000000401464                 jb      short loc_401448
.text:0000000000401466
.text:0000000000401466 loc_401466:                             ; CODE XREF: __do_global_dtors_aux+30↑j
.text:0000000000401466                 mov     cs:completed_6531, 1
.text:000000000040146D
.text:000000000040146D loc_40146D:                             ; CODE XREF: __do_global_dtors_aux+10↑j
.text:000000000040146D                 add     rsp, 8
.text:0000000000401471                 pop     rbx
.text:0000000000401472                 pop     rbp
.text:0000000000401473                 retn
.text:0000000000401473 __do_global_dtors_aux endp
.text:0000000000401473
.text:0000000000401473 ; ---------------------------------------------------------------------------
.text:0000000000401474                 align 20h
.text:0000000000401480
.text:0000000000401480 ; =============== S U B R O U T I N E =======================================
.text:0000000000401480
.text:0000000000401480 ; Attributes: bp-based frame
.text:0000000000401480
.text:0000000000401480 frame_dummy     proc near               ; CODE XREF: _init_proc+9↑p
.text:0000000000401480                 cmp     cs:__JCR_LIST__, 0
.text:0000000000401488                 push    rbp
.text:0000000000401489                 mov     rbp, rsp
.text:000000000040148C                 jz      short loc_4014A0
.text:000000000040148E                 mov     eax, 0
.text:0000000000401493                 test    rax, rax
.text:0000000000401496                 jz      short loc_4014A0
.text:0000000000401498                 pop     rbp
.text:0000000000401499                 mov     edi, offset __JCR_LIST__
.text:000000000040149E                 jmp     rax
.text:00000000004014A0 ; ---------------------------------------------------------------------------
.text:00000000004014A0
.text:00000000004014A0 loc_4014A0:                             ; CODE XREF: frame_dummy+C↑j
.text:00000000004014A0                                         ; frame_dummy+16↑j
.text:00000000004014A0                 pop     rbp
.text:00000000004014A1                 retn
.text:00000000004014A1 frame_dummy     endp
.text:00000000004014A1
.text:00000000004014A1 ; ---------------------------------------------------------------------------
.text:00000000004014A2                 align 10h
.text:00000000004014B0
.text:00000000004014B0 ; =============== S U B R O U T I N E =======================================
.text:00000000004014B0
.text:00000000004014B0 ; Attributes: bp-based frame fuzzy-sp
.text:00000000004014B0
.text:00000000004014B0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000004014B0                 public main
.text:00000000004014B0 main            proc near               ; DATA XREF: _start+1D↑o
.text:00000000004014B0
.text:00000000004014B0 var_80          = dword ptr -80h
.text:00000000004014B0 var_7C          = byte ptr -7Ch
.text:00000000004014B0 var_7B          = byte ptr -7Bh
.text:00000000004014B0 var_7A          = byte ptr -7Ah
.text:00000000004014B0 var_79          = byte ptr -79h
.text:00000000004014B0 var_78          = qword ptr -78h
.text:00000000004014B0 var_70          = byte ptr -70h
.text:00000000004014B0 var_6F          = byte ptr -6Fh
.text:00000000004014B0 var_6E          = byte ptr -6Eh
.text:00000000004014B0 var_6D          = byte ptr -6Dh
.text:00000000004014B0 var_6C          = byte ptr -6Ch
.text:00000000004014B0 var_6B          = byte ptr -6Bh
.text:00000000004014B0 var_6A          = byte ptr -6Ah
.text:00000000004014B0 var_69          = byte ptr -69h
.text:00000000004014B0 var_68          = qword ptr -68h
.text:00000000004014B0 var_60          = qword ptr -60h
.text:00000000004014B0 var_58          = qword ptr -58h
.text:00000000004014B0 var_50          = byte ptr -50h
.text:00000000004014B0 var_4F          = byte ptr -4Fh
.text:00000000004014B0 arg_0           = qword ptr  10h
.text:00000000004014B0 arg_18          = qword ptr  28h
.text:00000000004014B0 arg_20          = qword ptr  30h
.text:00000000004014B0
.text:00000000004014B0 ; __unwind { // ___gxx_personality_v0
.text:00000000004014B0                 push    rbp
.text:00000000004014B1                 mov     rbp, rsp
.text:00000000004014B4                 and     rsp, 0FFFFFFFFFFFFFF80h
.text:00000000004014B8                 push    r12
.text:00000000004014BA                 sub     rsp, 78h
.text:00000000004014BE                 mov     rsi, 0
.text:00000000004014C8                 mov     edi, 3
.text:00000000004014CD                 call    __intel_new_feature_proc_init
.text:00000000004014D2                 stmxcsr [rsp+80h+var_80]
.text:00000000004014D6                 mov     esi, offset unk_404A64
.text:00000000004014DB                 lea     rdi, [rsp+80h+var_60]
.text:00000000004014E0                 or      [rsp+80h+var_80], 8040h
.text:00000000004014E7                 lea     rdx, [rsp+80h+var_50]
.text:00000000004014EC                 ldmxcsr [rsp+80h+var_80]
.text:00000000004014F0 ;   try {
.text:00000000004014F0                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:00000000004014F0 ;   } // starts at 4014F0
.text:00000000004014F5                 mov     esi, offset unk_404A68
.text:00000000004014FA                 lea     rdi, [rsp+80h+var_58]
.text:00000000004014FF                 lea     rdx, [rsp+80h+var_4F]
.text:0000000000401504 ;   try {
.text:0000000000401504                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0000000000401504 ;   } // starts at 401504
.text:0000000000401509                 lea     rdi, [rsp+80h+var_60]
.text:000000000040150E                 lea     rsi, [rsp+80h+var_58]
.text:0000000000401513 ;   try {
.text:0000000000401513                 call    _Z3addSsSs      ; add(std::string,std::string)
.text:0000000000401513 ;   } // starts at 401513
.text:0000000000401518                 mov     rdi, [rsp+80h+var_58]
.text:000000000040151D                 mov     r12d, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401523                 lea     rdx, [rdi-18h]
.text:0000000000401527                 cmp     rdx, r12
.text:000000000040152A                 jnz     loc_402051
.text:0000000000401530
.text:0000000000401530 loc_401530:                             ; CODE XREF: main+BC5↓j
.text:0000000000401530                                         ; main+BD8↓j
.text:0000000000401530                 mov     rdi, [rsp+80h+var_60]
.text:0000000000401535                 lea     rdx, [rdi-18h]
.text:0000000000401539                 cmp     rdx, r12
.text:000000000040153C                 jnz     loc_402015
.text:0000000000401542
.text:0000000000401542 loc_401542:                             ; CODE XREF: main+B89↓j
.text:0000000000401542                                         ; main+B9C↓j
.text:0000000000401542                 mov     esi, offset unk_404A6C
.text:0000000000401547                 lea     rdi, [rsp+80h+var_58]
.text:000000000040154C                 lea     rdx, [rsp+80h+var_4F]
.text:0000000000401551 ;   try {
.text:0000000000401551                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0000000000401551 ;   } // starts at 401551
.text:0000000000401556                 mov     esi, offset unk_404A70
.text:000000000040155B                 lea     rdi, [rsp+80h+var_60]
.text:0000000000401560                 lea     rdx, [rsp+80h+var_50]
.text:0000000000401565 ;   try {
.text:0000000000401565                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0000000000401565 ;   } // starts at 401565
.text:000000000040156A                 lea     rdi, [rsp+80h+var_58]
.text:000000000040156F                 lea     rsi, [rsp+80h+var_60]
.text:0000000000401574 ;   try {
.text:0000000000401574                 call    _Z3addSsSs      ; add(std::string,std::string)
.text:0000000000401574 ;   } // starts at 401574
.text:0000000000401579                 mov     rdi, [rsp+80h+var_60]
.text:000000000040157E                 lea     rdx, [rdi-18h]
.text:0000000000401582                 cmp     rdx, r12
.text:0000000000401585                 jnz     loc_401F51
.text:000000000040158B
.text:000000000040158B loc_40158B:                             ; CODE XREF: main+AC5↓j
.text:000000000040158B                                         ; main+AD8↓j
.text:000000000040158B                 mov     rdi, [rsp+80h+var_58]
.text:0000000000401590                 lea     rdx, [rdi-18h]
.text:0000000000401594                 cmp     rdx, r12
.text:0000000000401597                 jnz     loc_401F15
.text:000000000040159D
.text:000000000040159D loc_40159D:                             ; CODE XREF: main+A89↓j
.text:000000000040159D                                         ; main+A9C↓j
.text:000000000040159D                 mov     esi, (offset aConversionRunT+20h) ; "e"
.text:00000000004015A2                 lea     rdi, [rsp+80h+var_58]
.text:00000000004015A7                 lea     rdx, [rsp+80h+var_4F]
.text:00000000004015AC ;   try {
.text:00000000004015AC                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:00000000004015AC ;   } // starts at 4015AC
.text:00000000004015B1                 mov     esi, (offset aSsse3+4) ; "3"
.text:00000000004015B6                 lea     rdi, [rsp+80h+var_60]
.text:00000000004015BB                 lea     rdx, [rsp+80h+var_50]
.text:00000000004015C0 ;   try {
.text:00000000004015C0                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:00000000004015C0 ;   } // starts at 4015C0
.text:00000000004015C5                 lea     rdi, [rsp+80h+var_58]
.text:00000000004015CA                 lea     rsi, [rsp+80h+var_60]
.text:00000000004015CF ;   try {
.text:00000000004015CF                 call    _Z3addSsSs      ; add(std::string,std::string)
.text:00000000004015CF ;   } // starts at 4015CF
.text:00000000004015D4                 mov     rdi, [rsp+80h+var_60]
.text:00000000004015D9                 lea     rdx, [rdi-18h]
.text:00000000004015DD                 cmp     rdx, r12
.text:00000000004015E0                 jnz     loc_401E51
.text:00000000004015E6
.text:00000000004015E6 loc_4015E6:                             ; CODE XREF: main+9C5↓j
.text:00000000004015E6                                         ; main+9D8↓j
.text:00000000004015E6                 mov     rdi, [rsp+80h+var_58]
.text:00000000004015EB                 lea     rdx, [rdi-18h]
.text:00000000004015EF                 cmp     rdx, r12
.text:00000000004015F2                 jnz     loc_401E15
.text:00000000004015F8
.text:00000000004015F8 loc_4015F8:                             ; CODE XREF: main+989↓j
.text:00000000004015F8                                         ; main+99C↓j
.text:00000000004015F8                 mov     esi, offset unk_404A74
.text:00000000004015FD                 lea     rdi, [rsp+80h+var_58]
.text:0000000000401602                 lea     rdx, [rsp+80h+var_4F]
.text:0000000000401607 ;   try {
.text:0000000000401607                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0000000000401607 ;   } // starts at 401607
.text:000000000040160C                 mov     esi, offset unk_404A78
.text:0000000000401611                 lea     rdi, [rsp+80h+var_60]
.text:0000000000401616                 lea     rdx, [rsp+80h+var_50]
.text:000000000040161B ;   try {
.text:000000000040161B                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:000000000040161B ;   } // starts at 40161B
.text:0000000000401620                 lea     rdi, [rsp+80h+var_58]
.text:0000000000401625                 lea     rsi, [rsp+80h+var_60]
.text:000000000040162A ;   try {
.text:000000000040162A                 call    _Z3addSsSs      ; add(std::string,std::string)
.text:000000000040162A ;   } // starts at 40162A
.text:000000000040162F                 mov     rdi, [rsp+80h+var_60]
.text:0000000000401634                 lea     rdx, [rdi-18h]
.text:0000000000401638                 cmp     rdx, r12
.text:000000000040163B                 jnz     loc_401D51
.text:0000000000401641
.text:0000000000401641 loc_401641:                             ; CODE XREF: main+8C5↓j
.text:0000000000401641                                         ; main+8D8↓j
.text:0000000000401641                 mov     rdi, [rsp+80h+var_58]
.text:0000000000401646                 lea     rdx, [rdi-18h]
.text:000000000040164A                 cmp     rdx, r12
.text:000000000040164D                 jnz     loc_401D15
.text:0000000000401653
.text:0000000000401653 loc_401653:                             ; CODE XREF: main+889↓j
.text:0000000000401653                                         ; main+89C↓j
.text:0000000000401653                 mov     esi, (offset aIntelRPentiumR+34h) ; "s"
.text:0000000000401658                 lea     rdi, [rsp+80h+var_58]
.text:000000000040165D                 lea     rdx, [rsp+80h+var_4F]
.text:0000000000401662 ;   try {
.text:0000000000401662                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0000000000401662 ;   } // starts at 401662
.text:0000000000401667                 mov     esi, offset unk_404A7C
.text:000000000040166C                 lea     rdi, [rsp+80h+var_60]
.text:0000000000401671                 lea     rdx, [rsp+80h+var_50]
.text:0000000000401676 ;   try {
.text:0000000000401676                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0000000000401676 ;   } // starts at 401676
.text:000000000040167B                 lea     rdi, [rsp+80h+var_58]
.text:0000000000401680                 lea     rsi, [rsp+80h+var_60]
.text:0000000000401685 ;   try {
.text:0000000000401685                 call    _Z3addSsSs      ; add(std::string,std::string)
.text:0000000000401685 ;   } // starts at 401685
.text:000000000040168A                 mov     rdi, [rsp+80h+var_60]
.text:000000000040168F                 lea     rdx, [rdi-18h]
.text:0000000000401693                 cmp     rdx, r12
.text:0000000000401696                 jnz     loc_401C51
.text:000000000040169C
.text:000000000040169C loc_40169C:                             ; CODE XREF: main+7C5↓j
.text:000000000040169C                                         ; main+7D8↓j
.text:000000000040169C                 mov     rdi, [rsp+80h+var_58]
.text:00000000004016A1                 lea     rdx, [rdi-18h]
.text:00000000004016A5                 cmp     rdx, r12
.text:00000000004016A8                 jnz     loc_401C15
.text:00000000004016AE
.text:00000000004016AE loc_4016AE:                             ; CODE XREF: main+789↓j
.text:00000000004016AE                                         ; main+79C↓j
.text:00000000004016AE                 mov     esi, offset unk_404A80
.text:00000000004016B3                 lea     rdi, [rsp+80h+var_58]
.text:00000000004016B8                 lea     rdx, [rsp+80h+var_4F]
.text:00000000004016BD ;   try {
.text:00000000004016BD                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:00000000004016BD ;   } // starts at 4016BD
.text:00000000004016C2                 mov     esi, offset unk_404A84
.text:00000000004016C7                 lea     rdi, [rsp+80h+var_60]
.text:00000000004016CC                 lea     rdx, [rsp+80h+var_50]
.text:00000000004016D1 ;   try {
.text:00000000004016D1                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:00000000004016D1 ;   } // starts at 4016D1
.text:00000000004016D6                 lea     rdi, [rsp+80h+var_58]
.text:00000000004016DB                 lea     rsi, [rsp+80h+var_60]
.text:00000000004016E0 ;   try {
.text:00000000004016E0                 call    _Z3addSsSs      ; add(std::string,std::string)
.text:00000000004016E0 ;   } // starts at 4016E0
.text:00000000004016E5                 mov     rdi, [rsp+80h+var_60]
.text:00000000004016EA                 lea     rdx, [rdi-18h]
.text:00000000004016EE                 cmp     rdx, r12
.text:00000000004016F1                 jnz     loc_401B51
.text:00000000004016F7
.text:00000000004016F7 loc_4016F7:                             ; CODE XREF: main+6C5↓j
.text:00000000004016F7                                         ; main+6D8↓j
.text:00000000004016F7                 mov     rdi, [rsp+80h+var_58]
.text:00000000004016FC                 lea     rdx, [rdi-18h]
.text:0000000000401700                 cmp     rdx, r12
.text:0000000000401703                 jnz     loc_401B15
.text:0000000000401709
.text:0000000000401709 loc_401709:                             ; CODE XREF: main+689↓j
.text:0000000000401709                                         ; main+69C↓j
.text:0000000000401709                 mov     esi, offset unk_404A88
.text:000000000040170E                 lea     rdi, [rsp+80h+var_58]
.text:0000000000401713                 lea     rdx, [rsp+80h+var_4F]
.text:0000000000401718 ;   try {
.text:0000000000401718                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0000000000401718 ;   } // starts at 401718
.text:000000000040171D                 mov     esi, offset unk_404A8C
.text:0000000000401722                 lea     rdi, [rsp+80h+var_60]
.text:0000000000401727                 lea     rdx, [rsp+80h+var_50]
.text:000000000040172C ;   try {
.text:000000000040172C                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:000000000040172C ;   } // starts at 40172C
.text:0000000000401731                 lea     rdi, [rsp+80h+var_58]
.text:0000000000401736                 lea     rsi, [rsp+80h+var_60]
.text:000000000040173B ;   try {
.text:000000000040173B                 call    _Z3addSsSs      ; add(std::string,std::string)
.text:000000000040173B ;   } // starts at 40173B
.text:0000000000401740                 mov     rdi, [rsp+80h+var_60]
.text:0000000000401745                 lea     rdx, [rdi-18h]
.text:0000000000401749                 cmp     rdx, r12
.text:000000000040174C                 jnz     loc_401A51
.text:0000000000401752
.text:0000000000401752 loc_401752:                             ; CODE XREF: main+5C5↓j
.text:0000000000401752                                         ; main+5D8↓j
.text:0000000000401752                 mov     rdi, [rsp+80h+var_58]
.text:0000000000401757                 lea     rdx, [rdi-18h]
.text:000000000040175B                 cmp     rdx, r12
.text:000000000040175E                 jnz     loc_401A15
.text:0000000000401764
.text:0000000000401764 loc_401764:                             ; CODE XREF: main+589↓j
.text:0000000000401764                                         ; main+59C↓j
.text:0000000000401764                 mov     esi, offset unk_404A90
.text:0000000000401769                 lea     rdi, [rsp+80h+var_58]
.text:000000000040176E                 lea     rdx, [rsp+80h+var_4F]
.text:0000000000401773 ;   try {
.text:0000000000401773                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0000000000401773 ;   } // starts at 401773
.text:0000000000401778                 mov     esi, offset unk_404A94
.text:000000000040177D                 lea     rdi, [rsp+80h+var_60]
.text:0000000000401782                 lea     rdx, [rsp+80h+var_50]
.text:0000000000401787 ;   try {
.text:0000000000401787                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0000000000401787 ;   } // starts at 401787
.text:000000000040178C                 lea     rdi, [rsp+80h+var_58]
.text:0000000000401791                 lea     rsi, [rsp+80h+var_60]
.text:0000000000401796 ;   try {
.text:0000000000401796                 call    _Z3addSsSs      ; add(std::string,std::string)
.text:0000000000401796 ;   } // starts at 401796
.text:000000000040179B                 mov     rdi, [rsp+80h+var_60]
.text:00000000004017A0                 lea     rdx, [rdi-18h]
.text:00000000004017A4                 cmp     rdx, r12
.text:00000000004017A7                 jnz     loc_401956
.text:00000000004017AD
.text:00000000004017AD loc_4017AD:                             ; CODE XREF: main+4CA↓j
.text:00000000004017AD                                         ; main+4DC↓j
.text:00000000004017AD                 mov     rdi, [rsp+80h+var_58]
.text:00000000004017B2                 lea     rdx, [rdi-18h]
.text:00000000004017B6                 cmp     rdx, r12
.text:00000000004017B9                 jnz     loc_40191A
.text:00000000004017BF
.text:00000000004017BF loc_4017BF:                             ; CODE XREF: main+48E↓j
.text:00000000004017BF                                         ; main+4A1↓j
.text:00000000004017BF                 mov     edi, offset _ZSt3cin@@GLIBCXX_3_4
.text:00000000004017C4                 lea     rsi, [rsp+80h+var_78]
.text:00000000004017C9                 call    __ZNSirsERi     ; std::istream::operator>>(int &)
.text:00000000004017CE                 mov     esi, dword ptr [rsp+80h+var_78]
.text:00000000004017D2                 xor     r12d, r12d
.text:00000000004017D5                 test    esi, esi
.text:00000000004017D7                 jle     loc_4018BD
.text:00000000004017DD                 mov     [rsp+80h+var_68], r13
.text:00000000004017E2
.text:00000000004017E2 loc_4017E2:                             ; CODE XREF: main+402↓j
.text:00000000004017E2                 mov     edi, offset _ZSt4cerr@@GLIBCXX_3_4
.text:00000000004017E7                 mov     esi, r12d
.text:00000000004017EA                 call    __ZNSolsEi      ; std::ostream::operator<<(int)
.text:00000000004017EF                 mov     rdi, rax
.text:00000000004017F2                 mov     esi, offset unk_404A98
.text:00000000004017F7                 call    __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const*)
.text:00000000004017FC                 mov     rdi, rax
.text:00000000004017FF                 mov     esi, dword ptr [rsp+80h+var_78]
.text:0000000000401803                 call    __ZNSolsEi      ; std::ostream::operator<<(int)
.text:0000000000401808                 mov     rdi, rax
.text:000000000040180B                 mov     esi, 20h ; ' '
.text:0000000000401810                 call    __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char)
.text:0000000000401815                 mov     r13, rax
.text:0000000000401818                 call    _clock
.text:000000000040181D                 mov     rdi, r13
.text:0000000000401820                 mov     rsi, rax
.text:0000000000401823                 call    __ZNSolsEl      ; std::ostream::operator<<(long)
.text:0000000000401828                 mov     rdi, rax
.text:000000000040182B                 mov     esi, offset __ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ ; std::endl<char,std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &)
.text:0000000000401830                 call    __ZNSolsEPFRSoS_E ; std::ostream::operator<<(std::ostream & (*)(std::ostream &))
.text:0000000000401835                 mov     edi, offset _ZSt3cin@@GLIBCXX_3_4
.text:000000000040183A                 mov     esi, offset k
.text:000000000040183F                 call    __ZNSirsERi     ; std::istream::operator>>(int &)
.text:0000000000401844                 mov     edi, offset format ; "%s"
.text:0000000000401849                 mov     esi, offset buf
.text:000000000040184E                 xor     eax, eax
.text:0000000000401850                 call    _scanf
.text:0000000000401855                 mov     edx, offset buf
.text:000000000040185A                 mov     rcx, rdx
.text:000000000040185D                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:0000000000401861                 pxor    xmm0, xmm0
.text:0000000000401865                 pcmpeqb xmm0, xmmword ptr [rdx]
.text:0000000000401869                 pmovmskb eax, xmm0
.text:000000000040186D                 and     ecx, 0Fh
.text:0000000000401870                 shr     eax, cl
.text:0000000000401872                 bsf     eax, eax
.text:0000000000401875                 jnz     short loc_401882
.text:0000000000401877                 mov     rax, rdx
.text:000000000040187A                 add     rdx, rcx
.text:000000000040187D                 call    __intel_sse2_strlen
.text:0000000000401882
.text:0000000000401882 loc_401882:                             ; CODE XREF: main+3C5↑j
.text:0000000000401882                 mov     edi, offset s   ; this
.text:0000000000401887                 mov     esi, offset buf ; char *
.text:000000000040188C                 mov     rdx, rax        ; unsigned __int64
.text:000000000040188F                 call    __ZNSs6assignEPKcm ; std::string::assign(char const*,ulong)
.text:0000000000401894                 inc     r12d
.text:0000000000401897                 mov     edi, offset aCaseD ; "Case #%d: "
.text:000000000040189C                 mov     esi, r12d
.text:000000000040189F                 xor     eax, eax
.text:00000000004018A1                 call    _printf
.text:00000000004018A6                 call    _Z5solvev       ; solve(void)
.text:00000000004018AB                 mov     esi, dword ptr [rsp+80h+var_78]
.text:00000000004018AF                 cmp     r12d, esi
.text:00000000004018B2                 jl      loc_4017E2
.text:00000000004018B8                 mov     r13, [rsp+80h+var_68]
.text:00000000004018BD
.text:00000000004018BD loc_4018BD:                             ; CODE XREF: main+327↑j
.text:00000000004018BD                 mov     edi, offset _ZSt4cerr@@GLIBCXX_3_4
.text:00000000004018C2                 call    __ZNSolsEi      ; std::ostream::operator<<(int)
.text:00000000004018C7                 mov     rdi, rax
.text:00000000004018CA                 mov     esi, offset unk_404A98
.text:00000000004018CF                 call    __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const*)
.text:00000000004018D4                 mov     rdi, rax
.text:00000000004018D7                 mov     esi, dword ptr [rsp+80h+var_78]
.text:00000000004018DB                 call    __ZNSolsEi      ; std::ostream::operator<<(int)
.text:00000000004018E0                 mov     rdi, rax
.text:00000000004018E3                 mov     esi, 20h ; ' '
.text:00000000004018E8                 call    __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char)
.text:00000000004018ED                 mov     r12, rax
.text:00000000004018F0                 call    _clock
.text:00000000004018F5                 mov     rdi, r12
.text:00000000004018F8                 mov     rsi, rax
.text:00000000004018FB                 call    __ZNSolsEl      ; std::ostream::operator<<(long)
.text:0000000000401900                 mov     rdi, rax
.text:0000000000401903                 mov     esi, offset __ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ ; std::endl<char,std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &)
.text:0000000000401908                 call    __ZNSolsEPFRSoS_E ; std::ostream::operator<<(std::ostream & (*)(std::ostream &))
.text:000000000040190D                 xor     eax, eax
.text:000000000040190F                 add     rsp, 78h
.text:0000000000401913                 pop     r12
.text:0000000000401915                 mov     rsp, rbp
.text:0000000000401918                 pop     rbp
.text:0000000000401919                 retn
.text:000000000040191A ; ---------------------------------------------------------------------------
.text:000000000040191A
.text:000000000040191A loc_40191A:                             ; CODE XREF: main+309↑j
.text:000000000040191A                 mov     eax, 0
.text:000000000040191F                 test    rax, rax
.text:0000000000401922                 jz      short loc_401933
.text:0000000000401924                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401928                 mov     ecx, 0FFFFFFFFh
.text:000000000040192D                 lock xadd [rdi], ecx
.text:0000000000401931                 jmp     short loc_40193C
.text:0000000000401933 ; ---------------------------------------------------------------------------
.text:0000000000401933
.text:0000000000401933 loc_401933:                             ; CODE XREF: main+472↑j
.text:0000000000401933                 mov     ecx, [rdx+10h]
.text:0000000000401936                 lea     eax, [rcx-1]
.text:0000000000401939                 mov     [rdx+10h], eax
.text:000000000040193C
.text:000000000040193C loc_40193C:                             ; CODE XREF: main+481↑j
.text:000000000040193C                 test    ecx, ecx
.text:000000000040193E                 jg      loc_4017BF
.text:0000000000401944                 mov     rdi, rdx
.text:0000000000401947                 lea     rsi, [rsp+80h+var_80+1]
.text:000000000040194C                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401951                 jmp     loc_4017BF
.text:0000000000401956 ; ---------------------------------------------------------------------------
.text:0000000000401956
.text:0000000000401956 loc_401956:                             ; CODE XREF: main+2F7↑j
.text:0000000000401956                 mov     eax, 0
.text:000000000040195B                 test    rax, rax
.text:000000000040195E                 jz      short loc_40196F
.text:0000000000401960                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401964                 mov     ecx, 0FFFFFFFFh
.text:0000000000401969                 lock xadd [rdi], ecx
.text:000000000040196D                 jmp     short loc_401978
.text:000000000040196F ; ---------------------------------------------------------------------------
.text:000000000040196F
.text:000000000040196F loc_40196F:                             ; CODE XREF: main+4AE↑j
.text:000000000040196F                 mov     ecx, [rdx+10h]
.text:0000000000401972                 lea     eax, [rcx-1]
.text:0000000000401975                 mov     [rdx+10h], eax
.text:0000000000401978
.text:0000000000401978 loc_401978:                             ; CODE XREF: main+4BD↑j
.text:0000000000401978                 test    ecx, ecx
.text:000000000040197A                 jg      loc_4017AD
.text:0000000000401980                 mov     rdi, rdx
.text:0000000000401983                 lea     rsi, [rsp+80h+var_80]
.text:0000000000401987                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:000000000040198C                 jmp     loc_4017AD
.text:0000000000401991 ; ---------------------------------------------------------------------------
.text:0000000000401991 ;   cleanup() // owned by 401796
.text:0000000000401991                 mov     [rsp-8+arg_0], rax
.text:0000000000401996                 mov     rdi, [rsp-8+arg_18]
.text:000000000040199B                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:00000000004019A0                 lea     r12, [rdi-18h]
.text:00000000004019A4                 cmp     r12, rax
.text:00000000004019A7                 jnz     short loc_4019E6
.text:00000000004019A9
.text:00000000004019A9 loc_4019A9:                             ; CODE XREF: main+546↓j
.text:00000000004019A9                                         ; main+555↓j ...
.text:00000000004019A9                 mov     rdi, [rsp-8+arg_20]
.text:00000000004019AE                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:00000000004019B3                 lea     r12, [rdi-18h]
.text:00000000004019B7                 cmp     r12, rax
.text:00000000004019BA                 jnz     short loc_4019C6
.text:00000000004019BC
.text:00000000004019BC loc_4019BC:                             ; CODE XREF: main+526↓j
.text:00000000004019BC                                         ; main+534↓j ...
.text:00000000004019BC                 mov     rdi, [rsp-8+arg_0] ; struct _Unwind_Exception *
.text:00000000004019C1                 call    __Unwind_Resume
.text:00000000004019C6 ; ---------------------------------------------------------------------------
.text:00000000004019C6
.text:00000000004019C6 loc_4019C6:                             ; CODE XREF: main+50A↑j
.text:00000000004019C6                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:00000000004019CA                 mov     esi, 0FFFFFFFFh ; int
.text:00000000004019CF                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:00000000004019D4                 test    eax, eax
.text:00000000004019D6                 jg      short loc_4019BC
.text:00000000004019D8                 mov     rdi, r12
.text:00000000004019DB                 lea     rsi, [rsp+0]
.text:00000000004019DF                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:00000000004019E4                 jmp     short loc_4019BC
.text:00000000004019E6 ; ---------------------------------------------------------------------------
.text:00000000004019E6
.text:00000000004019E6 loc_4019E6:                             ; CODE XREF: main+4F7↑j
.text:00000000004019E6                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:00000000004019EA                 mov     esi, 0FFFFFFFFh ; int
.text:00000000004019EF                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:00000000004019F4                 test    eax, eax
.text:00000000004019F6                 jg      short loc_4019A9
.text:00000000004019F8                 mov     rdi, r12
.text:00000000004019FB                 lea     rsi, [rsp+1]
.text:0000000000401A00                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401A05                 jmp     short loc_4019A9
.text:0000000000401A07 ; ---------------------------------------------------------------------------
.text:0000000000401A07 ;   cleanup() // owned by 401787
.text:0000000000401A07                 mov     [rsp-8+arg_0], rax
.text:0000000000401A0C                 jmp     short loc_4019A9
.text:0000000000401A0E ; ---------------------------------------------------------------------------
.text:0000000000401A0E ;   cleanup() // owned by 401773
.text:0000000000401A0E                 mov     [rsp-8+arg_0], rax
.text:0000000000401A13                 jmp     short loc_4019BC
.text:0000000000401A15 ; ---------------------------------------------------------------------------
.text:0000000000401A15
.text:0000000000401A15 loc_401A15:                             ; CODE XREF: main+2AE↑j
.text:0000000000401A15                 mov     eax, 0
.text:0000000000401A1A                 test    rax, rax
.text:0000000000401A1D                 jz      short loc_401A2E
.text:0000000000401A1F                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401A23                 mov     ecx, 0FFFFFFFFh
.text:0000000000401A28                 lock xadd [rdi], ecx
.text:0000000000401A2C                 jmp     short loc_401A37
.text:0000000000401A2E ; ---------------------------------------------------------------------------
.text:0000000000401A2E
.text:0000000000401A2E loc_401A2E:                             ; CODE XREF: main+56D↑j
.text:0000000000401A2E                 mov     ecx, [rdx+10h]
.text:0000000000401A31                 lea     eax, [rcx-1]
.text:0000000000401A34                 mov     [rdx+10h], eax
.text:0000000000401A37
.text:0000000000401A37 loc_401A37:                             ; CODE XREF: main+57C↑j
.text:0000000000401A37                 test    ecx, ecx
.text:0000000000401A39                 jg      loc_401764
.text:0000000000401A3F                 mov     rdi, rdx
.text:0000000000401A42                 lea     rsi, [rsp+80h+var_69]
.text:0000000000401A47                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401A4C                 jmp     loc_401764
.text:0000000000401A51 ; ---------------------------------------------------------------------------
.text:0000000000401A51
.text:0000000000401A51 loc_401A51:                             ; CODE XREF: main+29C↑j
.text:0000000000401A51                 mov     eax, 0
.text:0000000000401A56                 test    rax, rax
.text:0000000000401A59                 jz      short loc_401A6A
.text:0000000000401A5B                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401A5F                 mov     ecx, 0FFFFFFFFh
.text:0000000000401A64                 lock xadd [rdi], ecx
.text:0000000000401A68                 jmp     short loc_401A73
.text:0000000000401A6A ; ---------------------------------------------------------------------------
.text:0000000000401A6A
.text:0000000000401A6A loc_401A6A:                             ; CODE XREF: main+5A9↑j
.text:0000000000401A6A                 mov     ecx, [rdx+10h]
.text:0000000000401A6D                 lea     eax, [rcx-1]
.text:0000000000401A70                 mov     [rdx+10h], eax
.text:0000000000401A73
.text:0000000000401A73 loc_401A73:                             ; CODE XREF: main+5B8↑j
.text:0000000000401A73                 test    ecx, ecx
.text:0000000000401A75                 jg      loc_401752
.text:0000000000401A7B                 mov     rdi, rdx
.text:0000000000401A7E                 lea     rsi, [rsp+80h+var_6A]
.text:0000000000401A83                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401A88                 jmp     loc_401752
.text:0000000000401A8D ; ---------------------------------------------------------------------------
.text:0000000000401A8D ;   cleanup() // owned by 40173B
.text:0000000000401A8D                 mov     [rsp-8+arg_0], rax
.text:0000000000401A92                 mov     rdi, [rsp-8+arg_18]
.text:0000000000401A97                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401A9C                 lea     r12, [rdi-18h]
.text:0000000000401AA0                 cmp     r12, rax
.text:0000000000401AA3                 jnz     short loc_401AE3
.text:0000000000401AA5
.text:0000000000401AA5 loc_401AA5:                             ; CODE XREF: main+643↓j
.text:0000000000401AA5                                         ; main+652↓j ...
.text:0000000000401AA5                 mov     rdi, [rsp-8+arg_20]
.text:0000000000401AAA                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401AAF                 lea     r12, [rdi-18h]
.text:0000000000401AB3                 cmp     r12, rax
.text:0000000000401AB6                 jz      loc_4019BC
.text:0000000000401ABC                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401AC0                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401AC5                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401ACA                 test    eax, eax
.text:0000000000401ACC                 jg      loc_4019BC
.text:0000000000401AD2                 mov     rdi, r12
.text:0000000000401AD5                 lea     rsi, [rsp+0]
.text:0000000000401AD9                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401ADE                 jmp     loc_4019BC
.text:0000000000401AE3 ; ---------------------------------------------------------------------------
.text:0000000000401AE3
.text:0000000000401AE3 loc_401AE3:                             ; CODE XREF: main+5F3↑j
.text:0000000000401AE3                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401AE7                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401AEC                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401AF1                 test    eax, eax
.text:0000000000401AF3                 jg      short loc_401AA5
.text:0000000000401AF5                 mov     rdi, r12
.text:0000000000401AF8                 lea     rsi, [rsp+1]
.text:0000000000401AFD                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401B02                 jmp     short loc_401AA5
.text:0000000000401B04 ; ---------------------------------------------------------------------------
.text:0000000000401B04 ;   cleanup() // owned by 40172C
.text:0000000000401B04                 mov     [rsp-8+arg_0], rax
.text:0000000000401B09                 jmp     short loc_401AA5
.text:0000000000401B0B ; ---------------------------------------------------------------------------
.text:0000000000401B0B ;   cleanup() // owned by 401718
.text:0000000000401B0B                 mov     [rsp-8+arg_0], rax
.text:0000000000401B10                 jmp     loc_4019BC
.text:0000000000401B15 ; ---------------------------------------------------------------------------
.text:0000000000401B15
.text:0000000000401B15 loc_401B15:                             ; CODE XREF: main+253↑j
.text:0000000000401B15                 mov     eax, 0
.text:0000000000401B1A                 test    rax, rax
.text:0000000000401B1D                 jz      short loc_401B2E
.text:0000000000401B1F                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401B23                 mov     ecx, 0FFFFFFFFh
.text:0000000000401B28                 lock xadd [rdi], ecx
.text:0000000000401B2C                 jmp     short loc_401B37
.text:0000000000401B2E ; ---------------------------------------------------------------------------
.text:0000000000401B2E
.text:0000000000401B2E loc_401B2E:                             ; CODE XREF: main+66D↑j
.text:0000000000401B2E                 mov     ecx, [rdx+10h]
.text:0000000000401B31                 lea     eax, [rcx-1]
.text:0000000000401B34                 mov     [rdx+10h], eax
.text:0000000000401B37
.text:0000000000401B37 loc_401B37:                             ; CODE XREF: main+67C↑j
.text:0000000000401B37                 test    ecx, ecx
.text:0000000000401B39                 jg      loc_401709
.text:0000000000401B3F                 mov     rdi, rdx
.text:0000000000401B42                 lea     rsi, [rsp+80h+var_6B]
.text:0000000000401B47                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401B4C                 jmp     loc_401709
.text:0000000000401B51 ; ---------------------------------------------------------------------------
.text:0000000000401B51
.text:0000000000401B51 loc_401B51:                             ; CODE XREF: main+241↑j
.text:0000000000401B51                 mov     eax, 0
.text:0000000000401B56                 test    rax, rax
.text:0000000000401B59                 jz      short loc_401B6A
.text:0000000000401B5B                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401B5F                 mov     ecx, 0FFFFFFFFh
.text:0000000000401B64                 lock xadd [rdi], ecx
.text:0000000000401B68                 jmp     short loc_401B73
.text:0000000000401B6A ; ---------------------------------------------------------------------------
.text:0000000000401B6A
.text:0000000000401B6A loc_401B6A:                             ; CODE XREF: main+6A9↑j
.text:0000000000401B6A                 mov     ecx, [rdx+10h]
.text:0000000000401B6D                 lea     eax, [rcx-1]
.text:0000000000401B70                 mov     [rdx+10h], eax
.text:0000000000401B73
.text:0000000000401B73 loc_401B73:                             ; CODE XREF: main+6B8↑j
.text:0000000000401B73                 test    ecx, ecx
.text:0000000000401B75                 jg      loc_4016F7
.text:0000000000401B7B                 mov     rdi, rdx
.text:0000000000401B7E                 lea     rsi, [rsp+80h+var_6C]
.text:0000000000401B83                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401B88                 jmp     loc_4016F7
.text:0000000000401B8D ; ---------------------------------------------------------------------------
.text:0000000000401B8D ;   cleanup() // owned by 4016E0
.text:0000000000401B8D                 mov     [rsp-8+arg_0], rax
.text:0000000000401B92                 mov     rdi, [rsp-8+arg_18]
.text:0000000000401B97                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401B9C                 lea     r12, [rdi-18h]
.text:0000000000401BA0                 cmp     r12, rax
.text:0000000000401BA3                 jnz     short loc_401BE3
.text:0000000000401BA5
.text:0000000000401BA5 loc_401BA5:                             ; CODE XREF: main+743↓j
.text:0000000000401BA5                                         ; main+752↓j ...
.text:0000000000401BA5                 mov     rdi, [rsp-8+arg_20]
.text:0000000000401BAA                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401BAF                 lea     r12, [rdi-18h]
.text:0000000000401BB3                 cmp     r12, rax
.text:0000000000401BB6                 jz      loc_4019BC
.text:0000000000401BBC                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401BC0                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401BC5                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401BCA                 test    eax, eax
.text:0000000000401BCC                 jg      loc_4019BC
.text:0000000000401BD2                 mov     rdi, r12
.text:0000000000401BD5                 lea     rsi, [rsp+0]
.text:0000000000401BD9                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401BDE                 jmp     loc_4019BC
.text:0000000000401BE3 ; ---------------------------------------------------------------------------
.text:0000000000401BE3
.text:0000000000401BE3 loc_401BE3:                             ; CODE XREF: main+6F3↑j
.text:0000000000401BE3                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401BE7                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401BEC                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401BF1                 test    eax, eax
.text:0000000000401BF3                 jg      short loc_401BA5
.text:0000000000401BF5                 mov     rdi, r12
.text:0000000000401BF8                 lea     rsi, [rsp+1]
.text:0000000000401BFD                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401C02                 jmp     short loc_401BA5
.text:0000000000401C04 ; ---------------------------------------------------------------------------
.text:0000000000401C04 ;   cleanup() // owned by 4016D1
.text:0000000000401C04                 mov     [rsp-8+arg_0], rax
.text:0000000000401C09                 jmp     short loc_401BA5
.text:0000000000401C0B ; ---------------------------------------------------------------------------
.text:0000000000401C0B ;   cleanup() // owned by 4016BD
.text:0000000000401C0B                 mov     [rsp-8+arg_0], rax
.text:0000000000401C10                 jmp     loc_4019BC
.text:0000000000401C15 ; ---------------------------------------------------------------------------
.text:0000000000401C15
.text:0000000000401C15 loc_401C15:                             ; CODE XREF: main+1F8↑j
.text:0000000000401C15                 mov     eax, 0
.text:0000000000401C1A                 test    rax, rax
.text:0000000000401C1D                 jz      short loc_401C2E
.text:0000000000401C1F                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401C23                 mov     ecx, 0FFFFFFFFh
.text:0000000000401C28                 lock xadd [rdi], ecx
.text:0000000000401C2C                 jmp     short loc_401C37
.text:0000000000401C2E ; ---------------------------------------------------------------------------
.text:0000000000401C2E
.text:0000000000401C2E loc_401C2E:                             ; CODE XREF: main+76D↑j
.text:0000000000401C2E                 mov     ecx, [rdx+10h]
.text:0000000000401C31                 lea     eax, [rcx-1]
.text:0000000000401C34                 mov     [rdx+10h], eax
.text:0000000000401C37
.text:0000000000401C37 loc_401C37:                             ; CODE XREF: main+77C↑j
.text:0000000000401C37                 test    ecx, ecx
.text:0000000000401C39                 jg      loc_4016AE
.text:0000000000401C3F                 mov     rdi, rdx
.text:0000000000401C42                 lea     rsi, [rsp+80h+var_6D]
.text:0000000000401C47                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401C4C                 jmp     loc_4016AE
.text:0000000000401C51 ; ---------------------------------------------------------------------------
.text:0000000000401C51
.text:0000000000401C51 loc_401C51:                             ; CODE XREF: main+1E6↑j
.text:0000000000401C51                 mov     eax, 0
.text:0000000000401C56                 test    rax, rax
.text:0000000000401C59                 jz      short loc_401C6A
.text:0000000000401C5B                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401C5F                 mov     ecx, 0FFFFFFFFh
.text:0000000000401C64                 lock xadd [rdi], ecx
.text:0000000000401C68                 jmp     short loc_401C73
.text:0000000000401C6A ; ---------------------------------------------------------------------------
.text:0000000000401C6A
.text:0000000000401C6A loc_401C6A:                             ; CODE XREF: main+7A9↑j
.text:0000000000401C6A                 mov     ecx, [rdx+10h]
.text:0000000000401C6D                 lea     eax, [rcx-1]
.text:0000000000401C70                 mov     [rdx+10h], eax
.text:0000000000401C73
.text:0000000000401C73 loc_401C73:                             ; CODE XREF: main+7B8↑j
.text:0000000000401C73                 test    ecx, ecx
.text:0000000000401C75                 jg      loc_40169C
.text:0000000000401C7B                 mov     rdi, rdx
.text:0000000000401C7E                 lea     rsi, [rsp+80h+var_6E]
.text:0000000000401C83                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401C88                 jmp     loc_40169C
.text:0000000000401C8D ; ---------------------------------------------------------------------------
.text:0000000000401C8D ;   cleanup() // owned by 401685
.text:0000000000401C8D                 mov     [rsp-8+arg_0], rax
.text:0000000000401C92                 mov     rdi, [rsp-8+arg_18]
.text:0000000000401C97                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401C9C                 lea     r12, [rdi-18h]
.text:0000000000401CA0                 cmp     r12, rax
.text:0000000000401CA3                 jnz     short loc_401CE3
.text:0000000000401CA5
.text:0000000000401CA5 loc_401CA5:                             ; CODE XREF: main+843↓j
.text:0000000000401CA5                                         ; main+852↓j ...
.text:0000000000401CA5                 mov     rdi, [rsp-8+arg_20]
.text:0000000000401CAA                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401CAF                 lea     r12, [rdi-18h]
.text:0000000000401CB3                 cmp     r12, rax
.text:0000000000401CB6                 jz      loc_4019BC
.text:0000000000401CBC                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401CC0                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401CC5                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401CCA                 test    eax, eax
.text:0000000000401CCC                 jg      loc_4019BC
.text:0000000000401CD2                 mov     rdi, r12
.text:0000000000401CD5                 lea     rsi, [rsp+0]
.text:0000000000401CD9                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401CDE                 jmp     loc_4019BC
.text:0000000000401CE3 ; ---------------------------------------------------------------------------
.text:0000000000401CE3
.text:0000000000401CE3 loc_401CE3:                             ; CODE XREF: main+7F3↑j
.text:0000000000401CE3                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401CE7                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401CEC                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401CF1                 test    eax, eax
.text:0000000000401CF3                 jg      short loc_401CA5
.text:0000000000401CF5                 mov     rdi, r12
.text:0000000000401CF8                 lea     rsi, [rsp+1]
.text:0000000000401CFD                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401D02                 jmp     short loc_401CA5
.text:0000000000401D04 ; ---------------------------------------------------------------------------
.text:0000000000401D04 ;   cleanup() // owned by 401676
.text:0000000000401D04                 mov     [rsp-8+arg_0], rax
.text:0000000000401D09                 jmp     short loc_401CA5
.text:0000000000401D0B ; ---------------------------------------------------------------------------
.text:0000000000401D0B ;   cleanup() // owned by 401662
.text:0000000000401D0B                 mov     [rsp-8+arg_0], rax
.text:0000000000401D10                 jmp     loc_4019BC
.text:0000000000401D15 ; ---------------------------------------------------------------------------
.text:0000000000401D15
.text:0000000000401D15 loc_401D15:                             ; CODE XREF: main+19D↑j
.text:0000000000401D15                 mov     eax, 0
.text:0000000000401D1A                 test    rax, rax
.text:0000000000401D1D                 jz      short loc_401D2E
.text:0000000000401D1F                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401D23                 mov     ecx, 0FFFFFFFFh
.text:0000000000401D28                 lock xadd [rdi], ecx
.text:0000000000401D2C                 jmp     short loc_401D37
.text:0000000000401D2E ; ---------------------------------------------------------------------------
.text:0000000000401D2E
.text:0000000000401D2E loc_401D2E:                             ; CODE XREF: main+86D↑j
.text:0000000000401D2E                 mov     ecx, [rdx+10h]
.text:0000000000401D31                 lea     eax, [rcx-1]
.text:0000000000401D34                 mov     [rdx+10h], eax
.text:0000000000401D37
.text:0000000000401D37 loc_401D37:                             ; CODE XREF: main+87C↑j
.text:0000000000401D37                 test    ecx, ecx
.text:0000000000401D39                 jg      loc_401653
.text:0000000000401D3F                 mov     rdi, rdx
.text:0000000000401D42                 lea     rsi, [rsp+80h+var_6F]
.text:0000000000401D47                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401D4C                 jmp     loc_401653
.text:0000000000401D51 ; ---------------------------------------------------------------------------
.text:0000000000401D51
.text:0000000000401D51 loc_401D51:                             ; CODE XREF: main+18B↑j
.text:0000000000401D51                 mov     eax, 0
.text:0000000000401D56                 test    rax, rax
.text:0000000000401D59                 jz      short loc_401D6A
.text:0000000000401D5B                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401D5F                 mov     ecx, 0FFFFFFFFh
.text:0000000000401D64                 lock xadd [rdi], ecx
.text:0000000000401D68                 jmp     short loc_401D73
.text:0000000000401D6A ; ---------------------------------------------------------------------------
.text:0000000000401D6A
.text:0000000000401D6A loc_401D6A:                             ; CODE XREF: main+8A9↑j
.text:0000000000401D6A                 mov     ecx, [rdx+10h]
.text:0000000000401D6D                 lea     eax, [rcx-1]
.text:0000000000401D70                 mov     [rdx+10h], eax
.text:0000000000401D73
.text:0000000000401D73 loc_401D73:                             ; CODE XREF: main+8B8↑j
.text:0000000000401D73                 test    ecx, ecx
.text:0000000000401D75                 jg      loc_401641
.text:0000000000401D7B                 mov     rdi, rdx
.text:0000000000401D7E                 lea     rsi, [rsp+80h+var_70]
.text:0000000000401D83                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401D88                 jmp     loc_401641
.text:0000000000401D8D ; ---------------------------------------------------------------------------
.text:0000000000401D8D ;   cleanup() // owned by 40162A
.text:0000000000401D8D                 mov     [rsp-8+arg_0], rax
.text:0000000000401D92                 mov     rdi, [rsp-8+arg_18]
.text:0000000000401D97                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401D9C                 lea     r12, [rdi-18h]
.text:0000000000401DA0                 cmp     r12, rax
.text:0000000000401DA3                 jnz     short loc_401DE3
.text:0000000000401DA5
.text:0000000000401DA5 loc_401DA5:                             ; CODE XREF: main+943↓j
.text:0000000000401DA5                                         ; main+952↓j ...
.text:0000000000401DA5                 mov     rdi, [rsp-8+arg_20]
.text:0000000000401DAA                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401DAF                 lea     r12, [rdi-18h]
.text:0000000000401DB3                 cmp     r12, rax
.text:0000000000401DB6                 jz      loc_4019BC
.text:0000000000401DBC                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401DC0                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401DC5                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401DCA                 test    eax, eax
.text:0000000000401DCC                 jg      loc_4019BC
.text:0000000000401DD2                 mov     rdi, r12
.text:0000000000401DD5                 lea     rsi, [rsp+0]
.text:0000000000401DD9                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401DDE                 jmp     loc_4019BC
.text:0000000000401DE3 ; ---------------------------------------------------------------------------
.text:0000000000401DE3
.text:0000000000401DE3 loc_401DE3:                             ; CODE XREF: main+8F3↑j
.text:0000000000401DE3                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401DE7                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401DEC                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401DF1                 test    eax, eax
.text:0000000000401DF3                 jg      short loc_401DA5
.text:0000000000401DF5                 mov     rdi, r12
.text:0000000000401DF8                 lea     rsi, [rsp+1]
.text:0000000000401DFD                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401E02                 jmp     short loc_401DA5
.text:0000000000401E04 ; ---------------------------------------------------------------------------
.text:0000000000401E04 ;   cleanup() // owned by 40161B
.text:0000000000401E04                 mov     [rsp-8+arg_0], rax
.text:0000000000401E09                 jmp     short loc_401DA5
.text:0000000000401E0B ; ---------------------------------------------------------------------------
.text:0000000000401E0B ;   cleanup() // owned by 401607
.text:0000000000401E0B                 mov     [rsp-8+arg_0], rax
.text:0000000000401E10                 jmp     loc_4019BC
.text:0000000000401E15 ; ---------------------------------------------------------------------------
.text:0000000000401E15
.text:0000000000401E15 loc_401E15:                             ; CODE XREF: main+142↑j
.text:0000000000401E15                 mov     eax, 0
.text:0000000000401E1A                 test    rax, rax
.text:0000000000401E1D                 jz      short loc_401E2E
.text:0000000000401E1F                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401E23                 mov     ecx, 0FFFFFFFFh
.text:0000000000401E28                 lock xadd [rdi], ecx
.text:0000000000401E2C                 jmp     short loc_401E37
.text:0000000000401E2E ; ---------------------------------------------------------------------------
.text:0000000000401E2E
.text:0000000000401E2E loc_401E2E:                             ; CODE XREF: main+96D↑j
.text:0000000000401E2E                 mov     ecx, [rdx+10h]
.text:0000000000401E31                 lea     eax, [rcx-1]
.text:0000000000401E34                 mov     [rdx+10h], eax
.text:0000000000401E37
.text:0000000000401E37 loc_401E37:                             ; CODE XREF: main+97C↑j
.text:0000000000401E37                 test    ecx, ecx
.text:0000000000401E39                 jg      loc_4015F8
.text:0000000000401E3F                 mov     rdi, rdx
.text:0000000000401E42                 lea     rsi, [rsp+80h+var_79]
.text:0000000000401E47                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401E4C                 jmp     loc_4015F8
.text:0000000000401E51 ; ---------------------------------------------------------------------------
.text:0000000000401E51
.text:0000000000401E51 loc_401E51:                             ; CODE XREF: main+130↑j
.text:0000000000401E51                 mov     eax, 0
.text:0000000000401E56                 test    rax, rax
.text:0000000000401E59                 jz      short loc_401E6A
.text:0000000000401E5B                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401E5F                 mov     ecx, 0FFFFFFFFh
.text:0000000000401E64                 lock xadd [rdi], ecx
.text:0000000000401E68                 jmp     short loc_401E73
.text:0000000000401E6A ; ---------------------------------------------------------------------------
.text:0000000000401E6A
.text:0000000000401E6A loc_401E6A:                             ; CODE XREF: main+9A9↑j
.text:0000000000401E6A                 mov     ecx, [rdx+10h]
.text:0000000000401E6D                 lea     eax, [rcx-1]
.text:0000000000401E70                 mov     [rdx+10h], eax
.text:0000000000401E73
.text:0000000000401E73 loc_401E73:                             ; CODE XREF: main+9B8↑j
.text:0000000000401E73                 test    ecx, ecx
.text:0000000000401E75                 jg      loc_4015E6
.text:0000000000401E7B                 mov     rdi, rdx
.text:0000000000401E7E                 lea     rsi, [rsp+80h+var_7A]
.text:0000000000401E83                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401E88                 jmp     loc_4015E6
.text:0000000000401E8D ; ---------------------------------------------------------------------------
.text:0000000000401E8D ;   cleanup() // owned by 4015CF
.text:0000000000401E8D                 mov     [rsp-8+arg_0], rax
.text:0000000000401E92                 mov     rdi, [rsp-8+arg_18]
.text:0000000000401E97                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401E9C                 lea     r12, [rdi-18h]
.text:0000000000401EA0                 cmp     r12, rax
.text:0000000000401EA3                 jnz     short loc_401EE3
.text:0000000000401EA5
.text:0000000000401EA5 loc_401EA5:                             ; CODE XREF: main+A43↓j
.text:0000000000401EA5                                         ; main+A52↓j ...
.text:0000000000401EA5                 mov     rdi, [rsp-8+arg_20]
.text:0000000000401EAA                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401EAF                 lea     r12, [rdi-18h]
.text:0000000000401EB3                 cmp     r12, rax
.text:0000000000401EB6                 jz      loc_4019BC
.text:0000000000401EBC                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401EC0                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401EC5                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401ECA                 test    eax, eax
.text:0000000000401ECC                 jg      loc_4019BC
.text:0000000000401ED2                 mov     rdi, r12
.text:0000000000401ED5                 lea     rsi, [rsp+0]
.text:0000000000401ED9                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401EDE                 jmp     loc_4019BC
.text:0000000000401EE3 ; ---------------------------------------------------------------------------
.text:0000000000401EE3
.text:0000000000401EE3 loc_401EE3:                             ; CODE XREF: main+9F3↑j
.text:0000000000401EE3                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401EE7                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401EEC                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401EF1                 test    eax, eax
.text:0000000000401EF3                 jg      short loc_401EA5
.text:0000000000401EF5                 mov     rdi, r12
.text:0000000000401EF8                 lea     rsi, [rsp+1]
.text:0000000000401EFD                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401F02                 jmp     short loc_401EA5
.text:0000000000401F04 ; ---------------------------------------------------------------------------
.text:0000000000401F04 ;   cleanup() // owned by 4015C0
.text:0000000000401F04                 mov     [rsp-8+arg_0], rax
.text:0000000000401F09                 jmp     short loc_401EA5
.text:0000000000401F0B ; ---------------------------------------------------------------------------
.text:0000000000401F0B ;   cleanup() // owned by 4015AC
.text:0000000000401F0B                 mov     [rsp-8+arg_0], rax
.text:0000000000401F10                 jmp     loc_4019BC
.text:0000000000401F15 ; ---------------------------------------------------------------------------
.text:0000000000401F15
.text:0000000000401F15 loc_401F15:                             ; CODE XREF: main+E7↑j
.text:0000000000401F15                 mov     eax, 0
.text:0000000000401F1A                 test    rax, rax
.text:0000000000401F1D                 jz      short loc_401F2E
.text:0000000000401F1F                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401F23                 mov     ecx, 0FFFFFFFFh
.text:0000000000401F28                 lock xadd [rdi], ecx
.text:0000000000401F2C                 jmp     short loc_401F37
.text:0000000000401F2E ; ---------------------------------------------------------------------------
.text:0000000000401F2E
.text:0000000000401F2E loc_401F2E:                             ; CODE XREF: main+A6D↑j
.text:0000000000401F2E                 mov     ecx, [rdx+10h]
.text:0000000000401F31                 lea     eax, [rcx-1]
.text:0000000000401F34                 mov     [rdx+10h], eax
.text:0000000000401F37
.text:0000000000401F37 loc_401F37:                             ; CODE XREF: main+A7C↑j
.text:0000000000401F37                 test    ecx, ecx
.text:0000000000401F39                 jg      loc_40159D
.text:0000000000401F3F                 mov     rdi, rdx
.text:0000000000401F42                 lea     rsi, [rsp+80h+var_7B]
.text:0000000000401F47                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401F4C                 jmp     loc_40159D
.text:0000000000401F51 ; ---------------------------------------------------------------------------
.text:0000000000401F51
.text:0000000000401F51 loc_401F51:                             ; CODE XREF: main+D5↑j
.text:0000000000401F51                 mov     eax, 0
.text:0000000000401F56                 test    rax, rax
.text:0000000000401F59                 jz      short loc_401F6A
.text:0000000000401F5B                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000401F5F                 mov     ecx, 0FFFFFFFFh
.text:0000000000401F64                 lock xadd [rdi], ecx
.text:0000000000401F68                 jmp     short loc_401F73
.text:0000000000401F6A ; ---------------------------------------------------------------------------
.text:0000000000401F6A
.text:0000000000401F6A loc_401F6A:                             ; CODE XREF: main+AA9↑j
.text:0000000000401F6A                 mov     ecx, [rdx+10h]
.text:0000000000401F6D                 lea     eax, [rcx-1]
.text:0000000000401F70                 mov     [rdx+10h], eax
.text:0000000000401F73
.text:0000000000401F73 loc_401F73:                             ; CODE XREF: main+AB8↑j
.text:0000000000401F73                 test    ecx, ecx
.text:0000000000401F75                 jg      loc_40158B
.text:0000000000401F7B                 mov     rdi, rdx
.text:0000000000401F7E                 lea     rsi, [rsp+80h+var_7C]
.text:0000000000401F83                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401F88                 jmp     loc_40158B
.text:0000000000401F8D ; ---------------------------------------------------------------------------
.text:0000000000401F8D ;   cleanup() // owned by 401574
.text:0000000000401F8D                 mov     [rsp-8+arg_0], rax
.text:0000000000401F92                 mov     rdi, [rsp-8+arg_18]
.text:0000000000401F97                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401F9C                 lea     r12, [rdi-18h]
.text:0000000000401FA0                 cmp     r12, rax
.text:0000000000401FA3                 jnz     short loc_401FE3
.text:0000000000401FA5
.text:0000000000401FA5 loc_401FA5:                             ; CODE XREF: main+B43↓j
.text:0000000000401FA5                                         ; main+B52↓j ...
.text:0000000000401FA5                 mov     rdi, [rsp-8+arg_20]
.text:0000000000401FAA                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:0000000000401FAF                 lea     r12, [rdi-18h]
.text:0000000000401FB3                 cmp     r12, rax
.text:0000000000401FB6                 jz      loc_4019BC
.text:0000000000401FBC                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401FC0                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401FC5                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401FCA                 test    eax, eax
.text:0000000000401FCC                 jg      loc_4019BC
.text:0000000000401FD2                 mov     rdi, r12
.text:0000000000401FD5                 lea     rsi, [rsp+0]
.text:0000000000401FD9                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000401FDE                 jmp     loc_4019BC
.text:0000000000401FE3 ; ---------------------------------------------------------------------------
.text:0000000000401FE3
.text:0000000000401FE3 loc_401FE3:                             ; CODE XREF: main+AF3↑j
.text:0000000000401FE3                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:0000000000401FE7                 mov     esi, 0FFFFFFFFh ; int
.text:0000000000401FEC                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:0000000000401FF1                 test    eax, eax
.text:0000000000401FF3                 jg      short loc_401FA5
.text:0000000000401FF5                 mov     rdi, r12
.text:0000000000401FF8                 lea     rsi, [rsp+1]
.text:0000000000401FFD                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000402002                 jmp     short loc_401FA5
.text:0000000000402004 ; ---------------------------------------------------------------------------
.text:0000000000402004 ;   cleanup() // owned by 401565
.text:0000000000402004                 mov     [rsp-8+arg_0], rax
.text:0000000000402009                 jmp     short loc_401FA5
.text:000000000040200B ; ---------------------------------------------------------------------------
.text:000000000040200B ;   cleanup() // owned by 401551
.text:000000000040200B                 mov     [rsp-8+arg_0], rax
.text:0000000000402010                 jmp     loc_4019BC
.text:0000000000402015 ; ---------------------------------------------------------------------------
.text:0000000000402015
.text:0000000000402015 loc_402015:                             ; CODE XREF: main+8C↑j
.text:0000000000402015                 mov     eax, 0
.text:000000000040201A                 test    rax, rax
.text:000000000040201D                 jz      short loc_40202E
.text:000000000040201F                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000402023                 mov     ecx, 0FFFFFFFFh
.text:0000000000402028                 lock xadd [rdi], ecx
.text:000000000040202C                 jmp     short loc_402037
.text:000000000040202E ; ---------------------------------------------------------------------------
.text:000000000040202E
.text:000000000040202E loc_40202E:                             ; CODE XREF: main+B6D↑j
.text:000000000040202E                 mov     ecx, [rdx+10h]
.text:0000000000402031                 lea     eax, [rcx-1]
.text:0000000000402034                 mov     [rdx+10h], eax
.text:0000000000402037
.text:0000000000402037 loc_402037:                             ; CODE XREF: main+B7C↑j
.text:0000000000402037                 test    ecx, ecx
.text:0000000000402039                 jg      loc_401542
.text:000000000040203F                 mov     rdi, rdx
.text:0000000000402042                 lea     rsi, [rsp+80h+var_80+3]
.text:0000000000402047                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:000000000040204C                 jmp     loc_401542
.text:0000000000402051 ; ---------------------------------------------------------------------------
.text:0000000000402051
.text:0000000000402051 loc_402051:                             ; CODE XREF: main+7A↑j
.text:0000000000402051                 mov     eax, 0
.text:0000000000402056                 test    rax, rax
.text:0000000000402059                 jz      short loc_40206A
.text:000000000040205B                 add     rdi, 0FFFFFFFFFFFFFFF8h
.text:000000000040205F                 mov     ecx, 0FFFFFFFFh
.text:0000000000402064                 lock xadd [rdi], ecx
.text:0000000000402068                 jmp     short loc_402073
.text:000000000040206A ; ---------------------------------------------------------------------------
.text:000000000040206A
.text:000000000040206A loc_40206A:                             ; CODE XREF: main+BA9↑j
.text:000000000040206A                 mov     ecx, [rdx+10h]
.text:000000000040206D                 lea     eax, [rcx-1]
.text:0000000000402070                 mov     [rdx+10h], eax
.text:0000000000402073
.text:0000000000402073 loc_402073:                             ; CODE XREF: main+BB8↑j
.text:0000000000402073                 test    ecx, ecx
.text:0000000000402075                 jg      loc_401530
.text:000000000040207B                 mov     rdi, rdx
.text:000000000040207E                 lea     rsi, [rsp+80h+var_80+2]
.text:0000000000402083                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000402088                 jmp     loc_401530
.text:000000000040208D ; ---------------------------------------------------------------------------
.text:000000000040208D ;   cleanup() // owned by 401513
.text:000000000040208D                 mov     [rsp-8+arg_0], rax
.text:0000000000402092                 mov     rdi, [rsp-8+arg_20]
.text:0000000000402097                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:000000000040209C                 lea     r12, [rdi-18h]
.text:00000000004020A0                 cmp     r12, rax
.text:00000000004020A3                 jnz     short loc_4020E3
.text:00000000004020A5
.text:00000000004020A5 loc_4020A5:                             ; CODE XREF: main+C43↓j
.text:00000000004020A5                                         ; main+C52↓j ...
.text:00000000004020A5                 mov     rdi, [rsp-8+arg_18]
.text:00000000004020AA                 mov     eax, offset _ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3_4
.text:00000000004020AF                 lea     r12, [rdi-18h]
.text:00000000004020B3                 cmp     r12, rax
.text:00000000004020B6                 jz      loc_4019BC
.text:00000000004020BC                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:00000000004020C0                 mov     esi, 0FFFFFFFFh ; int
.text:00000000004020C5                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:00000000004020CA                 test    eax, eax
.text:00000000004020CC                 jg      loc_4019BC
.text:00000000004020D2                 mov     rdi, r12
.text:00000000004020D5                 lea     rsi, [rsp+0]
.text:00000000004020D9                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:00000000004020DE                 jmp     loc_4019BC
.text:00000000004020E3 ; ---------------------------------------------------------------------------
.text:00000000004020E3
.text:00000000004020E3 loc_4020E3:                             ; CODE XREF: main+BF3↑j
.text:00000000004020E3                 add     rdi, 0FFFFFFFFFFFFFFF8h ; int *
.text:00000000004020E7                 mov     esi, 0FFFFFFFFh ; int
.text:00000000004020EC                 call    _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii ; __gnu_cxx::__exchange_and_add_dispatch(int *,int)
.text:00000000004020F1                 test    eax, eax
.text:00000000004020F3                 jg      short loc_4020A5
.text:00000000004020F5                 mov     rdi, r12
.text:00000000004020F8                 lea     rsi, [rsp+1]
.text:00000000004020FD                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0000000000402102                 jmp     short loc_4020A5
.text:0000000000402104 ; ---------------------------------------------------------------------------
.text:0000000000402104 ;   cleanup() // owned by 401504
.text:0000000000402104                 mov     [rsp-8+arg_0], rax
.text:0000000000402109                 jmp     short loc_4020A5
.text:000000000040210B ; ---------------------------------------------------------------------------
.text:000000000040210B ;   cleanup() // owned by 4014F0
.text:000000000040210B                 mov     [rsp-8+arg_0], rax
.text:0000000000402110                 jmp     loc_4019BC
.text:0000000000402110 main            endp
.text:0000000000402110
.text:0000000000402110 ; ---------------------------------------------------------------------------
.text:0000000000402115                 align 20h
.text:0000000000402115 ; } // starts at 4014B0
.text:0000000000402120
.text:0000000000402120 ; =============== S U B R O U T I N E =======================================
.text:0000000000402120
.text:0000000000402120
.text:0000000000402120 ; __int64 solve(void)
.text:0000000000402120                 public _Z5solvev
.text:0000000000402120 _Z5solvev       proc near               ; CODE XREF: main+3F6↑p
.text:0000000000402120
.text:0000000000402120 var_58          = dword ptr -58h
.text:0000000000402120 var_54          = dword ptr -54h
.text:0000000000402120 var_50          = dword ptr -50h
.text:0000000000402120 var_4C          = dword ptr -4Ch
.text:0000000000402120 var_48          = dword ptr -48h
.text:0000000000402120 var_44          = dword ptr -44h
.text:0000000000402120 var_40          = qword ptr -40h
.text:0000000000402120 var_38          = qword ptr -38h
.text:0000000000402120 var_30          = qword ptr -30h
.text:0000000000402120 var_28          = qword ptr -28h
.text:0000000000402120 var_20          = dword ptr -20h
.text:0000000000402120 var_1C          = dword ptr -1Ch
.text:0000000000402120
.text:0000000000402120 ; __unwind { // ___gxx_personality_v0
.text:0000000000402120                 push    rbx
.text:0000000000402121                 push    rbp
.text:0000000000402122                 sub     rsp, 48h
.text:0000000000402126                 mov     rdi, qword ptr cs:xmmword_622700
.text:000000000040212D                 test    rdi, rdi
.text:0000000000402130                 jz      short loc_402157
.text:0000000000402132                 mov     rbx, rdi
.text:0000000000402135
.text:0000000000402135 loc_402135:                             ; CODE XREF: solve(void)+35↓j
.text:0000000000402135                 mov     edi, offset g
.text:000000000040213A                 mov     rsi, [rbx+18h]
.text:000000000040213E                 call    _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_erase(std::_Rb_tree_node<std::pair<int,int>> *)
.text:0000000000402143                 mov     rdi, rbx        ; void *
.text:0000000000402146                 mov     rbp, [rbx+10h]
.text:000000000040214A                 call    __ZdlPv         ; operator delete(void *)
.text:000000000040214F                 mov     rbx, rbp
.text:0000000000402152                 test    rbp, rbp
.text:0000000000402155                 jnz     short loc_402135
.text:0000000000402157
.text:0000000000402157 loc_402157:                             ; CODE XREF: solve(void)+10↑j
.text:0000000000402157                 mov     eax, 190h
.text:000000000040215C                 xor     edx, edx
.text:000000000040215E                 pxor    xmm2, xmm2
.text:0000000000402162                 mov     rcx, rax
.text:0000000000402165                 mov     qword ptr cs:xmmword_622700+8, offset qword_6226F8
.text:0000000000402170                 mov     qword ptr cs:xmmword_622700, rdx
.text:0000000000402177                 mov     cs:qword_622710, offset qword_6226F8
.text:0000000000402182                 mov     cs:qword_622718, rdx
.text:0000000000402189                 movaps  cs:xmmword_6224D0, xmm2
.text:0000000000402190                 movaps  cs:xmmword_6224E0, xmm2
.text:0000000000402197                 movq    qword ptr cs:xmmword_6224F0, xmm2
.text:000000000040219F
.text:000000000040219F loc_40219F:                             ; CODE XREF: solve(void)+A6↓j
.text:000000000040219F                 movaps  ds:xmmword_622330[rax], xmm2
.text:00000000004021A6                 movaps  ds:xmmword_622320[rax], xmm2
.text:00000000004021AD                 movaps  ds:xmmword_622310[rax], xmm2
.text:00000000004021B4                 movaps  ds:xmmword_622300[rax], xmm2
.text:00000000004021BB                 movaps  ds:xmmword_6222F0[rax], xmm2
.text:00000000004021C2                 sub     rax, 50h ; 'P'
.text:00000000004021C6                 jnz     short loc_40219F
.text:00000000004021C8                 movaps  cs:xmmword_622690, xmm2
.text:00000000004021CF                 movaps  cs:xmmword_6226A0, xmm2
.text:00000000004021D6                 movq    cs:qword_6226B0, xmm2
.text:00000000004021DE
.text:00000000004021DE loc_4021DE:                             ; CODE XREF: solve(void)+E5↓j
.text:00000000004021DE                 movaps  ds:xmmword_6224F0[rcx], xmm2
.text:00000000004021E5                 movaps  ds:xmmword_6224E0[rcx], xmm2
.text:00000000004021EC                 movaps  ds:xmmword_6224D0[rcx], xmm2
.text:00000000004021F3                 movaps  ds:xmmword_6224C0[rcx], xmm2
.text:00000000004021FA                 movaps  ds:xmmword_6224B0[rcx], xmm2
.text:0000000000402201                 sub     rcx, 50h ; 'P'
.text:0000000000402205                 jnz     short loc_4021DE
.text:0000000000402207                 mov     rax, cs:s
.text:000000000040220E                 mov     r8, rdx
.text:0000000000402211                 mov     ecx, [rax-18h]
.text:0000000000402214                 dec     ecx
.text:0000000000402216                 test    ecx, ecx
.text:0000000000402218                 jle     loc_402657
.text:000000000040221E                 mov     [rsp+58h+var_40], r12
.text:0000000000402223                 mov     esi, offset qword_6226F8
.text:0000000000402228                 mov     [rsp+58h+var_38], r13
.text:000000000040222D                 mov     ecx, offset qword_6226C8
.text:0000000000402232                 mov     [rsp+58h+var_30], r14
.text:0000000000402237                 mov     r12, r8
.text:000000000040223A                 mov     [rsp+58h+var_28], r15
.text:000000000040223F
.text:000000000040223F loc_40223F:                             ; CODE XREF: solve(void)+517↓j
.text:000000000040223F                 cmp     dword ptr [rax-8], 0
.text:0000000000402243                 jl      short loc_402256
.text:0000000000402245                 mov     edi, offset s   ; this
.text:000000000040224A                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:000000000040224F                 mov     rax, cs:s
.text:0000000000402256
.text:0000000000402256 loc_402256:                             ; CODE XREF: solve(void)+123↑j
.text:0000000000402256                 movsx   r13d, byte ptr [rax+r12]
.text:000000000040225B                 add     r13d, 0FFFFFF9Fh
.text:000000000040225F                 mov     [rsp+58h+var_20], r13d
.text:0000000000402264                 cmp     dword ptr [rax-8], 0
.text:0000000000402268                 jl      short loc_402280
.text:000000000040226A                 mov     edi, offset s   ; this
.text:000000000040226F                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:0000000000402274                 mov     rax, cs:s
.text:000000000040227B                 mov     r13d, [rsp+58h+var_20]
.text:0000000000402280
.text:0000000000402280 loc_402280:                             ; CODE XREF: solve(void)+148↑j
.text:0000000000402280                 movsx   ebp, byte ptr [rax+r12+1]
.text:0000000000402286                 mov     edx, offset qword_6226F8
.text:000000000040228B                 mov     r14, qword ptr cs:xmmword_622700
.text:0000000000402292                 add     ebp, 0FFFFFF9Fh
.text:0000000000402295                 mov     [rsp+58h+var_1C], ebp
.text:0000000000402299                 mov     rax, r14
.text:000000000040229C                 test    r14, r14
.text:000000000040229F                 jz      short loc_4022C5
.text:00000000004022A1
.text:00000000004022A1 loc_4022A1:                             ; CODE XREF: solve(void)+1A3↓j
.text:00000000004022A1                 mov     ecx, [rax+20h]
.text:00000000004022A4                 cmp     ecx, r13d
.text:00000000004022A7                 jl      short loc_4022B3
.text:00000000004022A9                 cmp     r13d, ecx
.text:00000000004022AC                 jl      short loc_4022B9
.text:00000000004022AE                 cmp     ebp, [rax+24h]
.text:00000000004022B1                 jle     short loc_4022B9
.text:00000000004022B3
.text:00000000004022B3 loc_4022B3:                             ; CODE XREF: solve(void)+187↑j
.text:00000000004022B3                 mov     rax, [rax+18h]
.text:00000000004022B7                 jmp     short loc_4022C0
.text:00000000004022B9 ; ---------------------------------------------------------------------------
.text:00000000004022B9
.text:00000000004022B9 loc_4022B9:                             ; CODE XREF: solve(void)+18C↑j
.text:00000000004022B9                                         ; solve(void)+191↑j
.text:00000000004022B9                 mov     rdx, rax
.text:00000000004022BC                 mov     rax, [rax+10h]
.text:00000000004022C0
.text:00000000004022C0 loc_4022C0:                             ; CODE XREF: solve(void)+197↑j
.text:00000000004022C0                 test    rax, rax
.text:00000000004022C3                 jnz     short loc_4022A1
.text:00000000004022C5
.text:00000000004022C5 loc_4022C5:                             ; CODE XREF: solve(void)+17F↑j
.text:00000000004022C5                 mov     eax, offset qword_6226F8
.text:00000000004022CA                 cmp     rdx, rax
.text:00000000004022CD                 jz      short loc_4022E1
.text:00000000004022CF                 mov     eax, [rdx+20h]
.text:00000000004022D2                 cmp     r13d, eax
.text:00000000004022D5                 jl      short loc_4022E1
.text:00000000004022D7                 cmp     eax, r13d
.text:00000000004022DA                 jl      short loc_4022E6
.text:00000000004022DC                 cmp     ebp, [rdx+24h]
.text:00000000004022DF                 jge     short loc_4022E6
.text:00000000004022E1
.text:00000000004022E1 loc_4022E1:                             ; CODE XREF: solve(void)+1AD↑j
.text:00000000004022E1                                         ; solve(void)+1B5↑j
.text:00000000004022E1                 mov     edx, offset qword_6226F8
.text:00000000004022E6
.text:00000000004022E6 loc_4022E6:                             ; CODE XREF: solve(void)+1BA↑j
.text:00000000004022E6                                         ; solve(void)+1BF↑j
.text:00000000004022E6                 mov     eax, offset qword_6226F8
.text:00000000004022EB                 cmp     rdx, rax
.text:00000000004022EE                 jz      loc_402769
.text:00000000004022F4
.text:00000000004022F4 loc_4022F4:                             ; CODE XREF: solve(void)+6A8↓j
.text:00000000004022F4                                         ; solve(void)+6B1↓j ...
.text:00000000004022F4                 mov     rcx, qword ptr cs:xmmword_6226D0
.text:00000000004022FB                 mov     rax, rcx
.text:00000000004022FE                 mov     ebx, offset qword_6226C8
.text:0000000000402303                 test    rcx, rcx
.text:0000000000402306                 jz      short loc_402323
.text:0000000000402308                 mov     edx, [rsp+58h+var_20]
.text:000000000040230C
.text:000000000040230C loc_40230C:                             ; CODE XREF: solve(void)+201↓j
.text:000000000040230C                 cmp     edx, [rcx+20h]
.text:000000000040230F                 jg      short loc_40231A
.text:0000000000402311                 mov     rbx, rcx
.text:0000000000402314                 mov     rcx, [rcx+10h]
.text:0000000000402318                 jmp     short loc_40231E
.text:000000000040231A ; ---------------------------------------------------------------------------
.text:000000000040231A
.text:000000000040231A loc_40231A:                             ; CODE XREF: solve(void)+1EF↑j
.text:000000000040231A                 mov     rcx, [rcx+18h]
.text:000000000040231E
.text:000000000040231E loc_40231E:                             ; CODE XREF: solve(void)+1F8↑j
.text:000000000040231E                 test    rcx, rcx
.text:0000000000402321                 jnz     short loc_40230C
.text:0000000000402323
.text:0000000000402323 loc_402323:                             ; CODE XREF: solve(void)+1E6↑j
.text:0000000000402323                 mov     edx, offset qword_6226C8
.text:0000000000402328                 cmp     rbx, rdx
.text:000000000040232B                 jz      short loc_402336
.text:000000000040232D                 mov     edx, [rsp+58h+var_20]
.text:0000000000402331                 cmp     edx, [rbx+20h]
.text:0000000000402334                 jge     short loc_40233B
.text:0000000000402336
.text:0000000000402336 loc_402336:                             ; CODE XREF: solve(void)+20B↑j
.text:0000000000402336                 mov     ebx, offset qword_6226C8
.text:000000000040233B
.text:000000000040233B loc_40233B:                             ; CODE XREF: solve(void)+214↑j
.text:000000000040233B                 mov     edx, offset qword_6226C8
.text:0000000000402340                 cmp     rbx, rdx
.text:0000000000402343                 jz      loc_4023EC
.text:0000000000402349                 mov     edi, offset ma
.text:000000000040234E                 lea     rsi, [rsp+58h+var_20]
.text:0000000000402353                 call    _ZNSt3mapIiiSt4lessIiESaISt4pairIKiiEEEixERS3_ ; std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::operator[](int const&)
.text:0000000000402358                 mov     ebx, [rax]
.text:000000000040235A                 mov     edx, offset qword_6226F8
.text:000000000040235F                 mov     rax, qword ptr cs:xmmword_622700
.text:0000000000402366                 test    rax, rax
.text:0000000000402369                 mov     ecx, [rsp+58h+var_1C]
.text:000000000040236D                 jz      short loc_402391
.text:000000000040236F
.text:000000000040236F loc_40236F:                             ; CODE XREF: solve(void)+26F↓j
.text:000000000040236F                 mov     ebp, [rax+20h]
.text:0000000000402372                 cmp     ebp, ebx
.text:0000000000402374                 jl      short loc_40237F
.text:0000000000402376                 cmp     ebx, ebp
.text:0000000000402378                 jl      short loc_402385
.text:000000000040237A                 cmp     ecx, [rax+24h]
.text:000000000040237D                 jle     short loc_402385
.text:000000000040237F
.text:000000000040237F loc_40237F:                             ; CODE XREF: solve(void)+254↑j
.text:000000000040237F                 mov     rax, [rax+18h]
.text:0000000000402383                 jmp     short loc_40238C
.text:0000000000402385 ; ---------------------------------------------------------------------------
.text:0000000000402385
.text:0000000000402385 loc_402385:                             ; CODE XREF: solve(void)+258↑j
.text:0000000000402385                                         ; solve(void)+25D↑j
.text:0000000000402385                 mov     rdx, rax
.text:0000000000402388                 mov     rax, [rax+10h]
.text:000000000040238C
.text:000000000040238C loc_40238C:                             ; CODE XREF: solve(void)+263↑j
.text:000000000040238C                 test    rax, rax
.text:000000000040238F                 jnz     short loc_40236F
.text:0000000000402391
.text:0000000000402391 loc_402391:                             ; CODE XREF: solve(void)+24D↑j
.text:0000000000402391                 mov     eax, offset qword_6226F8
.text:0000000000402396                 cmp     rdx, rax
.text:0000000000402399                 jz      short loc_4023AB
.text:000000000040239B                 mov     eax, [rdx+20h]
.text:000000000040239E                 cmp     ebx, eax
.text:00000000004023A0                 jl      short loc_4023AB
.text:00000000004023A2                 cmp     eax, ebx
.text:00000000004023A4                 jl      short loc_4023B0
.text:00000000004023A6                 cmp     ecx, [rdx+24h]
.text:00000000004023A9                 jge     short loc_4023B0
.text:00000000004023AB
.text:00000000004023AB loc_4023AB:                             ; CODE XREF: solve(void)+279↑j
.text:00000000004023AB                                         ; solve(void)+280↑j
.text:00000000004023AB                 mov     edx, offset qword_6226F8
.text:00000000004023B0
.text:00000000004023B0 loc_4023B0:                             ; CODE XREF: solve(void)+284↑j
.text:00000000004023B0                                         ; solve(void)+289↑j
.text:00000000004023B0                 mov     eax, offset qword_6226F8
.text:00000000004023B5                 cmp     rdx, rax
.text:00000000004023B8                 jnz     short loc_4023E5
.text:00000000004023BA                 movsxd  rbx, ebx
.text:00000000004023BD                 mov     edi, offset g
.text:00000000004023C2                 movsxd  rcx, ecx
.text:00000000004023C5                 lea     rsi, [rsp+58h+var_50]
.text:00000000004023CA                 mov     [rsp+58h+var_50], ebx
.text:00000000004023CE                 mov     [rsp+58h+var_4C], ecx
.text:00000000004023D2                 inc     dword ptr ds:out[rbx*4]
.text:00000000004023D9                 inc     dword ptr ds:in[rcx*4]
.text:00000000004023E0                 call    _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueERKS1_ ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)
.text:00000000004023E5
.text:00000000004023E5 loc_4023E5:                             ; CODE XREF: solve(void)+298↑j
.text:00000000004023E5                 mov     rax, qword ptr cs:xmmword_6226D0
.text:00000000004023EC
.text:00000000004023EC loc_4023EC:                             ; CODE XREF: solve(void)+223↑j
.text:00000000004023EC                 mov     rcx, rax
.text:00000000004023EF                 mov     ebx, offset qword_6226C8
.text:00000000004023F4                 test    rax, rax
.text:00000000004023F7                 jz      short loc_402414
.text:00000000004023F9                 mov     edx, [rsp+58h+var_1C]
.text:00000000004023FD
.text:00000000004023FD loc_4023FD:                             ; CODE XREF: solve(void)+2F2↓j
.text:00000000004023FD                 cmp     edx, [rcx+20h]
.text:0000000000402400                 jg      short loc_40240B
.text:0000000000402402                 mov     rbx, rcx
.text:0000000000402405                 mov     rcx, [rcx+10h]
.text:0000000000402409                 jmp     short loc_40240F
.text:000000000040240B ; ---------------------------------------------------------------------------
.text:000000000040240B
.text:000000000040240B loc_40240B:                             ; CODE XREF: solve(void)+2E0↑j
.text:000000000040240B                 mov     rcx, [rcx+18h]
.text:000000000040240F
.text:000000000040240F loc_40240F:                             ; CODE XREF: solve(void)+2E9↑j
.text:000000000040240F                 test    rcx, rcx
.text:0000000000402412                 jnz     short loc_4023FD
.text:0000000000402414
.text:0000000000402414 loc_402414:                             ; CODE XREF: solve(void)+2D7↑j
.text:0000000000402414                 mov     edx, offset qword_6226C8
.text:0000000000402419                 cmp     rbx, rdx
.text:000000000040241C                 jz      short loc_402427
.text:000000000040241E                 mov     edx, [rsp+58h+var_1C]
.text:0000000000402422                 cmp     edx, [rbx+20h]
.text:0000000000402425                 jge     short loc_40242C
.text:0000000000402427
.text:0000000000402427 loc_402427:                             ; CODE XREF: solve(void)+2FC↑j
.text:0000000000402427                 mov     ebx, offset qword_6226C8
.text:000000000040242C
.text:000000000040242C loc_40242C:                             ; CODE XREF: solve(void)+305↑j
.text:000000000040242C                 mov     edx, offset qword_6226C8
.text:0000000000402431                 cmp     rbx, rdx
.text:0000000000402434                 jz      loc_4024DD
.text:000000000040243A                 mov     edi, offset ma
.text:000000000040243F                 lea     rsi, [rsp+58h+var_1C]
.text:0000000000402444                 call    _ZNSt3mapIiiSt4lessIiESaISt4pairIKiiEEEixERS3_ ; std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::operator[](int const&)
.text:0000000000402449                 mov     ecx, [rax]
.text:000000000040244B                 mov     edx, offset qword_6226F8
.text:0000000000402450                 mov     rax, qword ptr cs:xmmword_622700
.text:0000000000402457                 test    rax, rax
.text:000000000040245A                 mov     ebx, [rsp+58h+var_20]
.text:000000000040245E                 jz      short loc_402482
.text:0000000000402460
.text:0000000000402460 loc_402460:                             ; CODE XREF: solve(void)+360↓j
.text:0000000000402460                 mov     ebp, [rax+20h]
.text:0000000000402463                 cmp     ebp, ebx
.text:0000000000402465                 jl      short loc_402470
.text:0000000000402467                 cmp     ebx, ebp
.text:0000000000402469                 jl      short loc_402476
.text:000000000040246B                 cmp     ecx, [rax+24h]
.text:000000000040246E                 jle     short loc_402476
.text:0000000000402470
.text:0000000000402470 loc_402470:                             ; CODE XREF: solve(void)+345↑j
.text:0000000000402470                 mov     rax, [rax+18h]
.text:0000000000402474                 jmp     short loc_40247D
.text:0000000000402476 ; ---------------------------------------------------------------------------
.text:0000000000402476
.text:0000000000402476 loc_402476:                             ; CODE XREF: solve(void)+349↑j
.text:0000000000402476                                         ; solve(void)+34E↑j
.text:0000000000402476                 mov     rdx, rax
.text:0000000000402479                 mov     rax, [rax+10h]
.text:000000000040247D
.text:000000000040247D loc_40247D:                             ; CODE XREF: solve(void)+354↑j
.text:000000000040247D                 test    rax, rax
.text:0000000000402480                 jnz     short loc_402460
.text:0000000000402482
.text:0000000000402482 loc_402482:                             ; CODE XREF: solve(void)+33E↑j
.text:0000000000402482                 mov     eax, offset qword_6226F8
.text:0000000000402487                 cmp     rdx, rax
.text:000000000040248A                 jz      short loc_40249C
.text:000000000040248C                 mov     eax, [rdx+20h]
.text:000000000040248F                 cmp     ebx, eax
.text:0000000000402491                 jl      short loc_40249C
.text:0000000000402493                 cmp     eax, ebx
.text:0000000000402495                 jl      short loc_4024A1
.text:0000000000402497                 cmp     ecx, [rdx+24h]
.text:000000000040249A                 jge     short loc_4024A1
.text:000000000040249C
.text:000000000040249C loc_40249C:                             ; CODE XREF: solve(void)+36A↑j
.text:000000000040249C                                         ; solve(void)+371↑j
.text:000000000040249C                 mov     edx, offset qword_6226F8
.text:00000000004024A1
.text:00000000004024A1 loc_4024A1:                             ; CODE XREF: solve(void)+375↑j
.text:00000000004024A1                                         ; solve(void)+37A↑j
.text:00000000004024A1                 mov     eax, offset qword_6226F8
.text:00000000004024A6                 cmp     rdx, rax
.text:00000000004024A9                 jnz     short loc_4024D6
.text:00000000004024AB                 movsxd  rbx, ebx
.text:00000000004024AE                 mov     edi, offset g
.text:00000000004024B3                 movsxd  rcx, ecx
.text:00000000004024B6                 lea     rsi, [rsp+58h+var_48]
.text:00000000004024BB                 mov     [rsp+58h+var_48], ebx
.text:00000000004024BF                 mov     [rsp+58h+var_44], ecx
.text:00000000004024C3                 inc     dword ptr ds:out[rbx*4]
.text:00000000004024CA                 inc     dword ptr ds:in[rcx*4]
.text:00000000004024D1                 call    _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueERKS1_ ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)
.text:00000000004024D6
.text:00000000004024D6 loc_4024D6:                             ; CODE XREF: solve(void)+389↑j
.text:00000000004024D6                 mov     rax, qword ptr cs:xmmword_6226D0
.text:00000000004024DD
.text:00000000004024DD loc_4024DD:                             ; CODE XREF: solve(void)+314↑j
.text:00000000004024DD                 mov     rcx, rax
.text:00000000004024E0                 mov     ebx, offset qword_6226C8
.text:00000000004024E5                 test    rax, rax
.text:00000000004024E8                 jz      short loc_402505
.text:00000000004024EA                 mov     edx, [rsp+58h+var_1C]
.text:00000000004024EE
.text:00000000004024EE loc_4024EE:                             ; CODE XREF: solve(void)+3E3↓j
.text:00000000004024EE                 cmp     edx, [rcx+20h]
.text:00000000004024F1                 jg      short loc_4024FC
.text:00000000004024F3                 mov     rbx, rcx
.text:00000000004024F6                 mov     rcx, [rcx+10h]
.text:00000000004024FA                 jmp     short loc_402500
.text:00000000004024FC ; ---------------------------------------------------------------------------
.text:00000000004024FC
.text:00000000004024FC loc_4024FC:                             ; CODE XREF: solve(void)+3D1↑j
.text:00000000004024FC                 mov     rcx, [rcx+18h]
.text:0000000000402500
.text:0000000000402500 loc_402500:                             ; CODE XREF: solve(void)+3DA↑j
.text:0000000000402500                 test    rcx, rcx
.text:0000000000402503                 jnz     short loc_4024EE
.text:0000000000402505
.text:0000000000402505 loc_402505:                             ; CODE XREF: solve(void)+3C8↑j
.text:0000000000402505                 mov     edx, offset qword_6226C8
.text:000000000040250A                 cmp     rbx, rdx
.text:000000000040250D                 jz      short loc_402518
.text:000000000040250F                 mov     edx, [rsp+58h+var_1C]
.text:0000000000402513                 cmp     edx, [rbx+20h]
.text:0000000000402516                 jge     short loc_40251D
.text:0000000000402518
.text:0000000000402518 loc_402518:                             ; CODE XREF: solve(void)+3ED↑j
.text:0000000000402518                 mov     ebx, offset qword_6226C8
.text:000000000040251D
.text:000000000040251D loc_40251D:                             ; CODE XREF: solve(void)+3F6↑j
.text:000000000040251D                 mov     edx, offset qword_6226C8
.text:0000000000402522                 cmp     rbx, rdx
.text:0000000000402525                 jz      loc_402620
.text:000000000040252B                 mov     ecx, offset qword_6226C8
.text:0000000000402530                 test    rax, rax
.text:0000000000402533                 jz      short loc_402550
.text:0000000000402535                 mov     edx, [rsp+58h+var_20]
.text:0000000000402539
.text:0000000000402539 loc_402539:                             ; CODE XREF: solve(void)+42E↓j
.text:0000000000402539                 cmp     edx, [rax+20h]
.text:000000000040253C                 jg      short loc_402547
.text:000000000040253E                 mov     rcx, rax
.text:0000000000402541                 mov     rax, [rax+10h]
.text:0000000000402545                 jmp     short loc_40254B
.text:0000000000402547 ; ---------------------------------------------------------------------------
.text:0000000000402547
.text:0000000000402547 loc_402547:                             ; CODE XREF: solve(void)+41C↑j
.text:0000000000402547                 mov     rax, [rax+18h]
.text:000000000040254B
.text:000000000040254B loc_40254B:                             ; CODE XREF: solve(void)+425↑j
.text:000000000040254B                 test    rax, rax
.text:000000000040254E                 jnz     short loc_402539
.text:0000000000402550
.text:0000000000402550 loc_402550:                             ; CODE XREF: solve(void)+413↑j
.text:0000000000402550                 mov     eax, offset qword_6226C8
.text:0000000000402555                 cmp     rcx, rax
.text:0000000000402558                 jz      short loc_402563
.text:000000000040255A                 mov     eax, [rsp+58h+var_20]
.text:000000000040255E                 cmp     eax, [rcx+20h]
.text:0000000000402561                 jge     short loc_402568
.text:0000000000402563
.text:0000000000402563 loc_402563:                             ; CODE XREF: solve(void)+438↑j
.text:0000000000402563                 mov     ecx, offset qword_6226C8
.text:0000000000402568
.text:0000000000402568 loc_402568:                             ; CODE XREF: solve(void)+441↑j
.text:0000000000402568                 mov     eax, offset qword_6226C8
.text:000000000040256D                 cmp     rcx, rax
.text:0000000000402570                 jz      loc_402620
.text:0000000000402576                 mov     edi, offset ma
.text:000000000040257B                 lea     rsi, [rsp+58h+var_20]
.text:0000000000402580                 call    _ZNSt3mapIiiSt4lessIiESaISt4pairIKiiEEEixERS3_ ; std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::operator[](int const&)
.text:0000000000402585                 mov     rbx, rax
.text:0000000000402588                 mov     edi, offset ma
.text:000000000040258D                 lea     rsi, [rsp+58h+var_1C]
.text:0000000000402592                 call    _ZNSt3mapIiiSt4lessIiESaISt4pairIKiiEEEixERS3_ ; std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::operator[](int const&)
.text:0000000000402597                 mov     ecx, [rax]
.text:0000000000402599                 mov     edx, offset qword_6226F8
.text:000000000040259E                 mov     rax, qword ptr cs:xmmword_622700
.text:00000000004025A5                 test    rax, rax
.text:00000000004025A8                 mov     ebx, [rbx]
.text:00000000004025AA                 jz      short loc_4025CE
.text:00000000004025AC
.text:00000000004025AC loc_4025AC:                             ; CODE XREF: solve(void)+4AC↓j
.text:00000000004025AC                 mov     ebp, [rax+20h]
.text:00000000004025AF                 cmp     ebp, ebx
.text:00000000004025B1                 jl      short loc_4025BC
.text:00000000004025B3                 cmp     ebx, ebp
.text:00000000004025B5                 jl      short loc_4025C2
.text:00000000004025B7                 cmp     ecx, [rax+24h]
.text:00000000004025BA                 jle     short loc_4025C2
.text:00000000004025BC
.text:00000000004025BC loc_4025BC:                             ; CODE XREF: solve(void)+491↑j
.text:00000000004025BC                 mov     rax, [rax+18h]
.text:00000000004025C0                 jmp     short loc_4025C9
.text:00000000004025C2 ; ---------------------------------------------------------------------------
.text:00000000004025C2
.text:00000000004025C2 loc_4025C2:                             ; CODE XREF: solve(void)+495↑j
.text:00000000004025C2                                         ; solve(void)+49A↑j
.text:00000000004025C2                 mov     rdx, rax
.text:00000000004025C5                 mov     rax, [rax+10h]
.text:00000000004025C9
.text:00000000004025C9 loc_4025C9:                             ; CODE XREF: solve(void)+4A0↑j
.text:00000000004025C9                 test    rax, rax
.text:00000000004025CC                 jnz     short loc_4025AC
.text:00000000004025CE
.text:00000000004025CE loc_4025CE:                             ; CODE XREF: solve(void)+48A↑j
.text:00000000004025CE                 mov     eax, offset qword_6226F8
.text:00000000004025D3                 cmp     rdx, rax
.text:00000000004025D6                 jz      short loc_4025E8
.text:00000000004025D8                 mov     eax, [rdx+20h]
.text:00000000004025DB                 cmp     ebx, eax
.text:00000000004025DD                 jl      short loc_4025E8
.text:00000000004025DF                 cmp     eax, ebx
.text:00000000004025E1                 jl      short loc_4025ED
.text:00000000004025E3                 cmp     ecx, [rdx+24h]
.text:00000000004025E6                 jge     short loc_4025ED
.text:00000000004025E8
.text:00000000004025E8 loc_4025E8:                             ; CODE XREF: solve(void)+4B6↑j
.text:00000000004025E8                                         ; solve(void)+4BD↑j
.text:00000000004025E8                 mov     edx, offset qword_6226F8
.text:00000000004025ED
.text:00000000004025ED loc_4025ED:                             ; CODE XREF: solve(void)+4C1↑j
.text:00000000004025ED                                         ; solve(void)+4C6↑j
.text:00000000004025ED                 mov     eax, offset qword_6226F8
.text:00000000004025F2                 cmp     rdx, rax
.text:00000000004025F5                 jnz     short loc_402620
.text:00000000004025F7                 movsxd  rbx, ebx
.text:00000000004025FA                 mov     edi, offset g
.text:00000000004025FF                 movsxd  rcx, ecx
.text:0000000000402602                 lea     rsi, [rsp+58h+var_58]
.text:0000000000402606                 mov     [rsp+58h+var_58], ebx
.text:0000000000402609                 mov     [rsp+58h+var_54], ecx
.text:000000000040260D                 inc     dword ptr ds:out[rbx*4]
.text:0000000000402614                 inc     dword ptr ds:in[rcx*4]
.text:000000000040261B                 call    _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueERKS1_ ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)
.text:0000000000402620
.text:0000000000402620 loc_402620:                             ; CODE XREF: solve(void)+405↑j
.text:0000000000402620                                         ; solve(void)+450↑j ...
.text:0000000000402620                 mov     rax, cs:s
.text:0000000000402627                 inc     r12
.text:000000000040262A                 mov     rdx, [rax-18h]
.text:000000000040262E                 dec     rdx
.text:0000000000402631                 movsxd  rcx, edx
.text:0000000000402634                 cmp     r12, rcx
.text:0000000000402637                 jl      loc_40223F
.text:000000000040263D                 mov     r12, [rsp+58h+var_40]
.text:0000000000402642                 xor     edx, edx
.text:0000000000402644                 mov     r13, [rsp+58h+var_38]
.text:0000000000402649                 pxor    xmm2, xmm2
.text:000000000040264D                 mov     r14, [rsp+58h+var_30]
.text:0000000000402652                 mov     r15, [rsp+58h+var_28]
.text:0000000000402657
.text:0000000000402657 loc_402657:                             ; CODE XREF: solve(void)+F8↑j
.text:0000000000402657                 movdqa  xmm1, xmm2
.text:000000000040265B                 pcmpeqd xmm0, xmm0
.text:000000000040265F                 nop
.text:0000000000402660
.text:0000000000402660 loc_402660:                             ; CODE XREF: solve(void)+582↓j
.text:0000000000402660                 movdqa  xmm4, ds:in[rdx*4]
.text:0000000000402669                 movdqa  xmm6, ds:out[rdx*4]
.text:0000000000402672                 movdqa  xmm5, xmm4
.text:0000000000402676                 movdqa  xmm3, xmm4
.text:000000000040267A                 pcmpgtd xmm5, xmm6
.text:000000000040267E                 psubd   xmm3, xmm6
.text:0000000000402682                 psubd   xmm6, xmm4
.text:0000000000402686                 pand    xmm3, xmm5
.text:000000000040268A                 pxor    xmm5, xmm0
.text:000000000040268E                 add     rdx, 4
.text:0000000000402692                 pand    xmm6, xmm5
.text:0000000000402696                 paddd   xmm2, xmm3
.text:000000000040269A                 paddd   xmm1, xmm6
.text:000000000040269E                 cmp     rdx, 6Ch ; 'l'
.text:00000000004026A2                 jb      short loc_402660
.text:00000000004026A4                 movdqa  xmm0, xmm1
.text:00000000004026A8                 xor     r10d, r10d
.text:00000000004026AB                 psrldq  xmm0, 8
.text:00000000004026B0                 paddd   xmm1, xmm0
.text:00000000004026B4                 movdqa  xmm3, xmm1
.text:00000000004026B8                 psrlq   xmm3, 20h ; ' '
.text:00000000004026BD                 paddd   xmm1, xmm3
.text:00000000004026C1                 movd    r9d, xmm1
.text:00000000004026C6                 movdqa  xmm1, xmm2
.text:00000000004026CA                 psrldq  xmm1, 8
.text:00000000004026CF                 paddd   xmm2, xmm1
.text:00000000004026D3                 movdqa  xmm4, xmm2
.text:00000000004026D7                 psrlq   xmm4, 20h ; ' '
.text:00000000004026DC                 mov     esi, dword ptr cs:xmmword_6224F0
.text:00000000004026E2                 mov     eax, esi
.text:00000000004026E4                 paddd   xmm2, xmm4
.text:00000000004026E8                 mov     r8d, dword ptr cs:qword_6226B0
.text:00000000004026EF                 sub     eax, r8d
.text:00000000004026F2                 movd    edx, xmm2
.text:00000000004026F6                 cmp     esi, r8d
.text:00000000004026F9                 mov     r11d, dword ptr cs:xmmword_6224F0+4
.text:0000000000402700                 mov     edi, dword ptr cs:qword_6226B0+4
.text:0000000000402706                 lea     ecx, [rdx+rax]
.text:0000000000402709                 cmovg   edx, ecx
.text:000000000040270C                 neg     eax
.text:000000000040270E                 add     eax, r9d
.text:0000000000402711                 cmp     esi, r8d
.text:0000000000402714                 mov     ecx, r11d
.text:0000000000402717                 cmovg   eax, r9d
.text:000000000040271B                 sub     ecx, edi
.text:000000000040271D                 cmp     r11d, edi
.text:0000000000402720                 mov     esi, dword ptr cs:qword_622718
.text:0000000000402726                 cmovg   r10d, ecx
.text:000000000040272A                 add     edx, r10d
.text:000000000040272D                 xor     r10d, r10d
.text:0000000000402730                 cmp     r11d, edi
.text:0000000000402733                 mov     edi, offset _ZSt4cout@@GLIBCXX_3_4
.text:0000000000402738                 cmovg   ecx, r10d
.text:000000000040273C                 sub     eax, ecx
.text:000000000040273E                 cmp     edx, eax
.text:0000000000402740                 cmovge  eax, edx
.text:0000000000402743                 xor     edx, edx
.text:0000000000402745                 dec     eax
.text:0000000000402747                 test    eax, eax
.text:0000000000402749                 cmovg   edx, eax
.text:000000000040274C                 lea     esi, [rsi+rdx+1]
.text:0000000000402750                 call    __ZNSolsEi      ; std::ostream::operator<<(int)
.text:0000000000402755                 mov     rdi, rax
.text:0000000000402758                 mov     esi, offset __ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ ; std::endl<char,std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &)
.text:000000000040275D                 call    __ZNSolsEPFRSoS_E ; std::ostream::operator<<(std::ostream & (*)(std::ostream &))
.text:0000000000402762                 add     rsp, 48h
.text:0000000000402766                 pop     rbp
.text:0000000000402767                 pop     rbx
.text:0000000000402768                 retn
.text:0000000000402769 ; ---------------------------------------------------------------------------
.text:0000000000402769
.text:0000000000402769 loc_402769:                             ; CODE XREF: solve(void)+1CE↑j
.text:0000000000402769                 movsxd  r13, r13d
.text:000000000040276C                 mov     ebx, offset qword_6226F8
.text:0000000000402771                 movsxd  rbp, ebp
.text:0000000000402774                 inc     dword ptr ds:out[r13*4]
.text:000000000040277C                 inc     dword ptr ds:in[rbp*4]
.text:0000000000402783                 test    r14, r14
.text:0000000000402786                 jz      loc_4028BF
.text:000000000040278C
.text:000000000040278C loc_40278C:                             ; CODE XREF: solve(void)+68A↓j
.text:000000000040278C                                         ; solve(void)+698↓j
.text:000000000040278C                 mov     eax, [r14+20h]
.text:0000000000402790                 mov     rbx, r14
.text:0000000000402793                 cmp     r13d, eax
.text:0000000000402796                 jl      short loc_4027A3
.text:0000000000402798                 cmp     eax, r13d
.text:000000000040279B                 jl      short loc_4027B1
.text:000000000040279D                 cmp     ebp, [r14+24h]
.text:00000000004027A1                 jge     short loc_4027B1
.text:00000000004027A3
.text:00000000004027A3 loc_4027A3:                             ; CODE XREF: solve(void)+676↑j
.text:00000000004027A3                 mov     r14, [r14+10h]
.text:00000000004027A7                 test    r14, r14
.text:00000000004027AA                 jnz     short loc_40278C
.text:00000000004027AC                 jmp     loc_40283D
.text:00000000004027B1 ; ---------------------------------------------------------------------------
.text:00000000004027B1
.text:00000000004027B1 loc_4027B1:                             ; CODE XREF: solve(void)+67B↑j
.text:00000000004027B1                                         ; solve(void)+681↑j
.text:00000000004027B1                 mov     r14, [r14+18h]
.text:00000000004027B5                 test    r14, r14
.text:00000000004027B8                 jnz     short loc_40278C
.text:00000000004027BA                 mov     rcx, rbx
.text:00000000004027BD
.text:00000000004027BD loc_4027BD:                             ; CODE XREF: solve(void)+731↓j
.text:00000000004027BD                 mov     eax, [rcx+20h]
.text:00000000004027C0                 cmp     eax, r13d
.text:00000000004027C3                 jl      short loc_4027D7
.text:00000000004027C5                 cmp     r13d, eax
.text:00000000004027C8                 jl      loc_4022F4
.text:00000000004027CE                 cmp     ebp, [rcx+24h]
.text:00000000004027D1                 jle     loc_4022F4
.text:00000000004027D7
.text:00000000004027D7 loc_4027D7:                             ; CODE XREF: solve(void)+6A3↑j
.text:00000000004027D7                 test    r14, r14
.text:00000000004027DA                 jz      short loc_40281C
.text:00000000004027DC
.text:00000000004027DC loc_4027DC:                             ; CODE XREF: solve(void)+704↓j
.text:00000000004027DC                                         ; solve(void)+70C↓j ...
.text:00000000004027DC                 mov     r15d, 1
.text:00000000004027E2
.text:00000000004027E2 loc_4027E2:                             ; CODE XREF: solve(void)+71B↓j
.text:00000000004027E2                 mov     edi, 28h ; '('  ; unsigned __int64
.text:00000000004027E7                 call    __Znwm          ; operator new(ulong)
.text:00000000004027EC                 mov     r14, rax
.text:00000000004027EF                 cmp     r14, 0FFFFFFFFFFFFFFE0h
.text:00000000004027F3                 jz      short loc_4027FD
.text:00000000004027F5                 mov     [r14+20h], r13d
.text:00000000004027F9                 mov     [r14+24h], ebp
.text:00000000004027FD
.text:00000000004027FD loc_4027FD:                             ; CODE XREF: solve(void)+6D3↑j
.text:00000000004027FD                 mov     edi, r15d
.text:0000000000402800                 mov     rsi, r14
.text:0000000000402803                 mov     rdx, rbx
.text:0000000000402806                 mov     ecx, offset qword_6226F8
.text:000000000040280B                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000402810                 inc     cs:qword_622718
.text:0000000000402817                 jmp     loc_4022F4
.text:000000000040281C ; ---------------------------------------------------------------------------
.text:000000000040281C
.text:000000000040281C loc_40281C:                             ; CODE XREF: solve(void)+6BA↑j
.text:000000000040281C                 mov     eax, offset qword_6226F8
.text:0000000000402821                 cmp     rbx, rax
.text:0000000000402824                 jz      short loc_4027DC
.text:0000000000402826                 mov     eax, [rbx+20h]
.text:0000000000402829                 cmp     r13d, eax
.text:000000000040282C                 jl      short loc_4027DC
.text:000000000040282E                 cmp     eax, r13d
.text:0000000000402831                 jl      short loc_402838
.text:0000000000402833                 cmp     ebp, [rbx+24h]
.text:0000000000402836                 jl      short loc_4027DC
.text:0000000000402838
.text:0000000000402838 loc_402838:                             ; CODE XREF: solve(void)+711↑j
.text:0000000000402838                 xor     r15d, r15d
.text:000000000040283B                 jmp     short loc_4027E2
.text:000000000040283D ; ---------------------------------------------------------------------------
.text:000000000040283D
.text:000000000040283D loc_40283D:                             ; CODE XREF: solve(void)+68C↑j
.text:000000000040283D                 cmp     rbx, qword ptr cs:xmmword_622700+8
.text:0000000000402844                 jz      short loc_402856
.text:0000000000402846
.text:0000000000402846 loc_402846:                             ; CODE XREF: solve(void)+7AD↓j
.text:0000000000402846                 mov     rdi, rbx
.text:0000000000402849                 call    __ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base ; std::_Rb_tree_decrement(std::_Rb_tree_node_base *)
.text:000000000040284E                 mov     rcx, rax
.text:0000000000402851                 jmp     loc_4027BD
.text:0000000000402856 ; ---------------------------------------------------------------------------
.text:0000000000402856
.text:0000000000402856 loc_402856:                             ; CODE XREF: solve(void)+724↑j
.text:0000000000402856                                         ; solve(void)+7AB↓j
.text:0000000000402856                 mov     eax, offset qword_6226F8
.text:000000000040285B                 cmp     rbx, rax
.text:000000000040285E                 jnz     short loc_402868
.text:0000000000402860                 mov     r15d, 1
.text:0000000000402866                 jmp     short loc_402885
.text:0000000000402868 ; ---------------------------------------------------------------------------
.text:0000000000402868
.text:0000000000402868 loc_402868:                             ; CODE XREF: solve(void)+73E↑j
.text:0000000000402868                 mov     eax, [rbx+20h]
.text:000000000040286B                 cmp     r13d, eax
.text:000000000040286E                 jl      short loc_40287A
.text:0000000000402870                 cmp     eax, r13d
.text:0000000000402873                 jl      short loc_402882
.text:0000000000402875                 cmp     ebp, [rbx+24h]
.text:0000000000402878                 jge     short loc_402882
.text:000000000040287A
.text:000000000040287A loc_40287A:                             ; CODE XREF: solve(void)+74E↑j
.text:000000000040287A                 mov     r15d, 1
.text:0000000000402880                 jmp     short loc_402885
.text:0000000000402882 ; ---------------------------------------------------------------------------
.text:0000000000402882
.text:0000000000402882 loc_402882:                             ; CODE XREF: solve(void)+753↑j
.text:0000000000402882                                         ; solve(void)+758↑j
.text:0000000000402882                 xor     r15d, r15d
.text:0000000000402885
.text:0000000000402885 loc_402885:                             ; CODE XREF: solve(void)+746↑j
.text:0000000000402885                                         ; solve(void)+760↑j
.text:0000000000402885                 mov     edi, 28h ; '('  ; unsigned __int64
.text:000000000040288A                 call    __Znwm          ; operator new(ulong)
.text:000000000040288F                 mov     r14, rax
.text:0000000000402892                 cmp     r14, 0FFFFFFFFFFFFFFE0h
.text:0000000000402896                 jz      short loc_4028A0
.text:0000000000402898                 mov     [r14+20h], r13d
.text:000000000040289C                 mov     [r14+24h], ebp
.text:00000000004028A0
.text:00000000004028A0 loc_4028A0:                             ; CODE XREF: solve(void)+776↑j
.text:00000000004028A0                 mov     edi, r15d
.text:00000000004028A3                 mov     rsi, r14
.text:00000000004028A6                 mov     rdx, rbx
.text:00000000004028A9                 mov     ecx, offset qword_6226F8
.text:00000000004028AE                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:00000000004028B3                 inc     cs:qword_622718
.text:00000000004028BA                 jmp     loc_4022F4
.text:00000000004028BF ; ---------------------------------------------------------------------------
.text:00000000004028BF
.text:00000000004028BF loc_4028BF:                             ; CODE XREF: solve(void)+666↑j
.text:00000000004028BF                 mov     eax, offset qword_6226F8
.text:00000000004028C4                 cmp     rax, qword ptr cs:xmmword_622700+8
.text:00000000004028CB                 jz      short loc_402856
.text:00000000004028CD                 jmp     loc_402846
.text:00000000004028CD _Z5solvev       endp
.text:00000000004028CD
.text:00000000004028CD ; ---------------------------------------------------------------------------
.text:00000000004028D2                 align 20h
.text:00000000004028D2 ; } // starts at 402120
.text:00000000004028E0
.text:00000000004028E0 ; =============== S U B R O U T I N E =======================================
.text:00000000004028E0
.text:00000000004028E0
.text:00000000004028E0 ; __int64 __fastcall __gnu_cxx::__exchange_and_add_dispatch(int *, int)
.text:00000000004028E0 _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii proc near
.text:00000000004028E0                                         ; CODE XREF: main+51F↑p
.text:00000000004028E0                                         ; main+53F↑p ...
.text:00000000004028E0 ; __unwind { // ___gxx_personality_v0
.text:00000000004028E0                 mov     eax, 0
.text:00000000004028E5                 test    rax, rax
.text:00000000004028E8                 jz      short loc_4028F6
.text:00000000004028EA                 mov     ecx, 0FFFFFFFFh
.text:00000000004028EF                 lock xadd [rdi], ecx
.text:00000000004028F3                 mov     eax, ecx
.text:00000000004028F5                 retn
.text:00000000004028F6 ; ---------------------------------------------------------------------------
.text:00000000004028F6
.text:00000000004028F6 loc_4028F6:                             ; CODE XREF: __gnu_cxx::__exchange_and_add_dispatch(int *,int)+8↑j
.text:00000000004028F6                 mov     eax, [rdi]
.text:00000000004028F8                 lea     edx, [rax-1]
.text:00000000004028FB                 mov     [rdi], edx
.text:00000000004028FD                 retn
.text:00000000004028FD _ZN9__gnu_cxx27__exchange_and_add_dispatchEPii endp
.text:00000000004028FD
.text:00000000004028FD ; ---------------------------------------------------------------------------
.text:00000000004028FE                 align 20h
.text:00000000004028FE ; } // starts at 4028E0
.text:0000000000402900
.text:0000000000402900 ; =============== S U B R O U T I N E =======================================
.text:0000000000402900
.text:0000000000402900
.text:0000000000402900 ; add(std::string, std::string)
.text:0000000000402900                 public _Z3addSsSs
.text:0000000000402900 _Z3addSsSs      proc near               ; CODE XREF: main+63↑p
.text:0000000000402900                                         ; main+C4↑p ...
.text:0000000000402900
.text:0000000000402900 var_58          = qword ptr -58h
.text:0000000000402900 var_50          = qword ptr -50h
.text:0000000000402900 var_48          = qword ptr -48h
.text:0000000000402900 var_40          = qword ptr -40h
.text:0000000000402900 var_38          = dword ptr -38h
.text:0000000000402900 var_34          = dword ptr -34h
.text:0000000000402900
.text:0000000000402900 ; __unwind { // ___gxx_personality_v0
.text:0000000000402900                 push    r13
.text:0000000000402902                 push    r14
.text:0000000000402904                 push    r15
.text:0000000000402906                 push    rbx
.text:0000000000402907                 push    rbp
.text:0000000000402908                 sub     rsp, 30h
.text:000000000040290C                 mov     rbx, rsi
.text:000000000040290F                 mov     rbp, rdi
.text:0000000000402912                 mov     rax, [rbx]
.text:0000000000402915                 cmp     dword ptr [rax-8], 0
.text:0000000000402919                 jl      short loc_402926
.text:000000000040291B                 mov     rdi, rbx        ; this
.text:000000000040291E                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:0000000000402923                 mov     rax, [rbx]
.text:0000000000402926
.text:0000000000402926 loc_402926:                             ; CODE XREF: add(std::string,std::string)+19↑j
.text:0000000000402926                 movsx   r14d, byte ptr [rax]
.text:000000000040292A                 mov     rax, [rbp+0]
.text:000000000040292E                 add     r14d, 0FFFFFFEAh
.text:0000000000402932                 cmp     dword ptr [rax-8], 0
.text:0000000000402936                 jl      short loc_402944
.text:0000000000402938                 mov     rdi, rbp        ; this
.text:000000000040293B                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:0000000000402940                 mov     rax, [rbp+0]
.text:0000000000402944
.text:0000000000402944 loc_402944:                             ; CODE XREF: add(std::string,std::string)+36↑j
.text:0000000000402944                 movsx   ebp, byte ptr [rax]
.text:0000000000402947                 mov     r13d, offset qword_6226C8
.text:000000000040294D                 mov     rbx, qword ptr cs:xmmword_6226D0
.text:0000000000402954                 add     ebp, 0FFFFFF9Fh
.text:0000000000402957                 mov     rax, rbx
.text:000000000040295A                 test    rbx, rbx
.text:000000000040295D                 jz      short loc_402976
.text:000000000040295F
.text:000000000040295F loc_40295F:                             ; CODE XREF: add(std::string,std::string)+74↓j
.text:000000000040295F                 cmp     ebp, [rax+20h]
.text:0000000000402962                 jg      short loc_40296D
.text:0000000000402964                 mov     r13, rax
.text:0000000000402967                 mov     rax, [rax+10h]
.text:000000000040296B                 jmp     short loc_402971
.text:000000000040296D ; ---------------------------------------------------------------------------
.text:000000000040296D
.text:000000000040296D loc_40296D:                             ; CODE XREF: add(std::string,std::string)+62↑j
.text:000000000040296D                 mov     rax, [rax+18h]
.text:0000000000402971
.text:0000000000402971 loc_402971:                             ; CODE XREF: add(std::string,std::string)+6B↑j
.text:0000000000402971                 test    rax, rax
.text:0000000000402974                 jnz     short loc_40295F
.text:0000000000402976
.text:0000000000402976 loc_402976:                             ; CODE XREF: add(std::string,std::string)+5D↑j
.text:0000000000402976                 mov     eax, offset qword_6226C8
.text:000000000040297B                 cmp     r13, rax
.text:000000000040297E                 jz      short loc_40298A
.text:0000000000402980                 cmp     ebp, [r13+20h]
.text:0000000000402984                 jge     loc_402AA9
.text:000000000040298A
.text:000000000040298A loc_40298A:                             ; CODE XREF: add(std::string,std::string)+7E↑j
.text:000000000040298A                 mov     eax, offset qword_6226C8
.text:000000000040298F                 mov     [rsp+58h+var_38], ebp
.text:0000000000402993                 cmp     r13, rax
.text:0000000000402996                 mov     [rsp+58h+var_34], 0
.text:000000000040299E                 jz      loc_402C27
.text:00000000004029A4                 mov     eax, [r13+20h]
.text:00000000004029A8                 cmp     ebp, eax
.text:00000000004029AA                 jge     short loc_402A20
.text:00000000004029AC                 mov     r15, qword ptr cs:xmmword_6226D0+8
.text:00000000004029B3                 cmp     r13, r15
.text:00000000004029B6                 jz      loc_402B16
.text:00000000004029BC                 mov     rdi, r13
.text:00000000004029BF                 call    __ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base ; std::_Rb_tree_decrement(std::_Rb_tree_node_base const*)
.text:00000000004029C4                 mov     r15, rax
.text:00000000004029C7                 mov     ecx, [r15+20h]
.text:00000000004029CB                 cmp     ecx, ebp
.text:00000000004029CD                 jge     loc_402A8F
.text:00000000004029D3                 cmp     qword ptr [r15+18h], 0
.text:00000000004029D8                 jz      loc_402ABA
.text:00000000004029DE                 mov     edi, 28h ; '('  ; unsigned __int64
.text:00000000004029E3                 call    __Znwm          ; operator new(ulong)
.text:00000000004029E8                 mov     rbx, rax
.text:00000000004029EB                 cmp     rbx, 0FFFFFFFFFFFFFFE0h
.text:00000000004029EF                 jz      short loc_4029FF
.text:00000000004029F1                 mov     eax, [rsp+58h+var_38]
.text:00000000004029F5                 mov     [rbx+20h], eax
.text:00000000004029F8                 mov     ecx, [rsp+58h+var_34]
.text:00000000004029FC                 mov     [rbx+24h], ecx
.text:00000000004029FF
.text:00000000004029FF loc_4029FF:                             ; CODE XREF: add(std::string,std::string)+EF↑j
.text:00000000004029FF                 mov     edi, 1
.text:0000000000402A04                 mov     rsi, rbx
.text:0000000000402A07                 mov     rdx, r13
.text:0000000000402A0A                 mov     ecx, offset qword_6226C8
.text:0000000000402A0F                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000402A14                 inc     cs:qword_6226E8
.text:0000000000402A1B                 jmp     loc_402AA6
.text:0000000000402A20 ; ---------------------------------------------------------------------------
.text:0000000000402A20
.text:0000000000402A20 loc_402A20:                             ; CODE XREF: add(std::string,std::string)+AA↑j
.text:0000000000402A20                 cmp     eax, ebp
.text:0000000000402A22                 jge     short loc_402AA3
.text:0000000000402A24                 mov     r15, cs:qword_6226E0
.text:0000000000402A2B                 cmp     r13, r15
.text:0000000000402A2E                 jz      loc_402BC6
.text:0000000000402A34                 mov     rdi, r13
.text:0000000000402A37                 call    __ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base ; std::_Rb_tree_increment(std::_Rb_tree_node_base const*)
.text:0000000000402A3C                 mov     r15, rax
.text:0000000000402A3F                 cmp     ebp, [r15+20h]
.text:0000000000402A43                 jge     short loc_402A8F
.text:0000000000402A45                 cmp     qword ptr [r13+18h], 0
.text:0000000000402A4A                 jz      loc_402B7C
.text:0000000000402A50                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000402A55                 call    __Znwm          ; operator new(ulong)
.text:0000000000402A5A                 mov     rbx, rax
.text:0000000000402A5D                 cmp     rbx, 0FFFFFFFFFFFFFFE0h
.text:0000000000402A61                 jz      short loc_402A71
.text:0000000000402A63                 mov     eax, [rsp+58h+var_38]
.text:0000000000402A67                 mov     [rbx+20h], eax
.text:0000000000402A6A                 mov     ecx, [rsp+58h+var_34]
.text:0000000000402A6E                 mov     [rbx+24h], ecx
.text:0000000000402A71
.text:0000000000402A71 loc_402A71:                             ; CODE XREF: add(std::string,std::string)+161↑j
.text:0000000000402A71                 mov     edi, 1
.text:0000000000402A76                 mov     rsi, rbx
.text:0000000000402A79                 mov     rdx, r15
.text:0000000000402A7C                 mov     ecx, offset qword_6226C8
.text:0000000000402A81                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000402A86                 inc     cs:qword_6226E8
.text:0000000000402A8D                 jmp     short loc_402AA6
.text:0000000000402A8F ; ---------------------------------------------------------------------------
.text:0000000000402A8F
.text:0000000000402A8F loc_402A8F:                             ; CODE XREF: add(std::string,std::string)+CD↑j
.text:0000000000402A8F                                         ; add(std::string,std::string)+143↑j
.text:0000000000402A8F                 mov     edi, offset ma
.text:0000000000402A94                 lea     rsi, [rsp+58h+var_38]
.text:0000000000402A99                 call    _ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE16_M_insert_uniqueERKS2_ ; std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique(std::pair<int const,int> const&)
.text:0000000000402A9E                 mov     rbx, rax
.text:0000000000402AA1                 jmp     short loc_402AA6
.text:0000000000402AA3 ; ---------------------------------------------------------------------------
.text:0000000000402AA3
.text:0000000000402AA3 loc_402AA3:                             ; CODE XREF: add(std::string,std::string)+122↑j
.text:0000000000402AA3                 mov     rbx, r13
.text:0000000000402AA6
.text:0000000000402AA6 loc_402AA6:                             ; CODE XREF: add(std::string,std::string)+11B↑j
.text:0000000000402AA6                                         ; add(std::string,std::string)+18D↑j ...
.text:0000000000402AA6                 mov     r13, rbx
.text:0000000000402AA9
.text:0000000000402AA9 loc_402AA9:                             ; CODE XREF: add(std::string,std::string)+84↑j
.text:0000000000402AA9                 mov     [r13+24h], r14d
.text:0000000000402AAD                 add     rsp, 30h
.text:0000000000402AB1                 pop     rbp
.text:0000000000402AB2                 pop     rbx
.text:0000000000402AB3                 pop     r15
.text:0000000000402AB5                 pop     r14
.text:0000000000402AB7                 pop     r13
.text:0000000000402AB9                 retn
.text:0000000000402ABA ; ---------------------------------------------------------------------------
.text:0000000000402ABA
.text:0000000000402ABA loc_402ABA:                             ; CODE XREF: add(std::string,std::string)+D8↑j
.text:0000000000402ABA                 mov     eax, offset qword_6226C8
.text:0000000000402ABF                 cmp     r15, rax
.text:0000000000402AC2                 jnz     short loc_402ACB
.text:0000000000402AC4                 mov     ebp, 1
.text:0000000000402AC9                 jmp     short loc_402ADA
.text:0000000000402ACB ; ---------------------------------------------------------------------------
.text:0000000000402ACB
.text:0000000000402ACB loc_402ACB:                             ; CODE XREF: add(std::string,std::string)+1C2↑j
.text:0000000000402ACB                 mov     eax, 1
.text:0000000000402AD0                 cmp     ebp, ecx
.text:0000000000402AD2                 mov     ebp, 0
.text:0000000000402AD7                 cmovl   ebp, eax
.text:0000000000402ADA
.text:0000000000402ADA loc_402ADA:                             ; CODE XREF: add(std::string,std::string)+1C9↑j
.text:0000000000402ADA                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000402ADF                 call    __Znwm          ; operator new(ulong)
.text:0000000000402AE4                 mov     rbx, rax
.text:0000000000402AE7                 cmp     rbx, 0FFFFFFFFFFFFFFE0h
.text:0000000000402AEB                 jz      short loc_402AFB
.text:0000000000402AED                 mov     eax, [rsp+58h+var_38]
.text:0000000000402AF1                 mov     [rbx+20h], eax
.text:0000000000402AF4                 mov     ecx, [rsp+58h+var_34]
.text:0000000000402AF8                 mov     [rbx+24h], ecx
.text:0000000000402AFB
.text:0000000000402AFB loc_402AFB:                             ; CODE XREF: add(std::string,std::string)+1EB↑j
.text:0000000000402AFB                 mov     edi, ebp
.text:0000000000402AFD                 mov     rsi, rbx
.text:0000000000402B00                 mov     rdx, r15
.text:0000000000402B03                 mov     ecx, offset qword_6226C8
.text:0000000000402B08                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000402B0D                 inc     cs:qword_6226E8
.text:0000000000402B14                 jmp     short loc_402AA6
.text:0000000000402B16 ; ---------------------------------------------------------------------------
.text:0000000000402B16
.text:0000000000402B16 loc_402B16:                             ; CODE XREF: add(std::string,std::string)+B6↑j
.text:0000000000402B16                 test    r15, r15
.text:0000000000402B19                 jz      short loc_402B5F
.text:0000000000402B1B
.text:0000000000402B1B loc_402B1B:                             ; CODE XREF: add(std::string,std::string)+267↓j
.text:0000000000402B1B                 mov     ebp, 1
.text:0000000000402B20
.text:0000000000402B20 loc_402B20:                             ; CODE XREF: add(std::string,std::string)+27A↓j
.text:0000000000402B20                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000402B25                 call    __Znwm          ; operator new(ulong)
.text:0000000000402B2A                 mov     rbx, rax
.text:0000000000402B2D                 cmp     rbx, 0FFFFFFFFFFFFFFE0h
.text:0000000000402B31                 jz      short loc_402B41
.text:0000000000402B33                 mov     eax, [rsp+58h+var_38]
.text:0000000000402B37                 mov     [rbx+20h], eax
.text:0000000000402B3A                 mov     ecx, [rsp+58h+var_34]
.text:0000000000402B3E                 mov     [rbx+24h], ecx
.text:0000000000402B41
.text:0000000000402B41 loc_402B41:                             ; CODE XREF: add(std::string,std::string)+231↑j
.text:0000000000402B41                 mov     edi, ebp
.text:0000000000402B43                 mov     rsi, rbx
.text:0000000000402B46                 mov     rdx, r15
.text:0000000000402B49                 mov     ecx, offset qword_6226C8
.text:0000000000402B4E                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000402B53                 inc     cs:qword_6226E8
.text:0000000000402B5A                 jmp     loc_402AA6
.text:0000000000402B5F ; ---------------------------------------------------------------------------
.text:0000000000402B5F
.text:0000000000402B5F loc_402B5F:                             ; CODE XREF: add(std::string,std::string)+219↑j
.text:0000000000402B5F                 mov     eax, offset qword_6226C8
.text:0000000000402B64                 cmp     r15, rax
.text:0000000000402B67                 jz      short loc_402B1B
.text:0000000000402B69                 mov     eax, 1
.text:0000000000402B6E                 cmp     ebp, [r15+20h]
.text:0000000000402B72                 mov     ebp, 0
.text:0000000000402B77                 cmovl   ebp, eax
.text:0000000000402B7A                 jmp     short loc_402B20
.text:0000000000402B7C ; ---------------------------------------------------------------------------
.text:0000000000402B7C
.text:0000000000402B7C loc_402B7C:                             ; CODE XREF: add(std::string,std::string)+14A↑j
.text:0000000000402B7C                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000402B81                 call    __Znwm          ; operator new(ulong)
.text:0000000000402B86                 mov     rbx, rax
.text:0000000000402B89                 cmp     rbx, 0FFFFFFFFFFFFFFE0h
.text:0000000000402B8D                 jz      short loc_402B9D
.text:0000000000402B8F                 mov     eax, [rsp+58h+var_38]
.text:0000000000402B93                 mov     [rbx+20h], eax
.text:0000000000402B96                 mov     ecx, [rsp+58h+var_34]
.text:0000000000402B9A                 mov     [rbx+24h], ecx
.text:0000000000402B9D
.text:0000000000402B9D loc_402B9D:                             ; CODE XREF: add(std::string,std::string)+28D↑j
.text:0000000000402B9D                 mov     ecx, offset qword_6226C8
.text:0000000000402BA2                 mov     eax, 1
.text:0000000000402BA7                 xor     edi, edi
.text:0000000000402BA9                 cmp     r13, rcx
.text:0000000000402BAC                 mov     rsi, rbx
.text:0000000000402BAF                 mov     rdx, r13
.text:0000000000402BB2                 cmovz   edi, eax
.text:0000000000402BB5                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000402BBA                 inc     cs:qword_6226E8
.text:0000000000402BC1                 jmp     loc_402AA6
.text:0000000000402BC6 ; ---------------------------------------------------------------------------
.text:0000000000402BC6
.text:0000000000402BC6 loc_402BC6:                             ; CODE XREF: add(std::string,std::string)+12E↑j
.text:0000000000402BC6                 mov     eax, offset qword_6226C8
.text:0000000000402BCB                 cmp     r15, rax
.text:0000000000402BCE                 jnz     short loc_402BD7
.text:0000000000402BD0                 mov     ebp, 1
.text:0000000000402BD5                 jmp     short loc_402BE8
.text:0000000000402BD7 ; ---------------------------------------------------------------------------
.text:0000000000402BD7
.text:0000000000402BD7 loc_402BD7:                             ; CODE XREF: add(std::string,std::string)+2CE↑j
.text:0000000000402BD7                 mov     eax, 1
.text:0000000000402BDC                 cmp     ebp, [r15+20h]
.text:0000000000402BE0                 mov     ebp, 0
.text:0000000000402BE5                 cmovl   ebp, eax
.text:0000000000402BE8
.text:0000000000402BE8 loc_402BE8:                             ; CODE XREF: add(std::string,std::string)+2D5↑j
.text:0000000000402BE8                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000402BED                 call    __Znwm          ; operator new(ulong)
.text:0000000000402BF2                 mov     rbx, rax
.text:0000000000402BF5                 cmp     rbx, 0FFFFFFFFFFFFFFE0h
.text:0000000000402BF9                 jz      short loc_402C09
.text:0000000000402BFB                 mov     eax, [rsp+58h+var_38]
.text:0000000000402BFF                 mov     [rbx+20h], eax
.text:0000000000402C02                 mov     ecx, [rsp+58h+var_34]
.text:0000000000402C06                 mov     [rbx+24h], ecx
.text:0000000000402C09
.text:0000000000402C09 loc_402C09:                             ; CODE XREF: add(std::string,std::string)+2F9↑j
.text:0000000000402C09                 mov     edi, ebp
.text:0000000000402C0B                 mov     rsi, rbx
.text:0000000000402C0E                 mov     rdx, r15
.text:0000000000402C11                 mov     ecx, offset qword_6226C8
.text:0000000000402C16                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000402C1B                 inc     cs:qword_6226E8
.text:0000000000402C22                 jmp     loc_402AA6
.text:0000000000402C27 ; ---------------------------------------------------------------------------
.text:0000000000402C27
.text:0000000000402C27 loc_402C27:                             ; CODE XREF: add(std::string,std::string)+9E↑j
.text:0000000000402C27                 cmp     cs:qword_6226E8, 0
.text:0000000000402C2F                 jbe     short loc_402C9F
.text:0000000000402C31                 mov     r13, cs:qword_6226E0
.text:0000000000402C38                 mov     ecx, [r13+20h]
.text:0000000000402C3C                 cmp     ecx, ebp
.text:0000000000402C3E                 jge     short loc_402C9F
.text:0000000000402C40                 mov     eax, offset qword_6226C8
.text:0000000000402C45                 cmp     r13, rax
.text:0000000000402C48                 jnz     short loc_402C51
.text:0000000000402C4A                 mov     ebp, 1
.text:0000000000402C4F                 jmp     short loc_402C60
.text:0000000000402C51 ; ---------------------------------------------------------------------------
.text:0000000000402C51
.text:0000000000402C51 loc_402C51:                             ; CODE XREF: add(std::string,std::string)+348↑j
.text:0000000000402C51                 mov     eax, 1
.text:0000000000402C56                 cmp     ebp, ecx
.text:0000000000402C58                 mov     ebp, 0
.text:0000000000402C5D                 cmovl   ebp, eax
.text:0000000000402C60
.text:0000000000402C60 loc_402C60:                             ; CODE XREF: add(std::string,std::string)+34F↑j
.text:0000000000402C60                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000402C65                 call    __Znwm          ; operator new(ulong)
.text:0000000000402C6A                 mov     rbx, rax
.text:0000000000402C6D                 cmp     rbx, 0FFFFFFFFFFFFFFE0h
.text:0000000000402C71                 jz      short loc_402C81
.text:0000000000402C73                 mov     eax, [rsp+58h+var_38]
.text:0000000000402C77                 mov     [rbx+20h], eax
.text:0000000000402C7A                 mov     ecx, [rsp+58h+var_34]
.text:0000000000402C7E                 mov     [rbx+24h], ecx
.text:0000000000402C81
.text:0000000000402C81 loc_402C81:                             ; CODE XREF: add(std::string,std::string)+371↑j
.text:0000000000402C81                 mov     edi, ebp
.text:0000000000402C83                 mov     rsi, rbx
.text:0000000000402C86                 mov     rdx, r13
.text:0000000000402C89                 mov     ecx, offset qword_6226C8
.text:0000000000402C8E                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000402C93                 inc     cs:qword_6226E8
.text:0000000000402C9A                 jmp     loc_402AA6
.text:0000000000402C9F ; ---------------------------------------------------------------------------
.text:0000000000402C9F
.text:0000000000402C9F loc_402C9F:                             ; CODE XREF: add(std::string,std::string)+32F↑j
.text:0000000000402C9F                                         ; add(std::string,std::string)+33E↑j
.text:0000000000402C9F                 mov     r13d, offset qword_6226C8
.text:0000000000402CA5                 mov     eax, 1
.text:0000000000402CAA                 test    rbx, rbx
.text:0000000000402CAD                 jz      short loc_402CD2
.text:0000000000402CAF                 mov     ecx, 1
.text:0000000000402CB4
.text:0000000000402CB4 loc_402CB4:                             ; CODE XREF: add(std::string,std::string)+3D0↓j
.text:0000000000402CB4                 xor     eax, eax
.text:0000000000402CB6                 cmp     ebp, [rbx+20h]
.text:0000000000402CB9                 mov     r13, rbx
.text:0000000000402CBC                 cmovl   eax, ecx
.text:0000000000402CBF                 test    eax, eax
.text:0000000000402CC1                 jz      short loc_402CC9
.text:0000000000402CC3                 mov     rbx, [rbx+10h]
.text:0000000000402CC7                 jmp     short loc_402CCD
.text:0000000000402CC9 ; ---------------------------------------------------------------------------
.text:0000000000402CC9
.text:0000000000402CC9 loc_402CC9:                             ; CODE XREF: add(std::string,std::string)+3C1↑j
.text:0000000000402CC9                 mov     rbx, [rbx+18h]
.text:0000000000402CCD
.text:0000000000402CCD loc_402CCD:                             ; CODE XREF: add(std::string,std::string)+3C7↑j
.text:0000000000402CCD                 test    rbx, rbx
.text:0000000000402CD0                 jnz     short loc_402CB4
.text:0000000000402CD2
.text:0000000000402CD2 loc_402CD2:                             ; CODE XREF: add(std::string,std::string)+3AD↑j
.text:0000000000402CD2                 mov     rcx, r13
.text:0000000000402CD5                 test    eax, eax
.text:0000000000402CD7                 jz      short loc_402CF1
.text:0000000000402CD9                 cmp     r13, qword ptr cs:xmmword_6226D0+8
.text:0000000000402CE0                 jz      loc_402D72
.text:0000000000402CE6                 mov     rdi, r13
.text:0000000000402CE9                 call    __ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base ; std::_Rb_tree_decrement(std::_Rb_tree_node_base *)
.text:0000000000402CEE                 mov     rcx, rax
.text:0000000000402CF1
.text:0000000000402CF1 loc_402CF1:                             ; CODE XREF: add(std::string,std::string)+3D7↑j
.text:0000000000402CF1                 cmp     ebp, [rcx+20h]
.text:0000000000402CF4                 jle     short loc_402D58
.text:0000000000402CF6                 test    rbx, rbx
.text:0000000000402CF9                 jz      loc_402DDC
.text:0000000000402CFF
.text:0000000000402CFF loc_402CFF:                             ; CODE XREF: add(std::string,std::string)+4E4↓j
.text:0000000000402CFF                 mov     ebp, 1
.text:0000000000402D04
.text:0000000000402D04 loc_402D04:                             ; CODE XREF: add(std::string,std::string)+4FB↓j
.text:0000000000402D04                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000402D09                 call    __Znwm          ; operator new(ulong)
.text:0000000000402D0E                 mov     rbx, rax
.text:0000000000402D11                 cmp     rbx, 0FFFFFFFFFFFFFFE0h
.text:0000000000402D15                 jz      short loc_402D25
.text:0000000000402D17                 mov     eax, [rsp+58h+var_38]
.text:0000000000402D1B                 mov     [rbx+20h], eax
.text:0000000000402D1E                 mov     ecx, [rsp+58h+var_34]
.text:0000000000402D22                 mov     [rbx+24h], ecx
.text:0000000000402D25
.text:0000000000402D25 loc_402D25:                             ; CODE XREF: add(std::string,std::string)+415↑j
.text:0000000000402D25                 mov     edi, ebp
.text:0000000000402D27                 mov     rsi, rbx
.text:0000000000402D2A                 mov     rdx, r13
.text:0000000000402D2D                 mov     ecx, offset qword_6226C8
.text:0000000000402D32                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000402D37                 mov     byte ptr [rsp+58h+var_50], 1
.text:0000000000402D3C                 mov     rax, [rsp+58h+var_50]
.text:0000000000402D41                 inc     cs:qword_6226E8
.text:0000000000402D48                 mov     [rsp+58h+var_58], rbx
.text:0000000000402D4C                 mov     [rsp+58h+var_48], rbx
.text:0000000000402D51                 mov     [rsp+58h+var_40], rax
.text:0000000000402D56                 jmp     short loc_402DD2
.text:0000000000402D58 ; ---------------------------------------------------------------------------
.text:0000000000402D58
.text:0000000000402D58 loc_402D58:                             ; CODE XREF: add(std::string,std::string)+3F4↑j
.text:0000000000402D58                 mov     byte ptr [rsp+58h+var_50], 0
.text:0000000000402D5D                 mov     rax, [rsp+58h+var_50]
.text:0000000000402D62                 mov     [rsp+58h+var_58], rcx
.text:0000000000402D66                 mov     [rsp+58h+var_48], rcx
.text:0000000000402D6B                 mov     [rsp+58h+var_40], rax
.text:0000000000402D70                 jmp     short loc_402DD2
.text:0000000000402D72 ; ---------------------------------------------------------------------------
.text:0000000000402D72
.text:0000000000402D72 loc_402D72:                             ; CODE XREF: add(std::string,std::string)+3E0↑j
.text:0000000000402D72                 test    rbx, rbx
.text:0000000000402D75                 jz      loc_402E00
.text:0000000000402D7B
.text:0000000000402D7B loc_402D7B:                             ; CODE XREF: add(std::string,std::string)+508↓j
.text:0000000000402D7B                 mov     ebp, 1
.text:0000000000402D80
.text:0000000000402D80 loc_402D80:                             ; CODE XREF: add(std::string,std::string)+51F↓j
.text:0000000000402D80                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000402D85                 call    __Znwm          ; operator new(ulong)
.text:0000000000402D8A                 mov     rbx, rax
.text:0000000000402D8D                 cmp     rbx, 0FFFFFFFFFFFFFFE0h
.text:0000000000402D91                 jz      short loc_402DA1
.text:0000000000402D93                 mov     eax, [rsp+58h+var_38]
.text:0000000000402D97                 mov     [rbx+20h], eax
.text:0000000000402D9A                 mov     ecx, [rsp+58h+var_34]
.text:0000000000402D9E                 mov     [rbx+24h], ecx
.text:0000000000402DA1
.text:0000000000402DA1 loc_402DA1:                             ; CODE XREF: add(std::string,std::string)+491↑j
.text:0000000000402DA1                 mov     edi, ebp
.text:0000000000402DA3                 mov     rsi, rbx
.text:0000000000402DA6                 mov     rdx, r13
.text:0000000000402DA9                 mov     ecx, offset qword_6226C8
.text:0000000000402DAE                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000402DB3                 mov     byte ptr [rsp+58h+var_50], 1
.text:0000000000402DB8                 mov     rax, [rsp+58h+var_50]
.text:0000000000402DBD                 inc     cs:qword_6226E8
.text:0000000000402DC4                 mov     [rsp+58h+var_58], rbx
.text:0000000000402DC8                 mov     [rsp+58h+var_48], rbx
.text:0000000000402DCD                 mov     [rsp+58h+var_40], rax
.text:0000000000402DD2
.text:0000000000402DD2 loc_402DD2:                             ; CODE XREF: add(std::string,std::string)+456↑j
.text:0000000000402DD2                                         ; add(std::string,std::string)+470↑j
.text:0000000000402DD2                 mov     rbx, [rsp+58h+var_48]
.text:0000000000402DD7                 jmp     loc_402AA6
.text:0000000000402DDC ; ---------------------------------------------------------------------------
.text:0000000000402DDC
.text:0000000000402DDC loc_402DDC:                             ; CODE XREF: add(std::string,std::string)+3F9↑j
.text:0000000000402DDC                 mov     eax, offset qword_6226C8
.text:0000000000402DE1                 cmp     r13, rax
.text:0000000000402DE4                 jz      loc_402CFF
.text:0000000000402DEA                 mov     eax, 1
.text:0000000000402DEF                 cmp     ebp, [r13+20h]
.text:0000000000402DF3                 mov     ebp, 0
.text:0000000000402DF8                 cmovl   ebp, eax
.text:0000000000402DFB                 jmp     loc_402D04
.text:0000000000402E00 ; ---------------------------------------------------------------------------
.text:0000000000402E00
.text:0000000000402E00 loc_402E00:                             ; CODE XREF: add(std::string,std::string)+475↑j
.text:0000000000402E00                 mov     eax, offset qword_6226C8
.text:0000000000402E05                 cmp     r13, rax
.text:0000000000402E08                 jz      loc_402D7B
.text:0000000000402E0E                 mov     eax, 1
.text:0000000000402E13                 cmp     ebp, [r13+20h]
.text:0000000000402E17                 mov     ebp, 0
.text:0000000000402E1C                 cmovl   ebp, eax
.text:0000000000402E1F                 jmp     loc_402D80
.text:0000000000402E1F _Z3addSsSs      endp
.text:0000000000402E1F
.text:0000000000402E1F ; ---------------------------------------------------------------------------
.text:0000000000402E24                 align 10h
.text:0000000000402E24 ; } // starts at 402900
.text:0000000000402E30
.text:0000000000402E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000402E30
.text:0000000000402E30
.text:0000000000402E30 ; __int64 read(void)
.text:0000000000402E30                 public _Z4readv
.text:0000000000402E30 _Z4readv        proc near
.text:0000000000402E30 ; __unwind { // ___gxx_personality_v0
.text:0000000000402E30                 push    rsi
.text:0000000000402E31                 mov     edi, offset _ZSt3cin@@GLIBCXX_3_4
.text:0000000000402E36                 mov     esi, offset k
.text:0000000000402E3B                 call    __ZNSirsERi     ; std::istream::operator>>(int &)
.text:0000000000402E40                 mov     edi, offset format ; "%s"
.text:0000000000402E45                 mov     esi, offset buf
.text:0000000000402E4A                 xor     eax, eax
.text:0000000000402E4C                 call    _scanf
.text:0000000000402E51                 mov     edx, offset buf
.text:0000000000402E56                 mov     rcx, rdx
.text:0000000000402E59                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:0000000000402E5D                 pxor    xmm0, xmm0
.text:0000000000402E61                 pcmpeqb xmm0, xmmword ptr [rdx]
.text:0000000000402E65                 pmovmskb eax, xmm0
.text:0000000000402E69                 and     ecx, 0Fh
.text:0000000000402E6C                 shr     eax, cl
.text:0000000000402E6E                 bsf     eax, eax
.text:0000000000402E71                 jnz     short loc_402E7E
.text:0000000000402E73                 mov     rax, rdx
.text:0000000000402E76                 add     rdx, rcx
.text:0000000000402E79                 call    __intel_sse2_strlen
.text:0000000000402E7E
.text:0000000000402E7E loc_402E7E:                             ; CODE XREF: read(void)+41↑j
.text:0000000000402E7E                 mov     edi, offset s   ; this
.text:0000000000402E83                 mov     esi, offset buf ; char *
.text:0000000000402E88                 mov     rdx, rax        ; unsigned __int64
.text:0000000000402E8B                 add     rsp, 8
.text:0000000000402E8F                 jmp     __ZNSs6assignEPKcm ; std::string::assign(char const*,ulong)
.text:0000000000402E8F _Z4readv        endp
.text:0000000000402E8F
.text:0000000000402E8F ; ---------------------------------------------------------------------------
.text:0000000000402E94                 align 20h
.text:0000000000402E94 ; } // starts at 402E30
.text:0000000000402EA0
.text:0000000000402EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000402EA0
.text:0000000000402EA0
.text:0000000000402EA0 ; __int64 __fastcall add(int, int)
.text:0000000000402EA0                 public _Z3addii
.text:0000000000402EA0 _Z3addii        proc near
.text:0000000000402EA0
.text:0000000000402EA0 var_38          = qword ptr -38h
.text:0000000000402EA0 var_30          = byte ptr -30h
.text:0000000000402EA0
.text:0000000000402EA0 ; __unwind { // ___gxx_personality_v0
.text:0000000000402EA0                 push    r12
.text:0000000000402EA2                 push    r13
.text:0000000000402EA4                 push    r14
.text:0000000000402EA6                 push    r15
.text:0000000000402EA8                 push    rbp
.text:0000000000402EA9                 sub     rsp, 10h
.text:0000000000402EAD                 mov     r12d, esi
.text:0000000000402EB0                 mov     r14, qword ptr cs:xmmword_622700
.text:0000000000402EB7                 mov     r13d, edi
.text:0000000000402EBA                 mov     rax, r14
.text:0000000000402EBD                 mov     edx, offset qword_6226F8
.text:0000000000402EC2                 test    r14, r14
.text:0000000000402EC5                 jz      short loc_402EEC
.text:0000000000402EC7
.text:0000000000402EC7 loc_402EC7:                             ; CODE XREF: add(int,int)+4A↓j
.text:0000000000402EC7                 mov     ecx, [rax+20h]
.text:0000000000402ECA                 cmp     ecx, r13d
.text:0000000000402ECD                 jl      short loc_402EDA
.text:0000000000402ECF                 cmp     r13d, ecx
.text:0000000000402ED2                 jl      short loc_402EE0
.text:0000000000402ED4                 cmp     r12d, [rax+24h]
.text:0000000000402ED8                 jle     short loc_402EE0
.text:0000000000402EDA
.text:0000000000402EDA loc_402EDA:                             ; CODE XREF: add(int,int)+2D↑j
.text:0000000000402EDA                 mov     rax, [rax+18h]
.text:0000000000402EDE                 jmp     short loc_402EE7
.text:0000000000402EE0 ; ---------------------------------------------------------------------------
.text:0000000000402EE0
.text:0000000000402EE0 loc_402EE0:                             ; CODE XREF: add(int,int)+32↑j
.text:0000000000402EE0                                         ; add(int,int)+38↑j
.text:0000000000402EE0                 mov     rdx, rax
.text:0000000000402EE3                 mov     rax, [rax+10h]
.text:0000000000402EE7
.text:0000000000402EE7 loc_402EE7:                             ; CODE XREF: add(int,int)+3E↑j
.text:0000000000402EE7                 test    rax, rax
.text:0000000000402EEA                 jnz     short loc_402EC7
.text:0000000000402EEC
.text:0000000000402EEC loc_402EEC:                             ; CODE XREF: add(int,int)+25↑j
.text:0000000000402EEC                 mov     eax, offset qword_6226F8
.text:0000000000402EF1                 cmp     rdx, rax
.text:0000000000402EF4                 jz      short loc_402F09
.text:0000000000402EF6                 mov     eax, [rdx+20h]
.text:0000000000402EF9                 cmp     r13d, eax
.text:0000000000402EFC                 jl      short loc_402F09
.text:0000000000402EFE                 cmp     eax, r13d
.text:0000000000402F01                 jl      short loc_402F0E
.text:0000000000402F03                 cmp     r12d, [rdx+24h]
.text:0000000000402F07                 jge     short loc_402F0E
.text:0000000000402F09
.text:0000000000402F09 loc_402F09:                             ; CODE XREF: add(int,int)+54↑j
.text:0000000000402F09                                         ; add(int,int)+5C↑j
.text:0000000000402F09                 mov     edx, offset qword_6226F8
.text:0000000000402F0E
.text:0000000000402F0E loc_402F0E:                             ; CODE XREF: add(int,int)+61↑j
.text:0000000000402F0E                                         ; add(int,int)+67↑j
.text:0000000000402F0E                 mov     eax, offset qword_6226F8
.text:0000000000402F13                 cmp     rdx, rax
.text:0000000000402F16                 jnz     loc_40305F
.text:0000000000402F1C                 movsxd  r13, r13d
.text:0000000000402F1F                 mov     ebp, offset qword_6226F8
.text:0000000000402F24                 movsxd  r12, r12d
.text:0000000000402F27                 mov     al, 1
.text:0000000000402F29                 inc     dword ptr ds:out[r13*4]
.text:0000000000402F31                 inc     dword ptr ds:in[r12*4]
.text:0000000000402F39                 test    r14, r14
.text:0000000000402F3C                 jz      short loc_402F6E
.text:0000000000402F3E
.text:0000000000402F3E loc_402F3E:                             ; CODE XREF: add(int,int)+CC↓j
.text:0000000000402F3E                 mov     eax, [r14+20h]
.text:0000000000402F42                 mov     rbp, r14
.text:0000000000402F45                 cmp     r13d, eax
.text:0000000000402F48                 jl      short loc_402F55
.text:0000000000402F4A                 cmp     eax, r13d
.text:0000000000402F4D                 jl      short loc_402F59
.text:0000000000402F4F                 cmp     r12d, [r14+24h]
.text:0000000000402F53                 jge     short loc_402F59
.text:0000000000402F55
.text:0000000000402F55 loc_402F55:                             ; CODE XREF: add(int,int)+A8↑j
.text:0000000000402F55                 mov     al, 1
.text:0000000000402F57                 jmp     short loc_402F5B
.text:0000000000402F59 ; ---------------------------------------------------------------------------
.text:0000000000402F59
.text:0000000000402F59 loc_402F59:                             ; CODE XREF: add(int,int)+AD↑j
.text:0000000000402F59                                         ; add(int,int)+B3↑j
.text:0000000000402F59                 xor     al, al
.text:0000000000402F5B
.text:0000000000402F5B loc_402F5B:                             ; CODE XREF: add(int,int)+B7↑j
.text:0000000000402F5B                 test    al, al
.text:0000000000402F5D                 jz      short loc_402F65
.text:0000000000402F5F                 mov     r14, [r14+10h]
.text:0000000000402F63                 jmp     short loc_402F69
.text:0000000000402F65 ; ---------------------------------------------------------------------------
.text:0000000000402F65
.text:0000000000402F65 loc_402F65:                             ; CODE XREF: add(int,int)+BD↑j
.text:0000000000402F65                 mov     r14, [r14+18h]
.text:0000000000402F69
.text:0000000000402F69 loc_402F69:                             ; CODE XREF: add(int,int)+C3↑j
.text:0000000000402F69                 test    r14, r14
.text:0000000000402F6C                 jnz     short loc_402F3E
.text:0000000000402F6E
.text:0000000000402F6E loc_402F6E:                             ; CODE XREF: add(int,int)+9C↑j
.text:0000000000402F6E                 mov     rcx, rbp
.text:0000000000402F71                 test    al, al
.text:0000000000402F73                 jz      short loc_402F8D
.text:0000000000402F75                 cmp     rbp, qword ptr cs:xmmword_622700+8
.text:0000000000402F7C                 jz      loc_403012
.text:0000000000402F82                 mov     rdi, rbp
.text:0000000000402F85                 call    __ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base ; std::_Rb_tree_decrement(std::_Rb_tree_node_base *)
.text:0000000000402F8A                 mov     rcx, rax
.text:0000000000402F8D
.text:0000000000402F8D loc_402F8D:                             ; CODE XREF: add(int,int)+D3↑j
.text:0000000000402F8D                 mov     eax, [rcx+20h]
.text:0000000000402F90                 cmp     eax, r13d
.text:0000000000402F93                 jl      short loc_402FA0
.text:0000000000402F95                 cmp     r13d, eax
.text:0000000000402F98                 jl      short loc_402FFB
.text:0000000000402F9A                 cmp     r12d, [rcx+24h]
.text:0000000000402F9E                 jle     short loc_402FFB
.text:0000000000402FA0
.text:0000000000402FA0 loc_402FA0:                             ; CODE XREF: add(int,int)+F3↑j
.text:0000000000402FA0                 test    r14, r14
.text:0000000000402FA3                 jz      loc_40306D
.text:0000000000402FA9
.text:0000000000402FA9 loc_402FA9:                             ; CODE XREF: add(int,int)+1D5↓j
.text:0000000000402FA9                                         ; add(int,int)+1E1↓j ...
.text:0000000000402FA9                 mov     r15d, 1
.text:0000000000402FAF
.text:0000000000402FAF loc_402FAF:                             ; CODE XREF: add(int,int)+1F9↓j
.text:0000000000402FAF                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000402FB4                 call    __Znwm          ; operator new(ulong)
.text:0000000000402FB9                 mov     r14, rax
.text:0000000000402FBC                 cmp     r14, 0FFFFFFFFFFFFFFE0h
.text:0000000000402FC0                 jz      short loc_402FCA
.text:0000000000402FC2                 mov     [r14+20h], r13d
.text:0000000000402FC6                 mov     [r14+24h], r12d
.text:0000000000402FCA
.text:0000000000402FCA loc_402FCA:                             ; CODE XREF: add(int,int)+120↑j
.text:0000000000402FCA                 mov     edi, r15d
.text:0000000000402FCD                 mov     rsi, r14
.text:0000000000402FD0                 mov     rdx, rbp
.text:0000000000402FD3                 mov     ecx, offset qword_6226F8
.text:0000000000402FD8                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000402FDD                 mov     [rsp+38h+var_30], 1
.text:0000000000402FE2                 inc     cs:qword_622718
.text:0000000000402FE9                 mov     [rsp+38h+var_38], r14
.text:0000000000402FED                 add     rsp, 10h
.text:0000000000402FF1                 pop     rbp
.text:0000000000402FF2                 pop     r15
.text:0000000000402FF4                 pop     r14
.text:0000000000402FF6                 pop     r13
.text:0000000000402FF8                 pop     r12
.text:0000000000402FFA                 retn
.text:0000000000402FFB ; ---------------------------------------------------------------------------
.text:0000000000402FFB
.text:0000000000402FFB loc_402FFB:                             ; CODE XREF: add(int,int)+F8↑j
.text:0000000000402FFB                                         ; add(int,int)+FE↑j
.text:0000000000402FFB                 mov     [rsp+38h+var_30], 0
.text:0000000000403000                 mov     [rsp+38h+var_38], rcx
.text:0000000000403004                 add     rsp, 10h
.text:0000000000403008                 pop     rbp
.text:0000000000403009                 pop     r15
.text:000000000040300B                 pop     r14
.text:000000000040300D                 pop     r13
.text:000000000040300F                 pop     r12
.text:0000000000403011                 retn
.text:0000000000403012 ; ---------------------------------------------------------------------------
.text:0000000000403012
.text:0000000000403012 loc_403012:                             ; CODE XREF: add(int,int)+DC↑j
.text:0000000000403012                 test    r14, r14
.text:0000000000403015                 jz      loc_40309E
.text:000000000040301B
.text:000000000040301B loc_40301B:                             ; CODE XREF: add(int,int)+206↓j
.text:000000000040301B                                         ; add(int,int)+212↓j ...
.text:000000000040301B                 mov     r15d, 1
.text:0000000000403021
.text:0000000000403021 loc_403021:                             ; CODE XREF: add(int,int)+22A↓j
.text:0000000000403021                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000403026                 call    __Znwm          ; operator new(ulong)
.text:000000000040302B                 mov     r14, rax
.text:000000000040302E                 cmp     r14, 0FFFFFFFFFFFFFFE0h
.text:0000000000403032                 jz      short loc_40303C
.text:0000000000403034                 mov     [r14+20h], r13d
.text:0000000000403038                 mov     [r14+24h], r12d
.text:000000000040303C
.text:000000000040303C loc_40303C:                             ; CODE XREF: add(int,int)+192↑j
.text:000000000040303C                 mov     edi, r15d
.text:000000000040303F                 mov     rsi, r14
.text:0000000000403042                 mov     rdx, rbp
.text:0000000000403045                 mov     ecx, offset qword_6226F8
.text:000000000040304A                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:000000000040304F                 mov     [rsp+38h+var_30], 1
.text:0000000000403054                 inc     cs:qword_622718
.text:000000000040305B                 mov     [rsp+38h+var_38], r14
.text:000000000040305F
.text:000000000040305F loc_40305F:                             ; CODE XREF: add(int,int)+76↑j
.text:000000000040305F                 add     rsp, 10h
.text:0000000000403063                 pop     rbp
.text:0000000000403064                 pop     r15
.text:0000000000403066                 pop     r14
.text:0000000000403068                 pop     r13
.text:000000000040306A                 pop     r12
.text:000000000040306C                 retn
.text:000000000040306D ; ---------------------------------------------------------------------------
.text:000000000040306D
.text:000000000040306D loc_40306D:                             ; CODE XREF: add(int,int)+103↑j
.text:000000000040306D                 mov     eax, offset qword_6226F8
.text:0000000000403072                 cmp     rbp, rax
.text:0000000000403075                 jz      loc_402FA9
.text:000000000040307B                 mov     eax, [rbp+20h]
.text:000000000040307E                 cmp     r13d, eax
.text:0000000000403081                 jl      loc_402FA9
.text:0000000000403087                 cmp     eax, r13d
.text:000000000040308A                 jl      short loc_403096
.text:000000000040308C                 cmp     r12d, [rbp+24h]
.text:0000000000403090                 jl      loc_402FA9
.text:0000000000403096
.text:0000000000403096 loc_403096:                             ; CODE XREF: add(int,int)+1EA↑j
.text:0000000000403096                 xor     r15d, r15d
.text:0000000000403099                 jmp     loc_402FAF
.text:000000000040309E ; ---------------------------------------------------------------------------
.text:000000000040309E
.text:000000000040309E loc_40309E:                             ; CODE XREF: add(int,int)+175↑j
.text:000000000040309E                 mov     eax, offset qword_6226F8
.text:00000000004030A3                 cmp     rbp, rax
.text:00000000004030A6                 jz      loc_40301B
.text:00000000004030AC                 mov     eax, [rbp+20h]
.text:00000000004030AF                 cmp     r13d, eax
.text:00000000004030B2                 jl      loc_40301B
.text:00000000004030B8                 cmp     eax, r13d
.text:00000000004030BB                 jl      short loc_4030C7
.text:00000000004030BD                 cmp     r12d, [rbp+24h]
.text:00000000004030C1                 jl      loc_40301B
.text:00000000004030C7
.text:00000000004030C7 loc_4030C7:                             ; CODE XREF: add(int,int)+21B↑j
.text:00000000004030C7                 xor     r15d, r15d
.text:00000000004030CA                 jmp     loc_403021
.text:00000000004030CA _Z3addii        endp
.text:00000000004030CA
.text:00000000004030CA ; ---------------------------------------------------------------------------
.text:00000000004030CF                 align 10h
.text:00000000004030CF ; } // starts at 402EA0
.text:00000000004030D0
.text:00000000004030D0 ; =============== S U B R O U T I N E =======================================
.text:00000000004030D0
.text:00000000004030D0
.text:00000000004030D0 __sti__$E       proc near               ; CODE XREF: __libc_csu_init+59↓p
.text:00000000004030D0                                         ; DATA XREF: .init_array:__init_array_start↓o
.text:00000000004030D0 ; __unwind { // ___gxx_personality_v0
.text:00000000004030D0                 push    rbp
.text:00000000004030D1                 mov     edi, offset _ZSt8__ioinit ; this
.text:00000000004030D6                 call    __ZNSt8ios_base4InitC1Ev ; std::ios_base::Init::Init(void)
.text:00000000004030DB                 mov     edi, offset __ZNSt8ios_base4InitD1Ev ; lpfunc
.text:00000000004030E0                 mov     esi, offset _ZSt8__ioinit ; obj
.text:00000000004030E5                 mov     edx, offset __dso_handle ; lpdso_handle
.text:00000000004030EA                 call    ___cxa_atexit
.text:00000000004030EF                 pxor    xmm0, xmm0
.text:00000000004030F3                 movq    cs:qword_6226C8, xmm0
.text:00000000004030FB                 movaps  cs:xmmword_6226D0, xmm0
.text:0000000000403102                 movq    cs:qword_6226E0, xmm0
.text:000000000040310A                 mov     edi, offset _ZNSt3mapIiiSt4lessIiESaISt4pairIKiiEEED1Ev ; lpfunc
.text:000000000040310F                 mov     esi, offset ma  ; obj
.text:0000000000403114                 mov     edx, offset __dso_handle ; lpdso_handle
.text:0000000000403119                 xor     ebp, ebp
.text:000000000040311B                 mov     cs:qword_6226E8, rbp
.text:0000000000403122                 mov     dword ptr cs:qword_6226C8, 0
.text:000000000040312C                 mov     qword ptr cs:xmmword_6226D0, rbp
.text:0000000000403133                 mov     qword ptr cs:xmmword_6226D0+8, offset qword_6226C8
.text:000000000040313E                 mov     cs:qword_6226E0, offset qword_6226C8
.text:0000000000403149                 call    ___cxa_atexit
.text:000000000040314E                 mov     edi, offset __ZNSsD1Ev ; lpfunc
.text:0000000000403153                 mov     esi, offset s   ; obj
.text:0000000000403158                 mov     edx, offset __dso_handle ; lpdso_handle
.text:000000000040315D                 mov     cs:s, offset unk_607558
.text:0000000000403168                 call    ___cxa_atexit
.text:000000000040316D                 pxor    xmm0, xmm0
.text:0000000000403171                 movq    cs:qword_6226F8, xmm0
.text:0000000000403179                 movaps  cs:xmmword_622700, xmm0
.text:0000000000403180                 movq    cs:qword_622710, xmm0
.text:0000000000403188                 mov     cs:qword_622718, rbp
.text:000000000040318F                 mov     edi, offset _ZNSt3setISt4pairIiiESt4lessIS1_ESaIS1_EED1Ev ; lpfunc
.text:0000000000403194                 mov     dword ptr cs:qword_6226F8, 0
.text:000000000040319E                 mov     esi, offset g   ; obj
.text:00000000004031A3                 mov     qword ptr cs:xmmword_622700, rbp
.text:00000000004031AA                 mov     edx, offset __dso_handle ; lpdso_handle
.text:00000000004031AF                 mov     qword ptr cs:xmmword_622700+8, offset qword_6226F8
.text:00000000004031BA                 mov     cs:qword_622710, offset qword_6226F8
.text:00000000004031C5                 pop     rbp
.text:00000000004031C6                 jmp     ___cxa_atexit
.text:00000000004031C6 __sti__$E       endp
.text:00000000004031C6
.text:00000000004031C6 ; ---------------------------------------------------------------------------
.text:00000000004031CB                 align 10h
.text:00000000004031CB ; } // starts at 4030D0
.text:00000000004031D0
.text:00000000004031D0 ; =============== S U B R O U T I N E =======================================
.text:00000000004031D0
.text:00000000004031D0
.text:00000000004031D0 ; std::_Rb_tree<std::pair<int, int>, std::pair<int, int>, std::_Identity<std::pair<int, int>>, std::less<std::pair<int, int>>, std::allocator<std::pair<int, int>>>::_M_put_node(std::_Rb_tree_node<std::pair<int, int>> *)
.text:00000000004031D0                 public _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS1_E ; weak
.text:00000000004031D0 _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS1_E proc near
.text:00000000004031D0 ; __unwind { // ___gxx_personality_v0
.text:00000000004031D0                 mov     rdi, rsi        ; void *
.text:00000000004031D3                 jmp     __ZdlPv         ; operator delete(void *)
.text:00000000004031D3 _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS1_E endp
.text:00000000004031D3
.text:00000000004031D3 ; ---------------------------------------------------------------------------
.text:00000000004031D8                 align 20h
.text:00000000004031D8 ; } // starts at 4031D0
.text:00000000004031E0
.text:00000000004031E0 ; =============== S U B R O U T I N E =======================================
.text:00000000004031E0
.text:00000000004031E0
.text:00000000004031E0 ; std::_Rb_tree<std::pair<int, int>, std::pair<int, int>, std::_Identity<std::pair<int, int>>, std::less<std::pair<int, int>>, std::allocator<std::pair<int, int>>>::_M_insert_unique(std::pair<int, int> const&)
.text:00000000004031E0                 public _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueERKS1_ ; weak
.text:00000000004031E0 _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueERKS1_ proc near
.text:00000000004031E0                                         ; CODE XREF: solve(void)+2C0↑p
.text:00000000004031E0                                         ; solve(void)+3B1↑p ...
.text:00000000004031E0
.text:00000000004031E0 var_48          = qword ptr -48h
.text:00000000004031E0 var_40          = qword ptr -40h
.text:00000000004031E0
.text:00000000004031E0 ; __unwind { // ___gxx_personality_v0
.text:00000000004031E0                 push    r12
.text:00000000004031E2                 push    r13
.text:00000000004031E4                 push    r14
.text:00000000004031E6                 push    r15
.text:00000000004031E8                 push    rbx
.text:00000000004031E9                 push    rbp
.text:00000000004031EA                 sub     rsp, 18h
.text:00000000004031EE                 mov     r12, rdi
.text:00000000004031F1                 mov     r13, rsi
.text:00000000004031F4                 mov     r9b, 1
.text:00000000004031F7                 mov     r8, [r12+10h]
.text:00000000004031FC                 lea     rbp, [r12+8]
.text:0000000000403201                 mov     rbx, rbp
.text:0000000000403204                 test    r8, r8
.text:0000000000403207                 jz      short loc_403244
.text:0000000000403209                 mov     esi, [r13+0]
.text:000000000040320D                 mov     eax, [r13+4]
.text:0000000000403211
.text:0000000000403211 loc_403211:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+62↓j
.text:0000000000403211                 mov     r9d, [r8+20h]
.text:0000000000403215                 mov     rbx, r8
.text:0000000000403218                 cmp     esi, r9d
.text:000000000040321B                 jl      short loc_403228
.text:000000000040321D                 cmp     r9d, esi
.text:0000000000403220                 jl      short loc_40322D
.text:0000000000403222                 cmp     eax, [r8+24h]
.text:0000000000403226                 jge     short loc_40322D
.text:0000000000403228
.text:0000000000403228 loc_403228:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+3B↑j
.text:0000000000403228                 mov     r9b, 1
.text:000000000040322B                 jmp     short loc_403230
.text:000000000040322D ; ---------------------------------------------------------------------------
.text:000000000040322D
.text:000000000040322D loc_40322D:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+40↑j
.text:000000000040322D                                         ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+46↑j
.text:000000000040322D                 xor     r9b, r9b
.text:0000000000403230
.text:0000000000403230 loc_403230:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+4B↑j
.text:0000000000403230                 test    r9b, r9b
.text:0000000000403233                 jz      short loc_40323B
.text:0000000000403235                 mov     r8, [r8+10h]
.text:0000000000403239                 jmp     short loc_40323F
.text:000000000040323B ; ---------------------------------------------------------------------------
.text:000000000040323B
.text:000000000040323B loc_40323B:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+53↑j
.text:000000000040323B                 mov     r8, [r8+18h]
.text:000000000040323F
.text:000000000040323F loc_40323F:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+59↑j
.text:000000000040323F                 test    r8, r8
.text:0000000000403242                 jnz     short loc_403211
.text:0000000000403244
.text:0000000000403244 loc_403244:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+27↑j
.text:0000000000403244                 mov     rax, rbx
.text:0000000000403247                 test    r9b, r9b
.text:000000000040324A                 jz      short loc_40325F
.text:000000000040324C                 cmp     rbx, [r12+18h]
.text:0000000000403251                 jz      loc_403325
.text:0000000000403257                 mov     rdi, rbx
.text:000000000040325A                 call    __ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base ; std::_Rb_tree_decrement(std::_Rb_tree_node_base *)
.text:000000000040325F
.text:000000000040325F loc_40325F:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+6A↑j
.text:000000000040325F                 mov     r8d, [r13+0]
.text:0000000000403263                 mov     esi, [rax+20h]
.text:0000000000403266                 cmp     esi, r8d
.text:0000000000403269                 jl      short loc_403281
.text:000000000040326B                 cmp     r8d, esi
.text:000000000040326E                 jl      loc_403308
.text:0000000000403274                 mov     esi, [rax+24h]
.text:0000000000403277                 cmp     esi, [r13+4]
.text:000000000040327B                 jge     loc_403308
.text:0000000000403281
.text:0000000000403281 loc_403281:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+89↑j
.text:0000000000403281                 cmp     rbx, rbp
.text:0000000000403284                 jnz     short loc_40328E
.text:0000000000403286                 mov     r15d, 1
.text:000000000040328C                 jmp     short loc_4032AF
.text:000000000040328E ; ---------------------------------------------------------------------------
.text:000000000040328E
.text:000000000040328E loc_40328E:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+A4↑j
.text:000000000040328E                 mov     eax, [rbx+20h]
.text:0000000000403291                 cmp     r8d, eax
.text:0000000000403294                 jl      short loc_4032A4
.text:0000000000403296                 cmp     eax, r8d
.text:0000000000403299                 jl      short loc_4032AC
.text:000000000040329B                 mov     eax, [r13+4]
.text:000000000040329F                 cmp     eax, [rbx+24h]
.text:00000000004032A2                 jge     short loc_4032AC
.text:00000000004032A4
.text:00000000004032A4 loc_4032A4:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+B4↑j
.text:00000000004032A4                 mov     r15d, 1
.text:00000000004032AA                 jmp     short loc_4032AF
.text:00000000004032AC ; ---------------------------------------------------------------------------
.text:00000000004032AC
.text:00000000004032AC loc_4032AC:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+B9↑j
.text:00000000004032AC                                         ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+C2↑j
.text:00000000004032AC                 xor     r15d, r15d
.text:00000000004032AF
.text:00000000004032AF loc_4032AF:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+AC↑j
.text:00000000004032AF                                         ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+CA↑j
.text:00000000004032AF                 mov     edi, 28h ; '('  ; unsigned __int64
.text:00000000004032B4                 call    __Znwm          ; operator new(ulong)
.text:00000000004032B9                 mov     r14, rax
.text:00000000004032BC                 cmp     r14, 0FFFFFFFFFFFFFFE0h
.text:00000000004032C0                 jz      short loc_4032D2
.text:00000000004032C2                 mov     r8d, [r13+0]
.text:00000000004032C6                 mov     [r14+20h], r8d
.text:00000000004032CA                 mov     r9d, [r13+4]
.text:00000000004032CE                 mov     [r14+24h], r9d
.text:00000000004032D2
.text:00000000004032D2 loc_4032D2:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+E0↑j
.text:00000000004032D2                 mov     edi, r15d
.text:00000000004032D5                 mov     rsi, r14
.text:00000000004032D8                 mov     rdx, rbx
.text:00000000004032DB                 mov     rcx, rbp
.text:00000000004032DE                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:00000000004032E3                 mov     byte ptr [rsp+48h+var_40], 1
.text:00000000004032E8                 mov     rax, r14
.text:00000000004032EB                 inc     qword ptr [r12+28h]
.text:00000000004032F0                 mov     [rsp+48h+var_48], r14
.text:00000000004032F4                 mov     rdx, [rsp+48h+var_40]
.text:00000000004032F9                 add     rsp, 18h
.text:00000000004032FD                 pop     rbp
.text:00000000004032FE                 pop     rbx
.text:00000000004032FF                 pop     r15
.text:0000000000403301                 pop     r14
.text:0000000000403303                 pop     r13
.text:0000000000403305                 pop     r12
.text:0000000000403307                 retn
.text:0000000000403308 ; ---------------------------------------------------------------------------
.text:0000000000403308
.text:0000000000403308 loc_403308:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+8E↑j
.text:0000000000403308                                         ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+9B↑j
.text:0000000000403308                 mov     byte ptr [rsp+48h+var_40], 0
.text:000000000040330D                 mov     [rsp+48h+var_48], rax
.text:0000000000403311                 mov     rdx, [rsp+48h+var_40]
.text:0000000000403316                 add     rsp, 18h
.text:000000000040331A                 pop     rbp
.text:000000000040331B                 pop     rbx
.text:000000000040331C                 pop     r15
.text:000000000040331E                 pop     r14
.text:0000000000403320                 pop     r13
.text:0000000000403322                 pop     r12
.text:0000000000403324                 retn
.text:0000000000403325 ; ---------------------------------------------------------------------------
.text:0000000000403325
.text:0000000000403325 loc_403325:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+71↑j
.text:0000000000403325                 cmp     rbx, rbp
.text:0000000000403328                 jnz     short loc_403332
.text:000000000040332A                 mov     r15d, 1
.text:0000000000403330                 jmp     short loc_403355
.text:0000000000403332 ; ---------------------------------------------------------------------------
.text:0000000000403332
.text:0000000000403332 loc_403332:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+148↑j
.text:0000000000403332                 mov     esi, [r13+0]
.text:0000000000403336                 mov     eax, [rbx+20h]
.text:0000000000403339                 cmp     esi, eax
.text:000000000040333B                 jl      short loc_40334A
.text:000000000040333D                 cmp     eax, esi
.text:000000000040333F                 jl      short loc_403352
.text:0000000000403341                 mov     eax, [r13+4]
.text:0000000000403345                 cmp     eax, [rbx+24h]
.text:0000000000403348                 jge     short loc_403352
.text:000000000040334A
.text:000000000040334A loc_40334A:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+15B↑j
.text:000000000040334A                 mov     r15d, 1
.text:0000000000403350                 jmp     short loc_403355
.text:0000000000403352 ; ---------------------------------------------------------------------------
.text:0000000000403352
.text:0000000000403352 loc_403352:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+15F↑j
.text:0000000000403352                                         ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+168↑j
.text:0000000000403352                 xor     r15d, r15d
.text:0000000000403355
.text:0000000000403355 loc_403355:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+150↑j
.text:0000000000403355                                         ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+170↑j
.text:0000000000403355                 mov     edi, 28h ; '('  ; unsigned __int64
.text:000000000040335A                 call    __Znwm          ; operator new(ulong)
.text:000000000040335F                 mov     r14, rax
.text:0000000000403362                 cmp     r14, 0FFFFFFFFFFFFFFE0h
.text:0000000000403366                 jz      short loc_403378
.text:0000000000403368                 mov     r8d, [r13+0]
.text:000000000040336C                 mov     [r14+20h], r8d
.text:0000000000403370                 mov     r9d, [r13+4]
.text:0000000000403374                 mov     [r14+24h], r9d
.text:0000000000403378
.text:0000000000403378 loc_403378:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_insert_unique(std::pair<int,int> const&)+186↑j
.text:0000000000403378                 mov     edi, r15d
.text:000000000040337B                 mov     rsi, r14
.text:000000000040337E                 mov     rdx, rbx
.text:0000000000403381                 mov     rcx, rbp
.text:0000000000403384                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000403389                 mov     byte ptr [rsp+48h+var_40], 1
.text:000000000040338E                 mov     rax, r14
.text:0000000000403391                 inc     qword ptr [r12+28h]
.text:0000000000403396                 mov     [rsp+48h+var_48], r14
.text:000000000040339A                 mov     rdx, [rsp+48h+var_40]
.text:000000000040339F                 add     rsp, 18h
.text:00000000004033A3                 pop     rbp
.text:00000000004033A4                 pop     rbx
.text:00000000004033A5                 pop     r15
.text:00000000004033A7                 pop     r14
.text:00000000004033A9                 pop     r13
.text:00000000004033AB                 pop     r12
.text:00000000004033AD                 retn
.text:00000000004033AD _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueERKS1_ endp
.text:00000000004033AD
.text:00000000004033AD ; ---------------------------------------------------------------------------
.text:00000000004033AE                 align 10h
.text:00000000004033AE ; } // starts at 4031E0
.text:00000000004033B0
.text:00000000004033B0 ; =============== S U B R O U T I N E =======================================
.text:00000000004033B0
.text:00000000004033B0
.text:00000000004033B0 ; std::map<int, int, std::less<int>, std::allocator<std::pair<int const, int>>>::operator[](int const&)
.text:00000000004033B0                 public _ZNSt3mapIiiSt4lessIiESaISt4pairIKiiEEEixERS3_ ; weak
.text:00000000004033B0 _ZNSt3mapIiiSt4lessIiESaISt4pairIKiiEEEixERS3_ proc near
.text:00000000004033B0                                         ; CODE XREF: solve(void)+233↑p
.text:00000000004033B0                                         ; solve(void)+324↑p ...
.text:00000000004033B0
.text:00000000004033B0 var_8           = dword ptr -8
.text:00000000004033B0 var_4           = dword ptr -4
.text:00000000004033B0
.text:00000000004033B0 ; __unwind { // ___gxx_personality_v0
.text:00000000004033B0                 push    rsi
.text:00000000004033B1                 mov     rcx, rsi
.text:00000000004033B4                 mov     rdx, [rdi+10h]
.text:00000000004033B8                 lea     rsi, [rdi+8]
.text:00000000004033BC                 test    rdx, rdx
.text:00000000004033BF                 mov     ecx, [rcx]
.text:00000000004033C1                 jz      short loc_4033DA
.text:00000000004033C3
.text:00000000004033C3 loc_4033C3:                             ; CODE XREF: std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::operator[](int const&)+28↓j
.text:00000000004033C3                 cmp     ecx, [rdx+20h]
.text:00000000004033C6                 jg      short loc_4033D1
.text:00000000004033C8                 mov     rsi, rdx
.text:00000000004033CB                 mov     rdx, [rdx+10h]
.text:00000000004033CF                 jmp     short loc_4033D5
.text:00000000004033D1 ; ---------------------------------------------------------------------------
.text:00000000004033D1
.text:00000000004033D1 loc_4033D1:                             ; CODE XREF: std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::operator[](int const&)+16↑j
.text:00000000004033D1                 mov     rdx, [rdx+18h]
.text:00000000004033D5
.text:00000000004033D5 loc_4033D5:                             ; CODE XREF: std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::operator[](int const&)+1F↑j
.text:00000000004033D5                 test    rdx, rdx
.text:00000000004033D8                 jnz     short loc_4033C3
.text:00000000004033DA
.text:00000000004033DA loc_4033DA:                             ; CODE XREF: std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::operator[](int const&)+11↑j
.text:00000000004033DA                 lea     rdx, [rdi+8]
.text:00000000004033DE                 cmp     rsi, rdx
.text:00000000004033E1                 jz      short loc_4033E8
.text:00000000004033E3                 cmp     ecx, [rsi+20h]
.text:00000000004033E6                 jge     short loc_4033FF
.text:00000000004033E8
.text:00000000004033E8 loc_4033E8:                             ; CODE XREF: std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::operator[](int const&)+31↑j
.text:00000000004033E8                 mov     [rsp+8+var_8], ecx
.text:00000000004033EB                 lea     rdx, [rsp+8+var_8]
.text:00000000004033EF                 mov     [rsp+8+var_4], 0
.text:00000000004033F7                 call    _ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS2_ERKS2_ ; std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)
.text:00000000004033FC                 mov     rsi, rax
.text:00000000004033FF
.text:00000000004033FF loc_4033FF:                             ; CODE XREF: std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::operator[](int const&)+36↑j
.text:00000000004033FF                 add     rsi, 24h ; '$'
.text:0000000000403403                 mov     rax, rsi
.text:0000000000403406                 pop     rcx
.text:0000000000403407                 retn
.text:0000000000403407 _ZNSt3mapIiiSt4lessIiESaISt4pairIKiiEEEixERS3_ endp
.text:0000000000403407
.text:0000000000403407 ; ---------------------------------------------------------------------------
.text:0000000000403408                 align 10h
.text:0000000000403408 ; } // starts at 4033B0
.text:0000000000403410
.text:0000000000403410 ; =============== S U B R O U T I N E =======================================
.text:0000000000403410
.text:0000000000403410
.text:0000000000403410 ; std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int>>, std::less<int>, std::allocator<std::pair<int const, int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const, int>>, std::pair<int const, int> const&)
.text:0000000000403410                 public _ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS2_ERKS2_ ; weak
.text:0000000000403410 _ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS2_ERKS2_ proc near
.text:0000000000403410                                         ; CODE XREF: std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::operator[](int const&)+47↑p
.text:0000000000403410
.text:0000000000403410 var_58          = qword ptr -58h
.text:0000000000403410 var_50          = qword ptr -50h
.text:0000000000403410 var_48          = qword ptr -48h
.text:0000000000403410 var_40          = qword ptr -40h
.text:0000000000403410
.text:0000000000403410 ; __unwind { // ___gxx_personality_v0
.text:0000000000403410                 push    r12
.text:0000000000403412                 push    r13
.text:0000000000403414                 push    r14
.text:0000000000403416                 push    r15
.text:0000000000403418                 push    rbx
.text:0000000000403419                 push    rbp
.text:000000000040341A                 sub     rsp, 28h
.text:000000000040341E                 mov     rbp, rdi
.text:0000000000403421                 mov     r14, rsi
.text:0000000000403424                 mov     r12, rdx
.text:0000000000403427                 mov     [rsp+58h+var_58], r14
.text:000000000040342B                 lea     rbx, [rbp+8]
.text:000000000040342F                 cmp     r14, rbx
.text:0000000000403432                 jz      loc_4036FA
.text:0000000000403438                 mov     r13d, [r12]
.text:000000000040343C                 mov     edx, [r14+20h]
.text:0000000000403440                 cmp     r13d, edx
.text:0000000000403443                 jge     loc_4034DA
.text:0000000000403449                 cmp     r14, [rbp+18h]
.text:000000000040344D                 jz      loc_4035D3
.text:0000000000403453                 mov     rdi, r14
.text:0000000000403456                 call    __ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base ; std::_Rb_tree_decrement(std::_Rb_tree_node_base const*)
.text:000000000040345B                 mov     r14, rax
.text:000000000040345E                 mov     eax, [r14+20h]
.text:0000000000403462                 cmp     eax, r13d
.text:0000000000403465                 jge     short loc_4034C0
.text:0000000000403467                 cmp     qword ptr [r14+18h], 0
.text:000000000040346C                 jz      loc_40356B
.text:0000000000403472                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000403477                 call    __Znwm          ; operator new(ulong)
.text:000000000040347C                 mov     r13, rax
.text:000000000040347F                 cmp     r13, 0FFFFFFFFFFFFFFE0h
.text:0000000000403483                 jz      short loc_403496
.text:0000000000403485                 mov     edx, [r12]
.text:0000000000403489                 mov     [r13+20h], edx
.text:000000000040348D                 mov     r8d, [r12+4]
.text:0000000000403492                 mov     [r13+24h], r8d
.text:0000000000403496
.text:0000000000403496 loc_403496:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+73↑j
.text:0000000000403496                 mov     edi, 1
.text:000000000040349B                 mov     rsi, r13
.text:000000000040349E                 mov     rcx, rbx
.text:00000000004034A1                 mov     rdx, [rsp+58h+var_58]
.text:00000000004034A5                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:00000000004034AA                 inc     qword ptr [rbp+28h]
.text:00000000004034AE                 mov     rax, r13
.text:00000000004034B1                 add     rsp, 28h
.text:00000000004034B5                 pop     rbp
.text:00000000004034B6                 pop     rbx
.text:00000000004034B7                 pop     r15
.text:00000000004034B9                 pop     r14
.text:00000000004034BB                 pop     r13
.text:00000000004034BD                 pop     r12
.text:00000000004034BF                 retn
.text:00000000004034C0 ; ---------------------------------------------------------------------------
.text:00000000004034C0
.text:00000000004034C0 loc_4034C0:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+55↑j
.text:00000000004034C0                                         ; std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+EF↓j
.text:00000000004034C0                 mov     rdi, rbp
.text:00000000004034C3                 mov     rsi, r12
.text:00000000004034C6                 call    _ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE16_M_insert_uniqueERKS2_ ; std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique(std::pair<int const,int> const&)
.text:00000000004034CB                 add     rsp, 28h
.text:00000000004034CF                 pop     rbp
.text:00000000004034D0                 pop     rbx
.text:00000000004034D1                 pop     r15
.text:00000000004034D3                 pop     r14
.text:00000000004034D5                 pop     r13
.text:00000000004034D7                 pop     r12
.text:00000000004034D9                 retn
.text:00000000004034DA ; ---------------------------------------------------------------------------
.text:00000000004034DA
.text:00000000004034DA loc_4034DA:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+33↑j
.text:00000000004034DA                 cmp     edx, r13d
.text:00000000004034DD                 jge     short loc_403559
.text:00000000004034DF                 mov     r15, [rbp+20h]
.text:00000000004034E3                 cmp     r14, r15
.text:00000000004034E6                 jz      loc_403692
.text:00000000004034EC                 mov     rdi, r14
.text:00000000004034EF                 call    __ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base ; std::_Rb_tree_increment(std::_Rb_tree_node_base const*)
.text:00000000004034F4                 mov     r15, rax
.text:00000000004034F7                 mov     r8d, [r12]
.text:00000000004034FB                 cmp     r8d, [r15+20h]
.text:00000000004034FF                 jge     short loc_4034C0
.text:0000000000403501                 cmp     qword ptr [r14+18h], 0
.text:0000000000403506                 jz      loc_403647
.text:000000000040350C                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000403511                 call    __Znwm          ; operator new(ulong)
.text:0000000000403516                 mov     r13, rax
.text:0000000000403519                 cmp     r13, 0FFFFFFFFFFFFFFE0h
.text:000000000040351D                 jz      short loc_403530
.text:000000000040351F                 mov     r8d, [r12]
.text:0000000000403523                 mov     [r13+20h], r8d
.text:0000000000403527                 mov     r9d, [r12+4]
.text:000000000040352C                 mov     [r13+24h], r9d
.text:0000000000403530
.text:0000000000403530 loc_403530:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+10D↑j
.text:0000000000403530                 mov     edi, 1
.text:0000000000403535                 mov     rsi, r13
.text:0000000000403538                 mov     rdx, r15
.text:000000000040353B                 mov     rcx, rbx
.text:000000000040353E                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000403543                 inc     qword ptr [rbp+28h]
.text:0000000000403547                 mov     rax, r13
.text:000000000040354A                 add     rsp, 28h
.text:000000000040354E                 pop     rbp
.text:000000000040354F                 pop     rbx
.text:0000000000403550                 pop     r15
.text:0000000000403552                 pop     r14
.text:0000000000403554                 pop     r13
.text:0000000000403556                 pop     r12
.text:0000000000403558                 retn
.text:0000000000403559 ; ---------------------------------------------------------------------------
.text:0000000000403559
.text:0000000000403559 loc_403559:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+CD↑j
.text:0000000000403559                 mov     rax, r14
.text:000000000040355C                 add     rsp, 28h
.text:0000000000403560                 pop     rbp
.text:0000000000403561                 pop     rbx
.text:0000000000403562                 pop     r15
.text:0000000000403564                 pop     r14
.text:0000000000403566                 pop     r13
.text:0000000000403568                 pop     r12
.text:000000000040356A                 retn
.text:000000000040356B ; ---------------------------------------------------------------------------
.text:000000000040356B
.text:000000000040356B loc_40356B:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+5C↑j
.text:000000000040356B                 cmp     r14, rbx
.text:000000000040356E                 jnz     short loc_403578
.text:0000000000403570                 mov     r15d, 1
.text:0000000000403576                 jmp     short loc_403588
.text:0000000000403578 ; ---------------------------------------------------------------------------
.text:0000000000403578
.text:0000000000403578 loc_403578:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+15E↑j
.text:0000000000403578                 mov     r8d, 1
.text:000000000040357E                 xor     r15d, r15d
.text:0000000000403581                 cmp     r13d, eax
.text:0000000000403584                 cmovl   r15d, r8d
.text:0000000000403588
.text:0000000000403588 loc_403588:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+166↑j
.text:0000000000403588                 mov     edi, 28h ; '('  ; unsigned __int64
.text:000000000040358D                 call    __Znwm          ; operator new(ulong)
.text:0000000000403592                 mov     r13, rax
.text:0000000000403595                 cmp     r13, 0FFFFFFFFFFFFFFE0h
.text:0000000000403599                 jz      short loc_4035AC
.text:000000000040359B                 mov     r8d, [r12]
.text:000000000040359F                 mov     [r13+20h], r8d
.text:00000000004035A3                 mov     r9d, [r12+4]
.text:00000000004035A8                 mov     [r13+24h], r9d
.text:00000000004035AC
.text:00000000004035AC loc_4035AC:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+189↑j
.text:00000000004035AC                 mov     edi, r15d
.text:00000000004035AF                 mov     rsi, r13
.text:00000000004035B2                 mov     rdx, r14
.text:00000000004035B5                 mov     rcx, rbx
.text:00000000004035B8                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:00000000004035BD                 inc     qword ptr [rbp+28h]
.text:00000000004035C1                 mov     rax, r13
.text:00000000004035C4                 add     rsp, 28h
.text:00000000004035C8                 pop     rbp
.text:00000000004035C9                 pop     rbx
.text:00000000004035CA                 pop     r15
.text:00000000004035CC                 pop     r14
.text:00000000004035CE                 pop     r13
.text:00000000004035D0                 pop     r12
.text:00000000004035D2                 retn
.text:00000000004035D3 ; ---------------------------------------------------------------------------
.text:00000000004035D3
.text:00000000004035D3 loc_4035D3:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+3D↑j
.text:00000000004035D3                 mov     r14, [rbp+18h]
.text:00000000004035D7                 test    r14, r14
.text:00000000004035DA                 jz      short loc_40362D
.text:00000000004035DC
.text:00000000004035DC loc_4035DC:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+220↓j
.text:00000000004035DC                 mov     r13d, 1
.text:00000000004035E2
.text:00000000004035E2 loc_4035E2:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+235↓j
.text:00000000004035E2                 mov     edi, 28h ; '('  ; unsigned __int64
.text:00000000004035E7                 call    __Znwm          ; operator new(ulong)
.text:00000000004035EC                 mov     r15, rax
.text:00000000004035EF                 cmp     r15, 0FFFFFFFFFFFFFFE0h
.text:00000000004035F3                 jz      short loc_403606
.text:00000000004035F5                 mov     r8d, [r12]
.text:00000000004035F9                 mov     [r15+20h], r8d
.text:00000000004035FD                 mov     r9d, [r12+4]
.text:0000000000403602                 mov     [r15+24h], r9d
.text:0000000000403606
.text:0000000000403606 loc_403606:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+1E3↑j
.text:0000000000403606                 mov     edi, r13d
.text:0000000000403609                 mov     rsi, r15
.text:000000000040360C                 mov     rdx, r14
.text:000000000040360F                 mov     rcx, rbx
.text:0000000000403612                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000403617                 inc     qword ptr [rbp+28h]
.text:000000000040361B                 mov     rax, r15
.text:000000000040361E                 add     rsp, 28h
.text:0000000000403622                 pop     rbp
.text:0000000000403623                 pop     rbx
.text:0000000000403624                 pop     r15
.text:0000000000403626                 pop     r14
.text:0000000000403628                 pop     r13
.text:000000000040362A                 pop     r12
.text:000000000040362C                 retn
.text:000000000040362D ; ---------------------------------------------------------------------------
.text:000000000040362D
.text:000000000040362D loc_40362D:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+1CA↑j
.text:000000000040362D                 cmp     r14, rbx
.text:0000000000403630                 jz      short loc_4035DC
.text:0000000000403632                 mov     eax, 1
.text:0000000000403637                 cmp     r13d, [r14+20h]
.text:000000000040363B                 mov     r13d, 0
.text:0000000000403641                 cmovl   r13d, eax
.text:0000000000403645                 jmp     short loc_4035E2
.text:0000000000403647 ; ---------------------------------------------------------------------------
.text:0000000000403647
.text:0000000000403647 loc_403647:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+F6↑j
.text:0000000000403647                 mov     edi, 28h ; '('  ; unsigned __int64
.text:000000000040364C                 call    __Znwm          ; operator new(ulong)
.text:0000000000403651                 mov     r13, rax
.text:0000000000403654                 cmp     r13, 0FFFFFFFFFFFFFFE0h
.text:0000000000403658                 jz      short loc_40366B
.text:000000000040365A                 mov     edx, [r12]
.text:000000000040365E                 mov     [r13+20h], edx
.text:0000000000403662                 mov     r8d, [r12+4]
.text:0000000000403667                 mov     [r13+24h], r8d
.text:000000000040366B
.text:000000000040366B loc_40366B:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+248↑j
.text:000000000040366B                 xor     edi, edi
.text:000000000040366D                 mov     rsi, r13
.text:0000000000403670                 mov     rcx, rbx
.text:0000000000403673                 mov     rdx, [rsp+58h+var_58]
.text:0000000000403677                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:000000000040367C                 inc     qword ptr [rbp+28h]
.text:0000000000403680                 mov     rax, r13
.text:0000000000403683                 add     rsp, 28h
.text:0000000000403687                 pop     rbp
.text:0000000000403688                 pop     rbx
.text:0000000000403689                 pop     r15
.text:000000000040368B                 pop     r14
.text:000000000040368D                 pop     r13
.text:000000000040368F                 pop     r12
.text:0000000000403691                 retn
.text:0000000000403692 ; ---------------------------------------------------------------------------
.text:0000000000403692
.text:0000000000403692 loc_403692:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+D6↑j
.text:0000000000403692                 cmp     r15, rbx
.text:0000000000403695                 jnz     short loc_40369F
.text:0000000000403697                 mov     r14d, 1
.text:000000000040369D                 jmp     short loc_4036AF
.text:000000000040369F ; ---------------------------------------------------------------------------
.text:000000000040369F
.text:000000000040369F loc_40369F:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+285↑j
.text:000000000040369F                 mov     eax, 1
.text:00000000004036A4                 xor     r14d, r14d
.text:00000000004036A7                 cmp     r13d, [r15+20h]
.text:00000000004036AB                 cmovl   r14d, eax
.text:00000000004036AF
.text:00000000004036AF loc_4036AF:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+28D↑j
.text:00000000004036AF                 mov     edi, 28h ; '('  ; unsigned __int64
.text:00000000004036B4                 call    __Znwm          ; operator new(ulong)
.text:00000000004036B9                 mov     r13, rax
.text:00000000004036BC                 cmp     r13, 0FFFFFFFFFFFFFFE0h
.text:00000000004036C0                 jz      short loc_4036D3
.text:00000000004036C2                 mov     r8d, [r12]
.text:00000000004036C6                 mov     [r13+20h], r8d
.text:00000000004036CA                 mov     r9d, [r12+4]
.text:00000000004036CF                 mov     [r13+24h], r9d
.text:00000000004036D3
.text:00000000004036D3 loc_4036D3:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+2B0↑j
.text:00000000004036D3                 mov     edi, r14d
.text:00000000004036D6                 mov     rsi, r13
.text:00000000004036D9                 mov     rdx, r15
.text:00000000004036DC                 mov     rcx, rbx
.text:00000000004036DF                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:00000000004036E4                 inc     qword ptr [rbp+28h]
.text:00000000004036E8                 mov     rax, r13
.text:00000000004036EB                 add     rsp, 28h
.text:00000000004036EF                 pop     rbp
.text:00000000004036F0                 pop     rbx
.text:00000000004036F1                 pop     r15
.text:00000000004036F3                 pop     r14
.text:00000000004036F5                 pop     r13
.text:00000000004036F7                 pop     r12
.text:00000000004036F9                 retn
.text:00000000004036FA ; ---------------------------------------------------------------------------
.text:00000000004036FA
.text:00000000004036FA loc_4036FA:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+22↑j
.text:00000000004036FA                 cmp     qword ptr [rbp+28h], 0
.text:00000000004036FF                 jbe     short loc_40377A
.text:0000000000403701                 mov     r15, [rbp+20h]
.text:0000000000403705                 mov     eax, [r12]
.text:0000000000403709                 mov     r8d, [r15+20h]
.text:000000000040370D                 cmp     r8d, eax
.text:0000000000403710                 jge     short loc_40377A
.text:0000000000403712                 cmp     r15, rbx
.text:0000000000403715                 jnz     short loc_40371F
.text:0000000000403717                 mov     r14d, 1
.text:000000000040371D                 jmp     short loc_40372F
.text:000000000040371F ; ---------------------------------------------------------------------------
.text:000000000040371F
.text:000000000040371F loc_40371F:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+305↑j
.text:000000000040371F                 mov     r9d, 1
.text:0000000000403725                 xor     r14d, r14d
.text:0000000000403728                 cmp     eax, r8d
.text:000000000040372B                 cmovl   r14d, r9d
.text:000000000040372F
.text:000000000040372F loc_40372F:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+30D↑j
.text:000000000040372F                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000403734                 call    __Znwm          ; operator new(ulong)
.text:0000000000403739                 mov     r13, rax
.text:000000000040373C                 cmp     r13, 0FFFFFFFFFFFFFFE0h
.text:0000000000403740                 jz      short loc_403753
.text:0000000000403742                 mov     r8d, [r12]
.text:0000000000403746                 mov     [r13+20h], r8d
.text:000000000040374A                 mov     r9d, [r12+4]
.text:000000000040374F                 mov     [r13+24h], r9d
.text:0000000000403753
.text:0000000000403753 loc_403753:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+330↑j
.text:0000000000403753                 mov     edi, r14d
.text:0000000000403756                 mov     rsi, r13
.text:0000000000403759                 mov     rdx, r15
.text:000000000040375C                 mov     rcx, rbx
.text:000000000040375F                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000403764                 inc     qword ptr [rbp+28h]
.text:0000000000403768                 mov     rax, r13
.text:000000000040376B                 add     rsp, 28h
.text:000000000040376F                 pop     rbp
.text:0000000000403770                 pop     rbx
.text:0000000000403771                 pop     r15
.text:0000000000403773                 pop     r14
.text:0000000000403775                 pop     r13
.text:0000000000403777                 pop     r12
.text:0000000000403779                 retn
.text:000000000040377A ; ---------------------------------------------------------------------------
.text:000000000040377A
.text:000000000040377A loc_40377A:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+2EF↑j
.text:000000000040377A                                         ; std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+300↑j
.text:000000000040377A                 mov     r9, [rbp+10h]
.text:000000000040377E                 mov     r13, rbx
.text:0000000000403781                 mov     eax, 1
.text:0000000000403786                 test    r9, r9
.text:0000000000403789                 jz      short loc_4037B5
.text:000000000040378B                 mov     r8d, [r12]
.text:000000000040378F                 mov     r10d, 1
.text:0000000000403795
.text:0000000000403795 loc_403795:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+3A3↓j
.text:0000000000403795                 xor     eax, eax
.text:0000000000403797                 cmp     r8d, [r9+20h]
.text:000000000040379B                 mov     r13, r9
.text:000000000040379E                 cmovl   eax, r10d
.text:00000000004037A2                 test    eax, eax
.text:00000000004037A4                 jz      short loc_4037AC
.text:00000000004037A6                 mov     r9, [r9+10h]
.text:00000000004037AA                 jmp     short loc_4037B0
.text:00000000004037AC ; ---------------------------------------------------------------------------
.text:00000000004037AC
.text:00000000004037AC loc_4037AC:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+394↑j
.text:00000000004037AC                 mov     r9, [r9+18h]
.text:00000000004037B0
.text:00000000004037B0 loc_4037B0:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+39A↑j
.text:00000000004037B0                 test    r9, r9
.text:00000000004037B3                 jnz     short loc_403795
.text:00000000004037B5
.text:00000000004037B5 loc_4037B5:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+379↑j
.text:00000000004037B5                 mov     r8, r13
.text:00000000004037B8                 test    eax, eax
.text:00000000004037BA                 jz      short loc_4037D1
.text:00000000004037BC                 cmp     r13, [rbp+18h]
.text:00000000004037C0                 jz      loc_403868
.text:00000000004037C6                 mov     rdi, r13
.text:00000000004037C9                 call    __ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base ; std::_Rb_tree_decrement(std::_Rb_tree_node_base *)
.text:00000000004037CE                 mov     r8, rax
.text:00000000004037D1
.text:00000000004037D1 loc_4037D1:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+3AA↑j
.text:00000000004037D1                 mov     eax, [r12]
.text:00000000004037D5                 cmp     eax, [r8+20h]
.text:00000000004037D9                 jle     short loc_40384E
.text:00000000004037DB                 cmp     r13, rbx
.text:00000000004037DE                 jnz     short loc_4037E8
.text:00000000004037E0                 mov     r15d, 1
.text:00000000004037E6                 jmp     short loc_4037F8
.text:00000000004037E8 ; ---------------------------------------------------------------------------
.text:00000000004037E8
.text:00000000004037E8 loc_4037E8:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+3CE↑j
.text:00000000004037E8                 xor     r15d, r15d
.text:00000000004037EB                 cmp     eax, [r13+20h]
.text:00000000004037EF                 mov     eax, 1
.text:00000000004037F4                 cmovl   r15d, eax
.text:00000000004037F8
.text:00000000004037F8 loc_4037F8:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+3D6↑j
.text:00000000004037F8                 mov     edi, 28h ; '('  ; unsigned __int64
.text:00000000004037FD                 call    __Znwm          ; operator new(ulong)
.text:0000000000403802                 mov     r14, rax
.text:0000000000403805                 cmp     r14, 0FFFFFFFFFFFFFFE0h
.text:0000000000403809                 jz      short loc_40381C
.text:000000000040380B                 mov     eax, [r12]
.text:000000000040380F                 mov     [r14+20h], eax
.text:0000000000403813                 mov     r8d, [r12+4]
.text:0000000000403818                 mov     [r14+24h], r8d
.text:000000000040381C
.text:000000000040381C loc_40381C:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+3F9↑j
.text:000000000040381C                 mov     edi, r15d
.text:000000000040381F                 mov     rsi, r14
.text:0000000000403822                 mov     rdx, r13
.text:0000000000403825                 mov     rcx, rbx
.text:0000000000403828                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:000000000040382D                 mov     byte ptr [rsp+58h+var_50], 1
.text:0000000000403832                 mov     rax, [rsp+58h+var_50]
.text:0000000000403837                 inc     qword ptr [rbp+28h]
.text:000000000040383B                 mov     [rsp+58h+var_58], r14
.text:000000000040383F                 mov     [rsp+58h+var_48], r14
.text:0000000000403844                 mov     [rsp+58h+var_40], rax
.text:0000000000403849                 jmp     loc_4038DD
.text:000000000040384E ; ---------------------------------------------------------------------------
.text:000000000040384E
.text:000000000040384E loc_40384E:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+3C9↑j
.text:000000000040384E                 mov     byte ptr [rsp+58h+var_50], 0
.text:0000000000403853                 mov     rax, [rsp+58h+var_50]
.text:0000000000403858                 mov     [rsp+58h+var_58], r8
.text:000000000040385C                 mov     [rsp+58h+var_48], r8
.text:0000000000403861                 mov     [rsp+58h+var_40], rax
.text:0000000000403866                 jmp     short loc_4038DD
.text:0000000000403868 ; ---------------------------------------------------------------------------
.text:0000000000403868
.text:0000000000403868 loc_403868:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+3B0↑j
.text:0000000000403868                 cmp     r13, rbx
.text:000000000040386B                 jnz     short loc_403875
.text:000000000040386D                 mov     r15d, 1
.text:0000000000403873                 jmp     short loc_40388C
.text:0000000000403875 ; ---------------------------------------------------------------------------
.text:0000000000403875
.text:0000000000403875 loc_403875:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+45B↑j
.text:0000000000403875                 mov     r15d, [r12]
.text:0000000000403879                 mov     eax, 1
.text:000000000040387E                 cmp     r15d, [r13+20h]
.text:0000000000403882                 mov     r15d, 0
.text:0000000000403888                 cmovl   r15d, eax
.text:000000000040388C
.text:000000000040388C loc_40388C:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+463↑j
.text:000000000040388C                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000403891                 call    __Znwm          ; operator new(ulong)
.text:0000000000403896                 mov     r14, rax
.text:0000000000403899                 cmp     r14, 0FFFFFFFFFFFFFFE0h
.text:000000000040389D                 jz      short loc_4038B0
.text:000000000040389F                 mov     eax, [r12]
.text:00000000004038A3                 mov     [r14+20h], eax
.text:00000000004038A7                 mov     r8d, [r12+4]
.text:00000000004038AC                 mov     [r14+24h], r8d
.text:00000000004038B0
.text:00000000004038B0 loc_4038B0:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+48D↑j
.text:00000000004038B0                 mov     edi, r15d
.text:00000000004038B3                 mov     rsi, r14
.text:00000000004038B6                 mov     rdx, r13
.text:00000000004038B9                 mov     rcx, rbx
.text:00000000004038BC                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:00000000004038C1                 mov     byte ptr [rsp+58h+var_50], 1
.text:00000000004038C6                 mov     rax, [rsp+58h+var_50]
.text:00000000004038CB                 inc     qword ptr [rbp+28h]
.text:00000000004038CF                 mov     [rsp+58h+var_58], r14
.text:00000000004038D3                 mov     [rsp+58h+var_48], r14
.text:00000000004038D8                 mov     [rsp+58h+var_40], rax
.text:00000000004038DD
.text:00000000004038DD loc_4038DD:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+439↑j
.text:00000000004038DD                                         ; std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+456↑j
.text:00000000004038DD                 mov     rax, [rsp+58h+var_48]
.text:00000000004038E2                 add     rsp, 28h
.text:00000000004038E6                 pop     rbp
.text:00000000004038E7                 pop     rbx
.text:00000000004038E8                 pop     r15
.text:00000000004038EA                 pop     r14
.text:00000000004038EC                 pop     r13
.text:00000000004038EE                 pop     r12
.text:00000000004038F0                 retn
.text:00000000004038F0 _ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS2_ERKS2_ endp
.text:00000000004038F0
.text:00000000004038F0 ; ---------------------------------------------------------------------------
.text:00000000004038F1                 align 20h
.text:00000000004038F1 ; } // starts at 403410
.text:0000000000403900
.text:0000000000403900 ; =============== S U B R O U T I N E =======================================
.text:0000000000403900
.text:0000000000403900
.text:0000000000403900 ; std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int>>, std::less<int>, std::allocator<std::pair<int const, int>>>::_M_put_node(std::_Rb_tree_node<std::pair<int const, int>> *)
.text:0000000000403900                 public _ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E ; weak
.text:0000000000403900 _ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E proc near
.text:0000000000403900 ; __unwind { // ___gxx_personality_v0
.text:0000000000403900                 mov     rdi, rsi        ; void *
.text:0000000000403903                 jmp     __ZdlPv         ; operator delete(void *)
.text:0000000000403903 _ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E endp
.text:0000000000403903
.text:0000000000403903 ; ---------------------------------------------------------------------------
.text:0000000000403908                 align 10h
.text:0000000000403908 ; } // starts at 403900
.text:0000000000403910
.text:0000000000403910 ; =============== S U B R O U T I N E =======================================
.text:0000000000403910
.text:0000000000403910
.text:0000000000403910 ; std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int>>, std::less<int>, std::allocator<std::pair<int const, int>>>::_M_insert_unique(std::pair<int const, int> const&)
.text:0000000000403910                 public _ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE16_M_insert_uniqueERKS2_ ; weak
.text:0000000000403910 _ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE16_M_insert_uniqueERKS2_ proc near
.text:0000000000403910                                         ; CODE XREF: add(std::string,std::string)+199↑p
.text:0000000000403910                                         ; std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<int const,int>>,std::pair<int const,int> const&)+B6↑p
.text:0000000000403910
.text:0000000000403910 var_48          = qword ptr -48h
.text:0000000000403910 var_40          = qword ptr -40h
.text:0000000000403910
.text:0000000000403910 ; __unwind { // ___gxx_personality_v0
.text:0000000000403910                 push    r12
.text:0000000000403912                 push    r13
.text:0000000000403914                 push    r14
.text:0000000000403916                 push    r15
.text:0000000000403918                 push    rbx
.text:0000000000403919                 push    rbp
.text:000000000040391A                 sub     rsp, 18h
.text:000000000040391E                 mov     r12, rdi
.text:0000000000403921                 mov     r13, rsi
.text:0000000000403924                 mov     r8d, 1
.text:000000000040392A                 mov     rsi, [r12+10h]
.text:000000000040392F                 lea     rbp, [r12+8]
.text:0000000000403934                 mov     rbx, rbp
.text:0000000000403937                 test    rsi, rsi
.text:000000000040393A                 jz      short loc_403967
.text:000000000040393C                 mov     eax, [r13+0]
.text:0000000000403940                 mov     r9d, 1
.text:0000000000403946
.text:0000000000403946 loc_403946:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique(std::pair<int const,int> const&)+55↓j
.text:0000000000403946                 xor     r8d, r8d
.text:0000000000403949                 cmp     eax, [rsi+20h]
.text:000000000040394C                 mov     rbx, rsi
.text:000000000040394F                 cmovl   r8d, r9d
.text:0000000000403953                 test    r8d, r8d
.text:0000000000403956                 jz      short loc_40395E
.text:0000000000403958                 mov     rsi, [rsi+10h]
.text:000000000040395C                 jmp     short loc_403962
.text:000000000040395E ; ---------------------------------------------------------------------------
.text:000000000040395E
.text:000000000040395E loc_40395E:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique(std::pair<int const,int> const&)+46↑j
.text:000000000040395E                 mov     rsi, [rsi+18h]
.text:0000000000403962
.text:0000000000403962 loc_403962:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique(std::pair<int const,int> const&)+4C↑j
.text:0000000000403962                 test    rsi, rsi
.text:0000000000403965                 jnz     short loc_403946
.text:0000000000403967
.text:0000000000403967 loc_403967:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique(std::pair<int const,int> const&)+2A↑j
.text:0000000000403967                 mov     rax, rbx
.text:000000000040396A                 test    r8d, r8d
.text:000000000040396D                 jz      short loc_403982
.text:000000000040396F                 cmp     rbx, [r12+18h]
.text:0000000000403974                 jz      loc_403A1D
.text:000000000040397A                 mov     rdi, rbx
.text:000000000040397D                 call    __ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base ; std::_Rb_tree_decrement(std::_Rb_tree_node_base *)
.text:0000000000403982
.text:0000000000403982 loc_403982:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique(std::pair<int const,int> const&)+5D↑j
.text:0000000000403982                 mov     esi, [r13+0]
.text:0000000000403986                 cmp     esi, [rax+20h]
.text:0000000000403989                 jle     short loc_403A00
.text:000000000040398B                 cmp     rbx, rbp
.text:000000000040398E                 jnz     short loc_403998
.text:0000000000403990                 mov     r15d, 1
.text:0000000000403996                 jmp     short loc_4039A7
.text:0000000000403998 ; ---------------------------------------------------------------------------
.text:0000000000403998
.text:0000000000403998 loc_403998:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique(std::pair<int const,int> const&)+7E↑j
.text:0000000000403998                 xor     r15d, r15d
.text:000000000040399B                 mov     eax, 1
.text:00000000004039A0                 cmp     esi, [rbx+20h]
.text:00000000004039A3                 cmovl   r15d, eax
.text:00000000004039A7
.text:00000000004039A7 loc_4039A7:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique(std::pair<int const,int> const&)+86↑j
.text:00000000004039A7                 mov     edi, 28h ; '('  ; unsigned __int64
.text:00000000004039AC                 call    __Znwm          ; operator new(ulong)
.text:00000000004039B1                 mov     r14, rax
.text:00000000004039B4                 cmp     r14, 0FFFFFFFFFFFFFFE0h
.text:00000000004039B8                 jz      short loc_4039CA
.text:00000000004039BA                 mov     r8d, [r13+0]
.text:00000000004039BE                 mov     [r14+20h], r8d
.text:00000000004039C2                 mov     r9d, [r13+4]
.text:00000000004039C6                 mov     [r14+24h], r9d
.text:00000000004039CA
.text:00000000004039CA loc_4039CA:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique(std::pair<int const,int> const&)+A8↑j
.text:00000000004039CA                 mov     edi, r15d
.text:00000000004039CD                 mov     rsi, r14
.text:00000000004039D0                 mov     rdx, rbx
.text:00000000004039D3                 mov     rcx, rbp
.text:00000000004039D6                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:00000000004039DB                 mov     byte ptr [rsp+48h+var_40], 1
.text:00000000004039E0                 mov     rax, r14
.text:00000000004039E3                 inc     qword ptr [r12+28h]
.text:00000000004039E8                 mov     [rsp+48h+var_48], r14
.text:00000000004039EC                 mov     rdx, [rsp+48h+var_40]
.text:00000000004039F1                 add     rsp, 18h
.text:00000000004039F5                 pop     rbp
.text:00000000004039F6                 pop     rbx
.text:00000000004039F7                 pop     r15
.text:00000000004039F9                 pop     r14
.text:00000000004039FB                 pop     r13
.text:00000000004039FD                 pop     r12
.text:00000000004039FF                 retn
.text:0000000000403A00 ; ---------------------------------------------------------------------------
.text:0000000000403A00
.text:0000000000403A00 loc_403A00:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique(std::pair<int const,int> const&)+79↑j
.text:0000000000403A00                 mov     byte ptr [rsp+48h+var_40], 0
.text:0000000000403A05                 mov     [rsp+48h+var_48], rax
.text:0000000000403A09                 mov     rdx, [rsp+48h+var_40]
.text:0000000000403A0E                 add     rsp, 18h
.text:0000000000403A12                 pop     rbp
.text:0000000000403A13                 pop     rbx
.text:0000000000403A14                 pop     r15
.text:0000000000403A16                 pop     r14
.text:0000000000403A18                 pop     r13
.text:0000000000403A1A                 pop     r12
.text:0000000000403A1C                 retn
.text:0000000000403A1D ; ---------------------------------------------------------------------------
.text:0000000000403A1D
.text:0000000000403A1D loc_403A1D:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique(std::pair<int const,int> const&)+64↑j
.text:0000000000403A1D                 cmp     rbx, rbp
.text:0000000000403A20                 jnz     short loc_403A2A
.text:0000000000403A22                 mov     r15d, 1
.text:0000000000403A28                 jmp     short loc_403A41
.text:0000000000403A2A ; ---------------------------------------------------------------------------
.text:0000000000403A2A
.text:0000000000403A2A loc_403A2A:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique(std::pair<int const,int> const&)+110↑j
.text:0000000000403A2A                 mov     r15d, [r13+0]
.text:0000000000403A2E                 mov     eax, 1
.text:0000000000403A33                 cmp     r15d, [rbx+20h]
.text:0000000000403A37                 mov     r15d, 0
.text:0000000000403A3D                 cmovl   r15d, eax
.text:0000000000403A41
.text:0000000000403A41 loc_403A41:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique(std::pair<int const,int> const&)+118↑j
.text:0000000000403A41                 mov     edi, 28h ; '('  ; unsigned __int64
.text:0000000000403A46                 call    __Znwm          ; operator new(ulong)
.text:0000000000403A4B                 mov     r14, rax
.text:0000000000403A4E                 cmp     r14, 0FFFFFFFFFFFFFFE0h
.text:0000000000403A52                 jz      short loc_403A64
.text:0000000000403A54                 mov     r8d, [r13+0]
.text:0000000000403A58                 mov     [r14+20h], r8d
.text:0000000000403A5C                 mov     r9d, [r13+4]
.text:0000000000403A60                 mov     [r14+24h], r9d
.text:0000000000403A64
.text:0000000000403A64 loc_403A64:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique(std::pair<int const,int> const&)+142↑j
.text:0000000000403A64                 mov     edi, r15d
.text:0000000000403A67                 mov     rsi, r14
.text:0000000000403A6A                 mov     rdx, rbx
.text:0000000000403A6D                 mov     rcx, rbp
.text:0000000000403A70                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0000000000403A75                 mov     byte ptr [rsp+48h+var_40], 1
.text:0000000000403A7A                 mov     rax, r14
.text:0000000000403A7D                 inc     qword ptr [r12+28h]
.text:0000000000403A82                 mov     [rsp+48h+var_48], r14
.text:0000000000403A86                 mov     rdx, [rsp+48h+var_40]
.text:0000000000403A8B                 add     rsp, 18h
.text:0000000000403A8F                 pop     rbp
.text:0000000000403A90                 pop     rbx
.text:0000000000403A91                 pop     r15
.text:0000000000403A93                 pop     r14
.text:0000000000403A95                 pop     r13
.text:0000000000403A97                 pop     r12
.text:0000000000403A99                 retn
.text:0000000000403A99 _ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE16_M_insert_uniqueERKS2_ endp
.text:0000000000403A99
.text:0000000000403A99 ; ---------------------------------------------------------------------------
.text:0000000000403A9A                 align 20h
.text:0000000000403A9A ; } // starts at 403910
.text:0000000000403AA0
.text:0000000000403AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000403AA0
.text:0000000000403AA0
.text:0000000000403AA0 ; std::_Rb_tree<std::pair<int, int>, std::pair<int, int>, std::_Identity<std::pair<int, int>>, std::less<std::pair<int, int>>, std::allocator<std::pair<int, int>>>::_M_erase(std::_Rb_tree_node<std::pair<int, int>> *)
.text:0000000000403AA0                 public _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E ; weak
.text:0000000000403AA0 _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E proc near
.text:0000000000403AA0                                         ; CODE XREF: solve(void)+1E↑p
.text:0000000000403AA0                                         ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_erase(std::_Rb_tree_node<std::pair<int,int>> *)+24↓p ...
.text:0000000000403AA0
.text:0000000000403AA0 var_18          = qword ptr -18h
.text:0000000000403AA0 var_10          = qword ptr -10h
.text:0000000000403AA0 var_8           = qword ptr -8
.text:0000000000403AA0
.text:0000000000403AA0 ; __unwind { // ___gxx_personality_v0
.text:0000000000403AA0                 sub     rsp, 18h
.text:0000000000403AA4                 test    rsi, rsi
.text:0000000000403AA7                 jz      short loc_403AEB
.text:0000000000403AA9                 mov     [rsp+18h+var_8], r12
.text:0000000000403AAE                 mov     r12, rdi
.text:0000000000403AB1                 mov     [rsp+18h+var_10], r13
.text:0000000000403AB6                 mov     r13, rsi
.text:0000000000403AB9                 mov     [rsp+18h+var_18], r14
.text:0000000000403ABD
.text:0000000000403ABD loc_403ABD:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_erase(std::_Rb_tree_node<std::pair<int,int>> *)+3B↓j
.text:0000000000403ABD                 mov     rdi, r12
.text:0000000000403AC0                 mov     rsi, [r13+18h]
.text:0000000000403AC4                 call    _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_erase(std::_Rb_tree_node<std::pair<int,int>> *)
.text:0000000000403AC9                 mov     rdi, r13        ; void *
.text:0000000000403ACC                 mov     r14, [r13+10h]
.text:0000000000403AD0                 call    __ZdlPv         ; operator delete(void *)
.text:0000000000403AD5                 mov     r13, r14
.text:0000000000403AD8                 test    r14, r14
.text:0000000000403ADB                 jnz     short loc_403ABD
.text:0000000000403ADD                 mov     r12, [rsp+18h+var_8]
.text:0000000000403AE2                 mov     r13, [rsp+18h+var_10]
.text:0000000000403AE7                 mov     r14, [rsp+18h+var_18]
.text:0000000000403AEB
.text:0000000000403AEB loc_403AEB:                             ; CODE XREF: std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_erase(std::_Rb_tree_node<std::pair<int,int>> *)+7↑j
.text:0000000000403AEB                 add     rsp, 18h
.text:0000000000403AEF                 retn
.text:0000000000403AEF ; } // starts at 403AA0
.text:0000000000403AEF _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E endp
.text:0000000000403AEF
.text:0000000000403AF0
.text:0000000000403AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000403AF0
.text:0000000000403AF0
.text:0000000000403AF0 ; std::char_traits<char>::length(char const*)
.text:0000000000403AF0                 public _ZNSt11char_traitsIcE6lengthEPKc ; weak
.text:0000000000403AF0 _ZNSt11char_traitsIcE6lengthEPKc proc near
.text:0000000000403AF0 ; __unwind { // ___gxx_personality_v0
.text:0000000000403AF0                 push    rsi
.text:0000000000403AF1                 mov     rdx, rdi
.text:0000000000403AF4                 mov     rcx, rdx
.text:0000000000403AF7                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:0000000000403AFB                 pxor    xmm0, xmm0
.text:0000000000403AFF                 pcmpeqb xmm0, xmmword ptr [rdx]
.text:0000000000403B03                 pmovmskb eax, xmm0
.text:0000000000403B07                 and     ecx, 0Fh
.text:0000000000403B0A                 shr     eax, cl
.text:0000000000403B0C                 bsf     eax, eax
.text:0000000000403B0F                 jnz     short loc_403B1C
.text:0000000000403B11                 mov     rax, rdx
.text:0000000000403B14                 add     rdx, rcx
.text:0000000000403B17                 call    __intel_sse2_strlen
.text:0000000000403B1C
.text:0000000000403B1C loc_403B1C:                             ; CODE XREF: std::char_traits<char>::length(char const*)+1F↑j
.text:0000000000403B1C                 pop     rcx
.text:0000000000403B1D                 retn
.text:0000000000403B1D _ZNSt11char_traitsIcE6lengthEPKc endp
.text:0000000000403B1D
.text:0000000000403B1D ; ---------------------------------------------------------------------------
.text:0000000000403B1E                 align 20h
.text:0000000000403B1E ; } // starts at 403AF0
.text:0000000000403B20
.text:0000000000403B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000403B20
.text:0000000000403B20
.text:0000000000403B20 ; void __fastcall std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::~map(void *)
.text:0000000000403B20                 public _ZNSt3mapIiiSt4lessIiESaISt4pairIKiiEEED1Ev ; weak
.text:0000000000403B20 _ZNSt3mapIiiSt4lessIiESaISt4pairIKiiEEED1Ev proc near
.text:0000000000403B20                                         ; DATA XREF: __sti__$E+3A↑o
.text:0000000000403B20
.text:0000000000403B20 var_18          = qword ptr -18h
.text:0000000000403B20 var_10          = qword ptr -10h
.text:0000000000403B20 var_8           = qword ptr -8
.text:0000000000403B20
.text:0000000000403B20 ; __unwind { // ___gxx_personality_v0
.text:0000000000403B20                 sub     rsp, 18h
.text:0000000000403B24                 mov     rax, rdi
.text:0000000000403B27                 mov     rdi, [rax+10h]
.text:0000000000403B2B                 test    rdi, rdi
.text:0000000000403B2E                 jz      short loc_403B74
.text:0000000000403B30                 mov     [rsp+18h+var_8], r12
.text:0000000000403B35                 mov     r12, rdi
.text:0000000000403B38                 mov     [rsp+18h+var_10], r13
.text:0000000000403B3D                 mov     r13, rax
.text:0000000000403B40                 mov     [rsp+18h+var_18], r14
.text:0000000000403B44
.text:0000000000403B44 loc_403B44:                             ; CODE XREF: std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::~map()+44↓j
.text:0000000000403B44                 mov     rdi, r13
.text:0000000000403B47                 mov     rsi, [r12+18h]
.text:0000000000403B4C                 call    _ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E ; std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_erase(std::_Rb_tree_node<std::pair<int const,int>> *)
.text:0000000000403B51                 mov     rdi, r12        ; void *
.text:0000000000403B54                 mov     r14, [r12+10h]
.text:0000000000403B59                 call    __ZdlPv         ; operator delete(void *)
.text:0000000000403B5E                 mov     r12, r14
.text:0000000000403B61                 test    r14, r14
.text:0000000000403B64                 jnz     short loc_403B44
.text:0000000000403B66                 mov     r12, [rsp+18h+var_8]
.text:0000000000403B6B                 mov     r13, [rsp+18h+var_10]
.text:0000000000403B70                 mov     r14, [rsp+18h+var_18]
.text:0000000000403B74
.text:0000000000403B74 loc_403B74:                             ; CODE XREF: std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::~map()+E↑j
.text:0000000000403B74                 add     rsp, 18h
.text:0000000000403B78                 retn
.text:0000000000403B78 _ZNSt3mapIiiSt4lessIiESaISt4pairIKiiEEED1Ev endp
.text:0000000000403B78
.text:0000000000403B78 ; ---------------------------------------------------------------------------
.text:0000000000403B79                 align 20h
.text:0000000000403B79 ; } // starts at 403B20
.text:0000000000403B80
.text:0000000000403B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000403B80
.text:0000000000403B80
.text:0000000000403B80 ; std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int>>, std::less<int>, std::allocator<std::pair<int const, int>>>::_M_erase(std::_Rb_tree_node<std::pair<int const, int>> *)
.text:0000000000403B80                 public _ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E ; weak
.text:0000000000403B80 _ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E proc near
.text:0000000000403B80                                         ; CODE XREF: std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::~map()+2C↑p
.text:0000000000403B80                                         ; std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_erase(std::_Rb_tree_node<std::pair<int const,int>> *)+24↓p
.text:0000000000403B80
.text:0000000000403B80 var_18          = qword ptr -18h
.text:0000000000403B80 var_10          = qword ptr -10h
.text:0000000000403B80 var_8           = qword ptr -8
.text:0000000000403B80
.text:0000000000403B80 ; __unwind { // ___gxx_personality_v0
.text:0000000000403B80                 sub     rsp, 18h
.text:0000000000403B84                 test    rsi, rsi
.text:0000000000403B87                 jz      short loc_403BCB
.text:0000000000403B89                 mov     [rsp+18h+var_8], r12
.text:0000000000403B8E                 mov     r12, rdi
.text:0000000000403B91                 mov     [rsp+18h+var_10], r13
.text:0000000000403B96                 mov     r13, rsi
.text:0000000000403B99                 mov     [rsp+18h+var_18], r14
.text:0000000000403B9D
.text:0000000000403B9D loc_403B9D:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_erase(std::_Rb_tree_node<std::pair<int const,int>> *)+3B↓j
.text:0000000000403B9D                 mov     rdi, r12
.text:0000000000403BA0                 mov     rsi, [r13+18h]
.text:0000000000403BA4                 call    _ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E ; std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_erase(std::_Rb_tree_node<std::pair<int const,int>> *)
.text:0000000000403BA9                 mov     rdi, r13        ; void *
.text:0000000000403BAC                 mov     r14, [r13+10h]
.text:0000000000403BB0                 call    __ZdlPv         ; operator delete(void *)
.text:0000000000403BB5                 mov     r13, r14
.text:0000000000403BB8                 test    r14, r14
.text:0000000000403BBB                 jnz     short loc_403B9D
.text:0000000000403BBD                 mov     r12, [rsp+18h+var_8]
.text:0000000000403BC2                 mov     r13, [rsp+18h+var_10]
.text:0000000000403BC7                 mov     r14, [rsp+18h+var_18]
.text:0000000000403BCB
.text:0000000000403BCB loc_403BCB:                             ; CODE XREF: std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_erase(std::_Rb_tree_node<std::pair<int const,int>> *)+7↑j
.text:0000000000403BCB                 add     rsp, 18h
.text:0000000000403BCF                 retn
.text:0000000000403BCF ; } // starts at 403B80
.text:0000000000403BCF _ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E endp
.text:0000000000403BCF
.text:0000000000403BD0
.text:0000000000403BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000403BD0
.text:0000000000403BD0
.text:0000000000403BD0 ; void __fastcall std::set<std::pair<int,int>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::~set(void *)
.text:0000000000403BD0                 public _ZNSt3setISt4pairIiiESt4lessIS1_ESaIS1_EED1Ev ; weak
.text:0000000000403BD0 _ZNSt3setISt4pairIiiESt4lessIS1_ESaIS1_EED1Ev proc near
.text:0000000000403BD0                                         ; DATA XREF: __sti__$E+BF↑o
.text:0000000000403BD0
.text:0000000000403BD0 var_18          = qword ptr -18h
.text:0000000000403BD0 var_10          = qword ptr -10h
.text:0000000000403BD0 var_8           = qword ptr -8
.text:0000000000403BD0
.text:0000000000403BD0 ; __unwind { // ___gxx_personality_v0
.text:0000000000403BD0                 sub     rsp, 18h
.text:0000000000403BD4                 mov     rax, rdi
.text:0000000000403BD7                 mov     rdi, [rax+10h]
.text:0000000000403BDB                 test    rdi, rdi
.text:0000000000403BDE                 jz      short loc_403C24
.text:0000000000403BE0                 mov     [rsp+18h+var_8], r12
.text:0000000000403BE5                 mov     r12, rdi
.text:0000000000403BE8                 mov     [rsp+18h+var_10], r13
.text:0000000000403BED                 mov     r13, rax
.text:0000000000403BF0                 mov     [rsp+18h+var_18], r14
.text:0000000000403BF4
.text:0000000000403BF4 loc_403BF4:                             ; CODE XREF: std::set<std::pair<int,int>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::~set()+44↓j
.text:0000000000403BF4                 mov     rdi, r13
.text:0000000000403BF7                 mov     rsi, [r12+18h]
.text:0000000000403BFC                 call    _ZNSt8_Rb_treeISt4pairIiiES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E ; std::_Rb_tree<std::pair<int,int>,std::pair<int,int>,std::_Identity<std::pair<int,int>>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::_M_erase(std::_Rb_tree_node<std::pair<int,int>> *)
.text:0000000000403C01                 mov     rdi, r12        ; void *
.text:0000000000403C04                 mov     r14, [r12+10h]
.text:0000000000403C09                 call    __ZdlPv         ; operator delete(void *)
.text:0000000000403C0E                 mov     r12, r14
.text:0000000000403C11                 test    r14, r14
.text:0000000000403C14                 jnz     short loc_403BF4
.text:0000000000403C16                 mov     r12, [rsp+18h+var_8]
.text:0000000000403C1B                 mov     r13, [rsp+18h+var_10]
.text:0000000000403C20                 mov     r14, [rsp+18h+var_18]
.text:0000000000403C24
.text:0000000000403C24 loc_403C24:                             ; CODE XREF: std::set<std::pair<int,int>,std::less<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::~set()+E↑j
.text:0000000000403C24                 add     rsp, 18h
.text:0000000000403C28                 retn
.text:0000000000403C28 _ZNSt3setISt4pairIiiESt4lessIS1_ESaIS1_EED1Ev endp
.text:0000000000403C28
.text:0000000000403C28 ; ---------------------------------------------------------------------------
.text:0000000000403C29                 align 10h
.text:0000000000403C29 ; } // starts at 403BD0
.text:0000000000403C30
.text:0000000000403C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000403C30
.text:0000000000403C30
.text:0000000000403C30                 public __intel_new_feature_proc_init
.text:0000000000403C30 __intel_new_feature_proc_init proc near ; CODE XREF: main+1D↑p
.text:0000000000403C30
.text:0000000000403C30 dest            = byte ptr -448h
.text:0000000000403C30 var_48          = qword ptr -48h
.text:0000000000403C30 var_40          = qword ptr -40h
.text:0000000000403C30 var_38          = qword ptr -38h
.text:0000000000403C30 var_30          = qword ptr -30h
.text:0000000000403C30 var_28          = qword ptr -28h
.text:0000000000403C30 s               = qword ptr -20h
.text:0000000000403C30
.text:0000000000403C30 ; __unwind {
.text:0000000000403C30                 push    r12
.text:0000000000403C32                 push    r13
.text:0000000000403C34                 push    r14
.text:0000000000403C36                 sub     rsp, 430h
.text:0000000000403C3D                 mov     r14, rsi
.text:0000000000403C40                 mov     rax, cs:__intel_cpu_feature_indicator_ptr
.text:0000000000403C47                 mov     r13d, edi
.text:0000000000403C4A                 mov     r12, [rax]
.text:0000000000403C4D                 test    r12, r12
.text:0000000000403C50                 jz      loc_403F8D
.text:0000000000403C56
.text:0000000000403C56 loc_403C56:                             ; CODE XREF: __intel_new_feature_proc_init+371↓j
.text:0000000000403C56                 mov     rax, r12
.text:0000000000403C59                 and     rax, r14
.text:0000000000403C5C                 cmp     r14, rax
.text:0000000000403C5F                 jnz     short loc_403C7C
.text:0000000000403C61                 test    r12, 6
.text:0000000000403C68                 jnz     loc_403EFD
.text:0000000000403C6E
.text:0000000000403C6E loc_403C6E:                             ; CODE XREF: __intel_new_feature_proc_init+2D7↓j
.text:0000000000403C6E                 add     rsp, 430h
.text:0000000000403C75                 pop     r14
.text:0000000000403C77                 pop     r13
.text:0000000000403C79                 pop     r12
.text:0000000000403C7B                 retn
.text:0000000000403C7C ; ---------------------------------------------------------------------------
.text:0000000000403C7C
.text:0000000000403C7C loc_403C7C:                             ; CODE XREF: __intel_new_feature_proc_init+2F↑j
.text:0000000000403C7C                 test    r14, 1
.text:0000000000403C83                 jnz     loc_403F78
.text:0000000000403C89                 not     r12
.text:0000000000403C8C                 mov     edi, 39h ; '9'  ; number
.text:0000000000403C91                 and     r12, r14
.text:0000000000403C94                 xor     r14d, r14d
.text:0000000000403C97                 xor     esi, esi
.text:0000000000403C99                 xor     eax, eax
.text:0000000000403C9B                 call    __libirc_get_msg
.text:0000000000403CA0                 xor     edx, edx
.text:0000000000403CA2                 mov     r8b, 1
.text:0000000000403CA5                 mov     [rsp+448h+dest], 0
.text:0000000000403CA9                 xor     r13d, r13d
.text:0000000000403CAC                 mov     [rsp+448h+s], rax
.text:0000000000403CB4                 mov     [rsp+448h+var_28], r15
.text:0000000000403CBC                 mov     r15, r12
.text:0000000000403CBF                 mov     [rsp+448h+var_30], rbx
.text:0000000000403CC7                 mov     r12b, r8b
.text:0000000000403CCA                 mov     [rsp+448h+var_38], rbp
.text:0000000000403CD2                 mov     rbp, r14
.text:0000000000403CD5                 mov     r14, rdx
.text:0000000000403CD8
.text:0000000000403CD8 loc_403CD8:                             ; CODE XREF: __intel_new_feature_proc_init+1CE↓j
.text:0000000000403CD8                 mov     ecx, r13d
.text:0000000000403CDB                 mov     eax, 1
.text:0000000000403CE0                 shl     rax, cl
.text:0000000000403CE3                 test    rax, r15
.text:0000000000403CE6                 jz      loc_403DF4
.text:0000000000403CEC                 cmp     r12b, 26h ; '&'
.text:0000000000403CF0                 jnb     loc_403ED3
.text:0000000000403CF6                 movzx   ebx, r12b
.text:0000000000403CFA                 lea     rax, c_feature_names
.text:0000000000403D01                 mov     rbx, [rax+rbx*8]
.text:0000000000403D05                 test    rbx, rbx
.text:0000000000403D08                 jz      loc_403ED3
.text:0000000000403D0E                 cmp     byte ptr [rbx], 0
.text:0000000000403D11                 jz      loc_403ED3
.text:0000000000403D17                 cmp     [rsp+448h+dest], 0
.text:0000000000403D1B                 jz      loc_403DCF
.text:0000000000403D21                 test    rbp, rbp
.text:0000000000403D24                 jz      loc_403DCA
.text:0000000000403D2A                 mov     rdi, rbp        ; s
.text:0000000000403D2D                 call    _strlen
.text:0000000000403D32                 mov     [rsp+448h+var_40], rax
.text:0000000000403D3A                 mov     rdi, [rsp+448h+s] ; s
.text:0000000000403D42                 call    _strlen
.text:0000000000403D47                 mov     [rsp+448h+var_48], rax
.text:0000000000403D4F                 mov     rdi, rbx        ; s
.text:0000000000403D52                 call    _strlen
.text:0000000000403D57                 mov     r9, rax
.text:0000000000403D5A                 mov     rax, [rsp+448h+var_40]
.text:0000000000403D62                 add     rax, r14
.text:0000000000403D65                 add     rax, [rsp+448h+var_48]
.text:0000000000403D6D                 lea     r9, [rax+r9+2]
.text:0000000000403D72                 cmp     r9, 400h
.text:0000000000403D79                 jnb     loc_403F0C
.text:0000000000403D7F                 neg     r14
.text:0000000000403D82                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000403D86                 add     r14, 3FFh
.text:0000000000403D8D                 lea     rsi, src        ; ", "
.text:0000000000403D94                 mov     rdx, r14        ; n
.text:0000000000403D97                 call    _strncat
.text:0000000000403D9C                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000403DA0                 call    _strlen
.text:0000000000403DA5                 movsxd  rdx, eax
.text:0000000000403DA8                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000403DAC                 neg     rdx
.text:0000000000403DAF                 mov     rsi, rbp        ; src
.text:0000000000403DB2                 add     rdx, 3FFh       ; n
.text:0000000000403DB9                 call    _strncat
.text:0000000000403DBE                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000403DC2                 call    _strlen
.text:0000000000403DC7                 movsxd  r14, eax
.text:0000000000403DCA
.text:0000000000403DCA loc_403DCA:                             ; CODE XREF: __intel_new_feature_proc_init+F4↑j
.text:0000000000403DCA                 mov     rbp, rbx
.text:0000000000403DCD                 jmp     short loc_403DF4
.text:0000000000403DCF ; ---------------------------------------------------------------------------
.text:0000000000403DCF
.text:0000000000403DCF loc_403DCF:                             ; CODE XREF: __intel_new_feature_proc_init+EB↑j
.text:0000000000403DCF                 neg     r14
.text:0000000000403DD2                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000403DD6                 add     r14, 3FFh
.text:0000000000403DDD                 mov     rsi, rbx        ; src
.text:0000000000403DE0                 mov     rdx, r14        ; n
.text:0000000000403DE3                 call    _strncat
.text:0000000000403DE8                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000403DEC                 call    _strlen
.text:0000000000403DF1                 movsxd  r14, eax
.text:0000000000403DF4
.text:0000000000403DF4 loc_403DF4:                             ; CODE XREF: __intel_new_feature_proc_init+B6↑j
.text:0000000000403DF4                                         ; __intel_new_feature_proc_init+19D↑j
.text:0000000000403DF4                 inc     r12b
.text:0000000000403DF7                 inc     r13d
.text:0000000000403DFA                 cmp     r12b, 25h ; '%'
.text:0000000000403DFE                 jle     loc_403CD8
.text:0000000000403E04                 mov     rdx, r14
.text:0000000000403E07                 mov     r14, rbp
.text:0000000000403E0A                 mov     rax, [rsp+448h+s]
.text:0000000000403E12                 test    r14, r14
.text:0000000000403E15                 mov     r15, [rsp+448h+var_28]
.text:0000000000403E1D                 mov     rbx, [rsp+448h+var_30]
.text:0000000000403E25                 mov     rbp, [rsp+448h+var_38]
.text:0000000000403E2D                 jz      short loc_403E67
.text:0000000000403E2F                 neg     rdx
.text:0000000000403E32                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000403E36                 add     rdx, 3FFh       ; n
.text:0000000000403E3D                 mov     rsi, rax        ; src
.text:0000000000403E40                 call    _strncat
.text:0000000000403E45                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000403E49                 call    _strlen
.text:0000000000403E4E                 movsxd  rdx, eax
.text:0000000000403E51                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000403E55                 neg     rdx
.text:0000000000403E58                 mov     rsi, r14        ; src
.text:0000000000403E5B                 add     rdx, 3FFh       ; n
.text:0000000000403E62                 call    _strncat
.text:0000000000403E67
.text:0000000000403E67 loc_403E67:                             ; CODE XREF: __intel_new_feature_proc_init+1FD↑j
.text:0000000000403E67                                         ; __intel_new_feature_proc_init+343↓j
.text:0000000000403E67                 cmp     [rsp+448h+dest], 0
.text:0000000000403E6B                 jnz     short loc_403EAA
.text:0000000000403E6D                 xor     esi, esi
.text:0000000000403E6F                 mov     edi, 1
.text:0000000000403E74                 xor     edx, edx
.text:0000000000403E76                 xor     eax, eax
.text:0000000000403E78                 call    __libirc_print
.text:0000000000403E7D
.text:0000000000403E7D loc_403E7D:                             ; CODE XREF: __intel_new_feature_proc_init+2CB↓j
.text:0000000000403E7D                                         ; __intel_new_feature_proc_init+358↓j
.text:0000000000403E7D                 mov     edi, 1
.text:0000000000403E82                 mov     esi, 3Ah ; ':'
.text:0000000000403E87                 xor     edx, edx
.text:0000000000403E89                 xor     eax, eax
.text:0000000000403E8B                 call    __libirc_print
.text:0000000000403E90
.text:0000000000403E90 loc_403E90:                             ; CODE XREF: __intel_new_feature_proc_init+2A1↓j
.text:0000000000403E90                                         ; __intel_new_feature_proc_init+39A↓j
.text:0000000000403E90                 xor     esi, esi
.text:0000000000403E92                 mov     edi, 1
.text:0000000000403E97                 xor     edx, edx
.text:0000000000403E99                 xor     eax, eax
.text:0000000000403E9B                 call    __libirc_print
.text:0000000000403EA0                 mov     edi, 1          ; status
.text:0000000000403EA5                 call    _exit
.text:0000000000403EAA ; ---------------------------------------------------------------------------
.text:0000000000403EAA
.text:0000000000403EAA loc_403EAA:                             ; CODE XREF: __intel_new_feature_proc_init+23B↑j
.text:0000000000403EAA                 xor     esi, esi
.text:0000000000403EAC                 mov     edi, 1
.text:0000000000403EB1                 xor     edx, edx
.text:0000000000403EB3                 xor     eax, eax
.text:0000000000403EB5                 call    __libirc_print
.text:0000000000403EBA                 mov     edi, 1
.text:0000000000403EBF                 mov     esi, 38h ; '8'
.text:0000000000403EC4                 mov     edx, edi
.text:0000000000403EC6                 lea     rcx, [rsp+448h+dest]
.text:0000000000403ECA                 xor     eax, eax
.text:0000000000403ECC                 call    __libirc_print
.text:0000000000403ED1                 jmp     short loc_403E90
.text:0000000000403ED3 ; ---------------------------------------------------------------------------
.text:0000000000403ED3
.text:0000000000403ED3 loc_403ED3:                             ; CODE XREF: __intel_new_feature_proc_init+C0↑j
.text:0000000000403ED3                                         ; __intel_new_feature_proc_init+D8↑j ...
.text:0000000000403ED3                 mov     r15, [rsp+448h+var_28]
.text:0000000000403EDB                 mov     rbx, [rsp+448h+var_30]
.text:0000000000403EE3                 mov     rbp, [rsp+448h+var_38]
.text:0000000000403EEB                 xor     esi, esi
.text:0000000000403EED                 mov     edi, 1
.text:0000000000403EF2                 xor     edx, edx
.text:0000000000403EF4                 xor     eax, eax
.text:0000000000403EF6                 call    __libirc_print
.text:0000000000403EFB                 jmp     short loc_403E7D
.text:0000000000403EFD ; ---------------------------------------------------------------------------
.text:0000000000403EFD
.text:0000000000403EFD loc_403EFD:                             ; CODE XREF: __intel_new_feature_proc_init+38↑j
.text:0000000000403EFD                 xor     edi, edi
.text:0000000000403EFF                 mov     esi, r13d
.text:0000000000403F02                 call    __intel_proc_init_ftzdazule
.text:0000000000403F07                 jmp     loc_403C6E
.text:0000000000403F0C ; ---------------------------------------------------------------------------
.text:0000000000403F0C
.text:0000000000403F0C loc_403F0C:                             ; CODE XREF: __intel_new_feature_proc_init+149↑j
.text:0000000000403F0C                 mov     rdx, r14
.text:0000000000403F0F                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000403F13                 neg     rdx
.text:0000000000403F16                 mov     r14, rbp
.text:0000000000403F19                 mov     rax, [rsp+448h+s]
.text:0000000000403F21                 add     rdx, 3FFh       ; n
.text:0000000000403F28                 mov     rsi, rax        ; src
.text:0000000000403F2B                 mov     r15, [rsp+448h+var_28]
.text:0000000000403F33                 mov     rbx, [rsp+448h+var_30]
.text:0000000000403F3B                 mov     rbp, [rsp+448h+var_38]
.text:0000000000403F43                 call    _strncat
.text:0000000000403F48                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000403F4C                 call    _strlen
.text:0000000000403F51                 movsxd  rdx, eax
.text:0000000000403F54                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000403F58                 neg     rdx
.text:0000000000403F5B                 mov     rsi, r14        ; src
.text:0000000000403F5E                 add     rdx, 3FFh       ; n
.text:0000000000403F65                 call    _strncat
.text:0000000000403F6A                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000403F6E                 call    _strlen
.text:0000000000403F73                 jmp     loc_403E67
.text:0000000000403F78 ; ---------------------------------------------------------------------------
.text:0000000000403F78
.text:0000000000403F78 loc_403F78:                             ; CODE XREF: __intel_new_feature_proc_init+53↑j
.text:0000000000403F78                 xor     esi, esi
.text:0000000000403F7A                 mov     edi, 1
.text:0000000000403F7F                 xor     edx, edx
.text:0000000000403F81                 xor     eax, eax
.text:0000000000403F83                 call    __libirc_print
.text:0000000000403F88                 jmp     loc_403E7D
.text:0000000000403F8D ; ---------------------------------------------------------------------------
.text:0000000000403F8D
.text:0000000000403F8D loc_403F8D:                             ; CODE XREF: __intel_new_feature_proc_init+20↑j
.text:0000000000403F8D                 xor     eax, eax
.text:0000000000403F8F                 call    __intel_cpu_features_init
.text:0000000000403F94                 mov     rax, cs:__intel_cpu_feature_indicator_ptr
.text:0000000000403F9B                 mov     r12, [rax]
.text:0000000000403F9E                 test    r12, r12
.text:0000000000403FA1                 jnz     loc_403C56
.text:0000000000403FA7                 xor     esi, esi
.text:0000000000403FA9                 mov     edi, 1
.text:0000000000403FAE                 xor     edx, edx
.text:0000000000403FB0                 xor     eax, eax
.text:0000000000403FB2                 call    __libirc_print
.text:0000000000403FB7                 mov     edi, 1
.text:0000000000403FBC                 mov     esi, 3Bh ; ';'
.text:0000000000403FC1                 xor     edx, edx
.text:0000000000403FC3                 xor     eax, eax
.text:0000000000403FC5                 call    __libirc_print
.text:0000000000403FCA                 jmp     loc_403E90
.text:0000000000403FCA __intel_new_feature_proc_init endp
.text:0000000000403FCA
.text:0000000000403FCA ; ---------------------------------------------------------------------------
.text:0000000000403FCF                 align 10h
.text:0000000000403FCF ; } // starts at 403C30
.text:0000000000403FD0
.text:0000000000403FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000403FD0
.text:0000000000403FD0
.text:0000000000403FD0                 public __intel_sse2_strlen
.text:0000000000403FD0 __intel_sse2_strlen proc near           ; CODE XREF: main+3CD↑p
.text:0000000000403FD0                                         ; read(void)+49↑p ...
.text:0000000000403FD0 ; __unwind {
.text:0000000000403FD0                 pxor    xmm0, xmm0
.text:0000000000403FD4
.text:0000000000403FD4 loc_403FD4:                             ; CODE XREF: __intel_sse2_strlen+16↓j
.text:0000000000403FD4                 add     rax, 10h
.text:0000000000403FD8                 movdqa  xmm1, xmmword ptr [rax]
.text:0000000000403FDC                 pcmpeqb xmm1, xmm0
.text:0000000000403FE0                 pmovmskb ecx, xmm1
.text:0000000000403FE4                 test    ecx, ecx
.text:0000000000403FE6                 jz      short loc_403FD4
.text:0000000000403FE8                 bsf     ecx, ecx
.text:0000000000403FEB                 sub     rcx, rdx
.text:0000000000403FEE                 add     rax, rcx
.text:0000000000403FF1                 retn
.text:0000000000403FF1 __intel_sse2_strlen endp
.text:0000000000403FF1
.text:0000000000403FF1 ; ---------------------------------------------------------------------------
.text:0000000000403FF2                 align 20h
.text:0000000000403FF2 ; } // starts at 403FD0
.text:0000000000404000
.text:0000000000404000 ; =============== S U B R O U T I N E =======================================
.text:0000000000404000
.text:0000000000404000
.text:0000000000404000 ; __int64 __usercall _libirc_get_msg@<rax>(int number@<edi>, char)
.text:0000000000404000                 public __libirc_get_msg
.text:0000000000404000 __libirc_get_msg proc near              ; CODE XREF: __intel_new_feature_proc_init+6B↑p
.text:0000000000404000
.text:0000000000404000 dest            = byte ptr -168h
.text:0000000000404000 var_E8          = byte ptr -0E8h
.text:0000000000404000 var_D8          = qword ptr -0D8h
.text:0000000000404000 var_D0          = qword ptr -0D0h
.text:0000000000404000 var_C8          = qword ptr -0C8h
.text:0000000000404000 var_C0          = qword ptr -0C0h
.text:0000000000404000 var_39          = byte ptr -39h
.text:0000000000404000 arg             = dword ptr -38h
.text:0000000000404000 var_34          = dword ptr -34h
.text:0000000000404000 var_30          = qword ptr -30h
.text:0000000000404000 var_28          = qword ptr -28h
.text:0000000000404000 arg_0           = byte ptr  8
.text:0000000000404000
.text:0000000000404000 ; __unwind {
.text:0000000000404000                 push    r12
.text:0000000000404002                 push    r13
.text:0000000000404004                 push    r14
.text:0000000000404006                 sub     rsp, 150h
.text:000000000040400D                 mov     [rsp+168h+var_D8], rdx
.text:0000000000404015                 mov     [rsp+168h+var_D0], rcx
.text:000000000040401D                 mov     [rsp+168h+var_C8], r8
.text:0000000000404025                 mov     [rsp+168h+var_C0], r9
.text:000000000040402D                 movzx   r11d, al
.text:0000000000404031                 lea     rax, ds:0[r11*4]
.text:0000000000404039                 lea     r11, loc_40406E
.text:0000000000404040                 sub     r11, rax
.text:0000000000404043                 lea     rax, [rsp+168h+var_39]
.text:000000000040404B                 jmp     r11
.text:000000000040404E                 movaps  xmmword ptr [rax-0Fh], xmm7
.text:0000000000404052                 movaps  xmmword ptr [rax-1Fh], xmm6
.text:0000000000404056                 movaps  xmmword ptr [rax-2Fh], xmm5
.text:000000000040405A                 movaps  xmmword ptr [rax-3Fh], xmm4
.text:000000000040405E                 movaps  xmmword ptr [rax-4Fh], xmm3
.text:0000000000404062                 movaps  xmmword ptr [rax-5Fh], xmm2
.text:0000000000404066                 movaps  xmmword ptr [rax-6Fh], xmm1
.text:000000000040406A                 movaps  xmmword ptr [rax-7Fh], xmm0
.text:000000000040406E
.text:000000000040406E loc_40406E:                             ; DATA XREF: __libirc_get_msg+39↑o
.text:000000000040406E                 mov     r13d, edi
.text:0000000000404071                 mov     r14d, esi
.text:0000000000404074                 test    r13d, r13d
.text:0000000000404077                 jz      loc_404107
.text:000000000040407D                 cmp     cs:first_msg, 0
.text:0000000000404084                 jz      short loc_4040D4
.text:0000000000404086                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:000000000040408D                 xor     esi, esi        ; flag
.text:000000000040408F                 mov     cs:first_msg, 0
.text:0000000000404099                 call    _catopen
.text:000000000040409E                 mov     cs:message_catalog, rax
.text:00000000004040A5                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000004040A9                 jz      loc_404186
.text:00000000004040AF                 mov     rdi, cs:message_catalog ; catalog
.text:00000000004040B6
.text:00000000004040B6 loc_4040B6:                             ; CODE XREF: __libirc_get_msg+212↓j
.text:00000000004040B6                 movsxd  rax, r13d
.text:00000000004040B9                 lea     rcx, off_606948 ; "\n"
.text:00000000004040C0                 shl     rax, 4
.text:00000000004040C4                 mov     cs:use_internal_msg, 0
.text:00000000004040CE                 mov     rcx, [rax+rcx]  ; string
.text:00000000004040D2                 jmp     short loc_4040F5
.text:00000000004040D4 ; ---------------------------------------------------------------------------
.text:00000000004040D4
.text:00000000004040D4 loc_4040D4:                             ; CODE XREF: __libirc_get_msg+84↑j
.text:00000000004040D4                                         ; __libirc_get_msg+218↓j
.text:00000000004040D4                 mov     edi, cs:use_internal_msg
.text:00000000004040DA                 movsxd  rax, r13d
.text:00000000004040DD                 lea     rcx, off_606948 ; "\n"
.text:00000000004040E4                 shl     rax, 4
.text:00000000004040E8                 test    edi, edi
.text:00000000004040EA                 mov     rcx, [rax+rcx]
.text:00000000004040EE                 jnz     short loc_40410E
.text:00000000004040F0                 jmp     loc_40421D
.text:00000000004040F5 ; ---------------------------------------------------------------------------
.text:00000000004040F5
.text:00000000004040F5 loc_4040F5:                             ; CODE XREF: __libirc_get_msg+D2↑j
.text:00000000004040F5                                         ; __libirc_get_msg+224↓j
.text:00000000004040F5                 mov     esi, 1          ; set
.text:00000000004040FA                 mov     edx, r13d       ; number
.text:00000000004040FD                 call    _catgets
.text:0000000000404102                 mov     rcx, rax
.text:0000000000404105                 jmp     short loc_40410E
.text:0000000000404107 ; ---------------------------------------------------------------------------
.text:0000000000404107
.text:0000000000404107 loc_404107:                             ; CODE XREF: __libirc_get_msg+77↑j
.text:0000000000404107                 lea     rcx, aCannotAllocate+34h ; ""
.text:000000000040410E
.text:000000000040410E loc_40410E:                             ; CODE XREF: __libirc_get_msg+EE↑j
.text:000000000040410E                                         ; __libirc_get_msg+105↑j
.text:000000000040410E                 test    r14d, r14d
.text:0000000000404111                 jle     short loc_404175
.text:0000000000404113                 mov     [rsp+168h+arg], 10h
.text:000000000040411E                 lea     rdx, [rsp+168h+arg_0]
.text:0000000000404126                 mov     [rsp+168h+var_34], 30h ; '0'
.text:0000000000404131                 lea     rdi, [rsp+168h+var_E8]
.text:0000000000404139                 mov     [rsp+168h+var_30], rdx
.text:0000000000404141                 mov     [rsp+168h+var_28], rdi
.text:0000000000404149                 lea     rdi, get_msg_buf ; s
.text:0000000000404150                 mov     rsi, rcx        ; format
.text:0000000000404153                 lea     rdx, [rsp+168h+arg] ; arg
.text:000000000040415B                 call    _vsprintf
.text:0000000000404160                 lea     rax, get_msg_buf
.text:0000000000404167                 add     rsp, 150h
.text:000000000040416E                 pop     r14
.text:0000000000404170                 pop     r13
.text:0000000000404172                 pop     r12
.text:0000000000404174                 retn
.text:0000000000404175 ; ---------------------------------------------------------------------------
.text:0000000000404175
.text:0000000000404175 loc_404175:                             ; CODE XREF: __libirc_get_msg+111↑j
.text:0000000000404175                 mov     rax, rcx
.text:0000000000404178                 add     rsp, 150h
.text:000000000040417F                 pop     r14
.text:0000000000404181                 pop     r13
.text:0000000000404183                 pop     r12
.text:0000000000404185                 retn
.text:0000000000404186 ; ---------------------------------------------------------------------------
.text:0000000000404186
.text:0000000000404186 loc_404186:                             ; CODE XREF: __libirc_get_msg+A9↑j
.text:0000000000404186                 lea     rdi, name       ; "LANG"
.text:000000000040418D                 call    _getenv
.text:0000000000404192                 test    rax, rax
.text:0000000000404195                 jz      short loc_404207
.text:0000000000404197                 mov     rsi, rax        ; src
.text:000000000040419A                 lea     rdi, [rsp+168h+dest] ; dest
.text:000000000040419E                 mov     edx, 80h        ; n
.text:00000000004041A3                 call    _strncpy
.text:00000000004041A8                 mov     esi, 2Eh ; '.'  ; c
.text:00000000004041AD                 lea     rdi, [rsp+168h+dest] ; s
.text:00000000004041B1                 call    _strchr
.text:00000000004041B6                 mov     r12, rax
.text:00000000004041B9                 test    r12, r12
.text:00000000004041BC                 jz      short loc_404207
.text:00000000004041BE                 lea     rdi, name       ; "LANG"
.text:00000000004041C5                 lea     rsi, [rsp+168h+dest] ; value
.text:00000000004041C9                 mov     edx, 1          ; replace
.text:00000000004041CE                 mov     byte ptr [r12], 0
.text:00000000004041D3                 call    _setenv
.text:00000000004041D8                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:00000000004041DF                 xor     esi, esi        ; flag
.text:00000000004041E1                 call    _catopen
.text:00000000004041E6                 lea     rdi, name       ; "LANG"
.text:00000000004041ED                 lea     rsi, [rsp+168h+dest] ; value
.text:00000000004041F1                 mov     edx, 1          ; replace
.text:00000000004041F6                 mov     cs:message_catalog, rax
.text:00000000004041FD                 mov     byte ptr [r12], 2Eh ; '.'
.text:0000000000404202                 call    _setenv
.text:0000000000404207
.text:0000000000404207 loc_404207:                             ; CODE XREF: __libirc_get_msg+195↑j
.text:0000000000404207                                         ; __libirc_get_msg+1BC↑j
.text:0000000000404207                 mov     rdi, cs:message_catalog
.text:000000000040420E                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000404212                 jnz     loc_4040B6
.text:0000000000404218                 jmp     loc_4040D4
.text:000000000040421D ; ---------------------------------------------------------------------------
.text:000000000040421D
.text:000000000040421D loc_40421D:                             ; CODE XREF: __libirc_get_msg+F0↑j
.text:000000000040421D                 mov     rdi, cs:message_catalog
.text:0000000000404224                 jmp     loc_4040F5
.text:0000000000404224 __libirc_get_msg endp
.text:0000000000404224
.text:0000000000404224 ; ---------------------------------------------------------------------------
.text:0000000000404229                 align 10h
.text:0000000000404229 ; } // starts at 404000
.text:0000000000404230
.text:0000000000404230 ; =============== S U B R O U T I N E =======================================
.text:0000000000404230
.text:0000000000404230
.text:0000000000404230                 public __libirc_print
.text:0000000000404230 __libirc_print  proc near               ; CODE XREF: __intel_new_feature_proc_init+248↑p
.text:0000000000404230                                         ; __intel_new_feature_proc_init+25B↑p ...
.text:0000000000404230
.text:0000000000404230 dest            = byte ptr -168h
.text:0000000000404230 var_E8          = byte ptr -0E8h
.text:0000000000404230 var_D0          = qword ptr -0D0h
.text:0000000000404230 var_C8          = qword ptr -0C8h
.text:0000000000404230 var_C0          = qword ptr -0C0h
.text:0000000000404230 var_39          = byte ptr -39h
.text:0000000000404230 arg             = dword ptr -38h
.text:0000000000404230 var_34          = dword ptr -34h
.text:0000000000404230 var_30          = qword ptr -30h
.text:0000000000404230 var_28          = qword ptr -28h
.text:0000000000404230 arg_0           = byte ptr  8
.text:0000000000404230
.text:0000000000404230 ; __unwind {
.text:0000000000404230                 push    r13
.text:0000000000404232                 push    r14
.text:0000000000404234                 push    r15
.text:0000000000404236                 push    rbx
.text:0000000000404237                 sub     rsp, 148h
.text:000000000040423E                 mov     [rsp+168h+var_D0], rcx
.text:0000000000404246                 mov     [rsp+168h+var_C8], r8
.text:000000000040424E                 mov     [rsp+168h+var_C0], r9
.text:0000000000404256                 movzx   r11d, al
.text:000000000040425A                 lea     rax, ds:0[r11*4]
.text:0000000000404262                 lea     r11, loc_404297
.text:0000000000404269                 sub     r11, rax
.text:000000000040426C                 lea     rax, [rsp+168h+var_39]
.text:0000000000404274                 jmp     r11
.text:0000000000404277                 movaps  xmmword ptr [rax-0Fh], xmm7
.text:000000000040427B                 movaps  xmmword ptr [rax-1Fh], xmm6
.text:000000000040427F                 movaps  xmmword ptr [rax-2Fh], xmm5
.text:0000000000404283                 movaps  xmmword ptr [rax-3Fh], xmm4
.text:0000000000404287                 movaps  xmmword ptr [rax-4Fh], xmm3
.text:000000000040428B                 movaps  xmmword ptr [rax-5Fh], xmm2
.text:000000000040428F                 movaps  xmmword ptr [rax-6Fh], xmm1
.text:0000000000404293                 movaps  xmmword ptr [rax-7Fh], xmm0
.text:0000000000404297
.text:0000000000404297 loc_404297:                             ; DATA XREF: __libirc_print+32↑o
.text:0000000000404297                 mov     r14d, esi
.text:000000000040429A                 mov     r15d, edx
.text:000000000040429D                 mov     r13d, edi
.text:00000000004042A0                 test    r14d, r14d
.text:00000000004042A3                 jnz     short loc_4042CC
.text:00000000004042A5                 cmp     r13d, 1
.text:00000000004042A9                 jz      loc_4043DE
.text:00000000004042AF                 lea     rdi, asc_404BD0 ; "\n"
.text:00000000004042B6                 xor     eax, eax
.text:00000000004042B8                 call    _printf
.text:00000000004042BD                 add     rsp, 148h
.text:00000000004042C4                 pop     rbx
.text:00000000004042C5                 pop     r15
.text:00000000004042C7                 pop     r14
.text:00000000004042C9                 pop     r13
.text:00000000004042CB                 retn
.text:00000000004042CC ; ---------------------------------------------------------------------------
.text:00000000004042CC
.text:00000000004042CC loc_4042CC:                             ; CODE XREF: __libirc_print+73↑j
.text:00000000004042CC                 cmp     cs:first_msg, 0
.text:00000000004042D3                 jz      short loc_404323
.text:00000000004042D5                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:00000000004042DC                 xor     esi, esi        ; flag
.text:00000000004042DE                 mov     cs:first_msg, 0
.text:00000000004042E8                 call    _catopen
.text:00000000004042ED                 mov     cs:message_catalog, rax
.text:00000000004042F4                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000004042F8                 jz      loc_404405
.text:00000000004042FE                 mov     rdi, cs:message_catalog ; catalog
.text:0000000000404305
.text:0000000000404305 loc_404305:                             ; CODE XREF: __libirc_print+25D↓j
.text:0000000000404305                 movsxd  rax, r14d
.text:0000000000404308                 lea     rcx, off_606948 ; "\n"
.text:000000000040430F                 shl     rax, 4
.text:0000000000404313                 mov     cs:use_internal_msg, 0
.text:000000000040431D                 mov     rcx, [rax+rcx]  ; string
.text:0000000000404321                 jmp     short loc_404344
.text:0000000000404323 ; ---------------------------------------------------------------------------
.text:0000000000404323
.text:0000000000404323 loc_404323:                             ; CODE XREF: __libirc_print+A3↑j
.text:0000000000404323                                         ; __libirc_print+263↓j
.text:0000000000404323                 mov     ebx, cs:use_internal_msg
.text:0000000000404329                 movsxd  rax, r14d
.text:000000000040432C                 lea     rcx, off_606948 ; "\n"
.text:0000000000404333                 shl     rax, 4
.text:0000000000404337                 test    ebx, ebx
.text:0000000000404339                 mov     rcx, [rax+rcx]
.text:000000000040433D                 jnz     short loc_404354
.text:000000000040433F                 jmp     loc_4044D3
.text:0000000000404344 ; ---------------------------------------------------------------------------
.text:0000000000404344
.text:0000000000404344 loc_404344:                             ; CODE XREF: __libirc_print+F1↑j
.text:0000000000404344                                         ; __libirc_print+2AA↓j
.text:0000000000404344                 mov     esi, 1          ; set
.text:0000000000404349                 mov     edx, r14d       ; number
.text:000000000040434C                 call    _catgets
.text:0000000000404351                 mov     rcx, rax
.text:0000000000404354
.text:0000000000404354 loc_404354:                             ; CODE XREF: __libirc_print+10D↑j
.text:0000000000404354                 test    r15d, r15d
.text:0000000000404357                 jle     short loc_4043AD
.text:0000000000404359                 mov     [rsp+168h+arg], 18h
.text:0000000000404364                 lea     rax, [rsp+168h+arg_0]
.text:000000000040436C                 mov     [rsp+168h+var_34], 30h ; '0'
.text:0000000000404377                 lea     rdx, [rsp+168h+var_E8]
.text:000000000040437F                 mov     [rsp+168h+var_30], rax
.text:0000000000404387                 mov     [rsp+168h+var_28], rdx
.text:000000000040438F                 lea     rdi, print_buf  ; s
.text:0000000000404396                 mov     rsi, rcx        ; format
.text:0000000000404399                 lea     rdx, [rsp+168h+arg] ; arg
.text:00000000004043A1                 call    _vsprintf
.text:00000000004043A6                 lea     rcx, print_buf
.text:00000000004043AD
.text:00000000004043AD loc_4043AD:                             ; CODE XREF: __libirc_print+127↑j
.text:00000000004043AD                 cmp     r13d, 1
.text:00000000004043B1                 jz      loc_404498
.text:00000000004043B7                 mov     rdi, rcx        ; format
.text:00000000004043BA                 xor     eax, eax
.text:00000000004043BC                 call    _printf
.text:00000000004043C1                 lea     rdi, asc_404BD0 ; "\n"
.text:00000000004043C8                 xor     eax, eax
.text:00000000004043CA                 call    _printf
.text:00000000004043CF                 add     rsp, 148h
.text:00000000004043D6                 pop     rbx
.text:00000000004043D7                 pop     r15
.text:00000000004043D9                 pop     r14
.text:00000000004043DB                 pop     r13
.text:00000000004043DD                 retn
.text:00000000004043DE ; ---------------------------------------------------------------------------
.text:00000000004043DE
.text:00000000004043DE loc_4043DE:                             ; CODE XREF: __libirc_print+79↑j
.text:00000000004043DE                 mov     rax, cs:stderr_ptr
.text:00000000004043E5                 lea     rsi, asc_404BD0 ; "\n"
.text:00000000004043EC                 mov     rdi, [rax]      ; stream
.text:00000000004043EF                 xor     eax, eax
.text:00000000004043F1                 call    _fprintf
.text:00000000004043F6                 add     rsp, 148h
.text:00000000004043FD                 pop     rbx
.text:00000000004043FE                 pop     r15
.text:0000000000404400                 pop     r14
.text:0000000000404402                 pop     r13
.text:0000000000404404                 retn
.text:0000000000404405 ; ---------------------------------------------------------------------------
.text:0000000000404405
.text:0000000000404405 loc_404405:                             ; CODE XREF: __libirc_print+C8↑j
.text:0000000000404405                 lea     rdi, name       ; "LANG"
.text:000000000040440C                 call    _getenv
.text:0000000000404411                 test    rax, rax
.text:0000000000404414                 jz      short loc_404482
.text:0000000000404416                 mov     rsi, rax        ; src
.text:0000000000404419                 lea     rdi, [rsp+168h+dest] ; dest
.text:000000000040441D                 mov     edx, 80h        ; n
.text:0000000000404422                 call    _strncpy
.text:0000000000404427                 mov     esi, 2Eh ; '.'  ; c
.text:000000000040442C                 lea     rdi, [rsp+168h+dest] ; s
.text:0000000000404430                 call    _strchr
.text:0000000000404435                 mov     rbx, rax
.text:0000000000404438                 test    rbx, rbx
.text:000000000040443B                 jz      short loc_404482
.text:000000000040443D                 lea     rdi, name       ; "LANG"
.text:0000000000404444                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000404448                 mov     edx, 1          ; replace
.text:000000000040444D                 mov     byte ptr [rbx], 0
.text:0000000000404450                 call    _setenv
.text:0000000000404455                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:000000000040445C                 xor     esi, esi        ; flag
.text:000000000040445E                 call    _catopen
.text:0000000000404463                 lea     rdi, name       ; "LANG"
.text:000000000040446A                 lea     rsi, [rsp+168h+dest] ; value
.text:000000000040446E                 mov     edx, 1          ; replace
.text:0000000000404473                 mov     cs:message_catalog, rax
.text:000000000040447A                 mov     byte ptr [rbx], 2Eh ; '.'
.text:000000000040447D                 call    _setenv
.text:0000000000404482
.text:0000000000404482 loc_404482:                             ; CODE XREF: __libirc_print+1E4↑j
.text:0000000000404482                                         ; __libirc_print+20B↑j
.text:0000000000404482                 mov     rdi, cs:message_catalog
.text:0000000000404489                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000040448D                 jnz     loc_404305
.text:0000000000404493                 jmp     loc_404323
.text:0000000000404498 ; ---------------------------------------------------------------------------
.text:0000000000404498
.text:0000000000404498 loc_404498:                             ; CODE XREF: __libirc_print+181↑j
.text:0000000000404498                 mov     rax, cs:stderr_ptr
.text:000000000040449F                 mov     rsi, rcx        ; format
.text:00000000004044A2                 mov     rdi, [rax]      ; stream
.text:00000000004044A5                 xor     eax, eax
.text:00000000004044A7                 call    _fprintf
.text:00000000004044AC                 mov     rax, cs:stderr_ptr
.text:00000000004044B3                 lea     rsi, asc_404BD0 ; "\n"
.text:00000000004044BA                 mov     rdi, [rax]      ; stream
.text:00000000004044BD                 xor     eax, eax
.text:00000000004044BF                 call    _fprintf
.text:00000000004044C4                 add     rsp, 148h
.text:00000000004044CB                 pop     rbx
.text:00000000004044CC                 pop     r15
.text:00000000004044CE                 pop     r14
.text:00000000004044D0                 pop     r13
.text:00000000004044D2                 retn
.text:00000000004044D3 ; ---------------------------------------------------------------------------
.text:00000000004044D3
.text:00000000004044D3 loc_4044D3:                             ; CODE XREF: __libirc_print+10F↑j
.text:00000000004044D3                 mov     rdi, cs:message_catalog
.text:00000000004044DA                 jmp     loc_404344
.text:00000000004044DA __libirc_print  endp
.text:00000000004044DA
.text:00000000004044DA ; ---------------------------------------------------------------------------
.text:00000000004044DF                 align 20h
.text:00000000004044DF ; } // starts at 404230
.text:00000000004044E0
.text:00000000004044E0 ; =============== S U B R O U T I N E =======================================
.text:00000000004044E0
.text:00000000004044E0
.text:00000000004044E0                 public __intel_cpu_features_init_x
.text:00000000004044E0 __intel_cpu_features_init_x proc near
.text:00000000004044E0 ; __unwind {
.text:00000000004044E0                 push    rax
.text:00000000004044E1                 push    rdx
.text:00000000004044E2                 push    rcx
.text:00000000004044E3                 push    rsi
.text:00000000004044E4                 push    rdi
.text:00000000004044E5                 push    r8
.text:00000000004044E7                 push    r9
.text:00000000004044E9                 xor     edi, edi
.text:00000000004044EB                 call    __intel_cpu_features_init_body
.text:00000000004044F0                 pop     r9
.text:00000000004044F2                 pop     r8
.text:00000000004044F4                 pop     rdi
.text:00000000004044F5                 pop     rsi
.text:00000000004044F6                 pop     rcx
.text:00000000004044F7                 pop     rdx
.text:00000000004044F8                 pop     rax
.text:00000000004044F9                 retn
.text:00000000004044F9 __intel_cpu_features_init_x endp
.text:00000000004044F9
.text:00000000004044F9 ; ---------------------------------------------------------------------------
.text:00000000004044FA                 align 20h
.text:00000000004044FA ; } // starts at 4044E0
.text:0000000000404500
.text:0000000000404500 ; =============== S U B R O U T I N E =======================================
.text:0000000000404500
.text:0000000000404500
.text:0000000000404500                 public __intel_cpu_features_init
.text:0000000000404500 __intel_cpu_features_init proc near     ; CODE XREF: __intel_new_feature_proc_init+35F↑p
.text:0000000000404500 ; __unwind {
.text:0000000000404500                 push    rax
.text:0000000000404501                 push    rdx
.text:0000000000404502                 push    rcx
.text:0000000000404503                 push    rsi
.text:0000000000404504                 push    rdi
.text:0000000000404505                 push    r8
.text:0000000000404507                 push    r9
.text:0000000000404509                 mov     edi, 1
.text:000000000040450E                 call    __intel_cpu_features_init_body
.text:0000000000404513                 pop     r9
.text:0000000000404515                 pop     r8
.text:0000000000404517                 pop     rdi
.text:0000000000404518                 pop     rsi
.text:0000000000404519                 pop     rcx
.text:000000000040451A                 pop     rdx
.text:000000000040451B                 pop     rax
.text:000000000040451C                 retn
.text:000000000040451C __intel_cpu_features_init endp
.text:000000000040451C
.text:000000000040451C ; ---------------------------------------------------------------------------
.text:000000000040451D                 align 20h
.text:000000000040451D ; } // starts at 404500
.text:0000000000404520
.text:0000000000404520 ; =============== S U B R O U T I N E =======================================
.text:0000000000404520
.text:0000000000404520
.text:0000000000404520 __intel_cpu_features_init_body proc near
.text:0000000000404520                                         ; CODE XREF: __intel_cpu_features_init_x+B↑p
.text:0000000000404520                                         ; __intel_cpu_features_init+E↑p
.text:0000000000404520
.text:0000000000404520 var_18          = dword ptr -18h
.text:0000000000404520 var_14          = dword ptr -14h
.text:0000000000404520 var_10          = dword ptr -10h
.text:0000000000404520 var_C           = dword ptr -0Ch
.text:0000000000404520
.text:0000000000404520 ; __unwind {
.text:0000000000404520                 push    rbx
.text:0000000000404521                 mov     r11d, edi
.text:0000000000404524                 xor     eax, eax
.text:0000000000404526                 cpuid
.text:0000000000404528                 mov     [rsp+8+var_18], eax
.text:000000000040452C                 mov     [rsp+8+var_14], ebx
.text:0000000000404530                 mov     [rsp+8+var_10], ecx
.text:0000000000404534                 mov     [rsp+8+var_C], edx
.text:0000000000404538                 xor     sil, sil
.text:000000000040453B                 cmp     [rsp+8+var_18], 0
.text:0000000000404540                 jz      loc_40487F
.text:0000000000404546                 cmp     r11d, 1
.text:000000000040454A                 jz      loc_40488C
.text:0000000000404550
.text:0000000000404550 loc_404550:                             ; CODE XREF: __intel_cpu_features_init_body+38A↓j
.text:0000000000404550                 mov     eax, 1
.text:0000000000404555                 cpuid
.text:0000000000404557                 mov     r8d, edx
.text:000000000040455A                 mov     r9d, eax
.text:000000000040455D                 and     r8d, 1
.text:0000000000404561                 mov     edi, ecx
.text:0000000000404563                 lea     r8, ds:1[r8*2]
.text:000000000040456B                 mov     rax, r8
.text:000000000040456E                 or      rax, 4
.text:0000000000404572                 test    edx, 8000h
.text:0000000000404578                 cmovnz  r8, rax
.text:000000000040457C                 mov     rcx, r8
.text:000000000040457F                 or      rcx, 8
.text:0000000000404583                 test    edx, 800000h
.text:0000000000404589                 cmovnz  r8, rcx
.text:000000000040458D                 test    edx, 1000000h
.text:0000000000404593                 jz      loc_404684
.text:0000000000404599                 or      r8, 10h
.text:000000000040459D                 mov     r10, r8
.text:00000000004045A0                 or      r10, 20h
.text:00000000004045A4                 test    edx, 2000000h
.text:00000000004045AA                 cmovnz  r8, r10
.text:00000000004045AE                 mov     rsi, r8
.text:00000000004045B1                 or      rsi, 40h
.text:00000000004045B5                 test    edx, 4000000h
.text:00000000004045BB                 cmovnz  r8, rsi
.text:00000000004045BF                 mov     r10, r8
.text:00000000004045C2                 or      r10, 80h
.text:00000000004045C9                 test    edi, 1
.text:00000000004045CF                 cmovnz  r8, r10
.text:00000000004045D3                 mov     rax, r8
.text:00000000004045D6                 or      rax, 100h
.text:00000000004045DC                 test    edi, 200h
.text:00000000004045E2                 cmovnz  r8, rax
.text:00000000004045E6                 mov     rbx, r8
.text:00000000004045E9                 or      rbx, 800h
.text:00000000004045F0                 test    edi, 400000h
.text:00000000004045F6                 cmovnz  r8, rbx
.text:00000000004045FA                 mov     rcx, r8
.text:00000000004045FD                 or      rcx, 200h
.text:0000000000404604                 test    edi, 80000h
.text:000000000040460A                 cmovnz  r8, rcx
.text:000000000040460E                 mov     rdx, r8
.text:0000000000404611                 or      rdx, 400h
.text:0000000000404618                 test    edi, 100000h
.text:000000000040461E                 cmovnz  r8, rdx
.text:0000000000404622                 mov     r10, r8
.text:0000000000404625                 or      r10, 1000h
.text:000000000040462C                 test    edi, 800000h
.text:0000000000404632                 cmovnz  r8, r10
.text:0000000000404636                 mov     rsi, r8
.text:0000000000404639                 or      rsi, 2000h
.text:0000000000404640                 test    edi, 2
.text:0000000000404646                 cmovnz  r8, rsi
.text:000000000040464A                 mov     sil, 1
.text:000000000040464D                 mov     rax, r8
.text:0000000000404650                 or      rax, 4000h
.text:0000000000404656                 test    edi, 2000000h
.text:000000000040465C                 cmovnz  r8, rax
.text:0000000000404660                 mov     eax, 7
.text:0000000000404665                 xor     ecx, ecx
.text:0000000000404667                 cpuid
.text:0000000000404669                 mov     r10d, ebx
.text:000000000040466C                 mov     rbx, 800000000h
.text:0000000000404676                 or      rbx, r8
.text:0000000000404679                 test    r10d, 20000000h
.text:0000000000404680                 cmovnz  r8, rbx
.text:0000000000404684
.text:0000000000404684 loc_404684:                             ; CODE XREF: __intel_cpu_features_init_body+73↑j
.text:0000000000404684                 mov     rax, r8
.text:0000000000404687                 or      rax, 20000h
.text:000000000040468D                 test    edi, 40000000h
.text:0000000000404693                 cmovnz  r8, rax
.text:0000000000404697                 test    sil, sil
.text:000000000040469A                 jnz     short loc_4046A8
.text:000000000040469C                 mov     eax, 7
.text:00000000004046A1                 xor     ecx, ecx
.text:00000000004046A3                 cpuid
.text:00000000004046A5                 mov     r10d, ebx
.text:00000000004046A8
.text:00000000004046A8 loc_4046A8:                             ; CODE XREF: __intel_cpu_features_init_body+17A↑j
.text:00000000004046A8                 mov     esi, r10d
.text:00000000004046AB                 mov     rcx, r8
.text:00000000004046AE                 and     esi, 108h
.text:00000000004046B4                 or      rcx, 80000h
.text:00000000004046BB                 cmp     esi, 108h
.text:00000000004046C1                 cmovz   r8, rcx
.text:00000000004046C5                 mov     eax, 80000001h
.text:00000000004046CA                 cpuid
.text:00000000004046CC                 mov     rdx, r8
.text:00000000004046CF                 or      rdx, 100000h
.text:00000000004046D6                 test    cl, 20h
.text:00000000004046D9                 cmovnz  r8, rdx
.text:00000000004046DD                 mov     rcx, r8
.text:00000000004046E0                 or      rcx, 200000h
.text:00000000004046E7                 test    r10d, 10h
.text:00000000004046EE                 cmovnz  r8, rcx
.text:00000000004046F2                 mov     rbx, r8
.text:00000000004046F5                 or      rbx, 400000h
.text:00000000004046FC                 test    r10d, 800h
.text:0000000000404703                 cmovnz  r8, rbx
.text:0000000000404707                 mov     rsi, r8
.text:000000000040470A                 or      rsi, 10000000h
.text:0000000000404711                 test    r10d, 80000h
.text:0000000000404718                 cmovnz  r8, rsi
.text:000000000040471C                 mov     rax, r8
.text:000000000040471F                 or      rax, 20000000h
.text:0000000000404725                 test    r10d, 40000h
.text:000000000040472C                 cmovnz  r8, rax
.text:0000000000404730                 test    edi, 8000000h
.text:0000000000404736                 jz      loc_404836
.text:000000000040473C                 xor     ecx, ecx
.text:000000000040473E                 xgetbv
.text:0000000000404741                 or      r8, 1
.text:0000000000404745                 mov     edx, eax
.text:0000000000404747                 and     edx, 6
.text:000000000040474A                 cmp     edx, 6
.text:000000000040474D                 jnz     loc_404836
.text:0000000000404753                 mov     rdx, r8
.text:0000000000404756                 or      rdx, 10000h
.text:000000000040475D                 test    edi, 10000000h
.text:0000000000404763                 cmovnz  r8, rdx
.text:0000000000404767                 mov     rcx, r8
.text:000000000040476A                 or      rcx, 8000h
.text:0000000000404771                 test    edi, 20000000h
.text:0000000000404777                 cmovnz  r8, rcx
.text:000000000040477B                 mov     rbx, r8
.text:000000000040477E                 or      rbx, 800000h
.text:0000000000404785                 test    r10d, 20h
.text:000000000040478C                 cmovnz  r8, rbx
.text:0000000000404790                 mov     rsi, r8
.text:0000000000404793                 or      rsi, 40000h
.text:000000000040479A                 test    edi, 1000h
.text:00000000004047A0                 mov     edi, eax
.text:00000000004047A2                 cmovnz  r8, rsi
.text:00000000004047A6                 and     edi, 18h
.text:00000000004047A9                 cmp     edi, 18h
.text:00000000004047AC                 jnz     short loc_4047CA
.text:00000000004047AE                 or      r8, 1
.text:00000000004047B2                 mov     rdx, 1000000000h
.text:00000000004047BC                 or      rdx, r8
.text:00000000004047BF                 test    r10d, 4000h
.text:00000000004047C6                 cmovnz  r8, rdx
.text:00000000004047CA
.text:00000000004047CA loc_4047CA:                             ; CODE XREF: __intel_cpu_features_init_body+28C↑j
.text:00000000004047CA                 and     eax, 0E0h
.text:00000000004047CF                 cmp     eax, 0E0h
.text:00000000004047D4                 jnz     short loc_404836
.text:00000000004047D6                 or      r8, 1
.text:00000000004047DA                 mov     rdx, 400000000h
.text:00000000004047E4                 mov     rax, r8
.text:00000000004047E7                 mov     rcx, 100000000h
.text:00000000004047F1                 or      rax, 8000000h
.text:00000000004047F7                 test    r10d, 10000h
.text:00000000004047FE                 mov     rbx, 200000000h
.text:0000000000404808                 cmovnz  r8, rax
.text:000000000040480C                 or      rdx, r8
.text:000000000040480F                 test    r10d, 10000000h
.text:0000000000404816                 cmovnz  r8, rdx
.text:000000000040481A                 or      rcx, r8
.text:000000000040481D                 test    r10d, 8000000h
.text:0000000000404824                 cmovnz  r8, rcx
.text:0000000000404828                 or      rbx, r8
.text:000000000040482B                 test    r10d, 4000000h
.text:0000000000404832                 cmovnz  r8, rbx
.text:0000000000404836
.text:0000000000404836 loc_404836:                             ; CODE XREF: __intel_cpu_features_init_body+216↑j
.text:0000000000404836                                         ; __intel_cpu_features_init_body+22D↑j ...
.text:0000000000404836                 mov     eax, r9d
.text:0000000000404839                 shr     eax, 0Ch
.text:000000000040483C                 shr     r9d, 4
.text:0000000000404840                 and     eax, 0F0h
.text:0000000000404845                 and     r9d, 0Fh
.text:0000000000404849                 add     eax, r9d
.text:000000000040484C                 cmp     eax, 1Ch
.text:000000000040484F                 jz      short loc_40485B
.text:0000000000404851                 cmp     eax, 26h ; '&'
.text:0000000000404854                 jz      short loc_40485B
.text:0000000000404856                 cmp     eax, 27h ; '''
.text:0000000000404859                 jnz     short loc_404860
.text:000000000040485B
.text:000000000040485B loc_40485B:                             ; CODE XREF: __intel_cpu_features_init_body+32F↑j
.text:000000000040485B                                         ; __intel_cpu_features_init_body+334↑j
.text:000000000040485B                 bts     r8, 1Fh
.text:0000000000404860
.text:0000000000404860 loc_404860:                             ; CODE XREF: __intel_cpu_features_init_body+339↑j
.text:0000000000404860                 cmp     r11d, 1
.text:0000000000404864                 jz      short loc_40486F
.text:0000000000404866                 mov     cs:__intel_cpu_feature_indicator_x, r8
.text:000000000040486D                 pop     rbx
.text:000000000040486E                 retn
.text:000000000040486F ; ---------------------------------------------------------------------------
.text:000000000040486F
.text:000000000040486F loc_40486F:                             ; CODE XREF: __intel_cpu_features_init_body+344↑j
.text:000000000040486F                 mov     cs:__intel_cpu_feature_indicator, r8
.text:0000000000404876                 mov     cs:__intel_cpu_feature_indicator_x, r8
.text:000000000040487D                 pop     rbx
.text:000000000040487E                 retn
.text:000000000040487F ; ---------------------------------------------------------------------------
.text:000000000040487F
.text:000000000040487F loc_40487F:                             ; CODE XREF: __intel_cpu_features_init_body+20↑j
.text:000000000040487F                                         ; __intel_cpu_features_init_body+374↓j ...
.text:000000000040487F                 mov     cs:__intel_cpu_feature_indicator, 1
.text:000000000040488A                 pop     rbx
.text:000000000040488B                 retn
.text:000000000040488C ; ---------------------------------------------------------------------------
.text:000000000040488C
.text:000000000040488C loc_40488C:                             ; CODE XREF: __intel_cpu_features_init_body+2A↑j
.text:000000000040488C                 cmp     [rsp+8+var_14], 756E6547h
.text:0000000000404894                 jnz     short loc_40487F
.text:0000000000404896                 cmp     [rsp+8+var_C], 49656E69h
.text:000000000040489E                 jnz     short loc_40487F
.text:00000000004048A0                 cmp     [rsp+8+var_10], 6C65746Eh
.text:00000000004048A8                 jnz     short loc_40487F
.text:00000000004048AA                 jmp     loc_404550
.text:00000000004048AA __intel_cpu_features_init_body endp
.text:00000000004048AA
.text:00000000004048AA ; ---------------------------------------------------------------------------
.text:00000000004048AF                 align 10h
.text:00000000004048AF ; } // starts at 404520
.text:00000000004048B0
.text:00000000004048B0 ; =============== S U B R O U T I N E =======================================
.text:00000000004048B0
.text:00000000004048B0
.text:00000000004048B0                 public __intel_proc_init_ftzdazule
.text:00000000004048B0 __intel_proc_init_ftzdazule proc near   ; CODE XREF: __intel_new_feature_proc_init+2D2↑p
.text:00000000004048B0
.text:00000000004048B0 s               = dword ptr -218h
.text:00000000004048B0 var_1FC         = dword ptr -1FCh
.text:00000000004048B0
.text:00000000004048B0 ; __unwind {
.text:00000000004048B0                 push    r15
.text:00000000004048B2                 push    rbx
.text:00000000004048B3                 push    rbp
.text:00000000004048B4                 sub     rsp, 200h
.text:00000000004048BB                 mov     ebx, esi
.text:00000000004048BD                 mov     ebp, ebx
.text:00000000004048BF                 mov     r15d, ebx
.text:00000000004048C2                 and     ebp, 4
.text:00000000004048C5                 and     r15d, 2
.text:00000000004048C9                 jz      short loc_4048D3
.text:00000000004048CB                 test    edi, 2
.text:00000000004048D1                 jz      short loc_4048DF
.text:00000000004048D3
.text:00000000004048D3 loc_4048D3:                             ; CODE XREF: __intel_proc_init_ftzdazule+19↑j
.text:00000000004048D3                 test    ebp, ebp
.text:00000000004048D5                 jz      short loc_404907
.text:00000000004048D7                 test    edi, 4
.text:00000000004048DD                 jnz     short loc_404907
.text:00000000004048DF
.text:00000000004048DF loc_4048DF:                             ; CODE XREF: __intel_proc_init_ftzdazule+21↑j
.text:00000000004048DF                 xor     esi, esi        ; c
.text:00000000004048E1                 lea     rdi, [rsp+218h+s] ; s
.text:00000000004048E5                 mov     edx, 200h       ; n
.text:00000000004048EA                 call    _memset
.text:00000000004048EF                 fxsave  [rsp+218h+s]
.text:00000000004048F3                 xor     edx, edx
.text:00000000004048F5                 mov     eax, [rsp+218h+var_1FC]
.text:00000000004048F9                 test    al, 40h
.text:00000000004048FB                 cmovz   r15d, edx
.text:00000000004048FF                 test    eax, 20000h
.text:0000000000404904                 cmovz   ebp, edx
.text:0000000000404907
.text:0000000000404907 loc_404907:                             ; CODE XREF: __intel_proc_init_ftzdazule+25↑j
.text:0000000000404907                                         ; __intel_proc_init_ftzdazule+2D↑j
.text:0000000000404907                 test    bl, 1
.text:000000000040490A                 jnz     short loc_404945
.text:000000000040490C
.text:000000000040490C loc_40490C:                             ; CODE XREF: __intel_proc_init_ftzdazule+A8↓j
.text:000000000040490C                 test    r15d, r15d
.text:000000000040490F                 jz      short loc_404922
.text:0000000000404911                 stmxcsr [rsp+218h+s]
.text:0000000000404915                 mov     eax, [rsp+218h+s]
.text:0000000000404918                 or      eax, 40h
.text:000000000040491B                 mov     [rsp+218h+s], eax
.text:000000000040491E                 ldmxcsr [rsp+218h+s]
.text:0000000000404922
.text:0000000000404922 loc_404922:                             ; CODE XREF: __intel_proc_init_ftzdazule+5F↑j
.text:0000000000404922                 test    ebp, ebp
.text:0000000000404924                 jz      short loc_404939
.text:0000000000404926                 stmxcsr [rsp+218h+s]
.text:000000000040492A                 mov     eax, [rsp+218h+s]
.text:000000000040492D                 or      eax, 20000h
.text:0000000000404932                 mov     [rsp+218h+s], eax
.text:0000000000404935                 ldmxcsr [rsp+218h+s]
.text:0000000000404939
.text:0000000000404939 loc_404939:                             ; CODE XREF: __intel_proc_init_ftzdazule+74↑j
.text:0000000000404939                 add     rsp, 200h
.text:0000000000404940                 pop     rbp
.text:0000000000404941                 pop     rbx
.text:0000000000404942                 pop     r15
.text:0000000000404944                 retn
.text:0000000000404945 ; ---------------------------------------------------------------------------
.text:0000000000404945
.text:0000000000404945 loc_404945:                             ; CODE XREF: __intel_proc_init_ftzdazule+5A↑j
.text:0000000000404945                 stmxcsr [rsp+218h+s]
.text:0000000000404949                 mov     eax, [rsp+218h+s]
.text:000000000040494C                 or      eax, 8000h
.text:0000000000404951                 mov     [rsp+218h+s], eax
.text:0000000000404954                 ldmxcsr [rsp+218h+s]
.text:0000000000404958                 jmp     short loc_40490C
.text:0000000000404958 __intel_proc_init_ftzdazule endp
.text:0000000000404958
.text:0000000000404958 ; ---------------------------------------------------------------------------
.text:000000000040495A                 align 20h
.text:000000000040495A ; } // starts at 4048B0
.text:0000000000404960
.text:0000000000404960 ; =============== S U B R O U T I N E =======================================
.text:0000000000404960
.text:0000000000404960
.text:0000000000404960 ; void _libc_csu_init(void)
.text:0000000000404960                 public __libc_csu_init
.text:0000000000404960 __libc_csu_init proc near               ; DATA XREF: _start+16↑o
.text:0000000000404960
.text:0000000000404960 var_30          = qword ptr -30h
.text:0000000000404960 var_28          = qword ptr -28h
.text:0000000000404960 var_20          = qword ptr -20h
.text:0000000000404960 var_18          = qword ptr -18h
.text:0000000000404960 var_10          = qword ptr -10h
.text:0000000000404960 var_8           = qword ptr -8
.text:0000000000404960
.text:0000000000404960 ; __unwind {
.text:0000000000404960                 mov     [rsp+var_28], rbp
.text:0000000000404965                 mov     [rsp+var_20], r12
.text:000000000040496A                 lea     rbp, __CTOR_LIST__
.text:0000000000404971                 lea     r12, __init_array_start
.text:0000000000404978                 mov     [rsp+var_18], r13
.text:000000000040497D                 mov     [rsp+var_10], r14
.text:0000000000404982                 mov     [rsp+var_8], r15
.text:0000000000404987                 mov     [rsp+var_30], rbx
.text:000000000040498C                 sub     rsp, 38h
.text:0000000000404990                 sub     rbp, r12
.text:0000000000404993                 mov     r13d, edi
.text:0000000000404996                 mov     r14, rsi
.text:0000000000404999                 sar     rbp, 3
.text:000000000040499D                 mov     r15, rdx
.text:00000000004049A0                 call    _init_proc
.text:00000000004049A5                 test    rbp, rbp
.text:00000000004049A8                 jz      short loc_4049C6
.text:00000000004049AA                 xor     ebx, ebx
.text:00000000004049AC                 nop     dword ptr [rax+00h]
.text:00000000004049B0
.text:00000000004049B0 loc_4049B0:                             ; CODE XREF: __libc_csu_init+64↓j
.text:00000000004049B0                 mov     rdx, r15
.text:00000000004049B3                 mov     rsi, r14
.text:00000000004049B6                 mov     edi, r13d
.text:00000000004049B9                 call    ds:(__init_array_start - 6068F8h)[r12+rbx*8]
.text:00000000004049BD                 add     rbx, 1
.text:00000000004049C1                 cmp     rbx, rbp
.text:00000000004049C4                 jnz     short loc_4049B0
.text:00000000004049C6
.text:00000000004049C6 loc_4049C6:                             ; CODE XREF: __libc_csu_init+48↑j
.text:00000000004049C6                 mov     rbx, [rsp+38h+var_30]
.text:00000000004049CB                 mov     rbp, [rsp+38h+var_28]
.text:00000000004049D0                 mov     r12, [rsp+38h+var_20]
.text:00000000004049D5                 mov     r13, [rsp+38h+var_18]
.text:00000000004049DA                 mov     r14, [rsp+38h+var_10]
.text:00000000004049DF                 mov     r15, [rsp+38h+var_8]
.text:00000000004049E4                 add     rsp, 38h
.text:00000000004049E8                 retn
.text:00000000004049E8 ; } // starts at 404960
.text:00000000004049E8 __libc_csu_init endp
.text:00000000004049E8
.text:00000000004049E8 ; ---------------------------------------------------------------------------
.text:00000000004049E9                 align 10h
.text:00000000004049F0
.text:00000000004049F0 ; =============== S U B R O U T I N E =======================================
.text:00000000004049F0
.text:00000000004049F0
.text:00000000004049F0 ; void _libc_csu_fini(void)
.text:00000000004049F0                 public __libc_csu_fini
.text:00000000004049F0 __libc_csu_fini proc near               ; DATA XREF: _start+F↑o
.text:00000000004049F0 ; __unwind {
.text:00000000004049F0                 rep retn
.text:00000000004049F0 ; } // starts at 4049F0
.text:00000000004049F0 __libc_csu_fini endp
.text:00000000004049F0
.text:00000000004049F0 ; ---------------------------------------------------------------------------
.text:00000000004049F2                 align 20h
.text:0000000000404A00
.text:0000000000404A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000404A00
.text:0000000000404A00 ; Attributes: bp-based frame
.text:0000000000404A00
.text:0000000000404A00 __do_global_ctors_aux proc near         ; CODE XREF: _init_proc+E↑p
.text:0000000000404A00                 push    rbp
.text:0000000000404A01                 mov     rbp, rsp
.text:0000000000404A04                 push    rbx
.text:0000000000404A05                 sub     rsp, 8
.text:0000000000404A09                 mov     rax, cs:__CTOR_LIST__
.text:0000000000404A10                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000404A14                 jz      short loc_404A2F
.text:0000000000404A16                 mov     ebx, offset __CTOR_LIST__
.text:0000000000404A1B                 nop     dword ptr [rax+rax+00h]
.text:0000000000404A20
.text:0000000000404A20 loc_404A20:                             ; CODE XREF: __do_global_ctors_aux+2D↓j
.text:0000000000404A20                 sub     rbx, 8
.text:0000000000404A24                 call    rax ; __CTOR_LIST__
.text:0000000000404A26                 mov     rax, [rbx]
.text:0000000000404A29                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000404A2D                 jnz     short loc_404A20
.text:0000000000404A2F
.text:0000000000404A2F loc_404A2F:                             ; CODE XREF: __do_global_ctors_aux+14↑j
.text:0000000000404A2F                 add     rsp, 8
.text:0000000000404A33                 pop     rbx
.text:0000000000404A34                 pop     rbp
.text:0000000000404A35                 retn
.text:0000000000404A35 __do_global_ctors_aux endp
.text:0000000000404A35
.text:0000000000404A35 ; ---------------------------------------------------------------------------
.text:0000000000404A36                 align 8
.text:0000000000404A36 _text           ends
.text:0000000000404A36