.text:0000000000400930 ; =============== S U B R O U T I N E =======================================
.text:0000000000400930
.text:0000000000400930 ; Attributes: noreturn fuzzy-sp
.text:0000000000400930
.text:0000000000400930                 public _start
.text:0000000000400930 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o
.text:0000000000400930                 xor     ebp, ebp
.text:0000000000400932                 mov     r9, rdx         ; rtld_fini
.text:0000000000400935                 pop     rsi             ; argc
.text:0000000000400936                 mov     rdx, rsp        ; ubp_av
.text:0000000000400939                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000040093D                 push    rax
.text:000000000040093E                 push    rsp             ; stack_end
.text:000000000040093F                 mov     r8, offset __libc_csu_fini ; fini
.text:0000000000400946                 mov     rcx, offset __libc_csu_init ; init
.text:000000000040094D                 mov     rdi, offset main ; main
.text:0000000000400954                 call    ___libc_start_main
.text:0000000000400959                 hlt
.text:0000000000400959 _start          endp
.text:0000000000400959
.text:0000000000400959 ; ---------------------------------------------------------------------------
.text:000000000040095A                 align 4
.text:000000000040095C
.text:000000000040095C ; =============== S U B R O U T I N E =======================================
.text:000000000040095C
.text:000000000040095C
.text:000000000040095C call_gmon_start proc near               ; CODE XREF: _init_proc+4↑p
.text:000000000040095C                 sub     rsp, 8
.text:0000000000400960                 mov     rax, cs:__gmon_start___ptr
.text:0000000000400967                 test    rax, rax
.text:000000000040096A                 jz      short loc_40096E
.text:000000000040096C                 call    rax ; __gmon_start__
.text:000000000040096E
.text:000000000040096E loc_40096E:                             ; CODE XREF: call_gmon_start+E↑j
.text:000000000040096E                 add     rsp, 8
.text:0000000000400972                 retn
.text:0000000000400972 call_gmon_start endp
.text:0000000000400972
.text:0000000000400972 ; ---------------------------------------------------------------------------
.text:0000000000400973                 align 20h
.text:0000000000400980
.text:0000000000400980 ; =============== S U B R O U T I N E =======================================
.text:0000000000400980
.text:0000000000400980 ; Attributes: bp-based frame
.text:0000000000400980
.text:0000000000400980 __do_global_dtors_aux proc near         ; CODE XREF: _term_proc+4↓p
.text:0000000000400980                 push    rbp
.text:0000000000400981                 mov     rbp, rsp
.text:0000000000400984                 push    rbx
.text:0000000000400985                 sub     rsp, 8
.text:0000000000400989                 cmp     cs:completed_6531, 0
.text:0000000000400990                 jnz     short loc_4009DD
.text:0000000000400992                 mov     ebx, offset __DTOR_END__
.text:0000000000400997                 mov     rax, cs:dtor_idx_6533
.text:000000000040099E                 sub     rbx, offset __DTOR_LIST__
.text:00000000004009A5                 sar     rbx, 3
.text:00000000004009A9                 sub     rbx, 1
.text:00000000004009AD                 cmp     rax, rbx
.text:00000000004009B0                 jnb     short loc_4009D6
.text:00000000004009B2                 nop     word ptr [rax+rax+00h]
.text:00000000004009B8
.text:00000000004009B8 loc_4009B8:                             ; CODE XREF: __do_global_dtors_aux+54↓j
.text:00000000004009B8                 add     rax, 1
.text:00000000004009BC                 mov     cs:dtor_idx_6533, rax
.text:00000000004009C3                 call    ds:__DTOR_LIST__[rax*8]
.text:00000000004009CA                 mov     rax, cs:dtor_idx_6533
.text:00000000004009D1                 cmp     rax, rbx
.text:00000000004009D4                 jb      short loc_4009B8
.text:00000000004009D6
.text:00000000004009D6 loc_4009D6:                             ; CODE XREF: __do_global_dtors_aux+30↑j
.text:00000000004009D6                 mov     cs:completed_6531, 1
.text:00000000004009DD
.text:00000000004009DD loc_4009DD:                             ; CODE XREF: __do_global_dtors_aux+10↑j
.text:00000000004009DD                 add     rsp, 8
.text:00000000004009E1                 pop     rbx
.text:00000000004009E2                 pop     rbp
.text:00000000004009E3                 retn
.text:00000000004009E3 __do_global_dtors_aux endp
.text:00000000004009E3
.text:00000000004009E3 ; ---------------------------------------------------------------------------
.text:00000000004009E4                 align 10h
.text:00000000004009F0
.text:00000000004009F0 ; =============== S U B R O U T I N E =======================================
.text:00000000004009F0
.text:00000000004009F0 ; Attributes: bp-based frame
.text:00000000004009F0
.text:00000000004009F0 frame_dummy     proc near               ; CODE XREF: _init_proc+9↑p
.text:00000000004009F0                 cmp     cs:__JCR_LIST__, 0
.text:00000000004009F8                 push    rbp
.text:00000000004009F9                 mov     rbp, rsp
.text:00000000004009FC                 jz      short loc_400A10
.text:00000000004009FE                 mov     eax, 0
.text:0000000000400A03                 test    rax, rax
.text:0000000000400A06                 jz      short loc_400A10
.text:0000000000400A08                 pop     rbp
.text:0000000000400A09                 mov     edi, offset __JCR_LIST__
.text:0000000000400A0E                 jmp     rax
.text:0000000000400A10 ; ---------------------------------------------------------------------------
.text:0000000000400A10
.text:0000000000400A10 loc_400A10:                             ; CODE XREF: frame_dummy+C↑j
.text:0000000000400A10                                         ; frame_dummy+16↑j
.text:0000000000400A10                 pop     rbp
.text:0000000000400A11                 retn
.text:0000000000400A11 frame_dummy     endp
.text:0000000000400A11
.text:0000000000400A11 ; ---------------------------------------------------------------------------
.text:0000000000400A12                 align 20h
.text:0000000000400A20
.text:0000000000400A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000400A20
.text:0000000000400A20 ; Attributes: bp-based frame fuzzy-sp
.text:0000000000400A20
.text:0000000000400A20 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000400A20                 public main
.text:0000000000400A20 main            proc near               ; DATA XREF: _start+1D↑o
.text:0000000000400A20
.text:0000000000400A20 var_80          = qword ptr -80h
.text:0000000000400A20 var_78          = qword ptr -78h
.text:0000000000400A20 var_70          = qword ptr -70h
.text:0000000000400A20 var_68          = dword ptr -68h
.text:0000000000400A20
.text:0000000000400A20 ; __unwind { // ___gxx_personality_v0
.text:0000000000400A20                 push    rbp
.text:0000000000400A21                 mov     rbp, rsp
.text:0000000000400A24                 and     rsp, 0FFFFFFFFFFFFFF80h
.text:0000000000400A28                 sub     rsp, 80h
.text:0000000000400A2F                 mov     rsi, 0
.text:0000000000400A39                 mov     edi, 3
.text:0000000000400A3E                 call    __intel_new_feature_proc_init
.text:0000000000400A43                 stmxcsr dword ptr [rsp+80h+var_80]
.text:0000000000400A47                 mov     edi, offset format ; " %d "
.text:0000000000400A4C                 lea     rsi, [rsp+80h+var_68]
.text:0000000000400A51                 or      dword ptr [rsp+80h+var_80], 8040h
.text:0000000000400A58                 xor     eax, eax
.text:0000000000400A5A                 ldmxcsr dword ptr [rsp+80h+var_80]
.text:0000000000400A5E                 call    _scanf
.text:0000000000400A63                 mov     esi, 1
.text:0000000000400A68                 cmp     [rsp+80h+var_68], 0
.text:0000000000400A6D                 jle     loc_400B71
.text:0000000000400A73                 mov     [rsp+80h+var_78], r12
.text:0000000000400A78                 mov     [rsp+80h+var_80], r13
.text:0000000000400A7C                 mov     r13d, esi
.text:0000000000400A7F                 mov     [rsp+80h+var_70], rbx
.text:0000000000400A84
.text:0000000000400A84 loc_400A84:                             ; CODE XREF: main+13D↓j
.text:0000000000400A84                 mov     edi, offset aDDD ; " %d %d %d"
.text:0000000000400A89                 mov     esi, offset n
.text:0000000000400A8E                 mov     edx, offset s
.text:0000000000400A93                 mov     ecx, offset p
.text:0000000000400A98                 xor     eax, eax
.text:0000000000400A9A                 call    _scanf
.text:0000000000400A9F                 movsxd  rdi, cs:n
.text:0000000000400AA6                 xor     ebx, ebx
.text:0000000000400AA8                 mov     r12d, offset t
.text:0000000000400AAE                 test    rdi, rdi
.text:0000000000400AB1                 jle     short loc_400AD5
.text:0000000000400AB3
.text:0000000000400AB3 loc_400AB3:                             ; CODE XREF: main+B3↓j
.text:0000000000400AB3                 mov     edi, offset aD_0 ; " %d"
.text:0000000000400AB8                 mov     rsi, r12
.text:0000000000400ABB                 xor     eax, eax
.text:0000000000400ABD                 call    _scanf
.text:0000000000400AC2                 inc     rbx
.text:0000000000400AC5                 add     r12, 4
.text:0000000000400AC9                 movsxd  rdi, cs:n
.text:0000000000400AD0                 cmp     rbx, rdi
.text:0000000000400AD3                 jl      short loc_400AB3
.text:0000000000400AD5
.text:0000000000400AD5 loc_400AD5:                             ; CODE XREF: main+91↑j
.text:0000000000400AD5                 xor     ecx, ecx
.text:0000000000400AD7                 xor     r9d, r9d
.text:0000000000400ADA                 test    rdi, rdi
.text:0000000000400ADD                 jle     short loc_400B44
.text:0000000000400ADF                 mov     r8d, cs:p
.text:0000000000400AE6                 mov     ebx, cs:s
.text:0000000000400AEC
.text:0000000000400AEC loc_400AEC:                             ; CODE XREF: main+122↓j
.text:0000000000400AEC                 mov     r11d, ds:t[r9*4]
.text:0000000000400AF4                 mov     eax, 55555556h
.text:0000000000400AF9                 lea     r10d, [r11+2]
.text:0000000000400AFD                 imul    r10d
.text:0000000000400B00                 sar     r10d, 1Fh
.text:0000000000400B04                 sub     edx, r10d
.text:0000000000400B07                 cmp     r8d, edx
.text:0000000000400B0A                 jg      short loc_400B10
.text:0000000000400B0C                 inc     ecx
.text:0000000000400B0E                 jmp     short loc_400B3C
.text:0000000000400B10 ; ---------------------------------------------------------------------------
.text:0000000000400B10
.text:0000000000400B10 loc_400B10:                             ; CODE XREF: main+EA↑j
.text:0000000000400B10                 test    ebx, ebx
.text:0000000000400B12                 jle     short loc_400B3C
.text:0000000000400B14                 cmp     r11d, 2
.text:0000000000400B18                 jl      short loc_400B3C
.text:0000000000400B1A                 add     r11d, 4
.text:0000000000400B1E                 mov     eax, 55555556h
.text:0000000000400B23                 imul    r11d
.text:0000000000400B26                 sar     r11d, 1Fh
.text:0000000000400B2A                 sub     edx, r11d
.text:0000000000400B2D                 cmp     r8d, edx
.text:0000000000400B30                 jg      short loc_400B3C
.text:0000000000400B32                 dec     ebx
.text:0000000000400B34                 inc     ecx
.text:0000000000400B36                 mov     cs:s, ebx
.text:0000000000400B3C
.text:0000000000400B3C loc_400B3C:                             ; CODE XREF: main+EE↑j
.text:0000000000400B3C                                         ; main+F2↑j ...
.text:0000000000400B3C                 inc     r9
.text:0000000000400B3F                 cmp     r9, rdi
.text:0000000000400B42                 jl      short loc_400AEC
.text:0000000000400B44
.text:0000000000400B44 loc_400B44:                             ; CODE XREF: main+BD↑j
.text:0000000000400B44                 mov     edi, offset aCaseDD ; "Case #%d: %d\n"
.text:0000000000400B49                 mov     esi, r13d
.text:0000000000400B4C                 mov     edx, ecx
.text:0000000000400B4E                 xor     eax, eax
.text:0000000000400B50                 call    _printf
.text:0000000000400B55                 inc     r13d
.text:0000000000400B58                 cmp     r13d, [rsp+80h+var_68]
.text:0000000000400B5D                 jle     loc_400A84
.text:0000000000400B63                 mov     r12, [rsp+80h+var_78]
.text:0000000000400B68                 mov     r13, [rsp+80h+var_80]
.text:0000000000400B6C                 mov     rbx, [rsp+80h+var_70]
.text:0000000000400B71
.text:0000000000400B71 loc_400B71:                             ; CODE XREF: main+4D↑j
.text:0000000000400B71                 xor     eax, eax
.text:0000000000400B73                 mov     rsp, rbp
.text:0000000000400B76                 pop     rbp
.text:0000000000400B77                 retn
.text:0000000000400B77 main            endp
.text:0000000000400B77
.text:0000000000400B77 ; ---------------------------------------------------------------------------
.text:0000000000400B78                 align 20h
.text:0000000000400B78 ; } // starts at 400A20
.text:0000000000400B80
.text:0000000000400B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000400B80
.text:0000000000400B80
.text:0000000000400B80                 public __intel_new_feature_proc_init
.text:0000000000400B80 __intel_new_feature_proc_init proc near ; CODE XREF: main+1E↑p
.text:0000000000400B80
.text:0000000000400B80 dest            = byte ptr -448h
.text:0000000000400B80 var_48          = qword ptr -48h
.text:0000000000400B80 var_40          = qword ptr -40h
.text:0000000000400B80 var_38          = qword ptr -38h
.text:0000000000400B80 var_30          = qword ptr -30h
.text:0000000000400B80 var_28          = qword ptr -28h
.text:0000000000400B80 s               = qword ptr -20h
.text:0000000000400B80
.text:0000000000400B80 ; __unwind {
.text:0000000000400B80                 push    r12
.text:0000000000400B82                 push    r13
.text:0000000000400B84                 push    r14
.text:0000000000400B86                 sub     rsp, 430h
.text:0000000000400B8D                 mov     r14, rsi
.text:0000000000400B90                 mov     rax, cs:__intel_cpu_feature_indicator_ptr
.text:0000000000400B97                 mov     r13d, edi
.text:0000000000400B9A                 mov     r12, [rax]
.text:0000000000400B9D                 test    r12, r12
.text:0000000000400BA0                 jz      loc_400EDD
.text:0000000000400BA6
.text:0000000000400BA6 loc_400BA6:                             ; CODE XREF: __intel_new_feature_proc_init+371↓j
.text:0000000000400BA6                 mov     rax, r12
.text:0000000000400BA9                 and     rax, r14
.text:0000000000400BAC                 cmp     r14, rax
.text:0000000000400BAF                 jnz     short loc_400BCC
.text:0000000000400BB1                 test    r12, 6
.text:0000000000400BB8                 jnz     loc_400E4D
.text:0000000000400BBE
.text:0000000000400BBE loc_400BBE:                             ; CODE XREF: __intel_new_feature_proc_init+2D7↓j
.text:0000000000400BBE                 add     rsp, 430h
.text:0000000000400BC5                 pop     r14
.text:0000000000400BC7                 pop     r13
.text:0000000000400BC9                 pop     r12
.text:0000000000400BCB                 retn
.text:0000000000400BCC ; ---------------------------------------------------------------------------
.text:0000000000400BCC
.text:0000000000400BCC loc_400BCC:                             ; CODE XREF: __intel_new_feature_proc_init+2F↑j
.text:0000000000400BCC                 test    r14, 1
.text:0000000000400BD3                 jnz     loc_400EC8
.text:0000000000400BD9                 not     r12
.text:0000000000400BDC                 mov     edi, 39h ; '9'  ; number
.text:0000000000400BE1                 and     r12, r14
.text:0000000000400BE4                 xor     r14d, r14d
.text:0000000000400BE7                 xor     esi, esi
.text:0000000000400BE9                 xor     eax, eax
.text:0000000000400BEB                 call    __libirc_get_msg
.text:0000000000400BF0                 xor     edx, edx
.text:0000000000400BF2                 mov     r8b, 1
.text:0000000000400BF5                 mov     [rsp+448h+dest], 0
.text:0000000000400BF9                 xor     r13d, r13d
.text:0000000000400BFC                 mov     [rsp+448h+s], rax
.text:0000000000400C04                 mov     [rsp+448h+var_28], r15
.text:0000000000400C0C                 mov     r15, r12
.text:0000000000400C0F                 mov     [rsp+448h+var_30], rbx
.text:0000000000400C17                 mov     r12b, r8b
.text:0000000000400C1A                 mov     [rsp+448h+var_38], rbp
.text:0000000000400C22                 mov     rbp, r14
.text:0000000000400C25                 mov     r14, rdx
.text:0000000000400C28
.text:0000000000400C28 loc_400C28:                             ; CODE XREF: __intel_new_feature_proc_init+1CE↓j
.text:0000000000400C28                 mov     ecx, r13d
.text:0000000000400C2B                 mov     eax, 1
.text:0000000000400C30                 shl     rax, cl
.text:0000000000400C33                 test    rax, r15
.text:0000000000400C36                 jz      loc_400D44
.text:0000000000400C3C                 cmp     r12b, 26h ; '&'
.text:0000000000400C40                 jnb     loc_400E23
.text:0000000000400C46                 movzx   ebx, r12b
.text:0000000000400C4A                 lea     rax, c_feature_names
.text:0000000000400C51                 mov     rbx, [rax+rbx*8]
.text:0000000000400C55                 test    rbx, rbx
.text:0000000000400C58                 jz      loc_400E23
.text:0000000000400C5E                 cmp     byte ptr [rbx], 0
.text:0000000000400C61                 jz      loc_400E23
.text:0000000000400C67                 cmp     [rsp+448h+dest], 0
.text:0000000000400C6B                 jz      loc_400D1F
.text:0000000000400C71                 test    rbp, rbp
.text:0000000000400C74                 jz      loc_400D1A
.text:0000000000400C7A                 mov     rdi, rbp        ; s
.text:0000000000400C7D                 call    _strlen
.text:0000000000400C82                 mov     [rsp+448h+var_40], rax
.text:0000000000400C8A                 mov     rdi, [rsp+448h+s] ; s
.text:0000000000400C92                 call    _strlen
.text:0000000000400C97                 mov     [rsp+448h+var_48], rax
.text:0000000000400C9F                 mov     rdi, rbx        ; s
.text:0000000000400CA2                 call    _strlen
.text:0000000000400CA7                 mov     r9, rax
.text:0000000000400CAA                 mov     rax, [rsp+448h+var_40]
.text:0000000000400CB2                 add     rax, r14
.text:0000000000400CB5                 add     rax, [rsp+448h+var_48]
.text:0000000000400CBD                 lea     r9, [rax+r9+2]
.text:0000000000400CC2                 cmp     r9, 400h
.text:0000000000400CC9                 jnb     loc_400E5C
.text:0000000000400CCF                 neg     r14
.text:0000000000400CD2                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000400CD6                 add     r14, 3FFh
.text:0000000000400CDD                 lea     rsi, src        ; ", "
.text:0000000000400CE4                 mov     rdx, r14        ; n
.text:0000000000400CE7                 call    _strncat
.text:0000000000400CEC                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000400CF0                 call    _strlen
.text:0000000000400CF5                 movsxd  rdx, eax
.text:0000000000400CF8                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000400CFC                 neg     rdx
.text:0000000000400CFF                 mov     rsi, rbp        ; src
.text:0000000000400D02                 add     rdx, 3FFh       ; n
.text:0000000000400D09                 call    _strncat
.text:0000000000400D0E                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000400D12                 call    _strlen
.text:0000000000400D17                 movsxd  r14, eax
.text:0000000000400D1A
.text:0000000000400D1A loc_400D1A:                             ; CODE XREF: __intel_new_feature_proc_init+F4↑j
.text:0000000000400D1A                 mov     rbp, rbx
.text:0000000000400D1D                 jmp     short loc_400D44
.text:0000000000400D1F ; ---------------------------------------------------------------------------
.text:0000000000400D1F
.text:0000000000400D1F loc_400D1F:                             ; CODE XREF: __intel_new_feature_proc_init+EB↑j
.text:0000000000400D1F                 neg     r14
.text:0000000000400D22                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000400D26                 add     r14, 3FFh
.text:0000000000400D2D                 mov     rsi, rbx        ; src
.text:0000000000400D30                 mov     rdx, r14        ; n
.text:0000000000400D33                 call    _strncat
.text:0000000000400D38                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000400D3C                 call    _strlen
.text:0000000000400D41                 movsxd  r14, eax
.text:0000000000400D44
.text:0000000000400D44 loc_400D44:                             ; CODE XREF: __intel_new_feature_proc_init+B6↑j
.text:0000000000400D44                                         ; __intel_new_feature_proc_init+19D↑j
.text:0000000000400D44                 inc     r12b
.text:0000000000400D47                 inc     r13d
.text:0000000000400D4A                 cmp     r12b, 25h ; '%'
.text:0000000000400D4E                 jle     loc_400C28
.text:0000000000400D54                 mov     rdx, r14
.text:0000000000400D57                 mov     r14, rbp
.text:0000000000400D5A                 mov     rax, [rsp+448h+s]
.text:0000000000400D62                 test    r14, r14
.text:0000000000400D65                 mov     r15, [rsp+448h+var_28]
.text:0000000000400D6D                 mov     rbx, [rsp+448h+var_30]
.text:0000000000400D75                 mov     rbp, [rsp+448h+var_38]
.text:0000000000400D7D                 jz      short loc_400DB7
.text:0000000000400D7F                 neg     rdx
.text:0000000000400D82                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000400D86                 add     rdx, 3FFh       ; n
.text:0000000000400D8D                 mov     rsi, rax        ; src
.text:0000000000400D90                 call    _strncat
.text:0000000000400D95                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000400D99                 call    _strlen
.text:0000000000400D9E                 movsxd  rdx, eax
.text:0000000000400DA1                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000400DA5                 neg     rdx
.text:0000000000400DA8                 mov     rsi, r14        ; src
.text:0000000000400DAB                 add     rdx, 3FFh       ; n
.text:0000000000400DB2                 call    _strncat
.text:0000000000400DB7
.text:0000000000400DB7 loc_400DB7:                             ; CODE XREF: __intel_new_feature_proc_init+1FD↑j
.text:0000000000400DB7                                         ; __intel_new_feature_proc_init+343↓j
.text:0000000000400DB7                 cmp     [rsp+448h+dest], 0
.text:0000000000400DBB                 jnz     short loc_400DFA
.text:0000000000400DBD                 xor     esi, esi
.text:0000000000400DBF                 mov     edi, 1
.text:0000000000400DC4                 xor     edx, edx
.text:0000000000400DC6                 xor     eax, eax
.text:0000000000400DC8                 call    __libirc_print
.text:0000000000400DCD
.text:0000000000400DCD loc_400DCD:                             ; CODE XREF: __intel_new_feature_proc_init+2CB↓j
.text:0000000000400DCD                                         ; __intel_new_feature_proc_init+358↓j
.text:0000000000400DCD                 mov     edi, 1
.text:0000000000400DD2                 mov     esi, 3Ah ; ':'
.text:0000000000400DD7                 xor     edx, edx
.text:0000000000400DD9                 xor     eax, eax
.text:0000000000400DDB                 call    __libirc_print
.text:0000000000400DE0
.text:0000000000400DE0 loc_400DE0:                             ; CODE XREF: __intel_new_feature_proc_init+2A1↓j
.text:0000000000400DE0                                         ; __intel_new_feature_proc_init+39A↓j
.text:0000000000400DE0                 xor     esi, esi
.text:0000000000400DE2                 mov     edi, 1
.text:0000000000400DE7                 xor     edx, edx
.text:0000000000400DE9                 xor     eax, eax
.text:0000000000400DEB                 call    __libirc_print
.text:0000000000400DF0                 mov     edi, 1          ; status
.text:0000000000400DF5                 call    _exit
.text:0000000000400DFA ; ---------------------------------------------------------------------------
.text:0000000000400DFA
.text:0000000000400DFA loc_400DFA:                             ; CODE XREF: __intel_new_feature_proc_init+23B↑j
.text:0000000000400DFA                 xor     esi, esi
.text:0000000000400DFC                 mov     edi, 1
.text:0000000000400E01                 xor     edx, edx
.text:0000000000400E03                 xor     eax, eax
.text:0000000000400E05                 call    __libirc_print
.text:0000000000400E0A                 mov     edi, 1
.text:0000000000400E0F                 mov     esi, 38h ; '8'
.text:0000000000400E14                 mov     edx, edi
.text:0000000000400E16                 lea     rcx, [rsp+448h+dest]
.text:0000000000400E1A                 xor     eax, eax
.text:0000000000400E1C                 call    __libirc_print
.text:0000000000400E21                 jmp     short loc_400DE0
.text:0000000000400E23 ; ---------------------------------------------------------------------------
.text:0000000000400E23
.text:0000000000400E23 loc_400E23:                             ; CODE XREF: __intel_new_feature_proc_init+C0↑j
.text:0000000000400E23                                         ; __intel_new_feature_proc_init+D8↑j ...
.text:0000000000400E23                 mov     r15, [rsp+448h+var_28]
.text:0000000000400E2B                 mov     rbx, [rsp+448h+var_30]
.text:0000000000400E33                 mov     rbp, [rsp+448h+var_38]
.text:0000000000400E3B                 xor     esi, esi
.text:0000000000400E3D                 mov     edi, 1
.text:0000000000400E42                 xor     edx, edx
.text:0000000000400E44                 xor     eax, eax
.text:0000000000400E46                 call    __libirc_print
.text:0000000000400E4B                 jmp     short loc_400DCD
.text:0000000000400E4D ; ---------------------------------------------------------------------------
.text:0000000000400E4D
.text:0000000000400E4D loc_400E4D:                             ; CODE XREF: __intel_new_feature_proc_init+38↑j
.text:0000000000400E4D                 xor     edi, edi
.text:0000000000400E4F                 mov     esi, r13d
.text:0000000000400E52                 call    __intel_proc_init_ftzdazule
.text:0000000000400E57                 jmp     loc_400BBE
.text:0000000000400E5C ; ---------------------------------------------------------------------------
.text:0000000000400E5C
.text:0000000000400E5C loc_400E5C:                             ; CODE XREF: __intel_new_feature_proc_init+149↑j
.text:0000000000400E5C                 mov     rdx, r14
.text:0000000000400E5F                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000400E63                 neg     rdx
.text:0000000000400E66                 mov     r14, rbp
.text:0000000000400E69                 mov     rax, [rsp+448h+s]
.text:0000000000400E71                 add     rdx, 3FFh       ; n
.text:0000000000400E78                 mov     rsi, rax        ; src
.text:0000000000400E7B                 mov     r15, [rsp+448h+var_28]
.text:0000000000400E83                 mov     rbx, [rsp+448h+var_30]
.text:0000000000400E8B                 mov     rbp, [rsp+448h+var_38]
.text:0000000000400E93                 call    _strncat
.text:0000000000400E98                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000400E9C                 call    _strlen
.text:0000000000400EA1                 movsxd  rdx, eax
.text:0000000000400EA4                 lea     rdi, [rsp+448h+dest] ; dest
.text:0000000000400EA8                 neg     rdx
.text:0000000000400EAB                 mov     rsi, r14        ; src
.text:0000000000400EAE                 add     rdx, 3FFh       ; n
.text:0000000000400EB5                 call    _strncat
.text:0000000000400EBA                 lea     rdi, [rsp+448h+dest] ; s
.text:0000000000400EBE                 call    _strlen
.text:0000000000400EC3                 jmp     loc_400DB7
.text:0000000000400EC8 ; ---------------------------------------------------------------------------
.text:0000000000400EC8
.text:0000000000400EC8 loc_400EC8:                             ; CODE XREF: __intel_new_feature_proc_init+53↑j
.text:0000000000400EC8                 xor     esi, esi
.text:0000000000400ECA                 mov     edi, 1
.text:0000000000400ECF                 xor     edx, edx
.text:0000000000400ED1                 xor     eax, eax
.text:0000000000400ED3                 call    __libirc_print
.text:0000000000400ED8                 jmp     loc_400DCD
.text:0000000000400EDD ; ---------------------------------------------------------------------------
.text:0000000000400EDD
.text:0000000000400EDD loc_400EDD:                             ; CODE XREF: __intel_new_feature_proc_init+20↑j
.text:0000000000400EDD                 xor     eax, eax
.text:0000000000400EDF                 call    __intel_cpu_features_init
.text:0000000000400EE4                 mov     rax, cs:__intel_cpu_feature_indicator_ptr
.text:0000000000400EEB                 mov     r12, [rax]
.text:0000000000400EEE                 test    r12, r12
.text:0000000000400EF1                 jnz     loc_400BA6
.text:0000000000400EF7                 xor     esi, esi
.text:0000000000400EF9                 mov     edi, 1
.text:0000000000400EFE                 xor     edx, edx
.text:0000000000400F00                 xor     eax, eax
.text:0000000000400F02                 call    __libirc_print
.text:0000000000400F07                 mov     edi, 1
.text:0000000000400F0C                 mov     esi, 3Bh ; ';'
.text:0000000000400F11                 xor     edx, edx
.text:0000000000400F13                 xor     eax, eax
.text:0000000000400F15                 call    __libirc_print
.text:0000000000400F1A                 jmp     loc_400DE0
.text:0000000000400F1A __intel_new_feature_proc_init endp
.text:0000000000400F1A
.text:0000000000400F1A ; ---------------------------------------------------------------------------
.text:0000000000400F1F                 align 20h
.text:0000000000400F1F ; } // starts at 400B80
.text:0000000000400F20
.text:0000000000400F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000400F20
.text:0000000000400F20
.text:0000000000400F20 ; __int64 __usercall _libirc_get_msg@<rax>(int number@<edi>, char)
.text:0000000000400F20                 public __libirc_get_msg
.text:0000000000400F20 __libirc_get_msg proc near              ; CODE XREF: __intel_new_feature_proc_init+6B↑p
.text:0000000000400F20
.text:0000000000400F20 dest            = byte ptr -168h
.text:0000000000400F20 var_E8          = byte ptr -0E8h
.text:0000000000400F20 var_D8          = qword ptr -0D8h
.text:0000000000400F20 var_D0          = qword ptr -0D0h
.text:0000000000400F20 var_C8          = qword ptr -0C8h
.text:0000000000400F20 var_C0          = qword ptr -0C0h
.text:0000000000400F20 var_39          = byte ptr -39h
.text:0000000000400F20 arg             = dword ptr -38h
.text:0000000000400F20 var_34          = dword ptr -34h
.text:0000000000400F20 var_30          = qword ptr -30h
.text:0000000000400F20 var_28          = qword ptr -28h
.text:0000000000400F20 arg_0           = byte ptr  8
.text:0000000000400F20
.text:0000000000400F20 ; __unwind {
.text:0000000000400F20                 push    r12
.text:0000000000400F22                 push    r13
.text:0000000000400F24                 push    r14
.text:0000000000400F26                 sub     rsp, 150h
.text:0000000000400F2D                 mov     [rsp+168h+var_D8], rdx
.text:0000000000400F35                 mov     [rsp+168h+var_D0], rcx
.text:0000000000400F3D                 mov     [rsp+168h+var_C8], r8
.text:0000000000400F45                 mov     [rsp+168h+var_C0], r9
.text:0000000000400F4D                 movzx   r11d, al
.text:0000000000400F51                 lea     rax, ds:0[r11*4]
.text:0000000000400F59                 lea     r11, loc_400F8E
.text:0000000000400F60                 sub     r11, rax
.text:0000000000400F63                 lea     rax, [rsp+168h+var_39]
.text:0000000000400F6B                 jmp     r11
.text:0000000000400F6E                 movaps  xmmword ptr [rax-0Fh], xmm7
.text:0000000000400F72                 movaps  xmmword ptr [rax-1Fh], xmm6
.text:0000000000400F76                 movaps  xmmword ptr [rax-2Fh], xmm5
.text:0000000000400F7A                 movaps  xmmword ptr [rax-3Fh], xmm4
.text:0000000000400F7E                 movaps  xmmword ptr [rax-4Fh], xmm3
.text:0000000000400F82                 movaps  xmmword ptr [rax-5Fh], xmm2
.text:0000000000400F86                 movaps  xmmword ptr [rax-6Fh], xmm1
.text:0000000000400F8A                 movaps  xmmword ptr [rax-7Fh], xmm0
.text:0000000000400F8E
.text:0000000000400F8E loc_400F8E:                             ; DATA XREF: __libirc_get_msg+39↑o
.text:0000000000400F8E                 mov     r13d, edi
.text:0000000000400F91                 mov     r14d, esi
.text:0000000000400F94                 test    r13d, r13d
.text:0000000000400F97                 jz      loc_401027
.text:0000000000400F9D                 cmp     cs:first_msg, 0
.text:0000000000400FA4                 jz      short loc_400FF4
.text:0000000000400FA6                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:0000000000400FAD                 xor     esi, esi        ; flag
.text:0000000000400FAF                 mov     cs:first_msg, 0
.text:0000000000400FB9                 call    _catopen
.text:0000000000400FBE                 mov     cs:message_catalog, rax
.text:0000000000400FC5                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000400FC9                 jz      loc_4010A6
.text:0000000000400FCF                 mov     rdi, cs:message_catalog ; catalog
.text:0000000000400FD6
.text:0000000000400FD6 loc_400FD6:                             ; CODE XREF: __libirc_get_msg+212↓j
.text:0000000000400FD6                 movsxd  rax, r13d
.text:0000000000400FD9                 lea     rcx, off_602BC8 ; "\n"
.text:0000000000400FE0                 shl     rax, 4
.text:0000000000400FE4                 mov     cs:use_internal_msg, 0
.text:0000000000400FEE                 mov     rcx, [rax+rcx]  ; string
.text:0000000000400FF2                 jmp     short loc_401015
.text:0000000000400FF4 ; ---------------------------------------------------------------------------
.text:0000000000400FF4
.text:0000000000400FF4 loc_400FF4:                             ; CODE XREF: __libirc_get_msg+84↑j
.text:0000000000400FF4                                         ; __libirc_get_msg+218↓j
.text:0000000000400FF4                 mov     edi, cs:use_internal_msg
.text:0000000000400FFA                 movsxd  rax, r13d
.text:0000000000400FFD                 lea     rcx, off_602BC8 ; "\n"
.text:0000000000401004                 shl     rax, 4
.text:0000000000401008                 test    edi, edi
.text:000000000040100A                 mov     rcx, [rax+rcx]
.text:000000000040100E                 jnz     short loc_40102E
.text:0000000000401010                 jmp     loc_40113D
.text:0000000000401015 ; ---------------------------------------------------------------------------
.text:0000000000401015
.text:0000000000401015 loc_401015:                             ; CODE XREF: __libirc_get_msg+D2↑j
.text:0000000000401015                                         ; __libirc_get_msg+224↓j
.text:0000000000401015                 mov     esi, 1          ; set
.text:000000000040101A                 mov     edx, r13d       ; number
.text:000000000040101D                 call    _catgets
.text:0000000000401022                 mov     rcx, rax
.text:0000000000401025                 jmp     short loc_40102E
.text:0000000000401027 ; ---------------------------------------------------------------------------
.text:0000000000401027
.text:0000000000401027 loc_401027:                             ; CODE XREF: __libirc_get_msg+77↑j
.text:0000000000401027                 lea     rcx, format+4   ; ""
.text:000000000040102E
.text:000000000040102E loc_40102E:                             ; CODE XREF: __libirc_get_msg+EE↑j
.text:000000000040102E                                         ; __libirc_get_msg+105↑j
.text:000000000040102E                 test    r14d, r14d
.text:0000000000401031                 jle     short loc_401095
.text:0000000000401033                 mov     [rsp+168h+arg], 10h
.text:000000000040103E                 lea     rdx, [rsp+168h+arg_0]
.text:0000000000401046                 mov     [rsp+168h+var_34], 30h ; '0'
.text:0000000000401051                 lea     rdi, [rsp+168h+var_E8]
.text:0000000000401059                 mov     [rsp+168h+var_30], rdx
.text:0000000000401061                 mov     [rsp+168h+var_28], rdi
.text:0000000000401069                 lea     rdi, get_msg_buf ; s
.text:0000000000401070                 mov     rsi, rcx        ; format
.text:0000000000401073                 lea     rdx, [rsp+168h+arg] ; arg
.text:000000000040107B                 call    _vsprintf
.text:0000000000401080                 lea     rax, get_msg_buf
.text:0000000000401087                 add     rsp, 150h
.text:000000000040108E                 pop     r14
.text:0000000000401090                 pop     r13
.text:0000000000401092                 pop     r12
.text:0000000000401094                 retn
.text:0000000000401095 ; ---------------------------------------------------------------------------
.text:0000000000401095
.text:0000000000401095 loc_401095:                             ; CODE XREF: __libirc_get_msg+111↑j
.text:0000000000401095                 mov     rax, rcx
.text:0000000000401098                 add     rsp, 150h
.text:000000000040109F                 pop     r14
.text:00000000004010A1                 pop     r13
.text:00000000004010A3                 pop     r12
.text:00000000004010A5                 retn
.text:00000000004010A6 ; ---------------------------------------------------------------------------
.text:00000000004010A6
.text:00000000004010A6 loc_4010A6:                             ; CODE XREF: __libirc_get_msg+A9↑j
.text:00000000004010A6                 lea     rdi, name       ; "LANG"
.text:00000000004010AD                 call    _getenv
.text:00000000004010B2                 test    rax, rax
.text:00000000004010B5                 jz      short loc_401127
.text:00000000004010B7                 mov     rsi, rax        ; src
.text:00000000004010BA                 lea     rdi, [rsp+168h+dest] ; dest
.text:00000000004010BE                 mov     edx, 80h        ; n
.text:00000000004010C3                 call    _strncpy
.text:00000000004010C8                 mov     esi, 2Eh ; '.'  ; c
.text:00000000004010CD                 lea     rdi, [rsp+168h+dest] ; s
.text:00000000004010D1                 call    _strchr
.text:00000000004010D6                 mov     r12, rax
.text:00000000004010D9                 test    r12, r12
.text:00000000004010DC                 jz      short loc_401127
.text:00000000004010DE                 lea     rdi, name       ; "LANG"
.text:00000000004010E5                 lea     rsi, [rsp+168h+dest] ; value
.text:00000000004010E9                 mov     edx, 1          ; replace
.text:00000000004010EE                 mov     byte ptr [r12], 0
.text:00000000004010F3                 call    _setenv
.text:00000000004010F8                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:00000000004010FF                 xor     esi, esi        ; flag
.text:0000000000401101                 call    _catopen
.text:0000000000401106                 lea     rdi, name       ; "LANG"
.text:000000000040110D                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000401111                 mov     edx, 1          ; replace
.text:0000000000401116                 mov     cs:message_catalog, rax
.text:000000000040111D                 mov     byte ptr [r12], 2Eh ; '.'
.text:0000000000401122                 call    _setenv
.text:0000000000401127
.text:0000000000401127 loc_401127:                             ; CODE XREF: __libirc_get_msg+195↑j
.text:0000000000401127                                         ; __libirc_get_msg+1BC↑j
.text:0000000000401127                 mov     rdi, cs:message_catalog
.text:000000000040112E                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000401132                 jnz     loc_400FD6
.text:0000000000401138                 jmp     loc_400FF4
.text:000000000040113D ; ---------------------------------------------------------------------------
.text:000000000040113D
.text:000000000040113D loc_40113D:                             ; CODE XREF: __libirc_get_msg+F0↑j
.text:000000000040113D                 mov     rdi, cs:message_catalog
.text:0000000000401144                 jmp     loc_401015
.text:0000000000401144 __libirc_get_msg endp
.text:0000000000401144
.text:0000000000401144 ; ---------------------------------------------------------------------------
.text:0000000000401149                 align 10h
.text:0000000000401149 ; } // starts at 400F20
.text:0000000000401150
.text:0000000000401150 ; =============== S U B R O U T I N E =======================================
.text:0000000000401150
.text:0000000000401150
.text:0000000000401150                 public __libirc_print
.text:0000000000401150 __libirc_print  proc near               ; CODE XREF: __intel_new_feature_proc_init+248↑p
.text:0000000000401150                                         ; __intel_new_feature_proc_init+25B↑p ...
.text:0000000000401150
.text:0000000000401150 dest            = byte ptr -168h
.text:0000000000401150 var_E8          = byte ptr -0E8h
.text:0000000000401150 var_D0          = qword ptr -0D0h
.text:0000000000401150 var_C8          = qword ptr -0C8h
.text:0000000000401150 var_C0          = qword ptr -0C0h
.text:0000000000401150 var_39          = byte ptr -39h
.text:0000000000401150 arg             = dword ptr -38h
.text:0000000000401150 var_34          = dword ptr -34h
.text:0000000000401150 var_30          = qword ptr -30h
.text:0000000000401150 var_28          = qword ptr -28h
.text:0000000000401150 arg_0           = byte ptr  8
.text:0000000000401150
.text:0000000000401150 ; __unwind {
.text:0000000000401150                 push    r13
.text:0000000000401152                 push    r14
.text:0000000000401154                 push    r15
.text:0000000000401156                 push    rbx
.text:0000000000401157                 sub     rsp, 148h
.text:000000000040115E                 mov     [rsp+168h+var_D0], rcx
.text:0000000000401166                 mov     [rsp+168h+var_C8], r8
.text:000000000040116E                 mov     [rsp+168h+var_C0], r9
.text:0000000000401176                 movzx   r11d, al
.text:000000000040117A                 lea     rax, ds:0[r11*4]
.text:0000000000401182                 lea     r11, loc_4011B7
.text:0000000000401189                 sub     r11, rax
.text:000000000040118C                 lea     rax, [rsp+168h+var_39]
.text:0000000000401194                 jmp     r11
.text:0000000000401197                 movaps  xmmword ptr [rax-0Fh], xmm7
.text:000000000040119B                 movaps  xmmword ptr [rax-1Fh], xmm6
.text:000000000040119F                 movaps  xmmword ptr [rax-2Fh], xmm5
.text:00000000004011A3                 movaps  xmmword ptr [rax-3Fh], xmm4
.text:00000000004011A7                 movaps  xmmword ptr [rax-4Fh], xmm3
.text:00000000004011AB                 movaps  xmmword ptr [rax-5Fh], xmm2
.text:00000000004011AF                 movaps  xmmword ptr [rax-6Fh], xmm1
.text:00000000004011B3                 movaps  xmmword ptr [rax-7Fh], xmm0
.text:00000000004011B7
.text:00000000004011B7 loc_4011B7:                             ; DATA XREF: __libirc_print+32↑o
.text:00000000004011B7                 mov     r14d, esi
.text:00000000004011BA                 mov     r15d, edx
.text:00000000004011BD                 mov     r13d, edi
.text:00000000004011C0                 test    r14d, r14d
.text:00000000004011C3                 jnz     short loc_4011EC
.text:00000000004011C5                 cmp     r13d, 1
.text:00000000004011C9                 jz      loc_4012FE
.text:00000000004011CF                 lea     rdi, aCaseDD+0Ch ; format
.text:00000000004011D6                 xor     eax, eax
.text:00000000004011D8                 call    _printf
.text:00000000004011DD                 add     rsp, 148h
.text:00000000004011E4                 pop     rbx
.text:00000000004011E5                 pop     r15
.text:00000000004011E7                 pop     r14
.text:00000000004011E9                 pop     r13
.text:00000000004011EB                 retn
.text:00000000004011EC ; ---------------------------------------------------------------------------
.text:00000000004011EC
.text:00000000004011EC loc_4011EC:                             ; CODE XREF: __libirc_print+73↑j
.text:00000000004011EC                 cmp     cs:first_msg, 0
.text:00000000004011F3                 jz      short loc_401243
.text:00000000004011F5                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:00000000004011FC                 xor     esi, esi        ; flag
.text:00000000004011FE                 mov     cs:first_msg, 0
.text:0000000000401208                 call    _catopen
.text:000000000040120D                 mov     cs:message_catalog, rax
.text:0000000000401214                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000401218                 jz      loc_401325
.text:000000000040121E                 mov     rdi, cs:message_catalog ; catalog
.text:0000000000401225
.text:0000000000401225 loc_401225:                             ; CODE XREF: __libirc_print+25D↓j
.text:0000000000401225                 movsxd  rax, r14d
.text:0000000000401228                 lea     rcx, off_602BC8 ; "\n"
.text:000000000040122F                 shl     rax, 4
.text:0000000000401233                 mov     cs:use_internal_msg, 0
.text:000000000040123D                 mov     rcx, [rax+rcx]  ; string
.text:0000000000401241                 jmp     short loc_401264
.text:0000000000401243 ; ---------------------------------------------------------------------------
.text:0000000000401243
.text:0000000000401243 loc_401243:                             ; CODE XREF: __libirc_print+A3↑j
.text:0000000000401243                                         ; __libirc_print+263↓j
.text:0000000000401243                 mov     ebx, cs:use_internal_msg
.text:0000000000401249                 movsxd  rax, r14d
.text:000000000040124C                 lea     rcx, off_602BC8 ; "\n"
.text:0000000000401253                 shl     rax, 4
.text:0000000000401257                 test    ebx, ebx
.text:0000000000401259                 mov     rcx, [rax+rcx]
.text:000000000040125D                 jnz     short loc_401274
.text:000000000040125F                 jmp     loc_4013F3
.text:0000000000401264 ; ---------------------------------------------------------------------------
.text:0000000000401264
.text:0000000000401264 loc_401264:                             ; CODE XREF: __libirc_print+F1↑j
.text:0000000000401264                                         ; __libirc_print+2AA↓j
.text:0000000000401264                 mov     esi, 1          ; set
.text:0000000000401269                 mov     edx, r14d       ; number
.text:000000000040126C                 call    _catgets
.text:0000000000401271                 mov     rcx, rax
.text:0000000000401274
.text:0000000000401274 loc_401274:                             ; CODE XREF: __libirc_print+10D↑j
.text:0000000000401274                 test    r15d, r15d
.text:0000000000401277                 jle     short loc_4012CD
.text:0000000000401279                 mov     [rsp+168h+arg], 18h
.text:0000000000401284                 lea     rax, [rsp+168h+arg_0]
.text:000000000040128C                 mov     [rsp+168h+var_34], 30h ; '0'
.text:0000000000401297                 lea     rdx, [rsp+168h+var_E8]
.text:000000000040129F                 mov     [rsp+168h+var_30], rax
.text:00000000004012A7                 mov     [rsp+168h+var_28], rdx
.text:00000000004012AF                 lea     rdi, print_buf  ; s
.text:00000000004012B6                 mov     rsi, rcx        ; format
.text:00000000004012B9                 lea     rdx, [rsp+168h+arg] ; arg
.text:00000000004012C1                 call    _vsprintf
.text:00000000004012C6                 lea     rcx, print_buf
.text:00000000004012CD
.text:00000000004012CD loc_4012CD:                             ; CODE XREF: __libirc_print+127↑j
.text:00000000004012CD                 cmp     r13d, 1
.text:00000000004012D1                 jz      loc_4013B8
.text:00000000004012D7                 mov     rdi, rcx        ; format
.text:00000000004012DA                 xor     eax, eax
.text:00000000004012DC                 call    _printf
.text:00000000004012E1                 lea     rdi, aCaseDD+0Ch ; format
.text:00000000004012E8                 xor     eax, eax
.text:00000000004012EA                 call    _printf
.text:00000000004012EF                 add     rsp, 148h
.text:00000000004012F6                 pop     rbx
.text:00000000004012F7                 pop     r15
.text:00000000004012F9                 pop     r14
.text:00000000004012FB                 pop     r13
.text:00000000004012FD                 retn
.text:00000000004012FE ; ---------------------------------------------------------------------------
.text:00000000004012FE
.text:00000000004012FE loc_4012FE:                             ; CODE XREF: __libirc_print+79↑j
.text:00000000004012FE                 mov     rax, cs:stderr_ptr
.text:0000000000401305                 lea     rsi, aCaseDD+0Ch ; format
.text:000000000040130C                 mov     rdi, [rax]      ; stream
.text:000000000040130F                 xor     eax, eax
.text:0000000000401311                 call    _fprintf
.text:0000000000401316                 add     rsp, 148h
.text:000000000040131D                 pop     rbx
.text:000000000040131E                 pop     r15
.text:0000000000401320                 pop     r14
.text:0000000000401322                 pop     r13
.text:0000000000401324                 retn
.text:0000000000401325 ; ---------------------------------------------------------------------------
.text:0000000000401325
.text:0000000000401325 loc_401325:                             ; CODE XREF: __libirc_print+C8↑j
.text:0000000000401325                 lea     rdi, name       ; "LANG"
.text:000000000040132C                 call    _getenv
.text:0000000000401331                 test    rax, rax
.text:0000000000401334                 jz      short loc_4013A2
.text:0000000000401336                 mov     rsi, rax        ; src
.text:0000000000401339                 lea     rdi, [rsp+168h+dest] ; dest
.text:000000000040133D                 mov     edx, 80h        ; n
.text:0000000000401342                 call    _strncpy
.text:0000000000401347                 mov     esi, 2Eh ; '.'  ; c
.text:000000000040134C                 lea     rdi, [rsp+168h+dest] ; s
.text:0000000000401350                 call    _strchr
.text:0000000000401355                 mov     rbx, rax
.text:0000000000401358                 test    rbx, rbx
.text:000000000040135B                 jz      short loc_4013A2
.text:000000000040135D                 lea     rdi, name       ; "LANG"
.text:0000000000401364                 lea     rsi, [rsp+168h+dest] ; value
.text:0000000000401368                 mov     edx, 1          ; replace
.text:000000000040136D                 mov     byte ptr [rbx], 0
.text:0000000000401370                 call    _setenv
.text:0000000000401375                 lea     rdi, cat_name   ; "irc_msg.cat"
.text:000000000040137C                 xor     esi, esi        ; flag
.text:000000000040137E                 call    _catopen
.text:0000000000401383                 lea     rdi, name       ; "LANG"
.text:000000000040138A                 lea     rsi, [rsp+168h+dest] ; value
.text:000000000040138E                 mov     edx, 1          ; replace
.text:0000000000401393                 mov     cs:message_catalog, rax
.text:000000000040139A                 mov     byte ptr [rbx], 2Eh ; '.'
.text:000000000040139D                 call    _setenv
.text:00000000004013A2
.text:00000000004013A2 loc_4013A2:                             ; CODE XREF: __libirc_print+1E4↑j
.text:00000000004013A2                                         ; __libirc_print+20B↑j
.text:00000000004013A2                 mov     rdi, cs:message_catalog
.text:00000000004013A9                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:00000000004013AD                 jnz     loc_401225
.text:00000000004013B3                 jmp     loc_401243
.text:00000000004013B8 ; ---------------------------------------------------------------------------
.text:00000000004013B8
.text:00000000004013B8 loc_4013B8:                             ; CODE XREF: __libirc_print+181↑j
.text:00000000004013B8                 mov     rax, cs:stderr_ptr
.text:00000000004013BF                 mov     rsi, rcx        ; format
.text:00000000004013C2                 mov     rdi, [rax]      ; stream
.text:00000000004013C5                 xor     eax, eax
.text:00000000004013C7                 call    _fprintf
.text:00000000004013CC                 mov     rax, cs:stderr_ptr
.text:00000000004013D3                 lea     rsi, aCaseDD+0Ch ; format
.text:00000000004013DA                 mov     rdi, [rax]      ; stream
.text:00000000004013DD                 xor     eax, eax
.text:00000000004013DF                 call    _fprintf
.text:00000000004013E4                 add     rsp, 148h
.text:00000000004013EB                 pop     rbx
.text:00000000004013EC                 pop     r15
.text:00000000004013EE                 pop     r14
.text:00000000004013F0                 pop     r13
.text:00000000004013F2                 retn
.text:00000000004013F3 ; ---------------------------------------------------------------------------
.text:00000000004013F3
.text:00000000004013F3 loc_4013F3:                             ; CODE XREF: __libirc_print+10F↑j
.text:00000000004013F3                 mov     rdi, cs:message_catalog
.text:00000000004013FA                 jmp     loc_401264
.text:00000000004013FA __libirc_print  endp
.text:00000000004013FA
.text:00000000004013FA ; ---------------------------------------------------------------------------
.text:00000000004013FF                 align 20h
.text:00000000004013FF ; } // starts at 401150
.text:0000000000401400
.text:0000000000401400 ; =============== S U B R O U T I N E =======================================
.text:0000000000401400
.text:0000000000401400
.text:0000000000401400                 public __intel_cpu_features_init_x
.text:0000000000401400 __intel_cpu_features_init_x proc near
.text:0000000000401400 ; __unwind {
.text:0000000000401400                 push    rax
.text:0000000000401401                 push    rdx
.text:0000000000401402                 push    rcx
.text:0000000000401403                 push    rsi
.text:0000000000401404                 push    rdi
.text:0000000000401405                 push    r8
.text:0000000000401407                 push    r9
.text:0000000000401409                 xor     edi, edi
.text:000000000040140B                 call    __intel_cpu_features_init_body
.text:0000000000401410                 pop     r9
.text:0000000000401412                 pop     r8
.text:0000000000401414                 pop     rdi
.text:0000000000401415                 pop     rsi
.text:0000000000401416                 pop     rcx
.text:0000000000401417                 pop     rdx
.text:0000000000401418                 pop     rax
.text:0000000000401419                 retn
.text:0000000000401419 __intel_cpu_features_init_x endp
.text:0000000000401419
.text:0000000000401419 ; ---------------------------------------------------------------------------
.text:000000000040141A                 align 20h
.text:000000000040141A ; } // starts at 401400
.text:0000000000401420
.text:0000000000401420 ; =============== S U B R O U T I N E =======================================
.text:0000000000401420
.text:0000000000401420
.text:0000000000401420                 public __intel_cpu_features_init
.text:0000000000401420 __intel_cpu_features_init proc near     ; CODE XREF: __intel_new_feature_proc_init+35F↑p
.text:0000000000401420 ; __unwind {
.text:0000000000401420                 push    rax
.text:0000000000401421                 push    rdx
.text:0000000000401422                 push    rcx
.text:0000000000401423                 push    rsi
.text:0000000000401424                 push    rdi
.text:0000000000401425                 push    r8
.text:0000000000401427                 push    r9
.text:0000000000401429                 mov     edi, 1
.text:000000000040142E                 call    __intel_cpu_features_init_body
.text:0000000000401433                 pop     r9
.text:0000000000401435                 pop     r8
.text:0000000000401437                 pop     rdi
.text:0000000000401438                 pop     rsi
.text:0000000000401439                 pop     rcx
.text:000000000040143A                 pop     rdx
.text:000000000040143B                 pop     rax
.text:000000000040143C                 retn
.text:000000000040143C __intel_cpu_features_init endp
.text:000000000040143C
.text:000000000040143C ; ---------------------------------------------------------------------------
.text:000000000040143D                 align 20h
.text:000000000040143D ; } // starts at 401420
.text:0000000000401440
.text:0000000000401440 ; =============== S U B R O U T I N E =======================================
.text:0000000000401440
.text:0000000000401440
.text:0000000000401440 __intel_cpu_features_init_body proc near
.text:0000000000401440                                         ; CODE XREF: __intel_cpu_features_init_x+B↑p
.text:0000000000401440                                         ; __intel_cpu_features_init+E↑p
.text:0000000000401440
.text:0000000000401440 var_18          = dword ptr -18h
.text:0000000000401440 var_14          = dword ptr -14h
.text:0000000000401440 var_10          = dword ptr -10h
.text:0000000000401440 var_C           = dword ptr -0Ch
.text:0000000000401440
.text:0000000000401440 ; __unwind {
.text:0000000000401440                 push    rbx
.text:0000000000401441                 mov     r11d, edi
.text:0000000000401444                 xor     eax, eax
.text:0000000000401446                 cpuid
.text:0000000000401448                 mov     [rsp+8+var_18], eax
.text:000000000040144C                 mov     [rsp+8+var_14], ebx
.text:0000000000401450                 mov     [rsp+8+var_10], ecx
.text:0000000000401454                 mov     [rsp+8+var_C], edx
.text:0000000000401458                 xor     sil, sil
.text:000000000040145B                 cmp     [rsp+8+var_18], 0
.text:0000000000401460                 jz      loc_40179F
.text:0000000000401466                 cmp     r11d, 1
.text:000000000040146A                 jz      loc_4017AC
.text:0000000000401470
.text:0000000000401470 loc_401470:                             ; CODE XREF: __intel_cpu_features_init_body+38A↓j
.text:0000000000401470                 mov     eax, 1
.text:0000000000401475                 cpuid
.text:0000000000401477                 mov     r8d, edx
.text:000000000040147A                 mov     r9d, eax
.text:000000000040147D                 and     r8d, 1
.text:0000000000401481                 mov     edi, ecx
.text:0000000000401483                 lea     r8, ds:1[r8*2]
.text:000000000040148B                 mov     rax, r8
.text:000000000040148E                 or      rax, 4
.text:0000000000401492                 test    edx, 8000h
.text:0000000000401498                 cmovnz  r8, rax
.text:000000000040149C                 mov     rcx, r8
.text:000000000040149F                 or      rcx, 8
.text:00000000004014A3                 test    edx, 800000h
.text:00000000004014A9                 cmovnz  r8, rcx
.text:00000000004014AD                 test    edx, 1000000h
.text:00000000004014B3                 jz      loc_4015A4
.text:00000000004014B9                 or      r8, 10h
.text:00000000004014BD                 mov     r10, r8
.text:00000000004014C0                 or      r10, 20h
.text:00000000004014C4                 test    edx, 2000000h
.text:00000000004014CA                 cmovnz  r8, r10
.text:00000000004014CE                 mov     rsi, r8
.text:00000000004014D1                 or      rsi, 40h
.text:00000000004014D5                 test    edx, 4000000h
.text:00000000004014DB                 cmovnz  r8, rsi
.text:00000000004014DF                 mov     r10, r8
.text:00000000004014E2                 or      r10, 80h
.text:00000000004014E9                 test    edi, 1
.text:00000000004014EF                 cmovnz  r8, r10
.text:00000000004014F3                 mov     rax, r8
.text:00000000004014F6                 or      rax, 100h
.text:00000000004014FC                 test    edi, 200h
.text:0000000000401502                 cmovnz  r8, rax
.text:0000000000401506                 mov     rbx, r8
.text:0000000000401509                 or      rbx, 800h
.text:0000000000401510                 test    edi, 400000h
.text:0000000000401516                 cmovnz  r8, rbx
.text:000000000040151A                 mov     rcx, r8
.text:000000000040151D                 or      rcx, 200h
.text:0000000000401524                 test    edi, 80000h
.text:000000000040152A                 cmovnz  r8, rcx
.text:000000000040152E                 mov     rdx, r8
.text:0000000000401531                 or      rdx, 400h
.text:0000000000401538                 test    edi, 100000h
.text:000000000040153E                 cmovnz  r8, rdx
.text:0000000000401542                 mov     r10, r8
.text:0000000000401545                 or      r10, 1000h
.text:000000000040154C                 test    edi, 800000h
.text:0000000000401552                 cmovnz  r8, r10
.text:0000000000401556                 mov     rsi, r8
.text:0000000000401559                 or      rsi, 2000h
.text:0000000000401560                 test    edi, 2
.text:0000000000401566                 cmovnz  r8, rsi
.text:000000000040156A                 mov     sil, 1
.text:000000000040156D                 mov     rax, r8
.text:0000000000401570                 or      rax, 4000h
.text:0000000000401576                 test    edi, 2000000h
.text:000000000040157C                 cmovnz  r8, rax
.text:0000000000401580                 mov     eax, 7
.text:0000000000401585                 xor     ecx, ecx
.text:0000000000401587                 cpuid
.text:0000000000401589                 mov     r10d, ebx
.text:000000000040158C                 mov     rbx, 800000000h
.text:0000000000401596                 or      rbx, r8
.text:0000000000401599                 test    r10d, 20000000h
.text:00000000004015A0                 cmovnz  r8, rbx
.text:00000000004015A4
.text:00000000004015A4 loc_4015A4:                             ; CODE XREF: __intel_cpu_features_init_body+73↑j
.text:00000000004015A4                 mov     rax, r8
.text:00000000004015A7                 or      rax, 20000h
.text:00000000004015AD                 test    edi, 40000000h
.text:00000000004015B3                 cmovnz  r8, rax
.text:00000000004015B7                 test    sil, sil
.text:00000000004015BA                 jnz     short loc_4015C8
.text:00000000004015BC                 mov     eax, 7
.text:00000000004015C1                 xor     ecx, ecx
.text:00000000004015C3                 cpuid
.text:00000000004015C5                 mov     r10d, ebx
.text:00000000004015C8
.text:00000000004015C8 loc_4015C8:                             ; CODE XREF: __intel_cpu_features_init_body+17A↑j
.text:00000000004015C8                 mov     esi, r10d
.text:00000000004015CB                 mov     rcx, r8
.text:00000000004015CE                 and     esi, 108h
.text:00000000004015D4                 or      rcx, 80000h
.text:00000000004015DB                 cmp     esi, 108h
.text:00000000004015E1                 cmovz   r8, rcx
.text:00000000004015E5                 mov     eax, 80000001h
.text:00000000004015EA                 cpuid
.text:00000000004015EC                 mov     rdx, r8
.text:00000000004015EF                 or      rdx, 100000h
.text:00000000004015F6                 test    cl, 20h
.text:00000000004015F9                 cmovnz  r8, rdx
.text:00000000004015FD                 mov     rcx, r8
.text:0000000000401600                 or      rcx, 200000h
.text:0000000000401607                 test    r10d, 10h
.text:000000000040160E                 cmovnz  r8, rcx
.text:0000000000401612                 mov     rbx, r8
.text:0000000000401615                 or      rbx, 400000h
.text:000000000040161C                 test    r10d, 800h
.text:0000000000401623                 cmovnz  r8, rbx
.text:0000000000401627                 mov     rsi, r8
.text:000000000040162A                 or      rsi, 10000000h
.text:0000000000401631                 test    r10d, 80000h
.text:0000000000401638                 cmovnz  r8, rsi
.text:000000000040163C                 mov     rax, r8
.text:000000000040163F                 or      rax, 20000000h
.text:0000000000401645                 test    r10d, 40000h
.text:000000000040164C                 cmovnz  r8, rax
.text:0000000000401650                 test    edi, 8000000h
.text:0000000000401656                 jz      loc_401756
.text:000000000040165C                 xor     ecx, ecx
.text:000000000040165E                 xgetbv
.text:0000000000401661                 or      r8, 1
.text:0000000000401665                 mov     edx, eax
.text:0000000000401667                 and     edx, 6
.text:000000000040166A                 cmp     edx, 6
.text:000000000040166D                 jnz     loc_401756
.text:0000000000401673                 mov     rdx, r8
.text:0000000000401676                 or      rdx, 10000h
.text:000000000040167D                 test    edi, 10000000h
.text:0000000000401683                 cmovnz  r8, rdx
.text:0000000000401687                 mov     rcx, r8
.text:000000000040168A                 or      rcx, 8000h
.text:0000000000401691                 test    edi, 20000000h
.text:0000000000401697                 cmovnz  r8, rcx
.text:000000000040169B                 mov     rbx, r8
.text:000000000040169E                 or      rbx, 800000h
.text:00000000004016A5                 test    r10d, 20h
.text:00000000004016AC                 cmovnz  r8, rbx
.text:00000000004016B0                 mov     rsi, r8
.text:00000000004016B3                 or      rsi, 40000h
.text:00000000004016BA                 test    edi, 1000h
.text:00000000004016C0                 mov     edi, eax
.text:00000000004016C2                 cmovnz  r8, rsi
.text:00000000004016C6                 and     edi, 18h
.text:00000000004016C9                 cmp     edi, 18h
.text:00000000004016CC                 jnz     short loc_4016EA
.text:00000000004016CE                 or      r8, 1
.text:00000000004016D2                 mov     rdx, 1000000000h
.text:00000000004016DC                 or      rdx, r8
.text:00000000004016DF                 test    r10d, 4000h
.text:00000000004016E6                 cmovnz  r8, rdx
.text:00000000004016EA
.text:00000000004016EA loc_4016EA:                             ; CODE XREF: __intel_cpu_features_init_body+28C↑j
.text:00000000004016EA                 and     eax, 0E0h
.text:00000000004016EF                 cmp     eax, 0E0h
.text:00000000004016F4                 jnz     short loc_401756
.text:00000000004016F6                 or      r8, 1
.text:00000000004016FA                 mov     rdx, 400000000h
.text:0000000000401704                 mov     rax, r8
.text:0000000000401707                 mov     rcx, 100000000h
.text:0000000000401711                 or      rax, 8000000h
.text:0000000000401717                 test    r10d, 10000h
.text:000000000040171E                 mov     rbx, 200000000h
.text:0000000000401728                 cmovnz  r8, rax
.text:000000000040172C                 or      rdx, r8
.text:000000000040172F                 test    r10d, 10000000h
.text:0000000000401736                 cmovnz  r8, rdx
.text:000000000040173A                 or      rcx, r8
.text:000000000040173D                 test    r10d, 8000000h
.text:0000000000401744                 cmovnz  r8, rcx
.text:0000000000401748                 or      rbx, r8
.text:000000000040174B                 test    r10d, 4000000h
.text:0000000000401752                 cmovnz  r8, rbx
.text:0000000000401756
.text:0000000000401756 loc_401756:                             ; CODE XREF: __intel_cpu_features_init_body+216↑j
.text:0000000000401756                                         ; __intel_cpu_features_init_body+22D↑j ...
.text:0000000000401756                 mov     eax, r9d
.text:0000000000401759                 shr     eax, 0Ch
.text:000000000040175C                 shr     r9d, 4
.text:0000000000401760                 and     eax, 0F0h
.text:0000000000401765                 and     r9d, 0Fh
.text:0000000000401769                 add     eax, r9d
.text:000000000040176C                 cmp     eax, 1Ch
.text:000000000040176F                 jz      short loc_40177B
.text:0000000000401771                 cmp     eax, 26h ; '&'
.text:0000000000401774                 jz      short loc_40177B
.text:0000000000401776                 cmp     eax, 27h ; '''
.text:0000000000401779                 jnz     short loc_401780
.text:000000000040177B
.text:000000000040177B loc_40177B:                             ; CODE XREF: __intel_cpu_features_init_body+32F↑j
.text:000000000040177B                                         ; __intel_cpu_features_init_body+334↑j
.text:000000000040177B                 bts     r8, 1Fh
.text:0000000000401780
.text:0000000000401780 loc_401780:                             ; CODE XREF: __intel_cpu_features_init_body+339↑j
.text:0000000000401780                 cmp     r11d, 1
.text:0000000000401784                 jz      short loc_40178F
.text:0000000000401786                 mov     cs:__intel_cpu_feature_indicator_x, r8
.text:000000000040178D                 pop     rbx
.text:000000000040178E                 retn
.text:000000000040178F ; ---------------------------------------------------------------------------
.text:000000000040178F
.text:000000000040178F loc_40178F:                             ; CODE XREF: __intel_cpu_features_init_body+344↑j
.text:000000000040178F                 mov     cs:__intel_cpu_feature_indicator, r8
.text:0000000000401796                 mov     cs:__intel_cpu_feature_indicator_x, r8
.text:000000000040179D                 pop     rbx
.text:000000000040179E                 retn
.text:000000000040179F ; ---------------------------------------------------------------------------
.text:000000000040179F
.text:000000000040179F loc_40179F:                             ; CODE XREF: __intel_cpu_features_init_body+20↑j
.text:000000000040179F                                         ; __intel_cpu_features_init_body+374↓j ...
.text:000000000040179F                 mov     cs:__intel_cpu_feature_indicator, 1
.text:00000000004017AA                 pop     rbx
.text:00000000004017AB                 retn
.text:00000000004017AC ; ---------------------------------------------------------------------------
.text:00000000004017AC
.text:00000000004017AC loc_4017AC:                             ; CODE XREF: __intel_cpu_features_init_body+2A↑j
.text:00000000004017AC                 cmp     [rsp+8+var_14], 756E6547h
.text:00000000004017B4                 jnz     short loc_40179F
.text:00000000004017B6                 cmp     [rsp+8+var_C], 49656E69h
.text:00000000004017BE                 jnz     short loc_40179F
.text:00000000004017C0                 cmp     [rsp+8+var_10], 6C65746Eh
.text:00000000004017C8                 jnz     short loc_40179F
.text:00000000004017CA                 jmp     loc_401470
.text:00000000004017CA __intel_cpu_features_init_body endp
.text:00000000004017CA
.text:00000000004017CA ; ---------------------------------------------------------------------------
.text:00000000004017CF                 align 10h
.text:00000000004017CF ; } // starts at 401440
.text:00000000004017D0
.text:00000000004017D0 ; =============== S U B R O U T I N E =======================================
.text:00000000004017D0
.text:00000000004017D0
.text:00000000004017D0                 public __intel_proc_init_ftzdazule
.text:00000000004017D0 __intel_proc_init_ftzdazule proc near   ; CODE XREF: __intel_new_feature_proc_init+2D2↑p
.text:00000000004017D0
.text:00000000004017D0 s               = dword ptr -218h
.text:00000000004017D0 var_1FC         = dword ptr -1FCh
.text:00000000004017D0
.text:00000000004017D0 ; __unwind {
.text:00000000004017D0                 push    r15
.text:00000000004017D2                 push    rbx
.text:00000000004017D3                 push    rbp
.text:00000000004017D4                 sub     rsp, 200h
.text:00000000004017DB                 mov     ebx, esi
.text:00000000004017DD                 mov     ebp, ebx
.text:00000000004017DF                 mov     r15d, ebx
.text:00000000004017E2                 and     ebp, 4
.text:00000000004017E5                 and     r15d, 2
.text:00000000004017E9                 jz      short loc_4017F3
.text:00000000004017EB                 test    edi, 2
.text:00000000004017F1                 jz      short loc_4017FF
.text:00000000004017F3
.text:00000000004017F3 loc_4017F3:                             ; CODE XREF: __intel_proc_init_ftzdazule+19↑j
.text:00000000004017F3                 test    ebp, ebp
.text:00000000004017F5                 jz      short loc_401827
.text:00000000004017F7                 test    edi, 4
.text:00000000004017FD                 jnz     short loc_401827
.text:00000000004017FF
.text:00000000004017FF loc_4017FF:                             ; CODE XREF: __intel_proc_init_ftzdazule+21↑j
.text:00000000004017FF                 xor     esi, esi        ; c
.text:0000000000401801                 lea     rdi, [rsp+218h+s] ; s
.text:0000000000401805                 mov     edx, 200h       ; n
.text:000000000040180A                 call    _memset
.text:000000000040180F                 fxsave  [rsp+218h+s]
.text:0000000000401813                 xor     edx, edx
.text:0000000000401815                 mov     eax, [rsp+218h+var_1FC]
.text:0000000000401819                 test    al, 40h
.text:000000000040181B                 cmovz   r15d, edx
.text:000000000040181F                 test    eax, 20000h
.text:0000000000401824                 cmovz   ebp, edx
.text:0000000000401827
.text:0000000000401827 loc_401827:                             ; CODE XREF: __intel_proc_init_ftzdazule+25↑j
.text:0000000000401827                                         ; __intel_proc_init_ftzdazule+2D↑j
.text:0000000000401827                 test    bl, 1
.text:000000000040182A                 jnz     short loc_401865
.text:000000000040182C
.text:000000000040182C loc_40182C:                             ; CODE XREF: __intel_proc_init_ftzdazule+A8↓j
.text:000000000040182C                 test    r15d, r15d
.text:000000000040182F                 jz      short loc_401842
.text:0000000000401831                 stmxcsr [rsp+218h+s]
.text:0000000000401835                 mov     eax, [rsp+218h+s]
.text:0000000000401838                 or      eax, 40h
.text:000000000040183B                 mov     [rsp+218h+s], eax
.text:000000000040183E                 ldmxcsr [rsp+218h+s]
.text:0000000000401842
.text:0000000000401842 loc_401842:                             ; CODE XREF: __intel_proc_init_ftzdazule+5F↑j
.text:0000000000401842                 test    ebp, ebp
.text:0000000000401844                 jz      short loc_401859
.text:0000000000401846                 stmxcsr [rsp+218h+s]
.text:000000000040184A                 mov     eax, [rsp+218h+s]
.text:000000000040184D                 or      eax, 20000h
.text:0000000000401852                 mov     [rsp+218h+s], eax
.text:0000000000401855                 ldmxcsr [rsp+218h+s]
.text:0000000000401859
.text:0000000000401859 loc_401859:                             ; CODE XREF: __intel_proc_init_ftzdazule+74↑j
.text:0000000000401859                 add     rsp, 200h
.text:0000000000401860                 pop     rbp
.text:0000000000401861                 pop     rbx
.text:0000000000401862                 pop     r15
.text:0000000000401864                 retn
.text:0000000000401865 ; ---------------------------------------------------------------------------
.text:0000000000401865
.text:0000000000401865 loc_401865:                             ; CODE XREF: __intel_proc_init_ftzdazule+5A↑j
.text:0000000000401865                 stmxcsr [rsp+218h+s]
.text:0000000000401869                 mov     eax, [rsp+218h+s]
.text:000000000040186C                 or      eax, 8000h
.text:0000000000401871                 mov     [rsp+218h+s], eax
.text:0000000000401874                 ldmxcsr [rsp+218h+s]
.text:0000000000401878                 jmp     short loc_40182C
.text:0000000000401878 __intel_proc_init_ftzdazule endp
.text:0000000000401878
.text:0000000000401878 ; ---------------------------------------------------------------------------
.text:000000000040187A                 align 20h
.text:000000000040187A ; } // starts at 4017D0
.text:0000000000401880
.text:0000000000401880 ; =============== S U B R O U T I N E =======================================
.text:0000000000401880
.text:0000000000401880
.text:0000000000401880 ; void _libc_csu_init(void)
.text:0000000000401880                 public __libc_csu_init
.text:0000000000401880 __libc_csu_init proc near               ; DATA XREF: _start+16↑o
.text:0000000000401880
.text:0000000000401880 var_30          = qword ptr -30h
.text:0000000000401880 var_28          = qword ptr -28h
.text:0000000000401880 var_20          = qword ptr -20h
.text:0000000000401880 var_18          = qword ptr -18h
.text:0000000000401880 var_10          = qword ptr -10h
.text:0000000000401880 var_8           = qword ptr -8
.text:0000000000401880
.text:0000000000401880 ; __unwind {
.text:0000000000401880                 mov     [rsp+var_28], rbp
.text:0000000000401885                 mov     [rsp+var_20], r12
.text:000000000040188A                 lea     rbp, cs:602B94h
.text:0000000000401891                 lea     r12, cs:602B94h
.text:0000000000401898                 mov     [rsp+var_18], r13
.text:000000000040189D                 mov     [rsp+var_10], r14
.text:00000000004018A2                 mov     [rsp+var_8], r15
.text:00000000004018A7                 mov     [rsp+var_30], rbx
.text:00000000004018AC                 sub     rsp, 38h
.text:00000000004018B0                 sub     rbp, r12
.text:00000000004018B3                 mov     r13d, edi
.text:00000000004018B6                 mov     r14, rsi
.text:00000000004018B9                 sar     rbp, 3
.text:00000000004018BD                 mov     r15, rdx
.text:00000000004018C0                 call    _init_proc
.text:00000000004018C5                 test    rbp, rbp
.text:00000000004018C8                 jz      short loc_4018E6
.text:00000000004018CA                 xor     ebx, ebx
.text:00000000004018CC                 nop     dword ptr [rax+00h]
.text:00000000004018D0
.text:00000000004018D0 loc_4018D0:                             ; CODE XREF: __libc_csu_init+64↓j
.text:00000000004018D0                 mov     rdx, r15
.text:00000000004018D3                 mov     rsi, r14
.text:00000000004018D6                 mov     edi, r13d
.text:00000000004018D9                 call    qword ptr [r12+rbx*8]
.text:00000000004018DD                 add     rbx, 1
.text:00000000004018E1                 cmp     rbx, rbp
.text:00000000004018E4                 jnz     short loc_4018D0
.text:00000000004018E6
.text:00000000004018E6 loc_4018E6:                             ; CODE XREF: __libc_csu_init+48↑j
.text:00000000004018E6                 mov     rbx, [rsp+38h+var_30]
.text:00000000004018EB                 mov     rbp, [rsp+38h+var_28]
.text:00000000004018F0                 mov     r12, [rsp+38h+var_20]
.text:00000000004018F5                 mov     r13, [rsp+38h+var_18]
.text:00000000004018FA                 mov     r14, [rsp+38h+var_10]
.text:00000000004018FF                 mov     r15, [rsp+38h+var_8]
.text:0000000000401904                 add     rsp, 38h
.text:0000000000401908                 retn
.text:0000000000401908 ; } // starts at 401880
.text:0000000000401908 __libc_csu_init endp
.text:0000000000401908
.text:0000000000401908 ; ---------------------------------------------------------------------------
.text:0000000000401909                 align 10h
.text:0000000000401910
.text:0000000000401910 ; =============== S U B R O U T I N E =======================================
.text:0000000000401910
.text:0000000000401910
.text:0000000000401910 ; void _libc_csu_fini(void)
.text:0000000000401910                 public __libc_csu_fini
.text:0000000000401910 __libc_csu_fini proc near               ; DATA XREF: _start+F↑o
.text:0000000000401910 ; __unwind {
.text:0000000000401910                 rep retn
.text:0000000000401910 ; } // starts at 401910
.text:0000000000401910 __libc_csu_fini endp
.text:0000000000401910
.text:0000000000401910 ; ---------------------------------------------------------------------------
.text:0000000000401912                 align 20h
.text:0000000000401920
.text:0000000000401920 ; =============== S U B R O U T I N E =======================================
.text:0000000000401920
.text:0000000000401920 ; Attributes: bp-based frame
.text:0000000000401920
.text:0000000000401920 __do_global_ctors_aux proc near         ; CODE XREF: _init_proc+E↑p
.text:0000000000401920                 push    rbp
.text:0000000000401921                 mov     rbp, rsp
.text:0000000000401924                 push    rbx
.text:0000000000401925                 sub     rsp, 8
.text:0000000000401929                 mov     rax, cs:__CTOR_LIST__
.text:0000000000401930                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000401934                 jz      short loc_40194F
.text:0000000000401936                 mov     ebx, offset __CTOR_LIST__
.text:000000000040193B                 nop     dword ptr [rax+rax+00h]
.text:0000000000401940
.text:0000000000401940 loc_401940:                             ; CODE XREF: __do_global_ctors_aux+2D↓j
.text:0000000000401940                 sub     rbx, 8
.text:0000000000401944                 call    rax ; __CTOR_LIST__
.text:0000000000401946                 mov     rax, [rbx]
.text:0000000000401949                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000040194D                 jnz     short loc_401940
.text:000000000040194F
.text:000000000040194F loc_40194F:                             ; CODE XREF: __do_global_ctors_aux+14↑j
.text:000000000040194F                 add     rsp, 8
.text:0000000000401953                 pop     rbx
.text:0000000000401954                 pop     rbp
.text:0000000000401955                 retn
.text:0000000000401955 __do_global_ctors_aux endp
.text:0000000000401955
.text:0000000000401955 ; ---------------------------------------------------------------------------
.text:0000000000401956                 align 8
.text:0000000000401956 _text           ends
.text:0000000000401956