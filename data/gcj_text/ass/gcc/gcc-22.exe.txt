.text:00401110 ; =============== S U B R O U T I N E =======================================
.text:00401110
.text:00401110
.text:00401110 ; LONG __stdcall _gnu_exception_handler(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401110 __gnu_exception_handler@4 proc near     ; DATA XREF: ___mingw_CRTStartup:loc_401029↑o
.text:00401110
.text:00401110 var_2C          = dword ptr -2Ch
.text:00401110 var_28          = dword ptr -28h
.text:00401110 var_10          = dword ptr -10h
.text:00401110 ExceptionInfo   = dword ptr  4
.text:00401110
.text:00401110 ; __unwind {
.text:00401110                 push    ebx
.text:00401111                 sub     esp, 28h
.text:00401114                 mov     eax, [esp+2Ch+ExceptionInfo]
.text:00401118                 mov     eax, [eax]
.text:0040111A                 mov     eax, [eax]
.text:0040111C                 cmp     eax, 0C0000091h
.text:00401121                 ja      short loc_401160
.text:00401123                 cmp     eax, 0C000008Dh
.text:00401128                 jb      short loc_401177
.text:0040112A
.text:0040112A loc_40112A:                             ; CODE XREF: _gnu_exception_handler(x)+65↓j
.text:0040112A                 mov     ebx, 1
.text:0040112F
.text:0040112F loc_40112F:                             ; CODE XREF: _gnu_exception_handler(x)+A4↓j
.text:0040112F                 mov     [esp+2Ch+var_28], 0 ; void (__cdecl *)(int)
.text:00401137                 mov     [esp+2Ch+var_2C], 8 ; int
.text:0040113E                 call    _signal
.text:00401143                 cmp     eax, 1
.text:00401146                 jz      loc_401240
.text:0040114C                 test    eax, eax
.text:0040114E                 jnz     loc_4011F4
.text:00401154
.text:00401154 loc_401154:                             ; CODE XREF: _gnu_exception_handler(x)+63↓j
.text:00401154                                         ; _gnu_exception_handler(x)+73↓j ...
.text:00401154                 xor     eax, eax
.text:00401156
.text:00401156 loc_401156:                             ; CODE XREF: _gnu_exception_handler(x)+A0↓j
.text:00401156                                         ; _gnu_exception_handler(x)+DF↓j ...
.text:00401156                 add     esp, 28h
.text:00401159                 pop     ebx
.text:0040115A                 retn    4
.text:0040115A ; ---------------------------------------------------------------------------
.text:0040115D                 align 10h
.text:00401160
.text:00401160 loc_401160:                             ; CODE XREF: _gnu_exception_handler(x)+11↑j
.text:00401160                 cmp     eax, 0C0000094h
.text:00401165                 jz      short loc_4011B2
.text:00401167                 cmp     eax, 0C0000096h
.text:0040116C                 jz      short loc_401185
.text:0040116E                 cmp     eax, 0C0000093h
.text:00401173                 jnz     short loc_401154
.text:00401175                 jmp     short loc_40112A
.text:00401177 ; ---------------------------------------------------------------------------
.text:00401177
.text:00401177 loc_401177:                             ; CODE XREF: _gnu_exception_handler(x)+18↑j
.text:00401177                 cmp     eax, 0C0000005h
.text:0040117C                 jz      short loc_4011C0
.text:0040117E                 cmp     eax, 0C000001Dh
.text:00401183                 jnz     short loc_401154
.text:00401185
.text:00401185 loc_401185:                             ; CODE XREF: _gnu_exception_handler(x)+5C↑j
.text:00401185                 mov     [esp+2Ch+var_28], 0 ; void (__cdecl *)(int)
.text:0040118D                 mov     [esp+2Ch+var_2C], 4 ; int
.text:00401194                 call    _signal
.text:00401199                 cmp     eax, 1
.text:0040119C                 jz      short loc_401207
.text:0040119E                 test    eax, eax
.text:004011A0                 jz      short loc_401154
.text:004011A2                 mov     [esp+2Ch+var_2C], 4
.text:004011A9                 call    eax
.text:004011AB                 mov     eax, 0FFFFFFFFh
.text:004011B0                 jmp     short loc_401156
.text:004011B2 ; ---------------------------------------------------------------------------
.text:004011B2
.text:004011B2 loc_4011B2:                             ; CODE XREF: _gnu_exception_handler(x)+55↑j
.text:004011B2                 xor     ebx, ebx
.text:004011B4                 jmp     loc_40112F
.text:004011B4 ; ---------------------------------------------------------------------------
.text:004011B9                 align 10h
.text:004011C0
.text:004011C0 loc_4011C0:                             ; CODE XREF: _gnu_exception_handler(x)+6C↑j
.text:004011C0                 mov     [esp+2Ch+var_28], 0 ; void (__cdecl *)(int)
.text:004011C8                 mov     [esp+2Ch+var_2C], 0Bh ; int
.text:004011CF                 call    _signal
.text:004011D4                 cmp     eax, 1
.text:004011D7                 jz      short loc_401223
.text:004011D9                 test    eax, eax
.text:004011DB                 jz      loc_401154
.text:004011E1                 mov     [esp+2Ch+var_2C], 0Bh
.text:004011E8                 call    eax
.text:004011EA                 mov     eax, 0FFFFFFFFh
.text:004011EF                 jmp     loc_401156
.text:004011F4 ; ---------------------------------------------------------------------------
.text:004011F4
.text:004011F4 loc_4011F4:                             ; CODE XREF: _gnu_exception_handler(x)+3E↑j
.text:004011F4                 mov     [esp+2Ch+var_2C], 8
.text:004011FB                 call    eax
.text:004011FD                 mov     eax, 0FFFFFFFFh
.text:00401202                 jmp     loc_401156
.text:00401207 ; ---------------------------------------------------------------------------
.text:00401207
.text:00401207 loc_401207:                             ; CODE XREF: _gnu_exception_handler(x)+8C↑j
.text:00401207                 mov     [esp+2Ch+var_28], 1 ; void (__cdecl *)(int)
.text:0040120F                 mov     [esp+2Ch+var_2C], 4 ; int
.text:00401216                 call    _signal
.text:0040121B                 or      eax, 0FFFFFFFFh
.text:0040121E                 jmp     loc_401156
.text:00401223 ; ---------------------------------------------------------------------------
.text:00401223
.text:00401223 loc_401223:                             ; CODE XREF: _gnu_exception_handler(x)+C7↑j
.text:00401223                 mov     [esp+2Ch+var_28], 1 ; void (__cdecl *)(int)
.text:0040122B                 mov     [esp+2Ch+var_2C], 0Bh ; int
.text:00401232                 call    _signal
.text:00401237                 or      eax, 0FFFFFFFFh
.text:0040123A                 jmp     loc_401156
.text:0040123A ; ---------------------------------------------------------------------------
.text:0040123F                 align 10h
.text:00401240
.text:00401240 loc_401240:                             ; CODE XREF: _gnu_exception_handler(x)+36↑j
.text:00401240                 mov     [esp+2Ch+var_28], 1 ; void (__cdecl *)(int)
.text:00401248                 mov     [esp+2Ch+var_2C], 8 ; int
.text:0040124F                 call    _signal
.text:00401254                 test    ebx, ebx
.text:00401256                 mov     eax, 0FFFFFFFFh
.text:0040125B                 jz      loc_401156
.text:00401261                 mov     [esp+2Ch+var_10], eax
.text:00401265                 call    _fpreset
.text:0040126A                 mov     eax, [esp+2Ch+var_10]
.text:0040126E                 jmp     loc_401156
.text:0040126E ; } // starts at 401110
.text:0040126E __gnu_exception_handler@4 endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; [00000015 BYTES: COLLAPSED FUNCTION _mainCRTStartup. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401295                 align 10h
.text:004012A0
.text:004012A0 ; =============== S U B R O U T I N E =======================================
.text:004012A0
.text:004012A0 ; Attributes: noreturn
.text:004012A0
.text:004012A0                 public _WinMainCRTStartup
.text:004012A0 _WinMainCRTStartup proc near
.text:004012A0
.text:004012A0 var_1C          = dword ptr -1Ch
.text:004012A0
.text:004012A0 ; __unwind {
.text:004012A0                 sub     esp, 1Ch
.text:004012A3                 mov     [esp+1Ch+var_1C], 2
.text:004012AA                 call    ds:__imp____set_app_type
.text:004012B0                 call    ___mingw_CRTStartup
.text:004012B0 ; } // starts at 4012A0
.text:004012B0 _WinMainCRTStartup endp
.text:004012B0
.text:004012B0 ; ---------------------------------------------------------------------------
.text:004012B5                 align 10h
.text:004012C0
.text:004012C0 ; =============== S U B R O U T I N E =======================================
.text:004012C0
.text:004012C0
.text:004012C0 ; int __cdecl atexit(void (__cdecl *)())
.text:004012C0                 public _atexit
.text:004012C0 _atexit         proc near               ; CODE XREF: std::future_category(void)+4A↓p
.text:004012C0                                         ; ___do_global_ctors+29↓p ...
.text:004012C0 ; __unwind {
.text:004012C0                 mov     eax, ds:__imp__atexit
.text:004012C5                 jmp     eax
.text:004012C5 ; } // starts at 4012C0
.text:004012C5 _atexit         endp
.text:004012C5
.text:004012C5 ; ---------------------------------------------------------------------------
.text:004012C7                 align 10h
.text:004012D0
.text:004012D0 ; =============== S U B R O U T I N E =======================================
.text:004012D0
.text:004012D0
.text:004012D0 ; _onexit_t __cdecl _onexit(_onexit_t)
.text:004012D0                 public __onexit
.text:004012D0 __onexit        proc near
.text:004012D0 ; __unwind {
.text:004012D0                 mov     eax, ds:__imp___onexit
.text:004012D5                 jmp     eax
.text:004012D5 ; } // starts at 4012D0
.text:004012D5 __onexit        endp
.text:004012D5
.text:004012D5 ; ---------------------------------------------------------------------------
.text:004012D7                 align 10h
.text:004012E0
.text:004012E0 ; =============== S U B R O U T I N E =======================================
.text:004012E0
.text:004012E0
.text:004012E0                 public ___gcc_register_frame
.text:004012E0 ___gcc_register_frame proc near         ; CODE XREF: _register_frame_ctor+6↓p
.text:004012E0
.text:004012E0 lpModuleName    = dword ptr -1Ch
.text:004012E0 lpProcName      = dword ptr -18h
.text:004012E0
.text:004012E0                 mov     ecx, ___JCR_END__
.text:004012E6                 test    ecx, ecx
.text:004012E8                 jz      short locret_401322
.text:004012EA                 push    ebp
.text:004012EB                 mov     ebp, esp
.text:004012ED                 sub     esp, 18h
.text:004012F0                 mov     [esp+1Ch+lpModuleName], offset ModuleName ; "libgcj-13.dll"
.text:004012F7                 call    _GetModuleHandleA@4 ; GetModuleHandleA(x)
.text:004012FC                 push    edx
.text:004012FD                 test    eax, eax
.text:004012FF                 jz      short loc_401324
.text:00401301                 mov     [esp+1Ch+lpProcName], offset ProcName ; "_Jv_RegisterClasses"
.text:00401309                 mov     [esp+1Ch+lpModuleName], eax ; hModule
.text:0040130C                 call    _GetProcAddress@8 ; GetProcAddress(x,x)
.text:00401311                 sub     esp, 8
.text:00401314
.text:00401314 loc_401314:                             ; CODE XREF: ___gcc_register_frame+49↓j
.text:00401314                 test    eax, eax
.text:00401316                 jz      short locret_401321
.text:00401318                 mov     [esp+1Ch+lpModuleName], offset ___JCR_END__
.text:0040131F                 call    eax
.text:00401321
.text:00401321 locret_401321:                          ; CODE XREF: ___gcc_register_frame+36↑j
.text:00401321                 leave
.text:00401322
.text:00401322 locret_401322:                          ; CODE XREF: ___gcc_register_frame+8↑j
.text:00401322                 retn
.text:00401322 ; ---------------------------------------------------------------------------
.text:00401323                 align 4
.text:00401324
.text:00401324 loc_401324:                             ; CODE XREF: ___gcc_register_frame+1F↑j
.text:00401324                 mov     eax, 0
.text:00401329                 jmp     short loc_401314
.text:00401329 ___gcc_register_frame endp
.text:00401329
.text:00401329 ; ---------------------------------------------------------------------------
.text:0040132B                 align 4
.text:0040132C
.text:0040132C ; =============== S U B R O U T I N E =======================================
.text:0040132C
.text:0040132C ; Attributes: bp-based frame
.text:0040132C
.text:0040132C ; void __cdecl __gcc_deregister_frame()
.text:0040132C                 public ___gcc_deregister_frame
.text:0040132C ___gcc_deregister_frame proc near       ; DATA XREF: _register_frame_ctor+B↓o
.text:0040132C                 push    ebp
.text:0040132D                 mov     ebp, esp
.text:0040132F                 pop     ebp
.text:00401330                 retn
.text:00401330 ___gcc_deregister_frame endp
.text:00401330
.text:00401330 ; ---------------------------------------------------------------------------
.text:00401331                 align 4
.text:00401334
.text:00401334 ; =============== S U B R O U T I N E =======================================
.text:00401334
.text:00401334 ; Attributes: bp-based frame fuzzy-sp
.text:00401334
.text:00401334 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00401334                 public _main
.text:00401334 _main           proc near               ; CODE XREF: ___mingw_CRTStartup+F8↑p
.text:00401334
.text:00401334 lpuexcpt        = dword ptr -98h
.text:00401334 var_94          = dword ptr -94h
.text:00401334 var_8E          = byte ptr -8Eh
.text:00401334 var_8D          = byte ptr -8Dh
.text:00401334 fctx            = SjLj_Function_Context ptr -8Ch
.text:00401334 var_58          = byte ptr -58h
.text:00401334 var_40          = dword ptr -40h
.text:00401334 var_3C          = dword ptr -3Ch
.text:00401334 var_38          = dword ptr -38h
.text:00401334 var_34          = dword ptr -34h
.text:00401334 var_30          = dword ptr -30h
.text:00401334 var_2C          = dword ptr -2Ch
.text:00401334 var_28          = dword ptr -28h
.text:00401334 var_24          = dword ptr -24h
.text:00401334 var_20          = dword ptr -20h
.text:00401334 var_1C          = dword ptr -1Ch
.text:00401334 var_18          = byte ptr -18h
.text:00401334 argc            = dword ptr  8
.text:00401334 argv            = dword ptr  0Ch
.text:00401334 envp            = dword ptr  10h
.text:00401334
.text:00401334                 lea     ecx, [esp+4]
.text:00401338                 and     esp, 0FFFFFFF0h
.text:0040133B                 push    dword ptr [ecx-4]
.text:0040133E                 push    ebp
.text:0040133F                 mov     ebp, esp
.text:00401341                 push    edi
.text:00401342                 push    esi
.text:00401343                 push    ebx
.text:00401344                 push    ecx
.text:00401345                 sub     esp, 98h
.text:0040134B                 mov     [ebp+fctx.personality], offset ___gxx_personality_sj0
.text:00401352                 mov     [ebp+fctx.lsda], offset dword_412224
.text:00401359                 lea     eax, [ebp+fctx.jbuf]
.text:0040135C                 lea     edx, [ebp+var_18]
.text:0040135F                 mov     [eax], edx
.text:00401361                 mov     edx, offset loc_401605
.text:00401366                 mov     [eax+4], edx
.text:00401369                 mov     [eax+8], esp
.text:0040136C                 lea     eax, [ebp+fctx]
.text:00401372                 mov     [esp], eax      ; lpfctx
.text:00401375                 call    __Unwind_SjLj_Register
.text:0040137A                 call    ___main
.text:0040137F                 lea     eax, [ebp+var_3C]
.text:00401382                 mov     [esp+4], eax
.text:00401386                 mov     dword ptr [esp], offset aD ; " %d "
.text:0040138D                 call    _scanf
.text:00401392                 mov     [ebp+var_1C], 1
.text:00401399                 jmp     loc_4015AD
.text:0040139E ; ---------------------------------------------------------------------------
.text:0040139E
.text:0040139E loc_40139E:                             ; CODE XREF: _main+284↓j
.text:0040139E                 mov     dword ptr [esp+8], offset _b
.text:004013A6                 mov     dword ptr [esp+4], offset _a
.text:004013AE                 mov     dword ptr [esp], offset aDD ; " %d %d"
.text:004013B5                 call    _scanf
.text:004013BA                 mov     [ebp+var_28], 0
.text:004013C1                 mov     eax, ds:_a
.text:004013C6                 mov     [ebp+var_40], eax
.text:004013C9                 jmp     short loc_4013EB
.text:004013CB ; ---------------------------------------------------------------------------
.text:004013CB
.text:004013CB loc_4013CB:                             ; CODE XREF: _main+C1↓j
.text:004013CB                 inc     [ebp+var_28]
.text:004013CE                 mov     ecx, [ebp+var_40]
.text:004013D1                 mov     edx, 66666667h
.text:004013D6                 mov     eax, ecx
.text:004013D8                 imul    edx
.text:004013DA                 sar     edx, 2
.text:004013DD                 mov     eax, ecx
.text:004013DF                 sar     eax, 1Fh
.text:004013E2                 mov     ecx, edx
.text:004013E4                 sub     ecx, eax
.text:004013E6                 mov     eax, ecx
.text:004013E8                 mov     [ebp+var_40], eax
.text:004013EB
.text:004013EB loc_4013EB:                             ; CODE XREF: _main+95↑j
.text:004013EB                 mov     eax, [ebp+var_40]
.text:004013EE                 test    eax, eax
.text:004013F0                 setnle  al
.text:004013F3                 test    al, al
.text:004013F5                 jnz     short loc_4013CB
.text:004013F7                 mov     [ebp+var_2C], 1
.text:004013FE                 mov     [ebp+var_24], 1
.text:00401405                 jmp     short loc_401419
.text:00401407 ; ---------------------------------------------------------------------------
.text:00401407
.text:00401407 loc_401407:                             ; CODE XREF: _main+F0↓j
.text:00401407                 mov     edx, [ebp+var_2C]
.text:0040140A                 mov     eax, edx
.text:0040140C                 shl     eax, 2
.text:0040140F                 add     eax, edx
.text:00401411                 shl     eax, 1
.text:00401413                 mov     [ebp+var_2C], eax
.text:00401416                 inc     [ebp+var_24]
.text:00401419
.text:00401419 loc_401419:                             ; CODE XREF: _main+D1↑j
.text:00401419                 mov     eax, [ebp+var_24]
.text:0040141C                 cmp     eax, [ebp+var_28]
.text:0040141F                 setl    al
.text:00401422                 test    al, al
.text:00401424                 jnz     short loc_401407
.text:00401426                 mov     [ebp+var_30], 0
.text:0040142D                 mov     eax, ds:_a
.text:00401432                 mov     [ebp+var_20], eax
.text:00401435                 jmp     loc_40157D
.text:0040143A ; ---------------------------------------------------------------------------
.text:0040143A
.text:0040143A loc_40143A:                             ; CODE XREF: _main+256↓j
.text:0040143A                 mov     eax, [ebp+var_20]
.text:0040143D                 mov     [ebp+var_40], eax
.text:00401440                 lea     eax, [ebp+var_58]
.text:00401443                 mov     [ebp+fctx.call_site], 1
.text:0040144D                 mov     ecx, eax
.text:0040144F                 call    __ZNSt3setIiSt4lessIiESaIiEEC1Ev ; std::set<int,std::less<int>,std::allocator<int>>::set(void)
.text:00401454                 mov     [ebp+var_24], 0
.text:0040145B                 jmp     loc_401555
.text:00401460 ; ---------------------------------------------------------------------------
.text:00401460
.text:00401460 loc_401460:                             ; CODE XREF: _main+22C↓j
.text:00401460                 mov     ecx, [ebp+var_40]
.text:00401463                 mov     edx, 66666667h
.text:00401468                 mov     eax, ecx
.text:0040146A                 imul    edx
.text:0040146C                 sar     edx, 2
.text:0040146F                 mov     eax, ecx
.text:00401471                 sar     eax, 1Fh
.text:00401474                 mov     ebx, edx
.text:00401476                 sub     ebx, eax
.text:00401478                 mov     ecx, [ebp+var_40]
.text:0040147B                 mov     edx, 66666667h
.text:00401480                 mov     eax, ecx
.text:00401482                 imul    edx
.text:00401484                 sar     edx, 2
.text:00401487                 mov     eax, ecx
.text:00401489                 sar     eax, 1Fh
.text:0040148C                 sub     edx, eax
.text:0040148E                 mov     eax, edx
.text:00401490                 shl     eax, 2
.text:00401493                 add     eax, edx
.text:00401495                 shl     eax, 1
.text:00401497                 mov     edx, ecx
.text:00401499                 sub     edx, eax
.text:0040149B                 mov     eax, edx
.text:0040149D                 imul    eax, [ebp+var_2C]
.text:004014A1                 add     eax, ebx
.text:004014A3                 mov     [ebp+var_40], eax
.text:004014A6                 mov     [ebp+var_8D], 0
.text:004014AD                 mov     [ebp+var_8E], 0
.text:004014B4                 mov     eax, [ebp+var_40]
.text:004014B7                 cmp     [ebp+var_20], eax
.text:004014BA                 jge     short loc_40151E
.text:004014BC                 mov     edx, [ebp+var_40]
.text:004014BF                 mov     eax, ds:_b
.text:004014C4                 cmp     edx, eax
.text:004014C6                 jg      short loc_40151E
.text:004014C8                 lea     eax, [ebp+var_58]
.text:004014CB                 mov     [ebp+fctx.call_site], 2
.text:004014D5                 mov     ecx, eax
.text:004014D7                 call    __ZNKSt3setIiSt4lessIiESaIiEE3endEv ; std::set<int,std::less<int>,std::allocator<int>>::end(void)
.text:004014DC                 mov     [ebp+var_38], eax
.text:004014DF                 mov     [ebp+var_8D], 1
.text:004014E6                 lea     eax, [ebp+var_58]
.text:004014E9                 lea     edx, [ebp+var_40]
.text:004014EC                 mov     [esp], edx
.text:004014EF                 mov     ecx, eax
.text:004014F1                 call    __ZNSt3setIiSt4lessIiESaIiEE4findERKi ; std::set<int,std::less<int>,std::allocator<int>>::find(int const&)
.text:004014F6                 sub     esp, 4
.text:004014F9                 mov     [ebp+var_34], eax
.text:004014FC                 mov     [ebp+var_8E], 1
.text:00401503                 lea     eax, [ebp+var_34]
.text:00401506                 lea     edx, [ebp+var_38]
.text:00401509                 mov     [esp], edx
.text:0040150C                 mov     ecx, eax
.text:0040150E                 call    __ZNKSt23_Rb_tree_const_iteratorIiEeqERKS0_ ; std::_Rb_tree_const_iterator<int>::operator==(std::_Rb_tree_const_iterator<int> const&)
.text:00401513                 sub     esp, 4
.text:00401516                 test    al, al
.text:00401518                 jz      short loc_40151E
.text:0040151A                 mov     al, 1
.text:0040151C                 jmp     short loc_401520
.text:0040151E ; ---------------------------------------------------------------------------
.text:0040151E
.text:0040151E loc_40151E:                             ; CODE XREF: _main+186↑j
.text:0040151E                                         ; _main+192↑j ...
.text:0040151E                 mov     al, 0
.text:00401520
.text:00401520 loc_401520:                             ; CODE XREF: _main+1E8↑j
.text:00401520                 cmp     [ebp+var_8E], 0
.text:00401527                 cmp     [ebp+var_8D], 0
.text:0040152E                 test    al, al
.text:00401530                 jz      short loc_401552
.text:00401532                 lea     eax, [ebp+var_58]
.text:00401535                 lea     edx, [ebp+var_40]
.text:00401538                 mov     [esp], edx
.text:0040153B                 mov     [ebp+fctx.call_site], 3
.text:00401545                 mov     ecx, eax
.text:00401547                 call    __ZNSt3setIiSt4lessIiESaIiEE6insertERKi ; std::set<int,std::less<int>,std::allocator<int>>::insert(int const&)
.text:0040154C                 sub     esp, 4
.text:0040154F                 inc     [ebp+var_30]
.text:00401552
.text:00401552 loc_401552:                             ; CODE XREF: _main+1FC↑j
.text:00401552                 inc     [ebp+var_24]
.text:00401555
.text:00401555 loc_401555:                             ; CODE XREF: _main+127↑j
.text:00401555                 mov     eax, [ebp+var_24]
.text:00401558                 cmp     eax, [ebp+var_28]
.text:0040155B                 setl    al
.text:0040155E                 test    al, al
.text:00401560                 jnz     loc_401460
.text:00401566                 lea     eax, [ebp+var_58]
.text:00401569                 mov     [ebp+fctx.call_site], 1
.text:00401573                 mov     ecx, eax
.text:00401575                 call    __ZNSt3setIiSt4lessIiESaIiEED1Ev ; std::set<int,std::less<int>,std::allocator<int>>::~set()
.text:0040157A                 inc     [ebp+var_20]
.text:0040157D
.text:0040157D loc_40157D:                             ; CODE XREF: _main+101↑j
.text:0040157D                 mov     eax, ds:_b
.text:00401582                 cmp     [ebp+var_20], eax
.text:00401585                 setle   al
.text:00401588                 test    al, al
.text:0040158A                 jnz     loc_40143A
.text:00401590                 mov     eax, [ebp+var_30]
.text:00401593                 mov     [esp+8], eax
.text:00401597                 mov     eax, [ebp+var_1C]
.text:0040159A                 mov     [esp+4], eax
.text:0040159E                 mov     dword ptr [esp], offset aCaseDD ; "Case #%d: %d\n"
.text:004015A5                 call    _printf
.text:004015AA                 inc     [ebp+var_1C]
.text:004015AD
.text:004015AD loc_4015AD:                             ; CODE XREF: _main+65↑j
.text:004015AD                 mov     eax, [ebp+var_3C]
.text:004015B0                 cmp     [ebp+var_1C], eax
.text:004015B3                 setle   al
.text:004015B6                 test    al, al
.text:004015B8                 jnz     loc_40139E
.text:004015BE                 mov     eax, 0
.text:004015C3                 mov     [ebp+var_94], eax
.text:004015C9                 jmp     short loc_401638
.text:004015CB ; ---------------------------------------------------------------------------
.text:004015CB
.text:004015CB loc_4015CB:                             ; CODE XREF: _main+2E3↓j
.text:004015CB                 mov     eax, edx
.text:004015CD                 cmp     [ebp+var_8E], 0
.text:004015D4                 cmp     [ebp+var_8D], 0
.text:004015DB                 mov     [ebp+lpuexcpt], eax
.text:004015E1                 jmp     short loc_4015E9
.text:004015E3 ; ---------------------------------------------------------------------------
.text:004015E3
.text:004015E3 loc_4015E3:                             ; CODE XREF: _main+2E8↓j
.text:004015E3                 mov     [ebp+lpuexcpt], edx
.text:004015E9
.text:004015E9 loc_4015E9:                             ; CODE XREF: _main+2AD↑j
.text:004015E9                 lea     eax, [ebp+var_58]
.text:004015EC                 mov     [ebp+fctx.call_site], 0
.text:004015F6                 mov     ecx, eax
.text:004015F8                 call    __ZNSt3setIiSt4lessIiESaIiEED1Ev ; std::set<int,std::less<int>,std::allocator<int>>::~set()
.text:004015FD                 mov     eax, [ebp+lpuexcpt]
.text:00401603                 jmp     short loc_401626
.text:00401605 ; ---------------------------------------------------------------------------
.text:00401605
.text:00401605 loc_401605:                             ; DATA XREF: _main+2D↑o
.text:00401605                 lea     ebp, [ebp+18h]
.text:00401608                 mov     edx, [ebp+fctx.data]
.text:0040160E                 mov     eax, [ebp+fctx.call_site]
.text:00401614                 cmp     eax, 1
.text:00401617                 jz      short loc_4015CB
.text:00401619                 cmp     eax, 2
.text:0040161C                 jz      short loc_4015E3
.text:0040161E                 test    eax, eax
.text:00401620                 jz      short loc_401624
.text:00401622                 ud2
.text:00401624 ; ---------------------------------------------------------------------------
.text:00401624
.text:00401624 loc_401624:                             ; CODE XREF: _main+2EC↑j
.text:00401624                 mov     eax, edx
.text:00401626
.text:00401626 loc_401626:                             ; CODE XREF: _main+2CF↑j
.text:00401626                 mov     [esp], eax      ; lpuexcpt
.text:00401629                 mov     [ebp+fctx.call_site], 0FFFFFFFFh
.text:00401633                 call    __Unwind_SjLj_Resume
.text:00401638 ; ---------------------------------------------------------------------------
.text:00401638
.text:00401638 loc_401638:                             ; CODE XREF: _main+295↑j
.text:00401638                 lea     eax, [ebp+fctx]
.text:0040163E                 mov     [esp], eax      ; lpfctx
.text:00401641                 call    __Unwind_SjLj_Unregister
.text:00401646                 mov     eax, [ebp+var_94]
.text:0040164C                 lea     esp, [ebp-10h]
.text:0040164F                 pop     ecx
.text:00401650                 pop     ebx
.text:00401651                 pop     esi
.text:00401652                 pop     edi
.text:00401653                 pop     ebp
.text:00401654                 lea     esp, [ecx-4]
.text:00401657                 retn
.text:00401657 _main           endp
.text:00401657
.text:00401658
.text:00401658 ; =============== S U B R O U T I N E =======================================
.text:00401658
.text:00401658
.text:00401658 ; _DWORD __cdecl read_sleb128(const unsigned __int8 *, int *)
.text:00401658 __ZL12read_sleb128PKhPl proc near       ; CODE XREF: read_encoded_value_with_base(uchar,uint,uchar const*,uint *)+6A↓p
.text:00401658                                         ; ___gxx_personality_sj0+20B↓p ...
.text:00401658                 push    edi
.text:00401659                 push    esi
.text:0040165A                 push    ebx
.text:0040165B                 mov     edi, edx
.text:0040165D                 xor     esi, esi
.text:0040165F                 xor     ecx, ecx
.text:00401661                 lea     esi, [esi+0]
.text:00401664
.text:00401664 loc_401664:                             ; CODE XREF: read_sleb128(uchar const*,long *)+1D↓j
.text:00401664                 mov     dl, [eax]
.text:00401666                 inc     eax
.text:00401667                 mov     ebx, edx
.text:00401669                 and     ebx, 7Fh
.text:0040166C                 shl     ebx, cl
.text:0040166E                 or      esi, ebx
.text:00401670                 add     ecx, 7
.text:00401673                 test    dl, dl
.text:00401675                 js      short loc_401664
.text:00401677                 cmp     ecx, 1Fh
.text:0040167A                 ja      short loc_40168A
.text:0040167C                 and     edx, 40h
.text:0040167F                 jz      short loc_40168A
.text:00401681                 mov     edx, 0FFFFFFFFh
.text:00401686                 shl     edx, cl
.text:00401688                 or      esi, edx
.text:0040168A
.text:0040168A loc_40168A:                             ; CODE XREF: read_sleb128(uchar const*,long *)+22↑j
.text:0040168A                                         ; read_sleb128(uchar const*,long *)+27↑j
.text:0040168A                 mov     [edi], esi
.text:0040168C                 pop     ebx
.text:0040168D                 pop     esi
.text:0040168E                 pop     edi
.text:0040168F                 retn
.text:0040168F __ZL12read_sleb128PKhPl endp
.text:0040168F
.text:00401690
.text:00401690 ; =============== S U B R O U T I N E =======================================
.text:00401690
.text:00401690
.text:00401690 ; _DWORD __cdecl get_adjusted_ptr(const type_info *, const type_info *, void **)
.text:00401690 __ZL16get_adjusted_ptrPKSt9type_infoS1_PPv proc near
.text:00401690                                         ; CODE XREF: check_exception_spec(lsda_header_info *,std::type_info const*,void *,long)+40↓p
.text:00401690                                         ; ___gxx_personality_sj0+262↓p
.text:00401690
.text:00401690 var_2C          = dword ptr -2Ch
.text:00401690 var_28          = dword ptr -28h
.text:00401690 var_24          = dword ptr -24h
.text:00401690 var_10          = dword ptr -10h
.text:00401690
.text:00401690                 push    edi
.text:00401691                 push    esi
.text:00401692                 push    ebx
.text:00401693                 sub     esp, 20h
.text:00401696                 mov     esi, eax
.text:00401698                 mov     ebx, edx
.text:0040169A                 mov     edi, ecx
.text:0040169C                 mov     eax, [ecx]
.text:0040169E                 mov     [esp+2Ch+var_10], eax
.text:004016A2                 mov     eax, [edx]
.text:004016A4                 mov     ecx, edx
.text:004016A6                 call    dword ptr [eax+8]
.text:004016A9                 test    al, al
.text:004016AB                 jz      short loc_4016B7
.text:004016AD                 mov     eax, [esp+2Ch+var_10]
.text:004016B1                 mov     eax, [eax]
.text:004016B3                 mov     [esp+2Ch+var_10], eax
.text:004016B7
.text:004016B7 loc_4016B7:                             ; CODE XREF: get_adjusted_ptr(std::type_info const*,std::type_info const*,void **)+1B↑j
.text:004016B7                 mov     eax, [esi]
.text:004016B9                 mov     [esp+2Ch+var_24], 1
.text:004016C1                 lea     edx, [esp+2Ch+var_10]
.text:004016C5                 mov     [esp+2Ch+var_28], edx
.text:004016C9                 mov     [esp+2Ch+var_2C], ebx
.text:004016CC                 mov     ecx, esi
.text:004016CE                 call    dword ptr [eax+10h]
.text:004016D1                 sub     esp, 0Ch
.text:004016D4                 test    al, al
.text:004016D6                 jz      short loc_4016E8
.text:004016D8                 mov     eax, [esp+2Ch+var_10]
.text:004016DC                 mov     [edi], eax
.text:004016DE                 mov     al, 1
.text:004016E0                 add     esp, 20h
.text:004016E3                 pop     ebx
.text:004016E4                 pop     esi
.text:004016E5                 pop     edi
.text:004016E6                 retn
.text:004016E6 ; ---------------------------------------------------------------------------
.text:004016E7                 align 4
.text:004016E8
.text:004016E8 loc_4016E8:                             ; CODE XREF: get_adjusted_ptr(std::type_info const*,std::type_info const*,void **)+46↑j
.text:004016E8                 xor     eax, eax
.text:004016EA                 add     esp, 20h
.text:004016ED                 pop     ebx
.text:004016EE                 pop     esi
.text:004016EF                 pop     edi
.text:004016F0                 retn
.text:004016F0 __ZL16get_adjusted_ptrPKSt9type_infoS1_PPv endp
.text:004016F0
.text:004016F0 ; ---------------------------------------------------------------------------
.text:004016F1                 align 4
.text:004016F4
.text:004016F4 ; =============== S U B R O U T I N E =======================================
.text:004016F4
.text:004016F4
.text:004016F4 ; _DWORD __cdecl base_of_encoded_value(unsigned __int8, _Unwind_Context *)
.text:004016F4 __ZL21base_of_encoded_valuehP15_Unwind_Context proc near
.text:004016F4                                         ; CODE XREF: parse_lsda_header(_Unwind_Context *,uchar const*,lsda_header_info *)+38↓p
.text:004016F4                                         ; ___gxx_personality_sj0+11A↓p ...
.text:004016F4
.text:004016F4 context         = dword ptr -1Ch
.text:004016F4
.text:004016F4                 sub     esp, 1Ch
.text:004016F7                 cmp     al, 0FFh
.text:004016F9                 jz      short loc_40171C
.text:004016FB                 and     eax, 70h
.text:004016FE                 cmp     al, 20h ; ' '
.text:00401700                 jz      short loc_401738
.text:00401702                 jbe     short loc_401718
.text:00401704                 cmp     al, 40h ; '@'
.text:00401706                 jz      short loc_40172C
.text:00401708                 cmp     al, 50h ; 'P'
.text:0040170A                 jz      short loc_40171C
.text:0040170C                 cmp     al, 30h ; '0'
.text:0040170E                 jz      short loc_401744
.text:00401710
.text:00401710 loc_401710:                             ; CODE XREF: base_of_encoded_value(uchar,_Unwind_Context *)+32↓j
.text:00401710                 call    _abort
.text:00401710 ; ---------------------------------------------------------------------------
.text:00401715                 align 4
.text:00401718
.text:00401718 loc_401718:                             ; CODE XREF: base_of_encoded_value(uchar,_Unwind_Context *)+E↑j
.text:00401718                 test    al, al
.text:0040171A                 jnz     short loc_401724
.text:0040171C
.text:0040171C loc_40171C:                             ; CODE XREF: base_of_encoded_value(uchar,_Unwind_Context *)+5↑j
.text:0040171C                                         ; base_of_encoded_value(uchar,_Unwind_Context *)+16↑j ...
.text:0040171C                 xor     eax, eax
.text:0040171E                 add     esp, 1Ch
.text:00401721                 retn
.text:00401721 ; ---------------------------------------------------------------------------
.text:00401722                 align 4
.text:00401724
.text:00401724 loc_401724:                             ; CODE XREF: base_of_encoded_value(uchar,_Unwind_Context *)+26↑j
.text:00401724                 cmp     al, 10h
.text:00401726                 jnz     short loc_401710
.text:00401728                 jmp     short loc_40171C
.text:00401728 ; ---------------------------------------------------------------------------
.text:0040172A                 align 4
.text:0040172C
.text:0040172C loc_40172C:                             ; CODE XREF: base_of_encoded_value(uchar,_Unwind_Context *)+12↑j
.text:0040172C                 mov     [esp+1Ch+context], edx ; context
.text:0040172F                 call    __Unwind_GetRegionStart
.text:00401734                 add     esp, 1Ch
.text:00401737                 retn
.text:00401738 ; ---------------------------------------------------------------------------
.text:00401738
.text:00401738 loc_401738:                             ; CODE XREF: base_of_encoded_value(uchar,_Unwind_Context *)+C↑j
.text:00401738                 mov     [esp+1Ch+context], edx ; context
.text:0040173B                 call    __Unwind_GetTextRelBase
.text:00401740                 add     esp, 1Ch
.text:00401743                 retn
.text:00401744 ; ---------------------------------------------------------------------------
.text:00401744
.text:00401744 loc_401744:                             ; CODE XREF: base_of_encoded_value(uchar,_Unwind_Context *)+1A↑j
.text:00401744                 mov     [esp+1Ch+context], edx ; context
.text:00401747                 call    __Unwind_GetDataRelBase
.text:0040174C                 add     esp, 1Ch
.text:0040174F                 retn
.text:0040174F __ZL21base_of_encoded_valuehP15_Unwind_Context endp
.text:0040174F
.text:00401750
.text:00401750 ; =============== S U B R O U T I N E =======================================
.text:00401750
.text:00401750
.text:00401750 ; _DWORD __cdecl read_encoded_value_with_base(unsigned __int8, unsigned int, const unsigned __int8 *, unsigned int *)
.text:00401750 __ZL28read_encoded_value_with_basehjPKhPj proc near
.text:00401750                                         ; CODE XREF: parse_lsda_header(_Unwind_Context *,uchar const*,lsda_header_info *)+4D↓p
.text:00401750                                         ; get_ttype_entry(lsda_header_info *,ulong)+46↓p
.text:00401750
.text:00401750 var_30          = dword ptr -30h
.text:00401750 var_20          = dword ptr -20h
.text:00401750 arg_0           = byte ptr  4
.text:00401750
.text:00401750                 push    ebp
.text:00401751                 push    edi
.text:00401752                 push    esi
.text:00401753                 push    ebx
.text:00401754                 sub     esp, 2Ch
.text:00401757                 mov     esi, ecx
.text:00401759                 mov     bl, al
.text:0040175B                 cmp     al, 50h ; 'P'
.text:0040175D                 jz      loc_40180C
.text:00401763                 and     eax, 0Fh
.text:00401766                 cmp     al, 0Ch         ; switch 13 cases
.text:00401768                 jbe     short loc_401770
.text:0040176A
.text:0040176A def_401775:                             ; CODE XREF: read_encoded_value_with_base(uchar,uint,uchar const*,uint *)+25↓j
.text:0040176A                                         ; DATA XREF: .rdata:jpt_401775↓o
.text:0040176A                 call    _abort          ; jumptable 00401775 default case, cases 5-8
.text:0040176A ; ---------------------------------------------------------------------------
.text:0040176F                 align 10h
.text:00401770
.text:00401770 loc_401770:                             ; CODE XREF: read_encoded_value_with_base(uchar,uint,uchar const*,uint *)+18↑j
.text:00401770                 mov     edi, edx
.text:00401772                 movzx   eax, al
.text:00401775                 jmp     ds:jpt_401775[eax*4] ; switch jump
.text:0040177C ; ---------------------------------------------------------------------------
.text:0040177C
.text:0040177C loc_40177C:                             ; CODE XREF: read_encoded_value_with_base(uchar,uint,uchar const*,uint *)+25↑j
.text:0040177C                                         ; DATA XREF: .rdata:jpt_401775↓o
.text:0040177C                 mov     edx, [ecx]      ; jumptable 00401775 cases 0,3,11
.text:0040177E                 lea     eax, [ecx+4]
.text:00401781
.text:00401781 loc_401781:                             ; CODE XREF: read_encoded_value_with_base(uchar,uint,uchar const*,uint *)+61↓j
.text:00401781                                         ; read_encoded_value_with_base(uchar,uint,uchar const*,uint *)+73↓j ...
.text:00401781                 test    edx, edx
.text:00401783                 jz      short loc_40179B
.text:00401785                 mov     cl, bl
.text:00401787                 and     ecx, 70h
.text:0040178A                 cmp     cl, 10h
.text:0040178D                 jz      loc_401828
.text:00401793
.text:00401793 loc_401793:                             ; CODE XREF: read_encoded_value_with_base(uchar,uint,uchar const*,uint *)+DA↓j
.text:00401793                 add     edx, edi
.text:00401795                 test    bl, bl
.text:00401797                 jns     short loc_40179B
.text:00401799                 mov     edx, [edx]
.text:0040179B
.text:0040179B loc_40179B:                             ; CODE XREF: read_encoded_value_with_base(uchar,uint,uchar const*,uint *)+33↑j
.text:0040179B                                         ; read_encoded_value_with_base(uchar,uint,uchar const*,uint *)+47↑j
.text:0040179B                 mov     ecx, dword ptr [esp+3Ch+arg_0]
.text:0040179F                 mov     [ecx], edx
.text:004017A1                 add     esp, 2Ch
.text:004017A4                 pop     ebx
.text:004017A5                 pop     esi
.text:004017A6                 pop     edi
.text:004017A7                 pop     ebp
.text:004017A8                 retn
.text:004017A8 ; ---------------------------------------------------------------------------
.text:004017A9                 align 4
.text:004017AC
.text:004017AC loc_4017AC:                             ; CODE XREF: read_encoded_value_with_base(uchar,uint,uchar const*,uint *)+25↑j
.text:004017AC                                         ; DATA XREF: .rdata:jpt_401775↓o
.text:004017AC                 mov     edx, [ecx]      ; jumptable 00401775 cases 4,12
.text:004017AE                 lea     eax, [ecx+8]
.text:004017B1                 jmp     short loc_401781
.text:004017B1 ; ---------------------------------------------------------------------------
.text:004017B3                 align 4
.text:004017B4
.text:004017B4 loc_4017B4:                             ; CODE XREF: read_encoded_value_with_base(uchar,uint,uchar const*,uint *)+25↑j
.text:004017B4                                         ; DATA XREF: .rdata:jpt_401775↓o
.text:004017B4                 lea     edx, [esp+3Ch+var_20] ; jumptable 00401775 case 9
.text:004017B8                 mov     eax, ecx
.text:004017BA                 call    __ZL12read_sleb128PKhPl ; read_sleb128(uchar const*,long *)
.text:004017BF                 mov     edx, [esp+3Ch+var_20]
.text:004017C3                 jmp     short loc_401781
.text:004017C3 ; ---------------------------------------------------------------------------
.text:004017C5                 align 4
.text:004017C8
.text:004017C8 loc_4017C8:                             ; CODE XREF: read_encoded_value_with_base(uchar,uint,uchar const*,uint *)+25↑j
.text:004017C8                                         ; DATA XREF: .rdata:jpt_401775↓o
.text:004017C8                 mov     eax, ecx        ; jumptable 00401775 case 1
.text:004017CA                 xor     edx, edx
.text:004017CC                 xor     ecx, ecx
.text:004017CE                 mov     ebp, ebx
.text:004017D0                 mov     [esp+3Ch+var_30], esi
.text:004017D4                 mov     esi, edx
.text:004017D6                 xchg    ax, ax
.text:004017D8
.text:004017D8 loc_4017D8:                             ; CODE XREF: read_encoded_value_with_base(uchar,uint,uchar const*,uint *)+99↓j
.text:004017D8                 mov     bl, [eax]
.text:004017DA                 inc     eax
.text:004017DB                 mov     edx, ebx
.text:004017DD                 and     edx, 7Fh
.text:004017E0                 shl     edx, cl
.text:004017E2                 or      esi, edx
.text:004017E4                 add     ecx, 7
.text:004017E7                 test    bl, bl
.text:004017E9                 js      short loc_4017D8
.text:004017EB                 mov     edx, esi
.text:004017ED                 mov     ebx, ebp
.text:004017EF                 mov     esi, [esp+3Ch+var_30]
.text:004017F3                 jmp     short loc_401781
.text:004017F3 ; ---------------------------------------------------------------------------
.text:004017F5                 align 4
.text:004017F8
.text:004017F8 loc_4017F8:                             ; CODE XREF: read_encoded_value_with_base(uchar,uint,uchar const*,uint *)+25↑j
.text:004017F8                                         ; DATA XREF: .rdata:jpt_401775↓o
.text:004017F8                 movsx   edx, word ptr [ecx] ; jumptable 00401775 case 10
.text:004017FB                 lea     eax, [ecx+2]
.text:004017FE                 jmp     short loc_401781
.text:00401800 ; ---------------------------------------------------------------------------
.text:00401800
.text:00401800 loc_401800:                             ; CODE XREF: read_encoded_value_with_base(uchar,uint,uchar const*,uint *)+25↑j
.text:00401800                                         ; DATA XREF: .rdata:jpt_401775↓o
.text:00401800                 movzx   edx, word ptr [ecx] ; jumptable 00401775 case 2
.text:00401803                 lea     eax, [ecx+2]
.text:00401806                 jmp     loc_401781
.text:00401806 ; ---------------------------------------------------------------------------
.text:0040180B                 align 4
.text:0040180C
.text:0040180C loc_40180C:                             ; CODE XREF: read_encoded_value_with_base(uchar,uint,uchar const*,uint *)+D↑j
.text:0040180C                 lea     eax, [ecx+3]
.text:0040180F                 and     eax, 0FFFFFFFCh
.text:00401812                 mov     edx, [eax]
.text:00401814                 add     eax, 4
.text:00401817                 mov     ecx, dword ptr [esp+3Ch+arg_0]
.text:0040181B                 mov     [ecx], edx
.text:0040181D                 add     esp, 2Ch
.text:00401820                 pop     ebx
.text:00401821                 pop     esi
.text:00401822                 pop     edi
.text:00401823                 pop     ebp
.text:00401824                 retn
.text:00401824 ; ---------------------------------------------------------------------------
.text:00401825                 align 4
.text:00401828
.text:00401828 loc_401828:                             ; CODE XREF: read_encoded_value_with_base(uchar,uint,uchar const*,uint *)+3D↑j
.text:00401828                 mov     edi, esi
.text:0040182A                 jmp     loc_401793
.text:0040182A __ZL28read_encoded_value_with_basehjPKhPj endp
.text:0040182A
.text:0040182A ; ---------------------------------------------------------------------------
.text:0040182F                 align 10h
.text:00401830
.text:00401830 ; =============== S U B R O U T I N E =======================================
.text:00401830
.text:00401830
.text:00401830 ; parse_lsda_header(_Unwind_Context *, unsigned char const*, lsda_header_info *)
.text:00401830 __ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info proc near
.text:00401830                                         ; CODE XREF: ___gxx_personality_sj0+102↓p
.text:00401830                                         ; ___gxx_personality_sj0+2E7↓p ...
.text:00401830
.text:00401830 context         = dword ptr -3Ch
.text:00401830 var_20          = dword ptr -20h
.text:00401830
.text:00401830                 push    ebp
.text:00401831                 push    edi
.text:00401832                 push    esi
.text:00401833                 push    ebx
.text:00401834                 sub     esp, 2Ch
.text:00401837                 mov     edi, eax
.text:00401839                 mov     esi, edx
.text:0040183B                 mov     [esp+3Ch+var_20], ecx
.text:0040183F                 test    eax, eax
.text:00401841                 jz      loc_40190C
.text:00401847                 mov     [esp+3Ch+context], eax ; unsigned __int8
.text:0040184A                 call    __Unwind_GetRegionStart
.text:0040184F
.text:0040184F loc_40184F:                             ; CODE XREF: parse_lsda_header(_Unwind_Context *,uchar const*,lsda_header_info *)+DE↓j
.text:0040184F                 mov     ecx, [esp+3Ch+var_20]
.text:00401853                 mov     [ecx], eax
.text:00401855                 mov     dl, [esi]
.text:00401857                 inc     esi
.text:00401858                 cmp     dl, 0FFh
.text:0040185B                 jz      loc_4018E8
.text:00401861                 movzx   ebp, dl
.text:00401864                 mov     edx, edi
.text:00401866                 mov     eax, ebp
.text:00401868                 call    __ZL21base_of_encoded_valuehP15_Unwind_Context ; base_of_encoded_value(uchar,_Unwind_Context *)
.text:0040186D                 mov     edx, [esp+3Ch+var_20]
.text:00401871                 add     edx, 4
.text:00401874                 mov     [esp+3Ch+context], edx ; unsigned __int8
.text:00401877                 mov     ecx, esi
.text:00401879                 mov     edx, eax
.text:0040187B                 mov     eax, ebp
.text:0040187D                 call    __ZL28read_encoded_value_with_basehjPKhPj ; read_encoded_value_with_base(uchar,uint,uchar const*,uint *)
.text:00401882                 mov     esi, eax
.text:00401884                 mov     dl, [esi]
.text:00401886                 mov     ecx, [esp+3Ch+var_20]
.text:0040188A                 mov     [ecx+14h], dl
.text:0040188D                 lea     eax, [esi+1]
.text:00401890                 inc     dl
.text:00401892                 jz      short loc_4018FF
.text:00401894
.text:00401894 loc_401894:                             ; CODE XREF: parse_lsda_header(_Unwind_Context *,uchar const*,lsda_header_info *)+CD↓j
.text:00401894                 xor     edi, edi
.text:00401896                 xor     ecx, ecx
.text:00401898
.text:00401898 loc_401898:                             ; CODE XREF: parse_lsda_header(_Unwind_Context *,uchar const*,lsda_header_info *)+79↓j
.text:00401898                 mov     bl, [eax]
.text:0040189A                 inc     eax
.text:0040189B                 mov     edx, ebx
.text:0040189D                 and     edx, 7Fh
.text:004018A0                 shl     edx, cl
.text:004018A2                 or      edi, edx
.text:004018A4                 add     ecx, 7
.text:004018A7                 test    bl, bl
.text:004018A9                 js      short loc_401898
.text:004018AB                 add     edi, eax
.text:004018AD                 mov     ecx, [esp+3Ch+var_20]
.text:004018B1                 mov     [ecx+0Ch], edi
.text:004018B4
.text:004018B4 loc_4018B4:                             ; CODE XREF: parse_lsda_header(_Unwind_Context *,uchar const*,lsda_header_info *)+DA↓j
.text:004018B4                 mov     dl, [eax]
.text:004018B6                 mov     ecx, [esp+3Ch+var_20]
.text:004018BA                 mov     [ecx+15h], dl
.text:004018BD                 inc     eax
.text:004018BE                 xor     edi, edi
.text:004018C0                 xor     ecx, ecx
.text:004018C2                 xchg    ax, ax
.text:004018C4
.text:004018C4 loc_4018C4:                             ; CODE XREF: parse_lsda_header(_Unwind_Context *,uchar const*,lsda_header_info *)+A5↓j
.text:004018C4                 mov     bl, [eax]
.text:004018C6                 inc     eax
.text:004018C7                 mov     edx, ebx
.text:004018C9                 and     edx, 7Fh
.text:004018CC                 shl     edx, cl
.text:004018CE                 or      edi, edx
.text:004018D0                 add     ecx, 7
.text:004018D3                 test    bl, bl
.text:004018D5                 js      short loc_4018C4
.text:004018D7                 add     edi, eax
.text:004018D9                 mov     ecx, [esp+3Ch+var_20]
.text:004018DD                 mov     [ecx+10h], edi
.text:004018E0                 add     esp, 2Ch
.text:004018E3                 pop     ebx
.text:004018E4                 pop     esi
.text:004018E5                 pop     edi
.text:004018E6                 pop     ebp
.text:004018E7                 retn
.text:004018E8 ; ---------------------------------------------------------------------------
.text:004018E8
.text:004018E8 loc_4018E8:                             ; CODE XREF: parse_lsda_header(_Unwind_Context *,uchar const*,lsda_header_info *)+2B↑j
.text:004018E8                 mov     ecx, [esp+3Ch+var_20]
.text:004018EC                 mov     [ecx+4], eax
.text:004018EF                 mov     dl, [esi]
.text:004018F1                 mov     ecx, [esp+3Ch+var_20]
.text:004018F5                 mov     [ecx+14h], dl
.text:004018F8                 lea     eax, [esi+1]
.text:004018FB                 inc     dl
.text:004018FD                 jnz     short loc_401894
.text:004018FF
.text:004018FF loc_4018FF:                             ; CODE XREF: parse_lsda_header(_Unwind_Context *,uchar const*,lsda_header_info *)+62↑j
.text:004018FF                 mov     ecx, [esp+3Ch+var_20]
.text:00401903                 mov     dword ptr [ecx+0Ch], 0
.text:0040190A                 jmp     short loc_4018B4
.text:0040190C ; ---------------------------------------------------------------------------
.text:0040190C
.text:0040190C loc_40190C:                             ; CODE XREF: parse_lsda_header(_Unwind_Context *,uchar const*,lsda_header_info *)+11↑j
.text:0040190C                 xor     eax, eax
.text:0040190E                 jmp     loc_40184F
.text:0040190E __ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info endp
.text:0040190E
.text:0040190E ; ---------------------------------------------------------------------------
.text:00401913                 align 4
.text:00401914
.text:00401914 ; =============== S U B R O U T I N E =======================================
.text:00401914
.text:00401914
.text:00401914 ; get_ttype_entry(lsda_header_info *, unsigned long)
.text:00401914 __ZL15get_ttype_entryP16lsda_header_infom proc near
.text:00401914                                         ; CODE XREF: check_exception_spec(lsda_header_info *,std::type_info const*,void *,long)+35↓p
.text:00401914                                         ; ___gxx_personality_sj0+23D↓p
.text:00401914
.text:00401914 var_2C          = byte ptr -2Ch
.text:00401914 var_10          = byte ptr -10h
.text:00401914
.text:00401914                 push    esi
.text:00401915                 push    ebx
.text:00401916                 sub     esp, 24h
.text:00401919                 mov     esi, eax
.text:0040191B                 mov     bl, [eax+14h]
.text:0040191E                 movzx   eax, bl
.text:00401921                 cmp     bl, 0FFh
.text:00401924                 jz      short loc_401980
.text:00401926                 and     ebx, 7
.text:00401929                 cmp     bl, 2
.text:0040192C                 jz      short loc_401978
.text:0040192E                 jbe     short loc_401940
.text:00401930                 cmp     bl, 3
.text:00401933                 jz      short loc_401944
.text:00401935                 cmp     bl, 4
.text:00401938                 jz      short loc_40196C
.text:0040193A
.text:0040193A loc_40193A:                             ; CODE XREF: get_ttype_entry(lsda_header_info *,ulong)+2E↓j
.text:0040193A                 call    _abort
.text:0040193A ; ---------------------------------------------------------------------------
.text:0040193F                 align 10h
.text:00401940
.text:00401940 loc_401940:                             ; CODE XREF: get_ttype_entry(lsda_header_info *,ulong)+1A↑j
.text:00401940                 test    bl, bl
.text:00401942                 jnz     short loc_40193A
.text:00401944
.text:00401944 loc_401944:                             ; CODE XREF: get_ttype_entry(lsda_header_info *,ulong)+1F↑j
.text:00401944                 lea     ecx, ds:0[edx*4]
.text:0040194B                 neg     ecx
.text:0040194D
.text:0040194D loc_40194D:                             ; CODE XREF: get_ttype_entry(lsda_header_info *,ulong)+61↓j
.text:0040194D                                         ; get_ttype_entry(lsda_header_info *,ulong)+69↓j ...
.text:0040194D                 add     ecx, [esi+0Ch]
.text:00401950                 mov     edx, [esi+8]
.text:00401953                 lea     ebx, [esp+2Ch+var_10]
.text:00401957                 mov     dword ptr [esp+2Ch+var_2C], ebx ; unsigned __int8
.text:0040195A                 call    __ZL28read_encoded_value_with_basehjPKhPj ; read_encoded_value_with_base(uchar,uint,uchar const*,uint *)
.text:0040195F                 mov     eax, dword ptr [esp+2Ch+var_10]
.text:00401963                 add     esp, 24h
.text:00401966                 pop     ebx
.text:00401967                 pop     esi
.text:00401968                 retn
.text:00401968 ; ---------------------------------------------------------------------------
.text:00401969                 align 4
.text:0040196C
.text:0040196C loc_40196C:                             ; CODE XREF: get_ttype_entry(lsda_header_info *,ulong)+24↑j
.text:0040196C                 lea     ecx, ds:0[edx*8]
.text:00401973                 neg     ecx
.text:00401975                 jmp     short loc_40194D
.text:00401975 ; ---------------------------------------------------------------------------
.text:00401977                 align 4
.text:00401978
.text:00401978 loc_401978:                             ; CODE XREF: get_ttype_entry(lsda_header_info *,ulong)+18↑j
.text:00401978                 lea     ecx, [edx+edx]
.text:0040197B                 neg     ecx
.text:0040197D                 jmp     short loc_40194D
.text:0040197D ; ---------------------------------------------------------------------------
.text:0040197F                 align 10h
.text:00401980
.text:00401980 loc_401980:                             ; CODE XREF: get_ttype_entry(lsda_header_info *,ulong)+10↑j
.text:00401980                 xor     ecx, ecx
.text:00401982                 jmp     short loc_40194D
.text:00401982 __ZL15get_ttype_entryP16lsda_header_infom endp
.text:00401982
.text:00401984
.text:00401984 ; =============== S U B R O U T I N E =======================================
.text:00401984
.text:00401984
.text:00401984 ; check_exception_spec(lsda_header_info *, std::type_info const*, void *, long)
.text:00401984 __ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl proc near
.text:00401984                                         ; CODE XREF: ___gxx_personality_sj0+510↓p
.text:00401984                                         ; ___cxa_call_unexpected+FC↓p ...
.text:00401984
.text:00401984 var_20          = dword ptr -20h
.text:00401984 arg_0           = dword ptr  4
.text:00401984
.text:00401984                 push    ebp
.text:00401985                 push    edi
.text:00401986                 push    esi
.text:00401987                 push    ebx
.text:00401988                 sub     esp, 1Ch
.text:0040198B                 mov     edi, eax
.text:0040198D                 mov     ebp, edx
.text:0040198F                 mov     [esp+2Ch+var_20], ecx
.text:00401993                 mov     esi, [esp+2Ch+arg_0]
.text:00401997                 not     esi
.text:00401999                 add     esi, [eax+0Ch]
.text:0040199C
.text:0040199C loc_40199C:                             ; CODE XREF: check_exception_spec(lsda_header_info *,std::type_info const*,void *,long)+47↓j
.text:0040199C                 xor     edx, edx
.text:0040199E                 xor     ecx, ecx
.text:004019A0
.text:004019A0 loc_4019A0:                             ; CODE XREF: check_exception_spec(lsda_header_info *,std::type_info const*,void *,long)+2D↓j
.text:004019A0                 mov     al, [esi]
.text:004019A2                 inc     esi
.text:004019A3                 mov     ebx, eax
.text:004019A5                 and     ebx, 7Fh
.text:004019A8                 shl     ebx, cl
.text:004019AA                 or      edx, ebx
.text:004019AC                 add     ecx, 7
.text:004019AF                 test    al, al
.text:004019B1                 js      short loc_4019A0
.text:004019B3                 test    edx, edx
.text:004019B5                 jz      short loc_4019D7
.text:004019B7                 mov     eax, edi
.text:004019B9                 call    __ZL15get_ttype_entryP16lsda_header_infom ; get_ttype_entry(lsda_header_info *,ulong)
.text:004019BE                 lea     ecx, [esp+2Ch+var_20]
.text:004019C2                 mov     edx, ebp
.text:004019C4                 call    __ZL16get_adjusted_ptrPKSt9type_infoS1_PPv ; get_adjusted_ptr(std::type_info const*,std::type_info const*,void **)
.text:004019C9                 test    al, al
.text:004019CB                 jz      short loc_40199C
.text:004019CD                 mov     al, 1
.text:004019CF                 add     esp, 1Ch
.text:004019D2                 pop     ebx
.text:004019D3                 pop     esi
.text:004019D4                 pop     edi
.text:004019D5                 pop     ebp
.text:004019D6                 retn
.text:004019D7 ; ---------------------------------------------------------------------------
.text:004019D7
.text:004019D7 loc_4019D7:                             ; CODE XREF: check_exception_spec(lsda_header_info *,std::type_info const*,void *,long)+31↑j
.text:004019D7                 xor     eax, eax
.text:004019D9                 add     esp, 1Ch
.text:004019DC                 pop     ebx
.text:004019DD                 pop     esi
.text:004019DE                 pop     edi
.text:004019DF                 pop     ebp
.text:004019E0                 retn
.text:004019E0 __ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl endp
.text:004019E0
.text:004019E0 ; ---------------------------------------------------------------------------
.text:004019E1                 align 4
.text:004019E4
.text:004019E4 ; =============== S U B R O U T I N E =======================================
.text:004019E4
.text:004019E4
.text:004019E4 ; int __cdecl __gxx_personality_sj0(int, int, int, int, _Unwind_Word, _Unwind_Context *context)
.text:004019E4                 public ___gxx_personality_sj0
.text:004019E4 ___gxx_personality_sj0 proc near        ; DATA XREF: _main+17↑o
.text:004019E4                                         ; ___gxx_personality_sj0+20↓o ...
.text:004019E4
.text:004019E4 lpfctx          = dword ptr -0BCh
.text:004019E4 ip_before_insn  = dword ptr -0B8h
.text:004019E4 v               = dword ptr -0B4h
.text:004019E4 var_A4          = dword ptr -0A4h
.text:004019E4 var_A0          = dword ptr -0A0h
.text:004019E4 var_98          = dword ptr -98h
.text:004019E4 var_94          = dword ptr -94h
.text:004019E4 var_90          = dword ptr -90h
.text:004019E4 val             = dword ptr -8Ch
.text:004019E4 var_86          = byte ptr -86h
.text:004019E4 var_85          = byte ptr -85h
.text:004019E4 var_84          = dword ptr -84h
.text:004019E4 fctx            = SjLj_Function_Context ptr -80h
.text:004019E4 var_5C          = dword ptr -5Ch
.text:004019E4 var_58          = dword ptr -58h
.text:004019E4 var_44          = dword ptr -44h
.text:004019E4 var_40          = dword ptr -40h
.text:004019E4 var_3C          = dword ptr -3Ch
.text:004019E4 var_38          = dword ptr -38h
.text:004019E4 var_34          = byte ptr -34h
.text:004019E4 var_2C          = dword ptr -2Ch
.text:004019E4 var_28          = dword ptr -28h
.text:004019E4 var_24          = dword ptr -24h
.text:004019E4 var_20          = byte ptr -20h
.text:004019E4 var_1C          = byte ptr -1Ch
.text:004019E4 arg_0           = dword ptr  4
.text:004019E4 arg_4           = dword ptr  8
.text:004019E4 arg_8           = dword ptr  0Ch
.text:004019E4 arg_C           = dword ptr  10h
.text:004019E4 arg_10          = dword ptr  14h
.text:004019E4 context         = dword ptr  18h
.text:004019E4
.text:004019E4                 push    ebp
.text:004019E5                 push    edi
.text:004019E6                 push    esi
.text:004019E7                 push    ebx
.text:004019E8                 sub     esp, 0ACh
.text:004019EE                 mov     eax, [esp+0BCh+arg_8]
.text:004019F5                 mov     edx, [esp+0BCh+arg_C]
.text:004019FC                 mov     [esp+0BCh+var_A4], eax
.text:00401A00                 mov     [esp+0BCh+var_A0], edx
.text:00401A04                 mov     [esp+0BCh+fctx.personality], offset ___gxx_personality_sj0
.text:00401A0C                 mov     [esp+0BCh+fctx.lsda], offset dword_412250
.text:00401A14                 lea     edx, [esp+0BCh+var_1C]
.text:00401A1B                 mov     [esp+0BCh+fctx.jbuf], edx
.text:00401A1F                 mov     [esp+0BCh+var_5C], offset loc_401F34
.text:00401A27                 mov     [esp+0BCh+var_58], esp
.text:00401A2B                 lea     eax, [esp+0BCh+fctx]
.text:00401A2F                 mov     [esp+0BCh+lpfctx], eax ; unsigned __int8
.text:00401A32                 call    __Unwind_SjLj_Register
.text:00401A37 ; __unwind { // ___gxx_personality_sj0
.text:00401A37 ;   try {
.text:00401A37                 mov     [esp+0BCh+var_44], 0
.text:00401A3F                 mov     [esp+0BCh+var_40], 0
.text:00401A47                 cmp     [esp+0BCh+arg_0], 1
.text:00401A4F                 jz      short loc_401A74
.text:00401A51                 mov     [esp+0BCh+var_A4], 3
.text:00401A59
.text:00401A59 loc_401A59:                             ; CODE XREF: ___gxx_personality_sj0+360↓j
.text:00401A59                                         ; ___gxx_personality_sj0+3F8↓j ...
.text:00401A59                 lea     edx, [esp+0BCh+fctx]
.text:00401A5D                 mov     [esp+0BCh+lpfctx], edx ; lpfctx
.text:00401A60                 call    __Unwind_SjLj_Unregister
.text:00401A65                 mov     eax, [esp+0BCh+var_A4]
.text:00401A69                 add     esp, 0ACh
.text:00401A6F                 pop     ebx
.text:00401A70                 pop     esi
.text:00401A71                 pop     edi
.text:00401A72                 pop     ebp
.text:00401A73                 retn
.text:00401A74 ; ---------------------------------------------------------------------------
.text:00401A74
.text:00401A74 loc_401A74:                             ; CODE XREF: ___gxx_personality_sj0+6B↑j
.text:00401A74                 mov     eax, [esp+0BCh+var_A4]
.text:00401A78                 mov     edx, [esp+0BCh+var_A0]
.text:00401A7C                 add     eax, 0BCD4D500h
.text:00401A81                 adc     edx, 0B8B1AABCh
.text:00401A87                 mov     [esp+0BCh+var_86], 1
.text:00401A8C                 cmp     edx, 0
.text:00401A8F                 ja      short loc_401A9B
.text:00401A91                 cmp     eax, 1
.text:00401A94                 ja      short loc_401A9B
.text:00401A96                 mov     [esp+0BCh+var_86], 0
.text:00401A9B
.text:00401A9B loc_401A9B:                             ; CODE XREF: ___gxx_personality_sj0+AB↑j
.text:00401A9B                                         ; ___gxx_personality_sj0+B0↑j
.text:00401A9B                 cmp     [esp+0BCh+arg_4], 6
.text:00401AA3                 jz      loc_401C68
.text:00401AA9
.text:00401AA9 loc_401AA9:                             ; CODE XREF: ___gxx_personality_sj0+289↓j
.text:00401AA9                 mov     edx, [esp+0BCh+context]
.text:00401AB0                 mov     [esp+0BCh+lpfctx], edx ; unsigned __int8
.text:00401AB3                 mov     [esp+0BCh+fctx.call_site], 0FFFFFFFFh
.text:00401ABB                 call    __Unwind_GetLanguageSpecificData
.text:00401AC0                 mov     [esp+0BCh+var_94], eax
.text:00401AC4                 test    eax, eax
.text:00401AC6                 jz      loc_401D3C
.text:00401ACC                 mov     [esp+0BCh+fctx.call_site], 0FFFFFFFFh
.text:00401AD4                 lea     ecx, [esp+0BCh+var_34]
.text:00401ADB                 mov     edx, [esp+0BCh+var_94]
.text:00401ADF                 mov     eax, [esp+0BCh+context]
.text:00401AE6                 call    __ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info ; parse_lsda_header(_Unwind_Context *,uchar const*,lsda_header_info *)
.text:00401AEB                 mov     [esp+0BCh+var_A4], eax
.text:00401AEF                 movzx   eax, [esp+0BCh+var_20]
.text:00401AF7                 mov     edx, [esp+0BCh+context]
.text:00401AFE                 call    __ZL21base_of_encoded_valuehP15_Unwind_Context ; base_of_encoded_value(uchar,_Unwind_Context *)
.text:00401B03                 mov     [esp+0BCh+var_2C], eax
.text:00401B0A                 lea     eax, [esp+0BCh+var_40]
.text:00401B0E                 mov     [esp+0BCh+ip_before_insn], eax ; type_info *
.text:00401B12                 mov     eax, [esp+0BCh+context]
.text:00401B19                 mov     [esp+0BCh+lpfctx], eax ; type_info *
.text:00401B1C                 call    __Unwind_GetIPInfo
.text:00401B21                 mov     esi, eax
.text:00401B23                 cmp     [esp+0BCh+var_40], 1
.text:00401B28                 sbb     esi, 0
.text:00401B2B                 cmp     esi, 0
.text:00401B2E                 jl      loc_401D3C
.text:00401B34                 jz      loc_401D0C
.text:00401B3A                 mov     eax, [esp+0BCh+var_A4]
.text:00401B3E                 xchg    ax, ax
.text:00401B40
.text:00401B40 loc_401B40:                             ; CODE XREF: ___gxx_personality_sj0+18C↓j
.text:00401B40                 xor     ebp, ebp
.text:00401B42                 xor     ecx, ecx
.text:00401B44
.text:00401B44 loc_401B44:                             ; CODE XREF: ___gxx_personality_sj0+171↓j
.text:00401B44                 mov     bl, [eax]
.text:00401B46                 inc     eax
.text:00401B47                 mov     edx, ebx
.text:00401B49                 and     edx, 7Fh
.text:00401B4C                 shl     edx, cl
.text:00401B4E                 or      ebp, edx
.text:00401B50                 add     ecx, 7
.text:00401B53                 test    bl, bl
.text:00401B55                 js      short loc_401B44
.text:00401B57                 xor     edi, edi
.text:00401B59                 xor     ecx, ecx
.text:00401B5B                 nop
.text:00401B5C
.text:00401B5C loc_401B5C:                             ; CODE XREF: ___gxx_personality_sj0+189↓j
.text:00401B5C                 mov     bl, [eax]
.text:00401B5E                 inc     eax
.text:00401B5F                 mov     edx, ebx
.text:00401B61                 and     edx, 7Fh
.text:00401B64                 shl     edx, cl
.text:00401B66                 or      edi, edx
.text:00401B68                 add     ecx, 7
.text:00401B6B                 test    bl, bl
.text:00401B6D                 js      short loc_401B5C
.text:00401B6F                 dec     esi
.text:00401B70                 jnz     short loc_401B40
.text:00401B72                 mov     ebx, ebp
.text:00401B74                 inc     ebx
.text:00401B75                 mov     [esp+0BCh+val], ebx
.text:00401B79                 test    edi, edi
.text:00401B7B                 jz      loc_401DF7
.text:00401B81                 mov     eax, [esp+0BCh+var_24]
.text:00401B88                 lea     eax, [eax+edi-1]
.text:00401B8C                 mov     [esp+0BCh+var_98], eax
.text:00401B90                 test    ebx, ebx
.text:00401B92                 jz      loc_401D3C
.text:00401B98                 test    eax, eax
.text:00401B9A                 jz      loc_401E02
.text:00401BA0                 mov     edx, [esp+0BCh+arg_4]
.text:00401BA7                 and     edx, 8
.text:00401BAA                 mov     [esp+0BCh+var_84], edx
.text:00401BAE                 jnz     loc_401F0B
.text:00401BB4                 cmp     [esp+0BCh+var_86], 0
.text:00401BB9                 jnz     loc_401F18
.text:00401BBF                 mov     eax, [esp+0BCh+arg_10]
.text:00401BC6                 test    byte ptr [eax], 1
.text:00401BC9                 jz      loc_401F25
.text:00401BCF                 mov     eax, [eax-30h]
.text:00401BD2
.text:00401BD2 loc_401BD2:                             ; CODE XREF: ___gxx_personality_sj0+54B↓j
.text:00401BD2                 mov     [esp+0BCh+var_44], eax
.text:00401BD6                 mov     eax, [eax-50h]
.text:00401BD9                 mov     [esp+0BCh+var_90], eax
.text:00401BDD
.text:00401BDD loc_401BDD:                             ; CODE XREF: ___gxx_personality_sj0+52F↓j
.text:00401BDD                                         ; ___gxx_personality_sj0+53C↓j
.text:00401BDD                 mov     [esp+0BCh+var_85], 0
.text:00401BE2                 xchg    ax, ax
.text:00401BE4
.text:00401BE4 loc_401BE4:                             ; CODE XREF: ___gxx_personality_sj0+48C↓j
.text:00401BE4                 lea     edx, [esp+0BCh+var_3C]
.text:00401BEB                 mov     eax, [esp+0BCh+var_98]
.text:00401BEF                 call    __ZL12read_sleb128PKhPl ; read_sleb128(uchar const*,long *)
.text:00401BF4                 mov     [esp+0BCh+var_A4], eax
.text:00401BF8                 lea     edx, [esp+0BCh+var_38]
.text:00401BFF                 call    __ZL12read_sleb128PKhPl ; read_sleb128(uchar const*,long *)
.text:00401C04                 mov     edx, [esp+0BCh+var_3C]
.text:00401C0B                 cmp     edx, 0
.text:00401C0E                 jz      loc_401E58
.text:00401C14                 jle     loc_401E78
.text:00401C1A                 lea     eax, [esp+0BCh+var_34]
.text:00401C21                 call    __ZL15get_ttype_entryP16lsda_header_infom ; get_ttype_entry(lsda_header_info *,ulong)
.text:00401C26                 test    eax, eax
.text:00401C28                 jz      short loc_401C53
.text:00401C2A                 mov     esi, [esp+0BCh+var_90]
.text:00401C2E                 test    esi, esi
.text:00401C30                 jz      loc_401E5D
.text:00401C36                 mov     [esp+0BCh+fctx.call_site], 0FFFFFFFFh
.text:00401C3E                 lea     ecx, [esp+0BCh+var_44]
.text:00401C42                 mov     edx, [esp+0BCh+var_90]
.text:00401C46                 call    __ZL16get_adjusted_ptrPKSt9type_infoS1_PPv ; get_adjusted_ptr(std::type_info const*,std::type_info const*,void **)
.text:00401C4B                 test    al, al
.text:00401C4D                 jz      loc_401E5D
.text:00401C53
.text:00401C53 loc_401C53:                             ; CODE XREF: ___gxx_personality_sj0+244↑j
.text:00401C53                                         ; ___gxx_personality_sj0+4D4↓j
.text:00401C53                 mov     eax, [esp+0BCh+var_3C]
.text:00401C5A                 mov     [esp+0BCh+var_A4], eax
.text:00401C5E                 mov     eax, 3
.text:00401C63                 jmp     loc_401D29
.text:00401C68 ; ---------------------------------------------------------------------------
.text:00401C68
.text:00401C68 loc_401C68:                             ; CODE XREF: ___gxx_personality_sj0+BF↑j
.text:00401C68                 cmp     [esp+0BCh+var_86], 0
.text:00401C6D                 jnz     loc_401AA9
.text:00401C73                 mov     edx, [esp+0BCh+arg_10]
.text:00401C7A                 mov     edx, [edx-18h]
.text:00401C7D                 mov     [esp+0BCh+var_A4], edx
.text:00401C81                 mov     eax, [esp+0BCh+arg_10]
.text:00401C88                 mov     eax, [eax-10h]
.text:00401C8B                 mov     [esp+0BCh+var_94], eax
.text:00401C8F                 mov     edx, [esp+0BCh+arg_10]
.text:00401C96                 mov     edx, [edx-0Ch]
.text:00401C99                 mov     [esp+0BCh+val], edx
.text:00401C9D                 test    edx, edx
.text:00401C9F                 jz      loc_401DE8
.text:00401CA5
.text:00401CA5 loc_401CA5:                             ; CODE XREF: ___gxx_personality_sj0+3FE↓j
.text:00401CA5                 mov     eax, [esp+0BCh+var_A4]
.text:00401CA9                 test    eax, eax
.text:00401CAB                 jns     loc_401D74
.text:00401CB1                 mov     [esp+0BCh+fctx.call_site], 0FFFFFFFFh
.text:00401CB9                 lea     ecx, [esp+0BCh+var_34]
.text:00401CC0                 mov     edx, [esp+0BCh+var_94]
.text:00401CC4                 mov     eax, [esp+0BCh+context]
.text:00401CCB                 call    __ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info ; parse_lsda_header(_Unwind_Context *,uchar const*,lsda_header_info *)
.text:00401CD0                 movzx   eax, [esp+0BCh+var_20]
.text:00401CD8                 mov     edx, [esp+0BCh+context]
.text:00401CDF                 call    __ZL21base_of_encoded_valuehP15_Unwind_Context ; base_of_encoded_value(uchar,_Unwind_Context *)
.text:00401CE4                 mov     [esp+0BCh+var_2C], eax
.text:00401CEB                 movzx   eax, [esp+0BCh+var_20]
.text:00401CF3                 mov     edx, [esp+0BCh+context]
.text:00401CFA                 call    __ZL21base_of_encoded_valuehP15_Unwind_Context ; base_of_encoded_value(uchar,_Unwind_Context *)
.text:00401CFF                 mov     edx, [esp+0BCh+arg_10]
.text:00401D06                 mov     [edx-0Ch], eax
.text:00401D09                 jmp     short loc_401D74
.text:00401D09 ; ---------------------------------------------------------------------------
.text:00401D0B                 align 4
.text:00401D0C
.text:00401D0C loc_401D0C:                             ; CODE XREF: ___gxx_personality_sj0+150↑j
.text:00401D0C                 mov     [esp+0BCh+val], 0
.text:00401D14                 mov     eax, 1
.text:00401D19
.text:00401D19 loc_401D19:                             ; CODE XREF: ___gxx_personality_sj0+423↓j
.text:00401D19                 mov     [esp+0BCh+var_A4], 0
.text:00401D21                 mov     [esp+0BCh+var_98], 0
.text:00401D29
.text:00401D29 loc_401D29:                             ; CODE XREF: ___gxx_personality_sj0+27F↑j
.text:00401D29                                         ; ___gxx_personality_sj0+4F1↓j
.text:00401D29                 test    byte ptr [esp+0BCh+arg_4], 1
.text:00401D31                 jz      short loc_401D4C
.text:00401D33                 cmp     eax, 2
.text:00401D36                 jnz     loc_401E0C
.text:00401D3C
.text:00401D3C loc_401D3C:                             ; CODE XREF: ___gxx_personality_sj0+E2↑j
.text:00401D3C                                         ; ___gxx_personality_sj0+14A↑j ...
.text:00401D3C                 mov     [esp+0BCh+var_A4], 8
.text:00401D44                 jmp     loc_401A59
.text:00401D44 ; ---------------------------------------------------------------------------
.text:00401D49                 align 4
.text:00401D4C
.text:00401D4C loc_401D4C:                             ; CODE XREF: ___gxx_personality_sj0+34D↑j
.text:00401D4C                 test    byte ptr [esp+0BCh+arg_4], 8
.text:00401D54                 jnz     short loc_401D61
.text:00401D56                 cmp     [esp+0BCh+var_86], 0
.text:00401D5B                 jz      loc_401DE1
.text:00401D61
.text:00401D61 loc_401D61:                             ; CODE XREF: ___gxx_personality_sj0+370↑j
.text:00401D61                 dec     eax
.text:00401D62                 jz      loc_401F40
.text:00401D68                 mov     edx, [esp+0BCh+var_A4]
.text:00401D6C                 test    edx, edx
.text:00401D6E                 js      loc_401F45
.text:00401D74
.text:00401D74 loc_401D74:                             ; CODE XREF: ___gxx_personality_sj0+2C7↑j
.text:00401D74                                         ; ___gxx_personality_sj0+325↑j
.text:00401D74                 mov     eax, [esp+0BCh+arg_10]
.text:00401D7B                 mov     [esp+0BCh+v], eax ; v
.text:00401D7F                 mov     [esp+0BCh+ip_before_insn], 0 ; r
.text:00401D87                 mov     edx, [esp+0BCh+context]
.text:00401D8E                 mov     [esp+0BCh+lpfctx], edx ; lpuctx
.text:00401D91                 mov     [esp+0BCh+fctx.call_site], 0FFFFFFFFh
.text:00401D99                 call    __Unwind_SetGR
.text:00401D9E                 mov     eax, [esp+0BCh+var_A4]
.text:00401DA2                 mov     [esp+0BCh+v], eax ; v
.text:00401DA6                 mov     [esp+0BCh+ip_before_insn], 1 ; r
.text:00401DAE                 mov     edx, [esp+0BCh+context]
.text:00401DB5                 mov     [esp+0BCh+lpfctx], edx ; lpuctx
.text:00401DB8                 call    __Unwind_SetGR
.text:00401DBD                 mov     eax, [esp+0BCh+val]
.text:00401DC1                 mov     [esp+0BCh+ip_before_insn], eax ; val
.text:00401DC5                 mov     edx, [esp+0BCh+context]
.text:00401DCC                 mov     [esp+0BCh+lpfctx], edx ; context
.text:00401DCF                 call    __Unwind_SetIP
.text:00401DD4                 mov     [esp+0BCh+var_A4], 7
.text:00401DDC                 jmp     loc_401A59
.text:00401DE1 ; ---------------------------------------------------------------------------
.text:00401DE1
.text:00401DE1 loc_401DE1:                             ; CODE XREF: ___gxx_personality_sj0+377↑j
.text:00401DE1                 dec     eax
.text:00401DE2                 jnz     loc_401CA5
.text:00401DE8
.text:00401DE8 loc_401DE8:                             ; CODE XREF: ___gxx_personality_sj0+2BB↑j
.text:00401DE8                 mov     eax, [esp+0BCh+arg_10]
.text:00401DEF                 mov     [esp+0BCh+lpfctx], eax ; _Unwind_Exception *
.text:00401DF2                 call    ___cxa_call_terminate
.text:00401DF7 ; ---------------------------------------------------------------------------
.text:00401DF7
.text:00401DF7 loc_401DF7:                             ; CODE XREF: ___gxx_personality_sj0+197↑j
.text:00401DF7                 cmp     [esp+0BCh+val], 0
.text:00401DFC                 jz      loc_401D3C
.text:00401E02
.text:00401E02 loc_401E02:                             ; CODE XREF: ___gxx_personality_sj0+1B6↑j
.text:00401E02                 mov     eax, 2
.text:00401E07                 jmp     loc_401D19
.text:00401E0C ; ---------------------------------------------------------------------------
.text:00401E0C
.text:00401E0C loc_401E0C:                             ; CODE XREF: ___gxx_personality_sj0+352↑j
.text:00401E0C                 cmp     [esp+0BCh+var_86], 0
.text:00401E11                 jnz     loc_401EFE
.text:00401E17                 mov     edx, [esp+0BCh+var_A4]
.text:00401E1B                 mov     eax, [esp+0BCh+arg_10]
.text:00401E22                 mov     [eax-18h], edx
.text:00401E25                 mov     edx, [esp+0BCh+var_98]
.text:00401E29                 mov     [eax-14h], edx
.text:00401E2C                 mov     edx, [esp+0BCh+var_94]
.text:00401E30                 mov     [eax-10h], edx
.text:00401E33                 mov     eax, [esp+0BCh+var_44]
.text:00401E37                 mov     edx, [esp+0BCh+arg_10]
.text:00401E3E                 mov     [edx-8], eax
.text:00401E41                 mov     eax, [esp+0BCh+val]
.text:00401E45                 mov     [edx-0Ch], eax
.text:00401E48                 mov     [esp+0BCh+var_A4], 6
.text:00401E50                 jmp     loc_401A59
.text:00401E50 ; ---------------------------------------------------------------------------
.text:00401E55                 align 4
.text:00401E58
.text:00401E58 loc_401E58:                             ; CODE XREF: ___gxx_personality_sj0+22A↑j
.text:00401E58                 mov     [esp+0BCh+var_85], 1
.text:00401E5D
.text:00401E5D loc_401E5D:                             ; CODE XREF: ___gxx_personality_sj0+24C↑j
.text:00401E5D                                         ; ___gxx_personality_sj0+269↑j ...
.text:00401E5D                 mov     eax, [esp+0BCh+var_38]
.text:00401E64                 test    eax, eax
.text:00401E66                 jz      short loc_401EBD
.text:00401E68                 add     eax, [esp+0BCh+var_A4]
.text:00401E6C                 mov     [esp+0BCh+var_98], eax
.text:00401E70                 jmp     loc_401BE4
.text:00401E70 ; ---------------------------------------------------------------------------
.text:00401E75                 align 4
.text:00401E78
.text:00401E78 loc_401E78:                             ; CODE XREF: ___gxx_personality_sj0+230↑j
.text:00401E78                 mov     ebx, [esp+0BCh+var_90]
.text:00401E7C                 test    ebx, ebx
.text:00401E7E                 jz      short loc_401E8F
.text:00401E80                 mov     ecx, [esp+0BCh+var_84]
.text:00401E84                 test    ecx, ecx
.text:00401E86                 jnz     short loc_401E8F
.text:00401E88                 cmp     [esp+0BCh+var_86], 0
.text:00401E8D                 jz      short loc_401EDA
.text:00401E8F
.text:00401E8F loc_401E8F:                             ; CODE XREF: ___gxx_personality_sj0+49A↑j
.text:00401E8F                                         ; ___gxx_personality_sj0+4A2↑j
.text:00401E8F                 not     edx
.text:00401E91                 add     edx, [esp+0BCh+var_28]
.text:00401E98                 xor     esi, esi
.text:00401E9A                 xor     ecx, ecx
.text:00401E9C
.text:00401E9C loc_401E9C:                             ; CODE XREF: ___gxx_personality_sj0+4C9↓j
.text:00401E9C                 mov     bl, [edx]
.text:00401E9E                 inc     edx
.text:00401E9F                 mov     eax, ebx
.text:00401EA1                 and     eax, 7Fh
.text:00401EA4                 shl     eax, cl
.text:00401EA6                 or      esi, eax
.text:00401EA8                 add     ecx, 7
.text:00401EAB                 test    bl, bl
.text:00401EAD                 js      short loc_401E9C
.text:00401EAF                 test    esi, esi
.text:00401EB1                 setz    al
.text:00401EB4
.text:00401EB4 loc_401EB4:                             ; CODE XREF: ___gxx_personality_sj0+518↓j
.text:00401EB4                 test    al, al
.text:00401EB6                 jz      short loc_401E5D
.text:00401EB8                 jmp     loc_401C53
.text:00401EBD ; ---------------------------------------------------------------------------
.text:00401EBD
.text:00401EBD loc_401EBD:                             ; CODE XREF: ___gxx_personality_sj0+482↑j
.text:00401EBD                 cmp     [esp+0BCh+var_85], 0
.text:00401EC2                 jz      loc_401D3C
.text:00401EC8                 mov     [esp+0BCh+var_A4], 0
.text:00401ED0                 mov     eax, 2
.text:00401ED5                 jmp     loc_401D29
.text:00401EDA ; ---------------------------------------------------------------------------
.text:00401EDA
.text:00401EDA loc_401EDA:                             ; CODE XREF: ___gxx_personality_sj0+4A9↑j
.text:00401EDA                 mov     ecx, [esp+0BCh+var_44]
.text:00401EDE                 mov     [esp+0BCh+lpfctx], edx
.text:00401EE1                 mov     [esp+0BCh+fctx.call_site], 0FFFFFFFFh
.text:00401EE9                 mov     edx, [esp+0BCh+var_90]
.text:00401EED                 lea     eax, [esp+0BCh+var_34]
.text:00401EF4                 call    __ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl ; check_exception_spec(lsda_header_info *,std::type_info const*,void *,long)
.text:00401EF9                 xor     eax, 1
.text:00401EFC                 jmp     short loc_401EB4
.text:00401EFE ; ---------------------------------------------------------------------------
.text:00401EFE
.text:00401EFE loc_401EFE:                             ; CODE XREF: ___gxx_personality_sj0+42D↑j
.text:00401EFE                 mov     [esp+0BCh+var_A4], 6
.text:00401F06                 jmp     loc_401A59
.text:00401F0B ; ---------------------------------------------------------------------------
.text:00401F0B
.text:00401F0B loc_401F0B:                             ; CODE XREF: ___gxx_personality_sj0+1CA↑j
.text:00401F0B                 mov     [esp+0BCh+var_90], offset __ZTIN10__cxxabiv115__forced_unwindE ; `typeinfo for'__cxxabiv1::__forced_unwind
.text:00401F13                 jmp     loc_401BDD
.text:00401F18 ; ---------------------------------------------------------------------------
.text:00401F18
.text:00401F18 loc_401F18:                             ; CODE XREF: ___gxx_personality_sj0+1D5↑j
.text:00401F18                 mov     [esp+0BCh+var_90], offset __ZTIN10__cxxabiv119__foreign_exceptionE ; `typeinfo for'__cxxabiv1::__foreign_exception
.text:00401F20                 jmp     loc_401BDD
.text:00401F25 ; ---------------------------------------------------------------------------
.text:00401F25
.text:00401F25 loc_401F25:                             ; CODE XREF: ___gxx_personality_sj0+1E5↑j
.text:00401F25                 mov     eax, [esp+0BCh+arg_10]
.text:00401F2C                 add     eax, 20h ; ' '
.text:00401F2F                 jmp     loc_401BD2
.text:00401F34 ; ---------------------------------------------------------------------------
.text:00401F34
.text:00401F34 loc_401F34:                             ; DATA XREF: ___gxx_personality_sj0+3B↑o
.text:00401F34 ;   catch(...) // owned by 401A37
.text:00401F34                 mov     eax, [esp+0BCh+fctx.data]
.text:00401F38                 mov     [esp+0BCh+lpfctx], eax ; void *
.text:00401F3B                 call    ___cxa_begin_catch
.text:00401F40
.text:00401F40 loc_401F40:                             ; CODE XREF: ___gxx_personality_sj0+37E↑j
.text:00401F40                 call    __ZSt9terminatev ; std::terminate(void)
.text:00401F45 ; ---------------------------------------------------------------------------
.text:00401F45
.text:00401F45 loc_401F45:                             ; CODE XREF: ___gxx_personality_sj0+38A↑j
.text:00401F45                 mov     [esp+0BCh+fctx.call_site], 1
.text:00401F4D                 call    __ZSt10unexpectedv ; std::unexpected(void)
.text:00401F4D ;   } // starts at 401A37
.text:00401F4D ; } // starts at 401A37
.text:00401F4D ___gxx_personality_sj0 endp
.text:00401F4D
.text:00401F4D ; ---------------------------------------------------------------------------
.text:00401F52                 align 4
.text:00401F54
.text:00401F54 ; =============== S U B R O U T I N E =======================================
.text:00401F54
.text:00401F54 ; Attributes: noreturn
.text:00401F54
.text:00401F54 ; void __cdecl __noreturn __cxa_call_unexpected(void *)
.text:00401F54                 public ___cxa_call_unexpected
.text:00401F54 ___cxa_call_unexpected proc near        ; CODE XREF: operator new(uint):loc_4034FD↓p
.text:00401F54                                         ; std::terminate(void):loc_403A0A↓p ...
.text:00401F54
.text:00401F54 lpfctx          = dword ptr -8Ch
.text:00401F54 lptinfo         = dword ptr -88h
.text:00401F54 var_84          = dword ptr -84h
.text:00401F54 lpuexcpt        = dword ptr -70h
.text:00401F54 var_6C          = dword ptr -6Ch
.text:00401F54 var_68          = dword ptr -68h
.text:00401F54 var_64          = dword ptr -64h
.text:00401F54 fctx            = SjLj_Function_Context ptr -60h
.text:00401F54 var_3C          = dword ptr -3Ch
.text:00401F54 var_38          = dword ptr -38h
.text:00401F54 var_24          = byte ptr -24h
.text:00401F54 var_1C          = dword ptr -1Ch
.text:00401F54 var_C           = byte ptr -0Ch
.text:00401F54 arg_0           = dword ptr  4
.text:00401F54
.text:00401F54                 push    ebp
.text:00401F55                 sub     esp, 88h
.text:00401F5B                 mov     [esp+8Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00401F63                 mov     [esp+8Ch+fctx.lsda], offset dword_412260
.text:00401F6B                 lea     eax, [esp+8Ch+var_C]
.text:00401F72                 mov     [esp+8Ch+fctx.jbuf], eax
.text:00401F76                 mov     [esp+8Ch+var_3C], offset loc_401FE8
.text:00401F7E                 mov     [esp+8Ch+var_38], esp
.text:00401F82                 lea     eax, [esp+8Ch+fctx]
.text:00401F86                 mov     [esp+8Ch+lpfctx], eax ; lpfctx
.text:00401F89                 call    __Unwind_SjLj_Register
.text:00401F8E ; __unwind { // ___gxx_personality_sj0
.text:00401F8E ;   try {
.text:00401F8E                 mov     edx, [esp+8Ch+arg_0]
.text:00401F95                 mov     [esp+8Ch+lpfctx], edx ; void *
.text:00401F98                 call    ___cxa_begin_catch
.text:00401F9D                 mov     eax, [esp+8Ch+arg_0]
.text:00401FA4                 mov     eax, [eax-10h]
.text:00401FA7                 mov     [esp+8Ch+var_68], eax
.text:00401FAB                 mov     edx, [esp+8Ch+arg_0]
.text:00401FB2                 mov     edx, [edx-18h]
.text:00401FB5                 mov     [esp+8Ch+var_6C], edx
.text:00401FB9                 mov     eax, [esp+8Ch+arg_0]
.text:00401FC0                 mov     eax, [eax-24h]
.text:00401FC3                 mov     [esp+8Ch+var_64], eax
.text:00401FC7                 mov     edx, [esp+8Ch+arg_0]
.text:00401FCE                 mov     eax, [edx-0Ch]
.text:00401FD1                 mov     [esp+8Ch+var_1C], eax
.text:00401FD5                 mov     eax, [edx-28h]
.text:00401FD8                 mov     [esp+8Ch+lpfctx], eax ; void (*)(void)
.text:00401FDB                 mov     [esp+8Ch+fctx.call_site], 1
.text:00401FE3                 call    __ZN10__cxxabiv112__unexpectedEPFvvE ; __cxxabiv1::__unexpected(void (*)(void))
.text:00401FE8 ; ---------------------------------------------------------------------------
.text:00401FE8
.text:00401FE8 loc_401FE8:                             ; DATA XREF: ___cxa_call_unexpected+22↑o
.text:00401FE8 ;   cleanup() // owned by 401F8E
.text:00401FE8 ;   catch(...) // owned by 401F8E
.text:00401FE8                 mov     edx, [esp+8Ch+fctx.data]
.text:00401FEC                 mov     [esp+8Ch+lpuexcpt], edx ; int
.text:00401FF0                 mov     eax, [esp+8Ch+fctx.call_site]
.text:00401FF4                 test    eax, eax
.text:00401FF6                 jz      short loc_401FFD
.text:00401FF8                 dec     eax
.text:00401FF9                 jz      short loc_40205E
.text:00401FFB                 ud2
.text:00401FFD ; ---------------------------------------------------------------------------
.text:00401FFD
.text:00401FFD loc_401FFD:                             ; CODE XREF: ___cxa_call_unexpected+A2↑j
.text:00401FFD                 mov     eax, [esp+8Ch+lpuexcpt]
.text:00402001                 mov     [esp+8Ch+lpfctx], eax ; int
.text:00402004                 call    ___cxa_begin_catch
.text:00402009                 call    ___cxa_get_globals_fast
.text:0040200E                 mov     eax, [eax]
.text:00402010                 lea     edx, [eax+50h]
.text:00402013                 mov     [esp+8Ch+lpuexcpt], edx
.text:00402017                 test    byte ptr [eax+30h], 1
.text:0040201B                 jz      short loc_402023
.text:0040201D                 mov     eax, [eax]
.text:0040201F                 mov     [esp+8Ch+lpuexcpt], eax
.text:00402023
.text:00402023 loc_402023:                             ; CODE XREF: ___cxa_call_unexpected+C7↑j
.text:00402023                 mov     [esp+8Ch+fctx.call_site], 2
.text:0040202B                 lea     ecx, [esp+8Ch+var_24]
.text:0040202F                 mov     edx, [esp+8Ch+var_68]
.text:00402033                 xor     eax, eax
.text:00402035                 call    __ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info ; parse_lsda_header(_Unwind_Context *,uchar const*,lsda_header_info *)
.text:0040203A                 mov     eax, [esp+8Ch+lpuexcpt]
.text:0040203E                 mov     edx, [eax-50h]
.text:00402041                 mov     eax, [esp+8Ch+var_6C]
.text:00402045                 mov     [esp+8Ch+lpfctx], eax
.text:00402048                 mov     ecx, [esp+8Ch+lpuexcpt]
.text:0040204C                 lea     eax, [esp+8Ch+var_24]
.text:00402050                 call    __ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl ; check_exception_spec(lsda_header_info *,std::type_info const*,void *,long)
.text:00402055                 test    al, al
.text:00402057                 jz      short loc_402084
.text:00402059                 call    ___cxa_rethrow
.text:0040205E ; ---------------------------------------------------------------------------
.text:0040205E
.text:0040205E loc_40205E:                             ; CODE XREF: ___cxa_call_unexpected+A5↑j
.text:0040205E                 mov     [esp+8Ch+fctx.call_site], 0
.text:00402066                 call    ___cxa_end_catch
.text:0040206B                 call    ___cxa_end_catch
.text:00402070                 mov     eax, [esp+8Ch+lpuexcpt]
.text:00402074                 mov     [esp+8Ch+lpfctx], eax ; lpuexcpt
.text:00402077                 mov     [esp+8Ch+fctx.call_site], 0FFFFFFFFh
.text:0040207F                 call    __Unwind_SjLj_Resume
.text:00402084 ; ---------------------------------------------------------------------------
.text:00402084
.text:00402084 loc_402084:                             ; CODE XREF: ___cxa_call_unexpected+103↑j
.text:00402084                 mov     edx, [esp+8Ch+var_6C]
.text:00402088                 mov     [esp+8Ch+lpfctx], edx
.text:0040208B                 mov     [esp+8Ch+fctx.call_site], 2
.text:00402093                 xor     ecx, ecx
.text:00402095                 mov     edx, offset __ZTISt13bad_exception ; `typeinfo for'std::bad_exception
.text:0040209A                 lea     eax, [esp+8Ch+var_24]
.text:0040209E                 call    __ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl ; check_exception_spec(lsda_header_info *,std::type_info const*,void *,long)
.text:004020A3                 test    al, al
.text:004020A5                 jz      short loc_4020D1
.text:004020A7                 mov     [esp+8Ch+lpfctx], 4 ; thrown_size
.text:004020AE                 call    ___cxa_allocate_exception
.text:004020B3                 mov     dword ptr [eax], offset off_416460
.text:004020B9                 mov     [esp+8Ch+var_84], offset __ZNSt13bad_exceptionD1Ev ; void (__cdecl *)(void *)
.text:004020C1                 mov     [esp+8Ch+lptinfo], offset __ZTISt13bad_exception ; lptinfo
.text:004020C9                 mov     [esp+8Ch+lpfctx], eax ; void *
.text:004020CC                 call    ___cxa_throw
.text:004020D1 ; ---------------------------------------------------------------------------
.text:004020D1
.text:004020D1 loc_4020D1:                             ; CODE XREF: ___cxa_call_unexpected+151↑j
.text:004020D1                 mov     eax, [esp+8Ch+var_64]
.text:004020D5                 mov     [esp+8Ch+lpfctx], eax ; void (*)(void)
.text:004020D8                 call    __ZN10__cxxabiv111__terminateEPFvvE ; __cxxabiv1::__terminate(void (*)(void))
.text:004020D8 ;   } // starts at 401F8E
.text:004020D8 ; } // starts at 401F8E
.text:004020D8 ___cxa_call_unexpected endp
.text:004020D8
.text:004020D8 ; ---------------------------------------------------------------------------
.text:004020DD                 align 10h
.text:004020E0
.text:004020E0 ; =============== S U B R O U T I N E =======================================
.text:004020E0
.text:004020E0
.text:004020E0 ; std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base *, std::_Rb_tree_node_base *&)
.text:004020E0 __ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_ proc near
.text:004020E0                                         ; CODE XREF: std::_Rb_tree_rotate_left(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)+8↓j
.text:004020E0                                         ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+B5↓p ...
.text:004020E0                 push    ebx
.text:004020E1                 mov     ecx, [eax+0Ch]
.text:004020E4                 mov     ebx, [ecx+8]
.text:004020E7                 mov     [eax+0Ch], ebx
.text:004020EA                 test    ebx, ebx
.text:004020EC                 jz      short loc_4020F1
.text:004020EE                 mov     [ebx+4], eax
.text:004020F1
.text:004020F1 loc_4020F1:                             ; CODE XREF: std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)+C↑j
.text:004020F1                 mov     ebx, [eax+4]
.text:004020F4                 mov     [ecx+4], ebx
.text:004020F7                 cmp     [edx], eax
.text:004020F9                 jz      short loc_402110
.text:004020FB                 mov     edx, [eax+4]
.text:004020FE                 cmp     [edx+8], eax
.text:00402101                 jz      short loc_40211C
.text:00402103                 mov     [edx+0Ch], ecx
.text:00402106
.text:00402106 loc_402106:                             ; CODE XREF: std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)+3F↓j
.text:00402106                 mov     [ecx+8], eax
.text:00402109                 mov     [eax+4], ecx
.text:0040210C                 pop     ebx
.text:0040210D                 retn
.text:0040210D ; ---------------------------------------------------------------------------
.text:0040210E                 align 10h
.text:00402110
.text:00402110 loc_402110:                             ; CODE XREF: std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)+19↑j
.text:00402110                 mov     [edx], ecx
.text:00402112                 mov     [ecx+8], eax
.text:00402115                 mov     [eax+4], ecx
.text:00402118                 pop     ebx
.text:00402119                 retn
.text:00402119 ; ---------------------------------------------------------------------------
.text:0040211A                 align 4
.text:0040211C
.text:0040211C loc_40211C:                             ; CODE XREF: std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)+21↑j
.text:0040211C                 mov     [edx+8], ecx
.text:0040211F                 jmp     short loc_402106
.text:0040211F __ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_ endp
.text:0040211F
.text:0040211F ; ---------------------------------------------------------------------------
.text:00402121                 align 4
.text:00402124
.text:00402124 ; =============== S U B R O U T I N E =======================================
.text:00402124
.text:00402124
.text:00402124 ; std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base *, std::_Rb_tree_node_base *&)
.text:00402124 __ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_ proc near
.text:00402124                                         ; CODE XREF: std::_Rb_tree_rotate_right(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)+8↓j
.text:00402124                                         ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+DD↓p ...
.text:00402124                 push    ebx
.text:00402125                 mov     ecx, [eax+8]
.text:00402128                 mov     ebx, [ecx+0Ch]
.text:0040212B                 mov     [eax+8], ebx
.text:0040212E                 test    ebx, ebx
.text:00402130                 jz      short loc_402135
.text:00402132                 mov     [ebx+4], eax
.text:00402135
.text:00402135 loc_402135:                             ; CODE XREF: std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)+C↑j
.text:00402135                 mov     ebx, [eax+4]
.text:00402138                 mov     [ecx+4], ebx
.text:0040213B                 cmp     [edx], eax
.text:0040213D                 jz      short loc_402154
.text:0040213F                 mov     edx, [eax+4]
.text:00402142                 cmp     [edx+0Ch], eax
.text:00402145                 jz      short loc_402160
.text:00402147                 mov     [edx+8], ecx
.text:0040214A
.text:0040214A loc_40214A:                             ; CODE XREF: std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)+3F↓j
.text:0040214A                 mov     [ecx+0Ch], eax
.text:0040214D                 mov     [eax+4], ecx
.text:00402150                 pop     ebx
.text:00402151                 retn
.text:00402151 ; ---------------------------------------------------------------------------
.text:00402152                 align 4
.text:00402154
.text:00402154 loc_402154:                             ; CODE XREF: std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)+19↑j
.text:00402154                 mov     [edx], ecx
.text:00402156                 mov     [ecx+0Ch], eax
.text:00402159                 mov     [eax+4], ecx
.text:0040215C                 pop     ebx
.text:0040215D                 retn
.text:0040215D ; ---------------------------------------------------------------------------
.text:0040215E                 align 10h
.text:00402160
.text:00402160 loc_402160:                             ; CODE XREF: std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)+21↑j
.text:00402160                 mov     [edx+0Ch], ecx
.text:00402163                 jmp     short loc_40214A
.text:00402163 __ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_ endp
.text:00402163
.text:00402163 ; ---------------------------------------------------------------------------
.text:00402165                 align 4
.text:00402168
.text:00402168 ; =============== S U B R O U T I N E =======================================
.text:00402168
.text:00402168
.text:00402168 ; std::local_Rb_tree_decrement(std::_Rb_tree_node_base *)
.text:00402168 __ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base proc near
.text:00402168                                         ; CODE XREF: std::_Rb_tree_decrement(std::_Rb_tree_node_base *)+4↓j
.text:00402168                                         ; std::_Rb_tree_decrement(std::_Rb_tree_node_base const*)+4↓j
.text:00402168                 mov     edx, [eax]
.text:0040216A                 test    edx, edx
.text:0040216C                 jnz     short loc_402178
.text:0040216E                 mov     edx, [eax+4]
.text:00402171                 mov     edx, [edx+4]
.text:00402174                 cmp     edx, eax
.text:00402176                 jz      short loc_402190
.text:00402178
.text:00402178 loc_402178:                             ; CODE XREF: std::local_Rb_tree_decrement(std::_Rb_tree_node_base *)+4↑j
.text:00402178                 mov     ecx, [eax+8]
.text:0040217B                 test    ecx, ecx
.text:0040217D                 jnz     short loc_402186
.text:0040217F                 jmp     short loc_402194
.text:0040217F ; ---------------------------------------------------------------------------
.text:00402181                 align 4
.text:00402184
.text:00402184 loc_402184:                             ; CODE XREF: std::local_Rb_tree_decrement(std::_Rb_tree_node_base *)+23↓j
.text:00402184                 mov     ecx, edx
.text:00402186
.text:00402186 loc_402186:                             ; CODE XREF: std::local_Rb_tree_decrement(std::_Rb_tree_node_base *)+15↑j
.text:00402186                 mov     edx, [ecx+0Ch]
.text:00402189                 test    edx, edx
.text:0040218B                 jnz     short loc_402184
.text:0040218D                 mov     eax, ecx
.text:0040218F                 retn
.text:00402190 ; ---------------------------------------------------------------------------
.text:00402190
.text:00402190 loc_402190:                             ; CODE XREF: std::local_Rb_tree_decrement(std::_Rb_tree_node_base *)+E↑j
.text:00402190                 mov     eax, [edx+0Ch]
.text:00402193                 retn
.text:00402194 ; ---------------------------------------------------------------------------
.text:00402194
.text:00402194 loc_402194:                             ; CODE XREF: std::local_Rb_tree_decrement(std::_Rb_tree_node_base *)+17↑j
.text:00402194                 mov     edx, [eax+4]
.text:00402197                 cmp     eax, [edx+8]
.text:0040219A                 jz      short loc_4021A2
.text:0040219C                 jmp     short loc_4021AB
.text:0040219C ; ---------------------------------------------------------------------------
.text:0040219E                 align 10h
.text:004021A0
.text:004021A0 loc_4021A0:                             ; CODE XREF: std::local_Rb_tree_decrement(std::_Rb_tree_node_base *)+40↓j
.text:004021A0                 mov     edx, eax
.text:004021A2
.text:004021A2 loc_4021A2:                             ; CODE XREF: std::local_Rb_tree_decrement(std::_Rb_tree_node_base *)+32↑j
.text:004021A2                 mov     eax, [edx+4]
.text:004021A5                 cmp     [eax+8], edx
.text:004021A8                 jz      short loc_4021A0
.text:004021AA                 retn
.text:004021AB ; ---------------------------------------------------------------------------
.text:004021AB
.text:004021AB loc_4021AB:                             ; CODE XREF: std::local_Rb_tree_decrement(std::_Rb_tree_node_base *)+34↑j
.text:004021AB                 mov     eax, edx
.text:004021AD                 retn
.text:004021AD __ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base endp
.text:004021AD
.text:004021AD ; ---------------------------------------------------------------------------
.text:004021AE                 align 10h
.text:004021B0
.text:004021B0 ; =============== S U B R O U T I N E =======================================
.text:004021B0
.text:004021B0
.text:004021B0 ; std::_Rb_tree_increment(std::_Rb_tree_node_base *)
.text:004021B0                 public __ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base
.text:004021B0 __ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base proc near
.text:004021B0
.text:004021B0 arg_0           = dword ptr  4
.text:004021B0
.text:004021B0                 mov     ecx, [esp+arg_0]
.text:004021B4                 mov     eax, [ecx+0Ch]
.text:004021B7                 test    eax, eax
.text:004021B9                 jnz     short loc_4021C2
.text:004021BB                 jmp     short loc_4021CA
.text:004021BB ; ---------------------------------------------------------------------------
.text:004021BD                 align 10h
.text:004021C0
.text:004021C0 loc_4021C0:                             ; CODE XREF: std::_Rb_tree_increment(std::_Rb_tree_node_base *)+17↓j
.text:004021C0                 mov     eax, edx
.text:004021C2
.text:004021C2 loc_4021C2:                             ; CODE XREF: std::_Rb_tree_increment(std::_Rb_tree_node_base *)+9↑j
.text:004021C2                 mov     edx, [eax+8]
.text:004021C5                 test    edx, edx
.text:004021C7                 jnz     short loc_4021C0
.text:004021C9                 retn
.text:004021CA ; ---------------------------------------------------------------------------
.text:004021CA
.text:004021CA loc_4021CA:                             ; CODE XREF: std::_Rb_tree_increment(std::_Rb_tree_node_base *)+B↑j
.text:004021CA                 mov     edx, [ecx+4]
.text:004021CD                 cmp     ecx, [edx+0Ch]
.text:004021D0                 jz      short loc_4021D6
.text:004021D2                 jmp     short loc_4021E4
.text:004021D4 ; ---------------------------------------------------------------------------
.text:004021D4
.text:004021D4 loc_4021D4:                             ; CODE XREF: std::_Rb_tree_increment(std::_Rb_tree_node_base *)+2C↓j
.text:004021D4                 mov     edx, eax
.text:004021D6
.text:004021D6 loc_4021D6:                             ; CODE XREF: std::_Rb_tree_increment(std::_Rb_tree_node_base *)+20↑j
.text:004021D6                 mov     eax, [edx+4]
.text:004021D9                 cmp     [eax+0Ch], edx
.text:004021DC                 jz      short loc_4021D4
.text:004021DE                 cmp     eax, [edx+0Ch]
.text:004021E1                 jz      short loc_4021E4
.text:004021E3                 retn
.text:004021E4 ; ---------------------------------------------------------------------------
.text:004021E4
.text:004021E4 loc_4021E4:                             ; CODE XREF: std::_Rb_tree_increment(std::_Rb_tree_node_base *)+22↑j
.text:004021E4                                         ; std::_Rb_tree_increment(std::_Rb_tree_node_base *)+31↑j
.text:004021E4                 mov     eax, edx
.text:004021E6                 retn
.text:004021E6 __ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base endp
.text:004021E6
.text:004021E6 ; ---------------------------------------------------------------------------
.text:004021E7                 align 4
.text:004021E8
.text:004021E8 ; =============== S U B R O U T I N E =======================================
.text:004021E8
.text:004021E8
.text:004021E8 ; std::_Rb_tree_increment(std::_Rb_tree_node_base const*)
.text:004021E8                 public __ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base
.text:004021E8 __ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base proc near
.text:004021E8
.text:004021E8 arg_0           = dword ptr  4
.text:004021E8
.text:004021E8                 mov     ecx, [esp+arg_0]
.text:004021EC                 mov     eax, [ecx+0Ch]
.text:004021EF                 test    eax, eax
.text:004021F1                 jnz     short loc_4021FA
.text:004021F3                 jmp     short loc_402202
.text:004021F3 ; ---------------------------------------------------------------------------
.text:004021F5                 align 4
.text:004021F8
.text:004021F8 loc_4021F8:                             ; CODE XREF: std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+17↓j
.text:004021F8                 mov     eax, edx
.text:004021FA
.text:004021FA loc_4021FA:                             ; CODE XREF: std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+9↑j
.text:004021FA                 mov     edx, [eax+8]
.text:004021FD                 test    edx, edx
.text:004021FF                 jnz     short loc_4021F8
.text:00402201                 retn
.text:00402202 ; ---------------------------------------------------------------------------
.text:00402202
.text:00402202 loc_402202:                             ; CODE XREF: std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+B↑j
.text:00402202                 mov     edx, [ecx+4]
.text:00402205                 cmp     ecx, [edx+0Ch]
.text:00402208                 jz      short loc_40220E
.text:0040220A                 jmp     short loc_40221C
.text:0040220C ; ---------------------------------------------------------------------------
.text:0040220C
.text:0040220C loc_40220C:                             ; CODE XREF: std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+2C↓j
.text:0040220C                 mov     edx, eax
.text:0040220E
.text:0040220E loc_40220E:                             ; CODE XREF: std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+20↑j
.text:0040220E                 mov     eax, [edx+4]
.text:00402211                 cmp     [eax+0Ch], edx
.text:00402214                 jz      short loc_40220C
.text:00402216                 cmp     eax, [edx+0Ch]
.text:00402219                 jz      short loc_40221C
.text:0040221B                 retn
.text:0040221C ; ---------------------------------------------------------------------------
.text:0040221C
.text:0040221C loc_40221C:                             ; CODE XREF: std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+22↑j
.text:0040221C                                         ; std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+31↑j
.text:0040221C                 mov     eax, edx
.text:0040221E                 retn
.text:0040221E __ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base endp
.text:0040221E
.text:0040221E ; ---------------------------------------------------------------------------
.text:0040221F                 align 10h
.text:00402220
.text:00402220 ; =============== S U B R O U T I N E =======================================
.text:00402220
.text:00402220
.text:00402220 ; std::_Rb_tree_decrement(std::_Rb_tree_node_base *)
.text:00402220                 public __ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base
.text:00402220 __ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base proc near
.text:00402220                                         ; CODE XREF: std::_Rb_tree_iterator<int>::operator--(void)+11↓p
.text:00402220
.text:00402220 arg_0           = dword ptr  4
.text:00402220
.text:00402220                 mov     eax, [esp+arg_0]
.text:00402224                 jmp     __ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base ; std::local_Rb_tree_decrement(std::_Rb_tree_node_base *)
.text:00402224 __ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base endp
.text:00402224
.text:00402224 ; ---------------------------------------------------------------------------
.text:00402229                 align 4
.text:0040222C
.text:0040222C ; =============== S U B R O U T I N E =======================================
.text:0040222C
.text:0040222C
.text:0040222C ; std::_Rb_tree_decrement(std::_Rb_tree_node_base const*)
.text:0040222C                 public __ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base
.text:0040222C __ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base proc near
.text:0040222C
.text:0040222C arg_0           = dword ptr  4
.text:0040222C
.text:0040222C                 mov     eax, [esp+arg_0]
.text:00402230                 jmp     __ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base ; std::local_Rb_tree_decrement(std::_Rb_tree_node_base *)
.text:00402230 __ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base endp
.text:00402230
.text:00402230 ; ---------------------------------------------------------------------------
.text:00402235                 align 4
.text:00402238
.text:00402238 ; =============== S U B R O U T I N E =======================================
.text:00402238
.text:00402238
.text:00402238 ; std::_Rb_tree_rotate_left(std::_Rb_tree_node_base *, std::_Rb_tree_node_base *&)
.text:00402238                 public __ZSt20_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_
.text:00402238 __ZSt20_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_ proc near
.text:00402238
.text:00402238 arg_0           = dword ptr  4
.text:00402238 arg_4           = dword ptr  8
.text:00402238
.text:00402238                 mov     edx, [esp+arg_4]
.text:0040223C                 mov     eax, [esp+arg_0]
.text:00402240                 jmp     __ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_ ; std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)
.text:00402240 __ZSt20_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_ endp
.text:00402240
.text:00402240 ; ---------------------------------------------------------------------------
.text:00402245                 align 4
.text:00402248
.text:00402248 ; =============== S U B R O U T I N E =======================================
.text:00402248
.text:00402248
.text:00402248 ; std::_Rb_tree_rotate_right(std::_Rb_tree_node_base *, std::_Rb_tree_node_base *&)
.text:00402248                 public __ZSt21_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_
.text:00402248 __ZSt21_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_ proc near
.text:00402248
.text:00402248 arg_0           = dword ptr  4
.text:00402248 arg_4           = dword ptr  8
.text:00402248
.text:00402248                 mov     edx, [esp+arg_4]
.text:0040224C                 mov     eax, [esp+arg_0]
.text:00402250                 jmp     __ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_ ; std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)
.text:00402250 __ZSt21_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_ endp
.text:00402250
.text:00402250 ; ---------------------------------------------------------------------------
.text:00402255                 align 4
.text:00402258
.text:00402258 ; =============== S U B R O U T I N E =======================================
.text:00402258
.text:00402258
.text:00402258 ; std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base *, std::_Rb_tree_node_base *, std::_Rb_tree_node_base&)
.text:00402258                 public __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_
.text:00402258 __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ proc near
.text:00402258                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*,int const&)+9C↓p
.text:00402258
.text:00402258 var_14          = dword ptr -14h
.text:00402258 arg_0           = byte ptr  4
.text:00402258 arg_4           = dword ptr  8
.text:00402258 arg_8           = dword ptr  0Ch
.text:00402258 arg_C           = dword ptr  10h
.text:00402258
.text:00402258                 push    ebp
.text:00402259                 push    edi
.text:0040225A                 push    esi
.text:0040225B                 push    ebx
.text:0040225C                 push    eax
.text:0040225D                 mov     esi, [esp+14h+arg_4]
.text:00402261                 mov     eax, [esp+14h+arg_8]
.text:00402265                 mov     edi, [esp+14h+arg_C]
.text:00402269                 lea     ebp, [edi+4]
.text:0040226C                 mov     [esi+4], eax
.text:0040226F                 mov     dword ptr [esi+8], 0
.text:00402276                 mov     dword ptr [esi+0Ch], 0
.text:0040227D                 mov     dword ptr [esi], 0
.text:00402283                 cmp     [esp+14h+arg_0], 0
.text:00402288                 jz      short loc_4022E8
.text:0040228A                 mov     [eax+8], esi
.text:0040228D                 cmp     eax, edi
.text:0040228F                 jz      loc_40235A
.text:00402295                 cmp     [edi+8], eax
.text:00402298                 jz      loc_402365
.text:0040229E                 xchg    ax, ax
.text:004022A0
.text:004022A0 loc_4022A0:                             ; CODE XREF: std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+96↓j
.text:004022A0                                         ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+9B↓j ...
.text:004022A0                 mov     edx, [edi+4]
.text:004022A3
.text:004022A3 loc_4022A3:                             ; CODE XREF: std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+E5↓j
.text:004022A3                 cmp     esi, edx
.text:004022A5                 jz      short loc_4022DC
.text:004022A7
.text:004022A7 loc_4022A7:                             ; CODE XREF: std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+81↓j
.text:004022A7                 mov     ebx, [esi+4]
.text:004022AA                 mov     eax, [ebx]
.text:004022AC                 test    eax, eax
.text:004022AE                 jnz     short loc_4022DC
.text:004022B0                 mov     ecx, [ebx+4]
.text:004022B3                 mov     eax, [ecx+8]
.text:004022B6                 cmp     ebx, eax
.text:004022B8                 jz      short loc_402314
.text:004022BA                 test    eax, eax
.text:004022BC                 jz      short loc_4022F8
.text:004022BE                 cmp     dword ptr [eax], 0
.text:004022C1                 jnz     short loc_4022F8
.text:004022C3
.text:004022C3 loc_4022C3:                             ; CODE XREF: std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+C6↓j
.text:004022C3                 mov     dword ptr [ebx], 1
.text:004022C9                 mov     dword ptr [eax], 1
.text:004022CF                 mov     dword ptr [ecx], 0
.text:004022D5                 mov     esi, ecx
.text:004022D7                 cmp     esi, edx
.text:004022D9                 jnz     short loc_4022A7
.text:004022DB                 nop
.text:004022DC
.text:004022DC loc_4022DC:                             ; CODE XREF: std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+4D↑j
.text:004022DC                                         ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+56↑j
.text:004022DC                 mov     dword ptr [edx], 1
.text:004022E2                 pop     ecx
.text:004022E3                 pop     ebx
.text:004022E4                 pop     esi
.text:004022E5                 pop     edi
.text:004022E6                 pop     ebp
.text:004022E7                 retn
.text:004022E8 ; ---------------------------------------------------------------------------
.text:004022E8
.text:004022E8 loc_4022E8:                             ; CODE XREF: std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+30↑j
.text:004022E8                 mov     [eax+0Ch], esi
.text:004022EB                 cmp     [edi+0Ch], eax
.text:004022EE                 jnz     short loc_4022A0
.text:004022F0                 mov     [edi+0Ch], esi
.text:004022F3                 jmp     short loc_4022A0
.text:004022F3 ; ---------------------------------------------------------------------------
.text:004022F5                 align 4
.text:004022F8
.text:004022F8 loc_4022F8:                             ; CODE XREF: std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+64↑j
.text:004022F8                                         ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+69↑j
.text:004022F8                 cmp     [ebx+8], esi
.text:004022FB                 jz      short loc_402344
.text:004022FD
.text:004022FD loc_4022FD:                             ; CODE XREF: std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+100↓j
.text:004022FD                 mov     dword ptr [ebx], 1
.text:00402303                 mov     dword ptr [ecx], 0
.text:00402309                 mov     edx, ebp
.text:0040230B                 mov     eax, ecx
.text:0040230D                 call    __ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_ ; std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)
.text:00402312                 jmp     short loc_4022A0
.text:00402314 ; ---------------------------------------------------------------------------
.text:00402314
.text:00402314 loc_402314:                             ; CODE XREF: std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+60↑j
.text:00402314                 mov     eax, [ecx+0Ch]
.text:00402317                 test    eax, eax
.text:00402319                 jz      short loc_402320
.text:0040231B                 cmp     dword ptr [eax], 0
.text:0040231E                 jz      short loc_4022C3
.text:00402320
.text:00402320 loc_402320:                             ; CODE XREF: std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+C1↑j
.text:00402320                 cmp     [ebx+0Ch], esi
.text:00402323                 jz      short loc_40236D
.text:00402325
.text:00402325 loc_402325:                             ; CODE XREF: std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+129↓j
.text:00402325                 mov     dword ptr [ebx], 1
.text:0040232B                 mov     dword ptr [ecx], 0
.text:00402331                 mov     edx, ebp
.text:00402333                 mov     eax, ecx
.text:00402335                 call    __ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_ ; std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)
.text:0040233A                 mov     edx, [edi+4]
.text:0040233D                 jmp     loc_4022A3
.text:0040233D ; ---------------------------------------------------------------------------
.text:00402342                 align 4
.text:00402344
.text:00402344 loc_402344:                             ; CODE XREF: std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+A3↑j
.text:00402344                 mov     edx, ebp
.text:00402346                 mov     eax, ebx
.text:00402348                 mov     [esp+14h+var_14], ecx
.text:0040234B                 call    __ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_ ; std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)
.text:00402350                 mov     esi, ebx
.text:00402352                 mov     ebx, [ebx+4]
.text:00402355                 mov     ecx, [esp+14h+var_14]
.text:00402358                 jmp     short loc_4022FD
.text:0040235A ; ---------------------------------------------------------------------------
.text:0040235A
.text:0040235A loc_40235A:                             ; CODE XREF: std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+37↑j
.text:0040235A                 mov     [edi+4], esi
.text:0040235D                 mov     [edi+0Ch], esi
.text:00402360                 jmp     loc_4022A0
.text:00402365 ; ---------------------------------------------------------------------------
.text:00402365
.text:00402365 loc_402365:                             ; CODE XREF: std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+40↑j
.text:00402365                 mov     [edi+8], esi
.text:00402368                 jmp     loc_4022A0
.text:0040236D ; ---------------------------------------------------------------------------
.text:0040236D
.text:0040236D loc_40236D:                             ; CODE XREF: std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+CB↑j
.text:0040236D                 mov     edx, ebp
.text:0040236F                 mov     eax, ebx
.text:00402371                 mov     [esp+14h+var_14], ecx
.text:00402374                 call    __ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_ ; std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)
.text:00402379                 mov     esi, ebx
.text:0040237B                 mov     ebx, [ebx+4]
.text:0040237E                 mov     ecx, [esp+14h+var_14]
.text:00402381                 jmp     short loc_402325
.text:00402381 __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ endp
.text:00402381
.text:00402381 ; ---------------------------------------------------------------------------
.text:00402383                 align 4
.text:00402384
.text:00402384 ; =============== S U B R O U T I N E =======================================
.text:00402384
.text:00402384
.text:00402384 ; std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *, std::_Rb_tree_node_base&)
.text:00402384                 public __ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_
.text:00402384 __ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_ proc near
.text:00402384
.text:00402384 var_18          = dword ptr -18h
.text:00402384 var_14          = dword ptr -14h
.text:00402384 arg_0           = dword ptr  4
.text:00402384 arg_4           = dword ptr  8
.text:00402384
.text:00402384                 push    ebp
.text:00402385                 push    edi
.text:00402386                 push    esi
.text:00402387                 push    ebx
.text:00402388                 sub     esp, 8
.text:0040238B                 mov     eax, [esp+18h+arg_0]
.text:0040238F                 mov     ecx, [esp+18h+arg_4]
.text:00402393                 mov     edx, [eax+8]
.text:00402396                 test    edx, edx
.text:00402398                 jz      loc_402500
.text:0040239E                 mov     ebx, [eax+0Ch]
.text:004023A1                 test    ebx, ebx
.text:004023A3                 jz      loc_402503
.text:004023A9                 mov     ebp, ebx
.text:004023AB                 jmp     short loc_4023B2
.text:004023AB ; ---------------------------------------------------------------------------
.text:004023AD                 align 10h
.text:004023B0
.text:004023B0 loc_4023B0:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+33↓j
.text:004023B0                 mov     ebp, esi
.text:004023B2
.text:004023B2 loc_4023B2:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+27↑j
.text:004023B2                 mov     esi, [ebp+8]
.text:004023B5                 test    esi, esi
.text:004023B7                 jnz     short loc_4023B0
.text:004023B9                 mov     edi, [ebp+0Ch]
.text:004023BC                 cmp     ebp, eax
.text:004023BE                 jz      loc_40268C
.text:004023C4                 mov     [edx+4], ebp
.text:004023C7                 mov     [ebp+8], edx
.text:004023CA                 cmp     ebx, ebp
.text:004023CC                 jz      loc_4025B8
.text:004023D2                 mov     esi, [ebp+4]
.text:004023D5                 test    edi, edi
.text:004023D7                 jz      loc_4025C7
.text:004023DD                 mov     [edi+4], esi
.text:004023E0                 mov     edx, [ebp+4]
.text:004023E3
.text:004023E3 loc_4023E3:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+245↓j
.text:004023E3                 mov     [edx+8], edi
.text:004023E6                 mov     [ebp+0Ch], ebx
.text:004023E9                 mov     edx, [eax+0Ch]
.text:004023EC                 mov     [edx+4], ebp
.text:004023EF
.text:004023EF loc_4023EF:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+236↓j
.text:004023EF                 cmp     [ecx+4], eax
.text:004023F2                 jz      loc_4025AC
.text:004023F8                 mov     edx, [eax+4]
.text:004023FB                 cmp     [edx+8], eax
.text:004023FE                 jz      loc_4025BF
.text:00402404                 mov     [edx+0Ch], ebp
.text:00402407
.text:00402407 loc_402407:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+22E↓j
.text:00402407                                         ; std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+23E↓j
.text:00402407                 mov     [ebp+4], edx
.text:0040240A                 mov     ebx, [ebp+0]
.text:0040240D                 mov     edx, [eax]
.text:0040240F                 mov     [ebp+0], edx
.text:00402412                 mov     [eax], ebx
.text:00402414                 mov     ebp, eax
.text:00402416
.text:00402416 loc_402416:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+1BA↓j
.text:00402416                                         ; std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+303↓j
.text:00402416                 test    ebx, ebx
.text:00402418                 jz      short loc_40243C
.text:0040241A                 lea     eax, [ecx+4]
.text:0040241D                 mov     [esp+18h+var_14], eax
.text:00402421                 lea     esi, [esi+0]
.text:00402424
.text:00402424 loc_402424:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+FE↓j
.text:00402424                 cmp     [ecx+4], edi
.text:00402427                 jz      loc_402560
.text:0040242D                 test    edi, edi
.text:0040242F                 jz      short loc_402448
.text:00402431                 cmp     dword ptr [edi], 1
.text:00402434                 jz      short loc_402448
.text:00402436
.text:00402436 loc_402436:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+1E4↓j
.text:00402436                 mov     dword ptr [edi], 1
.text:0040243C
.text:0040243C loc_40243C:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+94↑j
.text:0040243C                                         ; std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+1DE↓j
.text:0040243C                 mov     eax, ebp
.text:0040243E                 add     esp, 8
.text:00402441                 pop     ebx
.text:00402442                 pop     esi
.text:00402443                 pop     edi
.text:00402444                 pop     ebp
.text:00402445                 retn
.text:00402445 ; ---------------------------------------------------------------------------
.text:00402446                 align 4
.text:00402448
.text:00402448 loc_402448:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+AB↑j
.text:00402448                                         ; std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+B0↑j
.text:00402448                 mov     ebx, [esi+8]
.text:0040244B                 cmp     ebx, edi
.text:0040244D                 jz      short loc_4024A8
.text:0040244F                 mov     edx, [ebx]
.text:00402451                 test    edx, edx
.text:00402453                 jz      short loc_402484
.text:00402455
.text:00402455 loc_402455:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+120↓j
.text:00402455                 mov     edx, [ebx+0Ch]
.text:00402458                 test    edx, edx
.text:0040245A                 jz      short loc_402465
.text:0040245C                 cmp     dword ptr [edx], 1
.text:0040245F                 jnz     loc_402570
.text:00402465
.text:00402465 loc_402465:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+D6↑j
.text:00402465                 mov     eax, [ebx+8]
.text:00402468                 test    eax, eax
.text:0040246A                 jz      short loc_402475
.text:0040246C                 cmp     dword ptr [eax], 1
.text:0040246F                 jnz     loc_402544
.text:00402475
.text:00402475 loc_402475:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+E6↑j
.text:00402475                 mov     dword ptr [ebx], 0
.text:0040247B                 mov     eax, [esi+4]
.text:0040247E
.text:0040247E loc_40247E:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+156↓j
.text:0040247E                 mov     edi, esi
.text:00402480                 mov     esi, eax
.text:00402482                 jmp     short loc_402424
.text:00402484 ; ---------------------------------------------------------------------------
.text:00402484
.text:00402484 loc_402484:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+CF↑j
.text:00402484                 mov     dword ptr [ebx], 1
.text:0040248A                 mov     dword ptr [esi], 0
.text:00402490                 mov     edx, [esp+18h+var_14]
.text:00402494                 mov     eax, esi
.text:00402496                 mov     [esp+18h+var_18], ecx
.text:00402499                 call    __ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_ ; std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)
.text:0040249E                 mov     ebx, [esi+8]
.text:004024A1                 mov     ecx, [esp+18h+var_18]
.text:004024A4                 jmp     short loc_402455
.text:004024A4 ; ---------------------------------------------------------------------------
.text:004024A6                 align 4
.text:004024A8
.text:004024A8 loc_4024A8:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+C9↑j
.text:004024A8                 mov     eax, [esi+0Ch]
.text:004024AB                 mov     edi, [eax]
.text:004024AD                 test    edi, edi
.text:004024AF                 jz      short loc_4024DC
.text:004024B1
.text:004024B1 loc_4024B1:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+178↓j
.text:004024B1                 mov     edi, [eax+8]
.text:004024B4                 test    edi, edi
.text:004024B6                 jz      short loc_4024C1
.text:004024B8                 cmp     dword ptr [edi], 1
.text:004024BB                 jnz     loc_4025F0
.text:004024C1
.text:004024C1 loc_4024C1:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+132↑j
.text:004024C1                 mov     edx, [eax+0Ch]
.text:004024C4                 test    edx, edx
.text:004024C6                 jz      short loc_4024D1
.text:004024C8                 cmp     dword ptr [edx], 1
.text:004024CB                 jnz     loc_4025CE
.text:004024D1
.text:004024D1 loc_4024D1:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+142↑j
.text:004024D1                 mov     dword ptr [eax], 0
.text:004024D7                 mov     eax, [esi+4]
.text:004024DA                 jmp     short loc_40247E
.text:004024DC ; ---------------------------------------------------------------------------
.text:004024DC
.text:004024DC loc_4024DC:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+12B↑j
.text:004024DC                 mov     dword ptr [eax], 1
.text:004024E2                 mov     dword ptr [esi], 0
.text:004024E8                 mov     edx, [esp+18h+var_14]
.text:004024EC                 mov     eax, esi
.text:004024EE                 mov     [esp+18h+var_18], ecx
.text:004024F1                 call    __ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_ ; std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)
.text:004024F6                 mov     eax, [esi+0Ch]
.text:004024F9                 mov     ecx, [esp+18h+var_18]
.text:004024FC                 jmp     short loc_4024B1
.text:004024FC ; ---------------------------------------------------------------------------
.text:004024FE                 align 10h
.text:00402500
.text:00402500 loc_402500:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+14↑j
.text:00402500                 mov     edx, [eax+0Ch]
.text:00402503
.text:00402503 loc_402503:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+1F↑j
.text:00402503                 mov     ebp, eax
.text:00402505
.text:00402505 loc_402505:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+30A↓j
.text:00402505                 mov     esi, [ebp+4]
.text:00402508                 test    edx, edx
.text:0040250A                 jz      short loc_40250F
.text:0040250C                 mov     [edx+4], esi
.text:0040250F
.text:0040250F loc_40250F:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+186↑j
.text:0040250F                 cmp     [ecx+4], eax
.text:00402512                 jz      loc_402661
.text:00402518                 mov     ebx, [eax+4]
.text:0040251B                 cmp     [ebx+8], eax
.text:0040251E                 jz      loc_402669
.text:00402524                 mov     [ebx+0Ch], edx
.text:00402527
.text:00402527 loc_402527:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+2E0↓j
.text:00402527                                         ; std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+2E8↓j
.text:00402527                 cmp     [ecx+8], eax
.text:0040252A                 jz      loc_402645
.text:00402530
.text:00402530 loc_402530:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+2D8↓j
.text:00402530                                         ; std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+2F3↓j
.text:00402530                 cmp     [ecx+0Ch], eax
.text:00402533                 jz      loc_402627
.text:00402539
.text:00402539 loc_402539:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+2BC↓j
.text:00402539                 mov     ebx, [ebp+0]
.text:0040253C                 mov     edi, edx
.text:0040253E                 jmp     loc_402416
.text:0040253E ; ---------------------------------------------------------------------------
.text:00402543                 align 4
.text:00402544
.text:00402544 loc_402544:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+EB↑j
.text:00402544                                         ; std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+1F6↓j
.text:00402544                 mov     edx, [esi]
.text:00402546                 mov     [ebx], edx
.text:00402548                 mov     dword ptr [esi], 1
.text:0040254E
.text:0040254E loc_40254E:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+221↓j
.text:0040254E                 mov     dword ptr [eax], 1
.text:00402554
.text:00402554 loc_402554:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+223↓j
.text:00402554                 mov     edx, [esp+18h+var_14]
.text:00402558                 mov     eax, esi
.text:0040255A                 call    __ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_ ; std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)
.text:0040255F                 nop
.text:00402560
.text:00402560 loc_402560:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+A3↑j
.text:00402560                                         ; std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+267↓j
.text:00402560                 test    edi, edi
.text:00402562                 jz      loc_40243C
.text:00402568                 jmp     loc_402436
.text:00402568 ; ---------------------------------------------------------------------------
.text:0040256D                 align 10h
.text:00402570
.text:00402570 loc_402570:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+DB↑j
.text:00402570                 mov     eax, [ebx+8]
.text:00402573                 test    eax, eax
.text:00402575                 jz      short loc_40257C
.text:00402577                 cmp     dword ptr [eax], 1
.text:0040257A                 jnz     short loc_402544
.text:0040257C
.text:0040257C loc_40257C:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+1F1↑j
.text:0040257C                 mov     dword ptr [edx], 1
.text:00402582                 mov     dword ptr [ebx], 0
.text:00402588                 mov     edx, [esp+18h+var_14]
.text:0040258C                 mov     eax, ebx
.text:0040258E                 call    __ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_ ; std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)
.text:00402593                 mov     edx, [esi+8]
.text:00402596                 mov     eax, [edx+8]
.text:00402599                 mov     ecx, [esi]
.text:0040259B                 mov     [edx], ecx
.text:0040259D                 mov     dword ptr [esi], 1
.text:004025A3                 test    eax, eax
.text:004025A5                 jnz     short loc_40254E
.text:004025A7                 jmp     short loc_402554
.text:004025A7 ; ---------------------------------------------------------------------------
.text:004025A9                 align 4
.text:004025AC
.text:004025AC loc_4025AC:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+6E↑j
.text:004025AC                 mov     [ecx+4], ebp
.text:004025AF                 mov     edx, [eax+4]
.text:004025B2                 jmp     loc_402407
.text:004025B2 ; ---------------------------------------------------------------------------
.text:004025B7                 align 4
.text:004025B8
.text:004025B8 loc_4025B8:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+48↑j
.text:004025B8                 mov     esi, ebp
.text:004025BA                 jmp     loc_4023EF
.text:004025BF ; ---------------------------------------------------------------------------
.text:004025BF
.text:004025BF loc_4025BF:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+7A↑j
.text:004025BF                 mov     [edx+8], ebp
.text:004025C2                 jmp     loc_402407
.text:004025C7 ; ---------------------------------------------------------------------------
.text:004025C7
.text:004025C7 loc_4025C7:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+53↑j
.text:004025C7                 mov     edx, esi
.text:004025C9                 jmp     loc_4023E3
.text:004025CE ; ---------------------------------------------------------------------------
.text:004025CE
.text:004025CE loc_4025CE:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+147↑j
.text:004025CE                                         ; std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+276↓j
.text:004025CE                 mov     ecx, [esi]
.text:004025D0                 mov     [eax], ecx
.text:004025D2                 mov     dword ptr [esi], 1
.text:004025D8
.text:004025D8 loc_4025D8:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+29F↓j
.text:004025D8                 mov     dword ptr [edx], 1
.text:004025DE
.text:004025DE loc_4025DE:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+2A1↓j
.text:004025DE                 mov     edx, [esp+18h+var_14]
.text:004025E2                 mov     eax, esi
.text:004025E4                 call    __ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_ ; std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)
.text:004025E9                 mov     edi, ebx
.text:004025EB                 jmp     loc_402560
.text:004025F0 ; ---------------------------------------------------------------------------
.text:004025F0
.text:004025F0 loc_4025F0:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+137↑j
.text:004025F0                 mov     edx, [eax+0Ch]
.text:004025F3                 test    edx, edx
.text:004025F5                 jz      short loc_4025FC
.text:004025F7                 cmp     dword ptr [edx], 1
.text:004025FA                 jnz     short loc_4025CE
.text:004025FC
.text:004025FC loc_4025FC:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+271↑j
.text:004025FC                 mov     dword ptr [edi], 1
.text:00402602                 mov     dword ptr [eax], 0
.text:00402608                 mov     edx, [esp+18h+var_14]
.text:0040260C                 call    __ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_ ; std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base *,std::_Rb_tree_node_base *&)
.text:00402611                 mov     eax, [esi+0Ch]
.text:00402614                 mov     edx, [eax+0Ch]
.text:00402617                 mov     ecx, [esi]
.text:00402619                 mov     [eax], ecx
.text:0040261B                 mov     dword ptr [esi], 1
.text:00402621                 test    edx, edx
.text:00402623                 jnz     short loc_4025D8
.text:00402625                 jmp     short loc_4025DE
.text:00402627 ; ---------------------------------------------------------------------------
.text:00402627
.text:00402627 loc_402627:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+1AF↑j
.text:00402627                 mov     ebx, [eax+8]
.text:0040262A                 test    ebx, ebx
.text:0040262C                 jz      short loc_40267C
.text:0040262E                 mov     ebx, edx
.text:00402630                 jmp     short loc_402636
.text:00402630 ; ---------------------------------------------------------------------------
.text:00402632                 align 4
.text:00402634
.text:00402634 loc_402634:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+2B7↓j
.text:00402634                 mov     ebx, eax
.text:00402636
.text:00402636 loc_402636:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+2AC↑j
.text:00402636                 mov     eax, [ebx+0Ch]
.text:00402639                 test    eax, eax
.text:0040263B                 jnz     short loc_402634
.text:0040263D                 mov     [ecx+0Ch], ebx
.text:00402640                 jmp     loc_402539
.text:00402645 ; ---------------------------------------------------------------------------
.text:00402645
.text:00402645 loc_402645:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+1A6↑j
.text:00402645                 mov     edi, [eax+0Ch]
.text:00402648                 test    edi, edi
.text:0040264A                 jz      short loc_402671
.text:0040264C                 mov     edi, edx
.text:0040264E                 jmp     short loc_402652
.text:00402650 ; ---------------------------------------------------------------------------
.text:00402650
.text:00402650 loc_402650:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+2D3↓j
.text:00402650                 mov     edi, ebx
.text:00402652
.text:00402652 loc_402652:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+2CA↑j
.text:00402652                 mov     ebx, [edi+8]
.text:00402655                 test    ebx, ebx
.text:00402657                 jnz     short loc_402650
.text:00402659                 mov     [ecx+8], edi
.text:0040265C                 jmp     loc_402530
.text:00402661 ; ---------------------------------------------------------------------------
.text:00402661
.text:00402661 loc_402661:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+18E↑j
.text:00402661                 mov     [ecx+4], edx
.text:00402664                 jmp     loc_402527
.text:00402669 ; ---------------------------------------------------------------------------
.text:00402669
.text:00402669 loc_402669:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+19A↑j
.text:00402669                 mov     [ebx+8], edx
.text:0040266C                 jmp     loc_402527
.text:00402671 ; ---------------------------------------------------------------------------
.text:00402671
.text:00402671 loc_402671:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+2C6↑j
.text:00402671                 mov     ebx, [eax+4]
.text:00402674                 mov     [ecx+8], ebx
.text:00402677                 jmp     loc_402530
.text:0040267C ; ---------------------------------------------------------------------------
.text:0040267C
.text:0040267C loc_40267C:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+2A8↑j
.text:0040267C                 mov     eax, [eax+4]
.text:0040267F                 mov     [ecx+0Ch], eax
.text:00402682                 mov     ebx, [ebp+0]
.text:00402685                 mov     edi, edx
.text:00402687                 jmp     loc_402416
.text:0040268C ; ---------------------------------------------------------------------------
.text:0040268C
.text:0040268C loc_40268C:                             ; CODE XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)+3A↑j
.text:0040268C                 mov     edx, edi
.text:0040268E                 jmp     loc_402505
.text:0040268E __ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_ endp
.text:0040268E
.text:0040268E ; ---------------------------------------------------------------------------
.text:00402693                 align 4
.text:00402694
.text:00402694 ; =============== S U B R O U T I N E =======================================
.text:00402694
.text:00402694
.text:00402694 ; std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)
.text:00402694                 public __ZSt20_Rb_tree_black_countPKSt18_Rb_tree_node_baseS1_
.text:00402694 __ZSt20_Rb_tree_black_countPKSt18_Rb_tree_node_baseS1_ proc near
.text:00402694
.text:00402694 arg_0           = dword ptr  4
.text:00402694 arg_4           = dword ptr  8
.text:00402694
.text:00402694                 mov     edx, [esp+arg_0]
.text:00402698                 mov     ecx, [esp+arg_4]
.text:0040269C                 xor     eax, eax
.text:0040269E                 test    edx, edx
.text:004026A0                 jnz     short loc_4026AB
.text:004026A2                 jmp     short locret_4026B5
.text:004026A4 ; ---------------------------------------------------------------------------
.text:004026A4
.text:004026A4 loc_4026A4:                             ; CODE XREF: std::_Rb_tree_black_count(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*)+1A↓j
.text:004026A4                 cmp     edx, ecx
.text:004026A6                 jz      short locret_4026B5
.text:004026A8
.text:004026A8 loc_4026A8:                             ; CODE XREF: std::_Rb_tree_black_count(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*)+1F↓j
.text:004026A8                 mov     edx, [edx+4]
.text:004026AB
.text:004026AB loc_4026AB:                             ; CODE XREF: std::_Rb_tree_black_count(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*)+C↑j
.text:004026AB                 cmp     dword ptr [edx], 1
.text:004026AE                 jnz     short loc_4026A4
.text:004026B0                 inc     eax
.text:004026B1                 cmp     edx, ecx
.text:004026B3                 jnz     short loc_4026A8
.text:004026B5
.text:004026B5 locret_4026B5:                          ; CODE XREF: std::_Rb_tree_black_count(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*)+E↑j
.text:004026B5                                         ; std::_Rb_tree_black_count(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*)+12↑j
.text:004026B5                 retn
.text:004026B5 __ZSt20_Rb_tree_black_countPKSt18_Rb_tree_node_baseS1_ endp
.text:004026B5
.text:004026B5 ; ---------------------------------------------------------------------------
.text:004026B6                 align 4
.text:004026B8
.text:004026B8 ; =============== S U B R O U T I N E =======================================
.text:004026B8
.text:004026B8
.text:004026B8 ; void __cdecl operator delete(void *)
.text:004026B8                 public __ZdlPv
.text:004026B8 __ZdlPv         proc near               ; CODE XREF: __cxxabiv1::__foreign_exception::~__foreign_exception()+C↓p
.text:004026B8                                         ; __cxxabiv1::__forced_unwind::~__forced_unwind()+C↓p ...
.text:004026B8
.text:004026B8 arg_0           = dword ptr  4
.text:004026B8
.text:004026B8                 mov     eax, [esp+arg_0]
.text:004026BC                 test    eax, eax
.text:004026BE                 jz      short locret_4026C8
.text:004026C0                 jmp     _free
.text:004026C0 ; ---------------------------------------------------------------------------
.text:004026C5                 align 4
.text:004026C8
.text:004026C8 locret_4026C8:                          ; CODE XREF: operator delete(void *)+6↑j
.text:004026C8                 retn
.text:004026C8 __ZdlPv         endp
.text:004026C8
.text:004026C8 ; ---------------------------------------------------------------------------
.text:004026C9                 align 4
.text:004026CC
.text:004026CC ; =============== S U B R O U T I N E =======================================
.text:004026CC
.text:004026CC ; Attributes: noreturn
.text:004026CC
.text:004026CC ; void __noreturn std::__throw_bad_exception(void)
.text:004026CC                 public __ZSt21__throw_bad_exceptionv
.text:004026CC __ZSt21__throw_bad_exceptionv proc near
.text:004026CC
.text:004026CC thrown_size     = dword ptr -1Ch
.text:004026CC lptinfo         = dword ptr -18h
.text:004026CC var_14          = dword ptr -14h
.text:004026CC
.text:004026CC                 sub     esp, 1Ch
.text:004026CF                 mov     [esp+1Ch+thrown_size], 4 ; thrown_size
.text:004026D6                 call    ___cxa_allocate_exception
.text:004026DB                 mov     dword ptr [eax], offset off_416460
.text:004026E1                 mov     [esp+1Ch+var_14], offset __ZNSt13bad_exceptionD1Ev ; void (__cdecl *)(void *)
.text:004026E9                 mov     [esp+1Ch+lptinfo], offset __ZTISt13bad_exception ; lptinfo
.text:004026F1                 mov     [esp+1Ch+thrown_size], eax ; void *
.text:004026F4                 call    ___cxa_throw
.text:004026F4 __ZSt21__throw_bad_exceptionv endp
.text:004026F4
.text:004026F4 ; ---------------------------------------------------------------------------
.text:004026F9                 align 4
.text:004026FC
.text:004026FC ; =============== S U B R O U T I N E =======================================
.text:004026FC
.text:004026FC ; Attributes: noreturn
.text:004026FC
.text:004026FC ; void __noreturn std::__throw_bad_alloc(void)
.text:004026FC                 public __ZSt17__throw_bad_allocv
.text:004026FC __ZSt17__throw_bad_allocv proc near     ; CODE XREF: __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::allocate(uint,void const*)+1D↓p
.text:004026FC
.text:004026FC thrown_size     = dword ptr -1Ch
.text:004026FC lptinfo         = dword ptr -18h
.text:004026FC var_14          = dword ptr -14h
.text:004026FC
.text:004026FC                 sub     esp, 1Ch
.text:004026FF                 mov     [esp+1Ch+thrown_size], 4 ; thrown_size
.text:00402706                 call    ___cxa_allocate_exception
.text:0040270B                 mov     dword ptr [eax], offset off_416560
.text:00402711                 mov     [esp+1Ch+var_14], offset __ZNSt9bad_allocD1Ev ; void (__cdecl *)(void *)
.text:00402719                 mov     [esp+1Ch+lptinfo], offset __ZTISt9bad_alloc ; lptinfo
.text:00402721                 mov     [esp+1Ch+thrown_size], eax ; void *
.text:00402724                 call    ___cxa_throw
.text:00402724 __ZSt17__throw_bad_allocv endp
.text:00402724
.text:00402724 ; ---------------------------------------------------------------------------
.text:00402729                 align 4
.text:0040272C
.text:0040272C ; =============== S U B R O U T I N E =======================================
.text:0040272C
.text:0040272C ; Attributes: noreturn
.text:0040272C
.text:0040272C ; void __noreturn std::__throw_bad_cast(void)
.text:0040272C                 public __ZSt16__throw_bad_castv
.text:0040272C __ZSt16__throw_bad_castv proc near
.text:0040272C
.text:0040272C thrown_size     = dword ptr -1Ch
.text:0040272C lptinfo         = dword ptr -18h
.text:0040272C var_14          = dword ptr -14h
.text:0040272C
.text:0040272C                 sub     esp, 1Ch
.text:0040272F                 mov     [esp+1Ch+thrown_size], 4 ; thrown_size
.text:00402736                 call    ___cxa_allocate_exception
.text:0040273B                 mov     dword ptr [eax], offset off_416548
.text:00402741                 mov     [esp+1Ch+var_14], offset __ZNSt8bad_castD1Ev ; void (__cdecl *)(void *)
.text:00402749                 mov     [esp+1Ch+lptinfo], offset __ZTISt8bad_cast ; lptinfo
.text:00402751                 mov     [esp+1Ch+thrown_size], eax ; void *
.text:00402754                 call    ___cxa_throw
.text:00402754 __ZSt16__throw_bad_castv endp
.text:00402754
.text:00402754 ; ---------------------------------------------------------------------------
.text:00402759                 align 4
.text:0040275C
.text:0040275C ; =============== S U B R O U T I N E =======================================
.text:0040275C
.text:0040275C ; Attributes: noreturn
.text:0040275C
.text:0040275C ; void __noreturn std::__throw_bad_typeid(void)
.text:0040275C                 public __ZSt18__throw_bad_typeidv
.text:0040275C __ZSt18__throw_bad_typeidv proc near
.text:0040275C
.text:0040275C thrown_size     = dword ptr -1Ch
.text:0040275C lptinfo         = dword ptr -18h
.text:0040275C var_14          = dword ptr -14h
.text:0040275C
.text:0040275C                 sub     esp, 1Ch
.text:0040275F                 mov     [esp+1Ch+thrown_size], 4 ; thrown_size
.text:00402766                 call    ___cxa_allocate_exception
.text:0040276B                 mov     dword ptr [eax], offset off_416388
.text:00402771                 mov     [esp+1Ch+var_14], offset __ZNSt10bad_typeidD1Ev ; void (__cdecl *)(void *)
.text:00402779                 mov     [esp+1Ch+lptinfo], offset __ZTISt10bad_typeid ; lptinfo
.text:00402781                 mov     [esp+1Ch+thrown_size], eax ; void *
.text:00402784                 call    ___cxa_throw
.text:00402784 __ZSt18__throw_bad_typeidv endp
.text:00402784
.text:00402784 ; ---------------------------------------------------------------------------
.text:00402789                 align 4
.text:0040278C
.text:0040278C ; =============== S U B R O U T I N E =======================================
.text:0040278C
.text:0040278C ; Attributes: noreturn
.text:0040278C
.text:0040278C ; void __cdecl __noreturn std::__throw_logic_error(const char *)
.text:0040278C                 public __ZSt19__throw_logic_errorPKc
.text:0040278C __ZSt19__throw_logic_errorPKc proc near ; CODE XREF: std::string::_S_construct<char const*>(char const*,char const*,std::allocator<char> const&,std::forward_iterator_tag)+67↓p
.text:0040278C                                         ; std::string::_S_construct<char *>(char *,char *,std::allocator<char> const&,std::forward_iterator_tag)+67↓p
.text:0040278C
.text:0040278C lpfctx          = dword ptr -6Ch
.text:0040278C lptinfo         = dword ptr -68h
.text:0040278C var_64          = dword ptr -64h
.text:0040278C var_58          = dword ptr -58h
.text:0040278C fctx            = SjLj_Function_Context ptr -50h
.text:0040278C var_2C          = dword ptr -2Ch
.text:0040278C var_28          = dword ptr -28h
.text:0040278C var_11          = byte ptr -11h
.text:0040278C var_10          = byte ptr -10h
.text:0040278C var_C           = byte ptr -0Ch
.text:0040278C arg_0           = dword ptr  4
.text:0040278C arg_10          = dword ptr  14h
.text:0040278C lpuexcpt        = dword ptr  18h
.text:0040278C arg_1C          = dword ptr  20h
.text:0040278C arg_20          = dword ptr  24h
.text:0040278C arg_58          = byte ptr  5Ch
.text:0040278C
.text:0040278C                 push    ebp
.text:0040278D                 sub     esp, 68h
.text:00402790                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00402798                 mov     [esp+6Ch+fctx.lsda], offset dword_412270
.text:004027A0                 lea     eax, [esp+6Ch+var_C]
.text:004027A4                 mov     [esp+6Ch+fctx.jbuf], eax
.text:004027A8                 mov     [esp+6Ch+var_2C], offset loc_402839
.text:004027B0                 mov     [esp+6Ch+var_28], esp
.text:004027B4                 lea     eax, [esp+6Ch+fctx]
.text:004027B8                 mov     [esp+6Ch+lpfctx], eax ; lpfctx
.text:004027BB                 call    __Unwind_SjLj_Register
.text:004027C0 ; __unwind { // ___gxx_personality_sj0
.text:004027C0 ;   try {
.text:004027C0                 mov     [esp+6Ch+lpfctx], 8 ; thrown_size
.text:004027C7                 call    ___cxa_allocate_exception
.text:004027CC                 mov     [esp+6Ch+var_58], eax
.text:004027D0                 lea     eax, [esp+6Ch+var_11]
.text:004027D4                 mov     [esp+6Ch+lptinfo], eax ; std::string *
.text:004027D8                 mov     eax, [esp+6Ch+arg_0]
.text:004027DC                 mov     [esp+6Ch+lpfctx], eax
.text:004027DF                 mov     [esp+6Ch+fctx.call_site], 1
.text:004027E7                 lea     ecx, [esp+6Ch+var_10]
.text:004027EB                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:004027F0                 sub     esp, 8
.text:004027F3                 lea     eax, [esp+6Ch+var_10]
.text:004027F7                 mov     [esp+6Ch+lpfctx], eax ; this
.text:004027FA                 mov     [esp+6Ch+fctx.call_site], 2
.text:00402802                 mov     ecx, [esp+6Ch+var_58]
.text:00402806                 call    __ZNSt11logic_errorC1ERKSs ; std::logic_error::logic_error(std::string const&)
.text:0040280B                 push    eax             ; this
.text:0040280C                 lea     ecx, [esp+6Ch+var_10]
.text:00402810                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00402815                 mov     [esp+6Ch+var_64], offset __ZNSt11logic_errorD1Ev ; void (__cdecl *)(void *)
.text:0040281D                 mov     [esp+6Ch+lptinfo], offset __ZTISt11logic_error ; lptinfo
.text:00402825                 mov     eax, [esp+6Ch+var_58]
.text:00402829                 mov     [esp+6Ch+lpfctx], eax ; void *
.text:0040282C                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:00402834                 call    ___cxa_throw
.text:00402839 ; ---------------------------------------------------------------------------
.text:00402839
.text:00402839 loc_402839:                             ; DATA XREF: std::__throw_logic_error(char const*)+1C↑o
.text:00402839 ;   cleanup() // owned by 4027C0
.text:00402839                 mov     eax, [esp+arg_20]
.text:0040283D                 mov     [esp+lpuexcpt], eax
.text:00402841                 mov     eax, [esp+arg_1C]
.text:00402845                 test    eax, eax
.text:00402847                 jz      short loc_402857
.text:00402849                 dec     eax
.text:0040284A                 jz      short loc_40284E
.text:0040284C                 ud2
.text:0040284E ; ---------------------------------------------------------------------------
.text:0040284E
.text:0040284E loc_40284E:                             ; CODE XREF: std::__throw_logic_error(char const*)+BE↑j
.text:0040284E                 lea     ecx, [esp+arg_58]
.text:00402852                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00402857
.text:00402857 loc_402857:                             ; CODE XREF: std::__throw_logic_error(char const*)+BB↑j
.text:00402857                 mov     eax, [esp+arg_10]
.text:0040285B                 mov     [esp+0], eax    ; void *
.text:0040285E                 call    ___cxa_free_exception
.text:00402863                 mov     eax, [esp+lpuexcpt]
.text:00402867                 mov     [esp+0], eax    ; lpuexcpt
.text:0040286A                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00402872                 call    __Unwind_SjLj_Resume
.text:00402872 ;   } // starts at 4027C0
.text:00402872 ; } // starts at 4027C0
.text:00402872 __ZSt19__throw_logic_errorPKc endp
.text:00402872
.text:00402872 ; ---------------------------------------------------------------------------
.text:00402877                 align 4
.text:00402878
.text:00402878 ; =============== S U B R O U T I N E =======================================
.text:00402878
.text:00402878 ; Attributes: noreturn
.text:00402878
.text:00402878 ; void __cdecl __noreturn std::__throw_domain_error(const char *)
.text:00402878                 public __ZSt20__throw_domain_errorPKc
.text:00402878 __ZSt20__throw_domain_errorPKc proc near
.text:00402878
.text:00402878 lpfctx          = dword ptr -6Ch
.text:00402878 lptinfo         = dword ptr -68h
.text:00402878 var_64          = dword ptr -64h
.text:00402878 var_58          = dword ptr -58h
.text:00402878 fctx            = SjLj_Function_Context ptr -50h
.text:00402878 var_2C          = dword ptr -2Ch
.text:00402878 var_28          = dword ptr -28h
.text:00402878 var_11          = byte ptr -11h
.text:00402878 var_10          = byte ptr -10h
.text:00402878 var_C           = byte ptr -0Ch
.text:00402878 arg_0           = dword ptr  4
.text:00402878 arg_10          = dword ptr  14h
.text:00402878 lpuexcpt        = dword ptr  18h
.text:00402878 arg_1C          = dword ptr  20h
.text:00402878 arg_20          = dword ptr  24h
.text:00402878 arg_58          = byte ptr  5Ch
.text:00402878
.text:00402878                 push    ebp
.text:00402879                 sub     esp, 68h
.text:0040287C                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00402884                 mov     [esp+6Ch+fctx.lsda], offset dword_412278
.text:0040288C                 lea     eax, [esp+6Ch+var_C]
.text:00402890                 mov     [esp+6Ch+fctx.jbuf], eax
.text:00402894                 mov     [esp+6Ch+var_2C], offset loc_402925
.text:0040289C                 mov     [esp+6Ch+var_28], esp
.text:004028A0                 lea     eax, [esp+6Ch+fctx]
.text:004028A4                 mov     [esp+6Ch+lpfctx], eax ; lpfctx
.text:004028A7                 call    __Unwind_SjLj_Register
.text:004028AC ; __unwind { // ___gxx_personality_sj0
.text:004028AC ;   try {
.text:004028AC                 mov     [esp+6Ch+lpfctx], 8 ; thrown_size
.text:004028B3                 call    ___cxa_allocate_exception
.text:004028B8                 mov     [esp+6Ch+var_58], eax
.text:004028BC                 lea     eax, [esp+6Ch+var_11]
.text:004028C0                 mov     [esp+6Ch+lptinfo], eax ; std::string *
.text:004028C4                 mov     eax, [esp+6Ch+arg_0]
.text:004028C8                 mov     [esp+6Ch+lpfctx], eax
.text:004028CB                 mov     [esp+6Ch+fctx.call_site], 1
.text:004028D3                 lea     ecx, [esp+6Ch+var_10]
.text:004028D7                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:004028DC                 sub     esp, 8
.text:004028DF                 lea     eax, [esp+6Ch+var_10]
.text:004028E3                 mov     [esp+6Ch+lpfctx], eax ; this
.text:004028E6                 mov     [esp+6Ch+fctx.call_site], 2
.text:004028EE                 mov     ecx, [esp+6Ch+var_58]
.text:004028F2                 call    __ZNSt12domain_errorC1ERKSs ; std::domain_error::domain_error(std::string const&)
.text:004028F7                 push    edx             ; this
.text:004028F8                 lea     ecx, [esp+6Ch+var_10]
.text:004028FC                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00402901                 mov     [esp+6Ch+var_64], offset __ZNSt12domain_errorD1Ev ; void (__cdecl *)(void *)
.text:00402909                 mov     [esp+6Ch+lptinfo], offset __ZTISt12domain_error ; lptinfo
.text:00402911                 mov     eax, [esp+6Ch+var_58]
.text:00402915                 mov     [esp+6Ch+lpfctx], eax ; void *
.text:00402918                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:00402920                 call    ___cxa_throw
.text:00402925 ; ---------------------------------------------------------------------------
.text:00402925
.text:00402925 loc_402925:                             ; DATA XREF: std::__throw_domain_error(char const*)+1C↑o
.text:00402925 ;   cleanup() // owned by 4028AC
.text:00402925                 mov     eax, [esp+arg_20]
.text:00402929                 mov     [esp+lpuexcpt], eax
.text:0040292D                 mov     eax, [esp+arg_1C]
.text:00402931                 test    eax, eax
.text:00402933                 jz      short loc_402943
.text:00402935                 dec     eax
.text:00402936                 jz      short loc_40293A
.text:00402938                 ud2
.text:0040293A ; ---------------------------------------------------------------------------
.text:0040293A
.text:0040293A loc_40293A:                             ; CODE XREF: std::__throw_domain_error(char const*)+BE↑j
.text:0040293A                 lea     ecx, [esp+arg_58]
.text:0040293E                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00402943
.text:00402943 loc_402943:                             ; CODE XREF: std::__throw_domain_error(char const*)+BB↑j
.text:00402943                 mov     eax, [esp+arg_10]
.text:00402947                 mov     [esp+0], eax    ; void *
.text:0040294A                 call    ___cxa_free_exception
.text:0040294F                 mov     eax, [esp+lpuexcpt]
.text:00402953                 mov     [esp+0], eax    ; lpuexcpt
.text:00402956                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:0040295E                 call    __Unwind_SjLj_Resume
.text:0040295E ;   } // starts at 4028AC
.text:0040295E ; } // starts at 4028AC
.text:0040295E __ZSt20__throw_domain_errorPKc endp
.text:0040295E
.text:0040295E ; ---------------------------------------------------------------------------
.text:00402963                 align 4
.text:00402964
.text:00402964 ; =============== S U B R O U T I N E =======================================
.text:00402964
.text:00402964 ; Attributes: noreturn
.text:00402964
.text:00402964 ; void __cdecl __noreturn std::__throw_invalid_argument(const char *)
.text:00402964                 public __ZSt24__throw_invalid_argumentPKc
.text:00402964 __ZSt24__throw_invalid_argumentPKc proc near
.text:00402964
.text:00402964 lpfctx          = dword ptr -6Ch
.text:00402964 lptinfo         = dword ptr -68h
.text:00402964 var_64          = dword ptr -64h
.text:00402964 var_58          = dword ptr -58h
.text:00402964 fctx            = SjLj_Function_Context ptr -50h
.text:00402964 var_2C          = dword ptr -2Ch
.text:00402964 var_28          = dword ptr -28h
.text:00402964 var_11          = byte ptr -11h
.text:00402964 var_10          = byte ptr -10h
.text:00402964 var_C           = byte ptr -0Ch
.text:00402964 arg_0           = dword ptr  4
.text:00402964 arg_10          = dword ptr  14h
.text:00402964 lpuexcpt        = dword ptr  18h
.text:00402964 arg_1C          = dword ptr  20h
.text:00402964 arg_20          = dword ptr  24h
.text:00402964 arg_58          = byte ptr  5Ch
.text:00402964
.text:00402964                 push    ebp
.text:00402965                 sub     esp, 68h
.text:00402968                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00402970                 mov     [esp+6Ch+fctx.lsda], offset dword_412280
.text:00402978                 lea     eax, [esp+6Ch+var_C]
.text:0040297C                 mov     [esp+6Ch+fctx.jbuf], eax
.text:00402980                 mov     [esp+6Ch+var_2C], offset loc_402A11
.text:00402988                 mov     [esp+6Ch+var_28], esp
.text:0040298C                 lea     eax, [esp+6Ch+fctx]
.text:00402990                 mov     [esp+6Ch+lpfctx], eax ; lpfctx
.text:00402993                 call    __Unwind_SjLj_Register
.text:00402998 ; __unwind { // ___gxx_personality_sj0
.text:00402998 ;   try {
.text:00402998                 mov     [esp+6Ch+lpfctx], 8 ; thrown_size
.text:0040299F                 call    ___cxa_allocate_exception
.text:004029A4                 mov     [esp+6Ch+var_58], eax
.text:004029A8                 lea     eax, [esp+6Ch+var_11]
.text:004029AC                 mov     [esp+6Ch+lptinfo], eax ; std::string *
.text:004029B0                 mov     eax, [esp+6Ch+arg_0]
.text:004029B4                 mov     [esp+6Ch+lpfctx], eax
.text:004029B7                 mov     [esp+6Ch+fctx.call_site], 1
.text:004029BF                 lea     ecx, [esp+6Ch+var_10]
.text:004029C3                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:004029C8                 sub     esp, 8
.text:004029CB                 lea     eax, [esp+6Ch+var_10]
.text:004029CF                 mov     [esp+6Ch+lpfctx], eax ; this
.text:004029D2                 mov     [esp+6Ch+fctx.call_site], 2
.text:004029DA                 mov     ecx, [esp+6Ch+var_58]
.text:004029DE                 call    __ZNSt16invalid_argumentC1ERKSs ; std::invalid_argument::invalid_argument(std::string const&)
.text:004029E3                 push    ecx             ; this
.text:004029E4                 lea     ecx, [esp+6Ch+var_10]
.text:004029E8                 call    __ZNSsD1Ev      ; std::string::~string()
.text:004029ED                 mov     [esp+6Ch+var_64], offset __ZNSt16invalid_argumentD1Ev ; void (__cdecl *)(void *)
.text:004029F5                 mov     [esp+6Ch+lptinfo], offset __ZTISt16invalid_argument ; lptinfo
.text:004029FD                 mov     eax, [esp+6Ch+var_58]
.text:00402A01                 mov     [esp+6Ch+lpfctx], eax ; void *
.text:00402A04                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:00402A0C                 call    ___cxa_throw
.text:00402A11 ; ---------------------------------------------------------------------------
.text:00402A11
.text:00402A11 loc_402A11:                             ; DATA XREF: std::__throw_invalid_argument(char const*)+1C↑o
.text:00402A11 ;   cleanup() // owned by 402998
.text:00402A11                 mov     eax, [esp+arg_20]
.text:00402A15                 mov     [esp+lpuexcpt], eax
.text:00402A19                 mov     eax, [esp+arg_1C]
.text:00402A1D                 test    eax, eax
.text:00402A1F                 jz      short loc_402A2F
.text:00402A21                 dec     eax
.text:00402A22                 jz      short loc_402A26
.text:00402A24                 ud2
.text:00402A26 ; ---------------------------------------------------------------------------
.text:00402A26
.text:00402A26 loc_402A26:                             ; CODE XREF: std::__throw_invalid_argument(char const*)+BE↑j
.text:00402A26                 lea     ecx, [esp+arg_58]
.text:00402A2A                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00402A2F
.text:00402A2F loc_402A2F:                             ; CODE XREF: std::__throw_invalid_argument(char const*)+BB↑j
.text:00402A2F                 mov     eax, [esp+arg_10]
.text:00402A33                 mov     [esp+0], eax    ; void *
.text:00402A36                 call    ___cxa_free_exception
.text:00402A3B                 mov     eax, [esp+lpuexcpt]
.text:00402A3F                 mov     [esp+0], eax    ; lpuexcpt
.text:00402A42                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00402A4A                 call    __Unwind_SjLj_Resume
.text:00402A4A ;   } // starts at 402998
.text:00402A4A ; } // starts at 402998
.text:00402A4A __ZSt24__throw_invalid_argumentPKc endp
.text:00402A4A
.text:00402A4A ; ---------------------------------------------------------------------------
.text:00402A4F                 align 10h
.text:00402A50
.text:00402A50 ; =============== S U B R O U T I N E =======================================
.text:00402A50
.text:00402A50 ; Attributes: noreturn
.text:00402A50
.text:00402A50 ; void __cdecl __noreturn std::__throw_length_error(const char *)
.text:00402A50                 public __ZSt20__throw_length_errorPKc
.text:00402A50 __ZSt20__throw_length_errorPKc proc near
.text:00402A50                                         ; CODE XREF: std::string::append(uint,char) [clone]+87↓p
.text:00402A50                                         ; std::string::_M_check_length(uint,uint,char const*)+24↓p ...
.text:00402A50
.text:00402A50 lpfctx          = dword ptr -6Ch
.text:00402A50 lptinfo         = dword ptr -68h
.text:00402A50 var_64          = dword ptr -64h
.text:00402A50 var_58          = dword ptr -58h
.text:00402A50 fctx            = SjLj_Function_Context ptr -50h
.text:00402A50 var_2C          = dword ptr -2Ch
.text:00402A50 var_28          = dword ptr -28h
.text:00402A50 var_11          = byte ptr -11h
.text:00402A50 var_10          = byte ptr -10h
.text:00402A50 var_C           = byte ptr -0Ch
.text:00402A50 arg_0           = dword ptr  4
.text:00402A50 arg_10          = dword ptr  14h
.text:00402A50 lpuexcpt        = dword ptr  18h
.text:00402A50 arg_1C          = dword ptr  20h
.text:00402A50 arg_20          = dword ptr  24h
.text:00402A50 arg_58          = byte ptr  5Ch
.text:00402A50
.text:00402A50                 push    ebp
.text:00402A51                 sub     esp, 68h
.text:00402A54                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00402A5C                 mov     [esp+6Ch+fctx.lsda], offset dword_412288
.text:00402A64                 lea     eax, [esp+6Ch+var_C]
.text:00402A68                 mov     [esp+6Ch+fctx.jbuf], eax
.text:00402A6C                 mov     [esp+6Ch+var_2C], offset loc_402AFD
.text:00402A74                 mov     [esp+6Ch+var_28], esp
.text:00402A78                 lea     eax, [esp+6Ch+fctx]
.text:00402A7C                 mov     [esp+6Ch+lpfctx], eax ; lpfctx
.text:00402A7F                 call    __Unwind_SjLj_Register
.text:00402A84 ; __unwind { // ___gxx_personality_sj0
.text:00402A84 ;   try {
.text:00402A84                 mov     [esp+6Ch+lpfctx], 8 ; thrown_size
.text:00402A8B                 call    ___cxa_allocate_exception
.text:00402A90                 mov     [esp+6Ch+var_58], eax
.text:00402A94                 lea     eax, [esp+6Ch+var_11]
.text:00402A98                 mov     [esp+6Ch+lptinfo], eax ; std::string *
.text:00402A9C                 mov     eax, [esp+6Ch+arg_0]
.text:00402AA0                 mov     [esp+6Ch+lpfctx], eax
.text:00402AA3                 mov     [esp+6Ch+fctx.call_site], 1
.text:00402AAB                 lea     ecx, [esp+6Ch+var_10]
.text:00402AAF                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:00402AB4                 sub     esp, 8
.text:00402AB7                 lea     eax, [esp+6Ch+var_10]
.text:00402ABB                 mov     [esp+6Ch+lpfctx], eax ; this
.text:00402ABE                 mov     [esp+6Ch+fctx.call_site], 2
.text:00402AC6                 mov     ecx, [esp+6Ch+var_58]
.text:00402ACA                 call    __ZNSt12length_errorC1ERKSs ; std::length_error::length_error(std::string const&)
.text:00402ACF                 push    ebp             ; this
.text:00402AD0                 lea     ecx, [esp+6Ch+var_10]
.text:00402AD4                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00402AD9                 mov     [esp+6Ch+var_64], offset __ZNSt12length_errorD1Ev ; void (__cdecl *)(void *)
.text:00402AE1                 mov     [esp+6Ch+lptinfo], offset __ZTISt12length_error ; lptinfo
.text:00402AE9                 mov     eax, [esp+6Ch+var_58]
.text:00402AED                 mov     [esp+6Ch+lpfctx], eax ; void *
.text:00402AF0                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:00402AF8                 call    ___cxa_throw
.text:00402AFD ; ---------------------------------------------------------------------------
.text:00402AFD
.text:00402AFD loc_402AFD:                             ; DATA XREF: std::__throw_length_error(char const*)+1C↑o
.text:00402AFD ;   cleanup() // owned by 402A84
.text:00402AFD                 mov     eax, [esp+arg_20]
.text:00402B01                 mov     [esp+lpuexcpt], eax
.text:00402B05                 mov     eax, [esp+arg_1C]
.text:00402B09                 test    eax, eax
.text:00402B0B                 jz      short loc_402B1B
.text:00402B0D                 dec     eax
.text:00402B0E                 jz      short loc_402B12
.text:00402B10                 ud2
.text:00402B12 ; ---------------------------------------------------------------------------
.text:00402B12
.text:00402B12 loc_402B12:                             ; CODE XREF: std::__throw_length_error(char const*)+BE↑j
.text:00402B12                 lea     ecx, [esp+arg_58]
.text:00402B16                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00402B1B
.text:00402B1B loc_402B1B:                             ; CODE XREF: std::__throw_length_error(char const*)+BB↑j
.text:00402B1B                 mov     eax, [esp+arg_10]
.text:00402B1F                 mov     [esp+0], eax    ; void *
.text:00402B22                 call    ___cxa_free_exception
.text:00402B27                 mov     eax, [esp+lpuexcpt]
.text:00402B2B                 mov     [esp+0], eax    ; lpuexcpt
.text:00402B2E                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00402B36                 call    __Unwind_SjLj_Resume
.text:00402B36 ;   } // starts at 402A84
.text:00402B36 ; } // starts at 402A84
.text:00402B36 __ZSt20__throw_length_errorPKc endp
.text:00402B36
.text:00402B36 ; ---------------------------------------------------------------------------
.text:00402B3B                 align 4
.text:00402B3C
.text:00402B3C ; =============== S U B R O U T I N E =======================================
.text:00402B3C
.text:00402B3C ; Attributes: noreturn
.text:00402B3C
.text:00402B3C ; void __cdecl __noreturn std::__throw_out_of_range(const char *)
.text:00402B3C                 public __ZSt20__throw_out_of_rangePKc
.text:00402B3C __ZSt20__throw_out_of_rangePKc proc near
.text:00402B3C                                         ; CODE XREF: std::string::at(uint)+1D↓p
.text:00402B3C                                         ; std::string::copy(char *,uint,uint)+5F↓p ...
.text:00402B3C
.text:00402B3C lpfctx          = dword ptr -6Ch
.text:00402B3C lptinfo         = dword ptr -68h
.text:00402B3C var_64          = dword ptr -64h
.text:00402B3C var_58          = dword ptr -58h
.text:00402B3C fctx            = SjLj_Function_Context ptr -50h
.text:00402B3C var_2C          = dword ptr -2Ch
.text:00402B3C var_28          = dword ptr -28h
.text:00402B3C var_11          = byte ptr -11h
.text:00402B3C var_10          = byte ptr -10h
.text:00402B3C var_C           = byte ptr -0Ch
.text:00402B3C arg_0           = dword ptr  4
.text:00402B3C arg_10          = dword ptr  14h
.text:00402B3C lpuexcpt        = dword ptr  18h
.text:00402B3C arg_1C          = dword ptr  20h
.text:00402B3C arg_20          = dword ptr  24h
.text:00402B3C arg_58          = byte ptr  5Ch
.text:00402B3C
.text:00402B3C                 push    ebp
.text:00402B3D                 sub     esp, 68h
.text:00402B40                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00402B48                 mov     [esp+6Ch+fctx.lsda], offset dword_412290
.text:00402B50                 lea     eax, [esp+6Ch+var_C]
.text:00402B54                 mov     [esp+6Ch+fctx.jbuf], eax
.text:00402B58                 mov     [esp+6Ch+var_2C], offset loc_402BE9
.text:00402B60                 mov     [esp+6Ch+var_28], esp
.text:00402B64                 lea     eax, [esp+6Ch+fctx]
.text:00402B68                 mov     [esp+6Ch+lpfctx], eax ; lpfctx
.text:00402B6B                 call    __Unwind_SjLj_Register
.text:00402B70 ; __unwind { // ___gxx_personality_sj0
.text:00402B70 ;   try {
.text:00402B70                 mov     [esp+6Ch+lpfctx], 8 ; thrown_size
.text:00402B77                 call    ___cxa_allocate_exception
.text:00402B7C                 mov     [esp+6Ch+var_58], eax
.text:00402B80                 lea     eax, [esp+6Ch+var_11]
.text:00402B84                 mov     [esp+6Ch+lptinfo], eax ; std::string *
.text:00402B88                 mov     eax, [esp+6Ch+arg_0]
.text:00402B8C                 mov     [esp+6Ch+lpfctx], eax
.text:00402B8F                 mov     [esp+6Ch+fctx.call_site], 1
.text:00402B97                 lea     ecx, [esp+6Ch+var_10]
.text:00402B9B                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:00402BA0                 sub     esp, 8
.text:00402BA3                 lea     eax, [esp+6Ch+var_10]
.text:00402BA7                 mov     [esp+6Ch+lpfctx], eax ; this
.text:00402BAA                 mov     [esp+6Ch+fctx.call_site], 2
.text:00402BB2                 mov     ecx, [esp+6Ch+var_58]
.text:00402BB6                 call    __ZNSt12out_of_rangeC1ERKSs ; std::out_of_range::out_of_range(std::string const&)
.text:00402BBB                 push    eax             ; this
.text:00402BBC                 lea     ecx, [esp+6Ch+var_10]
.text:00402BC0                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00402BC5                 mov     [esp+6Ch+var_64], offset __ZNSt12out_of_rangeD1Ev ; void (__cdecl *)(void *)
.text:00402BCD                 mov     [esp+6Ch+lptinfo], offset __ZTISt12out_of_range ; lptinfo
.text:00402BD5                 mov     eax, [esp+6Ch+var_58]
.text:00402BD9                 mov     [esp+6Ch+lpfctx], eax ; void *
.text:00402BDC                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:00402BE4                 call    ___cxa_throw
.text:00402BE9 ; ---------------------------------------------------------------------------
.text:00402BE9
.text:00402BE9 loc_402BE9:                             ; DATA XREF: std::__throw_out_of_range(char const*)+1C↑o
.text:00402BE9 ;   cleanup() // owned by 402B70
.text:00402BE9                 mov     eax, [esp+arg_20]
.text:00402BED                 mov     [esp+lpuexcpt], eax
.text:00402BF1                 mov     eax, [esp+arg_1C]
.text:00402BF5                 test    eax, eax
.text:00402BF7                 jz      short loc_402C07
.text:00402BF9                 dec     eax
.text:00402BFA                 jz      short loc_402BFE
.text:00402BFC                 ud2
.text:00402BFE ; ---------------------------------------------------------------------------
.text:00402BFE
.text:00402BFE loc_402BFE:                             ; CODE XREF: std::__throw_out_of_range(char const*)+BE↑j
.text:00402BFE                 lea     ecx, [esp+arg_58]
.text:00402C02                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00402C07
.text:00402C07 loc_402C07:                             ; CODE XREF: std::__throw_out_of_range(char const*)+BB↑j
.text:00402C07                 mov     eax, [esp+arg_10]
.text:00402C0B                 mov     [esp+0], eax    ; void *
.text:00402C0E                 call    ___cxa_free_exception
.text:00402C13                 mov     eax, [esp+lpuexcpt]
.text:00402C17                 mov     [esp+0], eax    ; lpuexcpt
.text:00402C1A                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00402C22                 call    __Unwind_SjLj_Resume
.text:00402C22 ;   } // starts at 402B70
.text:00402C22 ; } // starts at 402B70
.text:00402C22 __ZSt20__throw_out_of_rangePKc endp
.text:00402C22
.text:00402C22 ; ---------------------------------------------------------------------------
.text:00402C27                 align 4
.text:00402C28
.text:00402C28 ; =============== S U B R O U T I N E =======================================
.text:00402C28
.text:00402C28 ; Attributes: noreturn
.text:00402C28
.text:00402C28 ; void __cdecl __noreturn std::__throw_runtime_error(const char *)
.text:00402C28                 public __ZSt21__throw_runtime_errorPKc
.text:00402C28 __ZSt21__throw_runtime_errorPKc proc near
.text:00402C28
.text:00402C28 lpfctx          = dword ptr -6Ch
.text:00402C28 lptinfo         = dword ptr -68h
.text:00402C28 var_64          = dword ptr -64h
.text:00402C28 var_58          = dword ptr -58h
.text:00402C28 fctx            = SjLj_Function_Context ptr -50h
.text:00402C28 var_2C          = dword ptr -2Ch
.text:00402C28 var_28          = dword ptr -28h
.text:00402C28 var_11          = byte ptr -11h
.text:00402C28 var_10          = byte ptr -10h
.text:00402C28 var_C           = byte ptr -0Ch
.text:00402C28 arg_0           = dword ptr  4
.text:00402C28 arg_10          = dword ptr  14h
.text:00402C28 lpuexcpt        = dword ptr  18h
.text:00402C28 arg_1C          = dword ptr  20h
.text:00402C28 arg_20          = dword ptr  24h
.text:00402C28 arg_58          = byte ptr  5Ch
.text:00402C28
.text:00402C28                 push    ebp
.text:00402C29                 sub     esp, 68h
.text:00402C2C                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00402C34                 mov     [esp+6Ch+fctx.lsda], offset dword_412298
.text:00402C3C                 lea     eax, [esp+6Ch+var_C]
.text:00402C40                 mov     [esp+6Ch+fctx.jbuf], eax
.text:00402C44                 mov     [esp+6Ch+var_2C], offset loc_402CD5
.text:00402C4C                 mov     [esp+6Ch+var_28], esp
.text:00402C50                 lea     eax, [esp+6Ch+fctx]
.text:00402C54                 mov     [esp+6Ch+lpfctx], eax ; lpfctx
.text:00402C57                 call    __Unwind_SjLj_Register
.text:00402C5C ; __unwind { // ___gxx_personality_sj0
.text:00402C5C ;   try {
.text:00402C5C                 mov     [esp+6Ch+lpfctx], 8 ; thrown_size
.text:00402C63                 call    ___cxa_allocate_exception
.text:00402C68                 mov     [esp+6Ch+var_58], eax
.text:00402C6C                 lea     eax, [esp+6Ch+var_11]
.text:00402C70                 mov     [esp+6Ch+lptinfo], eax ; std::string *
.text:00402C74                 mov     eax, [esp+6Ch+arg_0]
.text:00402C78                 mov     [esp+6Ch+lpfctx], eax
.text:00402C7B                 mov     [esp+6Ch+fctx.call_site], 1
.text:00402C83                 lea     ecx, [esp+6Ch+var_10]
.text:00402C87                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:00402C8C                 sub     esp, 8
.text:00402C8F                 lea     eax, [esp+6Ch+var_10]
.text:00402C93                 mov     [esp+6Ch+lpfctx], eax ; this
.text:00402C96                 mov     [esp+6Ch+fctx.call_site], 2
.text:00402C9E                 mov     ecx, [esp+6Ch+var_58]
.text:00402CA2                 call    __ZNSt13runtime_errorC1ERKSs ; std::runtime_error::runtime_error(std::string const&)
.text:00402CA7                 push    eax             ; this
.text:00402CA8                 lea     ecx, [esp+6Ch+var_10]
.text:00402CAC                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00402CB1                 mov     [esp+6Ch+var_64], offset __ZNSt13runtime_errorD1Ev ; void (__cdecl *)(void *)
.text:00402CB9                 mov     [esp+6Ch+lptinfo], offset __ZTISt13runtime_error ; lptinfo
.text:00402CC1                 mov     eax, [esp+6Ch+var_58]
.text:00402CC5                 mov     [esp+6Ch+lpfctx], eax ; void *
.text:00402CC8                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:00402CD0                 call    ___cxa_throw
.text:00402CD5 ; ---------------------------------------------------------------------------
.text:00402CD5
.text:00402CD5 loc_402CD5:                             ; DATA XREF: std::__throw_runtime_error(char const*)+1C↑o
.text:00402CD5 ;   cleanup() // owned by 402C5C
.text:00402CD5                 mov     eax, [esp+arg_20]
.text:00402CD9                 mov     [esp+lpuexcpt], eax
.text:00402CDD                 mov     eax, [esp+arg_1C]
.text:00402CE1                 test    eax, eax
.text:00402CE3                 jz      short loc_402CF3
.text:00402CE5                 dec     eax
.text:00402CE6                 jz      short loc_402CEA
.text:00402CE8                 ud2
.text:00402CEA ; ---------------------------------------------------------------------------
.text:00402CEA
.text:00402CEA loc_402CEA:                             ; CODE XREF: std::__throw_runtime_error(char const*)+BE↑j
.text:00402CEA                 lea     ecx, [esp+arg_58]
.text:00402CEE                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00402CF3
.text:00402CF3 loc_402CF3:                             ; CODE XREF: std::__throw_runtime_error(char const*)+BB↑j
.text:00402CF3                 mov     eax, [esp+arg_10]
.text:00402CF7                 mov     [esp+0], eax    ; void *
.text:00402CFA                 call    ___cxa_free_exception
.text:00402CFF                 mov     eax, [esp+lpuexcpt]
.text:00402D03                 mov     [esp+0], eax    ; lpuexcpt
.text:00402D06                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00402D0E                 call    __Unwind_SjLj_Resume
.text:00402D0E ;   } // starts at 402C5C
.text:00402D0E ; } // starts at 402C5C
.text:00402D0E __ZSt21__throw_runtime_errorPKc endp
.text:00402D0E
.text:00402D0E ; ---------------------------------------------------------------------------
.text:00402D13                 align 4
.text:00402D14
.text:00402D14 ; =============== S U B R O U T I N E =======================================
.text:00402D14
.text:00402D14 ; Attributes: noreturn
.text:00402D14
.text:00402D14 ; void __cdecl __noreturn std::__throw_range_error(const char *)
.text:00402D14                 public __ZSt19__throw_range_errorPKc
.text:00402D14 __ZSt19__throw_range_errorPKc proc near
.text:00402D14
.text:00402D14 lpfctx          = dword ptr -6Ch
.text:00402D14 lptinfo         = dword ptr -68h
.text:00402D14 var_64          = dword ptr -64h
.text:00402D14 var_58          = dword ptr -58h
.text:00402D14 fctx            = SjLj_Function_Context ptr -50h
.text:00402D14 var_2C          = dword ptr -2Ch
.text:00402D14 var_28          = dword ptr -28h
.text:00402D14 var_11          = byte ptr -11h
.text:00402D14 var_10          = byte ptr -10h
.text:00402D14 var_C           = byte ptr -0Ch
.text:00402D14 arg_0           = dword ptr  4
.text:00402D14 arg_10          = dword ptr  14h
.text:00402D14 lpuexcpt        = dword ptr  18h
.text:00402D14 arg_1C          = dword ptr  20h
.text:00402D14 arg_20          = dword ptr  24h
.text:00402D14 arg_58          = byte ptr  5Ch
.text:00402D14
.text:00402D14                 push    ebp
.text:00402D15                 sub     esp, 68h
.text:00402D18                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00402D20                 mov     [esp+6Ch+fctx.lsda], offset dword_4122A0
.text:00402D28                 lea     eax, [esp+6Ch+var_C]
.text:00402D2C                 mov     [esp+6Ch+fctx.jbuf], eax
.text:00402D30                 mov     [esp+6Ch+var_2C], offset loc_402DC1
.text:00402D38                 mov     [esp+6Ch+var_28], esp
.text:00402D3C                 lea     eax, [esp+6Ch+fctx]
.text:00402D40                 mov     [esp+6Ch+lpfctx], eax ; lpfctx
.text:00402D43                 call    __Unwind_SjLj_Register
.text:00402D48 ; __unwind { // ___gxx_personality_sj0
.text:00402D48 ;   try {
.text:00402D48                 mov     [esp+6Ch+lpfctx], 8 ; thrown_size
.text:00402D4F                 call    ___cxa_allocate_exception
.text:00402D54                 mov     [esp+6Ch+var_58], eax
.text:00402D58                 lea     eax, [esp+6Ch+var_11]
.text:00402D5C                 mov     [esp+6Ch+lptinfo], eax ; std::string *
.text:00402D60                 mov     eax, [esp+6Ch+arg_0]
.text:00402D64                 mov     [esp+6Ch+lpfctx], eax
.text:00402D67                 mov     [esp+6Ch+fctx.call_site], 1
.text:00402D6F                 lea     ecx, [esp+6Ch+var_10]
.text:00402D73                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:00402D78                 sub     esp, 8
.text:00402D7B                 lea     eax, [esp+6Ch+var_10]
.text:00402D7F                 mov     [esp+6Ch+lpfctx], eax ; this
.text:00402D82                 mov     [esp+6Ch+fctx.call_site], 2
.text:00402D8A                 mov     ecx, [esp+6Ch+var_58]
.text:00402D8E                 call    __ZNSt11range_errorC1ERKSs ; std::range_error::range_error(std::string const&)
.text:00402D93                 push    eax             ; this
.text:00402D94                 lea     ecx, [esp+6Ch+var_10]
.text:00402D98                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00402D9D                 mov     [esp+6Ch+var_64], offset __ZNSt11range_errorD1Ev ; void (__cdecl *)(void *)
.text:00402DA5                 mov     [esp+6Ch+lptinfo], offset __ZTISt11range_error ; lptinfo
.text:00402DAD                 mov     eax, [esp+6Ch+var_58]
.text:00402DB1                 mov     [esp+6Ch+lpfctx], eax ; void *
.text:00402DB4                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:00402DBC                 call    ___cxa_throw
.text:00402DC1 ; ---------------------------------------------------------------------------
.text:00402DC1
.text:00402DC1 loc_402DC1:                             ; DATA XREF: std::__throw_range_error(char const*)+1C↑o
.text:00402DC1 ;   cleanup() // owned by 402D48
.text:00402DC1                 mov     eax, [esp+arg_20]
.text:00402DC5                 mov     [esp+lpuexcpt], eax
.text:00402DC9                 mov     eax, [esp+arg_1C]
.text:00402DCD                 test    eax, eax
.text:00402DCF                 jz      short loc_402DDF
.text:00402DD1                 dec     eax
.text:00402DD2                 jz      short loc_402DD6
.text:00402DD4                 ud2
.text:00402DD6 ; ---------------------------------------------------------------------------
.text:00402DD6
.text:00402DD6 loc_402DD6:                             ; CODE XREF: std::__throw_range_error(char const*)+BE↑j
.text:00402DD6                 lea     ecx, [esp+arg_58]
.text:00402DDA                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00402DDF
.text:00402DDF loc_402DDF:                             ; CODE XREF: std::__throw_range_error(char const*)+BB↑j
.text:00402DDF                 mov     eax, [esp+arg_10]
.text:00402DE3                 mov     [esp+0], eax    ; void *
.text:00402DE6                 call    ___cxa_free_exception
.text:00402DEB                 mov     eax, [esp+lpuexcpt]
.text:00402DEF                 mov     [esp+0], eax    ; lpuexcpt
.text:00402DF2                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00402DFA                 call    __Unwind_SjLj_Resume
.text:00402DFA ;   } // starts at 402D48
.text:00402DFA ; } // starts at 402D48
.text:00402DFA __ZSt19__throw_range_errorPKc endp
.text:00402DFA
.text:00402DFA ; ---------------------------------------------------------------------------
.text:00402DFF                 align 10h
.text:00402E00
.text:00402E00 ; =============== S U B R O U T I N E =======================================
.text:00402E00
.text:00402E00 ; Attributes: noreturn
.text:00402E00
.text:00402E00 ; void __cdecl __noreturn std::__throw_overflow_error(const char *)
.text:00402E00                 public __ZSt22__throw_overflow_errorPKc
.text:00402E00 __ZSt22__throw_overflow_errorPKc proc near
.text:00402E00
.text:00402E00 lpfctx          = dword ptr -6Ch
.text:00402E00 lptinfo         = dword ptr -68h
.text:00402E00 var_64          = dword ptr -64h
.text:00402E00 var_58          = dword ptr -58h
.text:00402E00 fctx            = SjLj_Function_Context ptr -50h
.text:00402E00 var_2C          = dword ptr -2Ch
.text:00402E00 var_28          = dword ptr -28h
.text:00402E00 var_11          = byte ptr -11h
.text:00402E00 var_10          = byte ptr -10h
.text:00402E00 var_C           = byte ptr -0Ch
.text:00402E00 arg_0           = dword ptr  4
.text:00402E00 arg_10          = dword ptr  14h
.text:00402E00 lpuexcpt        = dword ptr  18h
.text:00402E00 arg_1C          = dword ptr  20h
.text:00402E00 arg_20          = dword ptr  24h
.text:00402E00 arg_58          = byte ptr  5Ch
.text:00402E00
.text:00402E00                 push    ebp
.text:00402E01                 sub     esp, 68h
.text:00402E04                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00402E0C                 mov     [esp+6Ch+fctx.lsda], offset dword_4122A8
.text:00402E14                 lea     eax, [esp+6Ch+var_C]
.text:00402E18                 mov     [esp+6Ch+fctx.jbuf], eax
.text:00402E1C                 mov     [esp+6Ch+var_2C], offset loc_402EAD
.text:00402E24                 mov     [esp+6Ch+var_28], esp
.text:00402E28                 lea     eax, [esp+6Ch+fctx]
.text:00402E2C                 mov     [esp+6Ch+lpfctx], eax ; lpfctx
.text:00402E2F                 call    __Unwind_SjLj_Register
.text:00402E34 ; __unwind { // ___gxx_personality_sj0
.text:00402E34 ;   try {
.text:00402E34                 mov     [esp+6Ch+lpfctx], 8 ; thrown_size
.text:00402E3B                 call    ___cxa_allocate_exception
.text:00402E40                 mov     [esp+6Ch+var_58], eax
.text:00402E44                 lea     eax, [esp+6Ch+var_11]
.text:00402E48                 mov     [esp+6Ch+lptinfo], eax ; std::string *
.text:00402E4C                 mov     eax, [esp+6Ch+arg_0]
.text:00402E50                 mov     [esp+6Ch+lpfctx], eax
.text:00402E53                 mov     [esp+6Ch+fctx.call_site], 1
.text:00402E5B                 lea     ecx, [esp+6Ch+var_10]
.text:00402E5F                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:00402E64                 sub     esp, 8
.text:00402E67                 lea     eax, [esp+6Ch+var_10]
.text:00402E6B                 mov     [esp+6Ch+lpfctx], eax ; this
.text:00402E6E                 mov     [esp+6Ch+fctx.call_site], 2
.text:00402E76                 mov     ecx, [esp+6Ch+var_58]
.text:00402E7A                 call    __ZNSt14overflow_errorC1ERKSs ; std::overflow_error::overflow_error(std::string const&)
.text:00402E7F                 push    eax             ; this
.text:00402E80                 lea     ecx, [esp+6Ch+var_10]
.text:00402E84                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00402E89                 mov     [esp+6Ch+var_64], offset __ZNSt14overflow_errorD1Ev ; void (__cdecl *)(void *)
.text:00402E91                 mov     [esp+6Ch+lptinfo], offset __ZTISt14overflow_error ; lptinfo
.text:00402E99                 mov     eax, [esp+6Ch+var_58]
.text:00402E9D                 mov     [esp+6Ch+lpfctx], eax ; void *
.text:00402EA0                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:00402EA8                 call    ___cxa_throw
.text:00402EAD ; ---------------------------------------------------------------------------
.text:00402EAD
.text:00402EAD loc_402EAD:                             ; DATA XREF: std::__throw_overflow_error(char const*)+1C↑o
.text:00402EAD ;   cleanup() // owned by 402E34
.text:00402EAD                 mov     eax, [esp+arg_20]
.text:00402EB1                 mov     [esp+lpuexcpt], eax
.text:00402EB5                 mov     eax, [esp+arg_1C]
.text:00402EB9                 test    eax, eax
.text:00402EBB                 jz      short loc_402ECB
.text:00402EBD                 dec     eax
.text:00402EBE                 jz      short loc_402EC2
.text:00402EC0                 ud2
.text:00402EC2 ; ---------------------------------------------------------------------------
.text:00402EC2
.text:00402EC2 loc_402EC2:                             ; CODE XREF: std::__throw_overflow_error(char const*)+BE↑j
.text:00402EC2                 lea     ecx, [esp+arg_58]
.text:00402EC6                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00402ECB
.text:00402ECB loc_402ECB:                             ; CODE XREF: std::__throw_overflow_error(char const*)+BB↑j
.text:00402ECB                 mov     eax, [esp+arg_10]
.text:00402ECF                 mov     [esp+0], eax    ; void *
.text:00402ED2                 call    ___cxa_free_exception
.text:00402ED7                 mov     eax, [esp+lpuexcpt]
.text:00402EDB                 mov     [esp+0], eax    ; lpuexcpt
.text:00402EDE                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00402EE6                 call    __Unwind_SjLj_Resume
.text:00402EE6 ;   } // starts at 402E34
.text:00402EE6 ; } // starts at 402E34
.text:00402EE6 __ZSt22__throw_overflow_errorPKc endp
.text:00402EE6
.text:00402EE6 ; ---------------------------------------------------------------------------
.text:00402EEB                 align 4
.text:00402EEC
.text:00402EEC ; =============== S U B R O U T I N E =======================================
.text:00402EEC
.text:00402EEC ; Attributes: noreturn
.text:00402EEC
.text:00402EEC ; void __cdecl __noreturn std::__throw_underflow_error(const char *)
.text:00402EEC                 public __ZSt23__throw_underflow_errorPKc
.text:00402EEC __ZSt23__throw_underflow_errorPKc proc near
.text:00402EEC
.text:00402EEC lpfctx          = dword ptr -6Ch
.text:00402EEC lptinfo         = dword ptr -68h
.text:00402EEC var_64          = dword ptr -64h
.text:00402EEC var_58          = dword ptr -58h
.text:00402EEC fctx            = SjLj_Function_Context ptr -50h
.text:00402EEC var_2C          = dword ptr -2Ch
.text:00402EEC var_28          = dword ptr -28h
.text:00402EEC var_11          = byte ptr -11h
.text:00402EEC var_10          = byte ptr -10h
.text:00402EEC var_C           = byte ptr -0Ch
.text:00402EEC arg_0           = dword ptr  4
.text:00402EEC arg_10          = dword ptr  14h
.text:00402EEC lpuexcpt        = dword ptr  18h
.text:00402EEC arg_1C          = dword ptr  20h
.text:00402EEC arg_20          = dword ptr  24h
.text:00402EEC arg_58          = byte ptr  5Ch
.text:00402EEC
.text:00402EEC                 push    ebp
.text:00402EED                 sub     esp, 68h
.text:00402EF0                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00402EF8                 mov     [esp+6Ch+fctx.lsda], offset dword_4122B0
.text:00402F00                 lea     eax, [esp+6Ch+var_C]
.text:00402F04                 mov     [esp+6Ch+fctx.jbuf], eax
.text:00402F08                 mov     [esp+6Ch+var_2C], offset loc_402F99
.text:00402F10                 mov     [esp+6Ch+var_28], esp
.text:00402F14                 lea     eax, [esp+6Ch+fctx]
.text:00402F18                 mov     [esp+6Ch+lpfctx], eax ; lpfctx
.text:00402F1B                 call    __Unwind_SjLj_Register
.text:00402F20 ; __unwind { // ___gxx_personality_sj0
.text:00402F20 ;   try {
.text:00402F20                 mov     [esp+6Ch+lpfctx], 8 ; thrown_size
.text:00402F27                 call    ___cxa_allocate_exception
.text:00402F2C                 mov     [esp+6Ch+var_58], eax
.text:00402F30                 lea     eax, [esp+6Ch+var_11]
.text:00402F34                 mov     [esp+6Ch+lptinfo], eax ; std::string *
.text:00402F38                 mov     eax, [esp+6Ch+arg_0]
.text:00402F3C                 mov     [esp+6Ch+lpfctx], eax
.text:00402F3F                 mov     [esp+6Ch+fctx.call_site], 1
.text:00402F47                 lea     ecx, [esp+6Ch+var_10]
.text:00402F4B                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:00402F50                 sub     esp, 8
.text:00402F53                 lea     eax, [esp+6Ch+var_10]
.text:00402F57                 mov     [esp+6Ch+lpfctx], eax ; this
.text:00402F5A                 mov     [esp+6Ch+fctx.call_site], 2
.text:00402F62                 mov     ecx, [esp+6Ch+var_58]
.text:00402F66                 call    __ZNSt15underflow_errorC1ERKSs ; std::underflow_error::underflow_error(std::string const&)
.text:00402F6B                 push    eax             ; this
.text:00402F6C                 lea     ecx, [esp+6Ch+var_10]
.text:00402F70                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00402F75                 mov     [esp+6Ch+var_64], offset __ZNSt15underflow_errorD1Ev ; void (__cdecl *)(void *)
.text:00402F7D                 mov     [esp+6Ch+lptinfo], offset __ZTISt15underflow_error ; lptinfo
.text:00402F85                 mov     eax, [esp+6Ch+var_58]
.text:00402F89                 mov     [esp+6Ch+lpfctx], eax ; void *
.text:00402F8C                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:00402F94                 call    ___cxa_throw
.text:00402F99 ; ---------------------------------------------------------------------------
.text:00402F99
.text:00402F99 loc_402F99:                             ; DATA XREF: std::__throw_underflow_error(char const*)+1C↑o
.text:00402F99 ;   cleanup() // owned by 402F20
.text:00402F99                 mov     eax, [esp+arg_20]
.text:00402F9D                 mov     [esp+lpuexcpt], eax
.text:00402FA1                 mov     eax, [esp+arg_1C]
.text:00402FA5                 test    eax, eax
.text:00402FA7                 jz      short loc_402FB7
.text:00402FA9                 dec     eax
.text:00402FAA                 jz      short loc_402FAE
.text:00402FAC                 ud2
.text:00402FAE ; ---------------------------------------------------------------------------
.text:00402FAE
.text:00402FAE loc_402FAE:                             ; CODE XREF: std::__throw_underflow_error(char const*)+BE↑j
.text:00402FAE                 lea     ecx, [esp+arg_58]
.text:00402FB2                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00402FB7
.text:00402FB7 loc_402FB7:                             ; CODE XREF: std::__throw_underflow_error(char const*)+BB↑j
.text:00402FB7                 mov     eax, [esp+arg_10]
.text:00402FBB                 mov     [esp+0], eax    ; void *
.text:00402FBE                 call    ___cxa_free_exception
.text:00402FC3                 mov     eax, [esp+lpuexcpt]
.text:00402FC7                 mov     [esp+0], eax    ; lpuexcpt
.text:00402FCA                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00402FD2                 call    __Unwind_SjLj_Resume
.text:00402FD2 ;   } // starts at 402F20
.text:00402FD2 ; } // starts at 402F20
.text:00402FD2 __ZSt23__throw_underflow_errorPKc endp
.text:00402FD2
.text:00402FD2 ; ---------------------------------------------------------------------------
.text:00402FD7                 align 4
.text:00402FD8
.text:00402FD8 ; =============== S U B R O U T I N E =======================================
.text:00402FD8
.text:00402FD8 ; Attributes: noreturn
.text:00402FD8
.text:00402FD8 ; void __cdecl __noreturn std::__throw_ios_failure(const char *)
.text:00402FD8                 public __ZSt19__throw_ios_failurePKc
.text:00402FD8 __ZSt19__throw_ios_failurePKc proc near
.text:00402FD8
.text:00402FD8 lpfctx          = dword ptr -6Ch
.text:00402FD8 lptinfo         = dword ptr -68h
.text:00402FD8 var_64          = dword ptr -64h
.text:00402FD8 var_58          = dword ptr -58h
.text:00402FD8 fctx            = SjLj_Function_Context ptr -50h
.text:00402FD8 var_2C          = dword ptr -2Ch
.text:00402FD8 var_28          = dword ptr -28h
.text:00402FD8 var_11          = byte ptr -11h
.text:00402FD8 var_10          = byte ptr -10h
.text:00402FD8 var_C           = byte ptr -0Ch
.text:00402FD8 arg_0           = dword ptr  4
.text:00402FD8 arg_10          = dword ptr  14h
.text:00402FD8 lpuexcpt        = dword ptr  18h
.text:00402FD8 arg_1C          = dword ptr  20h
.text:00402FD8 arg_20          = dword ptr  24h
.text:00402FD8
.text:00402FD8                 push    ebp
.text:00402FD9                 sub     esp, 68h
.text:00402FDC                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00402FE4                 mov     [esp+6Ch+fctx.lsda], offset dword_4122B8
.text:00402FEC                 lea     eax, [esp+6Ch+var_C]
.text:00402FF0                 mov     [esp+6Ch+fctx.jbuf], eax
.text:00402FF4                 mov     [esp+6Ch+var_2C], offset loc_40307D
.text:00402FFC                 mov     [esp+6Ch+var_28], esp
.text:00403000                 lea     eax, [esp+6Ch+fctx]
.text:00403004                 mov     [esp+6Ch+lpfctx], eax ; lpfctx
.text:00403007                 call    __Unwind_SjLj_Register
.text:0040300C ; __unwind { // ___gxx_personality_sj0
.text:0040300C ;   try {
.text:0040300C                 mov     [esp+6Ch+lpfctx], 8 ; thrown_size
.text:00403013                 call    ___cxa_allocate_exception
.text:00403018                 mov     [esp+6Ch+var_58], eax
.text:0040301C                 lea     eax, [esp+6Ch+var_11]
.text:00403020                 mov     [esp+6Ch+lptinfo], eax ; std::string *
.text:00403024                 mov     eax, [esp+6Ch+arg_0]
.text:00403028                 mov     [esp+6Ch+lpfctx], eax
.text:0040302B                 mov     [esp+6Ch+fctx.call_site], 1
.text:00403033                 lea     ecx, [esp+6Ch+var_10]
.text:00403037                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0040303C                 sub     esp, 8
.text:0040303F                 lea     eax, [esp+6Ch+var_10]
.text:00403043                 mov     [esp+6Ch+lpfctx], eax ; this
.text:00403046                 mov     ecx, [esp+6Ch+var_58]
.text:0040304A                 call    __ZNSt8ios_base7failureC1ERKSs ; std::ios_base::failure::failure(std::string const&)
.text:0040304F                 push    eax             ; this
.text:00403050                 lea     ecx, [esp+6Ch+var_10]
.text:00403054                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00403059                 mov     [esp+6Ch+var_64], offset __ZNSt8ios_base7failureD1Ev ; void (__cdecl *)(void *)
.text:00403061                 mov     [esp+6Ch+lptinfo], offset __ZTINSt8ios_base7failureE ; lptinfo
.text:00403069                 mov     eax, [esp+6Ch+var_58]
.text:0040306D                 mov     [esp+6Ch+lpfctx], eax ; void *
.text:00403070                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:00403078                 call    ___cxa_throw
.text:0040307D ; ---------------------------------------------------------------------------
.text:0040307D
.text:0040307D loc_40307D:                             ; DATA XREF: std::__throw_ios_failure(char const*)+1C↑o
.text:0040307D ;   cleanup() // owned by 40300C
.text:0040307D                 mov     eax, [esp+arg_20]
.text:00403081                 mov     [esp+lpuexcpt], eax
.text:00403085                 mov     eax, [esp+arg_10]
.text:00403089                 mov     [esp+0], eax    ; void *
.text:0040308C                 call    ___cxa_free_exception
.text:00403091                 mov     eax, [esp+lpuexcpt]
.text:00403095                 mov     [esp+0], eax    ; lpuexcpt
.text:00403098                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:004030A0                 call    __Unwind_SjLj_Resume
.text:004030A0 ;   } // starts at 40300C
.text:004030A0 ; } // starts at 40300C
.text:004030A0 __ZSt19__throw_ios_failurePKc endp
.text:004030A0
.text:004030A0 ; ---------------------------------------------------------------------------
.text:004030A5                 align 4
.text:004030A8
.text:004030A8 ; =============== S U B R O U T I N E =======================================
.text:004030A8
.text:004030A8 ; Attributes: noreturn
.text:004030A8
.text:004030A8 ; void __cdecl __noreturn std::__throw_system_error(int)
.text:004030A8                 public __ZSt20__throw_system_errori
.text:004030A8 __ZSt20__throw_system_errori proc near
.text:004030A8
.text:004030A8 lpfctx          = dword ptr -6Ch
.text:004030A8 lptinfo         = dword ptr -68h
.text:004030A8 var_64          = dword ptr -64h
.text:004030A8 var_5C          = dword ptr -5Ch
.text:004030A8 lpuexcpt        = dword ptr -58h
.text:004030A8 var_54          = dword ptr -54h
.text:004030A8 fctx            = SjLj_Function_Context ptr -50h
.text:004030A8 var_2C          = dword ptr -2Ch
.text:004030A8 var_28          = dword ptr -28h
.text:004030A8 var_11          = dword ptr -11h
.text:004030A8 var_C           = byte ptr -0Ch
.text:004030A8 arg_0           = dword ptr  4
.text:004030A8
.text:004030A8                 push    ebp
.text:004030A9                 sub     esp, 68h
.text:004030AC                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:004030B4                 mov     [esp+6Ch+fctx.lsda], offset word_4122BE
.text:004030BC                 lea     eax, [esp+6Ch+var_C]
.text:004030C0                 mov     [esp+6Ch+fctx.jbuf], eax
.text:004030C4                 mov     [esp+6Ch+var_2C], offset loc_4031B9
.text:004030CC                 mov     [esp+6Ch+var_28], esp
.text:004030D0                 lea     eax, [esp+6Ch+fctx]
.text:004030D4                 mov     [esp+6Ch+lpfctx], eax ; lpfctx
.text:004030D7                 call    __Unwind_SjLj_Register
.text:004030DC ; __unwind { // ___gxx_personality_sj0
.text:004030DC ;   try {
.text:004030DC                 mov     [esp+6Ch+lpfctx], 10h ; thrown_size
.text:004030E3                 call    ___cxa_allocate_exception
.text:004030E8                 mov     [esp+6Ch+var_5C], eax
.text:004030EC                 call    __ZSt16generic_categoryv ; std::generic_category(void)
.text:004030F1                 mov     [esp+6Ch+lpuexcpt], eax
.text:004030F5                 mov     edx, eax
.text:004030F7                 mov     eax, [eax]
.text:004030F9                 mov     ecx, [esp+6Ch+arg_0]
.text:004030FD                 mov     [esp+6Ch+lptinfo], ecx ; std::string *
.text:00403101                 mov     [esp+6Ch+lpfctx], edx
.text:00403104                 mov     eax, [eax+0Ch]
.text:00403107                 mov     [esp+6Ch+fctx.call_site], 1
.text:0040310F                 lea     ecx, [esp+6Ch+var_11+1]
.text:00403113                 call    eax
.text:00403115                 sub     esp, 8
.text:00403118                 lea     eax, [esp+6Ch+var_11+1]
.text:0040311C                 mov     [esp+6Ch+lpfctx], eax ; this
.text:0040311F                 mov     [esp+6Ch+fctx.call_site], 2
.text:00403127                 mov     ecx, [esp+6Ch+var_5C]
.text:0040312B                 call    __ZNSt13runtime_errorC1ERKSs ; std::runtime_error::runtime_error(std::string const&)
.text:00403130                 push    ecx
.text:00403131                 mov     edx, [esp+6Ch+var_11+1]
.text:00403135                 mov     [esp+6Ch+var_54], edx
.text:00403139                 mov     ebp, ds:__CRT_MT
.text:0040313F                 test    ebp, ebp
.text:00403141                 jnz     short loc_40318C
.text:00403143                 mov     ecx, [esp+6Ch+var_54]
.text:00403147                 mov     eax, [ecx-4]
.text:0040314A                 lea     edx, [eax-1]
.text:0040314D                 mov     [ecx-4], edx
.text:00403150
.text:00403150 loc_403150:                             ; CODE XREF: std::__throw_system_error(int)+F9↓j
.text:00403150                 test    eax, eax
.text:00403152                 jle     short loc_4031A3
.text:00403154
.text:00403154 loc_403154:                             ; CODE XREF: std::__throw_system_error(int)+10F↓j
.text:00403154                 mov     eax, [esp+6Ch+var_5C]
.text:00403158                 mov     dword ptr [eax], offset off_416448
.text:0040315E                 mov     edx, [esp+6Ch+arg_0]
.text:00403162                 mov     [eax+8], edx
.text:00403165                 mov     ecx, [esp+6Ch+lpuexcpt]
.text:00403169                 mov     [eax+0Ch], ecx
.text:0040316C                 mov     [esp+6Ch+var_64], offset __ZNSt12system_errorD1Ev ; void (__cdecl *)(void *)
.text:00403174                 mov     [esp+6Ch+lptinfo], offset __ZTISt12system_error ; lptinfo
.text:0040317C                 mov     [esp+6Ch+lpfctx], eax ; void *
.text:0040317F                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:00403187                 call    ___cxa_throw
.text:0040318C ; ---------------------------------------------------------------------------
.text:0040318C
.text:0040318C loc_40318C:                             ; CODE XREF: std::__throw_system_error(int)+99↑j
.text:0040318C                 mov     [esp+6Ch+lptinfo], 0FFFFFFFFh ; int
.text:00403194                 mov     eax, edx
.text:00403196                 sub     eax, 4
.text:00403199                 mov     [esp+6Ch+lpfctx], eax ; volatile int *
.text:0040319C                 call    __ZN9__gnu_cxx18__exchange_and_addEPVii ; __gnu_cxx::__exchange_and_add(int volatile*,int)
.text:004031A1                 jmp     short loc_403150
.text:004031A3 ; ---------------------------------------------------------------------------
.text:004031A3
.text:004031A3 loc_4031A3:                             ; CODE XREF: std::__throw_system_error(int)+AA↑j
.text:004031A3                 mov     ecx, [esp+6Ch+var_54]
.text:004031A7                 sub     ecx, 0Ch        ; void *
.text:004031AA                 lea     eax, [esp+6Ch+var_11]
.text:004031AE                 mov     [esp+6Ch+lpfctx], eax ; int
.text:004031B1                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:004031B6                 push    edx             ; this
.text:004031B7                 jmp     short loc_403154
.text:004031B9 ; ---------------------------------------------------------------------------
.text:004031B9
.text:004031B9 loc_4031B9:                             ; DATA XREF: std::__throw_system_error(int)+1C↑o
.text:004031B9 ;   cleanup() // owned by 4030DC
.text:004031B9                 mov     eax, [esp+6Ch+fctx.data]
.text:004031BD                 mov     [esp+6Ch+lpuexcpt], eax
.text:004031C1                 mov     eax, [esp+6Ch+fctx.call_site]
.text:004031C5                 test    eax, eax
.text:004031C7                 jz      short loc_4031D7
.text:004031C9                 dec     eax
.text:004031CA                 jz      short loc_4031CE
.text:004031CC                 ud2
.text:004031CE ; ---------------------------------------------------------------------------
.text:004031CE
.text:004031CE loc_4031CE:                             ; CODE XREF: std::__throw_system_error(int)+122↑j
.text:004031CE                 lea     ecx, [esp+6Ch+var_11+1]
.text:004031D2                 call    __ZNSsD1Ev      ; std::string::~string()
.text:004031D7
.text:004031D7 loc_4031D7:                             ; CODE XREF: std::__throw_system_error(int)+11F↑j
.text:004031D7                 mov     eax, [esp+6Ch+var_5C]
.text:004031DB                 mov     [esp+6Ch+lpfctx], eax ; void *
.text:004031DE                 call    ___cxa_free_exception
.text:004031E3                 mov     edx, [esp+6Ch+lpuexcpt]
.text:004031E7                 mov     [esp+6Ch+lpfctx], edx ; lpuexcpt
.text:004031EA                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:004031F2                 call    __Unwind_SjLj_Resume
.text:004031F2 ;   } // starts at 4030DC
.text:004031F2 ; } // starts at 4030DC
.text:004031F2 __ZSt20__throw_system_errori endp
.text:004031F2
.text:004031F2 ; ---------------------------------------------------------------------------
.text:004031F7                 align 4
.text:004031F8
.text:004031F8 ; =============== S U B R O U T I N E =======================================
.text:004031F8
.text:004031F8 ; Attributes: noreturn
.text:004031F8
.text:004031F8 ; void __cdecl __noreturn std::__throw_future_error(int)
.text:004031F8                 public __ZSt20__throw_future_errori
.text:004031F8 __ZSt20__throw_future_errori proc near
.text:004031F8
.text:004031F8 lpfctx          = dword ptr -6Ch
.text:004031F8 lptinfo         = dword ptr -68h
.text:004031F8 var_64          = dword ptr -64h
.text:004031F8 var_5C          = dword ptr -5Ch
.text:004031F8 var_58          = dword ptr -58h
.text:004031F8 var_54          = dword ptr -54h
.text:004031F8 fctx            = SjLj_Function_Context ptr -50h
.text:004031F8 var_2C          = dword ptr -2Ch
.text:004031F8 var_28          = dword ptr -28h
.text:004031F8 var_12          = byte ptr -12h
.text:004031F8 var_11          = dword ptr -11h
.text:004031F8 var_C           = byte ptr -0Ch
.text:004031F8 arg_0           = dword ptr  4
.text:004031F8 arg_C           = dword ptr  10h
.text:004031F8 lpuexcpt        = dword ptr  14h
.text:004031F8 arg_1C          = dword ptr  20h
.text:004031F8 arg_20          = dword ptr  24h
.text:004031F8 arg_58          = byte ptr  5Ch
.text:004031F8
.text:004031F8                 push    ebp
.text:004031F9                 sub     esp, 68h
.text:004031FC                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00403204                 mov     [esp+6Ch+fctx.lsda], offset word_4122C6
.text:0040320C                 lea     eax, [esp+6Ch+var_C]
.text:00403210                 mov     [esp+6Ch+fctx.jbuf], eax
.text:00403214                 mov     [esp+6Ch+var_2C], offset loc_403310
.text:0040321C                 mov     [esp+6Ch+var_28], esp
.text:00403220                 lea     eax, [esp+6Ch+fctx]
.text:00403224                 mov     [esp+6Ch+lpfctx], eax ; lpfctx
.text:00403227                 call    __Unwind_SjLj_Register
.text:0040322C ; __unwind { // ___gxx_personality_sj0
.text:0040322C ;   try {
.text:0040322C                 mov     [esp+6Ch+lpfctx], 10h ; thrown_size
.text:00403233                 call    ___cxa_allocate_exception
.text:00403238                 mov     [esp+6Ch+var_5C], eax
.text:0040323C                 call    __ZSt15future_categoryv ; std::future_category(void)
.text:00403241                 mov     [esp+6Ch+var_54], eax
.text:00403245                 lea     eax, [esp+6Ch+var_12]
.text:00403249                 mov     [esp+6Ch+lptinfo], eax ; std::string *
.text:0040324D                 mov     [esp+6Ch+lpfctx], offset aStdFutureError ; "std::future_error"
.text:00403254                 mov     [esp+6Ch+fctx.call_site], 1
.text:0040325C                 lea     ecx, [esp+6Ch+var_11+1]
.text:00403260                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:00403265                 sub     esp, 8
.text:00403268                 lea     edx, [esp+6Ch+var_11+1]
.text:0040326C                 mov     [esp+6Ch+lpfctx], edx ; this
.text:0040326F                 mov     [esp+6Ch+fctx.call_site], 2
.text:00403277                 mov     ecx, [esp+6Ch+var_5C]
.text:0040327B                 call    __ZNSt11logic_errorC1ERKSs ; std::logic_error::logic_error(std::string const&)
.text:00403280                 push    eax
.text:00403281                 mov     ecx, [esp+6Ch+var_11+1]
.text:00403285                 mov     [esp+6Ch+var_58], ecx
.text:00403289                 mov     eax, ds:__CRT_MT
.text:0040328E                 test    eax, eax
.text:00403290                 jnz     short loc_4032E3
.text:00403292                 mov     edx, [esp+6Ch+var_58]
.text:00403296                 mov     eax, [edx-4]
.text:00403299                 lea     edx, [eax-1]
.text:0040329C                 mov     ecx, [esp+6Ch+var_58]
.text:004032A0                 mov     [ecx-4], edx
.text:004032A3
.text:004032A3 loc_4032A3:                             ; CODE XREF: std::__throw_future_error(int)+100↓j
.text:004032A3                 test    eax, eax
.text:004032A5                 jle     short loc_4032FA
.text:004032A7
.text:004032A7 loc_4032A7:                             ; CODE XREF: std::__throw_future_error(int)+116↓j
.text:004032A7                 mov     eax, [esp+6Ch+var_5C]
.text:004032AB                 mov     dword ptr [eax], offset off_416400
.text:004032B1                 mov     eax, [esp+6Ch+arg_0]
.text:004032B5                 mov     edx, [esp+6Ch+var_5C]
.text:004032B9                 mov     [edx+8], eax
.text:004032BC                 mov     eax, [esp+6Ch+var_54]
.text:004032C0                 mov     [edx+0Ch], eax
.text:004032C3                 mov     [esp+6Ch+var_64], offset __ZNSt12future_errorD1Ev ; void (__cdecl *)(void *)
.text:004032CB                 mov     [esp+6Ch+lptinfo], offset __ZTISt12future_error ; lptinfo
.text:004032D3                 mov     [esp+6Ch+lpfctx], edx ; void *
.text:004032D6                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:004032DE                 call    ___cxa_throw
.text:004032E3 ; ---------------------------------------------------------------------------
.text:004032E3
.text:004032E3 loc_4032E3:                             ; CODE XREF: std::__throw_future_error(int)+98↑j
.text:004032E3                 mov     [esp+6Ch+lptinfo], 0FFFFFFFFh ; int
.text:004032EB                 mov     eax, ecx
.text:004032ED                 sub     eax, 4
.text:004032F0                 mov     [esp+6Ch+lpfctx], eax ; volatile int *
.text:004032F3                 call    __ZN9__gnu_cxx18__exchange_and_addEPVii ; __gnu_cxx::__exchange_and_add(int volatile*,int)
.text:004032F8                 jmp     short loc_4032A3
.text:004032FA ; ---------------------------------------------------------------------------
.text:004032FA
.text:004032FA loc_4032FA:                             ; CODE XREF: std::__throw_future_error(int)+AD↑j
.text:004032FA                 mov     ecx, [esp+6Ch+var_58]
.text:004032FE                 sub     ecx, 0Ch        ; void *
.text:00403301                 lea     eax, [esp+6Ch+var_11]
.text:00403305                 mov     [esp+6Ch+lpfctx], eax ; int
.text:00403308                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0040330D                 push    eax
.text:0040330E                 jmp     short loc_4032A7
.text:00403310 ; ---------------------------------------------------------------------------
.text:00403310
.text:00403310 loc_403310:                             ; DATA XREF: std::__throw_future_error(int)+1C↑o
.text:00403310 ;   cleanup() // owned by 40322C
.text:00403310                 mov     edx, [esp+arg_20]
.text:00403314                 mov     [esp+lpuexcpt], edx
.text:00403318                 mov     eax, [esp+arg_1C]
.text:0040331C                 test    eax, eax
.text:0040331E                 jz      short loc_40332E
.text:00403320                 dec     eax
.text:00403321                 jz      short loc_403325
.text:00403323                 ud2
.text:00403325 ; ---------------------------------------------------------------------------
.text:00403325
.text:00403325 loc_403325:                             ; CODE XREF: std::__throw_future_error(int)+129↑j
.text:00403325                 lea     ecx, [esp+arg_58]
.text:00403329                 call    __ZNSsD1Ev      ; std::string::~string()
.text:0040332E
.text:0040332E loc_40332E:                             ; CODE XREF: std::__throw_future_error(int)+126↑j
.text:0040332E                 mov     eax, [esp+arg_C]
.text:00403332                 mov     [esp+0], eax    ; void *
.text:00403335                 call    ___cxa_free_exception
.text:0040333A                 mov     edx, [esp+lpuexcpt]
.text:0040333E                 mov     [esp+0], edx    ; lpuexcpt
.text:00403341                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00403349                 call    __Unwind_SjLj_Resume
.text:00403349 ;   } // starts at 40322C
.text:00403349 ; } // starts at 40322C
.text:00403349 __ZSt20__throw_future_errori endp
.text:00403349
.text:00403349 ; ---------------------------------------------------------------------------
.text:0040334E                 align 10h
.text:00403350
.text:00403350 ; =============== S U B R O U T I N E =======================================
.text:00403350
.text:00403350 ; Attributes: noreturn
.text:00403350
.text:00403350 ; void __noreturn std::__throw_bad_function_call(void)
.text:00403350                 public __ZSt25__throw_bad_function_callv
.text:00403350 __ZSt25__throw_bad_function_callv proc near
.text:00403350
.text:00403350 thrown_size     = dword ptr -1Ch
.text:00403350 lptinfo         = dword ptr -18h
.text:00403350 var_14          = dword ptr -14h
.text:00403350
.text:00403350                 sub     esp, 1Ch
.text:00403353                 mov     [esp+1Ch+thrown_size], 4 ; thrown_size
.text:0040335A                 call    ___cxa_allocate_exception
.text:0040335F                 mov     dword ptr [eax], offset off_416530
.text:00403365                 mov     [esp+1Ch+var_14], offset __ZNSt17bad_function_callD1Ev ; void (__cdecl *)(void *)
.text:0040336D                 mov     [esp+1Ch+lptinfo], offset __ZTISt17bad_function_call ; lptinfo
.text:00403375                 mov     [esp+1Ch+thrown_size], eax ; void *
.text:00403378                 call    ___cxa_throw
.text:00403378 __ZSt25__throw_bad_function_callv endp
.text:00403378
.text:00403378 ; ---------------------------------------------------------------------------
.text:0040337D                 align 10h
.text:00403380
.text:00403380 ; =============== S U B R O U T I N E =======================================
.text:00403380
.text:00403380 ; Attributes: noreturn
.text:00403380
.text:00403380 ; void __cdecl __noreturn std::__throw_regex_error(int, int, int, int, void *, struct _Unwind_Exception *lpuexcpt, int, int, int)
.text:00403380                 public __ZSt19__throw_regex_errorNSt15regex_constants10error_typeE
.text:00403380 __ZSt19__throw_regex_errorNSt15regex_constants10error_typeE proc near
.text:00403380
.text:00403380 lpfctx          = dword ptr -5Ch
.text:00403380 lptinfo         = dword ptr -58h
.text:00403380 var_54          = dword ptr -54h
.text:00403380 var_48          = dword ptr -48h
.text:00403380 fctx            = SjLj_Function_Context ptr -40h
.text:00403380 var_1C          = dword ptr -1Ch
.text:00403380 var_18          = dword ptr -18h
.text:00403380 var_C           = byte ptr -0Ch
.text:00403380 arg_0           = dword ptr  4
.text:00403380 arg_10          = dword ptr  14h
.text:00403380 lpuexcpt        = dword ptr  18h
.text:00403380 arg_1C          = dword ptr  20h
.text:00403380 arg_20          = dword ptr  24h
.text:00403380
.text:00403380                 push    ebp
.text:00403381                 sub     esp, 58h
.text:00403384                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:0040338C                 mov     [esp+5Ch+fctx.lsda], offset word_4122CE
.text:00403394                 lea     eax, [esp+5Ch+var_C]
.text:00403398                 mov     [esp+5Ch+fctx.jbuf], eax
.text:0040339C                 mov     [esp+5Ch+var_1C], offset loc_403401
.text:004033A4                 mov     [esp+5Ch+var_18], esp
.text:004033A8                 lea     eax, [esp+5Ch+fctx]
.text:004033AC                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:004033AF                 call    __Unwind_SjLj_Register
.text:004033B4 ; __unwind { // ___gxx_personality_sj0
.text:004033B4 ;   try {
.text:004033B4                 mov     [esp+5Ch+lpfctx], 0Ch ; thrown_size
.text:004033BB                 call    ___cxa_allocate_exception
.text:004033C0                 mov     [esp+5Ch+var_48], eax
.text:004033C4                 mov     eax, [esp+5Ch+arg_0]
.text:004033C8                 mov     [esp+5Ch+lpfctx], eax
.text:004033CB                 mov     [esp+5Ch+fctx.call_site], 1
.text:004033D3                 mov     ecx, [esp+5Ch+var_48]
.text:004033D7                 call    __ZNSt11regex_errorC1ENSt15regex_constants10error_typeE ; std::regex_error::regex_error(std::regex_constants::error_type)
.text:004033DC                 push    eax
.text:004033DD                 mov     [esp+5Ch+var_54], offset __ZNSt11regex_errorD1Ev ; void (__cdecl *)(void *)
.text:004033E5                 mov     [esp+5Ch+lptinfo], offset __ZTISt11regex_error ; lptinfo
.text:004033ED                 mov     eax, [esp+5Ch+var_48]
.text:004033F1                 mov     [esp+5Ch+lpfctx], eax ; void *
.text:004033F4                 mov     [esp+5Ch+fctx.call_site], 0FFFFFFFFh
.text:004033FC                 call    ___cxa_throw
.text:00403401 ; ---------------------------------------------------------------------------
.text:00403401
.text:00403401 loc_403401:                             ; DATA XREF: std::__throw_regex_error(std::regex_constants::error_type)+1C↑o
.text:00403401 ;   cleanup() // owned by 4033B4
.text:00403401                 mov     eax, [esp+arg_20]
.text:00403405                 mov     [esp+lpuexcpt], eax
.text:00403409                 mov     eax, [esp+arg_10]
.text:0040340D                 mov     [esp+0], eax    ; void *
.text:00403410                 call    ___cxa_free_exception
.text:00403415                 mov     eax, [esp+lpuexcpt]
.text:00403419                 mov     [esp+0], eax    ; lpuexcpt
.text:0040341C                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00403424                 call    __Unwind_SjLj_Resume
.text:00403424 ;   } // starts at 4033B4
.text:00403424 ; } // starts at 4033B4
.text:00403424 __ZSt19__throw_regex_errorNSt15regex_constants10error_typeE endp
.text:00403424
.text:00403424 ; ---------------------------------------------------------------------------
.text:00403429                 align 4
.text:0040342C
.text:0040342C ; =============== S U B R O U T I N E =======================================
.text:0040342C
.text:0040342C
.text:0040342C ; _DWORD __cdecl operator new(size_t)
.text:0040342C                 public __Znwj
.text:0040342C __Znwj          proc near               ; CODE XREF: __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::allocate(uint,void const*)+32↓p
.text:0040342C                                         ; std::string::_Rep::_S_create(uint,uint,std::allocator<char> const&)+4F↓p
.text:0040342C
.text:0040342C lpfctx          = dword ptr -5Ch
.text:0040342C lptinfo         = dword ptr -58h
.text:0040342C var_54          = dword ptr -54h
.text:0040342C var_44          = dword ptr -44h
.text:0040342C fctx            = SjLj_Function_Context ptr -40h
.text:0040342C var_1C          = dword ptr -1Ch
.text:0040342C var_18          = dword ptr -18h
.text:0040342C var_C           = byte ptr -0Ch
.text:0040342C arg_0           = dword ptr  4
.text:0040342C
.text:0040342C                 push    ebp
.text:0040342D                 sub     esp, 58h
.text:00403430                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00403438                 mov     [esp+5Ch+fctx.lsda], offset dword_4122D4
.text:00403440                 lea     eax, [esp+5Ch+var_C]
.text:00403444                 mov     [esp+5Ch+fctx.jbuf], eax
.text:00403448                 mov     [esp+5Ch+var_1C], offset loc_4034E2
.text:00403450                 mov     [esp+5Ch+var_18], esp
.text:00403454                 lea     eax, [esp+5Ch+fctx]
.text:00403458                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:0040345B                 call    __Unwind_SjLj_Register
.text:00403460 ; __unwind { // ___gxx_personality_sj0
.text:00403460 ;   try {
.text:00403460                 mov     eax, [esp+5Ch+arg_0]
.text:00403464                 test    eax, eax
.text:00403466                 jnz     short loc_403487
.text:00403468                 mov     [esp+5Ch+arg_0], 1
.text:00403470                 jmp     short loc_403487
.text:00403470 ; ---------------------------------------------------------------------------
.text:00403472                 align 4
.text:00403474
.text:00403474 loc_403474:                             ; CODE XREF: operator new(uint)+6D↓j
.text:00403474                 mov     eax, ds:___new_handler
.text:00403479                 test    eax, eax
.text:0040347B                 jz      short loc_4034B0
.text:0040347D                 mov     [esp+5Ch+fctx.call_site], 1
.text:00403485                 call    eax ; ___new_handler
.text:00403487
.text:00403487 loc_403487:                             ; CODE XREF: operator new(uint)+3A↑j
.text:00403487                                         ; operator new(uint)+44↑j
.text:00403487                 mov     eax, [esp+5Ch+arg_0]
.text:0040348B                 mov     [esp+5Ch+lpfctx], eax ; size_t
.text:0040348E                 call    _malloc
.text:00403493                 mov     [esp+5Ch+var_44], eax
.text:00403497                 test    eax, eax
.text:00403499                 jz      short loc_403474
.text:0040349B                 lea     eax, [esp+5Ch+fctx]
.text:0040349F                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:004034A2                 call    __Unwind_SjLj_Unregister
.text:004034A7                 mov     eax, [esp+5Ch+var_44]
.text:004034AB                 add     esp, 58h
.text:004034AE                 pop     ebp
.text:004034AF                 retn
.text:004034B0 ; ---------------------------------------------------------------------------
.text:004034B0
.text:004034B0 loc_4034B0:                             ; CODE XREF: operator new(uint)+4F↑j
.text:004034B0                 mov     [esp+5Ch+lpfctx], 4 ; thrown_size
.text:004034B7                 call    ___cxa_allocate_exception
.text:004034BC                 mov     dword ptr [eax], offset off_416560
.text:004034C2                 mov     [esp+5Ch+var_54], offset __ZNSt9bad_allocD1Ev ; void (__cdecl *)(void *)
.text:004034CA                 mov     [esp+5Ch+lptinfo], offset __ZTISt9bad_alloc ; lptinfo
.text:004034D2                 mov     [esp+5Ch+lpfctx], eax ; void *
.text:004034D5                 mov     [esp+5Ch+fctx.call_site], 1
.text:004034DD                 call    ___cxa_throw
.text:004034E2 ; ---------------------------------------------------------------------------
.text:004034E2
.text:004034E2 loc_4034E2:                             ; DATA XREF: operator new(uint)+1C↑o
.text:004034E2 ;   catch(std::bad_alloc) // owned by 403460
.text:004034E2                 mov     eax, [esp+5Ch+fctx.data]
.text:004034E6                 cmp     [esp+5Ch+fctx.data+4], 0FFFFFFFFh
.text:004034EB                 mov     [esp+5Ch+lpfctx], eax ; void *
.text:004034EE                 mov     [esp+5Ch+fctx.call_site], 0FFFFFFFFh
.text:004034F6                 jz      short loc_4034FD
.text:004034F8                 call    __Unwind_SjLj_Resume
.text:004034FD ; ---------------------------------------------------------------------------
.text:004034FD
.text:004034FD loc_4034FD:                             ; CODE XREF: operator new(uint)+CA↑j
.text:004034FD                 call    ___cxa_call_unexpected
.text:004034FD ;   } // starts at 403460
.text:004034FD ; } // starts at 403460
.text:004034FD __Znwj          endp
.text:004034FD
.text:004034FD ; ---------------------------------------------------------------------------
.text:00403502                 align 4
.text:00403504
.text:00403504 ; =============== S U B R O U T I N E =======================================
.text:00403504
.text:00403504
.text:00403504 ; void __cdecl std::exception::~exception(std::exception *__hidden this)
.text:00403504                 public __ZNSt9exceptionD1Ev
.text:00403504 __ZNSt9exceptionD1Ev proc near          ; CODE XREF: std::bad_alloc::~bad_alloc()+6↓j
.text:00403504                                         ; std::bad_cast::~bad_cast()+6↓j ...
.text:00403504
.text:00403504 this            = dword ptr  4
.text:00403504
.text:00403504                 mov     dword ptr [ecx], offset off_416578
.text:0040350A                 retn
.text:0040350A __ZNSt9exceptionD1Ev endp
.text:0040350A
.text:0040350A ; ---------------------------------------------------------------------------
.text:0040350B                 align 4
.text:0040350C
.text:0040350C ; =============== S U B R O U T I N E =======================================
.text:0040350C
.text:0040350C
.text:0040350C ; void __cdecl std::bad_exception::~bad_exception(void *)
.text:0040350C                 public __ZNSt13bad_exceptionD1Ev
.text:0040350C __ZNSt13bad_exceptionD1Ev proc near     ; DATA XREF: ___cxa_call_unexpected+165↑o
.text:0040350C                                         ; std::__throw_bad_exception(void)+15↑o ...
.text:0040350C                 mov     dword ptr [ecx], offset off_416578
.text:00403512                 retn
.text:00403512 __ZNSt13bad_exceptionD1Ev endp
.text:00403512
.text:00403512 ; ---------------------------------------------------------------------------
.text:00403513                 align 4
.text:00403514
.text:00403514 ; =============== S U B R O U T I N E =======================================
.text:00403514
.text:00403514
.text:00403514 ; void __cdecl __cxxabiv1::__forced_unwind::~__forced_unwind(__cxxabiv1::__forced_unwind *__hidden this)
.text:00403514                 public __ZN10__cxxabiv115__forced_unwindD1Ev
.text:00403514 __ZN10__cxxabiv115__forced_unwindD1Ev proc near
.text:00403514                                         ; DATA XREF: .rdata:off_416258↓o
.text:00403514
.text:00403514 this            = dword ptr  4
.text:00403514
.text:00403514                 mov     dword ptr [ecx], offset off_416258
.text:0040351A                 retn
.text:0040351A __ZN10__cxxabiv115__forced_unwindD1Ev endp
.text:0040351A
.text:0040351A ; ---------------------------------------------------------------------------
.text:0040351B                 align 4
.text:0040351C
.text:0040351C ; =============== S U B R O U T I N E =======================================
.text:0040351C
.text:0040351C
.text:0040351C ; void __cdecl __cxxabiv1::__foreign_exception::~__foreign_exception(__cxxabiv1::__foreign_exception *__hidden this)
.text:0040351C                 public __ZN10__cxxabiv119__foreign_exceptionD1Ev
.text:0040351C __ZN10__cxxabiv119__foreign_exceptionD1Ev proc near
.text:0040351C                                         ; DATA XREF: .rdata:off_4162C8↓o
.text:0040351C
.text:0040351C this            = dword ptr  4
.text:0040351C
.text:0040351C                 mov     dword ptr [ecx], offset off_4162C8
.text:00403522                 retn
.text:00403522 __ZN10__cxxabiv119__foreign_exceptionD1Ev endp
.text:00403522
.text:00403522 ; ---------------------------------------------------------------------------
.text:00403523                 align 4
.text:00403524
.text:00403524 ; =============== S U B R O U T I N E =======================================
.text:00403524
.text:00403524
.text:00403524 ; _DWORD std::exception::what(std::exception *__hidden this)
.text:00403524                 public __ZNKSt9exception4whatEv
.text:00403524 __ZNKSt9exception4whatEv proc near      ; DATA XREF: .rdata:00416330↓o
.text:00403524                                         ; .rdata:00416538↓o ...
.text:00403524
.text:00403524 this            = dword ptr  4
.text:00403524
.text:00403524                 mov     eax, offset aStdException ; "std::exception"
.text:00403529                 retn
.text:00403529 __ZNKSt9exception4whatEv endp
.text:00403529
.text:00403529 ; ---------------------------------------------------------------------------
.text:0040352A                 align 4
.text:0040352C
.text:0040352C ; =============== S U B R O U T I N E =======================================
.text:0040352C
.text:0040352C
.text:0040352C ; _DWORD std::bad_exception::what(std::bad_exception *__hidden this)
.text:0040352C                 public __ZNKSt13bad_exception4whatEv
.text:0040352C __ZNKSt13bad_exception4whatEv proc near ; DATA XREF: .rdata:00416468↓o
.text:0040352C
.text:0040352C this            = dword ptr  4
.text:0040352C
.text:0040352C                 mov     eax, offset aStdBadExceptio ; "std::bad_exception"
.text:00403531                 retn
.text:00403531 __ZNKSt13bad_exception4whatEv endp
.text:00403531
.text:00403531 ; ---------------------------------------------------------------------------
.text:00403532                 align 4
.text:00403534
.text:00403534 ; =============== S U B R O U T I N E =======================================
.text:00403534
.text:00403534
.text:00403534 ; void __cdecl __cxxabiv1::__foreign_exception::~__foreign_exception(__cxxabiv1::__foreign_exception *__hidden this)
.text:00403534                 public __ZN10__cxxabiv119__foreign_exceptionD0Ev
.text:00403534 __ZN10__cxxabiv119__foreign_exceptionD0Ev proc near
.text:00403534                                         ; DATA XREF: .rdata:004162CC↓o
.text:00403534
.text:00403534 var_1C          = dword ptr -1Ch
.text:00403534 this            = dword ptr  4
.text:00403534
.text:00403534                 sub     esp, 1Ch
.text:00403537                 mov     dword ptr [ecx], offset off_4162C8
.text:0040353D                 mov     [esp+1Ch+var_1C], ecx ; void *
.text:00403540                 call    __ZdlPv         ; operator delete(void *)
.text:00403545                 add     esp, 1Ch
.text:00403548                 retn
.text:00403548 __ZN10__cxxabiv119__foreign_exceptionD0Ev endp
.text:00403548
.text:00403548 ; ---------------------------------------------------------------------------
.text:00403549                 align 4
.text:0040354C
.text:0040354C ; =============== S U B R O U T I N E =======================================
.text:0040354C
.text:0040354C
.text:0040354C ; void __cdecl __cxxabiv1::__forced_unwind::~__forced_unwind(__cxxabiv1::__forced_unwind *__hidden this)
.text:0040354C                 public __ZN10__cxxabiv115__forced_unwindD0Ev
.text:0040354C __ZN10__cxxabiv115__forced_unwindD0Ev proc near
.text:0040354C                                         ; DATA XREF: .rdata:0041625C↓o
.text:0040354C
.text:0040354C var_1C          = dword ptr -1Ch
.text:0040354C this            = dword ptr  4
.text:0040354C
.text:0040354C                 sub     esp, 1Ch
.text:0040354F                 mov     dword ptr [ecx], offset off_416258
.text:00403555                 mov     [esp+1Ch+var_1C], ecx ; void *
.text:00403558                 call    __ZdlPv         ; operator delete(void *)
.text:0040355D                 add     esp, 1Ch
.text:00403560                 retn
.text:00403560 __ZN10__cxxabiv115__forced_unwindD0Ev endp
.text:00403560
.text:00403560 ; ---------------------------------------------------------------------------
.text:00403561                 align 4
.text:00403564
.text:00403564 ; =============== S U B R O U T I N E =======================================
.text:00403564
.text:00403564
.text:00403564 ; void __cdecl std::exception::~exception(std::exception *__hidden this)
.text:00403564                 public __ZNSt9exceptionD0Ev
.text:00403564 __ZNSt9exceptionD0Ev proc near          ; DATA XREF: .rdata:0041657C↓o
.text:00403564
.text:00403564 var_1C          = dword ptr -1Ch
.text:00403564 this            = dword ptr  4
.text:00403564
.text:00403564                 sub     esp, 1Ch
.text:00403567                 mov     dword ptr [ecx], offset off_416578
.text:0040356D                 mov     [esp+1Ch+var_1C], ecx ; void *
.text:00403570                 call    __ZdlPv         ; operator delete(void *)
.text:00403575                 add     esp, 1Ch
.text:00403578                 retn
.text:00403578 __ZNSt9exceptionD0Ev endp
.text:00403578
.text:00403578 ; ---------------------------------------------------------------------------
.text:00403579                 align 4
.text:0040357C
.text:0040357C ; =============== S U B R O U T I N E =======================================
.text:0040357C
.text:0040357C
.text:0040357C ; void __cdecl std::bad_exception::~bad_exception(std::bad_exception *__hidden this)
.text:0040357C                 public __ZNSt13bad_exceptionD0Ev
.text:0040357C __ZNSt13bad_exceptionD0Ev proc near     ; DATA XREF: .rdata:00416464↓o
.text:0040357C
.text:0040357C var_1C          = dword ptr -1Ch
.text:0040357C this            = dword ptr  4
.text:0040357C
.text:0040357C                 sub     esp, 1Ch
.text:0040357F                 mov     dword ptr [ecx], offset off_416578
.text:00403585                 mov     [esp+1Ch+var_1C], ecx ; void *
.text:00403588                 call    __ZdlPv         ; operator delete(void *)
.text:0040358D                 add     esp, 1Ch
.text:00403590                 retn
.text:00403590 __ZNSt13bad_exceptionD0Ev endp
.text:00403590
.text:00403590 ; ---------------------------------------------------------------------------
.text:00403591                 align 4
.text:00403594
.text:00403594 ; =============== S U B R O U T I N E =======================================
.text:00403594
.text:00403594
.text:00403594 ; __cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void **)const
.text:00403594                 public __ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
.text:00403594 __ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv proc near
.text:00403594                                         ; DATA XREF: .rdata:0041629C↓o
.text:00403594                                         ; .rdata:004162FC↓o
.text:00403594
.text:00403594 var_2C          = dword ptr -2Ch
.text:00403594 var_28          = dword ptr -28h
.text:00403594 var_24          = dword ptr -24h
.text:00403594 var_1C          = dword ptr -1Ch
.text:00403594 var_18          = dword ptr -18h
.text:00403594 var_14          = dword ptr -14h
.text:00403594 var_10          = dword ptr -10h
.text:00403594 arg_0           = dword ptr  4
.text:00403594 arg_4           = dword ptr  8
.text:00403594
.text:00403594                 push    ebx
.text:00403595                 sub     esp, 28h
.text:00403598                 mov     ebx, [esp+2Ch+arg_4]
.text:0040359C                 mov     [esp+2Ch+var_1C], 0
.text:004035A4                 mov     [esp+2Ch+var_18], 0
.text:004035AC                 mov     [esp+2Ch+var_14], 10h
.text:004035B4                 mov     [esp+2Ch+var_10], 0
.text:004035BC                 mov     eax, [ecx]
.text:004035BE                 lea     edx, [esp+2Ch+var_1C]
.text:004035C2                 mov     [esp+2Ch+var_24], edx
.text:004035C6                 mov     edx, [ebx]
.text:004035C8                 mov     [esp+2Ch+var_28], edx
.text:004035CC                 mov     edx, [esp+2Ch+arg_0]
.text:004035D0                 mov     [esp+2Ch+var_2C], edx
.text:004035D3                 call    dword ptr [eax+18h]
.text:004035D6                 sub     esp, 0Ch
.text:004035D9                 mov     eax, [esp+2Ch+var_18]
.text:004035DD                 and     eax, 6
.text:004035E0                 cmp     eax, 6
.text:004035E3                 jz      short loc_4035F0
.text:004035E5                 xor     eax, eax
.text:004035E7                 add     esp, 28h
.text:004035EA                 pop     ebx
.text:004035EB                 retn    8
.text:004035EB ; ---------------------------------------------------------------------------
.text:004035EE                 align 10h
.text:004035F0
.text:004035F0 loc_4035F0:                             ; CODE XREF: __cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*,void **)+4F↑j
.text:004035F0                 mov     eax, [esp+2Ch+var_1C]
.text:004035F4                 mov     [ebx], eax
.text:004035F6                 mov     al, 1
.text:004035F8                 add     esp, 28h
.text:004035FB                 pop     ebx
.text:004035FC                 retn    8
.text:004035FC __ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv endp
.text:004035FC
.text:004035FC ; ---------------------------------------------------------------------------
.text:004035FF                 align 10h
.text:00403600
.text:00403600 ; =============== S U B R O U T I N E =======================================
.text:00403600
.text:00403600
.text:00403600 ; __cxxabiv1::__class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*)const
.text:00403600                 public __ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
.text:00403600 __ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_ proc near
.text:00403600                                         ; DATA XREF: .rdata:004162A8↓o
.text:00403600
.text:00403600 arg_4           = dword ptr  8
.text:00403600 arg_C           = dword ptr  10h
.text:00403600
.text:00403600                 mov     eax, [esp+arg_4]
.text:00403604                 cmp     [esp+arg_C], eax
.text:00403608                 setz    al
.text:0040360B                 movzx   eax, al
.text:0040360E                 lea     eax, [eax+eax*4+1]
.text:00403612                 retn    10h
.text:00403612 __ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_ endp
.text:00403612
.text:00403612 ; ---------------------------------------------------------------------------
.text:00403615                 align 4
.text:00403618
.text:00403618 ; =============== S U B R O U T I N E =======================================
.text:00403618
.text:00403618
.text:00403618 ; __cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result &)const
.text:00403618                 public __ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
.text:00403618 __ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE proc near
.text:00403618                                         ; CODE XREF: __cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info::__upcast_result &)+20↓p
.text:00403618                                         ; DATA XREF: .rdata:004162A0↓o
.text:00403618
.text:00403618 var_1C          = dword ptr -1Ch
.text:00403618 arg_0           = dword ptr  4
.text:00403618 arg_4           = dword ptr  8
.text:00403618 arg_8           = dword ptr  0Ch
.text:00403618
.text:00403618                 push    ebx
.text:00403619                 sub     esp, 18h
.text:0040361C                 mov     ebx, [esp+1Ch+arg_8]
.text:00403620                 mov     eax, [esp+1Ch+arg_0]
.text:00403624                 mov     [esp+1Ch+var_1C], eax
.text:00403627                 call    __ZNKSt9type_infoeqERKS_ ; std::type_info::operator==(std::type_info const&)
.text:0040362C                 push    edx
.text:0040362D                 test    al, al
.text:0040362F                 jz      short loc_403650
.text:00403631                 mov     eax, [esp+1Ch+arg_4]
.text:00403635                 mov     [ebx], eax
.text:00403637                 mov     dword ptr [ebx+0Ch], 8
.text:0040363E                 mov     dword ptr [ebx+4], 6
.text:00403645                 mov     al, 1
.text:00403647                 add     esp, 18h
.text:0040364A                 pop     ebx
.text:0040364B                 retn    0Ch
.text:0040364B ; ---------------------------------------------------------------------------
.text:0040364E                 align 10h
.text:00403650
.text:00403650 loc_403650:                             ; CODE XREF: __cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info::__upcast_result &)+17↑j
.text:00403650                 xor     eax, eax
.text:00403652                 add     esp, 18h
.text:00403655                 pop     ebx
.text:00403656                 retn    0Ch
.text:00403656 __ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE endp
.text:00403656
.text:00403656 ; ---------------------------------------------------------------------------
.text:00403659                 align 4
.text:0040365C
.text:0040365C ; =============== S U B R O U T I N E =======================================
.text:0040365C
.text:0040365C
.text:0040365C ; void __cdecl __cxxabiv1::__class_type_info::~__class_type_info(__cxxabiv1::__class_type_info *__hidden this)
.text:0040365C                 public __ZN10__cxxabiv117__class_type_infoD1Ev
.text:0040365C __ZN10__cxxabiv117__class_type_infoD1Ev proc near
.text:0040365C                                         ; CODE XREF: __cxxabiv1::__class_type_info::~__class_type_info()+6↓p
.text:0040365C                                         ; __cxxabiv1::__si_class_type_info::~__si_class_type_info()+6↓j
.text:0040365C                                         ; DATA XREF: ...
.text:0040365C
.text:0040365C this            = dword ptr  4
.text:0040365C
.text:0040365C                 mov     dword ptr [ecx], offset off_416288
.text:00403662                 jmp     __ZNSt9type_infoD1Ev ; std::type_info::~type_info()
.text:00403662 __ZN10__cxxabiv117__class_type_infoD1Ev endp
.text:00403662
.text:00403662 ; ---------------------------------------------------------------------------
.text:00403667                 align 4
.text:00403668
.text:00403668 ; =============== S U B R O U T I N E =======================================
.text:00403668
.text:00403668
.text:00403668 ; void __cdecl __cxxabiv1::__class_type_info::~__class_type_info(__cxxabiv1::__class_type_info *__hidden this)
.text:00403668                 public __ZN10__cxxabiv117__class_type_infoD0Ev
.text:00403668 __ZN10__cxxabiv117__class_type_infoD0Ev proc near
.text:00403668                                         ; DATA XREF: .rdata:0041628C↓o
.text:00403668
.text:00403668 var_1C          = dword ptr -1Ch
.text:00403668 this            = dword ptr  4
.text:00403668
.text:00403668                 push    ebx
.text:00403669                 sub     esp, 18h
.text:0040366C                 mov     ebx, ecx
.text:0040366E                 call    __ZN10__cxxabiv117__class_type_infoD1Ev ; __cxxabiv1::__class_type_info::~__class_type_info()
.text:00403673                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:00403676                 call    __ZdlPv         ; operator delete(void *)
.text:0040367B                 add     esp, 18h
.text:0040367E                 pop     ebx
.text:0040367F                 retn
.text:0040367F __ZN10__cxxabiv117__class_type_infoD0Ev endp
.text:0040367F
.text:00403680
.text:00403680 ; =============== S U B R O U T I N E =======================================
.text:00403680
.text:00403680
.text:00403680 ; __cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result &)const
.text:00403680                 public __ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
.text:00403680 __ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE proc near
.text:00403680                                         ; DATA XREF: .rdata:004162A4↓o
.text:00403680
.text:00403680 var_1C          = dword ptr -1Ch
.text:00403680 arg_4           = dword ptr  8
.text:00403680 arg_8           = dword ptr  0Ch
.text:00403680 arg_C           = dword ptr  10h
.text:00403680 arg_10          = dword ptr  14h
.text:00403680 arg_14          = dword ptr  18h
.text:00403680 arg_18          = dword ptr  1Ch
.text:00403680
.text:00403680                 push    esi
.text:00403681                 push    ebx
.text:00403682                 sub     esp, 14h
.text:00403685                 mov     esi, ecx
.text:00403687                 mov     ebx, [esp+1Ch+arg_C]
.text:0040368B                 cmp     ebx, [esp+1Ch+arg_14]
.text:0040368F                 jz      short loc_4036C4
.text:00403691
.text:00403691 loc_403691:                             ; CODE XREF: __cxxabiv1::__class_type_info::__do_dyncast(int,__cxxabiv1::__class_type_info::__sub_kind,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info::__dyncast_result &)+53↓j
.text:00403691                 mov     eax, [esp+1Ch+arg_8]
.text:00403695                 mov     [esp+1Ch+var_1C], eax
.text:00403698                 mov     ecx, esi
.text:0040369A                 call    __ZNKSt9type_infoeqERKS_ ; std::type_info::operator==(std::type_info const&)
.text:0040369F                 push    ecx
.text:004036A0                 test    al, al
.text:004036A2                 jz      short loc_4036B8
.text:004036A4                 mov     eax, [esp+1Ch+arg_18]
.text:004036A8                 mov     [eax], ebx
.text:004036AA                 mov     edx, [esp+1Ch+arg_4]
.text:004036AE                 mov     [eax+4], edx
.text:004036B1                 mov     dword ptr [eax+0Ch], 1
.text:004036B8
.text:004036B8 loc_4036B8:                             ; CODE XREF: __cxxabiv1::__class_type_info::__do_dyncast(int,__cxxabiv1::__class_type_info::__sub_kind,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info::__dyncast_result &)+22↑j
.text:004036B8                                         ; __cxxabiv1::__class_type_info::__do_dyncast(int,__cxxabiv1::__class_type_info::__sub_kind,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info::__dyncast_result &)+60↓j
.text:004036B8                 xor     eax, eax
.text:004036BA                 add     esp, 14h
.text:004036BD                 pop     ebx
.text:004036BE                 pop     esi
.text:004036BF                 retn    1Ch
.text:004036BF ; ---------------------------------------------------------------------------
.text:004036C2                 align 4
.text:004036C4
.text:004036C4 loc_4036C4:                             ; CODE XREF: __cxxabiv1::__class_type_info::__do_dyncast(int,__cxxabiv1::__class_type_info::__sub_kind,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info::__dyncast_result &)+F↑j
.text:004036C4                 mov     eax, [esp+1Ch+arg_10]
.text:004036C8                 mov     [esp+1Ch+var_1C], eax
.text:004036CB                 call    __ZNKSt9type_infoeqERKS_ ; std::type_info::operator==(std::type_info const&)
.text:004036D0                 push    edx
.text:004036D1                 test    al, al
.text:004036D3                 jz      short loc_403691
.text:004036D5                 mov     edx, [esp+1Ch+arg_4]
.text:004036D9                 mov     eax, [esp+1Ch+arg_18]
.text:004036DD                 mov     [eax+8], edx
.text:004036E0                 jmp     short loc_4036B8
.text:004036E0 __ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE endp
.text:004036E0
.text:004036E0 ; ---------------------------------------------------------------------------
.text:004036E2                 align 4
.text:004036E4
.text:004036E4 ; =============== S U B R O U T I N E =======================================
.text:004036E4
.text:004036E4
.text:004036E4 ; _DWORD __stdcall __cxxabiv1::__class_type_info::__do_catch(__cxxabiv1::__class_type_info *__hidden this, const std::type_info *, void **, unsigned int)
.text:004036E4                 public __ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
.text:004036E4 __ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj proc near
.text:004036E4                                         ; DATA XREF: .rdata:00416298↓o
.text:004036E4                                         ; .rdata:004162F8↓o
.text:004036E4
.text:004036E4 var_1C          = dword ptr -1Ch
.text:004036E4 var_18          = dword ptr -18h
.text:004036E4 this            = dword ptr  4
.text:004036E4 arg_4           = dword ptr  8
.text:004036E4 arg_8           = dword ptr  0Ch
.text:004036E4
.text:004036E4                 push    esi
.text:004036E5                 push    ebx
.text:004036E6                 sub     esp, 14h
.text:004036E9                 mov     esi, ecx
.text:004036EB                 mov     ebx, [esp+1Ch+this]
.text:004036EF                 mov     [esp+1Ch+var_1C], ebx
.text:004036F2                 call    __ZNKSt9type_infoeqERKS_ ; std::type_info::operator==(std::type_info const&)
.text:004036F7                 push    ecx
.text:004036F8                 test    al, al
.text:004036FA                 jnz     short loc_403730
.text:004036FC                 cmp     [esp+1Ch+arg_8], 3
.text:00403701                 jbe     short loc_403710
.text:00403703                 xor     eax, eax
.text:00403705                 add     esp, 14h
.text:00403708                 pop     ebx
.text:00403709                 pop     esi
.text:0040370A                 retn    0Ch
.text:0040370A ; ---------------------------------------------------------------------------
.text:0040370D                 align 10h
.text:00403710
.text:00403710 loc_403710:                             ; CODE XREF: __cxxabiv1::__class_type_info::__do_catch(std::type_info const*,void **,uint)+1D↑j
.text:00403710                 mov     eax, [ebx]
.text:00403712                 mov     edx, [esp+1Ch+arg_4]
.text:00403716                 mov     [esp+1Ch+var_18], edx
.text:0040371A                 mov     [esp+1Ch+var_1C], esi
.text:0040371D                 mov     ecx, ebx
.text:0040371F                 call    dword ptr [eax+14h]
.text:00403722                 sub     esp, 8
.text:00403725                 add     esp, 14h
.text:00403728                 pop     ebx
.text:00403729                 pop     esi
.text:0040372A                 retn    0Ch
.text:0040372A ; ---------------------------------------------------------------------------
.text:0040372D                 align 10h
.text:00403730
.text:00403730 loc_403730:                             ; CODE XREF: __cxxabiv1::__class_type_info::__do_catch(std::type_info const*,void **,uint)+16↑j
.text:00403730                 mov     al, 1
.text:00403732                 add     esp, 14h
.text:00403735                 pop     ebx
.text:00403736                 pop     esi
.text:00403737                 retn    0Ch
.text:00403737 __ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj endp
.text:00403737
.text:00403737 ; ---------------------------------------------------------------------------
.text:0040373A                 align 4
.text:0040373C
.text:0040373C ; =============== S U B R O U T I N E =======================================
.text:0040373C
.text:0040373C
.text:0040373C ; __cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result &)const
.text:0040373C                 public __ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
.text:0040373C __ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE proc near
.text:0040373C                                         ; DATA XREF: .rdata:00416304↓o
.text:0040373C
.text:0040373C var_3C          = dword ptr -3Ch
.text:0040373C var_2C          = dword ptr -2Ch
.text:0040373C var_28          = dword ptr -28h
.text:0040373C var_24          = dword ptr -24h
.text:0040373C var_20          = dword ptr -20h
.text:0040373C arg_0           = dword ptr  4
.text:0040373C arg_4           = dword ptr  8
.text:0040373C arg_8           = dword ptr  0Ch
.text:0040373C arg_C           = dword ptr  10h
.text:0040373C arg_10          = dword ptr  14h
.text:0040373C arg_14          = dword ptr  18h
.text:0040373C arg_18          = dword ptr  1Ch
.text:0040373C
.text:0040373C                 push    ebp
.text:0040373D                 push    edi
.text:0040373E                 push    esi
.text:0040373F                 push    ebx
.text:00403740                 sub     esp, 2Ch
.text:00403743                 mov     [esp+3Ch+var_2C], ecx
.text:00403747                 mov     ebp, [esp+3Ch+arg_0]
.text:0040374B                 mov     edx, [esp+3Ch+arg_4]
.text:0040374F                 mov     [esp+3Ch+var_24], edx
.text:00403753                 mov     edi, [esp+3Ch+arg_8]
.text:00403757                 mov     esi, [esp+3Ch+arg_C]
.text:0040375B                 mov     edx, [esp+3Ch+arg_10]
.text:0040375F                 mov     [esp+3Ch+var_20], edx
.text:00403763                 mov     edx, [esp+3Ch+arg_14]
.text:00403767                 mov     [esp+3Ch+var_28], edx
.text:0040376B                 mov     ebx, [esp+3Ch+arg_18]
.text:0040376F                 mov     [esp+3Ch+var_3C], edi
.text:00403772                 call    __ZNKSt9type_infoeqERKS_ ; std::type_info::operator==(std::type_info const&)
.text:00403777                 push    ecx
.text:00403778                 test    al, al
.text:0040377A                 jz      short loc_4037A8
.text:0040377C                 mov     [ebx], esi
.text:0040377E                 mov     edx, [esp+3Ch+var_24]
.text:00403782                 mov     [ebx+4], edx
.text:00403785                 test    ebp, ebp
.text:00403787                 js      short loc_4037EC
.text:00403789                 add     esi, ebp
.text:0040378B                 xor     eax, eax
.text:0040378D                 cmp     [esp+3Ch+var_28], esi
.text:00403791                 setz    al
.text:00403794                 lea     eax, [eax+eax*4+1]
.text:00403798                 mov     [ebx+0Ch], eax
.text:0040379B
.text:0040379B loc_40379B:                             ; CODE XREF: __cxxabiv1::__si_class_type_info::__do_dyncast(int,__cxxabiv1::__class_type_info::__sub_kind,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info::__dyncast_result &)+B3↓j
.text:0040379B                                         ; __cxxabiv1::__si_class_type_info::__do_dyncast(int,__cxxabiv1::__class_type_info::__sub_kind,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info::__dyncast_result &)+BC↓j ...
.text:0040379B                 xor     eax, eax
.text:0040379D                 add     esp, 2Ch
.text:004037A0                 pop     ebx
.text:004037A1                 pop     esi
.text:004037A2                 pop     edi
.text:004037A3                 pop     ebp
.text:004037A4                 retn    1Ch
.text:004037A4 ; ---------------------------------------------------------------------------
.text:004037A7                 align 4
.text:004037A8
.text:004037A8 loc_4037A8:                             ; CODE XREF: __cxxabiv1::__si_class_type_info::__do_dyncast(int,__cxxabiv1::__class_type_info::__sub_kind,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info::__dyncast_result &)+3E↑j
.text:004037A8                 cmp     esi, [esp+3Ch+var_28]
.text:004037AC                 jz      short loc_4037FC
.text:004037AE
.text:004037AE loc_4037AE:                             ; CODE XREF: __cxxabiv1::__si_class_type_info::__do_dyncast(int,__cxxabiv1::__class_type_info::__sub_kind,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info::__dyncast_result &)+D3↓j
.text:004037AE                 mov     eax, [esp+3Ch+var_2C]
.text:004037B2                 mov     ecx, [eax+8]
.text:004037B5                 mov     eax, [ecx]
.text:004037B7                 mov     [esp+3Ch+arg_18], ebx
.text:004037BB                 mov     edx, [esp+3Ch+var_28]
.text:004037BF                 mov     [esp+3Ch+arg_14], edx
.text:004037C3                 mov     edx, [esp+3Ch+var_20]
.text:004037C7                 mov     [esp+3Ch+arg_10], edx
.text:004037CB                 mov     [esp+3Ch+arg_C], esi
.text:004037CF                 mov     [esp+3Ch+arg_8], edi
.text:004037D3                 mov     edx, [esp+3Ch+var_24]
.text:004037D7                 mov     [esp+3Ch+arg_4], edx
.text:004037DB                 mov     [esp+3Ch+arg_0], ebp
.text:004037DF                 mov     eax, [eax+1Ch]
.text:004037E2                 add     esp, 2Ch
.text:004037E5                 pop     ebx
.text:004037E6                 pop     esi
.text:004037E7                 pop     edi
.text:004037E8                 pop     ebp
.text:004037E9                 jmp     eax
.text:004037E9 ; ---------------------------------------------------------------------------
.text:004037EB                 align 4
.text:004037EC
.text:004037EC loc_4037EC:                             ; CODE XREF: __cxxabiv1::__si_class_type_info::__do_dyncast(int,__cxxabiv1::__class_type_info::__sub_kind,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info::__dyncast_result &)+4B↑j
.text:004037EC                 cmp     ebp, 0FFFFFFFEh
.text:004037EF                 jnz     short loc_40379B
.text:004037F1                 mov     dword ptr [ebx+0Ch], 1
.text:004037F8                 jmp     short loc_40379B
.text:004037F8 ; ---------------------------------------------------------------------------
.text:004037FA                 align 4
.text:004037FC
.text:004037FC loc_4037FC:                             ; CODE XREF: __cxxabiv1::__si_class_type_info::__do_dyncast(int,__cxxabiv1::__class_type_info::__sub_kind,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info::__dyncast_result &)+70↑j
.text:004037FC                 mov     edx, [esp+3Ch+var_20]
.text:00403800                 mov     [esp+3Ch+var_3C], edx
.text:00403803                 mov     ecx, [esp+3Ch+var_2C]
.text:00403807                 call    __ZNKSt9type_infoeqERKS_ ; std::type_info::operator==(std::type_info const&)
.text:0040380C                 push    edx
.text:0040380D                 test    al, al
.text:0040380F                 jz      short loc_4037AE
.text:00403811                 mov     edx, [esp+3Ch+var_24]
.text:00403815                 mov     [ebx+8], edx
.text:00403818                 jmp     short loc_40379B
.text:00403818 __ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE endp
.text:00403818
.text:00403818 ; ---------------------------------------------------------------------------
.text:0040381A                 align 4
.text:0040381C
.text:0040381C ; =============== S U B R O U T I N E =======================================
.text:0040381C
.text:0040381C
.text:0040381C ; void __cdecl __cxxabiv1::__si_class_type_info::~__si_class_type_info(__cxxabiv1::__si_class_type_info *__hidden this)
.text:0040381C                 public __ZN10__cxxabiv120__si_class_type_infoD1Ev
.text:0040381C __ZN10__cxxabiv120__si_class_type_infoD1Ev proc near
.text:0040381C                                         ; CODE XREF: __cxxabiv1::__si_class_type_info::~__si_class_type_info()+6↓p
.text:0040381C                                         ; DATA XREF: .rdata:off_4162E8↓o
.text:0040381C
.text:0040381C this            = dword ptr  4
.text:0040381C
.text:0040381C                 mov     dword ptr [ecx], offset off_4162E8
.text:00403822                 jmp     __ZN10__cxxabiv117__class_type_infoD1Ev ; __cxxabiv1::__class_type_info::~__class_type_info()
.text:00403822 __ZN10__cxxabiv120__si_class_type_infoD1Ev endp
.text:00403822
.text:00403822 ; ---------------------------------------------------------------------------
.text:00403827                 align 4
.text:00403828
.text:00403828 ; =============== S U B R O U T I N E =======================================
.text:00403828
.text:00403828
.text:00403828 ; void __cdecl __cxxabiv1::__si_class_type_info::~__si_class_type_info(__cxxabiv1::__si_class_type_info *__hidden this)
.text:00403828                 public __ZN10__cxxabiv120__si_class_type_infoD0Ev
.text:00403828 __ZN10__cxxabiv120__si_class_type_infoD0Ev proc near
.text:00403828                                         ; DATA XREF: .rdata:004162EC↓o
.text:00403828
.text:00403828 var_1C          = dword ptr -1Ch
.text:00403828 this            = dword ptr  4
.text:00403828
.text:00403828                 push    ebx
.text:00403829                 sub     esp, 18h
.text:0040382C                 mov     ebx, ecx
.text:0040382E                 call    __ZN10__cxxabiv120__si_class_type_infoD1Ev ; __cxxabiv1::__si_class_type_info::~__si_class_type_info()
.text:00403833                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:00403836                 call    __ZdlPv         ; operator delete(void *)
.text:0040383B                 add     esp, 18h
.text:0040383E                 pop     ebx
.text:0040383F                 retn
.text:0040383F __ZN10__cxxabiv120__si_class_type_infoD0Ev endp
.text:0040383F
.text:00403840
.text:00403840 ; =============== S U B R O U T I N E =======================================
.text:00403840
.text:00403840
.text:00403840 ; __cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result &)const
.text:00403840                 public __ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
.text:00403840 __ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE proc near
.text:00403840                                         ; DATA XREF: .rdata:00416300↓o
.text:00403840
.text:00403840 var_2C          = dword ptr -2Ch
.text:00403840 var_28          = dword ptr -28h
.text:00403840 var_24          = dword ptr -24h
.text:00403840 arg_0           = dword ptr  4
.text:00403840 arg_4           = dword ptr  8
.text:00403840 arg_8           = dword ptr  0Ch
.text:00403840
.text:00403840                 push    ebp
.text:00403841                 push    edi
.text:00403842                 push    esi
.text:00403843                 push    ebx
.text:00403844                 sub     esp, 1Ch
.text:00403847                 mov     ebx, ecx
.text:00403849                 mov     esi, [esp+2Ch+arg_0]
.text:0040384D                 mov     edi, [esp+2Ch+arg_4]
.text:00403851                 mov     ebp, [esp+2Ch+arg_8]
.text:00403855                 mov     [esp+2Ch+var_24], ebp
.text:00403859                 mov     [esp+2Ch+var_28], edi
.text:0040385D                 mov     [esp+2Ch+var_2C], esi
.text:00403860                 call    __ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE ; __cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info::__upcast_result &)
.text:00403865                 sub     esp, 0Ch
.text:00403868                 test    al, al
.text:0040386A                 jz      short loc_403878
.text:0040386C                 mov     al, 1
.text:0040386E                 add     esp, 1Ch
.text:00403871                 pop     ebx
.text:00403872                 pop     esi
.text:00403873                 pop     edi
.text:00403874                 pop     ebp
.text:00403875                 retn    0Ch
.text:00403878 ; ---------------------------------------------------------------------------
.text:00403878
.text:00403878 loc_403878:                             ; CODE XREF: __cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info::__upcast_result &)+2A↑j
.text:00403878                 mov     ecx, [ebx+8]
.text:0040387B                 mov     eax, [ecx]
.text:0040387D                 mov     [esp+2Ch+arg_8], ebp
.text:00403881                 mov     [esp+2Ch+arg_4], edi
.text:00403885                 mov     [esp+2Ch+arg_0], esi
.text:00403889                 mov     eax, [eax+18h]
.text:0040388C                 add     esp, 1Ch
.text:0040388F                 pop     ebx
.text:00403890                 pop     esi
.text:00403891                 pop     edi
.text:00403892                 pop     ebp
.text:00403893                 jmp     eax
.text:00403893 __ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE endp
.text:00403893
.text:00403893 ; ---------------------------------------------------------------------------
.text:00403895                 align 4
.text:00403898
.text:00403898 ; =============== S U B R O U T I N E =======================================
.text:00403898
.text:00403898
.text:00403898 ; _DWORD __stdcall __cxxabiv1::__si_class_type_info::__do_find_public_src(__cxxabiv1::__si_class_type_info *__hidden this, int, const void *, const __cxxabiv1::__class_type_info *, const void *)
.text:00403898                 public __ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
.text:00403898 __ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_ proc near
.text:00403898                                         ; DATA XREF: .rdata:00416308↓o
.text:00403898
.text:00403898 var_3C          = dword ptr -3Ch
.text:00403898 var_20          = dword ptr -20h
.text:00403898 this            = dword ptr  4
.text:00403898 arg_4           = dword ptr  8
.text:00403898 arg_8           = dword ptr  0Ch
.text:00403898 arg_C           = dword ptr  10h
.text:00403898
.text:00403898                 push    ebp
.text:00403899                 push    edi
.text:0040389A                 push    esi
.text:0040389B                 push    ebx
.text:0040389C                 sub     esp, 2Ch
.text:0040389F                 mov     edx, ecx
.text:004038A1                 mov     ebp, [esp+3Ch+this]
.text:004038A5                 mov     ebx, [esp+3Ch+arg_4]
.text:004038A9                 mov     edi, [esp+3Ch+arg_8]
.text:004038AD                 mov     esi, [esp+3Ch+arg_C]
.text:004038B1                 cmp     esi, ebx
.text:004038B3                 jz      short loc_4038D8
.text:004038B5
.text:004038B5 loc_4038B5:                             ; CODE XREF: __cxxabiv1::__si_class_type_info::__do_find_public_src(int,void const*,__cxxabiv1::__class_type_info const*,void const*)+53↓j
.text:004038B5                 mov     ecx, [edx+8]
.text:004038B8                 mov     eax, [ecx]
.text:004038BA                 mov     [esp+3Ch+arg_C], esi
.text:004038BE                 mov     [esp+3Ch+arg_8], edi
.text:004038C2                 mov     [esp+3Ch+arg_4], ebx
.text:004038C6                 mov     [esp+3Ch+this], ebp
.text:004038CA                 mov     eax, [eax+20h]
.text:004038CD                 add     esp, 2Ch
.text:004038D0                 pop     ebx
.text:004038D1                 pop     esi
.text:004038D2                 pop     edi
.text:004038D3                 pop     ebp
.text:004038D4                 jmp     eax
.text:004038D4 ; ---------------------------------------------------------------------------
.text:004038D6                 align 4
.text:004038D8
.text:004038D8 loc_4038D8:                             ; CODE XREF: __cxxabiv1::__si_class_type_info::__do_find_public_src(int,void const*,__cxxabiv1::__class_type_info const*,void const*)+1B↑j
.text:004038D8                 mov     [esp+3Ch+var_3C], edi
.text:004038DB                 mov     [esp+3Ch+var_20], edx
.text:004038DF                 call    __ZNKSt9type_infoeqERKS_ ; std::type_info::operator==(std::type_info const&)
.text:004038E4                 push    edx
.text:004038E5                 test    al, al
.text:004038E7                 mov     edx, [esp+3Ch+var_20]
.text:004038EB                 jz      short loc_4038B5
.text:004038ED                 mov     eax, 6
.text:004038F2                 add     esp, 2Ch
.text:004038F5                 pop     ebx
.text:004038F6                 pop     esi
.text:004038F7                 pop     edi
.text:004038F8                 pop     ebp
.text:004038F9                 retn    10h
.text:004038F9 __ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_ endp
.text:004038F9
.text:004038FC
.text:004038FC ; =============== S U B R O U T I N E =======================================
.text:004038FC
.text:004038FC ; Attributes: noreturn
.text:004038FC
.text:004038FC ; void __cdecl __noreturn __cxa_call_terminate(_Unwind_Exception *)
.text:004038FC                 public ___cxa_call_terminate
.text:004038FC ___cxa_call_terminate proc near         ; CODE XREF: ___gxx_personality_sj0+40E↑p
.text:004038FC
.text:004038FC var_1C          = dword ptr -1Ch
.text:004038FC arg_0           = dword ptr  4
.text:004038FC
.text:004038FC                 push    ebx
.text:004038FD                 sub     esp, 18h
.text:00403900                 mov     ebx, [esp+1Ch+arg_0]
.text:00403904                 test    ebx, ebx
.text:00403906                 jz      short loc_403938
.text:00403908                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:0040390B                 call    ___cxa_begin_catch
.text:00403910                 mov     eax, [ebx]
.text:00403912                 mov     edx, [ebx+4]
.text:00403915                 add     eax, 0BCD4D500h
.text:0040391A                 adc     edx, 0B8B1AABCh
.text:00403920                 cmp     edx, 0
.text:00403923                 ja      short loc_403938
.text:00403925                 cmp     eax, 1
.text:00403928                 ja      short loc_403938
.text:0040392A                 mov     eax, [ebx-24h]
.text:0040392D                 mov     [esp+1Ch+var_1C], eax ; void (*)(void)
.text:00403930                 call    __ZN10__cxxabiv111__terminateEPFvvE ; __cxxabiv1::__terminate(void (*)(void))
.text:00403930 ; ---------------------------------------------------------------------------
.text:00403935                 align 4
.text:00403938
.text:00403938 loc_403938:                             ; CODE XREF: ___cxa_call_terminate+A↑j
.text:00403938                                         ; ___cxa_call_terminate+27↑j ...
.text:00403938                 call    __ZSt9terminatev ; std::terminate(void)
.text:00403938 ___cxa_call_terminate endp
.text:00403938
.text:00403938 ; ---------------------------------------------------------------------------
.text:0040393D                 align 10h
.text:00403940
.text:00403940 ; =============== S U B R O U T I N E =======================================
.text:00403940
.text:00403940 ; Attributes: noreturn
.text:00403940
.text:00403940 ; void __cdecl __noreturn __cxxabiv1::__terminate(void (*)(void))
.text:00403940                 public __ZN10__cxxabiv111__terminateEPFvvE
.text:00403940 __ZN10__cxxabiv111__terminateEPFvvE proc near
.text:00403940                                         ; CODE XREF: ___cxa_call_unexpected+184↑p
.text:00403940                                         ; ___cxa_call_terminate+34↑p ...
.text:00403940
.text:00403940 lpfctx          = dword ptr -5Ch
.text:00403940 fctx            = SjLj_Function_Context ptr -40h
.text:00403940 var_1C          = dword ptr -1Ch
.text:00403940 var_18          = dword ptr -18h
.text:00403940 var_C           = byte ptr -0Ch
.text:00403940 arg_0           = dword ptr  4
.text:00403940
.text:00403940                 push    ebp
.text:00403941                 sub     esp, 58h
.text:00403944                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:0040394C                 mov     [esp+5Ch+fctx.lsda], offset dword_4122E8
.text:00403954                 lea     eax, [esp+5Ch+var_C]
.text:00403958                 mov     [esp+5Ch+fctx.jbuf], eax
.text:0040395C                 mov     [esp+5Ch+var_1C], offset loc_403985
.text:00403964                 mov     [esp+5Ch+var_18], esp
.text:00403968                 lea     eax, [esp+5Ch+fctx]
.text:0040396C                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:0040396F                 call    __Unwind_SjLj_Register
.text:00403974 ; __unwind { // ___gxx_personality_sj0
.text:00403974 ;   try {
.text:00403974                 mov     [esp+5Ch+fctx.call_site], 1
.text:0040397C                 call    [esp+5Ch+arg_0]
.text:00403980
.text:00403980 loc_403980:                             ; CODE XREF: __cxxabiv1::__terminate(void (*)(void))+51↓j
.text:00403980                 call    _abort
.text:00403985 ; ---------------------------------------------------------------------------
.text:00403985
.text:00403985 loc_403985:                             ; DATA XREF: __cxxabiv1::__terminate(void (*)(void))+1C↑o
.text:00403985 ;   catch(...) // owned by 403974
.text:00403985                 mov     eax, [esp+5Ch+fctx.data]
.text:00403989                 mov     [esp+5Ch+lpfctx], eax ; void *
.text:0040398C                 call    ___cxa_begin_catch
.text:00403991                 jmp     short loc_403980
.text:00403991 ;   } // starts at 403974
.text:00403991 ; } // starts at 403974
.text:00403991 __ZN10__cxxabiv111__terminateEPFvvE endp
.text:00403991
.text:00403991 ; ---------------------------------------------------------------------------
.text:00403993                 align 4
.text:00403994
.text:00403994 ; =============== S U B R O U T I N E =======================================
.text:00403994
.text:00403994 ; Attributes: noreturn
.text:00403994
.text:00403994 ; void __noreturn std::terminate(void)
.text:00403994                 public __ZSt9terminatev
.text:00403994 __ZSt9terminatev proc near              ; CODE XREF: ___gxx_personality_sj0:loc_401F40↑p
.text:00403994                                         ; ___cxa_call_terminate:loc_403938↑p ...
.text:00403994
.text:00403994 lpfctx          = dword ptr -5Ch
.text:00403994 fctx            = SjLj_Function_Context ptr -40h
.text:00403994 var_1C          = dword ptr -1Ch
.text:00403994 var_18          = dword ptr -18h
.text:00403994 var_C           = byte ptr -0Ch
.text:00403994 arg_1C          = dword ptr  20h
.text:00403994 lpuexcpt        = dword ptr  24h
.text:00403994 arg_24          = dword ptr  28h
.text:00403994
.text:00403994                 push    ebp
.text:00403995                 sub     esp, 58h
.text:00403998                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:004039A0                 mov     [esp+5Ch+fctx.lsda], offset dword_4122F8
.text:004039A8                 lea     eax, [esp+5Ch+var_C]
.text:004039AC                 mov     [esp+5Ch+fctx.jbuf], eax
.text:004039B0                 mov     [esp+5Ch+var_1C], offset loc_4039EF
.text:004039B8                 mov     [esp+5Ch+var_18], esp
.text:004039BC                 lea     eax, [esp+5Ch+fctx]
.text:004039C0                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:004039C3                 call    __Unwind_SjLj_Register
.text:004039C8 ; __unwind { // ___gxx_personality_sj0
.text:004039C8                 mov     eax, ds:__ZN10__cxxabiv134__shmem_ptr___terminate_handler_shE ; __cxxabiv1::__shmem_ptr___terminate_handler_sh
.text:004039CD                 test    eax, eax
.text:004039CF                 jz      short loc_4039DB
.text:004039D1
.text:004039D1 loc_4039D1:                             ; CODE XREF: std::terminate(void)+59↓j
.text:004039D1                 mov     eax, [eax]
.text:004039D3                 mov     [esp+5Ch+lpfctx], eax ; void (*)(void)
.text:004039D6                 call    __ZN10__cxxabiv111__terminateEPFvvE ; __cxxabiv1::__terminate(void (*)(void))
.text:004039DB ; ---------------------------------------------------------------------------
.text:004039DB
.text:004039DB loc_4039DB:                             ; CODE XREF: std::terminate(void)+3B↑j
.text:004039DB                 mov     [esp+5Ch+fctx.call_site], 1
.text:004039E3                 call    __ZN10__cxxabiv138__shmem_grabber___terminate_handler_shEv ; __cxxabiv1::__shmem_grabber___terminate_handler_sh(void)
.text:004039E8                 mov     ds:__ZN10__cxxabiv134__shmem_ptr___terminate_handler_shE, eax ; __cxxabiv1::__shmem_ptr___terminate_handler_sh
.text:004039ED                 jmp     short loc_4039D1
.text:004039EF ; ---------------------------------------------------------------------------
.text:004039EF
.text:004039EF loc_4039EF:                             ; DATA XREF: std::terminate(void)+1C↑o
.text:004039EF                 mov     eax, [esp+lpuexcpt]
.text:004039F3                 cmp     [esp+arg_24], 0FFFFFFFFh
.text:004039F8                 mov     [esp+0], eax    ; void *
.text:004039FB                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00403A03                 jz      short loc_403A0A
.text:00403A05                 call    __Unwind_SjLj_Resume
.text:00403A0A ; ---------------------------------------------------------------------------
.text:00403A0A
.text:00403A0A loc_403A0A:                             ; CODE XREF: std::terminate(void)+6F↑j
.text:00403A0A                 call    ___cxa_call_unexpected
.text:00403A0A ; } // starts at 4039C8
.text:00403A0A __ZSt9terminatev endp
.text:00403A0A
.text:00403A0A ; ---------------------------------------------------------------------------
.text:00403A0F                 align 10h
.text:00403A10
.text:00403A10 ; =============== S U B R O U T I N E =======================================
.text:00403A10
.text:00403A10 ; Attributes: noreturn
.text:00403A10
.text:00403A10 ; void __cdecl __noreturn __cxxabiv1::__unexpected(void (*)(void))
.text:00403A10                 public __ZN10__cxxabiv112__unexpectedEPFvvE
.text:00403A10 __ZN10__cxxabiv112__unexpectedEPFvvE proc near
.text:00403A10                                         ; CODE XREF: ___cxa_call_unexpected+8F↑p
.text:00403A10                                         ; std::unexpected(void)+11↓p
.text:00403A10
.text:00403A10 arg_0           = dword ptr  4
.text:00403A10
.text:00403A10                 sub     esp, 0Ch
.text:00403A13                 call    [esp+0Ch+arg_0]
.text:00403A17                 call    __ZSt9terminatev ; std::terminate(void)
.text:00403A17 __ZN10__cxxabiv112__unexpectedEPFvvE endp
.text:00403A17
.text:00403A1C
.text:00403A1C ; =============== S U B R O U T I N E =======================================
.text:00403A1C
.text:00403A1C ; Attributes: noreturn
.text:00403A1C
.text:00403A1C ; void __noreturn std::unexpected(void)
.text:00403A1C                 public __ZSt10unexpectedv
.text:00403A1C __ZSt10unexpectedv proc near            ; CODE XREF: ___gxx_personality_sj0+569↑p
.text:00403A1C
.text:00403A1C var_1C          = dword ptr -1Ch
.text:00403A1C
.text:00403A1C                 sub     esp, 1Ch
.text:00403A1F                 mov     eax, ds:__ZN10__cxxabiv135__shmem_ptr___unexpected_handler_shE ; __cxxabiv1::__shmem_ptr___unexpected_handler_sh
.text:00403A24                 test    eax, eax
.text:00403A26                 jz      short loc_403A32
.text:00403A28
.text:00403A28 loc_403A28:                             ; CODE XREF: std::unexpected(void)+20↓j
.text:00403A28                 mov     eax, [eax]
.text:00403A2A                 mov     [esp+1Ch+var_1C], eax ; void (*)(void)
.text:00403A2D                 call    __ZN10__cxxabiv112__unexpectedEPFvvE ; __cxxabiv1::__unexpected(void (*)(void))
.text:00403A32 ; ---------------------------------------------------------------------------
.text:00403A32
.text:00403A32 loc_403A32:                             ; CODE XREF: std::unexpected(void)+A↑j
.text:00403A32                 call    __ZN10__cxxabiv139__shmem_grabber___unexpected_handler_shEv ; __cxxabiv1::__shmem_grabber___unexpected_handler_sh(void)
.text:00403A37                 mov     ds:__ZN10__cxxabiv135__shmem_ptr___unexpected_handler_shE, eax ; __cxxabiv1::__shmem_ptr___unexpected_handler_sh
.text:00403A3C                 jmp     short loc_403A28
.text:00403A3C __ZSt10unexpectedv endp
.text:00403A3C
.text:00403A3C ; ---------------------------------------------------------------------------
.text:00403A3E                 align 10h
.text:00403A40
.text:00403A40 ; =============== S U B R O U T I N E =======================================
.text:00403A40
.text:00403A40
.text:00403A40 ; _DWORD __cdecl std::set_terminate(void (*)(void))
.text:00403A40                 public __ZSt13set_terminatePFvvE
.text:00403A40 __ZSt13set_terminatePFvvE proc near
.text:00403A40
.text:00403A40 lpfctx          = dword ptr -5Ch
.text:00403A40 var_44          = dword ptr -44h
.text:00403A40 fctx            = SjLj_Function_Context ptr -40h
.text:00403A40 var_1C          = dword ptr -1Ch
.text:00403A40 var_18          = dword ptr -18h
.text:00403A40 var_C           = byte ptr -0Ch
.text:00403A40 arg_0           = dword ptr  4
.text:00403A40 arg_1C          = dword ptr  20h
.text:00403A40 lpuexcpt        = dword ptr  24h
.text:00403A40 arg_24          = dword ptr  28h
.text:00403A40
.text:00403A40                 push    ebp
.text:00403A41                 sub     esp, 58h
.text:00403A44                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00403A4C                 mov     [esp+5Ch+fctx.lsda], offset dword_412308
.text:00403A54                 lea     eax, [esp+5Ch+var_C]
.text:00403A58                 mov     [esp+5Ch+fctx.jbuf], eax
.text:00403A5C                 mov     [esp+5Ch+var_1C], offset loc_403ABA
.text:00403A64                 mov     [esp+5Ch+var_18], esp
.text:00403A68                 lea     edx, [esp+5Ch+fctx]
.text:00403A6C                 mov     [esp+5Ch+lpfctx], edx ; lpfctx
.text:00403A6F                 call    __Unwind_SjLj_Register
.text:00403A74 ; __unwind { // ___gxx_personality_sj0
.text:00403A74                 mov     eax, ds:__ZN10__cxxabiv134__shmem_ptr___terminate_handler_shE ; __cxxabiv1::__shmem_ptr___terminate_handler_sh
.text:00403A79                 test    eax, eax
.text:00403A7B                 jz      short loc_403AA0
.text:00403A7D                 mov     edx, [eax]
.text:00403A7F                 mov     [esp+5Ch+var_44], edx
.text:00403A83
.text:00403A83 loc_403A83:                             ; CODE XREF: std::set_terminate(void (*)(void))+78↓j
.text:00403A83                 mov     edx, [esp+5Ch+arg_0]
.text:00403A87                 mov     [eax], edx
.text:00403A89                 lea     eax, [esp+5Ch+fctx]
.text:00403A8D                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:00403A90                 call    __Unwind_SjLj_Unregister
.text:00403A95                 mov     eax, [esp+5Ch+var_44]
.text:00403A99                 add     esp, 58h
.text:00403A9C                 pop     ebp
.text:00403A9D                 retn
.text:00403A9D ; ---------------------------------------------------------------------------
.text:00403A9E                 align 10h
.text:00403AA0
.text:00403AA0 loc_403AA0:                             ; CODE XREF: std::set_terminate(void (*)(void))+3B↑j
.text:00403AA0                 mov     [esp+5Ch+fctx.call_site], 1
.text:00403AA8                 call    __ZN10__cxxabiv138__shmem_grabber___terminate_handler_shEv ; __cxxabiv1::__shmem_grabber___terminate_handler_sh(void)
.text:00403AAD                 mov     ds:__ZN10__cxxabiv134__shmem_ptr___terminate_handler_shE, eax ; __cxxabiv1::__shmem_ptr___terminate_handler_sh
.text:00403AB2                 mov     edx, [eax]
.text:00403AB4                 mov     [esp+5Ch+var_44], edx
.text:00403AB8                 jmp     short loc_403A83
.text:00403ABA ; ---------------------------------------------------------------------------
.text:00403ABA
.text:00403ABA loc_403ABA:                             ; DATA XREF: std::set_terminate(void (*)(void))+1C↑o
.text:00403ABA                 mov     eax, [esp+lpuexcpt]
.text:00403ABE                 cmp     [esp+arg_24], 0FFFFFFFFh
.text:00403AC3                 mov     [esp+0], eax    ; void *
.text:00403AC6                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00403ACE                 jz      short loc_403AD5
.text:00403AD0                 call    __Unwind_SjLj_Resume
.text:00403AD5 ; ---------------------------------------------------------------------------
.text:00403AD5
.text:00403AD5 loc_403AD5:                             ; CODE XREF: std::set_terminate(void (*)(void))+8E↑j
.text:00403AD5                 call    ___cxa_call_unexpected
.text:00403AD5 ; } // starts at 403A74
.text:00403AD5 __ZSt13set_terminatePFvvE endp
.text:00403AD5
.text:00403AD5 ; ---------------------------------------------------------------------------
.text:00403ADA                 align 4
.text:00403ADC
.text:00403ADC ; =============== S U B R O U T I N E =======================================
.text:00403ADC
.text:00403ADC
.text:00403ADC ; _DWORD __cdecl std::set_unexpected(void (*)(void))
.text:00403ADC                 public __ZSt14set_unexpectedPFvvE
.text:00403ADC __ZSt14set_unexpectedPFvvE proc near
.text:00403ADC
.text:00403ADC lpfctx          = dword ptr -5Ch
.text:00403ADC var_44          = dword ptr -44h
.text:00403ADC fctx            = SjLj_Function_Context ptr -40h
.text:00403ADC var_1C          = dword ptr -1Ch
.text:00403ADC var_18          = dword ptr -18h
.text:00403ADC var_C           = byte ptr -0Ch
.text:00403ADC arg_0           = dword ptr  4
.text:00403ADC arg_1C          = dword ptr  20h
.text:00403ADC lpuexcpt        = dword ptr  24h
.text:00403ADC arg_24          = dword ptr  28h
.text:00403ADC
.text:00403ADC                 push    ebp
.text:00403ADD                 sub     esp, 58h
.text:00403AE0                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00403AE8                 mov     [esp+5Ch+fctx.lsda], offset dword_412318
.text:00403AF0                 lea     eax, [esp+5Ch+var_C]
.text:00403AF4                 mov     [esp+5Ch+fctx.jbuf], eax
.text:00403AF8                 mov     [esp+5Ch+var_1C], offset loc_403B56
.text:00403B00                 mov     [esp+5Ch+var_18], esp
.text:00403B04                 lea     edx, [esp+5Ch+fctx]
.text:00403B08                 mov     [esp+5Ch+lpfctx], edx ; lpfctx
.text:00403B0B                 call    __Unwind_SjLj_Register
.text:00403B10 ; __unwind { // ___gxx_personality_sj0
.text:00403B10                 mov     eax, ds:__ZN10__cxxabiv135__shmem_ptr___unexpected_handler_shE ; __cxxabiv1::__shmem_ptr___unexpected_handler_sh
.text:00403B15                 test    eax, eax
.text:00403B17                 jz      short loc_403B3C
.text:00403B19                 mov     edx, [eax]
.text:00403B1B                 mov     [esp+5Ch+var_44], edx
.text:00403B1F
.text:00403B1F loc_403B1F:                             ; CODE XREF: std::set_unexpected(void (*)(void))+78↓j
.text:00403B1F                 mov     edx, [esp+5Ch+arg_0]
.text:00403B23                 mov     [eax], edx
.text:00403B25                 lea     eax, [esp+5Ch+fctx]
.text:00403B29                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:00403B2C                 call    __Unwind_SjLj_Unregister
.text:00403B31                 mov     eax, [esp+5Ch+var_44]
.text:00403B35                 add     esp, 58h
.text:00403B38                 pop     ebp
.text:00403B39                 retn
.text:00403B39 ; ---------------------------------------------------------------------------
.text:00403B3A                 align 4
.text:00403B3C
.text:00403B3C loc_403B3C:                             ; CODE XREF: std::set_unexpected(void (*)(void))+3B↑j
.text:00403B3C                 mov     [esp+5Ch+fctx.call_site], 1
.text:00403B44                 call    __ZN10__cxxabiv139__shmem_grabber___unexpected_handler_shEv ; __cxxabiv1::__shmem_grabber___unexpected_handler_sh(void)
.text:00403B49                 mov     ds:__ZN10__cxxabiv135__shmem_ptr___unexpected_handler_shE, eax ; __cxxabiv1::__shmem_ptr___unexpected_handler_sh
.text:00403B4E                 mov     edx, [eax]
.text:00403B50                 mov     [esp+5Ch+var_44], edx
.text:00403B54                 jmp     short loc_403B1F
.text:00403B56 ; ---------------------------------------------------------------------------
.text:00403B56
.text:00403B56 loc_403B56:                             ; DATA XREF: std::set_unexpected(void (*)(void))+1C↑o
.text:00403B56                 mov     eax, [esp+lpuexcpt]
.text:00403B5A                 cmp     [esp+arg_24], 0FFFFFFFFh
.text:00403B5F                 mov     [esp+0], eax    ; void *
.text:00403B62                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00403B6A                 jz      short loc_403B71
.text:00403B6C                 call    __Unwind_SjLj_Resume
.text:00403B71 ; ---------------------------------------------------------------------------
.text:00403B71
.text:00403B71 loc_403B71:                             ; CODE XREF: std::set_unexpected(void (*)(void))+8E↑j
.text:00403B71                 call    ___cxa_call_unexpected
.text:00403B71 ; } // starts at 403B10
.text:00403B71 __ZSt14set_unexpectedPFvvE endp
.text:00403B71
.text:00403B71 ; ---------------------------------------------------------------------------
.text:00403B76                 align 4
.text:00403B78
.text:00403B78 ; =============== S U B R O U T I N E =======================================
.text:00403B78
.text:00403B78
.text:00403B78 ; void *__cdecl __cxa_get_exception_ptr(void *)
.text:00403B78                 public ___cxa_get_exception_ptr
.text:00403B78 ___cxa_get_exception_ptr proc near
.text:00403B78
.text:00403B78 arg_0           = dword ptr  4
.text:00403B78
.text:00403B78                 mov     eax, [esp+arg_0]
.text:00403B7C                 mov     eax, [eax-8]
.text:00403B7F                 retn
.text:00403B7F ___cxa_get_exception_ptr endp
.text:00403B7F
.text:00403B80
.text:00403B80 ; =============== S U B R O U T I N E =======================================
.text:00403B80
.text:00403B80
.text:00403B80 ; void *__cdecl __cxa_begin_catch(void *)
.text:00403B80                 public ___cxa_begin_catch
.text:00403B80 ___cxa_begin_catch proc near            ; CODE XREF: ___gxx_personality_sj0+557↑p
.text:00403B80                                         ; ___cxa_call_unexpected+44↑p ...
.text:00403B80
.text:00403B80 arg_0           = dword ptr  4
.text:00403B80
.text:00403B80                 push    edi
.text:00403B81                 push    esi
.text:00403B82                 push    ebx
.text:00403B83                 mov     esi, [esp+0Ch+arg_0]
.text:00403B87                 call    ___cxa_get_globals
.text:00403B8C                 mov     edx, [eax]
.text:00403B8E                 lea     edi, [esi-30h]
.text:00403B91                 mov     ecx, [esi]
.text:00403B93                 mov     ebx, [esi+4]
.text:00403B96                 add     ecx, 0BCD4D500h
.text:00403B9C                 adc     ebx, 0B8B1AABCh
.text:00403BA2                 cmp     ebx, 0
.text:00403BA5                 ja      short loc_403BAC
.text:00403BA7                 cmp     ecx, 1
.text:00403BAA                 jbe     short loc_403BB8
.text:00403BAC
.text:00403BAC loc_403BAC:                             ; CODE XREF: ___cxa_begin_catch+25↑j
.text:00403BAC                 test    edx, edx
.text:00403BAE                 jnz     short loc_403BE1
.text:00403BB0                 mov     [eax], edi
.text:00403BB2                 xor     eax, eax
.text:00403BB4                 pop     ebx
.text:00403BB5                 pop     esi
.text:00403BB6                 pop     edi
.text:00403BB7                 retn
.text:00403BB8 ; ---------------------------------------------------------------------------
.text:00403BB8
.text:00403BB8 loc_403BB8:                             ; CODE XREF: ___cxa_begin_catch+2A↑j
.text:00403BB8                 mov     ecx, [esi-1Ch]
.text:00403BBB                 test    ecx, ecx
.text:00403BBD                 js      short loc_403BD8
.text:00403BBF                 lea     ebx, [ecx+1]
.text:00403BC2
.text:00403BC2 loc_403BC2:                             ; CODE XREF: ___cxa_begin_catch+5F↓j
.text:00403BC2                 mov     [esi-1Ch], ebx
.text:00403BC5                 dec     dword ptr [eax+4]
.text:00403BC8                 cmp     edi, edx
.text:00403BCA                 jz      short loc_403BD1
.text:00403BCC                 mov     [esi-20h], edx
.text:00403BCF                 mov     [eax], edi
.text:00403BD1
.text:00403BD1 loc_403BD1:                             ; CODE XREF: ___cxa_begin_catch+4A↑j
.text:00403BD1                 mov     eax, [esi-8]
.text:00403BD4                 pop     ebx
.text:00403BD5                 pop     esi
.text:00403BD6                 pop     edi
.text:00403BD7                 retn
.text:00403BD8 ; ---------------------------------------------------------------------------
.text:00403BD8
.text:00403BD8 loc_403BD8:                             ; CODE XREF: ___cxa_begin_catch+3D↑j
.text:00403BD8                 mov     ebx, 1
.text:00403BDD                 sub     ebx, ecx
.text:00403BDF                 jmp     short loc_403BC2
.text:00403BE1 ; ---------------------------------------------------------------------------
.text:00403BE1
.text:00403BE1 loc_403BE1:                             ; CODE XREF: ___cxa_begin_catch+2E↑j
.text:00403BE1                 call    __ZSt9terminatev ; std::terminate(void)
.text:00403BE1 ___cxa_begin_catch endp
.text:00403BE1
.text:00403BE1 ; ---------------------------------------------------------------------------
.text:00403BE6                 align 4
.text:00403BE8
.text:00403BE8 ; =============== S U B R O U T I N E =======================================
.text:00403BE8
.text:00403BE8
.text:00403BE8 ; void __cxa_end_catch(void)
.text:00403BE8                 public ___cxa_end_catch
.text:00403BE8 ___cxa_end_catch proc near              ; CODE XREF: ___cxa_call_unexpected+112↑p
.text:00403BE8                                         ; ___cxa_call_unexpected+117↑p ...
.text:00403BE8
.text:00403BE8 lpuexcpt        = dword ptr -1Ch
.text:00403BE8
.text:00403BE8                 push    ebx             ; int
.text:00403BE9                 sub     esp, 18h
.text:00403BEC                 call    ___cxa_get_globals_fast
.text:00403BF1                 mov     edx, [eax]
.text:00403BF3                 test    edx, edx
.text:00403BF5                 jz      short loc_403C1F
.text:00403BF7                 mov     ecx, [edx+30h]
.text:00403BFA                 mov     ebx, [edx+34h]
.text:00403BFD                 add     ecx, 0BCD4D500h
.text:00403C03                 adc     ebx, 0B8B1AABCh
.text:00403C09                 cmp     ebx, 0
.text:00403C0C                 jbe     short loc_403C24
.text:00403C0E
.text:00403C0E loc_403C0E:                             ; CODE XREF: ___cxa_end_catch+3F↓j
.text:00403C0E                 mov     dword ptr [eax], 0
.text:00403C14                 add     edx, 30h ; '0'
.text:00403C17                 mov     [esp+1Ch+lpuexcpt], edx ; lpuexcpt
.text:00403C1A                 call    __Unwind_DeleteException
.text:00403C1F
.text:00403C1F loc_403C1F:                             ; CODE XREF: ___cxa_end_catch+D↑j
.text:00403C1F                                         ; ___cxa_end_catch+74↓j
.text:00403C1F                 add     esp, 18h
.text:00403C22                 pop     ebx
.text:00403C23                 retn
.text:00403C24 ; ---------------------------------------------------------------------------
.text:00403C24
.text:00403C24 loc_403C24:                             ; CODE XREF: ___cxa_end_catch+24↑j
.text:00403C24                 cmp     ecx, 1
.text:00403C27                 ja      short loc_403C0E
.text:00403C29                 mov     ecx, [edx+14h]
.text:00403C2C                 test    ecx, ecx
.text:00403C2E                 js      short loc_403C40
.text:00403C30                 dec     ecx
.text:00403C31                 jz      short loc_403C4C
.text:00403C33                 cmp     ecx, 0FFFFFFFFh
.text:00403C36                 jz      short loc_403C5E
.text:00403C38
.text:00403C38 loc_403C38:                             ; CODE XREF: ___cxa_end_catch+59↓j
.text:00403C38                                         ; ___cxa_end_catch+60↓j
.text:00403C38                 mov     [edx+14h], ecx
.text:00403C3B                 add     esp, 18h
.text:00403C3E                 pop     ebx
.text:00403C3F                 retn
.text:00403C40 ; ---------------------------------------------------------------------------
.text:00403C40
.text:00403C40 loc_403C40:                             ; CODE XREF: ___cxa_end_catch+46↑j
.text:00403C40                 inc     ecx
.text:00403C41                 jnz     short loc_403C38
.text:00403C43                 mov     ebx, [edx+10h]
.text:00403C46                 mov     [eax], ebx
.text:00403C48                 jmp     short loc_403C38
.text:00403C48 ; ---------------------------------------------------------------------------
.text:00403C4A                 align 4
.text:00403C4C
.text:00403C4C loc_403C4C:                             ; CODE XREF: ___cxa_end_catch+49↑j
.text:00403C4C                 mov     ecx, [edx+10h]
.text:00403C4F                 mov     [eax], ecx
.text:00403C51                 add     edx, 30h ; '0'
.text:00403C54                 mov     [esp+1Ch+lpuexcpt], edx ; lpuexcpt
.text:00403C57                 call    __Unwind_DeleteException
.text:00403C5C                 jmp     short loc_403C1F
.text:00403C5E ; ---------------------------------------------------------------------------
.text:00403C5E
.text:00403C5E loc_403C5E:                             ; CODE XREF: ___cxa_end_catch+4E↑j
.text:00403C5E                 call    __ZSt9terminatev ; std::terminate(void)
.text:00403C5E ___cxa_end_catch endp
.text:00403C5E
.text:00403C5E ; ---------------------------------------------------------------------------
.text:00403C63                 align 4
.text:00403C64
.text:00403C64 ; =============== S U B R O U T I N E =======================================
.text:00403C64
.text:00403C64
.text:00403C64 ; _DWORD std::uncaught_exception(void)
.text:00403C64                 public __ZSt18uncaught_exceptionv
.text:00403C64 __ZSt18uncaught_exceptionv proc near
.text:00403C64                 sub     esp, 0Ch
.text:00403C67                 call    ___cxa_get_globals
.text:00403C6C                 mov     eax, [eax+4]
.text:00403C6F                 test    eax, eax
.text:00403C71                 setnz   al
.text:00403C74                 add     esp, 0Ch
.text:00403C77                 retn
.text:00403C77 __ZSt18uncaught_exceptionv endp
.text:00403C77
.text:00403C78
.text:00403C78 ; =============== S U B R O U T I N E =======================================
.text:00403C78
.text:00403C78
.text:00403C78 ; void __shmem_init_eh_globals(void *)
.text:00403C78                 public ___shmem_init_eh_globals
.text:00403C78 ___shmem_init_eh_globals proc near      ; DATA XREF: __shmem_grabber_eh_globals(void)+3↓o
.text:00403C78
.text:00403C78 arg_0           = dword ptr  4
.text:00403C78
.text:00403C78                 mov     eax, [esp+arg_0]
.text:00403C7C                 mov     dword ptr [eax], 0
.text:00403C82                 mov     dword ptr [eax+4], 0
.text:00403C89                 retn
.text:00403C89 ___shmem_init_eh_globals endp
.text:00403C89
.text:00403C89 ; ---------------------------------------------------------------------------
.text:00403C8A                 align 4
.text:00403C8C
.text:00403C8C ; =============== S U B R O U T I N E =======================================
.text:00403C8C
.text:00403C8C
.text:00403C8C ; void eh_globals_dtor(void *)
.text:00403C8C __ZL15eh_globals_dtorPv proc near       ; DATA XREF: ___shmem_init_init:loc_403CF4↓o
.text:00403C8C
.text:00403C8C lpuexcpt        = dword ptr -1Ch
.text:00403C8C arg_0           = dword ptr  4
.text:00403C8C
.text:00403C8C                 push    esi
.text:00403C8D                 push    ebx
.text:00403C8E                 sub     esp, 14h
.text:00403C91                 mov     esi, [esp+1Ch+arg_0]
.text:00403C95                 test    esi, esi
.text:00403C97                 jz      short loc_403CC4
.text:00403C99                 mov     eax, [esi]
.text:00403C9B                 test    eax, eax
.text:00403C9D                 jz      short loc_403CB4
.text:00403C9F                 nop
.text:00403CA0
.text:00403CA0 loc_403CA0:                             ; CODE XREF: eh_globals_dtor(void *)+26↓j
.text:00403CA0                 mov     ebx, [eax+10h]
.text:00403CA3                 add     eax, 30h ; '0'
.text:00403CA6                 mov     [esp+1Ch+lpuexcpt], eax ; lpuexcpt
.text:00403CA9                 call    __Unwind_DeleteException
.text:00403CAE                 mov     eax, ebx
.text:00403CB0                 test    ebx, ebx
.text:00403CB2                 jnz     short loc_403CA0
.text:00403CB4
.text:00403CB4 loc_403CB4:                             ; CODE XREF: eh_globals_dtor(void *)+11↑j
.text:00403CB4                 mov     [esp+1Ch+arg_0], esi ; void *
.text:00403CB8                 add     esp, 14h
.text:00403CBB                 pop     ebx
.text:00403CBC                 pop     esi
.text:00403CBD                 jmp     _free
.text:00403CBD ; ---------------------------------------------------------------------------
.text:00403CC2                 align 4
.text:00403CC4
.text:00403CC4 loc_403CC4:                             ; CODE XREF: eh_globals_dtor(void *)+B↑j
.text:00403CC4                 add     esp, 14h
.text:00403CC7                 pop     ebx
.text:00403CC8                 pop     esi
.text:00403CC9                 retn
.text:00403CC9 __ZL15eh_globals_dtorPv endp
.text:00403CC9
.text:00403CC9 ; ---------------------------------------------------------------------------
.text:00403CCA                 align 4
.text:00403CCC
.text:00403CCC ; =============== S U B R O U T I N E =======================================
.text:00403CCC
.text:00403CCC
.text:00403CCC ; void __shmem_init_init(void *)
.text:00403CCC                 public ___shmem_init_init
.text:00403CCC ___shmem_init_init proc near            ; DATA XREF: __shmem_grabber_init(void)+3↓o
.text:00403CCC
.text:00403CCC key             = dword ptr -2Ch
.text:00403CCC dtor            = dword ptr -28h
.text:00403CCC var_14          = dword ptr -14h
.text:00403CCC var_10          = byte ptr -10h
.text:00403CCC arg_0           = dword ptr  4
.text:00403CCC
.text:00403CCC                 push    ebx
.text:00403CCD                 sub     esp, 28h
.text:00403CD0                 mov     ebx, [esp+2Ch+arg_0]
.text:00403CD4                 mov     [esp+2Ch+var_10], 0
.text:00403CD9                 mov     eax, ds:__CRT_MT
.text:00403CDE                 test    eax, eax
.text:00403CE0                 jnz     short loc_403CF4
.text:00403CE2                 xor     edx, edx
.text:00403CE4                 mov     eax, [esp+2Ch+var_14]
.text:00403CE8                 mov     [ebx], eax
.text:00403CEA                 mov     [ebx+4], dl
.text:00403CED                 add     esp, 28h
.text:00403CF0                 pop     ebx
.text:00403CF1                 retn
.text:00403CF1 ; ---------------------------------------------------------------------------
.text:00403CF2                 align 4
.text:00403CF4
.text:00403CF4 loc_403CF4:                             ; CODE XREF: ___shmem_init_init+14↑j
.text:00403CF4                 mov     [esp+2Ch+dtor], offset __ZL15eh_globals_dtorPv ; dtor
.text:00403CFC                 lea     eax, [esp+2Ch+var_14]
.text:00403D00                 mov     [esp+2Ch+key], eax ; key
.text:00403D03                 call    ___gthr_win32_key_create
.text:00403D08                 test    eax, eax
.text:00403D0A                 setz    dl
.text:00403D0D                 mov     eax, [esp+2Ch+var_14]
.text:00403D11                 mov     [ebx], eax
.text:00403D13                 mov     [ebx+4], dl
.text:00403D16                 add     esp, 28h
.text:00403D19                 pop     ebx
.text:00403D1A                 retn
.text:00403D1A ___shmem_init_init endp
.text:00403D1A
.text:00403D1A ; ---------------------------------------------------------------------------
.text:00403D1B                 align 4
.text:00403D1C
.text:00403D1C ; =============== S U B R O U T I N E =======================================
.text:00403D1C
.text:00403D1C
.text:00403D1C ; _DWORD __shmem_grabber_eh_globals(void)
.text:00403D1C                 public __Z26__shmem_grabber_eh_globalsv
.text:00403D1C __Z26__shmem_grabber_eh_globalsv proc near
.text:00403D1C                                         ; CODE XREF: ___cxa_get_globals_fast+8D↓p
.text:00403D1C                                         ; ___cxa_get_globals+95↓p
.text:00403D1C
.text:00403D1C name            = dword ptr -1Ch
.text:00403D1C size            = dword ptr -18h
.text:00403D1C initfunc        = dword ptr -14h
.text:00403D1C
.text:00403D1C                 sub     esp, 1Ch
.text:00403D1F                 mov     [esp+1Ch+initfunc], offset ___shmem_init_eh_globals ; initfunc
.text:00403D27                 mov     [esp+1Ch+size], 8 ; size
.text:00403D2F                 mov     [esp+1Ch+name], offset name ; "eh_globals"
.text:00403D36                 call    ___shmem_grab
.text:00403D3B                 add     esp, 1Ch
.text:00403D3E                 retn
.text:00403D3E __Z26__shmem_grabber_eh_globalsv endp
.text:00403D3E
.text:00403D3E ; ---------------------------------------------------------------------------
.text:00403D3F                 align 10h
.text:00403D40
.text:00403D40 ; =============== S U B R O U T I N E =======================================
.text:00403D40
.text:00403D40
.text:00403D40 ; _DWORD __shmem_grabber_init(void)
.text:00403D40                 public __Z20__shmem_grabber_initv
.text:00403D40 __Z20__shmem_grabber_initv proc near    ; CODE XREF: ___cxa_get_globals_fast+A8↓p
.text:00403D40                                         ; ___cxa_get_globals_fast+BC↓p ...
.text:00403D40
.text:00403D40 name            = dword ptr -1Ch
.text:00403D40 size            = dword ptr -18h
.text:00403D40 initfunc        = dword ptr -14h
.text:00403D40
.text:00403D40                 sub     esp, 1Ch
.text:00403D43                 mov     [esp+1Ch+initfunc], offset ___shmem_init_init ; initfunc
.text:00403D4B                 mov     [esp+1Ch+size], 8 ; size
.text:00403D53                 mov     [esp+1Ch+name], offset aInit ; "init"
.text:00403D5A                 call    ___shmem_grab
.text:00403D5F                 add     esp, 1Ch
.text:00403D62                 retn
.text:00403D62 __Z20__shmem_grabber_initv endp
.text:00403D62
.text:00403D62 ; ---------------------------------------------------------------------------
.text:00403D63                 align 4
.text:00403D64
.text:00403D64 ; =============== S U B R O U T I N E =======================================
.text:00403D64
.text:00403D64
.text:00403D64 ; int __cdecl __cxa_get_globals_fast(int, int, int, int, int, int, int, int, struct _Unwind_Exception *lpuexcpt, int)
.text:00403D64                 public ___cxa_get_globals_fast
.text:00403D64 ___cxa_get_globals_fast proc near       ; CODE XREF: ___cxa_call_unexpected+B5↑p
.text:00403D64                                         ; ___cxa_end_catch+4↑p
.text:00403D64
.text:00403D64 lpfctx          = dword ptr -5Ch
.text:00403D64 var_44          = dword ptr -44h
.text:00403D64 fctx            = SjLj_Function_Context ptr -40h
.text:00403D64 var_1C          = dword ptr -1Ch
.text:00403D64 var_18          = dword ptr -18h
.text:00403D64 var_C           = byte ptr -0Ch
.text:00403D64 arg_1C          = dword ptr  20h
.text:00403D64 lpuexcpt        = dword ptr  24h
.text:00403D64 arg_24          = dword ptr  28h
.text:00403D64
.text:00403D64                 push    ebp
.text:00403D65                 sub     esp, 58h
.text:00403D68                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00403D70                 mov     [esp+5Ch+fctx.lsda], offset dword_412328
.text:00403D78                 lea     eax, [esp+5Ch+var_C]
.text:00403D7C                 mov     [esp+5Ch+fctx.jbuf], eax
.text:00403D80                 mov     [esp+5Ch+var_1C], offset loc_403E2F
.text:00403D88                 mov     [esp+5Ch+var_18], esp
.text:00403D8C                 lea     eax, [esp+5Ch+fctx]
.text:00403D90                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:00403D93                 call    __Unwind_SjLj_Register
.text:00403D98 ; __unwind { // ___gxx_personality_sj0
.text:00403D98                 mov     eax, ds:___shmem_ptr_init
.text:00403D9D                 test    eax, eax
.text:00403D9F                 jz      short loc_403E18
.text:00403DA1
.text:00403DA1 loc_403DA1:                             ; CODE XREF: ___cxa_get_globals_fast+C6↓j
.text:00403DA1                 cmp     byte ptr [eax+4], 0
.text:00403DA5                 jz      short loc_403DDC
.text:00403DA7                 mov     eax, ds:___shmem_ptr_init
.text:00403DAC                 test    eax, eax
.text:00403DAE                 jz      short loc_403E04
.text:00403DB0
.text:00403DB0 loc_403DB0:                             ; CODE XREF: ___cxa_get_globals_fast+B2↓j
.text:00403DB0                 mov     eax, [eax]
.text:00403DB2                 mov     [esp+5Ch+lpfctx], eax ; key
.text:00403DB5                 mov     [esp+5Ch+fctx.call_site], 1
.text:00403DBD                 call    ___gthr_win32_getspecific
.text:00403DC2                 mov     [esp+5Ch+var_44], eax
.text:00403DC6
.text:00403DC6 loc_403DC6:                             ; CODE XREF: ___cxa_get_globals_fast+83↓j
.text:00403DC6                                         ; ___cxa_get_globals_fast+9B↓j
.text:00403DC6                 lea     eax, [esp+5Ch+fctx]
.text:00403DCA                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:00403DCD                 call    __Unwind_SjLj_Unregister
.text:00403DD2                 mov     eax, [esp+5Ch+var_44]
.text:00403DD6                 add     esp, 58h
.text:00403DD9                 pop     ebp
.text:00403DDA                 retn
.text:00403DDA ; ---------------------------------------------------------------------------
.text:00403DDB                 align 4
.text:00403DDC
.text:00403DDC loc_403DDC:                             ; CODE XREF: ___cxa_get_globals_fast+41↑j
.text:00403DDC                 mov     eax, ds:___shmem_ptr_eh_globals
.text:00403DE1                 mov     [esp+5Ch+var_44], eax
.text:00403DE5                 test    eax, eax
.text:00403DE7                 jnz     short loc_403DC6
.text:00403DE9                 mov     [esp+5Ch+fctx.call_site], 1
.text:00403DF1                 call    __Z26__shmem_grabber_eh_globalsv ; __shmem_grabber_eh_globals(void)
.text:00403DF6                 mov     [esp+5Ch+var_44], eax
.text:00403DFA                 mov     ds:___shmem_ptr_eh_globals, eax
.text:00403DFF                 jmp     short loc_403DC6
.text:00403DFF ; ---------------------------------------------------------------------------
.text:00403E01                 align 4
.text:00403E04
.text:00403E04 loc_403E04:                             ; CODE XREF: ___cxa_get_globals_fast+4A↑j
.text:00403E04                 mov     [esp+5Ch+fctx.call_site], 1
.text:00403E0C                 call    __Z20__shmem_grabber_initv ; __shmem_grabber_init(void)
.text:00403E11                 mov     ds:___shmem_ptr_init, eax
.text:00403E16                 jmp     short loc_403DB0
.text:00403E18 ; ---------------------------------------------------------------------------
.text:00403E18
.text:00403E18 loc_403E18:                             ; CODE XREF: ___cxa_get_globals_fast+3B↑j
.text:00403E18                 mov     [esp+5Ch+fctx.call_site], 1
.text:00403E20                 call    __Z20__shmem_grabber_initv ; __shmem_grabber_init(void)
.text:00403E25                 mov     ds:___shmem_ptr_init, eax
.text:00403E2A                 jmp     loc_403DA1
.text:00403E2F ; ---------------------------------------------------------------------------
.text:00403E2F
.text:00403E2F loc_403E2F:                             ; DATA XREF: ___cxa_get_globals_fast+1C↑o
.text:00403E2F                 mov     eax, [esp+lpuexcpt]
.text:00403E33                 cmp     [esp+arg_24], 0FFFFFFFFh
.text:00403E38                 mov     [esp+0], eax    ; void *
.text:00403E3B                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00403E43                 jz      short loc_403E4A
.text:00403E45                 call    __Unwind_SjLj_Resume
.text:00403E4A ; ---------------------------------------------------------------------------
.text:00403E4A
.text:00403E4A loc_403E4A:                             ; CODE XREF: ___cxa_get_globals_fast+DF↑j
.text:00403E4A                 call    ___cxa_call_unexpected
.text:00403E4A ; } // starts at 403D98
.text:00403E4A ___cxa_get_globals_fast endp
.text:00403E4A
.text:00403E4A ; ---------------------------------------------------------------------------
.text:00403E4F                 align 10h
.text:00403E50
.text:00403E50 ; =============== S U B R O U T I N E =======================================
.text:00403E50
.text:00403E50
.text:00403E50                 public ___cxa_get_globals
.text:00403E50 ___cxa_get_globals proc near            ; CODE XREF: ___cxa_begin_catch+7↑p
.text:00403E50                                         ; std::uncaught_exception(void)+3↑p ...
.text:00403E50
.text:00403E50 lpfctx          = dword ptr -5Ch
.text:00403E50 ptr             = dword ptr -58h
.text:00403E50 var_44          = dword ptr -44h
.text:00403E50 fctx            = SjLj_Function_Context ptr -40h
.text:00403E50 var_1C          = dword ptr -1Ch
.text:00403E50 var_18          = dword ptr -18h
.text:00403E50 var_C           = byte ptr -0Ch
.text:00403E50 arg_1C          = dword ptr  20h
.text:00403E50 lpuexcpt        = dword ptr  24h
.text:00403E50 arg_24          = dword ptr  28h
.text:00403E50
.text:00403E50                 push    ebp
.text:00403E51                 sub     esp, 58h
.text:00403E54                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00403E5C                 mov     [esp+5Ch+fctx.lsda], offset dword_412338
.text:00403E64                 lea     eax, [esp+5Ch+var_C]
.text:00403E68                 mov     [esp+5Ch+fctx.jbuf], eax
.text:00403E6C                 mov     [esp+5Ch+var_1C], offset loc_403F89
.text:00403E74                 mov     [esp+5Ch+var_18], esp
.text:00403E78                 lea     edx, [esp+5Ch+fctx]
.text:00403E7C                 mov     [esp+5Ch+lpfctx], edx ; lpfctx
.text:00403E7F                 call    __Unwind_SjLj_Register
.text:00403E84 ; __unwind { // ___gxx_personality_sj0
.text:00403E84                 mov     eax, ds:___shmem_ptr_init
.text:00403E89                 test    eax, eax
.text:00403E8B                 jz      loc_403F60
.text:00403E91
.text:00403E91 loc_403E91:                             ; CODE XREF: ___cxa_get_globals+122↓j
.text:00403E91                 cmp     byte ptr [eax+4], 0
.text:00403E95                 jz      short loc_403ED0
.text:00403E97                 mov     eax, ds:___shmem_ptr_init
.text:00403E9C                 test    eax, eax
.text:00403E9E                 jz      short loc_403EF8
.text:00403EA0
.text:00403EA0 loc_403EA0:                             ; CODE XREF: ___cxa_get_globals+BA↓j
.text:00403EA0                 mov     eax, [eax]
.text:00403EA2                 mov     [esp+5Ch+lpfctx], eax ; key
.text:00403EA5                 mov     [esp+5Ch+fctx.call_site], 1
.text:00403EAD                 call    ___gthr_win32_getspecific
.text:00403EB2                 mov     [esp+5Ch+var_44], eax
.text:00403EB6                 test    eax, eax
.text:00403EB8                 jz      short loc_403F0C
.text:00403EBA
.text:00403EBA loc_403EBA:                             ; CODE XREF: ___cxa_get_globals+8B↓j
.text:00403EBA                                         ; ___cxa_get_globals+A3↓j ...
.text:00403EBA                 lea     edx, [esp+5Ch+fctx]
.text:00403EBE                 mov     [esp+5Ch+lpfctx], edx ; lpfctx
.text:00403EC1                 call    __Unwind_SjLj_Unregister
.text:00403EC6                 mov     eax, [esp+5Ch+var_44]
.text:00403ECA                 add     esp, 58h
.text:00403ECD                 pop     ebp
.text:00403ECE                 retn
.text:00403ECE ; ---------------------------------------------------------------------------
.text:00403ECF                 align 10h
.text:00403ED0
.text:00403ED0 loc_403ED0:                             ; CODE XREF: ___cxa_get_globals+45↑j
.text:00403ED0                 mov     eax, ds:___shmem_ptr_eh_globals
.text:00403ED5                 mov     [esp+5Ch+var_44], eax
.text:00403ED9                 test    eax, eax
.text:00403EDB                 jnz     short loc_403EBA
.text:00403EDD                 mov     [esp+5Ch+fctx.call_site], 1
.text:00403EE5                 call    __Z26__shmem_grabber_eh_globalsv ; __shmem_grabber_eh_globals(void)
.text:00403EEA                 mov     [esp+5Ch+var_44], eax
.text:00403EEE                 mov     ds:___shmem_ptr_eh_globals, eax
.text:00403EF3                 jmp     short loc_403EBA
.text:00403EF3 ; ---------------------------------------------------------------------------
.text:00403EF5                 align 4
.text:00403EF8
.text:00403EF8 loc_403EF8:                             ; CODE XREF: ___cxa_get_globals+4E↑j
.text:00403EF8                 mov     [esp+5Ch+fctx.call_site], 1
.text:00403F00                 call    __Z20__shmem_grabber_initv ; __shmem_grabber_init(void)
.text:00403F05                 mov     ds:___shmem_ptr_init, eax
.text:00403F0A                 jmp     short loc_403EA0
.text:00403F0C ; ---------------------------------------------------------------------------
.text:00403F0C
.text:00403F0C loc_403F0C:                             ; CODE XREF: ___cxa_get_globals+68↑j
.text:00403F0C                 mov     [esp+5Ch+lpfctx], 8 ; size_t
.text:00403F13                 call    _malloc
.text:00403F18                 mov     [esp+5Ch+var_44], eax
.text:00403F1C                 test    eax, eax
.text:00403F1E                 jz      short loc_403F78
.text:00403F20                 mov     eax, ds:___shmem_ptr_init
.text:00403F25                 test    eax, eax
.text:00403F27                 jz      short loc_403F7D
.text:00403F29
.text:00403F29 loc_403F29:                             ; CODE XREF: ___cxa_get_globals+137↓j
.text:00403F29                 mov     edx, [esp+5Ch+var_44]
.text:00403F2D                 mov     [esp+5Ch+ptr], edx ; ptr
.text:00403F31                 mov     eax, [eax]
.text:00403F33                 mov     [esp+5Ch+lpfctx], eax ; key
.text:00403F36                 mov     [esp+5Ch+fctx.call_site], 1
.text:00403F3E                 call    ___gthr_win32_setspecific
.text:00403F43                 test    eax, eax
.text:00403F45                 jnz     short loc_403F78
.text:00403F47                 mov     eax, [esp+5Ch+var_44]
.text:00403F4B                 mov     dword ptr [eax], 0
.text:00403F51                 mov     dword ptr [eax+4], 0
.text:00403F58                 jmp     loc_403EBA
.text:00403F58 ; ---------------------------------------------------------------------------
.text:00403F5D                 align 10h
.text:00403F60
.text:00403F60 loc_403F60:                             ; CODE XREF: ___cxa_get_globals+3B↑j
.text:00403F60                 mov     [esp+5Ch+fctx.call_site], 1
.text:00403F68                 call    __Z20__shmem_grabber_initv ; __shmem_grabber_init(void)
.text:00403F6D                 mov     ds:___shmem_ptr_init, eax
.text:00403F72                 jmp     loc_403E91
.text:00403F72 ; ---------------------------------------------------------------------------
.text:00403F77                 align 4
.text:00403F78
.text:00403F78 loc_403F78:                             ; CODE XREF: ___cxa_get_globals+CE↑j
.text:00403F78                                         ; ___cxa_get_globals+F5↑j
.text:00403F78                 call    __ZSt9terminatev ; std::terminate(void)
.text:00403F7D ; ---------------------------------------------------------------------------
.text:00403F7D
.text:00403F7D loc_403F7D:                             ; CODE XREF: ___cxa_get_globals+D7↑j
.text:00403F7D                 call    __Z20__shmem_grabber_initv ; __shmem_grabber_init(void)
.text:00403F82                 mov     ds:___shmem_ptr_init, eax
.text:00403F87                 jmp     short loc_403F29
.text:00403F89 ; ---------------------------------------------------------------------------
.text:00403F89
.text:00403F89 loc_403F89:                             ; DATA XREF: ___cxa_get_globals+1C↑o
.text:00403F89                 mov     eax, [esp+lpuexcpt]
.text:00403F8D                 cmp     [esp+arg_24], 0FFFFFFFFh
.text:00403F92                 mov     [esp+0], eax    ; void *
.text:00403F95                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00403F9D                 jz      short loc_403FA4
.text:00403F9F                 call    __Unwind_SjLj_Resume
.text:00403FA4 ; ---------------------------------------------------------------------------
.text:00403FA4
.text:00403FA4 loc_403FA4:                             ; CODE XREF: ___cxa_get_globals+14D↑j
.text:00403FA4                 call    ___cxa_call_unexpected
.text:00403FA4 ; } // starts at 403E84
.text:00403FA4 ___cxa_get_globals endp
.text:00403FA4
.text:00403FA4 ; ---------------------------------------------------------------------------
.text:00403FA9                 align 4
.text:00403FAC
.text:00403FAC ; =============== S U B R O U T I N E =======================================
.text:00403FAC
.text:00403FAC
.text:00403FAC ; _DWORD __cdecl __gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception *)
.text:00403FAC __ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception proc near
.text:00403FAC                                         ; DATA XREF: ___cxa_throw+47↓o
.text:00403FAC
.text:00403FAC var_1C          = dword ptr -1Ch
.text:00403FAC arg_0           = dword ptr  4
.text:00403FAC arg_4           = dword ptr  8
.text:00403FAC
.text:00403FAC                 push    ebx
.text:00403FAD                 sub     esp, 18h
.text:00403FB0                 mov     ecx, [esp+1Ch+arg_4]
.text:00403FB4                 cmp     [esp+1Ch+arg_0], 1
.text:00403FB9                 ja      short loc_403FD6
.text:00403FBB                 mov     eax, [ecx-2Ch]
.text:00403FBE                 lea     ebx, [ecx+20h]
.text:00403FC1                 test    eax, eax
.text:00403FC3                 jz      short loc_403FC9
.text:00403FC5                 mov     ecx, ebx
.text:00403FC7                 call    eax
.text:00403FC9
.text:00403FC9 loc_403FC9:                             ; CODE XREF: __gxx_exception_cleanup(_Unwind_Reason_Code,_Unwind_Exception *)+17↑j
.text:00403FC9                 mov     [esp+1Ch+arg_0], ebx ; void *
.text:00403FCD                 add     esp, 18h
.text:00403FD0                 pop     ebx
.text:00403FD1                 jmp     ___cxa_free_exception
.text:00403FD6 ; ---------------------------------------------------------------------------
.text:00403FD6
.text:00403FD6 loc_403FD6:                             ; CODE XREF: __gxx_exception_cleanup(_Unwind_Reason_Code,_Unwind_Exception *)+D↑j
.text:00403FD6                 mov     eax, [ecx-24h]
.text:00403FD9                 mov     [esp+1Ch+var_1C], eax ; void (*)(void)
.text:00403FDC                 call    __ZN10__cxxabiv111__terminateEPFvvE ; __cxxabiv1::__terminate(void (*)(void))
.text:00403FDC __ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception endp
.text:00403FDC
.text:00403FDC ; ---------------------------------------------------------------------------
.text:00403FE1                 align 4
.text:00403FE4
.text:00403FE4 ; =============== S U B R O U T I N E =======================================
.text:00403FE4
.text:00403FE4 ; Attributes: noreturn
.text:00403FE4
.text:00403FE4 ; void __cdecl __noreturn __cxa_throw(void *, struct type_info *lptinfo, void (__cdecl *)(void *))
.text:00403FE4                 public ___cxa_throw
.text:00403FE4 ___cxa_throw    proc near               ; CODE XREF: ___cxa_call_unexpected+178↑p
.text:00403FE4                                         ; std::__throw_bad_exception(void)+28↑p ...
.text:00403FE4
.text:00403FE4 lpuexcpt        = dword ptr -1Ch
.text:00403FE4 arg_0           = dword ptr  4
.text:00403FE4 lptinfo         = dword ptr  8
.text:00403FE4 arg_8           = dword ptr  0Ch
.text:00403FE4
.text:00403FE4                 push    ebx
.text:00403FE5                 sub     esp, 18h
.text:00403FE8                 mov     ebx, [esp+1Ch+arg_0]
.text:00403FEC                 mov     dword ptr [ebx-60h], 1
.text:00403FF3                 mov     eax, [esp+1Ch+lptinfo]
.text:00403FF7                 mov     [ebx-50h], eax
.text:00403FFA                 mov     eax, [esp+1Ch+arg_8]
.text:00403FFE                 mov     [ebx-4Ch], eax
.text:00404001                 mov     eax, ds:__ZN10__cxxabiv135__shmem_ptr___unexpected_handler_shE ; __cxxabiv1::__shmem_ptr___unexpected_handler_sh
.text:00404006                 test    eax, eax
.text:00404008                 jz      short loc_40404A
.text:0040400A
.text:0040400A loc_40400A:                             ; CODE XREF: ___cxa_throw+70↓j
.text:0040400A                 mov     eax, [eax]
.text:0040400C                 mov     [ebx-48h], eax
.text:0040400F                 mov     eax, ds:__ZN10__cxxabiv134__shmem_ptr___terminate_handler_shE ; __cxxabiv1::__shmem_ptr___terminate_handler_sh
.text:00404014                 test    eax, eax
.text:00404016                 jz      short loc_404056
.text:00404018
.text:00404018 loc_404018:                             ; CODE XREF: ___cxa_throw+7C↓j
.text:00404018                 mov     eax, [eax]
.text:0040401A                 mov     [ebx-44h], eax
.text:0040401D                 mov     dword ptr [ebx-20h], 432B2B00h
.text:00404024                 mov     dword ptr [ebx-1Ch], 474E5543h
.text:0040402B                 mov     dword ptr [ebx-18h], offset __ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception ; __gxx_exception_cleanup(_Unwind_Reason_Code,_Unwind_Exception *)
.text:00404032                 sub     ebx, 20h ; ' '
.text:00404035                 mov     [esp+1Ch+lpuexcpt], ebx ; lpuexcpt
.text:00404038                 call    __Unwind_SjLj_RaiseException
.text:0040403D                 mov     [esp+1Ch+lpuexcpt], ebx ; void *
.text:00404040                 call    ___cxa_begin_catch
.text:00404045                 call    __ZSt9terminatev ; std::terminate(void)
.text:0040404A ; ---------------------------------------------------------------------------
.text:0040404A
.text:0040404A loc_40404A:                             ; CODE XREF: ___cxa_throw+24↑j
.text:0040404A                 call    __ZN10__cxxabiv139__shmem_grabber___unexpected_handler_shEv ; __cxxabiv1::__shmem_grabber___unexpected_handler_sh(void)
.text:0040404F                 mov     ds:__ZN10__cxxabiv135__shmem_ptr___unexpected_handler_shE, eax ; __cxxabiv1::__shmem_ptr___unexpected_handler_sh
.text:00404054                 jmp     short loc_40400A
.text:00404056 ; ---------------------------------------------------------------------------
.text:00404056
.text:00404056 loc_404056:                             ; CODE XREF: ___cxa_throw+32↑j
.text:00404056                 call    __ZN10__cxxabiv138__shmem_grabber___terminate_handler_shEv ; __cxxabiv1::__shmem_grabber___terminate_handler_sh(void)
.text:0040405B                 mov     ds:__ZN10__cxxabiv134__shmem_ptr___terminate_handler_shE, eax ; __cxxabiv1::__shmem_ptr___terminate_handler_sh
.text:00404060                 jmp     short loc_404018
.text:00404060 ___cxa_throw    endp
.text:00404060
.text:00404060 ; ---------------------------------------------------------------------------
.text:00404062                 align 4
.text:00404064
.text:00404064 ; =============== S U B R O U T I N E =======================================
.text:00404064
.text:00404064 ; Attributes: noreturn
.text:00404064
.text:00404064 ; void __noreturn __cxa_rethrow(void)
.text:00404064                 public ___cxa_rethrow
.text:00404064 ___cxa_rethrow  proc near               ; CODE XREF: ___cxa_call_unexpected+105↑p
.text:00404064                                         ; __gnu_cxx::__verbose_terminate_handler(void)+11F↓p
.text:00404064
.text:00404064 lpuexcpt        = dword ptr -1Ch
.text:00404064
.text:00404064                 push    ebx
.text:00404065                 sub     esp, 18h
.text:00404068                 call    ___cxa_get_globals
.text:0040406D                 mov     edx, [eax]
.text:0040406F                 inc     dword ptr [eax+4]
.text:00404072                 test    edx, edx
.text:00404074                 jz      short loc_4040A6
.text:00404076                 mov     ecx, [edx+30h]
.text:00404079                 mov     ebx, [edx+34h]
.text:0040407C                 add     ecx, 0BCD4D500h
.text:00404082                 adc     ebx, 0B8B1AABCh
.text:00404088                 cmp     ebx, 0
.text:0040408B                 jbe     short loc_4040AB
.text:0040408D
.text:0040408D loc_40408D:                             ; CODE XREF: ___cxa_rethrow+4A↓j
.text:0040408D                 mov     dword ptr [eax], 0
.text:00404093
.text:00404093 loc_404093:                             ; CODE XREF: ___cxa_rethrow+4F↓j
.text:00404093                 lea     ebx, [edx+30h]
.text:00404096                 mov     [esp+1Ch+lpuexcpt], ebx ; lpuexcpt
.text:00404099                 call    __Unwind_SjLj_Resume_or_Rethrow
.text:00404099 ; ---------------------------------------------------------------------------
.text:0040409E                 db  89h
.text:0040409F                 db  1Ch
.text:004040A0                 db  24h ; $
.text:004040A1                 db 0E8h
.text:004040A2                 db 0DAh
.text:004040A3                 db 0FAh
.text:004040A4                 db 0FFh
.text:004040A5                 db 0FFh
.text:004040A6 ; ---------------------------------------------------------------------------
.text:004040A6
.text:004040A6 loc_4040A6:                             ; CODE XREF: ___cxa_rethrow+10↑j
.text:004040A6                 call    __ZSt9terminatev ; std::terminate(void)
.text:004040AB ; ---------------------------------------------------------------------------
.text:004040AB
.text:004040AB loc_4040AB:                             ; CODE XREF: ___cxa_rethrow+27↑j
.text:004040AB                 cmp     ecx, 1
.text:004040AE                 ja      short loc_40408D
.text:004040B0                 neg     dword ptr [edx+14h]
.text:004040B3                 jmp     short loc_404093
.text:004040B3 ___cxa_rethrow  endp
.text:004040B3
.text:004040B3 ; ---------------------------------------------------------------------------
.text:004040B5                 align 4
.text:004040B8
.text:004040B8 ; =============== S U B R O U T I N E =======================================
.text:004040B8
.text:004040B8
.text:004040B8 ; void __cdecl __tcf_0()
.text:004040B8 ___tcf_0        proc near               ; DATA XREF: __GLOBAL__sub_I___cxa_allocate_exception:loc_412175↓o
.text:004040B8
.text:004040B8 mutex           = dword ptr -1Ch
.text:004040B8
.text:004040B8                 mov     eax, ds:__CRT_MT
.text:004040BD                 test    eax, eax
.text:004040BF                 jnz     short loc_4040C4
.text:004040C1                 retn
.text:004040C1 ; ---------------------------------------------------------------------------
.text:004040C2                 align 4
.text:004040C4
.text:004040C4 loc_4040C4:                             ; CODE XREF: ___tcf_0+7↑j
.text:004040C4                 sub     esp, 1Ch
.text:004040C7                 mov     [esp+1Ch+mutex], offset __ZN12_GLOBAL__N_115emergency_mutexE ; mutex
.text:004040CE                 call    ___gthr_win32_mutex_destroy
.text:004040D3                 add     esp, 1Ch
.text:004040D6                 retn
.text:004040D6 ___tcf_0        endp
.text:004040D6
.text:004040D6 ; ---------------------------------------------------------------------------
.text:004040D7                 align 4
.text:004040D8
.text:004040D8 ; =============== S U B R O U T I N E =======================================
.text:004040D8
.text:004040D8
.text:004040D8 ; void *__cdecl __cxa_allocate_exception(size_t thrown_size)
.text:004040D8                 public ___cxa_allocate_exception
.text:004040D8 ___cxa_allocate_exception proc near     ; CODE XREF: ___cxa_call_unexpected+15A↑p
.text:004040D8                                         ; std::__throw_bad_exception(void)+A↑p ...
.text:004040D8
.text:004040D8 lpfctx          = dword ptr -5Ch
.text:004040D8 lptinfo         = dword ptr -58h
.text:004040D8 var_54          = dword ptr -54h
.text:004040D8 var_48          = dword ptr -48h
.text:004040D8 var_44          = dword ptr -44h
.text:004040D8 fctx            = SjLj_Function_Context ptr -40h
.text:004040D8 var_1C          = dword ptr -1Ch
.text:004040D8 var_18          = dword ptr -18h
.text:004040D8 var_C           = byte ptr -0Ch
.text:004040D8 thrown_size     = dword ptr  4
.text:004040D8 arg_1C          = dword ptr  20h
.text:004040D8 lpuexcpt        = dword ptr  24h
.text:004040D8 arg_24          = dword ptr  28h
.text:004040D8
.text:004040D8                 push    ebp
.text:004040D9                 push    edi
.text:004040DA                 sub     esp, 54h
.text:004040DD                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:004040E5                 mov     [esp+5Ch+fctx.lsda], offset dword_412348
.text:004040ED                 lea     eax, [esp+5Ch+var_C]
.text:004040F1                 mov     [esp+5Ch+fctx.jbuf], eax
.text:004040F5                 mov     [esp+5Ch+var_1C], offset loc_40422D
.text:004040FD                 mov     [esp+5Ch+var_18], esp
.text:00404101                 lea     eax, [esp+5Ch+fctx]
.text:00404105                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:00404108                 call    __Unwind_SjLj_Register
.text:0040410D ; __unwind { // ___gxx_personality_sj0
.text:0040410D                 mov     eax, [esp+5Ch+thrown_size]
.text:00404111                 add     eax, 60h ; '`'
.text:00404114                 mov     [esp+5Ch+var_44], eax
.text:00404118                 mov     [esp+5Ch+lpfctx], eax ; size_t
.text:0040411B                 call    _malloc
.text:00404120                 mov     [esp+5Ch+var_48], eax
.text:00404124                 test    eax, eax
.text:00404126                 jz      short loc_404160
.text:00404128
.text:00404128 loc_404128:                             ; CODE XREF: ___cxa_allocate_exception+DF↓j
.text:00404128                                         ; ___cxa_allocate_exception+FB↓j
.text:00404128                 call    ___cxa_get_globals
.text:0040412D                 inc     dword ptr [eax+4]
.text:00404130                 mov     ecx, 60h ; '`'
.text:00404135                 xor     eax, eax
.text:00404137                 mov     edi, [esp+5Ch+var_48]
.text:0040413B                 rep stosb
.text:0040413D                 mov     eax, [esp+5Ch+var_48]
.text:00404141                 add     eax, 60h ; '`'
.text:00404144                 mov     [esp+5Ch+var_48], eax
.text:00404148                 lea     eax, [esp+5Ch+fctx]
.text:0040414C                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:0040414F                 call    __Unwind_SjLj_Unregister
.text:00404154                 mov     eax, [esp+5Ch+var_48]
.text:00404158                 add     esp, 54h
.text:0040415B                 pop     edi
.text:0040415C                 pop     ebp
.text:0040415D                 retn
.text:0040415D ; ---------------------------------------------------------------------------
.text:0040415E                 align 10h
.text:00404160
.text:00404160 loc_404160:                             ; CODE XREF: ___cxa_allocate_exception+4E↑j
.text:00404160                 mov     ecx, ds:__CRT_MT
.text:00404166                 test    ecx, ecx
.text:00404168                 jnz     loc_40420C
.text:0040416E
.text:0040416E loc_40416E:                             ; CODE XREF: ___cxa_allocate_exception+14A↓j
.text:0040416E                 mov     edx, ds:__ZL14emergency_used ; emergency_used
.text:00404174                 cmp     [esp+5Ch+var_44], 200h
.text:0040417C                 ja      loc_404204
.text:00404182                 mov     eax, edx
.text:00404184                 xor     ecx, ecx
.text:00404186                 jmp     short loc_404190
.text:00404188 ; ---------------------------------------------------------------------------
.text:00404188
.text:00404188 loc_404188:                             ; CODE XREF: ___cxa_allocate_exception+BA↓j
.text:00404188                 shr     eax, 1
.text:0040418A                 inc     ecx
.text:0040418B                 cmp     ecx, 20h ; ' '
.text:0040418E                 jz      short loc_404204
.text:00404190
.text:00404190 loc_404190:                             ; CODE XREF: ___cxa_allocate_exception+AE↑j
.text:00404190                 test    al, 1
.text:00404192                 jnz     short loc_404188
.text:00404194                 mov     eax, 1
.text:00404199                 shl     eax, cl
.text:0040419B                 or      eax, edx
.text:0040419D                 mov     ds:__ZL14emergency_used, eax ; emergency_used
.text:004041A2                 shl     ecx, 9
.text:004041A5                 add     ecx, offset __ZL16emergency_buffer ; emergency_buffer
.text:004041AB                 mov     [esp+5Ch+var_48], ecx
.text:004041AF                 mov     edx, ds:__CRT_MT
.text:004041B5                 test    edx, edx
.text:004041B7                 jz      loc_404128
.text:004041BD                 mov     [esp+5Ch+lpfctx], offset __ZN12_GLOBAL__N_115emergency_mutexE ; mutex
.text:004041C4                 mov     [esp+5Ch+fctx.call_site], 2
.text:004041CC                 call    ___gthr_win32_mutex_unlock
.text:004041D1                 test    eax, eax
.text:004041D3                 jz      loc_404128
.text:004041D9                 mov     [esp+5Ch+lpfctx], 4 ; thrown_size
.text:004041E0                 call    ___cxa_allocate_exception
.text:004041E5                 mov     dword ptr [eax], offset off_416358
.text:004041EB                 mov     [esp+5Ch+var_54], offset __ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev ; void (__cdecl *)(void *)
.text:004041F3                 mov     [esp+5Ch+lptinfo], offset __ZTIN9__gnu_cxx26__concurrence_unlock_errorE ; lptinfo
.text:004041FB                 mov     [esp+5Ch+lpfctx], eax ; void *
.text:004041FE                 call    ___cxa_throw
.text:004041FE ; ---------------------------------------------------------------------------
.text:00404203                 align 4
.text:00404204
.text:00404204 loc_404204:                             ; CODE XREF: ___cxa_allocate_exception+A4↑j
.text:00404204                                         ; ___cxa_allocate_exception+B6↑j
.text:00404204                 call    __ZSt9terminatev ; std::terminate(void)
.text:00404204 ; ---------------------------------------------------------------------------
.text:00404209                 align 4
.text:0040420C
.text:0040420C loc_40420C:                             ; CODE XREF: ___cxa_allocate_exception+90↑j
.text:0040420C                 mov     [esp+5Ch+lpfctx], offset __ZN12_GLOBAL__N_115emergency_mutexE ; mutex
.text:00404213                 mov     [esp+5Ch+fctx.call_site], 1
.text:0040421B                 call    ___gthr_win32_mutex_lock
.text:00404220                 test    eax, eax
.text:00404222                 jz      loc_40416E
.text:00404228                 call    __ZN9__gnu_cxx30__throw_concurrence_lock_errorEv ; __gnu_cxx::__throw_concurrence_lock_error(void)
.text:0040422D ; ---------------------------------------------------------------------------
.text:0040422D
.text:0040422D loc_40422D:                             ; DATA XREF: ___cxa_allocate_exception+1D↑o
.text:0040422D                 mov     eax, [esp+lpuexcpt]
.text:00404231                 mov     edx, [esp+arg_24]
.text:00404235                 mov     ecx, [esp+arg_1C]
.text:00404239                 test    ecx, ecx
.text:0040423B                 jz      short loc_404242
.text:0040423D                 dec     ecx
.text:0040423E                 jz      short loc_404242
.text:00404240                 ud2
.text:00404242 ; ---------------------------------------------------------------------------
.text:00404242
.text:00404242 loc_404242:                             ; CODE XREF: ___cxa_allocate_exception+163↑j
.text:00404242                                         ; ___cxa_allocate_exception+166↑j
.text:00404242                 mov     [esp+0], eax    ; void *
.text:00404245                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:0040424D                 inc     edx
.text:0040424E                 jz      short loc_404255
.text:00404250                 call    __Unwind_SjLj_Resume
.text:00404255 ; ---------------------------------------------------------------------------
.text:00404255
.text:00404255 loc_404255:                             ; CODE XREF: ___cxa_allocate_exception+176↑j
.text:00404255                 call    ___cxa_call_unexpected
.text:00404255 ; } // starts at 40410D
.text:00404255 ___cxa_allocate_exception endp
.text:00404255
.text:00404255 ; ---------------------------------------------------------------------------
.text:0040425A                 align 4
.text:0040425C
.text:0040425C ; =============== S U B R O U T I N E =======================================
.text:0040425C
.text:0040425C
.text:0040425C ; void __cdecl __cxa_free_exception(void *)
.text:0040425C                 public ___cxa_free_exception
.text:0040425C ___cxa_free_exception proc near         ; CODE XREF: std::__throw_logic_error(char const*)+D2↑p
.text:0040425C                                         ; std::__throw_domain_error(char const*)+D2↑p ...
.text:0040425C
.text:0040425C lpfctx          = dword ptr -5Ch
.text:0040425C lptinfo         = dword ptr -58h
.text:0040425C var_54          = dword ptr -54h
.text:0040425C var_44          = dword ptr -44h
.text:0040425C fctx            = SjLj_Function_Context ptr -40h
.text:0040425C var_1C          = dword ptr -1Ch
.text:0040425C var_18          = dword ptr -18h
.text:0040425C var_C           = byte ptr -0Ch
.text:0040425C arg_0           = dword ptr  4
.text:0040425C arg_1C          = dword ptr  20h
.text:0040425C lpuexcpt        = dword ptr  24h
.text:0040425C arg_24          = dword ptr  28h
.text:0040425C
.text:0040425C                 push    ebp
.text:0040425D                 sub     esp, 58h
.text:00404260                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00404268                 mov     [esp+5Ch+fctx.lsda], offset dword_412358
.text:00404270                 lea     eax, [esp+5Ch+var_C]
.text:00404274                 mov     [esp+5Ch+fctx.jbuf], eax
.text:00404278                 mov     [esp+5Ch+var_1C], offset loc_404364
.text:00404280                 mov     [esp+5Ch+var_18], esp
.text:00404284                 lea     ecx, [esp+5Ch+fctx]
.text:00404288                 mov     [esp+5Ch+lpfctx], ecx ; lpfctx
.text:0040428B                 call    __Unwind_SjLj_Register
.text:00404290 ; __unwind { // ___gxx_personality_sj0
.text:00404290                 mov     eax, [esp+5Ch+arg_0]
.text:00404294                 cmp     [esp+5Ch+arg_0], offset __ZL16emergency_buffer ; emergency_buffer
.text:0040429C                 jb      short loc_4042A8
.text:0040429E                 cmp     [esp+5Ch+arg_0], offset __ZL15dependents_used ; dependents_used
.text:004042A6                 jb      short loc_4042C4
.text:004042A8
.text:004042A8 loc_4042A8:                             ; CODE XREF: ___cxa_free_exception+40↑j
.text:004042A8                 sub     eax, 60h ; '`'
.text:004042AB                 mov     [esp+5Ch+lpfctx], eax ; void *
.text:004042AE                 call    _free
.text:004042B3
.text:004042B3 loc_4042B3:                             ; CODE XREF: ___cxa_free_exception+8E↓j
.text:004042B3                                         ; ___cxa_free_exception+C0↓j ...
.text:004042B3                 lea     eax, [esp+5Ch+fctx]
.text:004042B7                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:004042BA                 call    __Unwind_SjLj_Unregister
.text:004042BF                 add     esp, 58h
.text:004042C2                 pop     ebp
.text:004042C3                 retn
.text:004042C4 ; ---------------------------------------------------------------------------
.text:004042C4
.text:004042C4 loc_4042C4:                             ; CODE XREF: ___cxa_free_exception+4A↑j
.text:004042C4                 sub     eax, offset __ZL16emergency_buffer ; emergency_buffer
.text:004042C9                 shr     eax, 9
.text:004042CC                 mov     [esp+5Ch+var_44], eax
.text:004042D0                 mov     eax, ds:__CRT_MT
.text:004042D5                 test    eax, eax
.text:004042D7                 jnz     short loc_4042EC
.text:004042D9                 mov     eax, 0FFFFFFFEh
.text:004042DE                 mov     cl, byte ptr [esp+5Ch+var_44]
.text:004042E2                 rol     eax, cl
.text:004042E4                 and     ds:__ZL14emergency_used, eax ; emergency_used
.text:004042EA                 jmp     short loc_4042B3
.text:004042EC ; ---------------------------------------------------------------------------
.text:004042EC
.text:004042EC loc_4042EC:                             ; CODE XREF: ___cxa_free_exception+7B↑j
.text:004042EC                 mov     [esp+5Ch+lpfctx], offset __ZN12_GLOBAL__N_115emergency_mutexE ; mutex
.text:004042F3                 mov     [esp+5Ch+fctx.call_site], 1
.text:004042FB                 call    ___gthr_win32_mutex_lock
.text:00404300                 test    eax, eax
.text:00404302                 jnz     short loc_404379
.text:00404304                 mov     eax, 0FFFFFFFEh
.text:00404309                 mov     cl, byte ptr [esp+5Ch+var_44]
.text:0040430D                 rol     eax, cl
.text:0040430F                 and     ds:__ZL14emergency_used, eax ; emergency_used
.text:00404315                 mov     eax, ds:__CRT_MT
.text:0040431A                 test    eax, eax
.text:0040431C                 jz      short loc_4042B3
.text:0040431E                 mov     [esp+5Ch+lpfctx], offset __ZN12_GLOBAL__N_115emergency_mutexE ; mutex
.text:00404325                 mov     [esp+5Ch+fctx.call_site], 2
.text:0040432D                 call    ___gthr_win32_mutex_unlock
.text:00404332                 test    eax, eax
.text:00404334                 jz      loc_4042B3
.text:0040433A                 mov     [esp+5Ch+lpfctx], 4 ; thrown_size
.text:00404341                 call    ___cxa_allocate_exception
.text:00404346                 mov     dword ptr [eax], offset off_416358
.text:0040434C                 mov     [esp+5Ch+var_54], offset __ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev ; void (__cdecl *)(void *)
.text:00404354                 mov     [esp+5Ch+lptinfo], offset __ZTIN9__gnu_cxx26__concurrence_unlock_errorE ; lptinfo
.text:0040435C                 mov     [esp+5Ch+lpfctx], eax ; void *
.text:0040435F                 call    ___cxa_throw
.text:00404364 ; ---------------------------------------------------------------------------
.text:00404364
.text:00404364 loc_404364:                             ; DATA XREF: ___cxa_free_exception+1C↑o
.text:00404364                 mov     eax, [esp+lpuexcpt]
.text:00404368                 mov     edx, [esp+arg_24]
.text:0040436C                 mov     ecx, [esp+arg_1C]
.text:00404370                 test    ecx, ecx
.text:00404372                 jz      short loc_404386
.text:00404374                 dec     ecx
.text:00404375                 jz      short loc_404386
.text:00404377                 ud2
.text:00404379 ; ---------------------------------------------------------------------------
.text:00404379
.text:00404379 loc_404379:                             ; CODE XREF: ___cxa_free_exception+A6↑j
.text:00404379                 mov     [esp+5Ch+fctx.call_site], 1
.text:00404381                 call    __ZN9__gnu_cxx30__throw_concurrence_lock_errorEv ; __gnu_cxx::__throw_concurrence_lock_error(void)
.text:00404386 ; ---------------------------------------------------------------------------
.text:00404386
.text:00404386 loc_404386:                             ; CODE XREF: ___cxa_free_exception+116↑j
.text:00404386                                         ; ___cxa_free_exception+119↑j
.text:00404386                 mov     [esp+0], eax    ; void *
.text:00404389                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00404391                 inc     edx
.text:00404392                 jz      short loc_404399
.text:00404394                 call    __Unwind_SjLj_Resume
.text:00404399 ; ---------------------------------------------------------------------------
.text:00404399
.text:00404399 loc_404399:                             ; CODE XREF: ___cxa_free_exception+136↑j
.text:00404399                 call    ___cxa_call_unexpected
.text:00404399 ; } // starts at 404290
.text:00404399 ___cxa_free_exception endp
.text:00404399
.text:00404399 ; ---------------------------------------------------------------------------
.text:0040439E                 align 10h
.text:004043A0
.text:004043A0 ; =============== S U B R O U T I N E =======================================
.text:004043A0
.text:004043A0
.text:004043A0                 public ___cxa_allocate_dependent_exception
.text:004043A0 ___cxa_allocate_dependent_exception proc near
.text:004043A0
.text:004043A0 lpfctx          = dword ptr -5Ch
.text:004043A0 lptinfo         = dword ptr -58h
.text:004043A0 var_54          = dword ptr -54h
.text:004043A0 var_44          = dword ptr -44h
.text:004043A0 fctx            = SjLj_Function_Context ptr -40h
.text:004043A0 var_1C          = dword ptr -1Ch
.text:004043A0 var_18          = dword ptr -18h
.text:004043A0 var_C           = byte ptr -0Ch
.text:004043A0 arg_1C          = dword ptr  20h
.text:004043A0 lpuexcpt        = dword ptr  24h
.text:004043A0 arg_24          = dword ptr  28h
.text:004043A0
.text:004043A0                 push    ebp
.text:004043A1                 push    edi
.text:004043A2                 sub     esp, 54h
.text:004043A5                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:004043AD                 mov     [esp+5Ch+fctx.lsda], offset dword_412368
.text:004043B5                 lea     eax, [esp+5Ch+var_C]
.text:004043B9                 mov     [esp+5Ch+fctx.jbuf], eax
.text:004043BD                 mov     [esp+5Ch+var_1C], offset loc_4044D1
.text:004043C5                 mov     [esp+5Ch+var_18], esp
.text:004043C9                 lea     eax, [esp+5Ch+fctx]
.text:004043CD                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:004043D0                 call    __Unwind_SjLj_Register
.text:004043D5 ; __unwind { // ___gxx_personality_sj0
.text:004043D5                 mov     [esp+5Ch+lpfctx], 50h ; 'P' ; size_t
.text:004043DC                 call    _malloc
.text:004043E1                 mov     [esp+5Ch+var_44], eax
.text:004043E5                 test    eax, eax
.text:004043E7                 jz      short loc_404414
.text:004043E9
.text:004043E9 loc_4043E9:                             ; CODE XREF: ___cxa_allocate_dependent_exception+C0↓j
.text:004043E9                                         ; ___cxa_allocate_dependent_exception+D8↓j
.text:004043E9                 call    ___cxa_get_globals
.text:004043EE                 inc     dword ptr [eax+4]
.text:004043F1                 mov     ecx, 50h ; 'P'
.text:004043F6                 xor     eax, eax
.text:004043F8                 mov     edi, [esp+5Ch+var_44]
.text:004043FC                 rep stosb
.text:004043FE                 lea     eax, [esp+5Ch+fctx]
.text:00404402                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:00404405                 call    __Unwind_SjLj_Unregister
.text:0040440A                 mov     eax, [esp+5Ch+var_44]
.text:0040440E                 add     esp, 54h
.text:00404411                 pop     edi
.text:00404412                 pop     ebp
.text:00404413                 retn
.text:00404414 ; ---------------------------------------------------------------------------
.text:00404414
.text:00404414 loc_404414:                             ; CODE XREF: ___cxa_allocate_dependent_exception+47↑j
.text:00404414                 mov     eax, ds:__CRT_MT
.text:00404419                 test    eax, eax
.text:0040441B                 jnz     loc_4044B0
.text:00404421
.text:00404421 loc_404421:                             ; CODE XREF: ___cxa_allocate_dependent_exception+126↓j
.text:00404421                 mov     edx, ds:__ZL15dependents_used ; dependents_used
.text:00404427                 mov     eax, edx
.text:00404429                 xor     ecx, ecx
.text:0040442B                 jmp     short loc_404438
.text:0040442B ; ---------------------------------------------------------------------------
.text:0040442D                 align 10h
.text:00404430
.text:00404430 loc_404430:                             ; CODE XREF: ___cxa_allocate_dependent_exception+9A↓j
.text:00404430                 shr     eax, 1
.text:00404432                 inc     ecx
.text:00404433                 cmp     ecx, 20h ; ' '
.text:00404436                 jz      short loc_4044A8
.text:00404438
.text:00404438 loc_404438:                             ; CODE XREF: ___cxa_allocate_dependent_exception+8B↑j
.text:00404438                 test    al, 1
.text:0040443A                 jnz     short loc_404430
.text:0040443C                 mov     eax, 1
.text:00404441                 shl     eax, cl
.text:00404443                 or      eax, edx
.text:00404445                 mov     ds:__ZL15dependents_used, eax ; dependents_used
.text:0040444A                 lea     eax, [ecx+ecx*4]
.text:0040444D                 shl     eax, 4
.text:00404450                 add     eax, offset __ZL17dependents_buffer ; dependents_buffer
.text:00404455                 mov     [esp+5Ch+var_44], eax
.text:00404459                 mov     eax, ds:__CRT_MT
.text:0040445E                 test    eax, eax
.text:00404460                 jz      short loc_4043E9
.text:00404462                 mov     [esp+5Ch+lpfctx], offset __ZN12_GLOBAL__N_115emergency_mutexE ; mutex
.text:00404469                 mov     [esp+5Ch+fctx.call_site], 2
.text:00404471                 call    ___gthr_win32_mutex_unlock
.text:00404476                 test    eax, eax
.text:00404478                 jz      loc_4043E9
.text:0040447E                 mov     [esp+5Ch+lpfctx], 4 ; thrown_size
.text:00404485                 call    ___cxa_allocate_exception
.text:0040448A                 mov     dword ptr [eax], offset off_416358
.text:00404490                 mov     [esp+5Ch+var_54], offset __ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev ; void (__cdecl *)(void *)
.text:00404498                 mov     [esp+5Ch+lptinfo], offset __ZTIN9__gnu_cxx26__concurrence_unlock_errorE ; lptinfo
.text:004044A0                 mov     [esp+5Ch+lpfctx], eax ; void *
.text:004044A3                 call    ___cxa_throw
.text:004044A8 ; ---------------------------------------------------------------------------
.text:004044A8
.text:004044A8 loc_4044A8:                             ; CODE XREF: ___cxa_allocate_dependent_exception+96↑j
.text:004044A8                 call    __ZSt9terminatev ; std::terminate(void)
.text:004044A8 ; ---------------------------------------------------------------------------
.text:004044AD                 align 10h
.text:004044B0
.text:004044B0 loc_4044B0:                             ; CODE XREF: ___cxa_allocate_dependent_exception+7B↑j
.text:004044B0                 mov     [esp+5Ch+lpfctx], offset __ZN12_GLOBAL__N_115emergency_mutexE ; mutex
.text:004044B7                 mov     [esp+5Ch+fctx.call_site], 1
.text:004044BF                 call    ___gthr_win32_mutex_lock
.text:004044C4                 test    eax, eax
.text:004044C6                 jz      loc_404421
.text:004044CC                 call    __ZN9__gnu_cxx30__throw_concurrence_lock_errorEv ; __gnu_cxx::__throw_concurrence_lock_error(void)
.text:004044D1 ; ---------------------------------------------------------------------------
.text:004044D1
.text:004044D1 loc_4044D1:                             ; DATA XREF: ___cxa_allocate_dependent_exception+1D↑o
.text:004044D1                 mov     eax, [esp+lpuexcpt]
.text:004044D5                 mov     edx, [esp+arg_24]
.text:004044D9                 mov     ecx, [esp+arg_1C]
.text:004044DD                 test    ecx, ecx
.text:004044DF                 jz      short loc_4044E6
.text:004044E1                 dec     ecx
.text:004044E2                 jz      short loc_4044E6
.text:004044E4                 ud2
.text:004044E6 ; ---------------------------------------------------------------------------
.text:004044E6
.text:004044E6 loc_4044E6:                             ; CODE XREF: ___cxa_allocate_dependent_exception+13F↑j
.text:004044E6                                         ; ___cxa_allocate_dependent_exception+142↑j
.text:004044E6                 mov     [esp+0], eax    ; void *
.text:004044E9                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:004044F1                 inc     edx
.text:004044F2                 jz      short loc_4044F9
.text:004044F4                 call    __Unwind_SjLj_Resume
.text:004044F9 ; ---------------------------------------------------------------------------
.text:004044F9
.text:004044F9 loc_4044F9:                             ; CODE XREF: ___cxa_allocate_dependent_exception+152↑j
.text:004044F9                 call    ___cxa_call_unexpected
.text:004044F9 ; } // starts at 4043D5
.text:004044F9 ___cxa_allocate_dependent_exception endp
.text:004044F9
.text:004044F9 ; ---------------------------------------------------------------------------
.text:004044FE                 align 10h
.text:00404500
.text:00404500 ; =============== S U B R O U T I N E =======================================
.text:00404500
.text:00404500
.text:00404500 ; int __cdecl __cxa_free_dependent_exception(void *)
.text:00404500                 public ___cxa_free_dependent_exception
.text:00404500 ___cxa_free_dependent_exception proc near
.text:00404500
.text:00404500 lpfctx          = dword ptr -5Ch
.text:00404500 lptinfo         = dword ptr -58h
.text:00404500 var_54          = dword ptr -54h
.text:00404500 var_44          = dword ptr -44h
.text:00404500 fctx            = SjLj_Function_Context ptr -40h
.text:00404500 var_1C          = dword ptr -1Ch
.text:00404500 var_18          = dword ptr -18h
.text:00404500 var_C           = byte ptr -0Ch
.text:00404500 arg_0           = dword ptr  4
.text:00404500 arg_1C          = dword ptr  20h
.text:00404500 lpuexcpt        = dword ptr  24h
.text:00404500 arg_24          = dword ptr  28h
.text:00404500
.text:00404500                 push    ebp
.text:00404501                 sub     esp, 58h
.text:00404504                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:0040450C                 mov     [esp+5Ch+fctx.lsda], offset dword_412378
.text:00404514                 lea     eax, [esp+5Ch+var_C]
.text:00404518                 mov     [esp+5Ch+fctx.jbuf], eax
.text:0040451C                 mov     [esp+5Ch+var_1C], offset loc_404610
.text:00404524                 mov     [esp+5Ch+var_18], esp
.text:00404528                 lea     edx, [esp+5Ch+fctx]
.text:0040452C                 mov     [esp+5Ch+lpfctx], edx ; lpfctx
.text:0040452F                 call    __Unwind_SjLj_Register
.text:00404534 ; __unwind { // ___gxx_personality_sj0
.text:00404534                 mov     eax, [esp+5Ch+arg_0]
.text:00404538                 cmp     [esp+5Ch+arg_0], offset __ZL17dependents_buffer ; dependents_buffer
.text:00404540                 jb      short loc_40454C
.text:00404542                 cmp     [esp+5Ch+arg_0], offset __ZN12_GLOBAL__N_1L24system_category_instanceE ; `anonymous namespace'::system_category_instance
.text:0040454A                 jb      short loc_404568
.text:0040454C
.text:0040454C loc_40454C:                             ; CODE XREF: ___cxa_free_dependent_exception+40↑j
.text:0040454C                 mov     [esp+5Ch+lpfctx], eax ; void *
.text:0040454F                 call    _free
.text:00404554
.text:00404554 loc_404554:                             ; CODE XREF: ___cxa_free_dependent_exception+95↓j
.text:00404554                                         ; ___cxa_free_dependent_exception+C8↓j ...
.text:00404554                 lea     eax, [esp+5Ch+fctx]
.text:00404558                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:0040455B                 call    __Unwind_SjLj_Unregister
.text:00404560                 add     esp, 58h
.text:00404563                 pop     ebp
.text:00404564                 retn
.text:00404564 ; ---------------------------------------------------------------------------
.text:00404565                 align 4
.text:00404568
.text:00404568 loc_404568:                             ; CODE XREF: ___cxa_free_dependent_exception+4A↑j
.text:00404568                 sub     eax, offset __ZL17dependents_buffer ; dependents_buffer
.text:0040456D                 mov     ecx, 0CCCCCCCDh
.text:00404572                 mul     ecx
.text:00404574                 shr     edx, 6
.text:00404577                 mov     [esp+5Ch+var_44], edx
.text:0040457B                 mov     eax, ds:__CRT_MT
.text:00404580                 test    eax, eax
.text:00404582                 jnz     short loc_404598
.text:00404584                 mov     eax, 0FFFFFFFEh
.text:00404589                 mov     cl, byte ptr [esp+5Ch+var_44]
.text:0040458D                 rol     eax, cl
.text:0040458F                 and     ds:__ZL15dependents_used, eax ; dependents_used
.text:00404595                 jmp     short loc_404554
.text:00404595 ; ---------------------------------------------------------------------------
.text:00404597                 align 4
.text:00404598
.text:00404598 loc_404598:                             ; CODE XREF: ___cxa_free_dependent_exception+82↑j
.text:00404598                 mov     [esp+5Ch+lpfctx], offset __ZN12_GLOBAL__N_115emergency_mutexE ; mutex
.text:0040459F                 mov     [esp+5Ch+fctx.call_site], 1
.text:004045A7                 call    ___gthr_win32_mutex_lock
.text:004045AC                 test    eax, eax
.text:004045AE                 jnz     short loc_404625
.text:004045B0                 mov     eax, 0FFFFFFFEh
.text:004045B5                 mov     cl, byte ptr [esp+5Ch+var_44]
.text:004045B9                 rol     eax, cl
.text:004045BB                 and     ds:__ZL15dependents_used, eax ; dependents_used
.text:004045C1                 mov     eax, ds:__CRT_MT
.text:004045C6                 test    eax, eax
.text:004045C8                 jz      short loc_404554
.text:004045CA                 mov     [esp+5Ch+lpfctx], offset __ZN12_GLOBAL__N_115emergency_mutexE ; mutex
.text:004045D1                 mov     [esp+5Ch+fctx.call_site], 2
.text:004045D9                 call    ___gthr_win32_mutex_unlock
.text:004045DE                 test    eax, eax
.text:004045E0                 jz      loc_404554
.text:004045E6                 mov     [esp+5Ch+lpfctx], 4 ; thrown_size
.text:004045ED                 call    ___cxa_allocate_exception
.text:004045F2                 mov     dword ptr [eax], offset off_416358
.text:004045F8                 mov     [esp+5Ch+var_54], offset __ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev ; void (__cdecl *)(void *)
.text:00404600                 mov     [esp+5Ch+lptinfo], offset __ZTIN9__gnu_cxx26__concurrence_unlock_errorE ; lptinfo
.text:00404608                 mov     [esp+5Ch+lpfctx], eax ; void *
.text:0040460B                 call    ___cxa_throw
.text:00404610 ; ---------------------------------------------------------------------------
.text:00404610
.text:00404610 loc_404610:                             ; DATA XREF: ___cxa_free_dependent_exception+1C↑o
.text:00404610                 mov     eax, [esp+lpuexcpt]
.text:00404614                 mov     edx, [esp+arg_24]
.text:00404618                 mov     ecx, [esp+arg_1C]
.text:0040461C                 test    ecx, ecx
.text:0040461E                 jz      short loc_404632
.text:00404620                 dec     ecx
.text:00404621                 jz      short loc_404632
.text:00404623                 ud2
.text:00404625 ; ---------------------------------------------------------------------------
.text:00404625
.text:00404625 loc_404625:                             ; CODE XREF: ___cxa_free_dependent_exception+AE↑j
.text:00404625                 mov     [esp+5Ch+fctx.call_site], 1
.text:0040462D                 call    __ZN9__gnu_cxx30__throw_concurrence_lock_errorEv ; __gnu_cxx::__throw_concurrence_lock_error(void)
.text:00404632 ; ---------------------------------------------------------------------------
.text:00404632
.text:00404632 loc_404632:                             ; CODE XREF: ___cxa_free_dependent_exception+11E↑j
.text:00404632                                         ; ___cxa_free_dependent_exception+121↑j
.text:00404632                 mov     [esp+0], eax    ; void *
.text:00404635                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:0040463D                 inc     edx
.text:0040463E                 jz      short loc_404645
.text:00404640                 call    __Unwind_SjLj_Resume
.text:00404645 ; ---------------------------------------------------------------------------
.text:00404645
.text:00404645 loc_404645:                             ; CODE XREF: ___cxa_free_dependent_exception+13E↑j
.text:00404645                 call    ___cxa_call_unexpected
.text:00404645 ; } // starts at 404534
.text:00404645 ___cxa_free_dependent_exception endp
.text:00404645
.text:00404645 ; ---------------------------------------------------------------------------
.text:0040464A                 align 4
.text:0040464C
.text:0040464C ; =============== S U B R O U T I N E =======================================
.text:0040464C
.text:0040464C
.text:0040464C ; _DWORD std::bad_alloc::what(std::bad_alloc *__hidden this)
.text:0040464C                 public __ZNKSt9bad_alloc4whatEv
.text:0040464C __ZNKSt9bad_alloc4whatEv proc near      ; DATA XREF: .rdata:00416568↓o
.text:0040464C
.text:0040464C this            = dword ptr  4
.text:0040464C
.text:0040464C                 mov     eax, offset aStdBadAlloc ; "std::bad_alloc"
.text:00404651                 retn
.text:00404651 __ZNKSt9bad_alloc4whatEv endp
.text:00404651
.text:00404651 ; ---------------------------------------------------------------------------
.text:00404652                 align 4
.text:00404654
.text:00404654 ; =============== S U B R O U T I N E =======================================
.text:00404654
.text:00404654
.text:00404654 ; void __cdecl std::bad_alloc::~bad_alloc(void *)
.text:00404654                 public __ZNSt9bad_allocD1Ev
.text:00404654 __ZNSt9bad_allocD1Ev proc near          ; CODE XREF: std::bad_alloc::~bad_alloc()+6↓p
.text:00404654                                         ; DATA XREF: std::__throw_bad_alloc(void)+15↑o ...
.text:00404654                 mov     dword ptr [ecx], offset off_416560
.text:0040465A                 jmp     __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:0040465A __ZNSt9bad_allocD1Ev endp
.text:0040465A
.text:0040465A ; ---------------------------------------------------------------------------
.text:0040465F                 align 10h
.text:00404660
.text:00404660 ; =============== S U B R O U T I N E =======================================
.text:00404660
.text:00404660
.text:00404660 ; void __cdecl std::bad_alloc::~bad_alloc(std::bad_alloc *__hidden this)
.text:00404660                 public __ZNSt9bad_allocD0Ev
.text:00404660 __ZNSt9bad_allocD0Ev proc near          ; DATA XREF: .rdata:00416564↓o
.text:00404660
.text:00404660 var_1C          = dword ptr -1Ch
.text:00404660 this            = dword ptr  4
.text:00404660
.text:00404660                 push    ebx
.text:00404661                 sub     esp, 18h
.text:00404664                 mov     ebx, ecx
.text:00404666                 call    __ZNSt9bad_allocD1Ev ; std::bad_alloc::~bad_alloc()
.text:0040466B                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:0040466E                 call    __ZdlPv         ; operator delete(void *)
.text:00404673                 add     esp, 18h
.text:00404676                 pop     ebx
.text:00404677                 retn
.text:00404677 __ZNSt9bad_allocD0Ev endp
.text:00404677
.text:00404678
.text:00404678 ; =============== S U B R O U T I N E =======================================
.text:00404678
.text:00404678
.text:00404678 ; _DWORD std::bad_cast::what(std::bad_cast *__hidden this)
.text:00404678                 public __ZNKSt8bad_cast4whatEv
.text:00404678 __ZNKSt8bad_cast4whatEv proc near       ; DATA XREF: .rdata:00416550↓o
.text:00404678
.text:00404678 this            = dword ptr  4
.text:00404678
.text:00404678                 mov     eax, offset aStdBadCast ; "std::bad_cast"
.text:0040467D                 retn
.text:0040467D __ZNKSt8bad_cast4whatEv endp
.text:0040467D
.text:0040467D ; ---------------------------------------------------------------------------
.text:0040467E                 align 10h
.text:00404680
.text:00404680 ; =============== S U B R O U T I N E =======================================
.text:00404680
.text:00404680
.text:00404680 ; void __cdecl std::bad_cast::~bad_cast(void *)
.text:00404680                 public __ZNSt8bad_castD1Ev
.text:00404680 __ZNSt8bad_castD1Ev proc near           ; CODE XREF: std::bad_cast::~bad_cast()+6↓p
.text:00404680                                         ; DATA XREF: std::__throw_bad_cast(void)+15↑o ...
.text:00404680                 mov     dword ptr [ecx], offset off_416548
.text:00404686                 jmp     __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:00404686 __ZNSt8bad_castD1Ev endp
.text:00404686
.text:00404686 ; ---------------------------------------------------------------------------
.text:0040468B                 align 4
.text:0040468C
.text:0040468C ; =============== S U B R O U T I N E =======================================
.text:0040468C
.text:0040468C
.text:0040468C ; void __cdecl std::bad_cast::~bad_cast(std::bad_cast *__hidden this)
.text:0040468C                 public __ZNSt8bad_castD0Ev
.text:0040468C __ZNSt8bad_castD0Ev proc near           ; DATA XREF: .rdata:0041654C↓o
.text:0040468C
.text:0040468C var_1C          = dword ptr -1Ch
.text:0040468C this            = dword ptr  4
.text:0040468C
.text:0040468C                 push    ebx
.text:0040468D                 sub     esp, 18h
.text:00404690                 mov     ebx, ecx
.text:00404692                 call    __ZNSt8bad_castD1Ev ; std::bad_cast::~bad_cast()
.text:00404697                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:0040469A                 call    __ZdlPv         ; operator delete(void *)
.text:0040469F                 add     esp, 18h
.text:004046A2                 pop     ebx
.text:004046A3                 retn
.text:004046A3 __ZNSt8bad_castD0Ev endp
.text:004046A3
.text:004046A4
.text:004046A4 ; =============== S U B R O U T I N E =======================================
.text:004046A4
.text:004046A4
.text:004046A4 ; _DWORD std::bad_typeid::what(std::bad_typeid *__hidden this)
.text:004046A4                 public __ZNKSt10bad_typeid4whatEv
.text:004046A4 __ZNKSt10bad_typeid4whatEv proc near    ; DATA XREF: .rdata:00416390↓o
.text:004046A4
.text:004046A4 this            = dword ptr  4
.text:004046A4
.text:004046A4                 mov     eax, offset aStdBadTypeid ; "std::bad_typeid"
.text:004046A9                 retn
.text:004046A9 __ZNKSt10bad_typeid4whatEv endp
.text:004046A9
.text:004046A9 ; ---------------------------------------------------------------------------
.text:004046AA                 align 4
.text:004046AC
.text:004046AC ; =============== S U B R O U T I N E =======================================
.text:004046AC
.text:004046AC
.text:004046AC ; void __cdecl std::bad_typeid::~bad_typeid(void *)
.text:004046AC                 public __ZNSt10bad_typeidD1Ev
.text:004046AC __ZNSt10bad_typeidD1Ev proc near        ; CODE XREF: std::bad_typeid::~bad_typeid()+6↓p
.text:004046AC                                         ; DATA XREF: std::__throw_bad_typeid(void)+15↑o ...
.text:004046AC                 mov     dword ptr [ecx], offset off_416388
.text:004046B2                 jmp     __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:004046B2 __ZNSt10bad_typeidD1Ev endp
.text:004046B2
.text:004046B2 ; ---------------------------------------------------------------------------
.text:004046B7                 align 4
.text:004046B8
.text:004046B8 ; =============== S U B R O U T I N E =======================================
.text:004046B8
.text:004046B8
.text:004046B8 ; void __cdecl std::bad_typeid::~bad_typeid(std::bad_typeid *__hidden this)
.text:004046B8                 public __ZNSt10bad_typeidD0Ev
.text:004046B8 __ZNSt10bad_typeidD0Ev proc near        ; DATA XREF: .rdata:0041638C↓o
.text:004046B8
.text:004046B8 var_1C          = dword ptr -1Ch
.text:004046B8 this            = dword ptr  4
.text:004046B8
.text:004046B8                 push    ebx
.text:004046B9                 sub     esp, 18h
.text:004046BC                 mov     ebx, ecx
.text:004046BE                 call    __ZNSt10bad_typeidD1Ev ; std::bad_typeid::~bad_typeid()
.text:004046C3                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:004046C6                 call    __ZdlPv         ; operator delete(void *)
.text:004046CB                 add     esp, 18h
.text:004046CE                 pop     ebx
.text:004046CF                 retn
.text:004046CF __ZNSt10bad_typeidD0Ev endp
.text:004046CF
.text:004046D0
.text:004046D0 ; =============== S U B R O U T I N E =======================================
.text:004046D0
.text:004046D0
.text:004046D0 ; _DWORD `anonymous namespace'::generic_error_category::name(_anonymous_namespace_::generic_error_category *__hidden this)
.text:004046D0 __ZNK12_GLOBAL__N_122generic_error_category4nameEv proc near
.text:004046D0                                         ; DATA XREF: .rdata:00414190↓o
.text:004046D0
.text:004046D0 this            = dword ptr  4
.text:004046D0
.text:004046D0                 mov     eax, offset aGeneric ; "generic"
.text:004046D5                 retn
.text:004046D5 __ZNK12_GLOBAL__N_122generic_error_category4nameEv endp
.text:004046D5
.text:004046D5 ; ---------------------------------------------------------------------------
.text:004046D6                 align 4
.text:004046D8
.text:004046D8 ; =============== S U B R O U T I N E =======================================
.text:004046D8
.text:004046D8
.text:004046D8 ; _DWORD `anonymous namespace'::system_error_category::name(_anonymous_namespace_::system_error_category *__hidden this)
.text:004046D8 __ZNK12_GLOBAL__N_121system_error_category4nameEv proc near
.text:004046D8                                         ; DATA XREF: .rdata:004141D0↓o
.text:004046D8
.text:004046D8 this            = dword ptr  4
.text:004046D8
.text:004046D8                 mov     eax, offset aSystem ; "system"
.text:004046DD                 retn
.text:004046DD __ZNK12_GLOBAL__N_121system_error_category4nameEv endp
.text:004046DD
.text:004046DD ; ---------------------------------------------------------------------------
.text:004046DE                 align 10h
.text:004046E0
.text:004046E0 ; =============== S U B R O U T I N E =======================================
.text:004046E0
.text:004046E0
.text:004046E0 ; void __cdecl std::error_category::~error_category(std::error_category *__hidden this)
.text:004046E0                 public __ZNSt14error_categoryD1Ev
.text:004046E0 __ZNSt14error_categoryD1Ev proc near    ; CODE XREF: `anonymous namespace'::future_error_category::~future_error_category()+6↓j
.text:004046E0                                         ; ___tcf_0_1+F↓j ...
.text:004046E0
.text:004046E0 this            = dword ptr  4
.text:004046E0
.text:004046E0                 mov     dword ptr [ecx], offset off_4164A8
.text:004046E6                 retn
.text:004046E6 __ZNSt14error_categoryD1Ev endp
.text:004046E6
.text:004046E6 ; ---------------------------------------------------------------------------
.text:004046E7                 align 4
.text:004046E8
.text:004046E8 ; =============== S U B R O U T I N E =======================================
.text:004046E8
.text:004046E8
.text:004046E8 ; _DWORD __stdcall std::error_category::default_error_condition(std::error_category *__hidden this, int)
.text:004046E8                 public __ZNKSt14error_category23default_error_conditionEi
.text:004046E8 __ZNKSt14error_category23default_error_conditionEi proc near
.text:004046E8                                         ; DATA XREF: .rdata:00414198↓o
.text:004046E8                                         ; .rdata:004141D8↓o ...
.text:004046E8
.text:004046E8 this            = dword ptr  4
.text:004046E8
.text:004046E8                 mov     edx, ecx
.text:004046EA                 mov     eax, [esp+this]
.text:004046EE                 retn    4
.text:004046EE __ZNKSt14error_category23default_error_conditionEi endp
.text:004046EE
.text:004046EE ; ---------------------------------------------------------------------------
.text:004046F1                 align 4
.text:004046F4
.text:004046F4 ; =============== S U B R O U T I N E =======================================
.text:004046F4
.text:004046F4
.text:004046F4 ; std::error_category::equivalent(int, std::error_condition const&)const
.text:004046F4                 public __ZNKSt14error_category10equivalentEiRKSt15error_condition
.text:004046F4 __ZNKSt14error_category10equivalentEiRKSt15error_condition proc near
.text:004046F4                                         ; DATA XREF: .rdata:0041419C↓o
.text:004046F4                                         ; .rdata:004141DC↓o ...
.text:004046F4
.text:004046F4 var_1C          = dword ptr -1Ch
.text:004046F4 arg_0           = dword ptr  4
.text:004046F4 arg_4           = dword ptr  8
.text:004046F4
.text:004046F4                 push    ebx
.text:004046F5                 sub     esp, 18h
.text:004046F8                 mov     ebx, [esp+1Ch+arg_4]
.text:004046FC                 mov     eax, [ecx]
.text:004046FE                 mov     edx, [esp+1Ch+arg_0]
.text:00404702                 mov     [esp+1Ch+var_1C], edx
.text:00404705                 call    dword ptr [eax+10h]
.text:00404708                 push    ecx
.text:00404709                 cmp     [ebx+4], edx
.text:0040470C                 jz      short loc_404718
.text:0040470E                 xor     eax, eax
.text:00404710                 add     esp, 18h
.text:00404713                 pop     ebx
.text:00404714                 retn    8
.text:00404714 ; ---------------------------------------------------------------------------
.text:00404717                 align 4
.text:00404718
.text:00404718 loc_404718:                             ; CODE XREF: std::error_category::equivalent(int,std::error_condition const&)+18↑j
.text:00404718                 cmp     [ebx], eax
.text:0040471A                 setz    al
.text:0040471D                 add     esp, 18h
.text:00404720                 pop     ebx
.text:00404721                 retn    8
.text:00404721 __ZNKSt14error_category10equivalentEiRKSt15error_condition endp
.text:00404721
.text:00404724
.text:00404724 ; =============== S U B R O U T I N E =======================================
.text:00404724
.text:00404724
.text:00404724 ; std::error_category::equivalent(std::error_code const&, int)const
.text:00404724                 public __ZNKSt14error_category10equivalentERKSt10error_codei
.text:00404724 __ZNKSt14error_category10equivalentERKSt10error_codei proc near
.text:00404724                                         ; DATA XREF: .rdata:004141A0↓o
.text:00404724                                         ; .rdata:004141E0↓o ...
.text:00404724
.text:00404724 arg_0           = dword ptr  4
.text:00404724 arg_4           = dword ptr  8
.text:00404724
.text:00404724                 mov     eax, [esp+arg_0]
.text:00404728                 cmp     [eax+4], ecx
.text:0040472B                 jz      short loc_404734
.text:0040472D                 xor     eax, eax
.text:0040472F                 retn    8
.text:0040472F ; ---------------------------------------------------------------------------
.text:00404732                 align 4
.text:00404734
.text:00404734 loc_404734:                             ; CODE XREF: std::error_category::equivalent(std::error_code const&,int)+7↑j
.text:00404734                 mov     edx, [esp+arg_4]
.text:00404738                 cmp     [eax], edx
.text:0040473A                 setz    al
.text:0040473D                 retn    8
.text:0040473D __ZNKSt14error_category10equivalentERKSt10error_codei endp
.text:0040473D
.text:00404740
.text:00404740 ; =============== S U B R O U T I N E =======================================
.text:00404740
.text:00404740
.text:00404740 ; void __cdecl `anonymous namespace'::system_error_category::~system_error_category(_anonymous_namespace_::system_error_category *__hidden this)
.text:00404740 __ZN12_GLOBAL__N_121system_error_categoryD1Ev proc near
.text:00404740                                         ; DATA XREF: .rdata:off_4141C8↓o
.text:00404740
.text:00404740 this            = dword ptr  4
.text:00404740
.text:00404740                 mov     dword ptr [ecx], offset off_4164A8
.text:00404746                 retn
.text:00404746 __ZN12_GLOBAL__N_121system_error_categoryD1Ev endp
.text:00404746
.text:00404746 ; ---------------------------------------------------------------------------
.text:00404747                 align 4
.text:00404748
.text:00404748 ; =============== S U B R O U T I N E =======================================
.text:00404748
.text:00404748
.text:00404748 ; void __cdecl `anonymous namespace'::generic_error_category::~generic_error_category(_anonymous_namespace_::generic_error_category *__hidden this)
.text:00404748 __ZN12_GLOBAL__N_122generic_error_categoryD1Ev proc near
.text:00404748                                         ; DATA XREF: .rdata:off_414188↓o
.text:00404748
.text:00404748 this            = dword ptr  4
.text:00404748
.text:00404748                 mov     dword ptr [ecx], offset off_4164A8
.text:0040474E                 retn
.text:0040474E __ZN12_GLOBAL__N_122generic_error_categoryD1Ev endp
.text:0040474E
.text:0040474E ; ---------------------------------------------------------------------------
.text:0040474F                 align 10h
.text:00404750
.text:00404750 ; =============== S U B R O U T I N E =======================================
.text:00404750
.text:00404750
.text:00404750 ; void __cdecl __tcf_0_0()
.text:00404750 ___tcf_0_0      proc near               ; DATA XREF: __GLOBAL__sub_I__ZNSt14error_categoryC2Ev+D↓o
.text:00404750                 mov     ds:__ZN12_GLOBAL__N_1L25generic_category_instanceE, offset off_4164A8 ; `anonymous namespace'::generic_category_instance
.text:0040475A                 retn
.text:0040475A ___tcf_0_0      endp
.text:0040475A
.text:0040475A ; ---------------------------------------------------------------------------
.text:0040475B                 align 4
.text:0040475C
.text:0040475C ; =============== S U B R O U T I N E =======================================
.text:0040475C
.text:0040475C
.text:0040475C ; void __cdecl __tcf_1()
.text:0040475C ___tcf_1        proc near               ; DATA XREF: __GLOBAL__sub_I__ZNSt14error_categoryC2Ev+23↓o
.text:0040475C                 mov     ds:__ZN12_GLOBAL__N_1L24system_category_instanceE, offset off_4164A8 ; `anonymous namespace'::system_category_instance
.text:00404766                 retn
.text:00404766 ___tcf_1        endp
.text:00404766
.text:00404766 ; ---------------------------------------------------------------------------
.text:00404767                 align 4
.text:00404768
.text:00404768 ; =============== S U B R O U T I N E =======================================
.text:00404768
.text:00404768
.text:00404768 ; _DWORD __stdcall `anonymous namespace'::generic_error_category::message(_anonymous_namespace_::generic_error_category *__hidden this, int)
.text:00404768 __ZNK12_GLOBAL__N_122generic_error_category7messageEi proc near
.text:00404768                                         ; DATA XREF: .rdata:00414194↓o
.text:00404768
.text:00404768 var_2C          = dword ptr -2Ch
.text:00404768 var_28          = dword ptr -28h
.text:00404768 var_D           = byte ptr -0Dh
.text:00404768 this            = dword ptr  4
.text:00404768 arg_4           = dword ptr  8
.text:00404768
.text:00404768                 push    ebx
.text:00404769                 sub     esp, 28h
.text:0040476C                 mov     ebx, ecx
.text:0040476E                 mov     eax, [esp+2Ch+arg_4]
.text:00404772                 mov     [esp+2Ch+var_2C], eax ; int
.text:00404775                 call    _strerror
.text:0040477A                 lea     edx, [esp+2Ch+var_D]
.text:0040477E                 mov     [esp+2Ch+var_28], edx
.text:00404782                 mov     [esp+2Ch+var_2C], eax
.text:00404785                 mov     ecx, ebx
.text:00404787                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0040478C                 sub     esp, 8
.text:0040478F                 mov     eax, ebx
.text:00404791                 add     esp, 28h
.text:00404794                 pop     ebx
.text:00404795                 retn    8
.text:00404795 __ZNK12_GLOBAL__N_122generic_error_category7messageEi endp
.text:00404795
.text:00404798
.text:00404798 ; =============== S U B R O U T I N E =======================================
.text:00404798
.text:00404798
.text:00404798 ; _DWORD __stdcall `anonymous namespace'::system_error_category::message(_anonymous_namespace_::system_error_category *__hidden this, int)
.text:00404798 __ZNK12_GLOBAL__N_121system_error_category7messageEi proc near
.text:00404798                                         ; DATA XREF: .rdata:004141D4↓o
.text:00404798
.text:00404798 var_2C          = dword ptr -2Ch
.text:00404798 var_28          = dword ptr -28h
.text:00404798 var_D           = byte ptr -0Dh
.text:00404798 this            = dword ptr  4
.text:00404798 arg_4           = dword ptr  8
.text:00404798
.text:00404798                 push    ebx
.text:00404799                 sub     esp, 28h
.text:0040479C                 mov     ebx, ecx
.text:0040479E                 mov     eax, [esp+2Ch+arg_4]
.text:004047A2                 mov     [esp+2Ch+var_2C], eax ; int
.text:004047A5                 call    _strerror
.text:004047AA                 lea     edx, [esp+2Ch+var_D]
.text:004047AE                 mov     [esp+2Ch+var_28], edx
.text:004047B2                 mov     [esp+2Ch+var_2C], eax
.text:004047B5                 mov     ecx, ebx
.text:004047B7                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:004047BC                 sub     esp, 8
.text:004047BF                 mov     eax, ebx
.text:004047C1                 add     esp, 28h
.text:004047C4                 pop     ebx
.text:004047C5                 retn    8
.text:004047C5 __ZNK12_GLOBAL__N_121system_error_category7messageEi endp
.text:004047C5
.text:004047C8
.text:004047C8 ; =============== S U B R O U T I N E =======================================
.text:004047C8
.text:004047C8
.text:004047C8 ; void __cdecl std::error_category::~error_category(std::error_category *__hidden this)
.text:004047C8                 public __ZNSt14error_categoryD0Ev
.text:004047C8 __ZNSt14error_categoryD0Ev proc near    ; DATA XREF: .rdata:004164AC↓o
.text:004047C8
.text:004047C8 var_1C          = dword ptr -1Ch
.text:004047C8 this            = dword ptr  4
.text:004047C8
.text:004047C8                 sub     esp, 1Ch
.text:004047CB                 mov     dword ptr [ecx], offset off_4164A8
.text:004047D1                 mov     [esp+1Ch+var_1C], ecx ; void *
.text:004047D4                 call    __ZdlPv         ; operator delete(void *)
.text:004047D9                 add     esp, 1Ch
.text:004047DC                 retn
.text:004047DC __ZNSt14error_categoryD0Ev endp
.text:004047DC
.text:004047DC ; ---------------------------------------------------------------------------
.text:004047DD                 align 10h
.text:004047E0
.text:004047E0 ; =============== S U B R O U T I N E =======================================
.text:004047E0
.text:004047E0
.text:004047E0 ; void __cdecl `anonymous namespace'::generic_error_category::~generic_error_category(_anonymous_namespace_::generic_error_category *__hidden this)
.text:004047E0 __ZN12_GLOBAL__N_122generic_error_categoryD0Ev proc near
.text:004047E0                                         ; DATA XREF: .rdata:0041418C↓o
.text:004047E0
.text:004047E0 var_1C          = dword ptr -1Ch
.text:004047E0 this            = dword ptr  4
.text:004047E0
.text:004047E0                 sub     esp, 1Ch
.text:004047E3                 mov     dword ptr [ecx], offset off_4164A8
.text:004047E9                 mov     [esp+1Ch+var_1C], ecx ; void *
.text:004047EC                 call    __ZdlPv         ; operator delete(void *)
.text:004047F1                 add     esp, 1Ch
.text:004047F4                 retn
.text:004047F4 __ZN12_GLOBAL__N_122generic_error_categoryD0Ev endp
.text:004047F4
.text:004047F4 ; ---------------------------------------------------------------------------
.text:004047F5                 align 4
.text:004047F8
.text:004047F8 ; =============== S U B R O U T I N E =======================================
.text:004047F8
.text:004047F8
.text:004047F8 ; void __cdecl `anonymous namespace'::system_error_category::~system_error_category(_anonymous_namespace_::system_error_category *__hidden this)
.text:004047F8 __ZN12_GLOBAL__N_121system_error_categoryD0Ev proc near
.text:004047F8                                         ; DATA XREF: .rdata:004141CC↓o
.text:004047F8
.text:004047F8 var_1C          = dword ptr -1Ch
.text:004047F8 this            = dword ptr  4
.text:004047F8
.text:004047F8                 sub     esp, 1Ch
.text:004047FB                 mov     dword ptr [ecx], offset off_4164A8
.text:00404801                 mov     [esp+1Ch+var_1C], ecx ; void *
.text:00404804                 call    __ZdlPv         ; operator delete(void *)
.text:00404809                 add     esp, 1Ch
.text:0040480C                 retn
.text:0040480C __ZN12_GLOBAL__N_121system_error_categoryD0Ev endp
.text:0040480C
.text:0040480C ; ---------------------------------------------------------------------------
.text:0040480D                 align 10h
.text:00404810
.text:00404810 ; =============== S U B R O U T I N E =======================================
.text:00404810
.text:00404810
.text:00404810 ; void __cdecl std::system_error::~system_error(void *)
.text:00404810                 public __ZNSt12system_errorD1Ev
.text:00404810 __ZNSt12system_errorD1Ev proc near      ; CODE XREF: std::system_error::~system_error()+6↓p
.text:00404810                                         ; DATA XREF: std::__throw_system_error(int)+C4↑o ...
.text:00404810                 mov     dword ptr [ecx], offset off_416448
.text:00404816                 jmp     __ZNSt13runtime_errorD1Ev ; std::runtime_error::~runtime_error()
.text:00404816 __ZNSt12system_errorD1Ev endp
.text:00404816
.text:00404816 ; ---------------------------------------------------------------------------
.text:0040481B                 align 4
.text:0040481C
.text:0040481C ; =============== S U B R O U T I N E =======================================
.text:0040481C
.text:0040481C
.text:0040481C ; void __cdecl std::system_error::~system_error(std::system_error *__hidden this)
.text:0040481C                 public __ZNSt12system_errorD0Ev
.text:0040481C __ZNSt12system_errorD0Ev proc near      ; DATA XREF: .rdata:0041644C↓o
.text:0040481C
.text:0040481C var_1C          = dword ptr -1Ch
.text:0040481C this            = dword ptr  4
.text:0040481C
.text:0040481C                 push    ebx
.text:0040481D                 sub     esp, 18h
.text:00404820                 mov     ebx, ecx
.text:00404822                 call    __ZNSt12system_errorD1Ev ; std::system_error::~system_error()
.text:00404827                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:0040482A                 call    __ZdlPv         ; operator delete(void *)
.text:0040482F                 add     esp, 18h
.text:00404832                 pop     ebx
.text:00404833                 retn
.text:00404833 __ZNSt12system_errorD0Ev endp
.text:00404833
.text:00404834
.text:00404834 ; =============== S U B R O U T I N E =======================================
.text:00404834
.text:00404834
.text:00404834 ; _DWORD std::error_category::error_category(std::error_category *__hidden this)
.text:00404834                 public __ZNSt14error_categoryC1Ev
.text:00404834 __ZNSt14error_categoryC1Ev proc near    ; CODE XREF: std::future_category(void)+28↓p
.text:00404834
.text:00404834 this            = dword ptr  4
.text:00404834
.text:00404834                 mov     dword ptr [ecx], offset off_4164A8
.text:0040483A                 retn
.text:0040483A __ZNSt14error_categoryC1Ev endp
.text:0040483A
.text:0040483A ; ---------------------------------------------------------------------------
.text:0040483B                 align 4
.text:0040483C
.text:0040483C ; =============== S U B R O U T I N E =======================================
.text:0040483C
.text:0040483C
.text:0040483C ; _DWORD std::system_category(void)
.text:0040483C                 public __ZSt15system_categoryv
.text:0040483C __ZSt15system_categoryv proc near
.text:0040483C                 mov     eax, offset __ZN12_GLOBAL__N_1L24system_category_instanceE ; `anonymous namespace'::system_category_instance
.text:00404841                 retn
.text:00404841 __ZSt15system_categoryv endp
.text:00404841
.text:00404841 ; ---------------------------------------------------------------------------
.text:00404842                 align 4
.text:00404844
.text:00404844 ; =============== S U B R O U T I N E =======================================
.text:00404844
.text:00404844
.text:00404844 ; _DWORD std::generic_category(void)
.text:00404844                 public __ZSt16generic_categoryv
.text:00404844 __ZSt16generic_categoryv proc near      ; CODE XREF: std::__throw_system_error(int)+44↑p
.text:00404844                 mov     eax, offset __ZN12_GLOBAL__N_1L25generic_category_instanceE ; `anonymous namespace'::generic_category_instance
.text:00404849                 retn
.text:00404849 __ZSt16generic_categoryv endp
.text:00404849
.text:00404849 ; ---------------------------------------------------------------------------
.text:0040484A                 align 4
.text:0040484C
.text:0040484C ; =============== S U B R O U T I N E =======================================
.text:0040484C
.text:0040484C
.text:0040484C ; _DWORD std::error_code::default_error_condition(std::error_code *__hidden this)
.text:0040484C                 public __ZNKSt10error_code23default_error_conditionEv
.text:0040484C __ZNKSt10error_code23default_error_conditionEv proc near
.text:0040484C
.text:0040484C var_1C          = dword ptr -1Ch
.text:0040484C this            = dword ptr  4
.text:0040484C
.text:0040484C                 sub     esp, 1Ch
.text:0040484F                 mov     eax, [ecx+4]
.text:00404852                 mov     edx, [eax]
.text:00404854                 mov     ecx, [ecx]
.text:00404856                 mov     [esp+1Ch+var_1C], ecx
.text:00404859                 mov     ecx, eax
.text:0040485B                 call    dword ptr [edx+10h]
.text:0040485E                 push    ecx
.text:0040485F                 add     esp, 1Ch
.text:00404862                 retn
.text:00404862 __ZNKSt10error_code23default_error_conditionEv endp
.text:00404862
.text:00404862 ; ---------------------------------------------------------------------------
.text:00404863                 align 4
.text:00404864
.text:00404864 ; =============== S U B R O U T I N E =======================================
.text:00404864
.text:00404864
.text:00404864 ; _DWORD `anonymous namespace'::future_error_category::name(_anonymous_namespace_::future_error_category *__hidden this)
.text:00404864 __ZNK12_GLOBAL__N_121future_error_category4nameEv proc near
.text:00404864                                         ; DATA XREF: .rdata:00414310↓o
.text:00404864
.text:00404864 this            = dword ptr  4
.text:00404864
.text:00404864                 mov     eax, offset aFuture ; "future"
.text:00404869                 retn
.text:00404869 __ZNK12_GLOBAL__N_121future_error_category4nameEv endp
.text:00404869
.text:00404869 ; ---------------------------------------------------------------------------
.text:0040486A                 align 4
.text:0040486C
.text:0040486C ; =============== S U B R O U T I N E =======================================
.text:0040486C
.text:0040486C
.text:0040486C ; void __cdecl std::future_error::~future_error(void *)
.text:0040486C                 public __ZNSt12future_errorD1Ev
.text:0040486C __ZNSt12future_errorD1Ev proc near      ; CODE XREF: std::future_error::~future_error()+6↓p
.text:0040486C                                         ; DATA XREF: std::__throw_future_error(int)+CB↑o ...
.text:0040486C                 mov     dword ptr [ecx], offset off_416400
.text:00404872                 jmp     __ZNSt11logic_errorD1Ev ; std::logic_error::~logic_error()
.text:00404872 __ZNSt12future_errorD1Ev endp
.text:00404872
.text:00404872 ; ---------------------------------------------------------------------------
.text:00404877                 align 4
.text:00404878
.text:00404878 ; =============== S U B R O U T I N E =======================================
.text:00404878
.text:00404878
.text:00404878 ; void __cdecl std::future_error::~future_error(std::future_error *__hidden this)
.text:00404878                 public __ZNSt12future_errorD0Ev
.text:00404878 __ZNSt12future_errorD0Ev proc near      ; DATA XREF: .rdata:00416404↓o
.text:00404878
.text:00404878 var_1C          = dword ptr -1Ch
.text:00404878 this            = dword ptr  4
.text:00404878
.text:00404878                 push    ebx
.text:00404879                 sub     esp, 18h
.text:0040487C                 mov     ebx, ecx
.text:0040487E                 call    __ZNSt12future_errorD1Ev ; std::future_error::~future_error()
.text:00404883                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:00404886                 call    __ZdlPv         ; operator delete(void *)
.text:0040488B                 add     esp, 18h
.text:0040488E                 pop     ebx
.text:0040488F                 retn
.text:0040488F __ZNSt12future_errorD0Ev endp
.text:0040488F
.text:00404890
.text:00404890 ; =============== S U B R O U T I N E =======================================
.text:00404890
.text:00404890
.text:00404890 ; void __cdecl `anonymous namespace'::future_error_category::~future_error_category(_anonymous_namespace_::future_error_category *__hidden this)
.text:00404890 __ZN12_GLOBAL__N_121future_error_categoryD1Ev proc near
.text:00404890                                         ; DATA XREF: .rdata:off_414308↓o
.text:00404890
.text:00404890 this            = dword ptr  4
.text:00404890
.text:00404890                 mov     dword ptr [ecx], offset off_414308
.text:00404896                 jmp     __ZNSt14error_categoryD1Ev ; std::error_category::~error_category()
.text:00404896 __ZN12_GLOBAL__N_121future_error_categoryD1Ev endp
.text:00404896
.text:00404896 ; ---------------------------------------------------------------------------
.text:0040489B                 align 4
.text:0040489C
.text:0040489C ; =============== S U B R O U T I N E =======================================
.text:0040489C
.text:0040489C
.text:0040489C ; void __cdecl __tcf_0_1()
.text:0040489C ___tcf_0_1      proc near               ; DATA XREF: std::future_category(void)+43↓o
.text:0040489C                 mov     ds:__ZZN12_GLOBAL__N_126__future_category_instanceEvE5__fec, offset off_414308 ; `anonymous namespace'::__future_category_instance(void)::__fec
.text:004048A6                 mov     ecx, offset __ZZN12_GLOBAL__N_126__future_category_instanceEvE5__fec ; `anonymous namespace'::__future_category_instance(void)::__fec
.text:004048AB                 jmp     __ZNSt14error_categoryD1Ev ; std::error_category::~error_category()
.text:004048AB ___tcf_0_1      endp
.text:004048AB
.text:004048B0
.text:004048B0 ; =============== S U B R O U T I N E =======================================
.text:004048B0
.text:004048B0
.text:004048B0 ; void __cdecl `anonymous namespace'::future_error_category::~future_error_category(_anonymous_namespace_::future_error_category *__hidden this)
.text:004048B0 __ZN12_GLOBAL__N_121future_error_categoryD0Ev proc near
.text:004048B0                                         ; DATA XREF: .rdata:0041430C↓o
.text:004048B0
.text:004048B0 var_1C          = dword ptr -1Ch
.text:004048B0 this            = dword ptr  4
.text:004048B0
.text:004048B0                 push    ebx
.text:004048B1                 sub     esp, 18h
.text:004048B4                 mov     ebx, ecx
.text:004048B6                 mov     dword ptr [ecx], offset off_414308
.text:004048BC                 call    __ZNSt14error_categoryD1Ev ; std::error_category::~error_category()
.text:004048C1                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:004048C4                 call    __ZdlPv         ; operator delete(void *)
.text:004048C9                 add     esp, 18h
.text:004048CC                 pop     ebx
.text:004048CD                 retn
.text:004048CD __ZN12_GLOBAL__N_121future_error_categoryD0Ev endp
.text:004048CD
.text:004048CD ; ---------------------------------------------------------------------------
.text:004048CE                 align 10h
.text:004048D0
.text:004048D0 ; =============== S U B R O U T I N E =======================================
.text:004048D0
.text:004048D0
.text:004048D0 ; _DWORD std::future_error::what(std::future_error *__hidden this)
.text:004048D0                 public __ZNKSt12future_error4whatEv
.text:004048D0 __ZNKSt12future_error4whatEv proc near  ; DATA XREF: .rdata:00416408↓o
.text:004048D0
.text:004048D0 lpfctx          = dword ptr -6Ch
.text:004048D0 var_68          = dword ptr -68h
.text:004048D0 fctx            = SjLj_Function_Context ptr -50h
.text:004048D0 var_11          = dword ptr -11h
.text:004048D0 this            = dword ptr  4
.text:004048D0
.text:004048D0                 push    esi
.text:004048D1                 push    ebx
.text:004048D2                 sub     esp, 64h
.text:004048D5                 mov     ebx, ecx
.text:004048D7                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:004048DF                 mov     [esp+6Ch+fctx.lsda], offset dword_412388
.text:004048E7                 lea     esi, [esp+6Ch+fctx]
.text:004048EB                 mov     [esp+6Ch+lpfctx], esi ; lpfctx
.text:004048EE                 call    __Unwind_SjLj_Register
.text:004048F3                 mov     eax, [ebx+0Ch]
.text:004048F6                 mov     edx, [eax]
.text:004048F8                 mov     ecx, [ebx+8]
.text:004048FB                 mov     [esp+6Ch+var_68], ecx
.text:004048FF                 mov     [esp+6Ch+lpfctx], eax
.text:00404902                 mov     eax, [edx+0Ch]
.text:00404905                 mov     [esp+6Ch+fctx.call_site], 0
.text:0040490D                 lea     ecx, [esp+6Ch+var_11+1]
.text:00404911                 call    eax
.text:00404913                 sub     esp, 8
.text:00404916                 mov     ebx, [esp+6Ch+var_11+1]
.text:0040491A                 mov     edx, ds:__CRT_MT
.text:00404920                 test    edx, edx
.text:00404922                 jnz     short loc_404944
.text:00404924                 mov     eax, [ebx-4]
.text:00404927                 lea     edx, [eax-1]
.text:0040492A                 mov     [ebx-4], edx
.text:0040492D                 test    eax, eax
.text:0040492F                 jle     short loc_40495B
.text:00404931
.text:00404931 loc_404931:                             ; CODE XREF: std::future_error::what(void)+89↓j
.text:00404931                 mov     [esp+6Ch+lpfctx], esi ; lpfctx
.text:00404934                 call    __Unwind_SjLj_Unregister
.text:00404939                 mov     eax, ebx
.text:0040493B                 add     esp, 64h
.text:0040493E                 pop     ebx
.text:0040493F                 pop     esi
.text:00404940                 retn
.text:00404940 ; ---------------------------------------------------------------------------
.text:00404941                 align 4
.text:00404944
.text:00404944 loc_404944:                             ; CODE XREF: std::future_error::what(void)+52↑j
.text:00404944                 mov     [esp+6Ch+var_68], 0FFFFFFFFh ; int
.text:0040494C                 lea     eax, [ebx-4]
.text:0040494F                 mov     [esp+6Ch+lpfctx], eax ; volatile int *
.text:00404952                 call    __ZN9__gnu_cxx18__exchange_and_addEPVii ; __gnu_cxx::__exchange_and_add(int volatile*,int)
.text:00404957                 test    eax, eax
.text:00404959                 jg      short loc_404931
.text:0040495B
.text:0040495B loc_40495B:                             ; CODE XREF: std::future_error::what(void)+5F↑j
.text:0040495B                 lea     ecx, [ebx-0Ch]  ; void *
.text:0040495E                 lea     eax, [esp+6Ch+var_11]
.text:00404962                 mov     [esp+6Ch+lpfctx], eax ; int
.text:00404965                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0040496A                 push    eax
.text:0040496B                 mov     [esp+6Ch+lpfctx], esi ; lpfctx
.text:0040496E                 call    __Unwind_SjLj_Unregister
.text:00404973                 mov     eax, ebx
.text:00404975                 add     esp, 64h
.text:00404978                 pop     ebx
.text:00404979                 pop     esi
.text:0040497A                 retn
.text:0040497A __ZNKSt12future_error4whatEv endp
.text:0040497A
.text:0040497A ; ---------------------------------------------------------------------------
.text:0040497B                 align 4
.text:0040497C
.text:0040497C ; =============== S U B R O U T I N E =======================================
.text:0040497C
.text:0040497C
.text:0040497C ; _DWORD __stdcall `anonymous namespace'::future_error_category::message(_anonymous_namespace_::future_error_category *__hidden this, int)
.text:0040497C __ZNK12_GLOBAL__N_121future_error_category7messageEi proc near
.text:0040497C                                         ; DATA XREF: .rdata:00414314↓o
.text:0040497C
.text:0040497C lpfctx          = dword ptr -6Ch
.text:0040497C var_68          = dword ptr -68h
.text:0040497C var_64          = dword ptr -64h
.text:0040497C var_58          = dword ptr -58h
.text:0040497C fctx            = SjLj_Function_Context ptr -50h
.text:0040497C var_2C          = dword ptr -2Ch
.text:0040497C var_28          = dword ptr -28h
.text:0040497C var_D           = dword ptr -0Dh
.text:0040497C this            = dword ptr  4
.text:0040497C arg_4           = dword ptr  8
.text:0040497C arg_10          = dword ptr  14h
.text:0040497C lpuexcpt        = dword ptr  18h
.text:0040497C arg_1C          = dword ptr  20h
.text:0040497C arg_20          = dword ptr  24h
.text:0040497C
.text:0040497C                 push    ebp
.text:0040497D                 sub     esp, 68h
.text:00404980                 mov     [esp+6Ch+var_58], ecx
.text:00404984                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:0040498C                 mov     [esp+6Ch+fctx.lsda], offset dword_41238C
.text:00404994                 lea     eax, [esp+6Ch+var_D+1]
.text:00404998                 mov     [esp+6Ch+fctx.jbuf], eax
.text:0040499C                 mov     [esp+6Ch+var_2C], offset loc_404AD1
.text:004049A4                 mov     [esp+6Ch+var_28], esp
.text:004049A8                 lea     edx, [esp+6Ch+fctx]
.text:004049AC                 mov     [esp+6Ch+lpfctx], edx ; lpfctx
.text:004049AF                 call    __Unwind_SjLj_Register
.text:004049B4 ; __unwind { // ___gxx_personality_sj0
.text:004049B4 ;   try {
.text:004049B4                 lea     eax, [esp+6Ch+var_D]
.text:004049B8                 mov     [esp+6Ch+var_64], eax ; unsigned int
.text:004049BC                 mov     [esp+6Ch+var_68], 0
.text:004049C4                 mov     [esp+6Ch+lpfctx], 0
.text:004049CB                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:004049D3                 call    __ZNSs12_S_constructEjcRKSaIcE ; std::string::_S_construct(uint,char,std::allocator<char> const&)
.text:004049D8                 mov     edx, [esp+6Ch+var_58]
.text:004049DC                 mov     [edx], eax
.text:004049DE                 cmp     [esp+6Ch+arg_4], 2
.text:004049E3                 jz      loc_404A84
.text:004049E9                 jg      short loc_404A30
.text:004049EB                 cmp     [esp+6Ch+arg_4], 1
.text:004049F0                 jz      loc_404AAC
.text:004049F6
.text:004049F6 loc_4049F6:                             ; CODE XREF: `anonymous namespace'::future_error_category::message(int)+C0↓j
.text:004049F6                 mov     [esp+6Ch+var_68], 0Dh ; size_t
.text:004049FE                 mov     [esp+6Ch+lpfctx], offset aUnknownError ; "Unknown error"
.text:00404A05                 mov     [esp+6Ch+fctx.call_site], 1
.text:00404A0D                 mov     ecx, [esp+6Ch+var_58]
.text:00404A11                 call    __ZNSs6assignEPKcj ; std::string::assign(char const*,uint)
.text:00404A16
.text:00404A16 loc_404A16:                             ; CODE XREF: `anonymous namespace'::future_error_category::message(int)+E2↓j
.text:00404A16                                         ; `anonymous namespace'::future_error_category::message(int)+104↓j ...
.text:00404A16                 sub     esp, 8
.text:00404A19                 lea     eax, [esp+6Ch+fctx]
.text:00404A1D                 mov     [esp+6Ch+lpfctx], eax ; lpfctx
.text:00404A20                 call    __Unwind_SjLj_Unregister
.text:00404A25                 mov     eax, [esp+6Ch+var_58]
.text:00404A29                 add     esp, 68h
.text:00404A2C                 pop     ebp
.text:00404A2D                 retn    8
.text:00404A30 ; ---------------------------------------------------------------------------
.text:00404A30
.text:00404A30 loc_404A30:                             ; CODE XREF: `anonymous namespace'::future_error_category::message(int)+6D↑j
.text:00404A30                 cmp     [esp+6Ch+arg_4], 3
.text:00404A35                 jz      short loc_404A60
.text:00404A37                 cmp     [esp+6Ch+arg_4], 4
.text:00404A3C                 jnz     short loc_4049F6
.text:00404A3E                 mov     [esp+6Ch+var_68], 0Eh ; size_t
.text:00404A46                 mov     [esp+6Ch+lpfctx], offset aBrokenPromise ; "Broken promise"
.text:00404A4D                 mov     [esp+6Ch+fctx.call_site], 1
.text:00404A55                 mov     ecx, [esp+6Ch+var_58]
.text:00404A59                 call    __ZNSs6assignEPKcj ; std::string::assign(char const*,uint)
.text:00404A5E                 jmp     short loc_404A16
.text:00404A60 ; ---------------------------------------------------------------------------
.text:00404A60
.text:00404A60 loc_404A60:                             ; CODE XREF: `anonymous namespace'::future_error_category::message(int)+B9↑j
.text:00404A60                 mov     [esp+6Ch+var_68], 13h ; size_t
.text:00404A68                 mov     [esp+6Ch+lpfctx], offset aNoAssociatedSt ; "No associated state"
.text:00404A6F                 mov     [esp+6Ch+fctx.call_site], 1
.text:00404A77                 mov     ecx, [esp+6Ch+var_58]
.text:00404A7B                 call    __ZNSs6assignEPKcj ; std::string::assign(char const*,uint)
.text:00404A80                 jmp     short loc_404A16
.text:00404A80 ; ---------------------------------------------------------------------------
.text:00404A82                 align 4
.text:00404A84
.text:00404A84 loc_404A84:                             ; CODE XREF: `anonymous namespace'::future_error_category::message(int)+67↑j
.text:00404A84                 mov     [esp+6Ch+var_68], 19h ; size_t
.text:00404A8C                 mov     [esp+6Ch+lpfctx], offset aPromiseAlready ; "Promise already satisfied"
.text:00404A93                 mov     [esp+6Ch+fctx.call_site], 1
.text:00404A9B                 mov     ecx, [esp+6Ch+var_58]
.text:00404A9F                 call    __ZNSs6assignEPKcj ; std::string::assign(char const*,uint)
.text:00404AA4                 jmp     loc_404A16
.text:00404AA4 ; ---------------------------------------------------------------------------
.text:00404AA9                 align 4
.text:00404AAC
.text:00404AAC loc_404AAC:                             ; CODE XREF: `anonymous namespace'::future_error_category::message(int)+74↑j
.text:00404AAC                 mov     [esp+6Ch+var_68], 18h ; size_t
.text:00404AB4                 mov     [esp+6Ch+lpfctx], offset aFutureAlreadyR ; "Future already retrieved"
.text:00404ABB                 mov     [esp+6Ch+fctx.call_site], 1
.text:00404AC3                 mov     ecx, [esp+6Ch+var_58]
.text:00404AC7                 call    __ZNSs6assignEPKcj ; std::string::assign(char const*,uint)
.text:00404ACC                 jmp     loc_404A16
.text:00404AD1 ; ---------------------------------------------------------------------------
.text:00404AD1
.text:00404AD1 loc_404AD1:                             ; DATA XREF: `anonymous namespace'::future_error_category::message(int)+20↑o
.text:00404AD1 ;   cleanup() // owned by 4049B4
.text:00404AD1                 mov     eax, [esp+arg_20]
.text:00404AD5                 mov     [esp+lpuexcpt], eax
.text:00404AD9                 mov     ecx, [esp+arg_10]
.text:00404ADD                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00404AE2                 mov     edx, [esp+lpuexcpt]
.text:00404AE6                 mov     [esp+0], edx    ; lpuexcpt
.text:00404AE9                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00404AF1                 call    __Unwind_SjLj_Resume
.text:00404AF1 ;   } // starts at 4049B4
.text:00404AF1 ; } // starts at 4049B4
.text:00404AF1 __ZNK12_GLOBAL__N_121future_error_category7messageEi endp
.text:00404AF1
.text:00404AF1 ; ---------------------------------------------------------------------------
.text:00404AF6                 align 4
.text:00404AF8
.text:00404AF8 ; =============== S U B R O U T I N E =======================================
.text:00404AF8
.text:00404AF8
.text:00404AF8 ; _DWORD std::future_category(void)
.text:00404AF8                 public __ZSt15future_categoryv
.text:00404AF8 __ZSt15future_categoryv proc near       ; CODE XREF: std::__throw_future_error(int)+44↑p
.text:00404AF8
.text:00404AF8 var_1C          = dword ptr -1Ch
.text:00404AF8
.text:00404AF8                 cmp     ds:__ZGVZN12_GLOBAL__N_126__future_category_instanceEvE5__fec, 0 ; `guard variable for'`anonymous namespace'::__future_category_instance(void)::__fec
.text:00404AFF                 jz      short loc_404B08
.text:00404B01                 mov     eax, offset __ZZN12_GLOBAL__N_126__future_category_instanceEvE5__fec ; `anonymous namespace'::__future_category_instance(void)::__fec
.text:00404B06                 retn
.text:00404B06 ; ---------------------------------------------------------------------------
.text:00404B07                 align 4
.text:00404B08
.text:00404B08 loc_404B08:                             ; CODE XREF: std::future_category(void)+7↑j
.text:00404B08                 sub     esp, 1Ch
.text:00404B0B                 mov     [esp+1Ch+var_1C], offset __ZGVZN12_GLOBAL__N_126__future_category_instanceEvE5__fec ; this
.text:00404B12                 call    ___cxa_guard_acquire
.text:00404B17                 test    eax, eax
.text:00404B19                 jz      short loc_404B47
.text:00404B1B                 mov     ecx, offset __ZZN12_GLOBAL__N_126__future_category_instanceEvE5__fec ; `anonymous namespace'::__future_category_instance(void)::__fec
.text:00404B20                 call    __ZNSt14error_categoryC1Ev ; std::error_category::error_category(void)
.text:00404B25                 mov     ds:__ZZN12_GLOBAL__N_126__future_category_instanceEvE5__fec, offset off_414308 ; `anonymous namespace'::__future_category_instance(void)::__fec
.text:00404B2F                 mov     [esp+1Ch+var_1C], offset __ZGVZN12_GLOBAL__N_126__future_category_instanceEvE5__fec ; __guard *
.text:00404B36                 call    ___cxa_guard_release
.text:00404B3B                 mov     [esp+1Ch+var_1C], offset ___tcf_0_1 ; void (__cdecl *)()
.text:00404B42                 call    _atexit
.text:00404B47
.text:00404B47 loc_404B47:                             ; CODE XREF: std::future_category(void)+21↑j
.text:00404B47                 mov     eax, offset __ZZN12_GLOBAL__N_126__future_category_instanceEvE5__fec ; `anonymous namespace'::__future_category_instance(void)::__fec
.text:00404B4C                 add     esp, 1Ch
.text:00404B4F                 retn
.text:00404B4F __ZSt15future_categoryv endp
.text:00404B4F
.text:00404B50
.text:00404B50 ; =============== S U B R O U T I N E =======================================
.text:00404B50
.text:00404B50
.text:00404B50 ; void __cdecl std::bad_function_call::~bad_function_call(void *)
.text:00404B50                 public __ZNSt17bad_function_callD1Ev
.text:00404B50 __ZNSt17bad_function_callD1Ev proc near ; CODE XREF: std::bad_function_call::~bad_function_call()+6↓p
.text:00404B50                                         ; DATA XREF: std::__throw_bad_function_call(void)+15↑o ...
.text:00404B50                 mov     dword ptr [ecx], offset off_416530
.text:00404B56                 jmp     __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:00404B56 __ZNSt17bad_function_callD1Ev endp
.text:00404B56
.text:00404B56 ; ---------------------------------------------------------------------------
.text:00404B5B                 align 4
.text:00404B5C
.text:00404B5C ; =============== S U B R O U T I N E =======================================
.text:00404B5C
.text:00404B5C
.text:00404B5C ; void __cdecl std::bad_function_call::~bad_function_call(std::bad_function_call *__hidden this)
.text:00404B5C                 public __ZNSt17bad_function_callD0Ev
.text:00404B5C __ZNSt17bad_function_callD0Ev proc near ; DATA XREF: .rdata:00416534↓o
.text:00404B5C
.text:00404B5C var_1C          = dword ptr -1Ch
.text:00404B5C this            = dword ptr  4
.text:00404B5C
.text:00404B5C                 push    ebx
.text:00404B5D                 sub     esp, 18h
.text:00404B60                 mov     ebx, ecx
.text:00404B62                 call    __ZNSt17bad_function_callD1Ev ; std::bad_function_call::~bad_function_call()
.text:00404B67                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:00404B6A                 call    __ZdlPv         ; operator delete(void *)
.text:00404B6F                 add     esp, 18h
.text:00404B72                 pop     ebx
.text:00404B73                 retn
.text:00404B73 __ZNSt17bad_function_callD0Ev endp
.text:00404B73
.text:00404B74
.text:00404B74 ; =============== S U B R O U T I N E =======================================
.text:00404B74
.text:00404B74
.text:00404B74 ; _DWORD std::logic_error::what(std::logic_error *__hidden this)
.text:00404B74                 public __ZNKSt11logic_error4whatEv
.text:00404B74 __ZNKSt11logic_error4whatEv proc near   ; DATA XREF: .rdata:004163A8↓o
.text:00404B74                                         ; .rdata:004163F0↓o ...
.text:00404B74
.text:00404B74 this            = dword ptr  4
.text:00404B74
.text:00404B74                 mov     eax, [ecx+4]
.text:00404B77                 retn
.text:00404B77 __ZNKSt11logic_error4whatEv endp
.text:00404B77
.text:00404B78
.text:00404B78 ; =============== S U B R O U T I N E =======================================
.text:00404B78
.text:00404B78
.text:00404B78 ; _DWORD std::runtime_error::what(std::runtime_error *__hidden this)
.text:00404B78                 public __ZNKSt13runtime_error4whatEv
.text:00404B78 __ZNKSt13runtime_error4whatEv proc near ; DATA XREF: .rdata:004163C0↓o
.text:00404B78                                         ; .rdata:004163D8↓o ...
.text:00404B78
.text:00404B78 this            = dword ptr  4
.text:00404B78
.text:00404B78                 mov     eax, [ecx+4]
.text:00404B7B                 retn
.text:00404B7B __ZNKSt13runtime_error4whatEv endp
.text:00404B7B
.text:00404B7C
.text:00404B7C ; =============== S U B R O U T I N E =======================================
.text:00404B7C
.text:00404B7C
.text:00404B7C ; void __cdecl std::runtime_error::~runtime_error(void *)
.text:00404B7C                 public __ZNSt13runtime_errorD1Ev
.text:00404B7C __ZNSt13runtime_errorD1Ev proc near     ; CODE XREF: std::system_error::~system_error()+6↑j
.text:00404B7C                                         ; std::runtime_error::~runtime_error()+6↓p ...
.text:00404B7C
.text:00404B7C var_2C          = dword ptr -2Ch
.text:00404B7C var_28          = dword ptr -28h
.text:00404B7C var_D           = dword ptr -0Dh
.text:00404B7C
.text:00404B7C                 push    esi
.text:00404B7D                 push    ebx
.text:00404B7E                 sub     esp, 24h
.text:00404B81                 mov     ebx, ecx
.text:00404B83                 mov     dword ptr [ecx], offset off_416478
.text:00404B89                 mov     esi, [ecx+4]
.text:00404B8C                 mov     edx, ds:__CRT_MT
.text:00404B92                 test    edx, edx
.text:00404B94                 jnz     short loc_404BB0
.text:00404B96                 mov     eax, [esi-4]
.text:00404B99                 lea     edx, [eax-1]
.text:00404B9C                 mov     [esi-4], edx
.text:00404B9F                 test    eax, eax
.text:00404BA1                 jle     short loc_404BC7
.text:00404BA3
.text:00404BA3 loc_404BA3:                             ; CODE XREF: std::runtime_error::~runtime_error()+49↓j
.text:00404BA3                 mov     ecx, ebx
.text:00404BA5                 call    __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:00404BAA                 add     esp, 24h
.text:00404BAD                 pop     ebx
.text:00404BAE                 pop     esi
.text:00404BAF                 retn
.text:00404BB0 ; ---------------------------------------------------------------------------
.text:00404BB0
.text:00404BB0 loc_404BB0:                             ; CODE XREF: std::runtime_error::~runtime_error()+18↑j
.text:00404BB0                 mov     [esp+2Ch+var_28], 0FFFFFFFFh ; int
.text:00404BB8                 lea     eax, [esi-4]
.text:00404BBB                 mov     [esp+2Ch+var_2C], eax ; volatile int *
.text:00404BBE                 call    __ZN9__gnu_cxx18__exchange_and_addEPVii ; __gnu_cxx::__exchange_and_add(int volatile*,int)
.text:00404BC3                 test    eax, eax
.text:00404BC5                 jg      short loc_404BA3
.text:00404BC7
.text:00404BC7 loc_404BC7:                             ; CODE XREF: std::runtime_error::~runtime_error()+25↑j
.text:00404BC7                 lea     ecx, [esi-0Ch]  ; void *
.text:00404BCA                 lea     eax, [esp+2Ch+var_D]
.text:00404BCE                 mov     [esp+2Ch+var_2C], eax ; int
.text:00404BD1                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:00404BD6                 push    eax             ; this
.text:00404BD7                 mov     ecx, ebx
.text:00404BD9                 call    __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:00404BDE                 add     esp, 24h
.text:00404BE1                 pop     ebx
.text:00404BE2                 pop     esi
.text:00404BE3                 retn
.text:00404BE3 __ZNSt13runtime_errorD1Ev endp
.text:00404BE3
.text:00404BE4
.text:00404BE4 ; =============== S U B R O U T I N E =======================================
.text:00404BE4
.text:00404BE4
.text:00404BE4 ; void __cdecl std::runtime_error::~runtime_error(std::runtime_error *__hidden this)
.text:00404BE4                 public __ZNSt13runtime_errorD0Ev
.text:00404BE4 __ZNSt13runtime_errorD0Ev proc near     ; DATA XREF: .rdata:0041647C↓o
.text:00404BE4
.text:00404BE4 var_1C          = dword ptr -1Ch
.text:00404BE4 this            = dword ptr  4
.text:00404BE4
.text:00404BE4                 push    ebx
.text:00404BE5                 sub     esp, 18h
.text:00404BE8                 mov     ebx, ecx
.text:00404BEA                 call    __ZNSt13runtime_errorD1Ev ; std::runtime_error::~runtime_error()
.text:00404BEF                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:00404BF2                 call    __ZdlPv         ; operator delete(void *)
.text:00404BF7                 add     esp, 18h
.text:00404BFA                 pop     ebx
.text:00404BFB                 retn
.text:00404BFB __ZNSt13runtime_errorD0Ev endp
.text:00404BFB
.text:00404BFC
.text:00404BFC ; =============== S U B R O U T I N E =======================================
.text:00404BFC
.text:00404BFC
.text:00404BFC ; void __cdecl std::underflow_error::~underflow_error(void *)
.text:00404BFC                 public __ZNSt15underflow_errorD1Ev
.text:00404BFC __ZNSt15underflow_errorD1Ev proc near   ; CODE XREF: std::underflow_error::~underflow_error()+6↓p
.text:00404BFC                                         ; DATA XREF: std::__throw_underflow_error(char const*)+89↑o ...
.text:00404BFC                 mov     dword ptr [ecx], offset off_416500
.text:00404C02                 jmp     __ZNSt13runtime_errorD1Ev ; std::runtime_error::~runtime_error()
.text:00404C02 __ZNSt15underflow_errorD1Ev endp
.text:00404C02
.text:00404C02 ; ---------------------------------------------------------------------------
.text:00404C07                 align 4
.text:00404C08
.text:00404C08 ; =============== S U B R O U T I N E =======================================
.text:00404C08
.text:00404C08
.text:00404C08 ; void __cdecl std::underflow_error::~underflow_error(std::underflow_error *__hidden this)
.text:00404C08                 public __ZNSt15underflow_errorD0Ev
.text:00404C08 __ZNSt15underflow_errorD0Ev proc near   ; DATA XREF: .rdata:00416504↓o
.text:00404C08
.text:00404C08 var_1C          = dword ptr -1Ch
.text:00404C08 this            = dword ptr  4
.text:00404C08
.text:00404C08                 push    ebx
.text:00404C09                 sub     esp, 18h
.text:00404C0C                 mov     ebx, ecx
.text:00404C0E                 call    __ZNSt15underflow_errorD1Ev ; std::underflow_error::~underflow_error()
.text:00404C13                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:00404C16                 call    __ZdlPv         ; operator delete(void *)
.text:00404C1B                 add     esp, 18h
.text:00404C1E                 pop     ebx
.text:00404C1F                 retn
.text:00404C1F __ZNSt15underflow_errorD0Ev endp
.text:00404C1F
.text:00404C20
.text:00404C20 ; =============== S U B R O U T I N E =======================================
.text:00404C20
.text:00404C20
.text:00404C20 ; void __cdecl std::overflow_error::~overflow_error(void *)
.text:00404C20                 public __ZNSt14overflow_errorD1Ev
.text:00404C20 __ZNSt14overflow_errorD1Ev proc near    ; CODE XREF: std::overflow_error::~overflow_error()+6↓p
.text:00404C20                                         ; DATA XREF: std::__throw_overflow_error(char const*)+89↑o ...
.text:00404C20                 mov     dword ptr [ecx], offset off_4164E8
.text:00404C26                 jmp     __ZNSt13runtime_errorD1Ev ; std::runtime_error::~runtime_error()
.text:00404C26 __ZNSt14overflow_errorD1Ev endp
.text:00404C26
.text:00404C26 ; ---------------------------------------------------------------------------
.text:00404C2B                 align 4
.text:00404C2C
.text:00404C2C ; =============== S U B R O U T I N E =======================================
.text:00404C2C
.text:00404C2C
.text:00404C2C ; void __cdecl std::overflow_error::~overflow_error(std::overflow_error *__hidden this)
.text:00404C2C                 public __ZNSt14overflow_errorD0Ev
.text:00404C2C __ZNSt14overflow_errorD0Ev proc near    ; DATA XREF: .rdata:004164EC↓o
.text:00404C2C
.text:00404C2C var_1C          = dword ptr -1Ch
.text:00404C2C this            = dword ptr  4
.text:00404C2C
.text:00404C2C                 push    ebx
.text:00404C2D                 sub     esp, 18h
.text:00404C30                 mov     ebx, ecx
.text:00404C32                 call    __ZNSt14overflow_errorD1Ev ; std::overflow_error::~overflow_error()
.text:00404C37                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:00404C3A                 call    __ZdlPv         ; operator delete(void *)
.text:00404C3F                 add     esp, 18h
.text:00404C42                 pop     ebx
.text:00404C43                 retn
.text:00404C43 __ZNSt14overflow_errorD0Ev endp
.text:00404C43
.text:00404C44
.text:00404C44 ; =============== S U B R O U T I N E =======================================
.text:00404C44
.text:00404C44
.text:00404C44 ; void __cdecl std::range_error::~range_error(void *)
.text:00404C44                 public __ZNSt11range_errorD1Ev
.text:00404C44 __ZNSt11range_errorD1Ev proc near       ; CODE XREF: std::range_error::~range_error()+6↓p
.text:00404C44                                         ; DATA XREF: std::__throw_range_error(char const*)+89↑o ...
.text:00404C44                 mov     dword ptr [ecx], offset off_4163B8
.text:00404C4A                 jmp     __ZNSt13runtime_errorD1Ev ; std::runtime_error::~runtime_error()
.text:00404C4A __ZNSt11range_errorD1Ev endp
.text:00404C4A
.text:00404C4A ; ---------------------------------------------------------------------------
.text:00404C4F                 align 10h
.text:00404C50
.text:00404C50 ; =============== S U B R O U T I N E =======================================
.text:00404C50
.text:00404C50
.text:00404C50 ; void __cdecl std::range_error::~range_error(std::range_error *__hidden this)
.text:00404C50                 public __ZNSt11range_errorD0Ev
.text:00404C50 __ZNSt11range_errorD0Ev proc near       ; DATA XREF: .rdata:004163BC↓o
.text:00404C50
.text:00404C50 var_1C          = dword ptr -1Ch
.text:00404C50 this            = dword ptr  4
.text:00404C50
.text:00404C50                 push    ebx
.text:00404C51                 sub     esp, 18h
.text:00404C54                 mov     ebx, ecx
.text:00404C56                 call    __ZNSt11range_errorD1Ev ; std::range_error::~range_error()
.text:00404C5B                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:00404C5E                 call    __ZdlPv         ; operator delete(void *)
.text:00404C63                 add     esp, 18h
.text:00404C66                 pop     ebx
.text:00404C67                 retn
.text:00404C67 __ZNSt11range_errorD0Ev endp
.text:00404C67
.text:00404C68
.text:00404C68 ; =============== S U B R O U T I N E =======================================
.text:00404C68
.text:00404C68
.text:00404C68 ; void __cdecl std::logic_error::~logic_error(void *)
.text:00404C68                 public __ZNSt11logic_errorD1Ev
.text:00404C68 __ZNSt11logic_errorD1Ev proc near       ; CODE XREF: std::future_error::~future_error()+6↑j
.text:00404C68                                         ; std::logic_error::~logic_error()+6↓p ...
.text:00404C68
.text:00404C68 var_2C          = dword ptr -2Ch
.text:00404C68 var_28          = dword ptr -28h
.text:00404C68 var_D           = dword ptr -0Dh
.text:00404C68
.text:00404C68                 push    esi
.text:00404C69                 push    ebx
.text:00404C6A                 sub     esp, 24h
.text:00404C6D                 mov     ebx, ecx
.text:00404C6F                 mov     dword ptr [ecx], offset off_4163A0
.text:00404C75                 mov     esi, [ecx+4]
.text:00404C78                 mov     eax, ds:__CRT_MT
.text:00404C7D                 test    eax, eax
.text:00404C7F                 jnz     short loc_404C9C
.text:00404C81                 mov     eax, [esi-4]
.text:00404C84                 lea     edx, [eax-1]
.text:00404C87                 mov     [esi-4], edx
.text:00404C8A                 test    eax, eax
.text:00404C8C                 jle     short loc_404CB3
.text:00404C8E
.text:00404C8E loc_404C8E:                             ; CODE XREF: std::logic_error::~logic_error()+49↓j
.text:00404C8E                 mov     ecx, ebx
.text:00404C90                 call    __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:00404C95                 add     esp, 24h
.text:00404C98                 pop     ebx
.text:00404C99                 pop     esi
.text:00404C9A                 retn
.text:00404C9A ; ---------------------------------------------------------------------------
.text:00404C9B                 align 4
.text:00404C9C
.text:00404C9C loc_404C9C:                             ; CODE XREF: std::logic_error::~logic_error()+17↑j
.text:00404C9C                 mov     [esp+2Ch+var_28], 0FFFFFFFFh ; int
.text:00404CA4                 lea     eax, [esi-4]
.text:00404CA7                 mov     [esp+2Ch+var_2C], eax ; volatile int *
.text:00404CAA                 call    __ZN9__gnu_cxx18__exchange_and_addEPVii ; __gnu_cxx::__exchange_and_add(int volatile*,int)
.text:00404CAF                 test    eax, eax
.text:00404CB1                 jg      short loc_404C8E
.text:00404CB3
.text:00404CB3 loc_404CB3:                             ; CODE XREF: std::logic_error::~logic_error()+24↑j
.text:00404CB3                 lea     ecx, [esi-0Ch]  ; void *
.text:00404CB6                 lea     eax, [esp+2Ch+var_D]
.text:00404CBA                 mov     [esp+2Ch+var_2C], eax ; int
.text:00404CBD                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:00404CC2                 push    ecx             ; this
.text:00404CC3                 mov     ecx, ebx
.text:00404CC5                 call    __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:00404CCA                 add     esp, 24h
.text:00404CCD                 pop     ebx
.text:00404CCE                 pop     esi
.text:00404CCF                 retn
.text:00404CCF __ZNSt11logic_errorD1Ev endp
.text:00404CCF
.text:00404CD0
.text:00404CD0 ; =============== S U B R O U T I N E =======================================
.text:00404CD0
.text:00404CD0
.text:00404CD0 ; void __cdecl std::logic_error::~logic_error(std::logic_error *__hidden this)
.text:00404CD0                 public __ZNSt11logic_errorD0Ev
.text:00404CD0 __ZNSt11logic_errorD0Ev proc near       ; DATA XREF: .rdata:004163A4↓o
.text:00404CD0
.text:00404CD0 var_1C          = dword ptr -1Ch
.text:00404CD0 this            = dword ptr  4
.text:00404CD0
.text:00404CD0                 push    ebx
.text:00404CD1                 sub     esp, 18h
.text:00404CD4                 mov     ebx, ecx
.text:00404CD6                 call    __ZNSt11logic_errorD1Ev ; std::logic_error::~logic_error()
.text:00404CDB                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:00404CDE                 call    __ZdlPv         ; operator delete(void *)
.text:00404CE3                 add     esp, 18h
.text:00404CE6                 pop     ebx
.text:00404CE7                 retn
.text:00404CE7 __ZNSt11logic_errorD0Ev endp
.text:00404CE7
.text:00404CE8
.text:00404CE8 ; =============== S U B R O U T I N E =======================================
.text:00404CE8
.text:00404CE8
.text:00404CE8 ; void __cdecl std::out_of_range::~out_of_range(void *)
.text:00404CE8                 public __ZNSt12out_of_rangeD1Ev
.text:00404CE8 __ZNSt12out_of_rangeD1Ev proc near      ; CODE XREF: std::out_of_range::~out_of_range()+6↓p
.text:00404CE8                                         ; DATA XREF: std::__throw_out_of_range(char const*)+89↑o ...
.text:00404CE8                 mov     dword ptr [ecx], offset off_416430
.text:00404CEE                 jmp     __ZNSt11logic_errorD1Ev ; std::logic_error::~logic_error()
.text:00404CEE __ZNSt12out_of_rangeD1Ev endp
.text:00404CEE
.text:00404CEE ; ---------------------------------------------------------------------------
.text:00404CF3                 align 4
.text:00404CF4
.text:00404CF4 ; =============== S U B R O U T I N E =======================================
.text:00404CF4
.text:00404CF4
.text:00404CF4 ; void __cdecl std::out_of_range::~out_of_range(std::out_of_range *__hidden this)
.text:00404CF4                 public __ZNSt12out_of_rangeD0Ev
.text:00404CF4 __ZNSt12out_of_rangeD0Ev proc near      ; DATA XREF: .rdata:00416434↓o
.text:00404CF4
.text:00404CF4 var_1C          = dword ptr -1Ch
.text:00404CF4 this            = dword ptr  4
.text:00404CF4
.text:00404CF4                 push    ebx
.text:00404CF5                 sub     esp, 18h
.text:00404CF8                 mov     ebx, ecx
.text:00404CFA                 call    __ZNSt12out_of_rangeD1Ev ; std::out_of_range::~out_of_range()
.text:00404CFF                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:00404D02                 call    __ZdlPv         ; operator delete(void *)
.text:00404D07                 add     esp, 18h
.text:00404D0A                 pop     ebx
.text:00404D0B                 retn
.text:00404D0B __ZNSt12out_of_rangeD0Ev endp
.text:00404D0B
.text:00404D0C
.text:00404D0C ; =============== S U B R O U T I N E =======================================
.text:00404D0C
.text:00404D0C
.text:00404D0C ; void __cdecl std::length_error::~length_error(void *)
.text:00404D0C                 public __ZNSt12length_errorD1Ev
.text:00404D0C __ZNSt12length_errorD1Ev proc near      ; CODE XREF: std::length_error::~length_error()+6↓p
.text:00404D0C                                         ; DATA XREF: std::__throw_length_error(char const*)+89↑o ...
.text:00404D0C                 mov     dword ptr [ecx], offset off_416418
.text:00404D12                 jmp     __ZNSt11logic_errorD1Ev ; std::logic_error::~logic_error()
.text:00404D12 __ZNSt12length_errorD1Ev endp
.text:00404D12
.text:00404D12 ; ---------------------------------------------------------------------------
.text:00404D17                 align 4
.text:00404D18
.text:00404D18 ; =============== S U B R O U T I N E =======================================
.text:00404D18
.text:00404D18
.text:00404D18 ; void __cdecl std::length_error::~length_error(std::length_error *__hidden this)
.text:00404D18                 public __ZNSt12length_errorD0Ev
.text:00404D18 __ZNSt12length_errorD0Ev proc near      ; DATA XREF: .rdata:0041641C↓o
.text:00404D18
.text:00404D18 var_1C          = dword ptr -1Ch
.text:00404D18 this            = dword ptr  4
.text:00404D18
.text:00404D18                 push    ebx
.text:00404D19                 sub     esp, 18h
.text:00404D1C                 mov     ebx, ecx
.text:00404D1E                 call    __ZNSt12length_errorD1Ev ; std::length_error::~length_error()
.text:00404D23                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:00404D26                 call    __ZdlPv         ; operator delete(void *)
.text:00404D2B                 add     esp, 18h
.text:00404D2E                 pop     ebx
.text:00404D2F                 retn
.text:00404D2F __ZNSt12length_errorD0Ev endp
.text:00404D2F
.text:00404D30
.text:00404D30 ; =============== S U B R O U T I N E =======================================
.text:00404D30
.text:00404D30
.text:00404D30 ; void __cdecl std::invalid_argument::~invalid_argument(void *)
.text:00404D30                 public __ZNSt16invalid_argumentD1Ev
.text:00404D30 __ZNSt16invalid_argumentD1Ev proc near  ; CODE XREF: std::invalid_argument::~invalid_argument()+6↓p
.text:00404D30                                         ; DATA XREF: std::__throw_invalid_argument(char const*)+89↑o ...
.text:00404D30                 mov     dword ptr [ecx], offset off_416518
.text:00404D36                 jmp     __ZNSt11logic_errorD1Ev ; std::logic_error::~logic_error()
.text:00404D36 __ZNSt16invalid_argumentD1Ev endp
.text:00404D36
.text:00404D36 ; ---------------------------------------------------------------------------
.text:00404D3B                 align 4
.text:00404D3C
.text:00404D3C ; =============== S U B R O U T I N E =======================================
.text:00404D3C
.text:00404D3C
.text:00404D3C ; void __cdecl std::invalid_argument::~invalid_argument(std::invalid_argument *__hidden this)
.text:00404D3C                 public __ZNSt16invalid_argumentD0Ev
.text:00404D3C __ZNSt16invalid_argumentD0Ev proc near  ; DATA XREF: .rdata:0041651C↓o
.text:00404D3C
.text:00404D3C var_1C          = dword ptr -1Ch
.text:00404D3C this            = dword ptr  4
.text:00404D3C
.text:00404D3C                 push    ebx
.text:00404D3D                 sub     esp, 18h
.text:00404D40                 mov     ebx, ecx
.text:00404D42                 call    __ZNSt16invalid_argumentD1Ev ; std::invalid_argument::~invalid_argument()
.text:00404D47                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:00404D4A                 call    __ZdlPv         ; operator delete(void *)
.text:00404D4F                 add     esp, 18h
.text:00404D52                 pop     ebx
.text:00404D53                 retn
.text:00404D53 __ZNSt16invalid_argumentD0Ev endp
.text:00404D53
.text:00404D54
.text:00404D54 ; =============== S U B R O U T I N E =======================================
.text:00404D54
.text:00404D54
.text:00404D54 ; void __cdecl std::domain_error::~domain_error(void *)
.text:00404D54                 public __ZNSt12domain_errorD1Ev
.text:00404D54 __ZNSt12domain_errorD1Ev proc near      ; CODE XREF: std::domain_error::~domain_error()+6↓p
.text:00404D54                                         ; DATA XREF: std::__throw_domain_error(char const*)+89↑o ...
.text:00404D54                 mov     dword ptr [ecx], offset off_4163E8
.text:00404D5A                 jmp     __ZNSt11logic_errorD1Ev ; std::logic_error::~logic_error()
.text:00404D5A __ZNSt12domain_errorD1Ev endp
.text:00404D5A
.text:00404D5A ; ---------------------------------------------------------------------------
.text:00404D5F                 align 10h
.text:00404D60
.text:00404D60 ; =============== S U B R O U T I N E =======================================
.text:00404D60
.text:00404D60
.text:00404D60 ; void __cdecl std::domain_error::~domain_error(std::domain_error *__hidden this)
.text:00404D60                 public __ZNSt12domain_errorD0Ev
.text:00404D60 __ZNSt12domain_errorD0Ev proc near      ; DATA XREF: .rdata:004163EC↓o
.text:00404D60
.text:00404D60 var_1C          = dword ptr -1Ch
.text:00404D60 this            = dword ptr  4
.text:00404D60
.text:00404D60                 push    ebx
.text:00404D61                 sub     esp, 18h
.text:00404D64                 mov     ebx, ecx
.text:00404D66                 call    __ZNSt12domain_errorD1Ev ; std::domain_error::~domain_error()
.text:00404D6B                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:00404D6E                 call    __ZdlPv         ; operator delete(void *)
.text:00404D73                 add     esp, 18h
.text:00404D76                 pop     ebx
.text:00404D77                 retn
.text:00404D77 __ZNSt12domain_errorD0Ev endp
.text:00404D77
.text:00404D78
.text:00404D78 ; =============== S U B R O U T I N E =======================================
.text:00404D78
.text:00404D78
.text:00404D78 ; _DWORD __stdcall std::logic_error::logic_error(std::logic_error *__hidden this, const std::string *)
.text:00404D78                 public __ZNSt11logic_errorC1ERKSs
.text:00404D78 __ZNSt11logic_errorC1ERKSs proc near    ; CODE XREF: std::__throw_logic_error(char const*)+7A↑p
.text:00404D78                                         ; std::__throw_future_error(int)+83↑p ...
.text:00404D78
.text:00404D78 lpfctx          = dword ptr -5Ch
.text:00404D78 var_48          = dword ptr -48h
.text:00404D78 fctx            = SjLj_Function_Context ptr -40h
.text:00404D78 var_1C          = dword ptr -1Ch
.text:00404D78 var_18          = dword ptr -18h
.text:00404D78 var_C           = byte ptr -0Ch
.text:00404D78 this            = dword ptr  4
.text:00404D78 arg_10          = dword ptr  14h
.text:00404D78 lpuexcpt        = dword ptr  18h
.text:00404D78 arg_1C          = dword ptr  20h
.text:00404D78 arg_20          = dword ptr  24h
.text:00404D78
.text:00404D78                 push    ebp
.text:00404D79                 sub     esp, 58h
.text:00404D7C                 mov     [esp+5Ch+var_48], ecx
.text:00404D80                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00404D88                 mov     [esp+5Ch+fctx.lsda], offset dword_412394
.text:00404D90                 lea     eax, [esp+5Ch+var_C]
.text:00404D94                 mov     [esp+5Ch+fctx.jbuf], eax
.text:00404D98                 mov     [esp+5Ch+var_1C], offset loc_404DE7
.text:00404DA0                 mov     [esp+5Ch+var_18], esp
.text:00404DA4                 lea     eax, [esp+5Ch+fctx]
.text:00404DA8                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:00404DAB                 call    __Unwind_SjLj_Register
.text:00404DB0 ; __unwind { // ___gxx_personality_sj0
.text:00404DB0 ;   try {
.text:00404DB0                 mov     eax, [esp+5Ch+var_48]
.text:00404DB4                 mov     dword ptr [eax], offset off_4163A0
.text:00404DBA                 mov     ecx, eax
.text:00404DBC                 add     ecx, 4
.text:00404DBF                 mov     eax, [esp+5Ch+this]
.text:00404DC3                 mov     [esp+5Ch+lpfctx], eax ; this
.text:00404DC6                 mov     [esp+5Ch+fctx.call_site], 1
.text:00404DCE                 call    __ZNSsC1ERKSs   ; std::string::string(std::string const&)
.text:00404DD3                 push    eax
.text:00404DD4                 lea     eax, [esp+5Ch+fctx]
.text:00404DD8                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:00404DDB                 call    __Unwind_SjLj_Unregister
.text:00404DE0                 add     esp, 58h
.text:00404DE3                 pop     ebp
.text:00404DE4                 retn    4
.text:00404DE7 ; ---------------------------------------------------------------------------
.text:00404DE7
.text:00404DE7 loc_404DE7:                             ; DATA XREF: std::logic_error::logic_error(std::string const&)+20↑o
.text:00404DE7 ;   cleanup() // owned by 404DB0
.text:00404DE7                 mov     eax, [esp+arg_20]
.text:00404DEB                 mov     [esp+lpuexcpt], eax
.text:00404DEF                 mov     ecx, [esp+arg_10]
.text:00404DF3                 call    __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:00404DF8                 mov     eax, [esp+lpuexcpt]
.text:00404DFC                 mov     [esp+0], eax    ; lpuexcpt
.text:00404DFF                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00404E07                 call    __Unwind_SjLj_Resume
.text:00404E07 ;   } // starts at 404DB0
.text:00404E07 ; } // starts at 404DB0
.text:00404E07 __ZNSt11logic_errorC1ERKSs endp
.text:00404E07
.text:00404E0C
.text:00404E0C ; =============== S U B R O U T I N E =======================================
.text:00404E0C
.text:00404E0C
.text:00404E0C ; _DWORD __stdcall std::domain_error::domain_error(std::domain_error *__hidden this, const std::string *)
.text:00404E0C                 public __ZNSt12domain_errorC1ERKSs
.text:00404E0C __ZNSt12domain_errorC1ERKSs proc near   ; CODE XREF: std::__throw_domain_error(char const*)+7A↑p
.text:00404E0C
.text:00404E0C var_1C          = dword ptr -1Ch
.text:00404E0C this            = dword ptr  4
.text:00404E0C
.text:00404E0C                 push    ebx
.text:00404E0D                 sub     esp, 18h
.text:00404E10                 mov     ebx, ecx
.text:00404E12                 mov     eax, [esp+1Ch+this]
.text:00404E16                 mov     [esp+1Ch+var_1C], eax ; this
.text:00404E19                 call    __ZNSt11logic_errorC1ERKSs ; std::logic_error::logic_error(std::string const&)
.text:00404E1E                 push    eax
.text:00404E1F                 mov     dword ptr [ebx], offset off_4163E8
.text:00404E25                 add     esp, 18h
.text:00404E28                 pop     ebx
.text:00404E29                 retn    4
.text:00404E29 __ZNSt12domain_errorC1ERKSs endp
.text:00404E29
.text:00404E2C
.text:00404E2C ; =============== S U B R O U T I N E =======================================
.text:00404E2C
.text:00404E2C
.text:00404E2C ; _DWORD __stdcall std::invalid_argument::invalid_argument(std::invalid_argument *__hidden this, const std::string *)
.text:00404E2C                 public __ZNSt16invalid_argumentC1ERKSs
.text:00404E2C __ZNSt16invalid_argumentC1ERKSs proc near
.text:00404E2C                                         ; CODE XREF: std::__throw_invalid_argument(char const*)+7A↑p
.text:00404E2C
.text:00404E2C var_1C          = dword ptr -1Ch
.text:00404E2C this            = dword ptr  4
.text:00404E2C
.text:00404E2C                 push    ebx
.text:00404E2D                 sub     esp, 18h
.text:00404E30                 mov     ebx, ecx
.text:00404E32                 mov     eax, [esp+1Ch+this]
.text:00404E36                 mov     [esp+1Ch+var_1C], eax ; this
.text:00404E39                 call    __ZNSt11logic_errorC1ERKSs ; std::logic_error::logic_error(std::string const&)
.text:00404E3E                 push    eax
.text:00404E3F                 mov     dword ptr [ebx], offset off_416518
.text:00404E45                 add     esp, 18h
.text:00404E48                 pop     ebx
.text:00404E49                 retn    4
.text:00404E49 __ZNSt16invalid_argumentC1ERKSs endp
.text:00404E49
.text:00404E4C
.text:00404E4C ; =============== S U B R O U T I N E =======================================
.text:00404E4C
.text:00404E4C
.text:00404E4C ; _DWORD __stdcall std::length_error::length_error(std::length_error *__hidden this, const std::string *)
.text:00404E4C                 public __ZNSt12length_errorC1ERKSs
.text:00404E4C __ZNSt12length_errorC1ERKSs proc near   ; CODE XREF: std::__throw_length_error(char const*)+7A↑p
.text:00404E4C
.text:00404E4C var_1C          = dword ptr -1Ch
.text:00404E4C this            = dword ptr  4
.text:00404E4C
.text:00404E4C                 push    ebx
.text:00404E4D                 sub     esp, 18h
.text:00404E50                 mov     ebx, ecx
.text:00404E52                 mov     eax, [esp+1Ch+this]
.text:00404E56                 mov     [esp+1Ch+var_1C], eax ; this
.text:00404E59                 call    __ZNSt11logic_errorC1ERKSs ; std::logic_error::logic_error(std::string const&)
.text:00404E5E                 push    eax
.text:00404E5F                 mov     dword ptr [ebx], offset off_416418
.text:00404E65                 add     esp, 18h
.text:00404E68                 pop     ebx
.text:00404E69                 retn    4
.text:00404E69 __ZNSt12length_errorC1ERKSs endp
.text:00404E69
.text:00404E6C
.text:00404E6C ; =============== S U B R O U T I N E =======================================
.text:00404E6C
.text:00404E6C
.text:00404E6C ; _DWORD __stdcall std::out_of_range::out_of_range(std::out_of_range *__hidden this, const std::string *)
.text:00404E6C                 public __ZNSt12out_of_rangeC1ERKSs
.text:00404E6C __ZNSt12out_of_rangeC1ERKSs proc near   ; CODE XREF: std::__throw_out_of_range(char const*)+7A↑p
.text:00404E6C
.text:00404E6C var_1C          = dword ptr -1Ch
.text:00404E6C this            = dword ptr  4
.text:00404E6C
.text:00404E6C                 push    ebx
.text:00404E6D                 sub     esp, 18h
.text:00404E70                 mov     ebx, ecx
.text:00404E72                 mov     eax, [esp+1Ch+this]
.text:00404E76                 mov     [esp+1Ch+var_1C], eax ; this
.text:00404E79                 call    __ZNSt11logic_errorC1ERKSs ; std::logic_error::logic_error(std::string const&)
.text:00404E7E                 push    eax
.text:00404E7F                 mov     dword ptr [ebx], offset off_416430
.text:00404E85                 add     esp, 18h
.text:00404E88                 pop     ebx
.text:00404E89                 retn    4
.text:00404E89 __ZNSt12out_of_rangeC1ERKSs endp
.text:00404E89
.text:00404E8C
.text:00404E8C ; =============== S U B R O U T I N E =======================================
.text:00404E8C
.text:00404E8C
.text:00404E8C ; _DWORD __stdcall std::runtime_error::runtime_error(std::runtime_error *__hidden this, const std::string *)
.text:00404E8C                 public __ZNSt13runtime_errorC1ERKSs
.text:00404E8C __ZNSt13runtime_errorC1ERKSs proc near  ; CODE XREF: std::__throw_runtime_error(char const*)+7A↑p
.text:00404E8C                                         ; std::__throw_system_error(int)+83↑p ...
.text:00404E8C
.text:00404E8C lpfctx          = dword ptr -5Ch
.text:00404E8C var_48          = dword ptr -48h
.text:00404E8C fctx            = SjLj_Function_Context ptr -40h
.text:00404E8C var_1C          = dword ptr -1Ch
.text:00404E8C var_18          = dword ptr -18h
.text:00404E8C var_C           = byte ptr -0Ch
.text:00404E8C this            = dword ptr  4
.text:00404E8C arg_10          = dword ptr  14h
.text:00404E8C lpuexcpt        = dword ptr  18h
.text:00404E8C arg_1C          = dword ptr  20h
.text:00404E8C arg_20          = dword ptr  24h
.text:00404E8C
.text:00404E8C                 push    ebp
.text:00404E8D                 sub     esp, 58h
.text:00404E90                 mov     [esp+5Ch+var_48], ecx
.text:00404E94                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00404E9C                 mov     [esp+5Ch+fctx.lsda], offset word_41239A
.text:00404EA4                 lea     eax, [esp+5Ch+var_C]
.text:00404EA8                 mov     [esp+5Ch+fctx.jbuf], eax
.text:00404EAC                 mov     [esp+5Ch+var_1C], offset loc_404EFB
.text:00404EB4                 mov     [esp+5Ch+var_18], esp
.text:00404EB8                 lea     eax, [esp+5Ch+fctx]
.text:00404EBC                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:00404EBF                 call    __Unwind_SjLj_Register
.text:00404EC4 ; __unwind { // ___gxx_personality_sj0
.text:00404EC4 ;   try {
.text:00404EC4                 mov     eax, [esp+5Ch+var_48]
.text:00404EC8                 mov     dword ptr [eax], offset off_416478
.text:00404ECE                 mov     ecx, eax
.text:00404ED0                 add     ecx, 4
.text:00404ED3                 mov     eax, [esp+5Ch+this]
.text:00404ED7                 mov     [esp+5Ch+lpfctx], eax ; this
.text:00404EDA                 mov     [esp+5Ch+fctx.call_site], 1
.text:00404EE2                 call    __ZNSsC1ERKSs   ; std::string::string(std::string const&)
.text:00404EE7                 push    edx
.text:00404EE8                 lea     eax, [esp+5Ch+fctx]
.text:00404EEC                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:00404EEF                 call    __Unwind_SjLj_Unregister
.text:00404EF4                 add     esp, 58h
.text:00404EF7                 pop     ebp
.text:00404EF8                 retn    4
.text:00404EFB ; ---------------------------------------------------------------------------
.text:00404EFB
.text:00404EFB loc_404EFB:                             ; DATA XREF: std::runtime_error::runtime_error(std::string const&)+20↑o
.text:00404EFB ;   cleanup() // owned by 404EC4
.text:00404EFB                 mov     eax, [esp+arg_20]
.text:00404EFF                 mov     [esp+lpuexcpt], eax
.text:00404F03                 mov     ecx, [esp+arg_10]
.text:00404F07                 call    __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:00404F0C                 mov     eax, [esp+lpuexcpt]
.text:00404F10                 mov     [esp+0], eax    ; lpuexcpt
.text:00404F13                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00404F1B                 call    __Unwind_SjLj_Resume
.text:00404F1B ;   } // starts at 404EC4
.text:00404F1B ; } // starts at 404EC4
.text:00404F1B __ZNSt13runtime_errorC1ERKSs endp
.text:00404F1B
.text:00404F20
.text:00404F20 ; =============== S U B R O U T I N E =======================================
.text:00404F20
.text:00404F20
.text:00404F20 ; _DWORD __stdcall std::range_error::range_error(std::range_error *__hidden this, const std::string *)
.text:00404F20                 public __ZNSt11range_errorC1ERKSs
.text:00404F20 __ZNSt11range_errorC1ERKSs proc near    ; CODE XREF: std::__throw_range_error(char const*)+7A↑p
.text:00404F20
.text:00404F20 var_1C          = dword ptr -1Ch
.text:00404F20 this            = dword ptr  4
.text:00404F20
.text:00404F20                 push    ebx
.text:00404F21                 sub     esp, 18h
.text:00404F24                 mov     ebx, ecx
.text:00404F26                 mov     eax, [esp+1Ch+this]
.text:00404F2A                 mov     [esp+1Ch+var_1C], eax ; this
.text:00404F2D                 call    __ZNSt13runtime_errorC1ERKSs ; std::runtime_error::runtime_error(std::string const&)
.text:00404F32                 push    ecx
.text:00404F33                 mov     dword ptr [ebx], offset off_4163B8
.text:00404F39                 add     esp, 18h
.text:00404F3C                 pop     ebx
.text:00404F3D                 retn    4
.text:00404F3D __ZNSt11range_errorC1ERKSs endp
.text:00404F3D
.text:00404F40
.text:00404F40 ; =============== S U B R O U T I N E =======================================
.text:00404F40
.text:00404F40
.text:00404F40 ; _DWORD __stdcall std::overflow_error::overflow_error(std::overflow_error *__hidden this, const std::string *)
.text:00404F40                 public __ZNSt14overflow_errorC1ERKSs
.text:00404F40 __ZNSt14overflow_errorC1ERKSs proc near ; CODE XREF: std::__throw_overflow_error(char const*)+7A↑p
.text:00404F40
.text:00404F40 var_1C          = dword ptr -1Ch
.text:00404F40 this            = dword ptr  4
.text:00404F40
.text:00404F40                 push    ebx
.text:00404F41                 sub     esp, 18h
.text:00404F44                 mov     ebx, ecx
.text:00404F46                 mov     eax, [esp+1Ch+this]
.text:00404F4A                 mov     [esp+1Ch+var_1C], eax ; this
.text:00404F4D                 call    __ZNSt13runtime_errorC1ERKSs ; std::runtime_error::runtime_error(std::string const&)
.text:00404F52                 push    eax
.text:00404F53                 mov     dword ptr [ebx], offset off_4164E8
.text:00404F59                 add     esp, 18h
.text:00404F5C                 pop     ebx
.text:00404F5D                 retn    4
.text:00404F5D __ZNSt14overflow_errorC1ERKSs endp
.text:00404F5D
.text:00404F60
.text:00404F60 ; =============== S U B R O U T I N E =======================================
.text:00404F60
.text:00404F60
.text:00404F60 ; _DWORD __stdcall std::underflow_error::underflow_error(std::underflow_error *__hidden this, const std::string *)
.text:00404F60                 public __ZNSt15underflow_errorC1ERKSs
.text:00404F60 __ZNSt15underflow_errorC1ERKSs proc near
.text:00404F60                                         ; CODE XREF: std::__throw_underflow_error(char const*)+7A↑p
.text:00404F60
.text:00404F60 var_1C          = dword ptr -1Ch
.text:00404F60 this            = dword ptr  4
.text:00404F60
.text:00404F60                 push    ebx
.text:00404F61                 sub     esp, 18h
.text:00404F64                 mov     ebx, ecx
.text:00404F66                 mov     eax, [esp+1Ch+this]
.text:00404F6A                 mov     [esp+1Ch+var_1C], eax ; this
.text:00404F6D                 call    __ZNSt13runtime_errorC1ERKSs ; std::runtime_error::runtime_error(std::string const&)
.text:00404F72                 push    eax
.text:00404F73                 mov     dword ptr [ebx], offset off_416500
.text:00404F79                 add     esp, 18h
.text:00404F7C                 pop     ebx
.text:00404F7D                 retn    4
.text:00404F7D __ZNSt15underflow_errorC1ERKSs endp
.text:00404F7D
.text:00404F80
.text:00404F80 ; =============== S U B R O U T I N E =======================================
.text:00404F80
.text:00404F80
.text:00404F80 ; std::string::append(unsigned int, char) [clone]
.text:00404F80 __ZNSs6appendEjc_part_22 proc near      ; CODE XREF: std::string::append(uint,char)+1A↓p
.text:00404F80                                         ; std::operator+<char,std::char_traits<char>,std::allocator<char>>(char,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const&)+99↓p
.text:00404F80
.text:00404F80 var_2C          = dword ptr -2Ch
.text:00404F80 arg_0           = dword ptr  4
.text:00404F80 arg_4           = byte ptr  8
.text:00404F80
.text:00404F80                 push    ebp
.text:00404F81                 push    edi
.text:00404F82                 push    esi
.text:00404F83                 push    ebx
.text:00404F84                 sub     esp, 1Ch
.text:00404F87                 mov     ebp, ecx
.text:00404F89                 mov     bl, [esp+2Ch+arg_4]
.text:00404F8D                 mov     edx, [ecx]
.text:00404F8F                 mov     ecx, [edx-0Ch]
.text:00404F92                 mov     esi, 3FFFFFFCh
.text:00404F97                 sub     esi, ecx
.text:00404F99                 cmp     [esp+2Ch+arg_0], esi
.text:00404F9D                 ja      short loc_405000
.text:00404F9F                 mov     esi, [esp+2Ch+arg_0]
.text:00404FA3                 add     esi, ecx
.text:00404FA5                 cmp     esi, [edx-8]
.text:00404FA8                 jbe     short loc_404FEC
.text:00404FAA
.text:00404FAA loc_404FAA:                             ; CODE XREF: std::string::append(uint,char) [clone]+71↓j
.text:00404FAA                 mov     [esp+2Ch+var_2C], esi ; this
.text:00404FAD                 mov     ecx, ebp
.text:00404FAF                 call    __ZNSs7reserveEj ; std::string::reserve(uint)
.text:00404FB4                 push    edi
.text:00404FB5                 mov     edx, [ebp+0]
.text:00404FB8                 mov     ecx, [edx-0Ch]
.text:00404FBB                 add     edx, ecx
.text:00404FBD                 cmp     [esp+2Ch+arg_0], 1
.text:00404FC2                 jz      short loc_404FFC
.text:00404FC4
.text:00404FC4 loc_404FC4:                             ; CODE XREF: std::string::append(uint,char) [clone]+7A↓j
.text:00404FC4                 mov     edi, edx
.text:00404FC6                 mov     ecx, [esp+2Ch+arg_0]
.text:00404FCA                 mov     al, bl
.text:00404FCC                 rep stosb
.text:00404FCE
.text:00404FCE loc_404FCE:                             ; CODE XREF: std::string::append(uint,char) [clone]+7E↓j
.text:00404FCE                 mov     eax, [ebp+0]
.text:00404FD1                 mov     dword ptr [eax-4], 0
.text:00404FD8                 mov     [eax-0Ch], esi
.text:00404FDB                 mov     byte ptr [eax+esi], 0
.text:00404FDF                 xor     eax, eax
.text:00404FE1                 add     esp, 1Ch
.text:00404FE4                 pop     ebx
.text:00404FE5                 pop     esi
.text:00404FE6                 pop     edi
.text:00404FE7                 pop     ebp
.text:00404FE8                 retn    8
.text:00404FE8 ; ---------------------------------------------------------------------------
.text:00404FEB                 align 4
.text:00404FEC
.text:00404FEC loc_404FEC:                             ; CODE XREF: std::string::append(uint,char) [clone]+28↑j
.text:00404FEC                 mov     eax, [edx-4]
.text:00404FEF                 test    eax, eax
.text:00404FF1                 jg      short loc_404FAA
.text:00404FF3                 add     edx, ecx
.text:00404FF5                 cmp     [esp+2Ch+arg_0], 1
.text:00404FFA                 jnz     short loc_404FC4
.text:00404FFC
.text:00404FFC loc_404FFC:                             ; CODE XREF: std::string::append(uint,char) [clone]+42↑j
.text:00404FFC                 mov     [edx], bl
.text:00404FFE                 jmp     short loc_404FCE
.text:00405000 ; ---------------------------------------------------------------------------
.text:00405000
.text:00405000 loc_405000:                             ; CODE XREF: std::string::append(uint,char) [clone]+1D↑j
.text:00405000                 mov     [esp+2Ch+var_2C], offset aBasicStringApp ; "basic_string::append"
.text:00405007                 call    __ZSt20__throw_length_errorPKc ; std::__throw_length_error(char const*)
.text:00405007 __ZNSs6appendEjc_part_22 endp
.text:00405007
.text:0040500C
.text:0040500C ; =============== S U B R O U T I N E =======================================
.text:0040500C
.text:0040500C
.text:0040500C ; _DWORD std::ios_base::failure::what(std::ios_base::failure *__hidden this)
.text:0040500C                 public __ZNKSt8ios_base7failure4whatEv
.text:0040500C __ZNKSt8ios_base7failure4whatEv proc near
.text:0040500C                                         ; DATA XREF: .rdata:00416378↓o
.text:0040500C
.text:0040500C this            = dword ptr  4
.text:0040500C
.text:0040500C                 mov     eax, [ecx+4]
.text:0040500F                 retn
.text:0040500F __ZNKSt8ios_base7failure4whatEv endp
.text:0040500F
.text:00405010
.text:00405010 ; =============== S U B R O U T I N E =======================================
.text:00405010
.text:00405010
.text:00405010 ; void __cdecl std::ios_base::failure::~failure(void *)
.text:00405010                 public __ZNSt8ios_base7failureD1Ev
.text:00405010 __ZNSt8ios_base7failureD1Ev proc near   ; CODE XREF: std::ios_base::failure::~failure()+6↓p
.text:00405010                                         ; DATA XREF: std::__throw_ios_failure(char const*)+81↑o ...
.text:00405010
.text:00405010 var_2C          = dword ptr -2Ch
.text:00405010 var_28          = dword ptr -28h
.text:00405010 var_D           = dword ptr -0Dh
.text:00405010
.text:00405010                 push    esi
.text:00405011                 push    ebx
.text:00405012                 sub     esp, 24h
.text:00405015                 mov     ebx, ecx
.text:00405017                 mov     dword ptr [ecx], offset off_416370
.text:0040501D                 mov     esi, [ecx+4]
.text:00405020                 mov     edx, ds:__CRT_MT
.text:00405026                 test    edx, edx
.text:00405028                 jnz     short loc_405044
.text:0040502A                 mov     eax, [esi-4]
.text:0040502D                 lea     edx, [eax-1]
.text:00405030                 mov     [esi-4], edx
.text:00405033                 test    eax, eax
.text:00405035                 jle     short loc_40505B
.text:00405037
.text:00405037 loc_405037:                             ; CODE XREF: std::ios_base::failure::~failure()+49↓j
.text:00405037                 mov     ecx, ebx
.text:00405039                 call    __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:0040503E                 add     esp, 24h
.text:00405041                 pop     ebx
.text:00405042                 pop     esi
.text:00405043                 retn
.text:00405044 ; ---------------------------------------------------------------------------
.text:00405044
.text:00405044 loc_405044:                             ; CODE XREF: std::ios_base::failure::~failure()+18↑j
.text:00405044                 mov     [esp+2Ch+var_28], 0FFFFFFFFh ; int
.text:0040504C                 lea     eax, [esi-4]
.text:0040504F                 mov     [esp+2Ch+var_2C], eax ; volatile int *
.text:00405052                 call    __ZN9__gnu_cxx18__exchange_and_addEPVii ; __gnu_cxx::__exchange_and_add(int volatile*,int)
.text:00405057                 test    eax, eax
.text:00405059                 jg      short loc_405037
.text:0040505B
.text:0040505B loc_40505B:                             ; CODE XREF: std::ios_base::failure::~failure()+25↑j
.text:0040505B                 lea     ecx, [esi-0Ch]  ; void *
.text:0040505E                 lea     eax, [esp+2Ch+var_D]
.text:00405062                 mov     [esp+2Ch+var_2C], eax ; int
.text:00405065                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0040506A                 push    eax             ; this
.text:0040506B                 mov     ecx, ebx
.text:0040506D                 call    __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:00405072                 add     esp, 24h
.text:00405075                 pop     ebx
.text:00405076                 pop     esi
.text:00405077                 retn
.text:00405077 __ZNSt8ios_base7failureD1Ev endp
.text:00405077
.text:00405078
.text:00405078 ; =============== S U B R O U T I N E =======================================
.text:00405078
.text:00405078
.text:00405078 ; void __cdecl std::ios_base::failure::~failure(std::ios_base::failure *__hidden this)
.text:00405078                 public __ZNSt8ios_base7failureD0Ev
.text:00405078 __ZNSt8ios_base7failureD0Ev proc near   ; DATA XREF: .rdata:00416374↓o
.text:00405078
.text:00405078 var_1C          = dword ptr -1Ch
.text:00405078 this            = dword ptr  4
.text:00405078
.text:00405078                 push    ebx
.text:00405079                 sub     esp, 18h
.text:0040507C                 mov     ebx, ecx
.text:0040507E                 call    __ZNSt8ios_base7failureD1Ev ; std::ios_base::failure::~failure()
.text:00405083                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:00405086                 call    __ZdlPv         ; operator delete(void *)
.text:0040508B                 add     esp, 18h
.text:0040508E                 pop     ebx
.text:0040508F                 retn
.text:0040508F __ZNSt8ios_base7failureD0Ev endp
.text:0040508F
.text:00405090
.text:00405090 ; =============== S U B R O U T I N E =======================================
.text:00405090
.text:00405090
.text:00405090 ; _DWORD __stdcall std::ios_base::failure::failure(std::ios_base::failure *__hidden this, const std::string *)
.text:00405090                 public __ZNSt8ios_base7failureC1ERKSs
.text:00405090 __ZNSt8ios_base7failureC1ERKSs proc near
.text:00405090                                         ; CODE XREF: std::__throw_ios_failure(char const*)+72↑p
.text:00405090
.text:00405090 lpfctx          = dword ptr -5Ch
.text:00405090 var_4C          = dword ptr -4Ch
.text:00405090 fctx            = SjLj_Function_Context ptr -40h
.text:00405090 var_1C          = dword ptr -1Ch
.text:00405090 var_18          = dword ptr -18h
.text:00405090 var_C           = byte ptr -0Ch
.text:00405090 this            = dword ptr  4
.text:00405090 arg_C           = dword ptr  10h
.text:00405090 lpuexcpt        = dword ptr  14h
.text:00405090 arg_14          = dword ptr  18h
.text:00405090 arg_1C          = dword ptr  20h
.text:00405090 arg_20          = dword ptr  24h
.text:00405090 arg_24          = dword ptr  28h
.text:00405090
.text:00405090                 push    ebp
.text:00405091                 sub     esp, 58h
.text:00405094                 mov     [esp+5Ch+var_4C], ecx
.text:00405098                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:004050A0                 mov     [esp+5Ch+fctx.lsda], offset dword_4123E4
.text:004050A8                 lea     eax, [esp+5Ch+var_C]
.text:004050AC                 mov     [esp+5Ch+fctx.jbuf], eax
.text:004050B0                 mov     [esp+5Ch+var_1C], offset loc_4050FF
.text:004050B8                 mov     [esp+5Ch+var_18], esp
.text:004050BC                 lea     eax, [esp+5Ch+fctx]
.text:004050C0                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:004050C3                 call    __Unwind_SjLj_Register
.text:004050C8 ; __unwind { // ___gxx_personality_sj0
.text:004050C8 ;   try {
.text:004050C8                 mov     eax, [esp+5Ch+var_4C]
.text:004050CC                 mov     dword ptr [eax], offset off_416370
.text:004050D2                 mov     ecx, eax
.text:004050D4                 add     ecx, 4
.text:004050D7                 mov     eax, [esp+5Ch+this]
.text:004050DB                 mov     [esp+5Ch+lpfctx], eax ; this
.text:004050DE                 mov     [esp+5Ch+fctx.call_site], 1
.text:004050E6                 call    __ZNSsC1ERKSs   ; std::string::string(std::string const&)
.text:004050EB                 push    ecx
.text:004050EC                 lea     eax, [esp+5Ch+fctx]
.text:004050F0                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:004050F3                 call    __Unwind_SjLj_Unregister
.text:004050F8                 add     esp, 58h
.text:004050FB                 pop     ebp
.text:004050FC                 retn    4
.text:004050FF ; ---------------------------------------------------------------------------
.text:004050FF
.text:004050FF loc_4050FF:                             ; DATA XREF: std::ios_base::failure::failure(std::string const&)+20↑o
.text:004050FF                 mov     eax, [esp+arg_20]
.text:00405103                 mov     [esp+lpuexcpt], eax
.text:00405107                 mov     eax, [esp+arg_24]
.text:0040510B                 mov     [esp+arg_14], eax
.text:0040510F                 mov     ecx, [esp+arg_C]
.text:00405113                 call    __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:00405118                 mov     eax, [esp+lpuexcpt]
.text:0040511C                 cmp     [esp+arg_14], 0FFFFFFFFh
.text:00405121                 mov     [esp+0], eax    ; void *
.text:00405124                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:0040512C                 jz      short loc_405133
.text:0040512E                 call    __Unwind_SjLj_Resume
.text:00405133 ; ---------------------------------------------------------------------------
.text:00405133
.text:00405133 loc_405133:                             ; CODE XREF: std::ios_base::failure::failure(std::string const&)+9C↑j
.text:00405133                 call    ___cxa_call_unexpected
.text:00405133 ;   } // starts at 4050C8
.text:00405133 ; } // starts at 4050C8
.text:00405133 __ZNSt8ios_base7failureC1ERKSs endp
.text:00405133
.text:00405138
.text:00405138 ; =============== S U B R O U T I N E =======================================
.text:00405138
.text:00405138
.text:00405138 ; _DWORD __cdecl __gnu_cxx::__exchange_and_add(volatile int *, int)
.text:00405138                 public __ZN9__gnu_cxx18__exchange_and_addEPVii
.text:00405138 __ZN9__gnu_cxx18__exchange_and_addEPVii proc near
.text:00405138                                         ; CODE XREF: std::__throw_system_error(int)+F4↑p
.text:00405138                                         ; std::__throw_future_error(int)+FB↑p ...
.text:00405138
.text:00405138 arg_0           = dword ptr  4
.text:00405138 arg_4           = dword ptr  8
.text:00405138
.text:00405138                 mov     edx, [esp+arg_0]
.text:0040513C                 mov     eax, 1
.text:00405141                 lea     esi, [esi+0]
.text:00405144
.text:00405144 loc_405144:                             ; CODE XREF: __gnu_cxx::__exchange_and_add(int volatile*,int)+14↓j
.text:00405144                 xchg    eax, __ZN9__gnu_cxx15_Atomicity_lockILi0EE17_S_atomicity_lockE ; __gnu_cxx::_Atomicity_lock<0>::_S_atomicity_lock
.text:0040514A                 test    eax, eax
.text:0040514C                 jnz     short loc_405144
.text:0040514E                 mov     eax, [edx]
.text:00405150                 mov     ecx, [edx]
.text:00405152                 add     ecx, [esp+arg_4]
.text:00405156                 mov     [edx], ecx
.text:00405158                 mov     __ZN9__gnu_cxx15_Atomicity_lockILi0EE17_S_atomicity_lockE, 0 ; __gnu_cxx::_Atomicity_lock<0>::_S_atomicity_lock
.text:00405162                 retn
.text:00405162 __ZN9__gnu_cxx18__exchange_and_addEPVii endp
.text:00405162
.text:00405162 ; ---------------------------------------------------------------------------
.text:00405163                 align 4
.text:00405164
.text:00405164 ; =============== S U B R O U T I N E =======================================
.text:00405164
.text:00405164
.text:00405164 ; _DWORD __cdecl __gnu_cxx::__atomic_add(volatile int *, int)
.text:00405164                 public __ZN9__gnu_cxx12__atomic_addEPVii
.text:00405164 __ZN9__gnu_cxx12__atomic_addEPVii proc near
.text:00405164                                         ; CODE XREF: std::string::_Rep::_M_refcopy(void)+25↓p
.text:00405164                                         ; std::string::_Rep::_M_grab(std::allocator<char> const&,std::allocator<char> const&)+4E↓p ...
.text:00405164
.text:00405164 arg_0           = dword ptr  4
.text:00405164 arg_4           = dword ptr  8
.text:00405164
.text:00405164                 mov     edx, [esp+arg_0]
.text:00405168                 mov     eax, 1
.text:0040516D                 lea     esi, [esi+0]
.text:00405170
.text:00405170 loc_405170:                             ; CODE XREF: __gnu_cxx::__atomic_add(int volatile*,int)+14↓j
.text:00405170                 xchg    eax, __ZN9__gnu_cxx15_Atomicity_lockILi0EE17_S_atomicity_lockE ; __gnu_cxx::_Atomicity_lock<0>::_S_atomicity_lock
.text:00405176                 test    eax, eax
.text:00405178                 jnz     short loc_405170
.text:0040517A                 mov     eax, [edx]
.text:0040517C                 mov     eax, [edx]
.text:0040517E                 add     eax, [esp+arg_4]
.text:00405182                 mov     [edx], eax
.text:00405184                 mov     __ZN9__gnu_cxx15_Atomicity_lockILi0EE17_S_atomicity_lockE, 0 ; __gnu_cxx::_Atomicity_lock<0>::_S_atomicity_lock
.text:0040518E                 retn
.text:0040518E __ZN9__gnu_cxx12__atomic_addEPVii endp
.text:0040518E
.text:0040518E ; ---------------------------------------------------------------------------
.text:0040518F                 align 10h
.text:00405190
.text:00405190 ; =============== S U B R O U T I N E =======================================
.text:00405190
.text:00405190
.text:00405190 ; void __cdecl std::regex_error::~regex_error(void *)
.text:00405190                 public __ZNSt11regex_errorD1Ev
.text:00405190 __ZNSt11regex_errorD1Ev proc near       ; CODE XREF: std::regex_error::~regex_error()+6↓p
.text:00405190                                         ; DATA XREF: std::__throw_regex_error(std::regex_constants::error_type)+5D↑o ...
.text:00405190                 mov     dword ptr [ecx], offset off_4163D0
.text:00405196                 jmp     __ZNSt13runtime_errorD1Ev ; std::runtime_error::~runtime_error()
.text:00405196 __ZNSt11regex_errorD1Ev endp
.text:00405196
.text:00405196 ; ---------------------------------------------------------------------------
.text:0040519B                 align 4
.text:0040519C
.text:0040519C ; =============== S U B R O U T I N E =======================================
.text:0040519C
.text:0040519C
.text:0040519C ; void __cdecl std::regex_error::~regex_error(std::regex_error *__hidden this)
.text:0040519C                 public __ZNSt11regex_errorD0Ev
.text:0040519C __ZNSt11regex_errorD0Ev proc near       ; DATA XREF: .rdata:004163D4↓o
.text:0040519C
.text:0040519C var_1C          = dword ptr -1Ch
.text:0040519C this            = dword ptr  4
.text:0040519C
.text:0040519C                 push    ebx
.text:0040519D                 sub     esp, 18h
.text:004051A0                 mov     ebx, ecx
.text:004051A2                 call    __ZNSt11regex_errorD1Ev ; std::regex_error::~regex_error()
.text:004051A7                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:004051AA                 call    __ZdlPv         ; operator delete(void *)
.text:004051AF                 add     esp, 18h
.text:004051B2                 pop     ebx
.text:004051B3                 retn
.text:004051B3 __ZNSt11regex_errorD0Ev endp
.text:004051B3
.text:004051B4
.text:004051B4 ; =============== S U B R O U T I N E =======================================
.text:004051B4
.text:004051B4
.text:004051B4 ; std::regex_error::regex_error(std::regex_constants::error_type)
.text:004051B4                 public __ZNSt11regex_errorC1ENSt15regex_constants10error_typeE
.text:004051B4 __ZNSt11regex_errorC1ENSt15regex_constants10error_typeE proc near
.text:004051B4                                         ; CODE XREF: std::__throw_regex_error(std::regex_constants::error_type)+57↑p
.text:004051B4
.text:004051B4 lpfctx          = dword ptr -6Ch
.text:004051B4 var_68          = dword ptr -68h
.text:004051B4 var_58          = dword ptr -58h
.text:004051B4 var_54          = dword ptr -54h
.text:004051B4 fctx            = SjLj_Function_Context ptr -50h
.text:004051B4 var_2C          = dword ptr -2Ch
.text:004051B4 var_28          = dword ptr -28h
.text:004051B4 var_12          = byte ptr -12h
.text:004051B4 var_11          = dword ptr -11h
.text:004051B4 var_C           = byte ptr -0Ch
.text:004051B4 arg_0           = dword ptr  4
.text:004051B4 lpuexcpt        = dword ptr  14h
.text:004051B4 arg_1C          = dword ptr  20h
.text:004051B4 arg_20          = dword ptr  24h
.text:004051B4 arg_58          = byte ptr  5Ch
.text:004051B4
.text:004051B4                 push    ebp
.text:004051B5                 sub     esp, 68h
.text:004051B8                 mov     [esp+6Ch+var_58], ecx
.text:004051BC                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:004051C4                 mov     [esp+6Ch+fctx.lsda], offset dword_4123F4
.text:004051CC                 lea     eax, [esp+6Ch+var_C]
.text:004051D0                 mov     [esp+6Ch+fctx.jbuf], eax
.text:004051D4                 mov     [esp+6Ch+var_2C], offset loc_4052A1
.text:004051DC                 mov     [esp+6Ch+var_28], esp
.text:004051E0                 lea     edx, [esp+6Ch+fctx]
.text:004051E4                 mov     [esp+6Ch+lpfctx], edx ; lpfctx
.text:004051E7                 call    __Unwind_SjLj_Register
.text:004051EC ; __unwind { // ___gxx_personality_sj0
.text:004051EC ;   try {
.text:004051EC                 lea     eax, [esp+6Ch+var_12]
.text:004051F0                 mov     [esp+6Ch+var_68], eax ; std::string *
.text:004051F4                 mov     [esp+6Ch+lpfctx], offset aRegexError ; "regex_error"
.text:004051FB                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:00405203                 lea     ecx, [esp+6Ch+var_11+1]
.text:00405207                 call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&)
.text:0040520C                 sub     esp, 8
.text:0040520F                 lea     ecx, [esp+6Ch+var_11+1]
.text:00405213                 mov     [esp+6Ch+lpfctx], ecx ; this
.text:00405216                 mov     [esp+6Ch+fctx.call_site], 1
.text:0040521E                 mov     ecx, [esp+6Ch+var_58]
.text:00405222                 call    __ZNSt13runtime_errorC1ERKSs ; std::runtime_error::runtime_error(std::string const&)
.text:00405227                 push    edx
.text:00405228                 mov     eax, [esp+6Ch+var_11+1]
.text:0040522C                 mov     [esp+6Ch+var_54], eax
.text:00405230                 mov     ecx, ds:__CRT_MT
.text:00405236                 test    ecx, ecx
.text:00405238                 jnz     short loc_405274
.text:0040523A                 mov     edx, [esp+6Ch+var_54]
.text:0040523E                 mov     eax, [edx-4]
.text:00405241                 lea     edx, [eax-1]
.text:00405244                 mov     ecx, [esp+6Ch+var_54]
.text:00405248                 mov     [ecx-4], edx
.text:0040524B                 test    eax, eax
.text:0040524D                 jle     short loc_40528B
.text:0040524F
.text:0040524F loc_40524F:                             ; CODE XREF: std::regex_error::regex_error(std::regex_constants::error_type)+D5↓j
.text:0040524F                                         ; std::regex_error::regex_error(std::regex_constants::error_type)+EB↓j
.text:0040524F                 mov     ecx, [esp+6Ch+var_58]
.text:00405253                 mov     dword ptr [ecx], offset off_4163D0
.text:00405259                 mov     eax, [esp+6Ch+arg_0]
.text:0040525D                 mov     [ecx+8], eax
.text:00405260                 lea     ecx, [esp+6Ch+fctx]
.text:00405264                 mov     [esp+6Ch+lpfctx], ecx ; lpfctx
.text:00405267                 call    __Unwind_SjLj_Unregister
.text:0040526C                 add     esp, 68h
.text:0040526F                 pop     ebp
.text:00405270                 retn    4
.text:00405270 ; ---------------------------------------------------------------------------
.text:00405273                 align 4
.text:00405274
.text:00405274 loc_405274:                             ; CODE XREF: std::regex_error::regex_error(std::regex_constants::error_type)+84↑j
.text:00405274                 mov     [esp+6Ch+var_68], 0FFFFFFFFh ; int
.text:0040527C                 sub     eax, 4
.text:0040527F                 mov     [esp+6Ch+lpfctx], eax ; volatile int *
.text:00405282                 call    __ZN9__gnu_cxx18__exchange_and_addEPVii ; __gnu_cxx::__exchange_and_add(int volatile*,int)
.text:00405287                 test    eax, eax
.text:00405289                 jg      short loc_40524F
.text:0040528B
.text:0040528B loc_40528B:                             ; CODE XREF: std::regex_error::regex_error(std::regex_constants::error_type)+99↑j
.text:0040528B                 mov     ecx, [esp+6Ch+var_54]
.text:0040528F                 sub     ecx, 0Ch        ; void *
.text:00405292                 lea     eax, [esp+6Ch+var_11]
.text:00405296                 mov     [esp+6Ch+lpfctx], eax ; int
.text:00405299                 call    __ZNSs4_Rep10_M_destroyERKSaIcE ; std::string::_Rep::_M_destroy(std::allocator<char> const&)
.text:0040529E                 push    eax
.text:0040529F                 jmp     short loc_40524F
.text:004052A1 ; ---------------------------------------------------------------------------
.text:004052A1
.text:004052A1 loc_4052A1:                             ; DATA XREF: std::regex_error::regex_error(std::regex_constants::error_type)+20↑o
.text:004052A1 ;   cleanup() // owned by 4051EC
.text:004052A1                 mov     eax, [esp+arg_20]
.text:004052A5                 mov     [esp+lpuexcpt], eax
.text:004052A9                 lea     ecx, [esp+arg_58]
.text:004052AD                 call    __ZNSsD1Ev      ; std::string::~string()
.text:004052B2                 mov     edx, [esp+lpuexcpt]
.text:004052B6                 mov     [esp+0], edx    ; lpuexcpt
.text:004052B9                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:004052C1                 call    __Unwind_SjLj_Resume
.text:004052C1 ;   } // starts at 4051EC
.text:004052C1 ; } // starts at 4051EC
.text:004052C1 __ZNSt11regex_errorC1ENSt15regex_constants10error_typeE endp
.text:004052C1
.text:004052C1 ; ---------------------------------------------------------------------------
.text:004052C6                 align 4
.text:004052C8
.text:004052C8 ; =============== S U B R O U T I N E =======================================
.text:004052C8
.text:004052C8
.text:004052C8 ; _DWORD __cdecl std::set_new_handler(void (*)(void))
.text:004052C8                 public __ZSt15set_new_handlerPFvvE
.text:004052C8 __ZSt15set_new_handlerPFvvE proc near
.text:004052C8
.text:004052C8 arg_0           = dword ptr  4
.text:004052C8
.text:004052C8                 mov     eax, ds:___new_handler
.text:004052CD                 mov     edx, [esp+arg_0]
.text:004052D1                 mov     ds:___new_handler, edx
.text:004052D7                 retn
.text:004052D7 __ZSt15set_new_handlerPFvvE endp
.text:004052D7
.text:004052D8
.text:004052D8 ; =============== S U B R O U T I N E =======================================
.text:004052D8
.text:004052D8 ; Attributes: noreturn
.text:004052D8
.text:004052D8 ; void __noreturn __cxa_pure_virtual(void)
.text:004052D8                 public ___cxa_pure_virtual
.text:004052D8 ___cxa_pure_virtual proc near           ; DATA XREF: .rdata:00416260↓o
.text:004052D8                                         ; .rdata:004162D0↓o ...
.text:004052D8
.text:004052D8 var_1C          = dword ptr -1Ch
.text:004052D8 var_18          = dword ptr -18h
.text:004052D8 var_14          = dword ptr -14h
.text:004052D8
.text:004052D8                 sub     esp, 1Ch
.text:004052DB                 mov     [esp+1Ch+var_14], 1Bh ; unsigned int
.text:004052E3                 mov     [esp+1Ch+var_18], offset aPureVirtualMet ; "pure virtual method called\n"
.text:004052EB                 mov     [esp+1Ch+var_1C], 2 ; int
.text:004052F2                 call    _write
.text:004052F7                 call    __ZSt9terminatev ; std::terminate(void)
.text:004052F7 ___cxa_pure_virtual endp
.text:004052F7
.text:004052FC
.text:004052FC ; =============== S U B R O U T I N E =======================================
.text:004052FC
.text:004052FC ; Attributes: noreturn
.text:004052FC
.text:004052FC ; void __noreturn __cxa_deleted_virtual(void)
.text:004052FC                 public ___cxa_deleted_virtual
.text:004052FC ___cxa_deleted_virtual proc near
.text:004052FC
.text:004052FC var_1C          = dword ptr -1Ch
.text:004052FC var_18          = dword ptr -18h
.text:004052FC var_14          = dword ptr -14h
.text:004052FC
.text:004052FC                 sub     esp, 1Ch
.text:004052FF                 mov     [esp+1Ch+var_14], 1Eh ; unsigned int
.text:00405307                 mov     [esp+1Ch+var_18], offset aDeletedVirtual ; "deleted virtual method called\n"
.text:0040530F                 mov     [esp+1Ch+var_1C], 2 ; int
.text:00405316                 call    _write
.text:0040531B                 call    __ZSt9terminatev ; std::terminate(void)
.text:0040531B ___cxa_deleted_virtual endp
.text:0040531B
.text:00405320
.text:00405320 ; =============== S U B R O U T I N E =======================================
.text:00405320
.text:00405320
.text:00405320 ; void __cdecl std::type_info::~type_info(std::type_info *__hidden this)
.text:00405320                 public __ZNSt9type_infoD1Ev
.text:00405320 __ZNSt9type_infoD1Ev proc near          ; CODE XREF: __cxxabiv1::__class_type_info::~__class_type_info()+6↑j
.text:00405320                                         ; DATA XREF: .rdata:off_4165A8↓o
.text:00405320
.text:00405320 this            = dword ptr  4
.text:00405320
.text:00405320                 mov     dword ptr [ecx], offset off_4165A8
.text:00405326                 retn
.text:00405326 __ZNSt9type_infoD1Ev endp
.text:00405326
.text:00405326 ; ---------------------------------------------------------------------------
.text:00405327                 align 4
.text:00405328
.text:00405328 ; =============== S U B R O U T I N E =======================================
.text:00405328
.text:00405328
.text:00405328 ; _DWORD std::type_info::__is_pointer_p(std::type_info *__hidden this)
.text:00405328                 public __ZNKSt9type_info14__is_pointer_pEv
.text:00405328 __ZNKSt9type_info14__is_pointer_pEv proc near
.text:00405328                                         ; DATA XREF: .rdata:00416290↓o
.text:00405328                                         ; .rdata:004162F0↓o ...
.text:00405328
.text:00405328 this            = dword ptr  4
.text:00405328
.text:00405328                 xor     eax, eax
.text:0040532A                 retn
.text:0040532A __ZNKSt9type_info14__is_pointer_pEv endp
.text:0040532A
.text:0040532A ; ---------------------------------------------------------------------------
.text:0040532B                 align 4
.text:0040532C
.text:0040532C ; =============== S U B R O U T I N E =======================================
.text:0040532C
.text:0040532C
.text:0040532C ; _DWORD std::type_info::__is_function_p(std::type_info *__hidden this)
.text:0040532C                 public __ZNKSt9type_info15__is_function_pEv
.text:0040532C __ZNKSt9type_info15__is_function_pEv proc near
.text:0040532C                                         ; DATA XREF: .rdata:00416294↓o
.text:0040532C                                         ; .rdata:004162F4↓o ...
.text:0040532C
.text:0040532C this            = dword ptr  4
.text:0040532C
.text:0040532C                 xor     eax, eax
.text:0040532E                 retn
.text:0040532E __ZNKSt9type_info15__is_function_pEv endp
.text:0040532E
.text:0040532E ; ---------------------------------------------------------------------------
.text:0040532F                 align 10h
.text:00405330
.text:00405330 ; =============== S U B R O U T I N E =======================================
.text:00405330
.text:00405330
.text:00405330 ; std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void **)const
.text:00405330                 public __ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
.text:00405330 __ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv proc near
.text:00405330                                         ; DATA XREF: .rdata:004165BC↓o
.text:00405330                 xor     eax, eax
.text:00405332                 retn    8
.text:00405332 __ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv endp
.text:00405332
.text:00405332 ; ---------------------------------------------------------------------------
.text:00405335                 align 4
.text:00405338
.text:00405338 ; =============== S U B R O U T I N E =======================================
.text:00405338
.text:00405338
.text:00405338 ; void __cdecl std::type_info::~type_info(std::type_info *__hidden this)
.text:00405338                 public __ZNSt9type_infoD0Ev
.text:00405338 __ZNSt9type_infoD0Ev proc near          ; DATA XREF: .rdata:004165AC↓o
.text:00405338
.text:00405338 var_1C          = dword ptr -1Ch
.text:00405338 this            = dword ptr  4
.text:00405338
.text:00405338                 sub     esp, 1Ch
.text:0040533B                 mov     dword ptr [ecx], offset off_4165A8
.text:00405341                 mov     [esp+1Ch+var_1C], ecx ; void *
.text:00405344                 call    __ZdlPv         ; operator delete(void *)
.text:00405349                 add     esp, 1Ch
.text:0040534C                 retn
.text:0040534C __ZNSt9type_infoD0Ev endp
.text:0040534C
.text:0040534C ; ---------------------------------------------------------------------------
.text:0040534D                 align 10h
.text:00405350
.text:00405350 ; =============== S U B R O U T I N E =======================================
.text:00405350
.text:00405350
.text:00405350 ; std::type_info::operator==(std::type_info const&)const
.text:00405350                 public __ZNKSt9type_infoeqERKS_
.text:00405350 __ZNKSt9type_infoeqERKS_ proc near      ; CODE XREF: __cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info::__upcast_result &)+F↑p
.text:00405350                                         ; __cxxabiv1::__class_type_info::__do_dyncast(int,__cxxabiv1::__class_type_info::__sub_kind,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info const*,void const*,__cxxabiv1::__class_type_info::__dyncast_result &)+1A↑p ...
.text:00405350
.text:00405350 var_1C          = dword ptr -1Ch
.text:00405350 var_18          = dword ptr -18h
.text:00405350 arg_0           = dword ptr  4
.text:00405350
.text:00405350                 sub     esp, 1Ch
.text:00405353                 mov     eax, [esp+1Ch+arg_0]
.text:00405357                 cmp     eax, ecx
.text:00405359                 jz      short loc_405384
.text:0040535B                 mov     edx, [ecx+4]
.text:0040535E                 cmp     byte ptr [edx], 2Ah ; '*'
.text:00405361                 jz      short loc_40537B
.text:00405363                 mov     eax, [eax+4]
.text:00405366                 cmp     byte ptr [eax], 2Ah ; '*'
.text:00405369                 jz      short loc_40538C
.text:0040536B                 mov     [esp+1Ch+var_18], eax ; char *
.text:0040536F                 mov     [esp+1Ch+var_1C], edx ; char *
.text:00405372                 call    _strcmp
.text:00405377                 test    eax, eax
.text:00405379                 jz      short loc_405384
.text:0040537B
.text:0040537B loc_40537B:                             ; CODE XREF: std::type_info::operator==(std::type_info const&)+11↑j
.text:0040537B                                         ; std::type_info::operator==(std::type_info const&)+4B↓j
.text:0040537B                 xor     eax, eax
.text:0040537D                 add     esp, 1Ch
.text:00405380                 retn    4
.text:00405380 ; ---------------------------------------------------------------------------
.text:00405383                 align 4
.text:00405384
.text:00405384 loc_405384:                             ; CODE XREF: std::type_info::operator==(std::type_info const&)+9↑j
.text:00405384                                         ; std::type_info::operator==(std::type_info const&)+29↑j ...
.text:00405384                 mov     al, 1
.text:00405386                 add     esp, 1Ch
.text:00405389                 retn    4
.text:0040538C ; ---------------------------------------------------------------------------
.text:0040538C
.text:0040538C loc_40538C:                             ; CODE XREF: std::type_info::operator==(std::type_info const&)+19↑j
.text:0040538C                 inc     eax
.text:0040538D                 mov     [esp+1Ch+var_18], eax ; char *
.text:00405391                 mov     [esp+1Ch+var_1C], edx ; char *
.text:00405394                 call    _strcmp
.text:00405399                 test    eax, eax
.text:0040539B                 jnz     short loc_40537B
.text:0040539D                 jmp     short loc_405384
.text:0040539D __ZNKSt9type_infoeqERKS_ endp
.text:0040539D
.text:0040539D ; ---------------------------------------------------------------------------
.text:0040539F                 align 10h
.text:004053A0
.text:004053A0 ; =============== S U B R O U T I N E =======================================
.text:004053A0
.text:004053A0
.text:004053A0 ; _DWORD __stdcall std::type_info::__do_catch(std::type_info *__hidden this, const std::type_info *, void **, unsigned int)
.text:004053A0                 public __ZNKSt9type_info10__do_catchEPKS_PPvj
.text:004053A0 __ZNKSt9type_info10__do_catchEPKS_PPvj proc near
.text:004053A0                                         ; DATA XREF: .rdata:004165B8↓o
.text:004053A0
.text:004053A0 var_1C          = dword ptr -1Ch
.text:004053A0 this            = dword ptr  4
.text:004053A0
.text:004053A0                 sub     esp, 1Ch
.text:004053A3                 mov     eax, [esp+1Ch+this]
.text:004053A7                 mov     [esp+1Ch+var_1C], eax
.text:004053AA                 call    __ZNKSt9type_infoeqERKS_ ; std::type_info::operator==(std::type_info const&)
.text:004053AF                 push    edx
.text:004053B0                 add     esp, 1Ch
.text:004053B3                 retn    0Ch
.text:004053B3 __ZNKSt9type_info10__do_catchEPKS_PPvj endp
.text:004053B3
.text:004053B3 ; ---------------------------------------------------------------------------
.text:004053B6                 align 4
.text:004053B8
.text:004053B8 ; =============== S U B R O U T I N E =======================================
.text:004053B8
.text:004053B8
.text:004053B8 ; void __shmem_init___terminate_handler_sh(void *)
.text:004053B8                 public ___shmem_init___terminate_handler_sh
.text:004053B8 ___shmem_init___terminate_handler_sh proc near
.text:004053B8                                         ; DATA XREF: __cxxabiv1::__shmem_grabber___terminate_handler_sh(void)+3↓o
.text:004053B8
.text:004053B8 arg_0           = dword ptr  4
.text:004053B8
.text:004053B8                 mov     eax, [esp+arg_0]
.text:004053BC                 mov     dword ptr [eax], offset __ZN9__gnu_cxx27__verbose_terminate_handlerEv ; __gnu_cxx::__verbose_terminate_handler(void)
.text:004053C2                 retn
.text:004053C2 ___shmem_init___terminate_handler_sh endp
.text:004053C2
.text:004053C2 ; ---------------------------------------------------------------------------
.text:004053C3                 align 4
.text:004053C4
.text:004053C4 ; =============== S U B R O U T I N E =======================================
.text:004053C4
.text:004053C4
.text:004053C4 ; _DWORD __cxxabiv1::__shmem_grabber___terminate_handler_sh(void)
.text:004053C4                 public __ZN10__cxxabiv138__shmem_grabber___terminate_handler_shEv
.text:004053C4 __ZN10__cxxabiv138__shmem_grabber___terminate_handler_shEv proc near
.text:004053C4                                         ; CODE XREF: std::terminate(void)+4F↑p
.text:004053C4                                         ; std::set_terminate(void (*)(void))+68↑p ...
.text:004053C4
.text:004053C4 name            = dword ptr -1Ch
.text:004053C4 size            = dword ptr -18h
.text:004053C4 initfunc        = dword ptr -14h
.text:004053C4
.text:004053C4                 sub     esp, 1Ch
.text:004053C7                 mov     [esp+1Ch+initfunc], offset ___shmem_init___terminate_handler_sh ; initfunc
.text:004053CF                 mov     [esp+1Ch+size], 4 ; size
.text:004053D7                 mov     [esp+1Ch+name], offset aTerminateHandl ; "__terminate_handler_sh"
.text:004053DE                 call    ___shmem_grab
.text:004053E3                 add     esp, 1Ch
.text:004053E6                 retn
.text:004053E6 __ZN10__cxxabiv138__shmem_grabber___terminate_handler_shEv endp
.text:004053E6
.text:004053E6 ; ---------------------------------------------------------------------------
.text:004053E7                 align 4
.text:004053E8
.text:004053E8 ; =============== S U B R O U T I N E =======================================
.text:004053E8
.text:004053E8
.text:004053E8 ; void __shmem_init___unexpected_handler_sh(void *)
.text:004053E8                 public ___shmem_init___unexpected_handler_sh
.text:004053E8 ___shmem_init___unexpected_handler_sh proc near
.text:004053E8                                         ; DATA XREF: __cxxabiv1::__shmem_grabber___unexpected_handler_sh(void)+3↓o
.text:004053E8
.text:004053E8 arg_0           = dword ptr  4
.text:004053E8
.text:004053E8                 mov     eax, [esp+arg_0]
.text:004053EC                 mov     dword ptr [eax], offset __ZSt9terminatev ; std::terminate(void)
.text:004053F2                 retn
.text:004053F2 ___shmem_init___unexpected_handler_sh endp
.text:004053F2
.text:004053F2 ; ---------------------------------------------------------------------------
.text:004053F3                 align 4
.text:004053F4
.text:004053F4 ; =============== S U B R O U T I N E =======================================
.text:004053F4
.text:004053F4
.text:004053F4 ; _DWORD __cxxabiv1::__shmem_grabber___unexpected_handler_sh(void)
.text:004053F4                 public __ZN10__cxxabiv139__shmem_grabber___unexpected_handler_shEv
.text:004053F4 __ZN10__cxxabiv139__shmem_grabber___unexpected_handler_shEv proc near
.text:004053F4                                         ; CODE XREF: std::unexpected(void):loc_403A32↑p
.text:004053F4                                         ; std::set_unexpected(void (*)(void))+68↑p ...
.text:004053F4
.text:004053F4 name            = dword ptr -1Ch
.text:004053F4 size            = dword ptr -18h
.text:004053F4 initfunc        = dword ptr -14h
.text:004053F4
.text:004053F4                 sub     esp, 1Ch
.text:004053F7                 mov     [esp+1Ch+initfunc], offset ___shmem_init___unexpected_handler_sh ; initfunc
.text:004053FF                 mov     [esp+1Ch+size], 4 ; size
.text:00405407                 mov     [esp+1Ch+name], offset aUnexpectedHand ; "__unexpected_handler_sh"
.text:0040540E                 call    ___shmem_grab
.text:00405413                 add     esp, 1Ch
.text:00405416                 retn
.text:00405416 __ZN10__cxxabiv139__shmem_grabber___unexpected_handler_shEv endp
.text:00405416
.text:00405416 ; ---------------------------------------------------------------------------
.text:00405417                 align 4
.text:00405418
.text:00405418 ; =============== S U B R O U T I N E =======================================
.text:00405418
.text:00405418
.text:00405418 ; void `anonymous namespace'::init(void)
.text:00405418 __ZN12_GLOBAL__N_1L4initEv proc near    ; DATA XREF: ___cxa_guard_acquire+47↓o
.text:00405418
.text:00405418 mutex           = dword ptr -1Ch
.text:00405418
.text:00405418                 mov     eax, ds:__CRT_MT
.text:0040541D                 test    eax, eax
.text:0040541F                 jnz     short loc_40542C
.text:00405421                 mov     ds:__ZN12_GLOBAL__N_1L12static_mutexE, offset __ZN12_GLOBAL__N_110fake_mutexE ; `anonymous namespace'::static_mutex ...
.text:0040542B                 retn
.text:0040542C ; ---------------------------------------------------------------------------
.text:0040542C
.text:0040542C loc_40542C:                             ; CODE XREF: `anonymous namespace'::init(void)+7↑j
.text:0040542C                 sub     esp, 1Ch
.text:0040542F                 mov     [esp+1Ch+mutex], offset __ZN12_GLOBAL__N_110fake_mutexE ; mutex
.text:00405436                 call    ___gthr_win32_recursive_mutex_init_function
.text:0040543B                 mov     ds:__ZN12_GLOBAL__N_1L12static_mutexE, offset __ZN12_GLOBAL__N_110fake_mutexE ; `anonymous namespace'::static_mutex ...
.text:00405445                 add     esp, 1Ch
.text:00405448                 retn
.text:00405448 __ZN12_GLOBAL__N_1L4initEv endp
.text:00405448
.text:00405448 ; ---------------------------------------------------------------------------
.text:00405449                 align 4
.text:0040544C
.text:0040544C ; =============== S U B R O U T I N E =======================================
.text:0040544C
.text:0040544C
.text:0040544C ; int __cdecl __cxa_guard_acquire(__guard *)
.text:0040544C                 public ___cxa_guard_acquire
.text:0040544C ___cxa_guard_acquire proc near          ; CODE XREF: std::future_category(void)+1A↑p
.text:0040544C
.text:0040544C lpfctx          = dword ptr -5Ch
.text:0040544C func            = dword ptr -58h
.text:0040544C var_54          = dword ptr -54h
.text:0040544C lpuexcpt        = dword ptr -44h
.text:0040544C fctx            = SjLj_Function_Context ptr -40h
.text:0040544C var_1C          = dword ptr -1Ch
.text:0040544C var_18          = dword ptr -18h
.text:0040544C var_C           = byte ptr -0Ch
.text:0040544C arg_0           = dword ptr  4
.text:0040544C
.text:0040544C                 push    ebp
.text:0040544D                 sub     esp, 58h
.text:00405450                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00405458                 mov     [esp+5Ch+fctx.lsda], offset dword_4123FC
.text:00405460                 lea     eax, [esp+5Ch+var_C]
.text:00405464                 mov     [esp+5Ch+fctx.jbuf], eax
.text:00405468                 mov     [esp+5Ch+var_1C], offset loc_405599
.text:00405470                 mov     [esp+5Ch+var_18], esp
.text:00405474                 lea     edx, [esp+5Ch+fctx]
.text:00405478                 mov     [esp+5Ch+lpfctx], edx ; lpfctx
.text:0040547B                 call    __Unwind_SjLj_Register
.text:00405480 ; __unwind { // ___gxx_personality_sj0
.text:00405480 ;   try {
.text:00405480                 mov     edx, [esp+5Ch+arg_0]
.text:00405484                 mov     al, [edx]
.text:00405486                 test    al, al
.text:00405488                 jnz     short loc_4054F0
.text:0040548A                 mov     eax, ds:__CRT_MT
.text:0040548F                 test    eax, eax
.text:00405491                 jz      short loc_405510
.text:00405493                 mov     [esp+5Ch+func], offset __ZN12_GLOBAL__N_1L4initEv ; func
.text:0040549B                 mov     [esp+5Ch+lpfctx], offset __data_start__ ; once
.text:004054A2                 mov     [esp+5Ch+fctx.call_site], 0FFFFFFFFh
.text:004054AA                 call    ___gthr_win32_once
.text:004054AF                 mov     eax, ds:__ZN12_GLOBAL__N_1L12static_mutexE ; `anonymous namespace'::static_mutex
.text:004054B4                 mov     ecx, ds:__CRT_MT
.text:004054BA                 test    ecx, ecx
.text:004054BC                 jnz     short loc_405538
.text:004054BE
.text:004054BE loc_4054BE:                             ; CODE XREF: ___cxa_guard_acquire+F6↓j
.text:004054BE                 mov     eax, [esp+5Ch+arg_0]
.text:004054C2                 cmp     byte ptr [eax], 0
.text:004054C5                 jnz     short loc_4054DC
.text:004054C7                 cmp     byte ptr [eax+1], 0
.text:004054CB                 jz      short loc_405523
.text:004054CD                 mov     [esp+5Ch+fctx.call_site], 1
.text:004054D5                 call    __ZN10__cxxabiv1L30throw_recursive_init_exceptionEv ; __cxxabiv1::throw_recursive_init_exception(void)
.text:004054D5 ; ---------------------------------------------------------------------------
.text:004054DA                 align 4
.text:004054DC
.text:004054DC loc_4054DC:                             ; CODE XREF: ___cxa_guard_acquire+79↑j
.text:004054DC                 mov     eax, ds:__ZN12_GLOBAL__N_1L12static_mutexE ; `anonymous namespace'::static_mutex
.text:004054E1                 mov     edx, ds:__CRT_MT
.text:004054E7                 test    edx, edx
.text:004054E9                 jnz     loc_405574
.text:004054EF                 nop
.text:004054F0
.text:004054F0 loc_4054F0:                             ; CODE XREF: ___cxa_guard_acquire+3C↑j
.text:004054F0                                         ; ___cxa_guard_acquire+CB↓j ...
.text:004054F0                 mov     [esp+5Ch+lpuexcpt], 0
.text:004054F8
.text:004054F8 loc_4054F8:                             ; CODE XREF: ___cxa_guard_acquire+E7↓j
.text:004054F8                 lea     eax, [esp+5Ch+fctx]
.text:004054FC                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:004054FF                 call    __Unwind_SjLj_Unregister
.text:00405504                 mov     eax, [esp+5Ch+lpuexcpt]
.text:00405508                 add     esp, 58h
.text:0040550B                 pop     ebp
.text:0040550C                 retn
.text:0040550C ; ---------------------------------------------------------------------------
.text:0040550D                 align 10h
.text:00405510
.text:00405510 loc_405510:                             ; CODE XREF: ___cxa_guard_acquire+45↑j
.text:00405510                 mov     eax, [esp+5Ch+arg_0]
.text:00405514                 cmp     byte ptr [eax], 0
.text:00405517                 jnz     short loc_4054F0
.text:00405519                 cmp     byte ptr [eax+1], 0
.text:0040551D                 jnz     loc_4055C3
.text:00405523
.text:00405523 loc_405523:                             ; CODE XREF: ___cxa_guard_acquire+7F↑j
.text:00405523                 mov     edx, [esp+5Ch+arg_0]
.text:00405527                 mov     byte ptr [edx+1], 1
.text:0040552B                 mov     [esp+5Ch+lpuexcpt], 1
.text:00405533                 jmp     short loc_4054F8
.text:00405533 ; ---------------------------------------------------------------------------
.text:00405535                 align 4
.text:00405538
.text:00405538 loc_405538:                             ; CODE XREF: ___cxa_guard_acquire+70↑j
.text:00405538                 mov     [esp+5Ch+lpfctx], eax ; mutex
.text:0040553B                 call    ___gthr_win32_recursive_mutex_lock
.text:00405540                 test    eax, eax
.text:00405542                 jz      loc_4054BE
.text:00405548                 mov     [esp+5Ch+lpfctx], 4 ; thrown_size
.text:0040554F                 call    ___cxa_allocate_exception
.text:00405554                 mov     dword ptr [eax], offset off_416340
.text:0040555A                 mov     [esp+5Ch+var_54], offset __ZN9__gnu_cxx24__concurrence_lock_errorD1Ev ; void (__cdecl *)(void *)
.text:00405562                 mov     [esp+5Ch+func], offset __ZTIN9__gnu_cxx24__concurrence_lock_errorE ; lptinfo
.text:0040556A                 mov     [esp+5Ch+lpfctx], eax ; void *
.text:0040556D                 call    ___cxa_throw
.text:0040556D ; ---------------------------------------------------------------------------
.text:00405572                 align 4
.text:00405574
.text:00405574 loc_405574:                             ; CODE XREF: ___cxa_guard_acquire+9D↑j
.text:00405574                 mov     [esp+5Ch+lpfctx], eax ; mutex
.text:00405577                 mov     [esp+5Ch+fctx.call_site], 0FFFFFFFFh
.text:0040557F                 call    ___gthr_win32_recursive_mutex_unlock
.text:00405584                 test    eax, eax
.text:00405586                 jz      loc_4054F0
.text:0040558C
.text:0040558C loc_40558C:                             ; CODE XREF: ___cxa_guard_acquire+198↓j
.text:0040558C                 mov     [esp+5Ch+fctx.call_site], 0FFFFFFFFh
.text:00405594                 call    __ZN9__gnu_cxx32__throw_concurrence_unlock_errorEv ; __gnu_cxx::__throw_concurrence_unlock_error(void)
.text:00405599 ; ---------------------------------------------------------------------------
.text:00405599
.text:00405599 loc_405599:                             ; DATA XREF: ___cxa_guard_acquire+1C↑o
.text:00405599 ;   cleanup() // owned by 405480
.text:00405599                 mov     eax, [esp+5Ch+fctx.data]
.text:0040559D                 mov     [esp+5Ch+lpuexcpt], eax
.text:004055A1                 mov     eax, ds:__ZN12_GLOBAL__N_1L12static_mutexE ; `anonymous namespace'::static_mutex
.text:004055A6                 cmp     ds:__CRT_MT, 0
.text:004055AD                 jnz     short loc_4055D0
.text:004055AF
.text:004055AF loc_4055AF:                             ; CODE XREF: ___cxa_guard_acquire+196↓j
.text:004055AF                 mov     edx, [esp+5Ch+lpuexcpt]
.text:004055B3                 mov     [esp+5Ch+lpfctx], edx ; lpuexcpt
.text:004055B6                 mov     [esp+5Ch+fctx.call_site], 0FFFFFFFFh
.text:004055BE                 call    __Unwind_SjLj_Resume
.text:004055C3 ; ---------------------------------------------------------------------------
.text:004055C3
.text:004055C3 loc_4055C3:                             ; CODE XREF: ___cxa_guard_acquire+D1↑j
.text:004055C3                 mov     [esp+5Ch+fctx.call_site], 0FFFFFFFFh
.text:004055CB                 call    __ZN10__cxxabiv1L30throw_recursive_init_exceptionEv ; __cxxabiv1::throw_recursive_init_exception(void)
.text:004055D0 ; ---------------------------------------------------------------------------
.text:004055D0
.text:004055D0 loc_4055D0:                             ; CODE XREF: ___cxa_guard_acquire+161↑j
.text:004055D0                 mov     [esp+5Ch+lpfctx], eax ; mutex
.text:004055D3                 mov     [esp+5Ch+fctx.call_site], 0
.text:004055DB                 call    ___gthr_win32_recursive_mutex_unlock
.text:004055E0                 test    eax, eax
.text:004055E2                 jz      short loc_4055AF
.text:004055E4                 jmp     short loc_40558C
.text:004055E4 ;   } // starts at 405480
.text:004055E4 ; } // starts at 405480
.text:004055E4 ___cxa_guard_acquire endp
.text:004055E4
.text:004055E4 ; ---------------------------------------------------------------------------
.text:004055E6                 align 4
.text:004055E8
.text:004055E8 ; =============== S U B R O U T I N E =======================================
.text:004055E8
.text:004055E8
.text:004055E8 ; void __cdecl __cxa_guard_abort(__guard *)
.text:004055E8                 public ___cxa_guard_abort
.text:004055E8 ___cxa_guard_abort proc near
.text:004055E8
.text:004055E8 lpfctx          = dword ptr -5Ch
.text:004055E8 fctx            = SjLj_Function_Context ptr -40h
.text:004055E8 var_1C          = dword ptr -1Ch
.text:004055E8 var_18          = dword ptr -18h
.text:004055E8 var_C           = byte ptr -0Ch
.text:004055E8 arg_0           = dword ptr  4
.text:004055E8 arg_1C          = dword ptr  20h
.text:004055E8 lpuexcpt        = dword ptr  24h
.text:004055E8 arg_24          = dword ptr  28h
.text:004055E8
.text:004055E8                 push    ebp
.text:004055E9                 sub     esp, 58h
.text:004055EC                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:004055F4                 mov     [esp+5Ch+fctx.lsda], offset dword_412404
.text:004055FC                 lea     eax, [esp+5Ch+var_C]
.text:00405600                 mov     [esp+5Ch+fctx.jbuf], eax
.text:00405604                 mov     [esp+5Ch+var_1C], offset loc_40565E
.text:0040560C                 mov     [esp+5Ch+var_18], esp
.text:00405610                 lea     eax, [esp+5Ch+fctx]
.text:00405614                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:00405617                 call    __Unwind_SjLj_Register
.text:0040561C ; __unwind { // ___gxx_personality_sj0
.text:0040561C                 mov     eax, [esp+5Ch+arg_0]
.text:00405620                 mov     byte ptr [eax+1], 0
.text:00405624                 mov     eax, ds:__CRT_MT
.text:00405629                 test    eax, eax
.text:0040562B                 jnz     short loc_405640
.text:0040562D
.text:0040562D loc_40562D:                             ; CODE XREF: ___cxa_guard_abort+6F↓j
.text:0040562D                 lea     eax, [esp+5Ch+fctx]
.text:00405631                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:00405634                 call    __Unwind_SjLj_Unregister
.text:00405639                 add     esp, 58h
.text:0040563C                 pop     ebp
.text:0040563D                 retn
.text:0040563D ; ---------------------------------------------------------------------------
.text:0040563E                 align 10h
.text:00405640
.text:00405640 loc_405640:                             ; CODE XREF: ___cxa_guard_abort+43↑j
.text:00405640                 mov     eax, ds:__ZN12_GLOBAL__N_1L12static_mutexE ; `anonymous namespace'::static_mutex
.text:00405645                 mov     [esp+5Ch+lpfctx], eax ; mutex
.text:00405648                 mov     [esp+5Ch+fctx.call_site], 1
.text:00405650                 call    ___gthr_win32_recursive_mutex_unlock
.text:00405655                 test    eax, eax
.text:00405657                 jz      short loc_40562D
.text:00405659                 call    __ZN9__gnu_cxx32__throw_concurrence_unlock_errorEv ; __gnu_cxx::__throw_concurrence_unlock_error(void)
.text:0040565E ; ---------------------------------------------------------------------------
.text:0040565E
.text:0040565E loc_40565E:                             ; DATA XREF: ___cxa_guard_abort+1C↑o
.text:0040565E                 mov     eax, [esp+lpuexcpt]
.text:00405662                 cmp     [esp+arg_24], 0FFFFFFFFh
.text:00405667                 mov     [esp+0], eax    ; void *
.text:0040566A                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00405672                 jz      short loc_405679
.text:00405674                 call    __Unwind_SjLj_Resume
.text:00405679 ; ---------------------------------------------------------------------------
.text:00405679
.text:00405679 loc_405679:                             ; CODE XREF: ___cxa_guard_abort+8A↑j
.text:00405679                 call    ___cxa_call_unexpected
.text:00405679 ; } // starts at 40561C
.text:00405679 ___cxa_guard_abort endp
.text:00405679
.text:00405679 ; ---------------------------------------------------------------------------
.text:0040567E                 align 10h
.text:00405680
.text:00405680 ; =============== S U B R O U T I N E =======================================
.text:00405680
.text:00405680
.text:00405680 ; void __cdecl __cxa_guard_release(__guard *)
.text:00405680                 public ___cxa_guard_release
.text:00405680 ___cxa_guard_release proc near          ; CODE XREF: std::future_category(void)+3E↑p
.text:00405680
.text:00405680 lpfctx          = dword ptr -5Ch
.text:00405680 fctx            = SjLj_Function_Context ptr -40h
.text:00405680 var_1C          = dword ptr -1Ch
.text:00405680 var_18          = dword ptr -18h
.text:00405680 var_C           = byte ptr -0Ch
.text:00405680 arg_0           = dword ptr  4
.text:00405680 arg_1C          = dword ptr  20h
.text:00405680 lpuexcpt        = dword ptr  24h
.text:00405680 arg_24          = dword ptr  28h
.text:00405680
.text:00405680                 push    ebp
.text:00405681                 sub     esp, 58h
.text:00405684                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:0040568C                 mov     [esp+5Ch+fctx.lsda], offset dword_412414
.text:00405694                 lea     eax, [esp+5Ch+var_C]
.text:00405698                 mov     [esp+5Ch+fctx.jbuf], eax
.text:0040569C                 mov     [esp+5Ch+var_1C], offset loc_4056FA
.text:004056A4                 mov     [esp+5Ch+var_18], esp
.text:004056A8                 lea     eax, [esp+5Ch+fctx]
.text:004056AC                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:004056AF                 call    __Unwind_SjLj_Register
.text:004056B4 ; __unwind { // ___gxx_personality_sj0
.text:004056B4                 mov     eax, [esp+5Ch+arg_0]
.text:004056B8                 mov     byte ptr [eax+1], 0
.text:004056BC                 mov     byte ptr [eax], 1
.text:004056BF                 mov     eax, ds:__CRT_MT
.text:004056C4                 test    eax, eax
.text:004056C6                 jnz     short loc_4056DC
.text:004056C8
.text:004056C8 loc_4056C8:                             ; CODE XREF: ___cxa_guard_release+73↓j
.text:004056C8                 lea     eax, [esp+5Ch+fctx]
.text:004056CC                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:004056CF                 call    __Unwind_SjLj_Unregister
.text:004056D4                 add     esp, 58h
.text:004056D7                 pop     ebp
.text:004056D8                 retn
.text:004056D8 ; ---------------------------------------------------------------------------
.text:004056D9                 align 4
.text:004056DC
.text:004056DC loc_4056DC:                             ; CODE XREF: ___cxa_guard_release+46↑j
.text:004056DC                 mov     eax, ds:__ZN12_GLOBAL__N_1L12static_mutexE ; `anonymous namespace'::static_mutex
.text:004056E1                 mov     [esp+5Ch+lpfctx], eax ; mutex
.text:004056E4                 mov     [esp+5Ch+fctx.call_site], 1
.text:004056EC                 call    ___gthr_win32_recursive_mutex_unlock
.text:004056F1                 test    eax, eax
.text:004056F3                 jz      short loc_4056C8
.text:004056F5                 call    __ZN9__gnu_cxx32__throw_concurrence_unlock_errorEv ; __gnu_cxx::__throw_concurrence_unlock_error(void)
.text:004056FA ; ---------------------------------------------------------------------------
.text:004056FA
.text:004056FA loc_4056FA:                             ; DATA XREF: ___cxa_guard_release+1C↑o
.text:004056FA                 mov     eax, [esp+lpuexcpt]
.text:004056FE                 cmp     [esp+arg_24], 0FFFFFFFFh
.text:00405703                 mov     [esp+0], eax    ; void *
.text:00405706                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:0040570E                 jz      short loc_405715
.text:00405710                 call    __Unwind_SjLj_Resume
.text:00405715 ; ---------------------------------------------------------------------------
.text:00405715
.text:00405715 loc_405715:                             ; CODE XREF: ___cxa_guard_release+8E↑j
.text:00405715                 call    ___cxa_call_unexpected
.text:00405715 ; } // starts at 4056B4
.text:00405715 ___cxa_guard_release endp
.text:00405715
.text:00405715 ; ---------------------------------------------------------------------------
.text:0040571A                 align 4
.text:0040571C
.text:0040571C ; =============== S U B R O U T I N E =======================================
.text:0040571C
.text:0040571C ; Attributes: noreturn
.text:0040571C
.text:0040571C ; void __noreturn __gnu_cxx::__verbose_terminate_handler(void)
.text:0040571C                 public __ZN9__gnu_cxx27__verbose_terminate_handlerEv
.text:0040571C __ZN9__gnu_cxx27__verbose_terminate_handlerEv proc near
.text:0040571C                                         ; DATA XREF: ___shmem_init___terminate_handler_sh+4↑o
.text:0040571C
.text:0040571C lpfctx          = dword ptr -6Ch
.text:0040571C lpout           = dword ptr -68h
.text:0040571C lpoutlen        = dword ptr -64h
.text:0040571C lpstatus        = dword ptr -60h
.text:0040571C lpmangled       = dword ptr -5Ch
.text:0040571C var_58          = dword ptr -58h
.text:0040571C var_54          = dword ptr -54h
.text:0040571C fctx            = SjLj_Function_Context ptr -50h
.text:0040571C var_2C          = dword ptr -2Ch
.text:0040571C var_28          = dword ptr -28h
.text:0040571C status          = dword ptr -10h
.text:0040571C var_C           = byte ptr -0Ch
.text:0040571C
.text:0040571C                 push    ebp
.text:0040571D                 sub     esp, 68h
.text:00405720                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00405728                 mov     [esp+6Ch+fctx.lsda], offset dword_412424
.text:00405730                 lea     eax, [esp+6Ch+var_C]
.text:00405734                 mov     [esp+6Ch+fctx.jbuf], eax
.text:00405738                 mov     [esp+6Ch+var_2C], offset loc_405889
.text:00405740                 mov     [esp+6Ch+var_28], esp
.text:00405744                 lea     eax, [esp+6Ch+fctx]
.text:00405748                 mov     [esp+6Ch+lpfctx], eax ; lpfctx
.text:0040574B                 call    __Unwind_SjLj_Register
.text:00405750 ; __unwind { // ___gxx_personality_sj0
.text:00405750 ;   try {
.text:00405750                 cmp     ds:__ZZN9__gnu_cxx27__verbose_terminate_handlerEvE11terminating, 0 ; __gnu_cxx::__verbose_terminate_handler(void)::terminating
.text:00405757                 jnz     loc_40584E
.text:0040575D                 mov     ds:__ZZN9__gnu_cxx27__verbose_terminate_handlerEvE11terminating, 1 ; __gnu_cxx::__verbose_terminate_handler(void)::terminating
.text:00405764                 call    ___cxa_current_exception_type
.text:00405769                 test    eax, eax
.text:0040576B                 jz      loc_4058AE
.text:00405771                 mov     eax, [eax+4]
.text:00405774                 mov     [esp+6Ch+lpmangled], eax
.text:00405778                 cmp     byte ptr [eax], 2Ah ; '*'
.text:0040577B                 setz    al
.text:0040577E                 movzx   eax, al
.text:00405781                 add     [esp+6Ch+lpmangled], eax
.text:00405785                 mov     [esp+6Ch+status], 0FFFFFFFFh
.text:0040578D                 lea     eax, [esp+6Ch+status]
.text:00405791                 mov     [esp+6Ch+lpstatus], eax ; lpstatus
.text:00405795                 mov     [esp+6Ch+lpoutlen], 0 ; lpoutlen
.text:0040579D                 mov     [esp+6Ch+lpout], 0 ; lpout
.text:004057A5                 mov     eax, [esp+6Ch+lpmangled]
.text:004057A9                 mov     [esp+6Ch+lpfctx], eax ; lpmangled
.text:004057AC                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:004057B4                 call    ___cxa_demangle
.text:004057B9                 mov     [esp+6Ch+var_54], eax
.text:004057BD                 mov     eax, ds:__imp___iob
.text:004057C2                 add     eax, 40h ; '@'
.text:004057C5                 mov     [esp+6Ch+var_58], eax
.text:004057C9                 mov     [esp+6Ch+lpstatus], eax ; FILE *
.text:004057CD                 mov     [esp+6Ch+lpoutlen], 30h ; '0' ; size_t
.text:004057D5                 mov     [esp+6Ch+lpout], 1 ; size_t
.text:004057DD                 mov     [esp+6Ch+lpfctx], offset aTerminateCalle ; "terminate called after throwing an inst"...
.text:004057E4                 call    _fwrite
.text:004057E9                 mov     eax, [esp+6Ch+var_58]
.text:004057ED                 cmp     [esp+6Ch+status], 0
.text:004057F2                 mov     [esp+6Ch+lpout], eax ; FILE *
.text:004057F6                 jz      short loc_405840
.text:004057F8                 mov     eax, [esp+6Ch+lpmangled]
.text:004057FC                 mov     [esp+6Ch+lpfctx], eax ; char *
.text:004057FF                 call    _fputs
.text:00405804
.text:00405804 loc_405804:                             ; CODE XREF: __gnu_cxx::__verbose_terminate_handler(void)+130↓j
.text:00405804                 mov     eax, ds:__imp___iob
.text:00405809                 add     eax, 40h ; '@'
.text:0040580C                 mov     [esp+6Ch+lpstatus], eax ; FILE *
.text:00405810                 mov     [esp+6Ch+lpoutlen], 2 ; size_t
.text:00405818                 mov     [esp+6Ch+lpout], 1 ; size_t
.text:00405820                 mov     [esp+6Ch+lpfctx], offset asc_4145E5 ; "'\n"
.text:00405827                 call    _fwrite
.text:0040582C                 cmp     [esp+6Ch+status], 0
.text:00405831                 jz      short loc_40587B
.text:00405833
.text:00405833 loc_405833:                             ; CODE XREF: __gnu_cxx::__verbose_terminate_handler(void)+16B↓j
.text:00405833                 mov     [esp+6Ch+fctx.call_site], 1
.text:0040583B                 call    ___cxa_rethrow
.text:00405840 ; ---------------------------------------------------------------------------
.text:00405840
.text:00405840 loc_405840:                             ; CODE XREF: __gnu_cxx::__verbose_terminate_handler(void)+DA↑j
.text:00405840                 mov     eax, [esp+6Ch+var_54]
.text:00405844                 mov     [esp+6Ch+lpfctx], eax ; char *
.text:00405847                 call    _fputs
.text:0040584C                 jmp     short loc_405804
.text:0040584E ; ---------------------------------------------------------------------------
.text:0040584E
.text:0040584E loc_40584E:                             ; CODE XREF: __gnu_cxx::__verbose_terminate_handler(void)+3B↑j
.text:0040584E                 mov     eax, ds:__imp___iob
.text:00405853                 add     eax, 40h ; '@'
.text:00405856                 mov     [esp+6Ch+lpstatus], eax ; FILE *
.text:0040585A                 mov     [esp+6Ch+lpoutlen], 1Dh ; size_t
.text:00405862                 mov     [esp+6Ch+lpout], 1 ; size_t
.text:0040586A                 mov     [esp+6Ch+lpfctx], offset aTerminateCalle_0 ; "terminate called recursively\n"
.text:00405871                 call    _fwrite
.text:00405876                 call    _abort
.text:0040587B ; ---------------------------------------------------------------------------
.text:0040587B
.text:0040587B loc_40587B:                             ; CODE XREF: __gnu_cxx::__verbose_terminate_handler(void)+115↑j
.text:0040587B                 mov     eax, [esp+6Ch+var_54]
.text:0040587F                 mov     [esp+6Ch+lpfctx], eax ; void *
.text:00405882                 call    _free
.text:00405887                 jmp     short loc_405833
.text:00405889 ; ---------------------------------------------------------------------------
.text:00405889
.text:00405889 loc_405889:                             ; DATA XREF: __gnu_cxx::__verbose_terminate_handler(void)+1C↑o
.text:00405889 ;   catch(std::exception) // owned by 405750
.text:00405889 ;   catch(...) // owned by 405750
.text:00405889                 mov     eax, [esp+6Ch+fctx.data]
.text:0040588D                 cmp     [esp+6Ch+fctx.data+4], 1
.text:00405892                 mov     [esp+6Ch+lpfctx], eax ; void *
.text:00405895                 jz      short loc_4058D8
.text:00405897                 call    ___cxa_begin_catch
.text:0040589C                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:004058A4                 call    ___cxa_end_catch
.text:004058A9
.text:004058A9 loc_4058A9:                             ; CODE XREF: __gnu_cxx::__verbose_terminate_handler(void)+1BA↓j
.text:004058A9                                         ; __gnu_cxx::__verbose_terminate_handler(void)+225↓j
.text:004058A9                 call    _abort
.text:004058AE ; ---------------------------------------------------------------------------
.text:004058AE
.text:004058AE loc_4058AE:                             ; CODE XREF: __gnu_cxx::__verbose_terminate_handler(void)+4F↑j
.text:004058AE                 mov     eax, ds:__imp___iob
.text:004058B3                 add     eax, 40h ; '@'
.text:004058B6                 mov     [esp+6Ch+lpstatus], eax ; FILE *
.text:004058BA                 mov     [esp+6Ch+lpoutlen], 2Dh ; '-' ; size_t
.text:004058C2                 mov     [esp+6Ch+lpout], 1 ; size_t
.text:004058CA                 mov     [esp+6Ch+lpfctx], offset aTerminateCalle_1 ; "terminate called without an active exce"...
.text:004058D1                 call    _fwrite
.text:004058D6                 jmp     short loc_4058A9
.text:004058D8 ; ---------------------------------------------------------------------------
.text:004058D8
.text:004058D8 loc_4058D8:                             ; CODE XREF: __gnu_cxx::__verbose_terminate_handler(void)+179↑j
.text:004058D8                 call    ___cxa_begin_catch
.text:004058DD                 mov     edx, [eax]
.text:004058DF                 mov     ecx, eax
.text:004058E1                 call    dword ptr [edx+8]
.text:004058E4                 mov     [esp+6Ch+var_58], eax
.text:004058E8                 mov     eax, ds:__imp___iob
.text:004058ED                 add     eax, 40h ; '@'
.text:004058F0                 mov     [esp+6Ch+lpmangled], eax
.text:004058F4                 mov     [esp+6Ch+lpstatus], eax ; FILE *
.text:004058F8                 mov     [esp+6Ch+lpoutlen], 0Bh ; size_t
.text:00405900                 mov     [esp+6Ch+lpout], 1 ; size_t
.text:00405908                 mov     [esp+6Ch+lpfctx], offset aWhat ; "  what():  "
.text:0040590F                 call    _fwrite
.text:00405914                 mov     eax, [esp+6Ch+lpmangled]
.text:00405918                 mov     [esp+6Ch+lpout], eax ; FILE *
.text:0040591C                 mov     eax, [esp+6Ch+var_58]
.text:00405920                 mov     [esp+6Ch+lpfctx], eax ; char *
.text:00405923                 call    _fputs
.text:00405928                 mov     eax, [esp+6Ch+lpmangled]
.text:0040592C                 mov     [esp+6Ch+lpout], eax ; FILE *
.text:00405930                 mov     [esp+6Ch+lpfctx], 0Ah ; int
.text:00405937                 call    _fputc
.text:0040593C                 call    ___cxa_end_catch
.text:00405941                 jmp     loc_4058A9
.text:00405941 ;   } // starts at 405750
.text:00405941 ; } // starts at 405750
.text:00405941 __ZN9__gnu_cxx27__verbose_terminate_handlerEv endp
.text:00405941
.text:00405941 ; ---------------------------------------------------------------------------
.text:00405946                 align 4
.text:00405948
.text:00405948 ; =============== S U B R O U T I N E =======================================
.text:00405948
.text:00405948
.text:00405948 ; void __cdecl __gnu_cxx::recursive_init_error::~recursive_init_error(void *)
.text:00405948                 public __ZN9__gnu_cxx20recursive_init_errorD1Ev
.text:00405948 __ZN9__gnu_cxx20recursive_init_errorD1Ev proc near
.text:00405948                                         ; CODE XREF: __gnu_cxx::recursive_init_error::~recursive_init_error()+6↓p
.text:00405948                                         ; DATA XREF: __cxxabiv1::throw_recursive_init_exception(void)+15↓o ...
.text:00405948                 mov     dword ptr [ecx], offset off_416328
.text:0040594E                 jmp     __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:0040594E __ZN9__gnu_cxx20recursive_init_errorD1Ev endp
.text:0040594E
.text:0040594E ; ---------------------------------------------------------------------------
.text:00405953                 align 4
.text:00405954
.text:00405954 ; =============== S U B R O U T I N E =======================================
.text:00405954
.text:00405954
.text:00405954 ; void __cdecl __gnu_cxx::recursive_init_error::~recursive_init_error(__gnu_cxx::recursive_init_error *__hidden this)
.text:00405954                 public __ZN9__gnu_cxx20recursive_init_errorD0Ev
.text:00405954 __ZN9__gnu_cxx20recursive_init_errorD0Ev proc near
.text:00405954                                         ; DATA XREF: .rdata:0041632C↓o
.text:00405954
.text:00405954 var_1C          = dword ptr -1Ch
.text:00405954 this            = dword ptr  4
.text:00405954
.text:00405954                 push    ebx
.text:00405955                 sub     esp, 18h
.text:00405958                 mov     ebx, ecx
.text:0040595A                 call    __ZN9__gnu_cxx20recursive_init_errorD1Ev ; __gnu_cxx::recursive_init_error::~recursive_init_error()
.text:0040595F                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:00405962                 call    __ZdlPv         ; operator delete(void *)
.text:00405967                 add     esp, 18h
.text:0040596A                 pop     ebx
.text:0040596B                 retn
.text:0040596B __ZN9__gnu_cxx20recursive_init_errorD0Ev endp
.text:0040596B
.text:0040596C
.text:0040596C ; =============== S U B R O U T I N E =======================================
.text:0040596C
.text:0040596C
.text:0040596C ; struct type_info *__cxa_current_exception_type(void)
.text:0040596C                 public ___cxa_current_exception_type
.text:0040596C ___cxa_current_exception_type proc near ; CODE XREF: __gnu_cxx::__verbose_terminate_handler(void)+48↑p
.text:0040596C                 sub     esp, 0Ch
.text:0040596F                 call    ___cxa_get_globals
.text:00405974                 mov     eax, [eax]
.text:00405976                 test    eax, eax
.text:00405978                 jz      short loc_405990
.text:0040597A                 test    byte ptr [eax+30h], 1
.text:0040597E                 jnz     short loc_405988
.text:00405980
.text:00405980 loc_405980:                             ; CODE XREF: ___cxa_current_exception_type+21↓j
.text:00405980                 mov     eax, [eax]
.text:00405982
.text:00405982 loc_405982:                             ; CODE XREF: ___cxa_current_exception_type+26↓j
.text:00405982                 add     esp, 0Ch
.text:00405985                 retn
.text:00405985 ; ---------------------------------------------------------------------------
.text:00405986                 align 4
.text:00405988
.text:00405988 loc_405988:                             ; CODE XREF: ___cxa_current_exception_type+12↑j
.text:00405988                 mov     eax, [eax]
.text:0040598A                 sub     eax, 50h ; 'P'
.text:0040598D                 jmp     short loc_405980
.text:0040598D ; ---------------------------------------------------------------------------
.text:0040598F                 align 10h
.text:00405990
.text:00405990 loc_405990:                             ; CODE XREF: ___cxa_current_exception_type+C↑j
.text:00405990                 xor     eax, eax
.text:00405992                 jmp     short loc_405982
.text:00405992 ___cxa_current_exception_type endp
.text:00405992
.text:00405994
.text:00405994 ; =============== S U B R O U T I N E =======================================
.text:00405994
.text:00405994
.text:00405994 _d_make_comp    proc near               ; CODE XREF: _d_cv_qualifiers+39↓p
.text:00405994                                         ; _d_expr_primary+B5↓p ...
.text:00405994
.text:00405994 arg_0           = dword ptr  4
.text:00405994
.text:00405994                 push    ebp
.text:00405995                 push    edi
.text:00405996                 push    esi
.text:00405997                 push    ebx
.text:00405998                 mov     edi, [esp+10h+arg_0]
.text:0040599C                 cmp     edx, 46h        ; switch 71 cases
.text:0040599F                 ja      short def_4059A1 ; jumptable 004059A1 default case, cases 0,5-8,22,35,40,45,46,59,60,64-66
.text:004059A1                 jmp     ds:jpt_4059A1[edx*4] ; switch jump
.text:004059A8 ; ---------------------------------------------------------------------------
.text:004059A8
.text:004059A8 loc_4059A8:                             ; CODE XREF: _d_make_comp+D↑j
.text:004059A8                                         ; DATA XREF: .rdata:jpt_4059A1↓o
.text:004059A8                 test    ecx, ecx        ; jumptable 004059A1 cases 9,10,12-21,30-34,36,47,48,54,57,61-63,67-69
.text:004059AA                 jz      short def_4059A1 ; jumptable 004059A1 default case, cases 0,5-8,22,35,40,45,46,59,60,64-66
.text:004059AC
.text:004059AC loc_4059AC:                             ; CODE XREF: _d_make_comp+D↑j
.text:004059AC                                         ; DATA XREF: .rdata:jpt_4059A1↓o
.text:004059AC                 mov     esi, [eax+14h]  ; jumptable 004059A1 cases 23-28,37,42,43
.text:004059AF                 cmp     esi, [eax+18h]
.text:004059B2                 jl      short loc_4059C0
.text:004059B4
.text:004059B4 def_4059A1:                             ; CODE XREF: _d_make_comp+B↑j
.text:004059B4                                         ; _d_make_comp+D↑j ...
.text:004059B4                 xor     ebx, ebx        ; jumptable 004059A1 default case, cases 0,5-8,22,35,40,45,46,59,60,64-66
.text:004059B6                 mov     eax, ebx
.text:004059B8                 pop     ebx
.text:004059B9                 pop     esi
.text:004059BA                 pop     edi
.text:004059BB                 pop     ebp
.text:004059BC                 retn
.text:004059BC ; ---------------------------------------------------------------------------
.text:004059BD                 align 10h
.text:004059C0
.text:004059C0 loc_4059C0:                             ; CODE XREF: _d_make_comp+1E↑j
.text:004059C0                                         ; _d_make_comp+5C↓j
.text:004059C0                 lea     ebp, [esi+esi*2]
.text:004059C3                 mov     ebx, [eax+10h]
.text:004059C6                 lea     ebx, [ebx+ebp*4]
.text:004059C9                 inc     esi
.text:004059CA                 mov     [eax+14h], esi
.text:004059CD                 test    ebx, ebx
.text:004059CF                 jz      short def_4059A1 ; jumptable 004059A1 default case, cases 0,5-8,22,35,40,45,46,59,60,64-66
.text:004059D1                 mov     [ebx], edx
.text:004059D3                 mov     [ebx+4], ecx
.text:004059D6                 mov     [ebx+8], edi
.text:004059D9                 mov     eax, ebx
.text:004059DB                 pop     ebx
.text:004059DC                 pop     esi
.text:004059DD                 pop     edi
.text:004059DE                 pop     ebp
.text:004059DF                 retn
.text:004059E0 ; ---------------------------------------------------------------------------
.text:004059E0
.text:004059E0 loc_4059E0:                             ; CODE XREF: _d_make_comp+D↑j
.text:004059E0                                         ; DATA XREF: .rdata:jpt_4059A1↓o
.text:004059E0                 test    ecx, ecx        ; jumptable 004059A1 cases 1-4,11,29,39,41,49-53,55,56,58,70
.text:004059E2                 jz      short def_4059A1 ; jumptable 004059A1 default case, cases 0,5-8,22,35,40,45,46,59,60,64-66
.text:004059E4
.text:004059E4 loc_4059E4:                             ; CODE XREF: _d_make_comp+D↑j
.text:004059E4                                         ; DATA XREF: .rdata:jpt_4059A1↓o
.text:004059E4                 test    edi, edi        ; jumptable 004059A1 cases 38,44
.text:004059E6                 jz      short def_4059A1 ; jumptable 004059A1 default case, cases 0,5-8,22,35,40,45,46,59,60,64-66
.text:004059E8                 mov     esi, [eax+14h]
.text:004059EB                 cmp     esi, [eax+18h]
.text:004059EE                 jge     short def_4059A1 ; jumptable 004059A1 default case, cases 0,5-8,22,35,40,45,46,59,60,64-66
.text:004059F0                 jmp     short loc_4059C0
.text:004059F0 _d_make_comp    endp
.text:004059F0
.text:004059F0 ; ---------------------------------------------------------------------------
.text:004059F2                 align 4
.text:004059F4
.text:004059F4 ; =============== S U B R O U T I N E =======================================
.text:004059F4
.text:004059F4
.text:004059F4 _d_make_name    proc near               ; CODE XREF: _d_source_name+67↓p
.text:004059F4                                         ; _d_source_name+AC↓p ...
.text:004059F4                 push    edi
.text:004059F5                 push    esi
.text:004059F6                 push    ebx
.text:004059F7                 mov     ebx, eax
.text:004059F9                 mov     esi, [eax+14h]
.text:004059FC                 cmp     esi, [eax+18h]
.text:004059FF                 jge     short loc_405A1A
.text:00405A01                 lea     edi, [esi+esi*2]
.text:00405A04                 mov     eax, [eax+10h]
.text:00405A07                 lea     eax, [eax+edi*4]
.text:00405A0A                 inc     esi
.text:00405A0B                 mov     [ebx+14h], esi
.text:00405A0E                 test    eax, eax
.text:00405A10                 jz      short loc_405A1A
.text:00405A12                 test    edx, edx
.text:00405A14                 jz      short loc_405A1A
.text:00405A16                 test    ecx, ecx
.text:00405A18                 jnz     short loc_405A20
.text:00405A1A
.text:00405A1A loc_405A1A:                             ; CODE XREF: _d_make_name+B↑j
.text:00405A1A                                         ; _d_make_name+1C↑j ...
.text:00405A1A                 xor     eax, eax
.text:00405A1C                 pop     ebx
.text:00405A1D                 pop     esi
.text:00405A1E                 pop     edi
.text:00405A1F                 retn
.text:00405A20 ; ---------------------------------------------------------------------------
.text:00405A20
.text:00405A20 loc_405A20:                             ; CODE XREF: _d_make_name+24↑j
.text:00405A20                 mov     dword ptr [eax], 0
.text:00405A26                 mov     [eax+4], edx
.text:00405A29                 mov     [eax+8], ecx
.text:00405A2C                 pop     ebx
.text:00405A2D                 pop     esi
.text:00405A2E                 pop     edi
.text:00405A2F                 retn
.text:00405A2F _d_make_name    endp
.text:00405A2F
.text:00405A30
.text:00405A30 ; =============== S U B R O U T I N E =======================================
.text:00405A30
.text:00405A30
.text:00405A30 _d_cv_qualifiers proc near              ; CODE XREF: _d_name+BB↓p
.text:00405A30                                         ; _d_type+3C↓p ...
.text:00405A30
.text:00405A30 var_14          = dword ptr -14h
.text:00405A30
.text:00405A30                 push    ebp
.text:00405A31                 push    edi
.text:00405A32                 push    esi
.text:00405A33                 push    ebx
.text:00405A34                 push    ebx
.text:00405A35                 mov     ebx, eax
.text:00405A37                 mov     ebp, edx
.text:00405A39                 mov     edi, ecx
.text:00405A3B                 mov     eax, [eax+0Ch]
.text:00405A3E                 mov     al, [eax]
.text:00405A40                 mov     esi, edx
.text:00405A42                 jmp     short loc_405A7C
.text:00405A44 ; ---------------------------------------------------------------------------
.text:00405A44
.text:00405A44 loc_405A44:                             ; CODE XREF: _d_cv_qualifiers+4E↓j
.text:00405A44                 cmp     al, 56h ; 'V'
.text:00405A46                 jz      short loc_405A94
.text:00405A48                 cmp     al, 4Bh ; 'K'
.text:00405A4A                 jnz     short loc_405AB4
.text:00405A4C                 inc     dword ptr [ebx+0Ch]
.text:00405A4F                 cmp     edi, 1
.text:00405A52                 sbb     edx, edx
.text:00405A54                 and     edx, 0FFFFFFFDh
.text:00405A57                 add     edx, 1Ch
.text:00405A5A                 add     dword ptr [ebx+30h], 6
.text:00405A5E
.text:00405A5E loc_405A5E:                             ; CODE XREF: _d_cv_qualifiers+62↓j
.text:00405A5E                                         ; _d_cv_qualifiers+76↓j
.text:00405A5E                 mov     [esp+14h+var_14], 0
.text:00405A65                 xor     ecx, ecx
.text:00405A67                 mov     eax, ebx
.text:00405A69                 call    _d_make_comp
.text:00405A6E                 mov     [esi], eax
.text:00405A70                 test    eax, eax
.text:00405A72                 jz      short loc_405AA8
.text:00405A74                 lea     esi, [eax+4]
.text:00405A77                 mov     eax, [ebx+0Ch]
.text:00405A7A                 mov     al, [eax]
.text:00405A7C
.text:00405A7C loc_405A7C:                             ; CODE XREF: _d_cv_qualifiers+12↑j
.text:00405A7C                 cmp     al, 72h ; 'r'
.text:00405A7E                 jnz     short loc_405A44
.text:00405A80                 inc     dword ptr [ebx+0Ch]
.text:00405A83                 cmp     edi, 1
.text:00405A86                 sbb     edx, edx
.text:00405A88                 and     edx, 0FFFFFFFDh
.text:00405A8B                 add     edx, 1Ah
.text:00405A8E                 add     dword ptr [ebx+30h], 9
.text:00405A92                 jmp     short loc_405A5E
.text:00405A94 ; ---------------------------------------------------------------------------
.text:00405A94
.text:00405A94 loc_405A94:                             ; CODE XREF: _d_cv_qualifiers+16↑j
.text:00405A94                 inc     dword ptr [ebx+0Ch]
.text:00405A97                 cmp     edi, 1
.text:00405A9A                 sbb     edx, edx
.text:00405A9C                 and     edx, 0FFFFFFFDh
.text:00405A9F                 add     edx, 1Bh
.text:00405AA2                 add     dword ptr [ebx+30h], 9
.text:00405AA6                 jmp     short loc_405A5E
.text:00405AA8 ; ---------------------------------------------------------------------------
.text:00405AA8
.text:00405AA8 loc_405AA8:                             ; CODE XREF: _d_cv_qualifiers+42↑j
.text:00405AA8                 xor     esi, esi
.text:00405AAA
.text:00405AAA loc_405AAA:                             ; CODE XREF: _d_cv_qualifiers+86↓j
.text:00405AAA                                         ; _d_cv_qualifiers+8A↓j ...
.text:00405AAA                 mov     eax, esi
.text:00405AAC                 pop     edx
.text:00405AAD                 pop     ebx
.text:00405AAE                 pop     esi
.text:00405AAF                 pop     edi
.text:00405AB0                 pop     ebp
.text:00405AB1                 retn
.text:00405AB1 ; ---------------------------------------------------------------------------
.text:00405AB2                 align 4
.text:00405AB4
.text:00405AB4 loc_405AB4:                             ; CODE XREF: _d_cv_qualifiers+1A↑j
.text:00405AB4                 test    edi, edi
.text:00405AB6                 jnz     short loc_405AAA
.text:00405AB8                 cmp     al, 46h ; 'F'
.text:00405ABA                 jnz     short loc_405AAA
.text:00405ABC                 cmp     esi, ebp
.text:00405ABE                 jnz     short loc_405ADC
.text:00405AC0                 jmp     short loc_405AAA
.text:00405AC0 ; ---------------------------------------------------------------------------
.text:00405AC2                 align 4
.text:00405AC4
.text:00405AC4 loc_405AC4:                             ; CODE XREF: _d_cv_qualifiers+B5↓j
.text:00405AC4                 cmp     eax, 19h
.text:00405AC7                 jz      short loc_405AF0
.text:00405AC9                 cmp     eax, 17h
.text:00405ACC                 jnz     short loc_405AD5
.text:00405ACE                 mov     dword ptr [ebp+0], 1Ah
.text:00405AD5
.text:00405AD5 loc_405AD5:                             ; CODE XREF: _d_cv_qualifiers+9C↑j
.text:00405AD5                                         ; _d_cv_qualifiers+BE↓j ...
.text:00405AD5                 add     ebp, 4
.text:00405AD8                 cmp     esi, ebp
.text:00405ADA                 jz      short loc_405AAA
.text:00405ADC
.text:00405ADC loc_405ADC:                             ; CODE XREF: _d_cv_qualifiers+8E↑j
.text:00405ADC                 mov     ebp, [ebp+0]
.text:00405ADF                 mov     eax, [ebp+0]
.text:00405AE2                 cmp     eax, 18h
.text:00405AE5                 jnz     short loc_405AC4
.text:00405AE7                 mov     dword ptr [ebp+0], 1Bh
.text:00405AEE                 jmp     short loc_405AD5
.text:00405AF0 ; ---------------------------------------------------------------------------
.text:00405AF0
.text:00405AF0 loc_405AF0:                             ; CODE XREF: _d_cv_qualifiers+97↑j
.text:00405AF0                 mov     dword ptr [ebp+0], 1Ch
.text:00405AF7                 jmp     short loc_405AD5
.text:00405AF7 _d_cv_qualifiers endp
.text:00405AF7
.text:00405AF7 ; ---------------------------------------------------------------------------
.text:00405AF9                 align 4
.text:00405AFC
.text:00405AFC ; =============== S U B R O U T I N E =======================================
.text:00405AFC
.text:00405AFC
.text:00405AFC _d_substitution proc near               ; CODE XREF: _d_name+7E↓p
.text:00405AFC                                         ; _d_name+26B↓p ...
.text:00405AFC
.text:00405AFC var_20          = dword ptr -20h
.text:00405AFC var_18          = dword ptr -18h
.text:00405AFC var_14          = dword ptr -14h
.text:00405AFC
.text:00405AFC                 mov     ecx, eax
.text:00405AFE                 mov     eax, [eax+0Ch]
.text:00405B01                 cmp     byte ptr [eax], 53h ; 'S'
.text:00405B04                 jz      short loc_405B0C
.text:00405B06                 xor     eax, eax
.text:00405B08                 retn
.text:00405B08 ; ---------------------------------------------------------------------------
.text:00405B09                 align 4
.text:00405B0C
.text:00405B0C loc_405B0C:                             ; CODE XREF: _d_substitution+8↑j
.text:00405B0C                 push    ebp
.text:00405B0D                 push    edi
.text:00405B0E                 push    esi
.text:00405B0F                 push    ebx
.text:00405B10                 sub     esp, 10h
.text:00405B13                 mov     ebx, edx
.text:00405B15                 lea     edx, [eax+1]
.text:00405B18                 mov     [ecx+0Ch], edx
.text:00405B1B                 movsx   edx, byte ptr [eax+1]
.text:00405B1F                 test    dl, dl
.text:00405B21                 jz      short loc_405B80
.text:00405B23                 add     eax, 2
.text:00405B26                 mov     [ecx+0Ch], eax
.text:00405B29                 cmp     dl, 5Fh ; '_'
.text:00405B2C                 jnz     short loc_405B70
.text:00405B2E                 xor     ebx, ebx
.text:00405B30
.text:00405B30 loc_405B30:                             ; CODE XREF: _d_substitution+E9↓j
.text:00405B30                 cmp     ebx, [ecx+20h]
.text:00405B33                 jnb     short loc_405B66
.text:00405B35                 inc     dword ptr [ecx+28h]
.text:00405B38                 mov     eax, [ecx+1Ch]
.text:00405B3B                 mov     eax, [eax+ebx*4]
.text:00405B3E
.text:00405B3E loc_405B3E:                             ; CODE XREF: _d_substitution+17B↓j
.text:00405B3E                 add     esp, 10h
.text:00405B41                 pop     ebx
.text:00405B42                 pop     esi
.text:00405B43                 pop     edi
.text:00405B44                 pop     ebp
.text:00405B45                 retn
.text:00405B45 ; ---------------------------------------------------------------------------
.text:00405B46                 align 4
.text:00405B48
.text:00405B48 loc_405B48:                             ; CODE XREF: _d_substitution+88↓j
.text:00405B48                 mov     ebx, 1
.text:00405B4D
.text:00405B4D loc_405B4D:                             ; CODE XREF: _d_substitution+9D↓j
.text:00405B4D                                         ; _d_substitution+F2↓j
.text:00405B4D                 mov     eax, offset _standard_subs
.text:00405B52                 xchg    ax, ax
.text:00405B54
.text:00405B54 loc_405B54:                             ; CODE XREF: _d_substitution+68↓j
.text:00405B54                 cmp     dl, [eax]
.text:00405B56                 jz      loc_405BF4
.text:00405B5C                 add     eax, 1Ch
.text:00405B5F                 cmp     eax, offset unk_4157E4
.text:00405B64                 jnz     short loc_405B54
.text:00405B66
.text:00405B66 loc_405B66:                             ; CODE XREF: _d_substitution+37↑j
.text:00405B66                                         ; _d_substitution+B5↓j ...
.text:00405B66                 xor     eax, eax
.text:00405B68                 add     esp, 10h
.text:00405B6B                 pop     ebx
.text:00405B6C                 pop     esi
.text:00405B6D                 pop     edi
.text:00405B6E                 pop     ebp
.text:00405B6F                 retn
.text:00405B70 ; ---------------------------------------------------------------------------
.text:00405B70
.text:00405B70 loc_405B70:                             ; CODE XREF: _d_substitution+30↑j
.text:00405B70                 lea     eax, [edx-30h]
.text:00405B73                 cmp     al, 9
.text:00405B75                 jbe     short loc_405B9C
.text:00405B77                 lea     eax, [edx-41h]
.text:00405B7A                 cmp     al, 19h
.text:00405B7C                 jbe     short loc_405B9C
.text:00405B7E                 xchg    ax, ax
.text:00405B80
.text:00405B80 loc_405B80:                             ; CODE XREF: _d_substitution+25↑j
.text:00405B80                 test    byte ptr [ecx+8], 8
.text:00405B84                 jnz     short loc_405B48
.text:00405B86                 test    ebx, ebx
.text:00405B88                 jz      short loc_405BEC
.text:00405B8A                 mov     eax, [ecx+0Ch]
.text:00405B8D                 mov     al, [eax]
.text:00405B8F                 sub     eax, 43h ; 'C'
.text:00405B92                 xor     ebx, ebx
.text:00405B94                 cmp     al, 1
.text:00405B96                 setbe   bl
.text:00405B99                 jmp     short loc_405B4D
.text:00405B99 ; ---------------------------------------------------------------------------
.text:00405B9B                 align 4
.text:00405B9C
.text:00405B9C loc_405B9C:                             ; CODE XREF: _d_substitution+79↑j
.text:00405B9C                                         ; _d_substitution+80↑j
.text:00405B9C                 xor     eax, eax
.text:00405B9E                 lea     ebx, [edx-30h]
.text:00405BA1                 cmp     bl, 9
.text:00405BA4                 ja      short loc_405BD0
.text:00405BA6                 xchg    ax, ax
.text:00405BA8
.text:00405BA8 loc_405BA8:                             ; CODE XREF: _d_substitution+D2↓j
.text:00405BA8                 lea     ebx, [eax+eax*8]
.text:00405BAB                 lea     ebx, [edx+ebx*4-30h]
.text:00405BAF
.text:00405BAF loc_405BAF:                             ; CODE XREF: _d_substitution+E3↓j
.text:00405BAF                 cmp     eax, ebx
.text:00405BB1                 ja      short loc_405B66
.text:00405BB3                 mov     eax, [ecx+0Ch]
.text:00405BB6                 movsx   edx, byte ptr [eax]
.text:00405BB9                 test    dl, dl
.text:00405BBB                 jz      short loc_405BC6
.text:00405BBD                 inc     eax
.text:00405BBE                 mov     [ecx+0Ch], eax
.text:00405BC1                 cmp     dl, 5Fh ; '_'
.text:00405BC4                 jz      short loc_405BE4
.text:00405BC6
.text:00405BC6 loc_405BC6:                             ; CODE XREF: _d_substitution+BF↑j
.text:00405BC6                 mov     eax, ebx
.text:00405BC8                 lea     ebx, [edx-30h]
.text:00405BCB                 cmp     bl, 9
.text:00405BCE                 jbe     short loc_405BA8
.text:00405BD0
.text:00405BD0 loc_405BD0:                             ; CODE XREF: _d_substitution+A8↑j
.text:00405BD0                 lea     ebx, [edx-41h]
.text:00405BD3                 cmp     bl, 19h
.text:00405BD6                 ja      short loc_405B66
.text:00405BD8                 lea     ebx, [eax+eax*8]
.text:00405BDB                 lea     ebx, [edx+ebx*4-37h]
.text:00405BDF                 jmp     short loc_405BAF
.text:00405BDF ; ---------------------------------------------------------------------------
.text:00405BE1                 align 4
.text:00405BE4
.text:00405BE4 loc_405BE4:                             ; CODE XREF: _d_substitution+C8↑j
.text:00405BE4                 inc     ebx
.text:00405BE5                 jmp     loc_405B30
.text:00405BE5 ; ---------------------------------------------------------------------------
.text:00405BEA                 align 4
.text:00405BEC
.text:00405BEC loc_405BEC:                             ; CODE XREF: _d_substitution+8C↑j
.text:00405BEC                 xor     ebx, ebx
.text:00405BEE                 jmp     loc_405B4D
.text:00405BEE ; ---------------------------------------------------------------------------
.text:00405BF3                 align 4
.text:00405BF4
.text:00405BF4 loc_405BF4:                             ; CODE XREF: _d_substitution+5A↑j
.text:00405BF4                 mov     edx, [eax+14h]
.text:00405BF7                 mov     [esp+20h+var_20], edx
.text:00405BFA                 test    edx, edx
.text:00405BFC                 jz      loc_405C88
.text:00405C02                 mov     edi, [eax+18h]
.text:00405C05                 mov     [esp+20h+var_14], edi
.text:00405C09                 mov     edx, [ecx+14h]
.text:00405C0C                 mov     ebp, [ecx+18h]
.text:00405C0F                 mov     [esp+20h+var_18], ebp
.text:00405C13                 cmp     edx, ebp
.text:00405C15                 jge     short loc_405C84
.text:00405C17                 lea     esi, [edx+edx*2]
.text:00405C1A                 mov     ebp, [ecx+10h]
.text:00405C1D                 lea     edi, [ebp+esi*4+0]
.text:00405C21                 inc     edx
.text:00405C22                 mov     [ecx+14h], edx
.text:00405C25                 test    edi, edi
.text:00405C27                 jz      short loc_405C3C
.text:00405C29                 mov     dword ptr [edi], 16h
.text:00405C2F                 mov     esi, [esp+20h+var_20]
.text:00405C32                 mov     [edi+4], esi
.text:00405C35                 mov     ebp, [esp+20h+var_14]
.text:00405C39                 mov     [edi+8], ebp
.text:00405C3C
.text:00405C3C loc_405C3C:                             ; CODE XREF: _d_substitution+12B↑j
.text:00405C3C                                         ; _d_substitution+18A↓j
.text:00405C3C                 mov     [ecx+2Ch], edi
.text:00405C3F
.text:00405C3F loc_405C3F:                             ; CODE XREF: _d_substitution+196↓j
.text:00405C3F                 test    ebx, ebx
.text:00405C41                 jz      short loc_405C7C
.text:00405C43                 mov     esi, [eax+0Ch]
.text:00405C46                 mov     ebx, [eax+10h]
.text:00405C49
.text:00405C49 loc_405C49:                             ; CODE XREF: _d_substitution+186↓j
.text:00405C49                 add     [ecx+30h], ebx
.text:00405C4C                 cmp     edx, [esp+20h+var_18]
.text:00405C50                 jge     loc_405B66
.text:00405C56                 lea     edi, [edx+edx*2]
.text:00405C59                 mov     eax, [ecx+10h]
.text:00405C5C                 lea     eax, [eax+edi*4]
.text:00405C5F                 inc     edx
.text:00405C60                 mov     [ecx+14h], edx
.text:00405C63                 test    eax, eax
.text:00405C65                 jz      loc_405B66
.text:00405C6B                 mov     dword ptr [eax], 16h
.text:00405C71                 mov     [eax+4], esi
.text:00405C74                 mov     [eax+8], ebx
.text:00405C77                 jmp     loc_405B3E
.text:00405C7C ; ---------------------------------------------------------------------------
.text:00405C7C
.text:00405C7C loc_405C7C:                             ; CODE XREF: _d_substitution+145↑j
.text:00405C7C                 mov     esi, [eax+4]
.text:00405C7F                 mov     ebx, [eax+8]
.text:00405C82                 jmp     short loc_405C49
.text:00405C84 ; ---------------------------------------------------------------------------
.text:00405C84
.text:00405C84 loc_405C84:                             ; CODE XREF: _d_substitution+119↑j
.text:00405C84                 xor     edi, edi
.text:00405C86                 jmp     short loc_405C3C
.text:00405C88 ; ---------------------------------------------------------------------------
.text:00405C88
.text:00405C88 loc_405C88:                             ; CODE XREF: _d_substitution+100↑j
.text:00405C88                 mov     esi, [ecx+18h]
.text:00405C8B                 mov     [esp+20h+var_18], esi
.text:00405C8F                 mov     edx, [ecx+14h]
.text:00405C92                 jmp     short loc_405C3F
.text:00405C92 _d_substitution endp
.text:00405C92
.text:00405C94
.text:00405C94 ; =============== S U B R O U T I N E =======================================
.text:00405C94
.text:00405C94
.text:00405C94 _d_append_char  proc near               ; CODE XREF: _d_print_comp+23E1↓p
.text:00405C94                                         ; _d_print_comp+2453↓p ...
.text:00405C94
.text:00405C94 var_2C          = dword ptr -2Ch
.text:00405C94 var_28          = dword ptr -28h
.text:00405C94 var_24          = dword ptr -24h
.text:00405C94 var_10          = dword ptr -10h
.text:00405C94
.text:00405C94                 push    ebx
.text:00405C95                 sub     esp, 28h
.text:00405C98                 mov     bl, dl
.text:00405C9A                 mov     ecx, [eax+100h]
.text:00405CA0                 cmp     ecx, 0FFh
.text:00405CA6                 jz      short loc_405CC0
.text:00405CA8                 lea     edx, [ecx+1]
.text:00405CAB
.text:00405CAB loc_405CAB:                             ; CODE XREF: _d_append_char+63↓j
.text:00405CAB                 mov     [eax+ecx], bl
.text:00405CAE                 mov     [eax+100h], edx
.text:00405CB4                 mov     [eax+104h], bl
.text:00405CBA                 add     esp, 28h
.text:00405CBD                 pop     ebx
.text:00405CBE                 retn
.text:00405CBE ; ---------------------------------------------------------------------------
.text:00405CBF                 align 10h
.text:00405CC0
.text:00405CC0 loc_405CC0:                             ; CODE XREF: _d_append_char+12↑j
.text:00405CC0                 mov     byte ptr [eax+0FFh], 0
.text:00405CC7                 mov     edx, [eax+10Ch]
.text:00405CCD                 mov     [esp+2Ch+var_24], edx
.text:00405CD1                 mov     [esp+2Ch+var_28], 0FFh
.text:00405CD9                 mov     [esp+2Ch+var_2C], eax
.text:00405CDC                 mov     [esp+2Ch+var_10], eax
.text:00405CE0                 call    dword ptr [eax+108h]
.text:00405CE6                 mov     eax, [esp+2Ch+var_10]
.text:00405CEA                 inc     dword ptr [eax+120h]
.text:00405CF0                 mov     edx, 1
.text:00405CF5                 xor     ecx, ecx
.text:00405CF7                 jmp     short loc_405CAB
.text:00405CF7 _d_append_char  endp
.text:00405CF7
.text:00405CF7 ; ---------------------------------------------------------------------------
.text:00405CF9                 align 4
.text:00405CFC
.text:00405CFC ; =============== S U B R O U T I N E =======================================
.text:00405CFC
.text:00405CFC
.text:00405CFC _d_number_isra_0 proc near              ; CODE XREF: _d_number_component+23↓p
.text:00405CFC                                         ; _d_compact_number+13↓p ...
.text:00405CFC                 push    edi
.text:00405CFD                 push    esi
.text:00405CFE                 push    ebx
.text:00405CFF                 mov     esi, eax
.text:00405D01                 mov     eax, [eax]
.text:00405D03                 movsx   ecx, byte ptr [eax]
.text:00405D06                 cmp     cl, 6Eh ; 'n'
.text:00405D09                 jz      short loc_405D3C
.text:00405D0B                 xor     edi, edi
.text:00405D0D
.text:00405D0D loc_405D0D:                             ; CODE XREF: _d_number_isra_0+4E↓j
.text:00405D0D                 lea     eax, [ecx-30h]
.text:00405D10                 cmp     al, 9
.text:00405D12                 ja      short loc_405D4C
.text:00405D14                 mov     edx, [esi]
.text:00405D16                 inc     edx
.text:00405D17                 xor     eax, eax
.text:00405D19                 lea     esi, [esi+0]
.text:00405D1C
.text:00405D1C loc_405D1C:                             ; CODE XREF: _d_number_isra_0+33↓j
.text:00405D1C                 lea     eax, [eax+eax*4]
.text:00405D1F                 lea     eax, [ecx+eax*2-30h]
.text:00405D23                 mov     [esi], edx
.text:00405D25                 movsx   ecx, byte ptr [edx]
.text:00405D28                 inc     edx
.text:00405D29                 lea     ebx, [ecx-30h]
.text:00405D2C                 cmp     bl, 9
.text:00405D2F                 jbe     short loc_405D1C
.text:00405D31
.text:00405D31 loc_405D31:                             ; CODE XREF: _d_number_isra_0+52↓j
.text:00405D31                 test    edi, edi
.text:00405D33                 jz      short loc_405D37
.text:00405D35                 neg     eax
.text:00405D37
.text:00405D37 loc_405D37:                             ; CODE XREF: _d_number_isra_0+37↑j
.text:00405D37                 pop     ebx
.text:00405D38                 pop     esi
.text:00405D39                 pop     edi
.text:00405D3A                 retn
.text:00405D3A ; ---------------------------------------------------------------------------
.text:00405D3B                 align 4
.text:00405D3C
.text:00405D3C loc_405D3C:                             ; CODE XREF: _d_number_isra_0+D↑j
.text:00405D3C                 lea     edx, [eax+1]
.text:00405D3F                 mov     [esi], edx
.text:00405D41                 movsx   ecx, byte ptr [eax+1]
.text:00405D45                 mov     edi, 1
.text:00405D4A                 jmp     short loc_405D0D
.text:00405D4C ; ---------------------------------------------------------------------------
.text:00405D4C
.text:00405D4C loc_405D4C:                             ; CODE XREF: _d_number_isra_0+16↑j
.text:00405D4C                 xor     eax, eax
.text:00405D4E                 jmp     short loc_405D31
.text:00405D4E _d_number_isra_0 endp
.text:00405D4E
.text:00405D50
.text:00405D50 ; =============== S U B R O U T I N E =======================================
.text:00405D50
.text:00405D50
.text:00405D50 _d_number_component proc near           ; CODE XREF: _d_type+41B↓p
.text:00405D50                                         ; _d_encoding+26E↓p
.text:00405D50                 push    ebx
.text:00405D51                 mov     ecx, [eax+14h]
.text:00405D54                 cmp     ecx, [eax+18h]
.text:00405D57                 jge     short loc_405D80
.text:00405D59                 lea     ebx, [ecx+ecx*2]
.text:00405D5C                 mov     edx, [eax+10h]
.text:00405D5F                 lea     ebx, [edx+ebx*4]
.text:00405D62                 inc     ecx
.text:00405D63                 mov     [eax+14h], ecx
.text:00405D66                 test    ebx, ebx
.text:00405D68                 jz      short loc_405D7B
.text:00405D6A                 mov     dword ptr [ebx], 3Ch ; '<'
.text:00405D70                 add     eax, 0Ch
.text:00405D73                 call    _d_number_isra_0
.text:00405D78                 mov     [ebx+4], eax
.text:00405D7B
.text:00405D7B loc_405D7B:                             ; CODE XREF: _d_number_component+18↑j
.text:00405D7B                 mov     eax, ebx
.text:00405D7D                 pop     ebx
.text:00405D7E                 retn
.text:00405D7E ; ---------------------------------------------------------------------------
.text:00405D7F                 align 10h
.text:00405D80
.text:00405D80 loc_405D80:                             ; CODE XREF: _d_number_component+7↑j
.text:00405D80                 xor     ebx, ebx
.text:00405D82                 mov     eax, ebx
.text:00405D84                 pop     ebx
.text:00405D85                 retn
.text:00405D85 _d_number_component endp
.text:00405D85
.text:00405D85 ; ---------------------------------------------------------------------------
.text:00405D86                 align 4
.text:00405D88
.text:00405D88 ; =============== S U B R O U T I N E =======================================
.text:00405D88
.text:00405D88
.text:00405D88 _d_compact_number proc near             ; CODE XREF: _d_template_param+1A↓p
.text:00405D88                                         ; _d_name+31D↓p ...
.text:00405D88                 push    ebx
.text:00405D89                 mov     ebx, eax
.text:00405D8B                 mov     edx, [eax+0Ch]
.text:00405D8E                 mov     al, [edx]
.text:00405D90                 cmp     al, 5Fh ; '_'
.text:00405D92                 jz      short loc_405DB0
.text:00405D94                 cmp     al, 6Eh ; 'n'
.text:00405D96                 jz      short loc_405DA8
.text:00405D98                 lea     eax, [ebx+0Ch]
.text:00405D9B                 call    _d_number_isra_0
.text:00405DA0                 mov     edx, [ebx+0Ch]
.text:00405DA3                 cmp     byte ptr [edx], 5Fh ; '_'
.text:00405DA6                 jz      short loc_405DB8
.text:00405DA8
.text:00405DA8 loc_405DA8:                             ; CODE XREF: _d_compact_number+E↑j
.text:00405DA8                 mov     eax, 0FFFFFFFFh
.text:00405DAD                 pop     ebx
.text:00405DAE                 retn
.text:00405DAE ; ---------------------------------------------------------------------------
.text:00405DAF                 align 10h
.text:00405DB0
.text:00405DB0 loc_405DB0:                             ; CODE XREF: _d_compact_number+A↑j
.text:00405DB0                 xor     eax, eax
.text:00405DB2
.text:00405DB2 loc_405DB2:                             ; CODE XREF: _d_compact_number+31↓j
.text:00405DB2                 inc     edx
.text:00405DB3                 mov     [ebx+0Ch], edx
.text:00405DB6                 pop     ebx
.text:00405DB7                 retn
.text:00405DB8 ; ---------------------------------------------------------------------------
.text:00405DB8
.text:00405DB8 loc_405DB8:                             ; CODE XREF: _d_compact_number+1E↑j
.text:00405DB8                 inc     eax
.text:00405DB9                 jmp     short loc_405DB2
.text:00405DB9 _d_compact_number endp
.text:00405DB9
.text:00405DB9 ; ---------------------------------------------------------------------------
.text:00405DBB                 align 4
.text:00405DBC
.text:00405DBC ; =============== S U B R O U T I N E =======================================
.text:00405DBC
.text:00405DBC
.text:00405DBC _d_template_param proc near             ; CODE XREF: _d_name+30B↓p
.text:00405DBC                                         ; _d_type+36E↓p ...
.text:00405DBC                 push    esi
.text:00405DBD                 push    ebx
.text:00405DBE                 mov     ebx, eax
.text:00405DC0                 mov     eax, [eax+0Ch]
.text:00405DC3                 cmp     byte ptr [eax], 54h ; 'T'
.text:00405DC6                 jz      short loc_405DD0
.text:00405DC8
.text:00405DC8 loc_405DC8:                             ; CODE XREF: _d_template_param+23↓j
.text:00405DC8                                         ; _d_template_param+2E↓j ...
.text:00405DC8                 xor     eax, eax
.text:00405DCA                 pop     ebx
.text:00405DCB                 pop     esi
.text:00405DCC                 retn
.text:00405DCC ; ---------------------------------------------------------------------------
.text:00405DCD                 align 10h
.text:00405DD0
.text:00405DD0 loc_405DD0:                             ; CODE XREF: _d_template_param+A↑j
.text:00405DD0                 inc     eax
.text:00405DD1                 mov     [ebx+0Ch], eax
.text:00405DD4                 mov     eax, ebx
.text:00405DD6                 call    _d_compact_number
.text:00405DDB                 mov     ecx, eax
.text:00405DDD                 test    eax, eax
.text:00405DDF                 js      short loc_405DC8
.text:00405DE1                 inc     dword ptr [ebx+28h]
.text:00405DE4                 mov     edx, [ebx+14h]
.text:00405DE7                 cmp     edx, [ebx+18h]
.text:00405DEA                 jge     short loc_405DC8
.text:00405DEC                 lea     esi, [edx+edx*2]
.text:00405DEF                 mov     eax, [ebx+10h]
.text:00405DF2                 lea     eax, [eax+esi*4]
.text:00405DF5                 inc     edx
.text:00405DF6                 mov     [ebx+14h], edx
.text:00405DF9                 test    eax, eax
.text:00405DFB                 jz      short loc_405DC8
.text:00405DFD                 mov     dword ptr [eax], 5
.text:00405E03                 mov     [eax+4], ecx
.text:00405E06                 pop     ebx
.text:00405E07                 pop     esi
.text:00405E08                 retn
.text:00405E08 _d_template_param endp
.text:00405E08
.text:00405E08 ; ---------------------------------------------------------------------------
.text:00405E09                 align 4
.text:00405E0C
.text:00405E0C ; =============== S U B R O U T I N E =======================================
.text:00405E0C
.text:00405E0C
.text:00405E0C _d_discriminator proc near              ; CODE XREF: _d_name+2B1↓p
.text:00405E0C                                         ; _d_name+340↓p ...
.text:00405E0C                 mov     edx, [eax+0Ch]
.text:00405E0F                 cmp     byte ptr [edx], 5Fh ; '_'
.text:00405E12                 jz      short loc_405E1C
.text:00405E14                 mov     eax, 1
.text:00405E19                 retn
.text:00405E19 ; ---------------------------------------------------------------------------
.text:00405E1A                 align 4
.text:00405E1C
.text:00405E1C loc_405E1C:                             ; CODE XREF: _d_discriminator+6↑j
.text:00405E1C                 inc     edx
.text:00405E1D                 mov     [eax+0Ch], edx
.text:00405E20                 add     eax, 0Ch
.text:00405E23                 call    _d_number_isra_0
.text:00405E28                 not     eax
.text:00405E2A                 shr     eax, 1Fh
.text:00405E2D                 retn
.text:00405E2D _d_discriminator endp
.text:00405E2D
.text:00405E2D ; ---------------------------------------------------------------------------
.text:00405E2E                 align 10h
.text:00405E30
.text:00405E30 ; =============== S U B R O U T I N E =======================================
.text:00405E30
.text:00405E30
.text:00405E30 _d_source_name  proc near               ; CODE XREF: _d_type+C0↓p
.text:00405E30                                         ; _d_type+3A9↓p ...
.text:00405E30
.text:00405E30 var_2C          = dword ptr -2Ch
.text:00405E30 var_28          = dword ptr -28h
.text:00405E30 var_24          = dword ptr -24h
.text:00405E30 var_14          = dword ptr -14h
.text:00405E30 var_10          = dword ptr -10h
.text:00405E30
.text:00405E30                 push    ebx
.text:00405E31                 sub     esp, 28h
.text:00405E34                 mov     ebx, eax
.text:00405E36                 lea     eax, [eax+0Ch]
.text:00405E39                 call    _d_number_isra_0
.text:00405E3E                 mov     ecx, eax
.text:00405E40                 test    eax, eax
.text:00405E42                 jle     loc_405EE4
.text:00405E48                 mov     edx, [ebx+0Ch]
.text:00405E4B                 mov     eax, [ebx+4]
.text:00405E4E                 sub     eax, edx
.text:00405E50                 cmp     ecx, eax
.text:00405E52                 jg      loc_405EE8
.text:00405E58                 lea     eax, [edx+ecx]
.text:00405E5B                 mov     [ebx+0Ch], eax
.text:00405E5E                 test    byte ptr [ebx+8], 4
.text:00405E62                 jnz     short loc_405EA4
.text:00405E64
.text:00405E64 loc_405E64:                             ; CODE XREF: _d_source_name+77↓j
.text:00405E64                                         ; _d_source_name+7D↓j
.text:00405E64                 cmp     ecx, 9
.text:00405E67                 jle     short loc_405E95
.text:00405E69                 mov     [esp+2Ch+var_24], 8 ; size_t
.text:00405E71                 mov     [esp+2Ch+var_28], offset aGlobal ; "_GLOBAL_"
.text:00405E79                 mov     [esp+2Ch+var_2C], edx ; void *
.text:00405E7C                 mov     [esp+2Ch+var_14], edx
.text:00405E80                 mov     [esp+2Ch+var_10], ecx
.text:00405E84                 call    _memcmp
.text:00405E89                 test    eax, eax
.text:00405E8B                 mov     edx, [esp+2Ch+var_14]
.text:00405E8F                 mov     ecx, [esp+2Ch+var_10]
.text:00405E93                 jz      short loc_405EB0
.text:00405E95
.text:00405E95 loc_405E95:                             ; CODE XREF: _d_source_name+37↑j
.text:00405E95                                         ; _d_source_name+8D↓j ...
.text:00405E95                 mov     eax, ebx
.text:00405E97                 call    _d_make_name
.text:00405E9C
.text:00405E9C loc_405E9C:                             ; CODE XREF: _d_source_name+B1↓j
.text:00405E9C                                         ; _d_source_name+BA↓j
.text:00405E9C                 mov     [ebx+2Ch], eax
.text:00405E9F
.text:00405E9F loc_405E9F:                             ; CODE XREF: _d_source_name+B6↓j
.text:00405E9F                 add     esp, 28h
.text:00405EA2                 pop     ebx
.text:00405EA3                 retn
.text:00405EA4 ; ---------------------------------------------------------------------------
.text:00405EA4
.text:00405EA4 loc_405EA4:                             ; CODE XREF: _d_source_name+32↑j
.text:00405EA4                 cmp     byte ptr [eax], 24h ; '$'
.text:00405EA7                 jnz     short loc_405E64
.text:00405EA9                 inc     eax
.text:00405EAA                 mov     [ebx+0Ch], eax
.text:00405EAD                 jmp     short loc_405E64
.text:00405EAD ; ---------------------------------------------------------------------------
.text:00405EAF                 align 10h
.text:00405EB0
.text:00405EB0 loc_405EB0:                             ; CODE XREF: _d_source_name+63↑j
.text:00405EB0                 mov     al, [edx+8]
.text:00405EB3                 cmp     al, 2Eh ; '.'
.text:00405EB5                 jz      short loc_405EBF
.text:00405EB7                 cmp     al, 5Fh ; '_'
.text:00405EB9                 jz      short loc_405EBF
.text:00405EBB                 cmp     al, 24h ; '$'
.text:00405EBD                 jnz     short loc_405E95
.text:00405EBF
.text:00405EBF loc_405EBF:                             ; CODE XREF: _d_source_name+85↑j
.text:00405EBF                                         ; _d_source_name+89↑j
.text:00405EBF                 cmp     byte ptr [edx+9], 4Eh ; 'N'
.text:00405EC3                 jnz     short loc_405E95
.text:00405EC5                 mov     eax, [ebx+30h]
.text:00405EC8                 add     eax, 16h
.text:00405ECB                 sub     eax, ecx
.text:00405ECD                 mov     [ebx+30h], eax
.text:00405ED0                 mov     ecx, 15h
.text:00405ED5                 mov     edx, offset aAnonymousNames ; "(anonymous namespace)"
.text:00405EDA                 mov     eax, ebx
.text:00405EDC                 call    _d_make_name
.text:00405EE1                 jmp     short loc_405E9C
.text:00405EE1 ; ---------------------------------------------------------------------------
.text:00405EE3                 align 4
.text:00405EE4
.text:00405EE4 loc_405EE4:                             ; CODE XREF: _d_source_name+12↑j
.text:00405EE4                 xor     eax, eax
.text:00405EE6                 jmp     short loc_405E9F
.text:00405EE8 ; ---------------------------------------------------------------------------
.text:00405EE8
.text:00405EE8 loc_405EE8:                             ; CODE XREF: _d_source_name+22↑j
.text:00405EE8                 xor     eax, eax
.text:00405EEA                 jmp     short loc_405E9C
.text:00405EEA _d_source_name  endp
.text:00405EEA
.text:00405EEC
.text:00405EEC ; =============== S U B R O U T I N E =======================================
.text:00405EEC
.text:00405EEC
.text:00405EEC _d_call_offset  proc near               ; CODE XREF: _d_encoding+361↓p
.text:00405EEC                                         ; _d_encoding+39A↓p ...
.text:00405EEC                 push    esi
.text:00405EED                 push    ebx
.text:00405EEE                 mov     ebx, eax
.text:00405EF0                 test    edx, edx
.text:00405EF2                 jnz     short loc_405F08
.text:00405EF4                 mov     eax, [eax+0Ch]
.text:00405EF7                 movsx   edx, byte ptr [eax]
.text:00405EFA                 test    dl, dl
.text:00405EFC                 jnz     short loc_405F04
.text:00405EFE
.text:00405EFE loc_405EFE:                             ; CODE XREF: _d_call_offset+24↓j
.text:00405EFE                                         ; _d_call_offset+36↓j ...
.text:00405EFE                 xor     eax, eax
.text:00405F00
.text:00405F00 loc_405F00:                             ; CODE XREF: _d_call_offset+61↓j
.text:00405F00                 pop     ebx
.text:00405F01                 pop     esi
.text:00405F02                 retn
.text:00405F02 ; ---------------------------------------------------------------------------
.text:00405F03                 align 4
.text:00405F04
.text:00405F04 loc_405F04:                             ; CODE XREF: _d_call_offset+10↑j
.text:00405F04                 inc     eax
.text:00405F05                 mov     [ebx+0Ch], eax
.text:00405F08
.text:00405F08 loc_405F08:                             ; CODE XREF: _d_call_offset+6↑j
.text:00405F08                 cmp     edx, 68h ; 'h'
.text:00405F0B                 jz      short loc_405F34
.text:00405F0D                 cmp     edx, 76h ; 'v'
.text:00405F10                 jnz     short loc_405EFE
.text:00405F12                 lea     esi, [ebx+0Ch]
.text:00405F15                 mov     eax, esi
.text:00405F17                 call    _d_number_isra_0
.text:00405F1C                 mov     eax, [ebx+0Ch]
.text:00405F1F                 cmp     byte ptr [eax], 5Fh ; '_'
.text:00405F22                 jnz     short loc_405EFE
.text:00405F24                 inc     eax
.text:00405F25                 mov     [ebx+0Ch], eax
.text:00405F28                 mov     eax, esi
.text:00405F2A                 call    _d_number_isra_0
.text:00405F2F                 jmp     short loc_405F3C
.text:00405F2F ; ---------------------------------------------------------------------------
.text:00405F31                 align 4
.text:00405F34
.text:00405F34 loc_405F34:                             ; CODE XREF: _d_call_offset+1F↑j
.text:00405F34                 lea     eax, [ebx+0Ch]
.text:00405F37                 call    _d_number_isra_0
.text:00405F3C
.text:00405F3C loc_405F3C:                             ; CODE XREF: _d_call_offset+43↑j
.text:00405F3C                 mov     eax, [ebx+0Ch]
.text:00405F3F                 cmp     byte ptr [eax], 5Fh ; '_'
.text:00405F42                 jnz     short loc_405EFE
.text:00405F44                 inc     eax
.text:00405F45                 mov     [ebx+0Ch], eax
.text:00405F48                 mov     eax, 1
.text:00405F4D                 jmp     short loc_405F00
.text:00405F4D _d_call_offset  endp
.text:00405F4D
.text:00405F4D ; ---------------------------------------------------------------------------
.text:00405F4F                 align 10h
.text:00405F50
.text:00405F50 ; =============== S U B R O U T I N E =======================================
.text:00405F50
.text:00405F50
.text:00405F50 _d_lookup_template_argument_isra_5 proc near
.text:00405F50                                         ; CODE XREF: _d_find_pack+41↓p
.text:00405F50                                         ; _d_print_comp+EF4↓p ...
.text:00405F50                 mov     ecx, [eax+110h]
.text:00405F56                 test    ecx, ecx
.text:00405F58                 jz      short loc_405F90
.text:00405F5A                 mov     edx, [edx]
.text:00405F5C                 mov     eax, [ecx+4]
.text:00405F5F                 mov     eax, [eax+8]
.text:00405F62                 test    eax, eax
.text:00405F64                 jz      short loc_405F88
.text:00405F66                 cmp     dword ptr [eax], 2Bh ; '+'
.text:00405F69                 jnz     short loc_405F88
.text:00405F6B                 cmp     edx, 0
.text:00405F6E                 jg      short loc_405F7D
.text:00405F70                 jmp     short loc_405F86
.text:00405F70 ; ---------------------------------------------------------------------------
.text:00405F72                 align 4
.text:00405F74
.text:00405F74 loc_405F74:                             ; CODE XREF: _d_lookup_template_argument_isra_5+33↓j
.text:00405F74                 cmp     dword ptr [eax], 2Bh ; '+'
.text:00405F77                 jnz     short loc_405F88
.text:00405F79                 test    edx, edx
.text:00405F7B                 jz      short loc_405F8C
.text:00405F7D
.text:00405F7D loc_405F7D:                             ; CODE XREF: _d_lookup_template_argument_isra_5+1E↑j
.text:00405F7D                 dec     edx
.text:00405F7E                 mov     eax, [eax+8]
.text:00405F81                 test    eax, eax
.text:00405F83                 jnz     short loc_405F74
.text:00405F85                 retn
.text:00405F86 ; ---------------------------------------------------------------------------
.text:00405F86
.text:00405F86 loc_405F86:                             ; CODE XREF: _d_lookup_template_argument_isra_5+20↑j
.text:00405F86                 jz      short loc_405F8C
.text:00405F88
.text:00405F88 loc_405F88:                             ; CODE XREF: _d_lookup_template_argument_isra_5+14↑j
.text:00405F88                                         ; _d_lookup_template_argument_isra_5+19↑j ...
.text:00405F88                 xor     eax, eax
.text:00405F8A                 retn
.text:00405F8A ; ---------------------------------------------------------------------------
.text:00405F8B                 align 4
.text:00405F8C
.text:00405F8C loc_405F8C:                             ; CODE XREF: _d_lookup_template_argument_isra_5+2B↑j
.text:00405F8C                                         ; _d_lookup_template_argument_isra_5:loc_405F86↑j
.text:00405F8C                 mov     eax, [eax+4]
.text:00405F8F                 retn
.text:00405F90 ; ---------------------------------------------------------------------------
.text:00405F90
.text:00405F90 loc_405F90:                             ; CODE XREF: _d_lookup_template_argument_isra_5+8↑j
.text:00405F90                 mov     dword ptr [eax+118h], 1
.text:00405F9A                 xor     eax, eax
.text:00405F9C                 retn
.text:00405F9C _d_lookup_template_argument_isra_5 endp
.text:00405F9C
.text:00405F9C ; ---------------------------------------------------------------------------
.text:00405F9D                 align 10h
.text:00405FA0
.text:00405FA0 ; =============== S U B R O U T I N E =======================================
.text:00405FA0
.text:00405FA0
.text:00405FA0 _d_find_pack    proc near               ; CODE XREF: _d_find_pack+15↓p
.text:00405FA0                                         ; _d_print_comp+D0↓p
.text:00405FA0                 push    esi
.text:00405FA1                 push    ebx
.text:00405FA2                 push    ecx
.text:00405FA3                 mov     esi, eax
.text:00405FA5                 mov     ebx, edx
.text:00405FA7                 test    edx, edx
.text:00405FA9                 jz      short loc_405FC8 ; jumptable 00405FD2 cases 0,6,22,35,45,59,64,69
.text:00405FAB
.text:00405FAB loc_405FAB:                             ; CODE XREF: _d_find_pack+23↓j
.text:00405FAB                 cmp     dword ptr [ebx], 45h ; switch 70 cases
.text:00405FAE                 jbe     short loc_405FD0
.text:00405FB0
.text:00405FB0 def_405FD2:                             ; CODE XREF: _d_find_pack+32↓j
.text:00405FB0                                         ; DATA XREF: .rdata:jpt_405FD2↓o
.text:00405FB0                 mov     edx, [ebx+4]    ; jumptable 00405FD2 default case, cases 1-4,9-21,23-34,36-44,47-58,60-63,65-68
.text:00405FB3                 mov     eax, esi
.text:00405FB5                 call    _d_find_pack
.text:00405FBA                 test    eax, eax
.text:00405FBC                 jnz     short loc_405FCA
.text:00405FBE
.text:00405FBE loc_405FBE:                             ; CODE XREF: _d_find_pack+32↓j
.text:00405FBE                                         ; DATA XREF: .rdata:jpt_405FD2↓o
.text:00405FBE                 mov     ebx, [ebx+8]    ; jumptable 00405FD2 cases 7,8,46
.text:00405FC1                 test    ebx, ebx
.text:00405FC3                 jnz     short loc_405FAB
.text:00405FC5                 lea     esi, [esi+0]
.text:00405FC8
.text:00405FC8 loc_405FC8:                             ; CODE XREF: _d_find_pack+9↑j
.text:00405FC8                                         ; _d_find_pack+32↓j ...
.text:00405FC8                 xor     eax, eax        ; jumptable 00405FD2 cases 0,6,22,35,45,59,64,69
.text:00405FCA
.text:00405FCA loc_405FCA:                             ; CODE XREF: _d_find_pack+1C↑j
.text:00405FCA                 pop     esi
.text:00405FCB                 pop     ebx
.text:00405FCC                 pop     esi
.text:00405FCD                 retn
.text:00405FCD ; ---------------------------------------------------------------------------
.text:00405FCE                 align 10h
.text:00405FD0
.text:00405FD0 loc_405FD0:                             ; CODE XREF: _d_find_pack+E↑j
.text:00405FD0                 mov     edx, [ebx]
.text:00405FD2                 jmp     ds:jpt_405FD2[edx*4] ; switch jump
.text:00405FD2 ; ---------------------------------------------------------------------------
.text:00405FD9                 align 4
.text:00405FDC
.text:00405FDC loc_405FDC:                             ; CODE XREF: _d_find_pack+32↑j
.text:00405FDC                                         ; DATA XREF: .rdata:jpt_405FD2↓o
.text:00405FDC                 lea     edx, [ebx+4]    ; jumptable 00405FD2 case 5
.text:00405FDF                 mov     eax, esi
.text:00405FE1                 call    _d_lookup_template_argument_isra_5
.text:00405FE6                 test    eax, eax
.text:00405FE8                 jz      short loc_405FC8 ; jumptable 00405FD2 cases 0,6,22,35,45,59,64,69
.text:00405FEA                 cmp     dword ptr [eax], 2Bh ; '+'
.text:00405FED                 jnz     short loc_405FC8 ; jumptable 00405FD2 cases 0,6,22,35,45,59,64,69
.text:00405FEF                 pop     esi
.text:00405FF0                 pop     ebx
.text:00405FF1                 pop     esi
.text:00405FF2                 retn
.text:00405FF2 _d_find_pack    endp
.text:00405FF2
.text:00405FF2 ; ---------------------------------------------------------------------------
.text:00405FF3                 align 4
.text:00405FF4
.text:00405FF4 ; =============== S U B R O U T I N E =======================================
.text:00405FF4
.text:00405FF4
.text:00405FF4 _d_append_string proc near              ; CODE XREF: _d_print_comp+2432↓p
.text:00405FF4                                         ; _d_print_comp+2A79↓p ...
.text:00405FF4
.text:00405FF4 var_3C          = dword ptr -3Ch
.text:00405FF4 var_38          = dword ptr -38h
.text:00405FF4 var_34          = dword ptr -34h
.text:00405FF4 var_20          = byte ptr -20h
.text:00405FF4
.text:00405FF4                 push    ebp
.text:00405FF5                 push    edi
.text:00405FF6                 push    esi
.text:00405FF7                 push    ebx
.text:00405FF8                 sub     esp, 2Ch
.text:00405FFB                 mov     esi, eax
.text:00405FFD                 xor     eax, eax
.text:00405FFF                 mov     ecx, 0FFFFFFFFh
.text:00406004                 mov     edi, edx
.text:00406006                 repne scasb
.text:00406008                 not     ecx
.text:0040600A                 dec     ecx
.text:0040600B                 jz      short loc_406078
.text:0040600D                 mov     ebx, [esi+100h]
.text:00406013                 mov     edi, edx
.text:00406015                 lea     ebp, [edx+ecx]
.text:00406018                 jmp     short loc_406033
.text:00406018 ; ---------------------------------------------------------------------------
.text:0040601A                 align 4
.text:0040601C
.text:0040601C loc_40601C:                             ; CODE XREF: _d_append_string+47↓j
.text:0040601C                 mov     edx, ebx
.text:0040601E                 inc     ebx
.text:0040601F
.text:0040601F loc_40601F:                             ; CODE XREF: _d_append_string+80↓j
.text:0040601F                 mov     [esi+edx], al
.text:00406022                 mov     [esi+100h], ebx
.text:00406028                 mov     [esi+104h], al
.text:0040602E                 inc     edi
.text:0040602F                 cmp     edi, ebp
.text:00406031                 jz      short loc_406078
.text:00406033
.text:00406033 loc_406033:                             ; CODE XREF: _d_append_string+24↑j
.text:00406033                 mov     al, [edi]
.text:00406035                 cmp     ebx, 0FFh
.text:0040603B                 jnz     short loc_40601C
.text:0040603D                 mov     byte ptr [esi+0FFh], 0
.text:00406044                 mov     edx, [esi+10Ch]
.text:0040604A                 mov     [esp+3Ch+var_34], edx
.text:0040604E                 mov     [esp+3Ch+var_38], 0FFh
.text:00406056                 mov     [esp+3Ch+var_3C], esi
.text:00406059                 mov     [esp+3Ch+var_20], al
.text:0040605D                 call    dword ptr [esi+108h]
.text:00406063                 inc     dword ptr [esi+120h]
.text:00406069                 mov     ebx, 1
.text:0040606E                 xor     edx, edx
.text:00406070                 mov     al, [esp+3Ch+var_20]
.text:00406074                 jmp     short loc_40601F
.text:00406074 ; ---------------------------------------------------------------------------
.text:00406076                 align 4
.text:00406078
.text:00406078 loc_406078:                             ; CODE XREF: _d_append_string+17↑j
.text:00406078                                         ; _d_append_string+3D↑j
.text:00406078                 add     esp, 2Ch
.text:0040607B                 pop     ebx
.text:0040607C                 pop     esi
.text:0040607D                 pop     edi
.text:0040607E                 pop     ebp
.text:0040607F                 retn
.text:0040607F _d_append_string endp
.text:0040607F
.text:00406080
.text:00406080 ; =============== S U B R O U T I N E =======================================
.text:00406080
.text:00406080
.text:00406080 _d_expr_primary proc near               ; CODE XREF: _d_template_args+AE↓p
.text:00406080                                         ; _d_expression+269↓j
.text:00406080
.text:00406080 var_2C          = dword ptr -2Ch
.text:00406080
.text:00406080                 push    ebp
.text:00406081                 push    edi
.text:00406082                 push    esi
.text:00406083                 push    ebx
.text:00406084                 sub     esp, 1Ch
.text:00406087                 mov     esi, eax
.text:00406089                 mov     eax, [eax+0Ch]
.text:0040608C                 cmp     byte ptr [eax], 4Ch ; 'L'
.text:0040608F                 jz      short loc_40609C
.text:00406091
.text:00406091 loc_406091:                             ; CODE XREF: _d_expr_primary+48↓j
.text:00406091                                         ; _d_expr_primary+63↓j ...
.text:00406091                 xor     eax, eax
.text:00406093                 add     esp, 1Ch
.text:00406096                 pop     ebx
.text:00406097                 pop     esi
.text:00406098                 pop     edi
.text:00406099                 pop     ebp
.text:0040609A                 retn
.text:0040609A ; ---------------------------------------------------------------------------
.text:0040609B                 align 4
.text:0040609C
.text:0040609C loc_40609C:                             ; CODE XREF: _d_expr_primary+F↑j
.text:0040609C                 lea     edx, [eax+1]
.text:0040609F                 mov     [esi+0Ch], edx
.text:004060A2                 mov     cl, [eax+1]
.text:004060A5                 cmp     cl, 5Fh ; '_'
.text:004060A8                 jz      loc_40614A
.text:004060AE                 cmp     cl, 5Ah ; 'Z'
.text:004060B1                 jnz     short loc_4060D8
.text:004060B3
.text:004060B3 loc_4060B3:                             ; CODE XREF: _d_expr_primary+D6↓j
.text:004060B3                 inc     edx
.text:004060B4                 mov     [esi+0Ch], edx
.text:004060B7                 xor     edx, edx
.text:004060B9                 mov     eax, esi
.text:004060BB                 call    _d_encoding
.text:004060C0                 mov     edx, [esi+0Ch]
.text:004060C3                 mov     cl, [edx]
.text:004060C5                 cmp     cl, 45h ; 'E'
.text:004060C8                 jnz     short loc_406091
.text:004060CA
.text:004060CA loc_4060CA:                             ; CODE XREF: _d_expr_primary+C8↓j
.text:004060CA                                         ; _d_expr_primary+E7↓j
.text:004060CA                 inc     edx
.text:004060CB                 mov     [esi+0Ch], edx
.text:004060CE                 add     esp, 1Ch
.text:004060D1                 pop     ebx
.text:004060D2                 pop     esi
.text:004060D3                 pop     edi
.text:004060D4                 pop     ebp
.text:004060D5                 retn
.text:004060D5 ; ---------------------------------------------------------------------------
.text:004060D6                 align 4
.text:004060D8
.text:004060D8 loc_4060D8:                             ; CODE XREF: _d_expr_primary+31↑j
.text:004060D8                 mov     eax, esi
.text:004060DA                 call    _d_type
.text:004060DF                 mov     edi, eax
.text:004060E1                 test    eax, eax
.text:004060E3                 jz      short loc_406091
.text:004060E5                 cmp     dword ptr [eax], 23h ; '#'
.text:004060E8                 jz      loc_406184
.text:004060EE
.text:004060EE loc_4060EE:                             ; CODE XREF: _d_expr_primary+10C↓j
.text:004060EE                                         ; _d_expr_primary+118↓j
.text:004060EE                 mov     edx, [esi+0Ch]
.text:004060F1                 mov     bl, [edx]
.text:004060F3                 cmp     bl, 6Eh ; 'n'
.text:004060F6                 jz      short loc_40616C
.text:004060F8                 mov     ebp, 37h ; '7'
.text:004060FD
.text:004060FD loc_4060FD:                             ; CODE XREF: _d_expr_primary+FC↓j
.text:004060FD                 cmp     bl, 45h ; 'E'
.text:00406100                 jz      loc_40619D
.text:00406106                 test    bl, bl
.text:00406108                 jz      short loc_406091
.text:0040610A                 lea     ecx, [edx+1]
.text:0040610D                 jmp     short loc_406119
.text:0040610D ; ---------------------------------------------------------------------------
.text:0040610F                 align 10h
.text:00406110
.text:00406110 loc_406110:                             ; CODE XREF: _d_expr_primary+A1↓j
.text:00406110                 inc     ecx
.text:00406111                 test    bl, bl
.text:00406113                 jz      loc_406091
.text:00406119
.text:00406119 loc_406119:                             ; CODE XREF: _d_expr_primary+8D↑j
.text:00406119                 mov     [esi+0Ch], ecx
.text:0040611C                 mov     bl, [ecx]
.text:0040611E                 cmp     bl, 45h ; 'E'
.text:00406121                 jnz     short loc_406110
.text:00406123                 sub     ecx, edx
.text:00406125
.text:00406125 loc_406125:                             ; CODE XREF: _d_expr_primary+11F↓j
.text:00406125                 mov     eax, esi
.text:00406127                 call    _d_make_name
.text:0040612C                 mov     [esp+2Ch+var_2C], eax
.text:0040612F                 mov     ecx, edi
.text:00406131                 mov     edx, ebp
.text:00406133                 mov     eax, esi
.text:00406135                 call    _d_make_comp
.text:0040613A                 mov     edx, [esi+0Ch]
.text:0040613D                 mov     cl, [edx]
.text:0040613F                 cmp     cl, 45h ; 'E'
.text:00406142                 jnz     loc_406091
.text:00406148                 jmp     short loc_4060CA
.text:0040614A ; ---------------------------------------------------------------------------
.text:0040614A
.text:0040614A loc_40614A:                             ; CODE XREF: _d_expr_primary+28↑j
.text:0040614A                 lea     edx, [eax+2]
.text:0040614D                 mov     [esi+0Ch], edx
.text:00406150                 mov     cl, [eax+2]
.text:00406153                 cmp     cl, 5Ah ; 'Z'
.text:00406156                 jz      loc_4060B3
.text:0040615C                 xor     eax, eax
.text:0040615E                 cmp     cl, 45h ; 'E'
.text:00406161                 jnz     loc_406091
.text:00406167                 jmp     loc_4060CA
.text:0040616C ; ---------------------------------------------------------------------------
.text:0040616C
.text:0040616C loc_40616C:                             ; CODE XREF: _d_expr_primary+76↑j
.text:0040616C                 lea     eax, [edx+1]
.text:0040616F                 mov     [esi+0Ch], eax
.text:00406172                 mov     bl, [edx+1]
.text:00406175                 mov     edx, eax
.text:00406177                 mov     ebp, 38h ; '8'
.text:0040617C                 jmp     loc_4060FD
.text:0040617C ; ---------------------------------------------------------------------------
.text:00406181                 align 4
.text:00406184
.text:00406184 loc_406184:                             ; CODE XREF: _d_expr_primary+68↑j
.text:00406184                 mov     eax, [eax+4]
.text:00406187                 mov     ebx, [eax+10h]
.text:0040618A                 test    ebx, ebx
.text:0040618C                 jz      loc_4060EE
.text:00406192                 mov     eax, [eax+4]
.text:00406195                 sub     [esi+30h], eax
.text:00406198                 jmp     loc_4060EE
.text:0040619D ; ---------------------------------------------------------------------------
.text:0040619D
.text:0040619D loc_40619D:                             ; CODE XREF: _d_expr_primary+80↑j
.text:0040619D                 xor     ecx, ecx
.text:0040619F                 jmp     short loc_406125
.text:0040619F _d_expr_primary endp
.text:0040619F
.text:0040619F ; ---------------------------------------------------------------------------
.text:004061A1                 align 4
.text:004061A4
.text:004061A4 ; =============== S U B R O U T I N E =======================================
.text:004061A4
.text:004061A4
.text:004061A4 _d_template_args proc near              ; CODE XREF: _d_template_args+A2↓p
.text:004061A4                                         ; _d_name+8F↓p ...
.text:004061A4
.text:004061A4 var_2C          = dword ptr -2Ch
.text:004061A4 var_10          = dword ptr -10h
.text:004061A4
.text:004061A4                 push    edi
.text:004061A5                 push    esi
.text:004061A6                 push    ebx
.text:004061A7                 sub     esp, 20h
.text:004061AA                 mov     ebx, eax
.text:004061AC                 mov     edi, [eax+2Ch]
.text:004061AF                 mov     ecx, [eax+0Ch]
.text:004061B2                 mov     al, [ecx]
.text:004061B4                 sub     eax, 49h ; 'I'
.text:004061B7                 cmp     al, 1
.text:004061B9                 ja      short loc_406231
.text:004061BB                 lea     edx, [ecx+1]
.text:004061BE                 mov     [ebx+0Ch], edx
.text:004061C1                 mov     al, [ecx+1]
.text:004061C4                 cmp     al, 45h ; 'E'
.text:004061C6                 jz      loc_40626E
.text:004061CC                 mov     [esp+2Ch+var_10], 0
.text:004061D4                 lea     esi, [esp+2Ch+var_10]
.text:004061D8                 jmp     short loc_40620E
.text:004061D8 ; ---------------------------------------------------------------------------
.text:004061DA                 align 4
.text:004061DC
.text:004061DC loc_4061DC:                             ; CODE XREF: _d_template_args+6C↓j
.text:004061DC                                         ; _d_template_args+78↓j
.text:004061DC                 mov     eax, ebx
.text:004061DE                 call    _d_type
.text:004061E3
.text:004061E3 loc_4061E3:                             ; CODE XREF: _d_template_args+9C↓j
.text:004061E3                                         ; _d_template_args+A7↓j ...
.text:004061E3                 test    eax, eax
.text:004061E5                 jz      short loc_406231
.text:004061E7                 mov     [esp+2Ch+var_2C], 0
.text:004061EE                 mov     ecx, eax
.text:004061F0                 mov     edx, 2Bh ; '+'
.text:004061F5                 mov     eax, ebx
.text:004061F7                 call    _d_make_comp
.text:004061FC                 mov     [esi], eax
.text:004061FE                 test    eax, eax
.text:00406200                 jz      short loc_406231
.text:00406202                 lea     esi, [eax+8]
.text:00406205                 mov     edx, [ebx+0Ch]
.text:00406208                 mov     al, [edx]
.text:0040620A                 cmp     al, 45h ; 'E'
.text:0040620C                 jz      short loc_40625C
.text:0040620E
.text:0040620E loc_40620E:                             ; CODE XREF: _d_template_args+34↑j
.text:0040620E                 cmp     al, 49h ; 'I'
.text:00406210                 jl      short loc_4061DC
.text:00406212                 cmp     al, 4Ah ; 'J'
.text:00406214                 jle     short loc_406244
.text:00406216                 cmp     al, 4Ch ; 'L'
.text:00406218                 jz      short loc_406250
.text:0040621A                 cmp     al, 58h ; 'X'
.text:0040621C                 jnz     short loc_4061DC
.text:0040621E                 inc     edx
.text:0040621F                 mov     [ebx+0Ch], edx
.text:00406222                 mov     eax, ebx
.text:00406224                 call    _d_expression
.text:00406229                 mov     edx, [ebx+0Ch]
.text:0040622C                 cmp     byte ptr [edx], 45h ; 'E'
.text:0040622F                 jz      short loc_40623C
.text:00406231
.text:00406231 loc_406231:                             ; CODE XREF: _d_template_args+15↑j
.text:00406231                                         ; _d_template_args+41↑j ...
.text:00406231                 xor     eax, eax
.text:00406233
.text:00406233 loc_406233:                             ; CODE XREF: _d_template_args+E5↓j
.text:00406233                 add     esp, 20h
.text:00406236                 pop     ebx
.text:00406237                 pop     esi
.text:00406238                 pop     edi
.text:00406239                 retn
.text:00406239 ; ---------------------------------------------------------------------------
.text:0040623A                 align 4
.text:0040623C
.text:0040623C loc_40623C:                             ; CODE XREF: _d_template_args+8B↑j
.text:0040623C                 inc     edx
.text:0040623D                 mov     [ebx+0Ch], edx
.text:00406240                 jmp     short loc_4061E3
.text:00406240 ; ---------------------------------------------------------------------------
.text:00406242                 align 4
.text:00406244
.text:00406244 loc_406244:                             ; CODE XREF: _d_template_args+70↑j
.text:00406244                 mov     eax, ebx
.text:00406246                 call    _d_template_args
.text:0040624B                 jmp     short loc_4061E3
.text:0040624B ; ---------------------------------------------------------------------------
.text:0040624D                 align 10h
.text:00406250
.text:00406250 loc_406250:                             ; CODE XREF: _d_template_args+74↑j
.text:00406250                 mov     eax, ebx
.text:00406252                 call    _d_expr_primary
.text:00406257                 jmp     short loc_4061E3
.text:00406257 ; ---------------------------------------------------------------------------
.text:00406259                 align 4
.text:0040625C
.text:0040625C loc_40625C:                             ; CODE XREF: _d_template_args+68↑j
.text:0040625C                 inc     edx
.text:0040625D                 mov     [ebx+0Ch], edx
.text:00406260                 mov     [ebx+2Ch], edi
.text:00406263                 mov     eax, [esp+2Ch+var_10]
.text:00406267                 add     esp, 20h
.text:0040626A                 pop     ebx
.text:0040626B                 pop     esi
.text:0040626C                 pop     edi
.text:0040626D                 retn
.text:0040626E ; ---------------------------------------------------------------------------
.text:0040626E
.text:0040626E loc_40626E:                             ; CODE XREF: _d_template_args+22↑j
.text:0040626E                 add     ecx, 2
.text:00406271                 mov     [ebx+0Ch], ecx
.text:00406274                 mov     [esp+2Ch+var_2C], 0
.text:0040627B                 xor     ecx, ecx
.text:0040627D                 mov     edx, 2Bh ; '+'
.text:00406282                 mov     eax, ebx
.text:00406284                 call    _d_make_comp
.text:00406289                 jmp     short loc_406233
.text:00406289 _d_template_args endp
.text:00406289
.text:00406289 ; ---------------------------------------------------------------------------
.text:0040628B                 align 4
.text:0040628C
.text:0040628C ; =============== S U B R O U T I N E =======================================
.text:0040628C
.text:0040628C
.text:0040628C _d_name         proc near               ; CODE XREF: _d_name+298↓p
.text:0040628C                                         ; _d_type+FE↓p ...
.text:0040628C
.text:0040628C var_3C          = dword ptr -3Ch
.text:0040628C var_20          = dword ptr -20h
.text:0040628C
.text:0040628C                 push    ebp
.text:0040628D                 push    edi
.text:0040628E                 push    esi
.text:0040628F                 push    ebx
.text:00406290                 sub     esp, 2Ch
.text:00406293                 mov     esi, eax
.text:00406295                 mov     eax, [eax+0Ch]
.text:00406298                 mov     dl, [eax]
.text:0040629A                 sub     edx, 4Ch ; 'L'  ; switch 15 cases
.text:0040629D                 cmp     dl, 0Eh
.text:004062A0                 jbe     short loc_4062C4
.text:004062A2
.text:004062A2 def_4062C7:                             ; CODE XREF: _d_name+3B↓j
.text:004062A2                                         ; DATA XREF: .rdata:jpt_4062C7↓o
.text:004062A2                 mov     eax, esi        ; jumptable 004062C7 default case, cases 77,79-82,84,86-89
.text:004062A4                 call    _d_unqualified_name
.text:004062A9                 mov     ebx, eax
.text:004062AB                 mov     eax, [esi+0Ch]
.text:004062AE                 cmp     byte ptr [eax], 49h ; 'I'
.text:004062B1                 jz      loc_40643F
.text:004062B7
.text:004062B7 loc_4062B7:                             ; CODE XREF: _d_name+8B↓j
.text:004062B7                                         ; _d_name+A7↓j ...
.text:004062B7                 mov     eax, ebx
.text:004062B9                 add     esp, 2Ch
.text:004062BC                 pop     ebx
.text:004062BD                 pop     esi
.text:004062BE                 pop     edi
.text:004062BF                 pop     ebp
.text:004062C0                 retn
.text:004062C0 ; ---------------------------------------------------------------------------
.text:004062C1                 align 4
.text:004062C4
.text:004062C4 loc_4062C4:                             ; CODE XREF: _d_name+14↑j
.text:004062C4                 movzx   edx, dl
.text:004062C7                 jmp     ds:jpt_4062C7[edx*4] ; switch jump
.text:004062C7 ; ---------------------------------------------------------------------------
.text:004062CE                 align 10h
.text:004062D0
.text:004062D0 loc_4062D0:                             ; CODE XREF: _d_name+3B↑j
.text:004062D0                                         ; DATA XREF: .rdata:jpt_4062C7↓o
.text:004062D0                 inc     eax             ; jumptable 004062C7 case 90
.text:004062D1                 mov     [esi+0Ch], eax
.text:004062D4                 xor     edx, edx
.text:004062D6                 mov     eax, esi
.text:004062D8                 call    _d_encoding
.text:004062DD                 mov     ebx, eax
.text:004062DF                 mov     edx, [esi+0Ch]
.text:004062E2                 cmp     byte ptr [edx], 45h ; 'E'
.text:004062E5                 jz      loc_406504
.text:004062EB
.text:004062EB loc_4062EB:                             ; CODE XREF: _d_name+C4↓j
.text:004062EB                                         ; _d_name+1B5↓j ...
.text:004062EB                 xor     ebx, ebx
.text:004062ED                 lea     esi, [esi+0]
.text:004062F0
.text:004062F0 loc_4062F0:                             ; CODE XREF: _d_name+155↓j
.text:004062F0                                         ; _d_name+32E↓j
.text:004062F0                 mov     eax, ebx
.text:004062F2                 add     esp, 2Ch
.text:004062F5                 pop     ebx
.text:004062F6                 pop     esi
.text:004062F7                 pop     edi
.text:004062F8                 pop     ebp
.text:004062F9                 retn
.text:004062F9 ; ---------------------------------------------------------------------------
.text:004062FA                 align 4
.text:004062FC
.text:004062FC loc_4062FC:                             ; CODE XREF: _d_name+3B↑j
.text:004062FC                                         ; DATA XREF: .rdata:jpt_4062C7↓o
.text:004062FC                 cmp     byte ptr [eax+1], 74h ; 't' ; jumptable 004062C7 case 83
.text:00406300                 jz      loc_4063FC
.text:00406306                 xor     edx, edx
.text:00406308                 mov     eax, esi
.text:0040630A                 call    _d_substitution
.text:0040630F                 mov     ebx, eax
.text:00406311                 mov     eax, [esi+0Ch]
.text:00406314                 cmp     byte ptr [eax], 49h ; 'I'
.text:00406317                 jnz     short loc_4062B7
.text:00406319
.text:00406319 loc_406319:                             ; CODE XREF: _d_name+1D1↓j
.text:00406319                 mov     eax, esi
.text:0040631B                 call    _d_template_args
.text:00406320                 mov     [esp+3Ch+var_3C], eax
.text:00406323                 mov     ecx, ebx
.text:00406325                 mov     edx, 4
.text:0040632A                 mov     eax, esi
.text:0040632C                 call    _d_make_comp
.text:00406331                 mov     ebx, eax
.text:00406333                 jmp     short loc_4062B7
.text:00406333 ; ---------------------------------------------------------------------------
.text:00406335                 align 4
.text:00406338
.text:00406338 loc_406338:                             ; CODE XREF: _d_name+3B↑j
.text:00406338                                         ; DATA XREF: .rdata:jpt_4062C7↓o
.text:00406338                 inc     eax             ; jumptable 004062C7 case 78
.text:00406339                 mov     [esi+0Ch], eax
.text:0040633C                 mov     ecx, 1
.text:00406341                 lea     edx, [esp+3Ch+var_20]
.text:00406345                 mov     eax, esi
.text:00406347                 call    _d_cv_qualifiers
.text:0040634C                 mov     ebp, eax
.text:0040634E                 test    eax, eax
.text:00406350                 jz      short loc_4062EB
.text:00406352                 mov     eax, [esi+0Ch]
.text:00406355                 mov     bl, [eax]
.text:00406357                 xor     edi, edi
.text:00406359                 lea     esi, [esi+0]
.text:0040635C
.text:0040635C loc_40635C:                             ; CODE XREF: _d_name+226↓j
.text:0040635C                 test    bl, bl
.text:0040635E                 jz      short loc_4063D8
.text:00406360
.text:00406360 loc_406360:                             ; CODE XREF: _d_name+14A↓j
.text:00406360                 cmp     bl, 44h ; 'D'
.text:00406363                 jz      loc_4064BC
.text:00406369
.text:00406369 loc_406369:                             ; CODE XREF: _d_name+246↓j
.text:00406369                 lea     edx, [ebx-30h]
.text:0040636C                 cmp     dl, 9
.text:0040636F                 jbe     loc_406464
.text:00406375                 lea     edx, [ebx-61h]
.text:00406378                 cmp     dl, 19h
.text:0040637B                 jbe     loc_406464
.text:00406381                 cmp     bl, 43h ; 'C'
.text:00406384                 jz      loc_406464
.text:0040638A                 cmp     bl, 55h ; 'U'
.text:0040638D                 jz      loc_406464
.text:00406393                 cmp     bl, 4Ch ; 'L'
.text:00406396                 jz      loc_406464
.text:0040639C                 cmp     bl, 53h ; 'S'
.text:0040639F                 jz      loc_4064F0
.text:004063A5                 cmp     bl, 49h ; 'I'
.text:004063A8                 jz      loc_4064D8
.text:004063AE                 cmp     bl, 54h ; 'T'
.text:004063B1                 jz      loc_406595
.text:004063B7                 cmp     bl, 45h ; 'E'
.text:004063BA                 jz      loc_4065EF
.text:004063C0                 cmp     bl, 4Dh ; 'M'
.text:004063C3                 jnz     short loc_4063D8
.text:004063C5                 test    edi, edi
.text:004063C7                 jz      short loc_4063D8
.text:004063C9                 lea     edx, [eax+1]
.text:004063CC                 mov     [esi+0Ch], edx
.text:004063CF                 mov     bl, [eax+1]
.text:004063D2                 mov     eax, edx
.text:004063D4                 test    bl, bl
.text:004063D6                 jnz     short loc_406360
.text:004063D8
.text:004063D8 loc_4063D8:                             ; CODE XREF: _d_name+D2↑j
.text:004063D8                                         ; _d_name+137↑j ...
.text:004063D8                 mov     dword ptr [ebp+0], 0
.text:004063DF                 xor     ebx, ebx
.text:004063E1                 jmp     loc_4062F0
.text:004063E1 ; ---------------------------------------------------------------------------
.text:004063E6                 align 4
.text:004063E8
.text:004063E8 loc_4063E8:                             ; CODE XREF: _d_name+3B↑j
.text:004063E8                                         ; DATA XREF: .rdata:jpt_4062C7↓o
.text:004063E8                 mov     eax, esi        ; jumptable 004062C7 cases 76,85
.text:004063EA                 call    _d_unqualified_name
.text:004063EF                 mov     ebx, eax
.text:004063F1                 mov     eax, ebx
.text:004063F3                 add     esp, 2Ch
.text:004063F6                 pop     ebx
.text:004063F7                 pop     esi
.text:004063F8                 pop     edi
.text:004063F9                 pop     ebp
.text:004063FA                 retn
.text:004063FA ; ---------------------------------------------------------------------------
.text:004063FB                 align 4
.text:004063FC
.text:004063FC loc_4063FC:                             ; CODE XREF: _d_name+74↑j
.text:004063FC                 add     eax, 2
.text:004063FF                 mov     [esi+0Ch], eax
.text:00406402                 mov     eax, esi
.text:00406404                 call    _d_unqualified_name
.text:00406409                 mov     ebx, eax
.text:0040640B                 mov     ecx, 3
.text:00406410                 mov     edx, offset aStd ; "std"
.text:00406415                 mov     eax, esi
.text:00406417                 call    _d_make_name
.text:0040641C                 mov     [esp+3Ch+var_3C], ebx
.text:0040641F                 mov     ecx, eax
.text:00406421                 mov     edx, 1
.text:00406426                 mov     eax, esi
.text:00406428                 call    _d_make_comp
.text:0040642D                 mov     ebx, eax
.text:0040642F                 add     dword ptr [esi+30h], 3
.text:00406433                 mov     eax, [esi+0Ch]
.text:00406436                 cmp     byte ptr [eax], 49h ; 'I'
.text:00406439                 jnz     loc_4062B7
.text:0040643F
.text:0040643F loc_40643F:                             ; CODE XREF: _d_name+25↑j
.text:0040643F                 test    ebx, ebx
.text:00406441                 jz      loc_4062EB
.text:00406447                 mov     eax, [esi+20h]
.text:0040644A                 cmp     eax, [esi+24h]
.text:0040644D                 jge     loc_4062EB
.text:00406453                 mov     edx, [esi+1Ch]
.text:00406456                 mov     [edx+eax*4], ebx
.text:00406459                 inc     eax
.text:0040645A                 mov     [esi+20h], eax
.text:0040645D                 jmp     loc_406319
.text:0040645D ; ---------------------------------------------------------------------------
.text:00406462                 align 4
.text:00406464
.text:00406464 loc_406464:                             ; CODE XREF: _d_name+E3↑j
.text:00406464                                         ; _d_name+EF↑j ...
.text:00406464                 mov     eax, esi
.text:00406466                 call    _d_unqualified_name
.text:0040646B
.text:0040646B loc_40646B:                             ; CODE XREF: _d_name+242↓j
.text:0040646B                                         ; _d_name+270↓j ...
.text:0040646B                 test    edi, edi
.text:0040646D                 jz      short loc_4064B8
.text:0040646F                 mov     edx, 1
.text:00406474
.text:00406474 loc_406474:                             ; CODE XREF: _d_name+260↓j
.text:00406474                 mov     [esp+3Ch+var_3C], eax
.text:00406477                 mov     ecx, edi
.text:00406479                 mov     eax, esi
.text:0040647B                 call    _d_make_comp
.text:00406480                 mov     edi, eax
.text:00406482
.text:00406482 loc_406482:                             ; CODE XREF: _d_name+22E↓j
.text:00406482                 cmp     bl, 53h ; 'S'
.text:00406485                 jz      short loc_4064AD
.text:00406487                 mov     eax, [esi+0Ch]
.text:0040648A                 cmp     byte ptr [eax], 45h ; 'E'
.text:0040648D                 jz      short loc_4064D0
.text:0040648F                 test    edi, edi
.text:00406491                 jz      loc_4063D8
.text:00406497                 mov     eax, [esi+20h]
.text:0040649A                 cmp     eax, [esi+24h]
.text:0040649D                 jge     loc_4063D8
.text:004064A3                 mov     edx, [esi+1Ch]
.text:004064A6                 mov     [edx+eax*4], edi
.text:004064A9                 inc     eax
.text:004064AA                 mov     [esi+20h], eax
.text:004064AD
.text:004064AD loc_4064AD:                             ; CODE XREF: _d_name+1F9↑j
.text:004064AD                 mov     eax, [esi+0Ch]
.text:004064B0                 mov     bl, [eax]
.text:004064B2                 jmp     loc_40635C
.text:004064B2 ; ---------------------------------------------------------------------------
.text:004064B7                 align 4
.text:004064B8
.text:004064B8 loc_4064B8:                             ; CODE XREF: _d_name+1E1↑j
.text:004064B8                 mov     edi, eax
.text:004064BA                 jmp     short loc_406482
.text:004064BC ; ---------------------------------------------------------------------------
.text:004064BC
.text:004064BC loc_4064BC:                             ; CODE XREF: _d_name+D7↑j
.text:004064BC                 mov     al, [eax+1]
.text:004064BF                 cmp     al, 54h ; 'T'
.text:004064C1                 jz      short loc_4064C7
.text:004064C3                 cmp     al, 74h ; 't'
.text:004064C5                 jnz     short loc_406464
.text:004064C7
.text:004064C7 loc_4064C7:                             ; CODE XREF: _d_name+235↑j
.text:004064C7                 mov     eax, esi
.text:004064C9                 call    _d_type
.text:004064CE                 jmp     short loc_40646B
.text:004064D0 ; ---------------------------------------------------------------------------
.text:004064D0
.text:004064D0 loc_4064D0:                             ; CODE XREF: _d_name+201↑j
.text:004064D0                 mov     bl, 45h ; 'E'
.text:004064D2                 jmp     loc_406369
.text:004064D2 ; ---------------------------------------------------------------------------
.text:004064D7                 align 4
.text:004064D8
.text:004064D8 loc_4064D8:                             ; CODE XREF: _d_name+11C↑j
.text:004064D8                 test    edi, edi
.text:004064DA                 jz      loc_4063D8
.text:004064E0                 mov     eax, esi
.text:004064E2                 call    _d_template_args
.text:004064E7                 mov     edx, 4
.text:004064EC                 jmp     short loc_406474
.text:004064EC ; ---------------------------------------------------------------------------
.text:004064EE                 align 10h
.text:004064F0
.text:004064F0 loc_4064F0:                             ; CODE XREF: _d_name+113↑j
.text:004064F0                 mov     edx, 1
.text:004064F5                 mov     eax, esi
.text:004064F7                 call    _d_substitution
.text:004064FC                 jmp     loc_40646B
.text:004064FC ; ---------------------------------------------------------------------------
.text:00406501                 align 4
.text:00406504
.text:00406504 loc_406504:                             ; CODE XREF: _d_name+59↑j
.text:00406504                 lea     eax, [edx+1]
.text:00406507                 mov     [esi+0Ch], eax
.text:0040650A                 mov     al, [edx+1]
.text:0040650D                 cmp     al, 73h ; 's'
.text:0040650F                 jz      loc_4065C4
.text:00406515                 cmp     al, 64h ; 'd'
.text:00406517                 jz      loc_4065A1
.text:0040651D                 mov     edi, 0FFFFFFFFh
.text:00406522
.text:00406522 loc_406522:                             ; CODE XREF: _d_name+326↓j
.text:00406522                 mov     eax, esi
.text:00406524                 call    _d_name
.text:00406529                 mov     ebp, eax
.text:0040652B                 test    eax, eax
.text:0040652D                 jz      short loc_40654A
.text:0040652F                 mov     eax, [eax]
.text:00406531                 cmp     eax, 40h ; '@'
.text:00406534                 jz      short loc_40654A
.text:00406536                 cmp     eax, 42h ; 'B'
.text:00406539                 jz      short loc_40654A
.text:0040653B                 mov     eax, esi
.text:0040653D                 call    _d_discriminator
.text:00406542                 test    eax, eax
.text:00406544                 jz      loc_4062EB
.text:0040654A
.text:0040654A loc_40654A:                             ; CODE XREF: _d_name+2A1↑j
.text:0040654A                                         ; _d_name+2A8↑j ...
.text:0040654A                 cmp     edi, 0FFFFFFFFh
.text:0040654D                 jz      short loc_4065C0
.text:0040654F                 mov     eax, [esi+14h]
.text:00406552                 cmp     eax, [esi+18h]
.text:00406555                 jge     short loc_406591
.text:00406557                 lea     ecx, [eax+eax*2]
.text:0040655A                 mov     edx, [esi+10h]
.text:0040655D                 lea     edx, [edx+ecx*4]
.text:00406560                 inc     eax
.text:00406561                 mov     [esi+14h], eax
.text:00406564                 test    edx, edx
.text:00406566                 jz      short loc_406591
.text:00406568                 mov     dword ptr [edx], 41h ; 'A'
.text:0040656E                 mov     [edx+8], edi
.text:00406571                 mov     [edx+4], ebp
.text:00406574
.text:00406574 loc_406574:                             ; CODE XREF: _d_name+307↓j
.text:00406574                                         ; _d_name+336↓j
.text:00406574                 mov     [esp+3Ch+var_3C], edx
.text:00406577
.text:00406577 loc_406577:                             ; CODE XREF: _d_name+361↓j
.text:00406577                 mov     ecx, ebx
.text:00406579                 mov     edx, 2
.text:0040657E                 mov     eax, esi
.text:00406580                 call    _d_make_comp
.text:00406585                 mov     ebx, eax
.text:00406587                 mov     eax, ebx
.text:00406589                 add     esp, 2Ch
.text:0040658C                 pop     ebx
.text:0040658D                 pop     esi
.text:0040658E                 pop     edi
.text:0040658F                 pop     ebp
.text:00406590                 retn
.text:00406591 ; ---------------------------------------------------------------------------
.text:00406591
.text:00406591 loc_406591:                             ; CODE XREF: _d_name+2C9↑j
.text:00406591                                         ; _d_name+2DA↑j
.text:00406591                 xor     edx, edx
.text:00406593                 jmp     short loc_406574
.text:00406595 ; ---------------------------------------------------------------------------
.text:00406595
.text:00406595 loc_406595:                             ; CODE XREF: _d_name+125↑j
.text:00406595                 mov     eax, esi
.text:00406597                 call    _d_template_param
.text:0040659C                 jmp     loc_40646B
.text:004065A1 ; ---------------------------------------------------------------------------
.text:004065A1
.text:004065A1 loc_4065A1:                             ; CODE XREF: _d_name+28B↑j
.text:004065A1                 add     edx, 2
.text:004065A4                 mov     [esi+0Ch], edx
.text:004065A7                 mov     eax, esi
.text:004065A9                 call    _d_compact_number
.text:004065AE                 mov     edi, eax
.text:004065B0                 test    eax, eax
.text:004065B2                 jns     loc_406522
.text:004065B8                 xor     ebx, ebx
.text:004065BA                 jmp     loc_4062F0
.text:004065BA ; ---------------------------------------------------------------------------
.text:004065BF                 align 10h
.text:004065C0
.text:004065C0 loc_4065C0:                             ; CODE XREF: _d_name+2C1↑j
.text:004065C0                 mov     edx, ebp
.text:004065C2                 jmp     short loc_406574
.text:004065C4 ; ---------------------------------------------------------------------------
.text:004065C4
.text:004065C4 loc_4065C4:                             ; CODE XREF: _d_name+283↑j
.text:004065C4                 add     edx, 2
.text:004065C7                 mov     [esi+0Ch], edx
.text:004065CA                 mov     eax, esi
.text:004065CC                 call    _d_discriminator
.text:004065D1                 test    eax, eax
.text:004065D3                 jz      loc_4062EB
.text:004065D9                 mov     ecx, 0Eh
.text:004065DE                 mov     edx, offset aStringLiteral ; "string literal"
.text:004065E3                 mov     eax, esi
.text:004065E5                 call    _d_make_name
.text:004065EA                 mov     [esp+3Ch+var_3C], eax
.text:004065ED                 jmp     short loc_406577
.text:004065EF ; ---------------------------------------------------------------------------
.text:004065EF
.text:004065EF loc_4065EF:                             ; CODE XREF: _d_name+12E↑j
.text:004065EF                 mov     [ebp+0], edi
.text:004065F2                 test    edi, edi
.text:004065F4                 jz      loc_4062EB
.text:004065FA                 mov     eax, [esi+0Ch]
.text:004065FD                 cmp     byte ptr [eax], 45h ; 'E'
.text:00406600                 jnz     loc_4062EB
.text:00406606                 inc     eax
.text:00406607                 mov     [esi+0Ch], eax
.text:0040660A                 mov     ebx, [esp+3Ch+var_20]
.text:0040660E                 jmp     loc_4062B7
.text:0040660E _d_name         endp
.text:0040660E
.text:0040660E ; ---------------------------------------------------------------------------
.text:00406613                 align 4
.text:00406614
.text:00406614 ; =============== S U B R O U T I N E =======================================
.text:00406614
.text:00406614
.text:00406614 _d_type         proc near               ; CODE XREF: _d_expr_primary+5A↑p
.text:00406614                                         ; _d_template_args+3A↑p ...
.text:00406614
.text:00406614 var_3C          = dword ptr -3Ch
.text:00406614 var_20          = dword ptr -20h
.text:00406614
.text:00406614                 push    ebp
.text:00406615                 push    edi
.text:00406616                 push    esi
.text:00406617                 push    ebx
.text:00406618                 sub     esp, 2Ch
.text:0040661B                 mov     ebx, eax
.text:0040661D                 mov     ecx, [eax+0Ch]
.text:00406620                 movsx   eax, byte ptr [ecx]
.text:00406623                 cmp     al, 72h ; 'r'
.text:00406625                 jz      short loc_406648
.text:00406627                 cmp     al, 56h ; 'V'
.text:00406629                 jz      short loc_406648
.text:0040662B                 cmp     al, 4Bh ; 'K'
.text:0040662D                 jz      short loc_406648
.text:0040662F                 lea     edx, [eax-30h]  ; switch 75 cases
.text:00406632                 cmp     dl, 4Ah
.text:00406635                 ja      def_40663E      ; jumptable 0040663E default case, cases 58-64,66,69,72-76,81,86-89,91-96,107,112-114
.text:00406635                                         ; jumptable 00406829 default case, cases 71-83,85-96,98,99,103,106-109,111,113,114,117
.text:0040663B                 movzx   edx, dl
.text:0040663E                 jmp     ds:jpt_40663E[edx*4] ; switch jump
.text:0040663E ; ---------------------------------------------------------------------------
.text:00406645                 align 4
.text:00406648
.text:00406648 loc_406648:                             ; CODE XREF: _d_type+11↑j
.text:00406648                                         ; _d_type+15↑j ...
.text:00406648                 xor     ecx, ecx
.text:0040664A                 lea     edx, [esp+3Ch+var_20]
.text:0040664E                 mov     eax, ebx
.text:00406650                 call    _d_cv_qualifiers
.text:00406655                 mov     esi, eax
.text:00406657                 test    eax, eax
.text:00406659                 jz      short def_40663E ; jumptable 0040663E default case, cases 58-64,66,69,72-76,81,86-89,91-96,107,112-114
.text:00406659                                         ; jumptable 00406829 default case, cases 71-83,85-96,98,99,103,106-109,111,113,114,117
.text:0040665B                 mov     eax, ebx
.text:0040665D                 call    _d_type
.text:00406662                 mov     [esi], eax
.text:00406664                 test    eax, eax
.text:00406666                 jz      short def_40663E ; jumptable 0040663E default case, cases 58-64,66,69,72-76,81,86-89,91-96,107,112-114
.text:00406666                                         ; jumptable 00406829 default case, cases 71-83,85-96,98,99,103,106-109,111,113,114,117
.text:00406668                 mov     edx, [esp+3Ch+var_20]
.text:0040666C                 test    edx, edx
.text:0040666E                 jz      short def_40663E ; jumptable 0040663E default case, cases 58-64,66,69,72-76,81,86-89,91-96,107,112-114
.text:0040666E                                         ; jumptable 00406829 default case, cases 71-83,85-96,98,99,103,106-109,111,113,114,117
.text:00406670                 mov     eax, [ebx+20h]
.text:00406673                 cmp     eax, [ebx+24h]
.text:00406676                 jge     short def_40663E ; jumptable 0040663E default case, cases 58-64,66,69,72-76,81,86-89,91-96,107,112-114
.text:00406676                                         ; jumptable 00406829 default case, cases 71-83,85-96,98,99,103,106-109,111,113,114,117
.text:00406678                 mov     ecx, [ebx+1Ch]
.text:0040667B                 mov     [ecx+eax*4], edx
.text:0040667E                 inc     eax
.text:0040667F                 mov     [ebx+20h], eax
.text:00406682                 mov     eax, [esp+3Ch+var_20]
.text:00406686                 add     esp, 2Ch
.text:00406689                 pop     ebx
.text:0040668A                 pop     esi
.text:0040668B                 pop     edi
.text:0040668C                 pop     ebp
.text:0040668D                 retn
.text:0040668E ; ---------------------------------------------------------------------------
.text:0040668E
.text:0040668E loc_40668E:                             ; CODE XREF: _d_type+215↓j
.text:0040668E                                         ; DATA XREF: .rdata:jpt_406829↓o
.text:0040668E                 mov     eax, ebx        ; jumptable 00406829 cases 84,116
.text:00406690                 call    _d_expression
.text:00406695                 mov     [esp+3Ch+var_3C], 0
.text:0040669C                 mov     ecx, eax
.text:0040669E                 mov     edx, 3Dh ; '='
.text:004066A3                 mov     eax, ebx
.text:004066A5                 call    _d_make_comp
.text:004066AA                 mov     [esp+3Ch+var_20], eax
.text:004066AE                 test    eax, eax
.text:004066B0                 jz      short def_40663E ; jumptable 0040663E default case, cases 58-64,66,69,72-76,81,86-89,91-96,107,112-114
.text:004066B0                                         ; jumptable 00406829 default case, cases 71-83,85-96,98,99,103,106-109,111,113,114,117
.text:004066B2                 mov     ecx, [ebx+0Ch]
.text:004066B5                 mov     dl, [ecx]
.text:004066B7                 test    dl, dl
.text:004066B9                 jz      short def_40663E ; jumptable 0040663E default case, cases 58-64,66,69,72-76,81,86-89,91-96,107,112-114
.text:004066B9                                         ; jumptable 00406829 default case, cases 71-83,85-96,98,99,103,106-109,111,113,114,117
.text:004066BB                 inc     ecx
.text:004066BC                 mov     [ebx+0Ch], ecx
.text:004066BF                 cmp     dl, 45h ; 'E'
.text:004066C2                 jz      short loc_4066F8
.text:004066C4
.text:004066C4 def_40663E:                             ; CODE XREF: _d_type+21↑j
.text:004066C4                                         ; _d_type+2A↑j ...
.text:004066C4                 xor     eax, eax        ; jumptable 0040663E default case, cases 58-64,66,69,72-76,81,86-89,91-96,107,112-114
.text:004066C4                                         ; jumptable 00406829 default case, cases 71-83,85-96,98,99,103,106-109,111,113,114,117
.text:004066C6
.text:004066C6 loc_4066C6:                             ; CODE XREF: _d_type+FA↓j
.text:004066C6                                         ; _d_type+343↓j ...
.text:004066C6                 add     esp, 2Ch
.text:004066C9                 pop     ebx
.text:004066CA                 pop     esi
.text:004066CB                 pop     edi
.text:004066CC                 pop     ebp
.text:004066CD                 retn
.text:004066CE ; ---------------------------------------------------------------------------
.text:004066CE
.text:004066CE loc_4066CE:                             ; CODE XREF: _d_type+2A↑j
.text:004066CE                                         ; DATA XREF: .rdata:jpt_40663E↓o
.text:004066CE                 inc     ecx             ; jumptable 0040663E case 117
.text:004066CF                 mov     [ebx+0Ch], ecx
.text:004066D2                 mov     eax, ebx
.text:004066D4                 call    _d_source_name
.text:004066D9                 mov     [esp+3Ch+var_3C], 0
.text:004066E0                 mov     ecx, eax
.text:004066E2                 mov     edx, 24h ; '$'
.text:004066E7                 mov     eax, ebx
.text:004066E9                 call    _d_make_comp
.text:004066EE                 mov     [esp+3Ch+var_20], eax
.text:004066F2                 xchg    ax, ax
.text:004066F4
.text:004066F4 loc_4066F4:                             ; CODE XREF: _d_type+107↓j
.text:004066F4                                         ; _d_type+193↓j ...
.text:004066F4                 test    eax, eax
.text:004066F6                 jz      short def_40663E ; jumptable 0040663E default case, cases 58-64,66,69,72-76,81,86-89,91-96,107,112-114
.text:004066F6                                         ; jumptable 00406829 default case, cases 71-83,85-96,98,99,103,106-109,111,113,114,117
.text:004066F8
.text:004066F8 loc_4066F8:                             ; CODE XREF: _d_type+AE↑j
.text:004066F8                                         ; _d_type+70E↓j
.text:004066F8                 mov     edx, [ebx+20h]
.text:004066FB                 cmp     edx, [ebx+24h]
.text:004066FE                 jge     short def_40663E ; jumptable 0040663E default case, cases 58-64,66,69,72-76,81,86-89,91-96,107,112-114
.text:004066FE                                         ; jumptable 00406829 default case, cases 71-83,85-96,98,99,103,106-109,111,113,114,117
.text:00406700                 mov     ecx, [ebx+1Ch]
.text:00406703                 mov     [ecx+edx*4], eax
.text:00406706                 inc     edx
.text:00406707                 mov     [ebx+20h], edx
.text:0040670A                 mov     eax, [esp+3Ch+var_20]
.text:0040670E                 jmp     short loc_4066C6
.text:00406710 ; ---------------------------------------------------------------------------
.text:00406710
.text:00406710 loc_406710:                             ; CODE XREF: _d_type+2A↑j
.text:00406710                                         ; DATA XREF: .rdata:jpt_40663E↓o
.text:00406710                 mov     eax, ebx        ; jumptable 0040663E cases 48-57,78,90
.text:00406712                 call    _d_name
.text:00406717
.text:00406717 loc_406717:                             ; CODE XREF: _d_type+16D↓j
.text:00406717                                         ; _d_type+1C2↓j ...
.text:00406717                 mov     [esp+3Ch+var_20], eax
.text:0040671B                 jmp     short loc_4066F4
.text:0040671D ; ---------------------------------------------------------------------------
.text:0040671D
.text:0040671D loc_40671D:                             ; CODE XREF: _d_type+2A↑j
.text:0040671D                                         ; DATA XREF: .rdata:jpt_40663E↓o
.text:0040671D                 lea     esi, [ecx+1]    ; jumptable 0040663E case 65
.text:00406720                 mov     [ebx+0Ch], esi
.text:00406723                 mov     al, [ecx+1]
.text:00406726                 cmp     al, 5Fh ; '_'
.text:00406728                 jz      loc_406CD3
.text:0040672E                 sub     eax, 30h ; '0'
.text:00406731                 cmp     al, 9
.text:00406733                 ja      loc_406CF2
.text:00406739                 lea     eax, [ecx+2]
.text:0040673C
.text:0040673C loc_40673C:                             ; CODE XREF: _d_type+136↓j
.text:0040673C                 mov     ecx, eax
.text:0040673E                 mov     [ebx+0Ch], eax
.text:00406741                 inc     eax
.text:00406742                 mov     dl, [ecx]
.text:00406744                 sub     edx, 30h ; '0'
.text:00406747                 cmp     dl, 9
.text:0040674A                 jbe     short loc_40673C
.text:0040674C                 sub     ecx, esi
.text:0040674E                 mov     edx, esi
.text:00406750                 mov     eax, ebx
.text:00406752                 call    _d_make_name
.text:00406757                 mov     edi, eax
.text:00406759                 test    eax, eax
.text:0040675B                 jz      short loc_4067D4
.text:0040675D
.text:0040675D loc_40675D:                             ; CODE XREF: _d_type+6E9↓j
.text:0040675D                 mov     esi, [ebx+0Ch]
.text:00406760                 cmp     byte ptr [esi], 5Fh ; '_'
.text:00406763                 jnz     short loc_4067D4
.text:00406765
.text:00406765 loc_406765:                             ; CODE XREF: _d_type+6C1↓j
.text:00406765                 inc     esi
.text:00406766                 mov     [ebx+0Ch], esi
.text:00406769                 mov     eax, ebx
.text:0040676B                 call    _d_type
.text:00406770                 mov     [esp+3Ch+var_3C], eax
.text:00406773                 mov     ecx, edi
.text:00406775                 mov     edx, 26h ; '&'
.text:0040677A                 mov     eax, ebx
.text:0040677C                 call    _d_make_comp
.text:00406781                 jmp     short loc_406717
.text:00406783 ; ---------------------------------------------------------------------------
.text:00406783
.text:00406783 loc_406783:                             ; CODE XREF: _d_type+2A↑j
.text:00406783                                         ; DATA XREF: .rdata:jpt_40663E↓o
.text:00406783                 inc     ecx             ; jumptable 0040663E case 67
.text:00406784                 mov     [ebx+0Ch], ecx
.text:00406787                 mov     eax, ebx
.text:00406789                 call    _d_type
.text:0040678E                 mov     [esp+3Ch+var_3C], 0
.text:00406795                 mov     ecx, eax
.text:00406797                 mov     edx, 21h ; '!'
.text:0040679C                 mov     eax, ebx
.text:0040679E                 call    _d_make_comp
.text:004067A3                 mov     [esp+3Ch+var_20], eax
.text:004067A7                 jmp     loc_4066F4
.text:004067AC ; ---------------------------------------------------------------------------
.text:004067AC
.text:004067AC loc_4067AC:                             ; CODE XREF: _d_type+2A↑j
.text:004067AC                                         ; DATA XREF: .rdata:jpt_40663E↓o
.text:004067AC                 lea     eax, [ecx+1]    ; jumptable 0040663E case 70
.text:004067AF                 mov     [ebx+0Ch], eax
.text:004067B2                 cmp     byte ptr [ecx+1], 59h ; 'Y'
.text:004067B6                 jz      loc_406CE7
.text:004067BC
.text:004067BC loc_4067BC:                             ; CODE XREF: _d_type+6D9↓j
.text:004067BC                 mov     edx, 1
.text:004067C1                 mov     eax, ebx
.text:004067C3                 call    _d_bare_function_type
.text:004067C8                 mov     edx, [ebx+0Ch]
.text:004067CB                 cmp     byte ptr [edx], 45h ; 'E'
.text:004067CE                 jz      loc_406A1A
.text:004067D4
.text:004067D4 loc_4067D4:                             ; CODE XREF: _d_type+147↑j
.text:004067D4                                         ; _d_type+14F↑j ...
.text:004067D4                 xor     eax, eax
.text:004067D6                 jmp     loc_406717
.text:004067DB ; ---------------------------------------------------------------------------
.text:004067DB
.text:004067DB loc_4067DB:                             ; CODE XREF: _d_type+2A↑j
.text:004067DB                                         ; DATA XREF: .rdata:jpt_40663E↓o
.text:004067DB                 inc     ecx             ; jumptable 0040663E case 71
.text:004067DC                 mov     [ebx+0Ch], ecx
.text:004067DF                 mov     eax, ebx
.text:004067E1                 call    _d_type
.text:004067E6                 mov     [esp+3Ch+var_3C], 0
.text:004067ED                 mov     ecx, eax
.text:004067EF                 mov     edx, 22h ; '"'
.text:004067F4                 mov     eax, ebx
.text:004067F6                 call    _d_make_comp
.text:004067FB                 mov     [esp+3Ch+var_20], eax
.text:004067FF                 jmp     loc_4066F4
.text:00406804 ; ---------------------------------------------------------------------------
.text:00406804
.text:00406804 loc_406804:                             ; CODE XREF: _d_type+2A↑j
.text:00406804                                         ; DATA XREF: .rdata:jpt_40663E↓o
.text:00406804                 lea     eax, [ecx+1]    ; jumptable 0040663E case 68
.text:00406807                 mov     [ebx+0Ch], eax
.text:0040680A                 mov     al, [ecx+1]
.text:0040680D                 test    al, al
.text:0040680F                 jz      def_40663E      ; jumptable 0040663E default case, cases 58-64,66,69,72-76,81,86-89,91-96,107,112-114
.text:0040680F                                         ; jumptable 00406829 default case, cases 71-83,85-96,98,99,103,106-109,111,113,114,117
.text:00406815                 lea     edx, [ecx+2]
.text:00406818                 mov     [ebx+0Ch], edx
.text:0040681B                 sub     eax, 46h ; 'F'  ; switch 49 cases
.text:0040681E                 cmp     al, 30h
.text:00406820                 ja      def_40663E      ; jumptable 0040663E default case, cases 58-64,66,69,72-76,81,86-89,91-96,107,112-114
.text:00406820                                         ; jumptable 00406829 default case, cases 71-83,85-96,98,99,103,106-109,111,113,114,117
.text:00406826                 movzx   eax, al
.text:00406829                 jmp     ds:jpt_406829[eax*4] ; switch jump
.text:00406830 ; ---------------------------------------------------------------------------
.text:00406830
.text:00406830 loc_406830:                             ; CODE XREF: _d_type+2A↑j
.text:00406830                                         ; DATA XREF: .rdata:jpt_40663E↓o
.text:00406830                 inc     ecx             ; jumptable 0040663E case 77
.text:00406831                 mov     [ebx+0Ch], ecx
.text:00406834                 mov     eax, ebx
.text:00406836                 call    _d_type
.text:0040683B                 mov     ebp, eax
.text:0040683D                 lea     edi, [esp+3Ch+var_20]
.text:00406841                 mov     ecx, 1
.text:00406846                 mov     edx, edi
.text:00406848                 mov     eax, ebx
.text:0040684A                 call    _d_cv_qualifiers
.text:0040684F                 mov     esi, eax
.text:00406851                 test    eax, eax
.text:00406853                 jz      loc_4067D4
.text:00406859                 mov     eax, ebx
.text:0040685B                 call    _d_type
.text:00406860                 mov     [esi], eax
.text:00406862                 test    eax, eax
.text:00406864                 jz      loc_4067D4
.text:0040686A                 cmp     esi, edi
.text:0040686C                 jz      short loc_406895
.text:0040686E                 cmp     dword ptr [eax], 25h ; '%'
.text:00406871                 jz      short loc_406895
.text:00406873                 mov     edx, [esp+3Ch+var_20]
.text:00406877                 test    edx, edx
.text:00406879                 jz      loc_4067D4
.text:0040687F                 mov     eax, [ebx+20h]
.text:00406882                 cmp     eax, [ebx+24h]
.text:00406885                 jge     loc_4067D4
.text:0040688B                 mov     ecx, [ebx+1Ch]
.text:0040688E                 mov     [ecx+eax*4], edx
.text:00406891                 inc     eax
.text:00406892                 mov     [ebx+20h], eax
.text:00406895
.text:00406895 loc_406895:                             ; CODE XREF: _d_type+258↑j
.text:00406895                                         ; _d_type+25D↑j
.text:00406895                 mov     eax, [esp+3Ch+var_20]
.text:00406899                 mov     [esp+3Ch+var_3C], eax
.text:0040689C                 mov     ecx, ebp
.text:0040689E                 mov     edx, 27h ; '''
.text:004068A3                 mov     eax, ebx
.text:004068A5                 call    _d_make_comp
.text:004068AA                 jmp     loc_406717
.text:004068AF ; ---------------------------------------------------------------------------
.text:004068AF
.text:004068AF loc_4068AF:                             ; CODE XREF: _d_type+2A↑j
.text:004068AF                                         ; DATA XREF: .rdata:jpt_40663E↓o
.text:004068AF                 inc     ecx             ; jumptable 0040663E case 79
.text:004068B0                 mov     [ebx+0Ch], ecx
.text:004068B3                 mov     eax, ebx
.text:004068B5                 call    _d_type
.text:004068BA                 mov     [esp+3Ch+var_3C], 0
.text:004068C1                 mov     ecx, eax
.text:004068C3                 mov     edx, 20h ; ' '
.text:004068C8                 mov     eax, ebx
.text:004068CA                 call    _d_make_comp
.text:004068CF                 mov     [esp+3Ch+var_20], eax
.text:004068D3                 jmp     loc_4066F4
.text:004068D8 ; ---------------------------------------------------------------------------
.text:004068D8
.text:004068D8 loc_4068D8:                             ; CODE XREF: _d_type+2A↑j
.text:004068D8                                         ; DATA XREF: .rdata:jpt_40663E↓o
.text:004068D8                 inc     ecx             ; jumptable 0040663E case 80
.text:004068D9                 mov     [ebx+0Ch], ecx
.text:004068DC                 mov     eax, ebx
.text:004068DE                 call    _d_type
.text:004068E3                 mov     [esp+3Ch+var_3C], 0
.text:004068EA                 mov     ecx, eax
.text:004068EC                 mov     edx, 1Eh
.text:004068F1                 mov     eax, ebx
.text:004068F3                 call    _d_make_comp
.text:004068F8                 mov     [esp+3Ch+var_20], eax
.text:004068FC                 jmp     loc_4066F4
.text:00406901 ; ---------------------------------------------------------------------------
.text:00406901
.text:00406901 loc_406901:                             ; CODE XREF: _d_type+2A↑j
.text:00406901                                         ; DATA XREF: .rdata:jpt_40663E↓o
.text:00406901                 inc     ecx             ; jumptable 0040663E case 82
.text:00406902                 mov     [ebx+0Ch], ecx
.text:00406905                 mov     eax, ebx
.text:00406907                 call    _d_type
.text:0040690C                 mov     [esp+3Ch+var_3C], 0
.text:00406913                 mov     ecx, eax
.text:00406915                 mov     edx, 1Fh
.text:0040691A                 mov     eax, ebx
.text:0040691C                 call    _d_make_comp
.text:00406921                 mov     [esp+3Ch+var_20], eax
.text:00406925                 jmp     loc_4066F4
.text:0040692A ; ---------------------------------------------------------------------------
.text:0040692A
.text:0040692A loc_40692A:                             ; CODE XREF: _d_type+2A↑j
.text:0040692A                                         ; DATA XREF: .rdata:jpt_40663E↓o
.text:0040692A                 mov     al, [ecx+1]     ; jumptable 0040663E case 83
.text:0040692D                 lea     edx, [eax-30h]
.text:00406930                 cmp     dl, 9
.text:00406933                 jbe     short loc_406944
.text:00406935                 cmp     al, 5Fh ; '_'
.text:00406937                 jz      short loc_406944
.text:00406939                 sub     eax, 41h ; 'A'
.text:0040693C                 cmp     al, 19h
.text:0040693E                 ja      loc_406D0C
.text:00406944
.text:00406944 loc_406944:                             ; CODE XREF: _d_type+31F↑j
.text:00406944                                         ; _d_type+323↑j
.text:00406944                 xor     edx, edx
.text:00406946                 mov     eax, ebx
.text:00406948                 call    _d_substitution
.text:0040694D                 mov     [esp+3Ch+var_20], eax
.text:00406951                 mov     edx, [ebx+0Ch]
.text:00406954                 cmp     byte ptr [edx], 49h ; 'I'
.text:00406957                 jnz     loc_4066C6
.text:0040695D
.text:0040695D loc_40695D:                             ; CODE XREF: _d_type+3A1↓j
.text:0040695D                 mov     eax, ebx
.text:0040695F                 call    _d_template_args
.text:00406964                 mov     [esp+3Ch+var_3C], eax
.text:00406967                 mov     ecx, [esp+3Ch+var_20]
.text:0040696B                 mov     edx, 4
.text:00406970                 mov     eax, ebx
.text:00406972                 call    _d_make_comp
.text:00406977                 mov     [esp+3Ch+var_20], eax
.text:0040697B                 jmp     loc_4066F4
.text:00406980 ; ---------------------------------------------------------------------------
.text:00406980
.text:00406980 loc_406980:                             ; CODE XREF: _d_type+2A↑j
.text:00406980                                         ; DATA XREF: .rdata:jpt_40663E↓o
.text:00406980                 mov     eax, ebx        ; jumptable 0040663E case 84
.text:00406982                 call    _d_template_param
.text:00406987                 mov     [esp+3Ch+var_20], eax
.text:0040698B                 mov     edx, [ebx+0Ch]
.text:0040698E                 cmp     byte ptr [edx], 49h ; 'I'
.text:00406991                 jnz     loc_4066F4
.text:00406997                 test    eax, eax
.text:00406999                 jz      def_40663E      ; jumptable 0040663E default case, cases 58-64,66,69,72-76,81,86-89,91-96,107,112-114
.text:00406999                                         ; jumptable 00406829 default case, cases 71-83,85-96,98,99,103,106-109,111,113,114,117
.text:0040699F                 mov     edx, [ebx+20h]
.text:004069A2                 cmp     edx, [ebx+24h]
.text:004069A5                 jge     def_40663E      ; jumptable 0040663E default case, cases 58-64,66,69,72-76,81,86-89,91-96,107,112-114
.text:004069A5                                         ; jumptable 00406829 default case, cases 71-83,85-96,98,99,103,106-109,111,113,114,117
.text:004069AB                 mov     ecx, [ebx+1Ch]
.text:004069AE                 mov     [ecx+edx*4], eax
.text:004069B1                 inc     edx
.text:004069B2                 mov     [ebx+20h], edx
.text:004069B5                 jmp     short loc_40695D
.text:004069B7 ; ---------------------------------------------------------------------------
.text:004069B7
.text:004069B7 loc_4069B7:                             ; CODE XREF: _d_type+2A↑j
.text:004069B7                                         ; DATA XREF: .rdata:jpt_40663E↓o
.text:004069B7                 inc     ecx             ; jumptable 0040663E case 85
.text:004069B8                 mov     [ebx+0Ch], ecx
.text:004069BB                 mov     eax, ebx
.text:004069BD                 call    _d_source_name
.text:004069C2                 mov     esi, eax
.text:004069C4                 mov     [esp+3Ch+var_20], eax
.text:004069C8                 mov     eax, ebx
.text:004069CA                 call    _d_type
.text:004069CF                 mov     [esp+3Ch+var_3C], esi
.text:004069D2                 mov     ecx, eax
.text:004069D4                 mov     edx, 1Dh
.text:004069D9                 mov     eax, ebx
.text:004069DB                 call    _d_make_comp
.text:004069E0                 mov     [esp+3Ch+var_20], eax
.text:004069E4                 jmp     loc_4066F4
.text:004069E9 ; ---------------------------------------------------------------------------
.text:004069E9
.text:004069E9 loc_4069E9:                             ; CODE XREF: _d_type+2A↑j
.text:004069E9                                         ; DATA XREF: .rdata:jpt_40663E↓o
.text:004069E9                 lea     eax, [eax+eax*4-1E5h] ; jumptable 0040663E cases 97-106,108-111,115,116,118-122
.text:004069F0                 lea     esi, ds:415300h[eax*4]
.text:004069F7                 mov     edx, [ebx+14h]
.text:004069FA                 cmp     edx, [ebx+18h]
.text:004069FD                 jl      loc_406CB0
.text:00406A03                 mov     esi, large ds:4
.text:00406A09                 xor     eax, eax
.text:00406A0B
.text:00406A0B loc_406A0B:                             ; CODE XREF: _d_type+6BA↓j
.text:00406A0B                                         ; _d_type+752↓j
.text:00406A0B                 mov     edx, [esi+4]
.text:00406A0E                 add     [ebx+30h], edx
.text:00406A11                 inc     ecx
.text:00406A12                 mov     [ebx+0Ch], ecx
.text:00406A15                 jmp     loc_4066C6
.text:00406A1A ; ---------------------------------------------------------------------------
.text:00406A1A
.text:00406A1A loc_406A1A:                             ; CODE XREF: _d_type+1BA↑j
.text:00406A1A                 inc     edx
.text:00406A1B                 mov     [ebx+0Ch], edx
.text:00406A1E                 jmp     loc_406717
.text:00406A23 ; ---------------------------------------------------------------------------
.text:00406A23
.text:00406A23 loc_406A23:                             ; CODE XREF: _d_type+215↑j
.text:00406A23                                         ; DATA XREF: .rdata:jpt_406829↓o
.text:00406A23                 cmp     byte ptr [ecx+2], 5Fh ; '_' ; jumptable 00406829 case 118
.text:00406A27                 jz      loc_406D4C
.text:00406A2D                 mov     eax, ebx
.text:00406A2F                 call    _d_number_component
.text:00406A34                 mov     esi, eax
.text:00406A36
.text:00406A36 loc_406A36:                             ; CODE XREF: _d_type+747↓j
.text:00406A36                 test    esi, esi
.text:00406A38                 jz      loc_4067D4
.text:00406A3E                 mov     eax, [ebx+0Ch]
.text:00406A41                 cmp     byte ptr [eax], 5Fh ; '_'
.text:00406A44                 jnz     loc_4067D4
.text:00406A4A                 inc     eax
.text:00406A4B                 mov     [ebx+0Ch], eax
.text:00406A4E                 mov     eax, ebx
.text:00406A50                 call    _d_type
.text:00406A55                 mov     [esp+3Ch+var_3C], eax
.text:00406A58                 mov     ecx, esi
.text:00406A5A                 mov     edx, 29h ; ')'
.text:00406A5F                 mov     eax, ebx
.text:00406A61                 call    _d_make_comp
.text:00406A66                 jmp     loc_406717
.text:00406A6B ; ---------------------------------------------------------------------------
.text:00406A6B
.text:00406A6B loc_406A6B:                             ; CODE XREF: _d_type+215↑j
.text:00406A6B                                         ; DATA XREF: .rdata:jpt_406829↓o
.text:00406A6B                 mov     edx, [ebx+14h]  ; jumptable 00406829 case 115
.text:00406A6E                 cmp     edx, [ebx+18h]
.text:00406A71                 jge     loc_406CDA
.text:00406A77                 lea     ecx, [edx+edx*2]
.text:00406A7A                 mov     eax, [ebx+10h]
.text:00406A7D                 lea     eax, [eax+ecx*4]
.text:00406A80                 inc     edx
.text:00406A81                 mov     [ebx+14h], edx
.text:00406A84                 test    eax, eax
.text:00406A86                 jz      loc_406D6B
.text:00406A8C                 mov     dword ptr [eax], 23h ; '#'
.text:00406A92                 mov     dword ptr [eax+4], offset off_415558 ; "char16_t"
.text:00406A99                 mov     edx, offset off_415558 ; "char16_t"
.text:00406A9E                 xchg    ax, ax
.text:00406AA0
.text:00406AA0 loc_406AA0:                             ; CODE XREF: _d_type+4CA↓j
.text:00406AA0                                         ; _d_type+4FF↓j ...
.text:00406AA0                 mov     edx, [edx+4]
.text:00406AA3                 add     [ebx+30h], edx
.text:00406AA6                 jmp     loc_4066C6
.text:00406AAB ; ---------------------------------------------------------------------------
.text:00406AAB
.text:00406AAB loc_406AAB:                             ; CODE XREF: _d_type+215↑j
.text:00406AAB                                         ; DATA XREF: .rdata:jpt_406829↓o
.text:00406AAB                 mov     edx, [ebx+14h]  ; jumptable 00406829 case 105
.text:00406AAE                 cmp     edx, [ebx+18h]
.text:00406AB1                 jge     loc_406CDA
.text:00406AB7                 lea     ecx, [edx+edx*2]
.text:00406ABA                 mov     eax, [ebx+10h]
.text:00406ABD                 lea     eax, [eax+ecx*4]
.text:00406AC0                 inc     edx
.text:00406AC1                 mov     [ebx+14h], edx
.text:00406AC4                 test    eax, eax
.text:00406AC6                 jz      loc_406D6B
.text:00406ACC                 mov     dword ptr [eax], 23h ; '#'
.text:00406AD2                 mov     dword ptr [eax+4], offset off_41556C ; "char32_t"
.text:00406AD9                 mov     edx, offset off_41556C ; "char32_t"
.text:00406ADE                 jmp     short loc_406AA0
.text:00406AE0 ; ---------------------------------------------------------------------------
.text:00406AE0
.text:00406AE0 loc_406AE0:                             ; CODE XREF: _d_type+215↑j
.text:00406AE0                                         ; DATA XREF: .rdata:jpt_406829↓o
.text:00406AE0                 mov     edx, [ebx+14h]  ; jumptable 00406829 case 104
.text:00406AE3                 cmp     edx, [ebx+18h]
.text:00406AE6                 jge     loc_406CDA
.text:00406AEC                 lea     ecx, [edx+edx*2]
.text:00406AEF                 mov     eax, [ebx+10h]
.text:00406AF2                 lea     eax, [eax+ecx*4]
.text:00406AF5                 inc     edx
.text:00406AF6                 mov     [ebx+14h], edx
.text:00406AF9                 test    eax, eax
.text:00406AFB                 jz      loc_406D6B
.text:00406B01                 mov     dword ptr [eax], 23h ; '#'
.text:00406B07                 mov     dword ptr [eax+4], offset off_415544 ; "half"
.text:00406B0E                 mov     edx, offset off_415544 ; "half"
.text:00406B13                 jmp     short loc_406AA0
.text:00406B15 ; ---------------------------------------------------------------------------
.text:00406B15
.text:00406B15 loc_406B15:                             ; CODE XREF: _d_type+215↑j
.text:00406B15                                         ; DATA XREF: .rdata:jpt_406829↓o
.text:00406B15                 mov     eax, ebx        ; jumptable 00406829 case 112
.text:00406B17                 call    _d_type
.text:00406B1C                 mov     [esp+3Ch+var_3C], 0
.text:00406B23                 mov     ecx, eax
.text:00406B25                 mov     edx, 45h ; 'E'
.text:00406B2A                 mov     eax, ebx
.text:00406B2C                 call    _d_make_comp
.text:00406B31                 mov     [esp+3Ch+var_20], eax
.text:00406B35                 jmp     loc_4066F4
.text:00406B3A ; ---------------------------------------------------------------------------
.text:00406B3A
.text:00406B3A loc_406B3A:                             ; CODE XREF: _d_type+215↑j
.text:00406B3A                                         ; DATA XREF: .rdata:jpt_406829↓o
.text:00406B3A                 mov     edx, [ebx+14h]  ; jumptable 00406829 case 110
.text:00406B3D                 cmp     edx, [ebx+18h]
.text:00406B40                 jge     loc_406CDA
.text:00406B46                 lea     ecx, [edx+edx*2]
.text:00406B49                 mov     eax, [ebx+10h]
.text:00406B4C                 lea     eax, [eax+ecx*4]
.text:00406B4F                 inc     edx
.text:00406B50                 mov     [ebx+14h], edx
.text:00406B53                 test    eax, eax
.text:00406B55                 jz      loc_406D6B
.text:00406B5B                 mov     dword ptr [eax], 23h ; '#'
.text:00406B61                 mov     dword ptr [eax+4], offset off_415580 ; "decltype(nullptr)"
.text:00406B68                 mov     edx, offset off_415580 ; "decltype(nullptr)"
.text:00406B6D                 jmp     loc_406AA0
.text:00406B72 ; ---------------------------------------------------------------------------
.text:00406B72
.text:00406B72 loc_406B72:                             ; CODE XREF: _d_type+215↑j
.text:00406B72                                         ; DATA XREF: .rdata:jpt_406829↓o
.text:00406B72                 mov     edx, [ebx+14h]  ; jumptable 00406829 case 100
.text:00406B75                 cmp     edx, [ebx+18h]
.text:00406B78                 jge     loc_406CDA
.text:00406B7E                 lea     ecx, [edx+edx*2]
.text:00406B81                 mov     eax, [ebx+10h]
.text:00406B84                 lea     eax, [eax+ecx*4]
.text:00406B87                 inc     edx
.text:00406B88                 mov     [ebx+14h], edx
.text:00406B8B                 test    eax, eax
.text:00406B8D                 jz      loc_406D6B
.text:00406B93                 mov     dword ptr [eax], 23h ; '#'
.text:00406B99                 mov     dword ptr [eax+4], offset off_41551C ; "decimal64"
.text:00406BA0                 mov     edx, offset off_41551C ; "decimal64"
.text:00406BA5                 jmp     loc_406AA0
.text:00406BAA ; ---------------------------------------------------------------------------
.text:00406BAA
.text:00406BAA loc_406BAA:                             ; CODE XREF: _d_type+215↑j
.text:00406BAA                                         ; DATA XREF: .rdata:jpt_406829↓o
.text:00406BAA                 mov     ecx, 4          ; jumptable 00406829 case 97
.text:00406BAF                 mov     edx, offset aAuto ; "auto"
.text:00406BB4                 mov     eax, ebx
.text:00406BB6                 call    _d_make_name
.text:00406BBB                 jmp     loc_4066C6
.text:00406BC0 ; ---------------------------------------------------------------------------
.text:00406BC0
.text:00406BC0 loc_406BC0:                             ; CODE XREF: _d_type+215↑j
.text:00406BC0                                         ; DATA XREF: .rdata:jpt_406829↓o
.text:00406BC0                 mov     eax, [ebx+14h]  ; jumptable 00406829 case 70
.text:00406BC3                 cmp     eax, [ebx+18h]
.text:00406BC6                 jge     loc_406D34
.text:00406BCC                 lea     esi, [eax+eax*2]
.text:00406BCF                 mov     edx, [ebx+10h]
.text:00406BD2                 lea     esi, [edx+esi*4]
.text:00406BD5                 inc     eax
.text:00406BD6                 mov     [ebx+14h], eax
.text:00406BD9
.text:00406BD9 loc_406BD9:                             ; CODE XREF: _d_type+722↓j
.text:00406BD9                 mov     [esp+3Ch+var_20], esi
.text:00406BDD                 mov     dword ptr [esi], 28h ; '('
.text:00406BE3                 mov     al, [ecx+2]
.text:00406BE6                 sub     eax, 30h ; '0'
.text:00406BE9                 cmp     al, 9
.text:00406BEB                 setbe   al
.text:00406BEE                 movzx   eax, al
.text:00406BF1                 mov     [esi+8], ax
.text:00406BF5                 test    ax, ax
.text:00406BF8                 jnz     loc_406D3B
.text:00406BFE
.text:00406BFE loc_406BFE:                             ; CODE XREF: _d_type+733↓j
.text:00406BFE                 mov     eax, ebx
.text:00406C00                 call    _d_type
.text:00406C05                 mov     [esi+4], eax
.text:00406C08                 mov     eax, [esp+3Ch+var_20]
.text:00406C0C                 mov     esi, [eax+4]
.text:00406C0F                 test    esi, esi
.text:00406C11                 jz      def_40663E      ; jumptable 0040663E default case, cases 58-64,66,69,72-76,81,86-89,91-96,107,112-114
.text:00406C11                                         ; jumptable 00406829 default case, cases 71-83,85-96,98,99,103,106-109,111,113,114,117
.text:00406C17                 lea     eax, [ebx+0Ch]
.text:00406C1A                 call    _d_number_isra_0
.text:00406C1F                 mov     edx, [ebx+0Ch]
.text:00406C22                 mov     al, [edx]
.text:00406C24                 test    al, al
.text:00406C26                 jz      loc_406D2D
.text:00406C2C                 inc     edx
.text:00406C2D                 mov     [ebx+0Ch], edx
.text:00406C30                 xor     edx, edx
.text:00406C32                 cmp     al, 73h ; 's'
.text:00406C34                 setz    dl
.text:00406C37
.text:00406C37 loc_406C37:                             ; CODE XREF: _d_type+71B↓j
.text:00406C37                 mov     eax, [esp+3Ch+var_20]
.text:00406C3B                 mov     [eax+0Ah], dx
.text:00406C3F                 jmp     loc_4066C6
.text:00406C44 ; ---------------------------------------------------------------------------
.text:00406C44
.text:00406C44 loc_406C44:                             ; CODE XREF: _d_type+215↑j
.text:00406C44                                         ; DATA XREF: .rdata:jpt_406829↓o
.text:00406C44                 mov     edx, [ebx+14h]  ; jumptable 00406829 case 102
.text:00406C47                 cmp     edx, [ebx+18h]
.text:00406C4A                 jge     loc_406CDA
.text:00406C50                 lea     ecx, [edx+edx*2]
.text:00406C53                 mov     eax, [ebx+10h]
.text:00406C56                 lea     eax, [eax+ecx*4]
.text:00406C59                 inc     edx
.text:00406C5A                 mov     [ebx+14h], edx
.text:00406C5D                 test    eax, eax
.text:00406C5F                 jz      loc_406D6B
.text:00406C65                 mov     dword ptr [eax], 23h ; '#'
.text:00406C6B                 mov     dword ptr [eax+4], offset off_415508 ; "decimal32"
.text:00406C72                 mov     edx, offset off_415508 ; "decimal32"
.text:00406C77                 jmp     loc_406AA0
.text:00406C7C ; ---------------------------------------------------------------------------
.text:00406C7C
.text:00406C7C loc_406C7C:                             ; CODE XREF: _d_type+215↑j
.text:00406C7C                                         ; DATA XREF: .rdata:jpt_406829↓o
.text:00406C7C                 mov     edx, [ebx+14h]  ; jumptable 00406829 case 101
.text:00406C7F                 cmp     edx, [ebx+18h]
.text:00406C82                 jge     short loc_406CDA
.text:00406C84                 lea     ecx, [edx+edx*2]
.text:00406C87                 mov     eax, [ebx+10h]
.text:00406C8A                 lea     eax, [eax+ecx*4]
.text:00406C8D                 inc     edx
.text:00406C8E                 mov     [ebx+14h], edx
.text:00406C91                 test    eax, eax
.text:00406C93                 jz      loc_406D6B
.text:00406C99                 mov     dword ptr [eax], 23h ; '#'
.text:00406C9F                 mov     dword ptr [eax+4], offset off_415530 ; "decimal128"
.text:00406CA6                 mov     edx, offset off_415530 ; "decimal128"
.text:00406CAB                 jmp     loc_406AA0
.text:00406CB0 ; ---------------------------------------------------------------------------
.text:00406CB0
.text:00406CB0 loc_406CB0:                             ; CODE XREF: _d_type+3E9↑j
.text:00406CB0                 lea     edi, [edx+edx*2]
.text:00406CB3                 mov     eax, [ebx+10h]
.text:00406CB6                 lea     eax, [eax+edi*4]
.text:00406CB9                 inc     edx
.text:00406CBA                 mov     [ebx+14h], edx
.text:00406CBD                 test    eax, eax
.text:00406CBF                 jz      loc_406D60
.text:00406CC5                 mov     dword ptr [eax], 23h ; '#'
.text:00406CCB                 mov     [eax+4], esi
.text:00406CCE                 jmp     loc_406A0B
.text:00406CD3 ; ---------------------------------------------------------------------------
.text:00406CD3
.text:00406CD3 loc_406CD3:                             ; CODE XREF: _d_type+114↑j
.text:00406CD3                 xor     edi, edi
.text:00406CD5                 jmp     loc_406765
.text:00406CDA ; ---------------------------------------------------------------------------
.text:00406CDA
.text:00406CDA loc_406CDA:                             ; CODE XREF: _d_type+45D↑j
.text:00406CDA                                         ; _d_type+49D↑j ...
.text:00406CDA                 mov     edx, large ds:4
.text:00406CE0                 xor     eax, eax
.text:00406CE2                 jmp     loc_406AA0
.text:00406CE7 ; ---------------------------------------------------------------------------
.text:00406CE7
.text:00406CE7 loc_406CE7:                             ; CODE XREF: _d_type+1A2↑j
.text:00406CE7                 add     ecx, 2
.text:00406CEA                 mov     [ebx+0Ch], ecx
.text:00406CED                 jmp     loc_4067BC
.text:00406CF2 ; ---------------------------------------------------------------------------
.text:00406CF2
.text:00406CF2 loc_406CF2:                             ; CODE XREF: _d_type+11F↑j
.text:00406CF2                 mov     eax, ebx
.text:00406CF4                 call    _d_expression
.text:00406CF9                 mov     edi, eax
.text:00406CFB                 test    eax, eax
.text:00406CFD                 jnz     loc_40675D
.text:00406D03                 xor     eax, eax
.text:00406D05                 jmp     loc_406717
.text:00406D05 ; ---------------------------------------------------------------------------
.text:00406D0A                 align 4
.text:00406D0C
.text:00406D0C loc_406D0C:                             ; CODE XREF: _d_type+32A↑j
.text:00406D0C                 mov     eax, ebx
.text:00406D0E                 call    _d_name
.text:00406D13                 mov     [esp+3Ch+var_20], eax
.text:00406D17                 test    eax, eax
.text:00406D19                 jz      def_40663E      ; jumptable 0040663E default case, cases 58-64,66,69,72-76,81,86-89,91-96,107,112-114
.text:00406D19                                         ; jumptable 00406829 default case, cases 71-83,85-96,98,99,103,106-109,111,113,114,117
.text:00406D1F                 cmp     dword ptr [eax], 16h
.text:00406D22                 jnz     loc_4066F8
.text:00406D28                 jmp     loc_4066C6
.text:00406D2D ; ---------------------------------------------------------------------------
.text:00406D2D
.text:00406D2D loc_406D2D:                             ; CODE XREF: _d_type+612↑j
.text:00406D2D                 xor     edx, edx
.text:00406D2F                 jmp     loc_406C37
.text:00406D34 ; ---------------------------------------------------------------------------
.text:00406D34
.text:00406D34 loc_406D34:                             ; CODE XREF: _d_type+5B2↑j
.text:00406D34                 xor     esi, esi
.text:00406D36                 jmp     loc_406BD9
.text:00406D3B ; ---------------------------------------------------------------------------
.text:00406D3B
.text:00406D3B loc_406D3B:                             ; CODE XREF: _d_type+5E4↑j
.text:00406D3B                 lea     eax, [ebx+0Ch]
.text:00406D3E                 call    _d_number_isra_0
.text:00406D43                 mov     esi, [esp+3Ch+var_20]
.text:00406D47                 jmp     loc_406BFE
.text:00406D4C ; ---------------------------------------------------------------------------
.text:00406D4C
.text:00406D4C loc_406D4C:                             ; CODE XREF: _d_type+413↑j
.text:00406D4C                 add     ecx, 3
.text:00406D4F                 mov     [ebx+0Ch], ecx
.text:00406D52                 mov     eax, ebx
.text:00406D54                 call    _d_expression
.text:00406D59                 mov     esi, eax
.text:00406D5B                 jmp     loc_406A36
.text:00406D60 ; ---------------------------------------------------------------------------
.text:00406D60
.text:00406D60 loc_406D60:                             ; CODE XREF: _d_type+6AB↑j
.text:00406D60                 mov     esi, large ds:4
.text:00406D66                 jmp     loc_406A0B
.text:00406D6B ; ---------------------------------------------------------------------------
.text:00406D6B
.text:00406D6B loc_406D6B:                             ; CODE XREF: _d_type+472↑j
.text:00406D6B                                         ; _d_type+4B2↑j ...
.text:00406D6B                 mov     edx, large ds:4
.text:00406D71                 jmp     loc_406AA0
.text:00406D71 _d_type         endp
.text:00406D71
.text:00406D71 ; ---------------------------------------------------------------------------
.text:00406D76                 align 4
.text:00406D78
.text:00406D78 ; =============== S U B R O U T I N E =======================================
.text:00406D78
.text:00406D78
.text:00406D78 _d_operator_name proc near              ; CODE XREF: _d_unqualified_name+5E↓p
.text:00406D78                                         ; _d_expression+AC↓p
.text:00406D78
.text:00406D78 var_3C          = dword ptr -3Ch
.text:00406D78 var_1D          = byte ptr -1Dh
.text:00406D78
.text:00406D78                 push    ebp
.text:00406D79                 push    edi
.text:00406D7A                 push    esi
.text:00406D7B                 push    ebx
.text:00406D7C                 sub     esp, 2Ch
.text:00406D7F                 mov     esi, eax
.text:00406D81                 mov     eax, [eax+0Ch]
.text:00406D84                 mov     bl, [eax]
.text:00406D86                 test    bl, bl
.text:00406D88                 jz      short loc_406DF4
.text:00406D8A                 lea     edx, [eax+1]
.text:00406D8D                 mov     [esi+0Ch], edx
.text:00406D90                 mov     dl, [eax+1]
.text:00406D93                 mov     [esp+3Ch+var_1D], dl
.text:00406D97                 test    dl, dl
.text:00406D99                 jz      short loc_406DA1
.text:00406D9B                 add     eax, 2
.text:00406D9E                 mov     [esi+0Ch], eax
.text:00406DA1
.text:00406DA1 loc_406DA1:                             ; CODE XREF: _d_operator_name+21↑j
.text:00406DA1                 cmp     bl, 76h ; 'v'
.text:00406DA4                 jnz     loc_406E4C
.text:00406DAA                 mov     al, [esp+3Ch+var_1D]
.text:00406DAE                 sub     eax, 30h ; '0'
.text:00406DB1                 cmp     al, 9
.text:00406DB3                 ja      short loc_406DF9
.text:00406DB5                 mov     eax, esi
.text:00406DB7                 call    _d_source_name
.text:00406DBC                 mov     ecx, eax
.text:00406DBE                 mov     edx, [esi+14h]
.text:00406DC1                 cmp     edx, [esi+18h]
.text:00406DC4                 jge     short loc_406E2C
.text:00406DC6                 lea     ebx, [edx+edx*2]
.text:00406DC9                 mov     eax, [esi+10h]
.text:00406DCC                 lea     eax, [eax+ebx*4]
.text:00406DCF                 inc     edx
.text:00406DD0                 mov     [esi+14h], edx
.text:00406DD3                 test    eax, eax
.text:00406DD5                 jz      short loc_406E2C
.text:00406DD7                 test    ecx, ecx
.text:00406DD9                 jz      short loc_406E2C
.text:00406DDB                 mov     dword ptr [eax], 2Eh ; '.'
.text:00406DE1                 movsx   edx, [esp+3Ch+var_1D]
.text:00406DE6                 sub     edx, 30h ; '0'
.text:00406DE9                 mov     [eax+4], edx
.text:00406DEC                 mov     [eax+8], ecx
.text:00406DEF                 jmp     short loc_406E2E
.text:00406DEF ; ---------------------------------------------------------------------------
.text:00406DF1                 align 4
.text:00406DF4
.text:00406DF4 loc_406DF4:                             ; CODE XREF: _d_operator_name+10↑j
.text:00406DF4                 mov     [esp+3Ch+var_1D], 0
.text:00406DF9
.text:00406DF9 loc_406DF9:                             ; CODE XREF: _d_operator_name+3B↑j
.text:00406DF9                                         ; _d_operator_name+D7↓j ...
.text:00406DF9                 mov     edi, 39h ; '9'
.text:00406DFE                 xor     edx, edx
.text:00406E00
.text:00406E00 loc_406E00:                             ; CODE XREF: _d_operator_name+B2↓j
.text:00406E00                 mov     eax, edi
.text:00406E02                 sub     eax, edx
.text:00406E04                 mov     ecx, eax
.text:00406E06                 shr     ecx, 1Fh
.text:00406E09                 add     eax, ecx
.text:00406E0B                 sar     eax, 1
.text:00406E0D                 add     eax, edx
.text:00406E0F                 mov     ecx, eax
.text:00406E11                 shl     ecx, 4
.text:00406E14                 lea     ebp, _cplus_demangle_operators[ecx]
.text:00406E1A                 mov     ecx, ds:_cplus_demangle_operators[ecx]
.text:00406E20                 cmp     bl, [ecx]
.text:00406E22                 jz      short loc_406E38
.text:00406E24                 jge     short loc_406E47
.text:00406E26
.text:00406E26 loc_406E26:                             ; CODE XREF: _d_operator_name+CD↓j
.text:00406E26                 mov     edi, eax
.text:00406E28
.text:00406E28 loc_406E28:                             ; CODE XREF: _d_operator_name+D2↓j
.text:00406E28                 cmp     edx, edi
.text:00406E2A                 jnz     short loc_406E00
.text:00406E2C
.text:00406E2C loc_406E2C:                             ; CODE XREF: _d_operator_name+4C↑j
.text:00406E2C                                         ; _d_operator_name+5D↑j ...
.text:00406E2C                 xor     eax, eax
.text:00406E2E
.text:00406E2E loc_406E2E:                             ; CODE XREF: _d_operator_name+77↑j
.text:00406E2E                                         ; _d_operator_name+FC↓j ...
.text:00406E2E                 add     esp, 2Ch
.text:00406E31                 pop     ebx
.text:00406E32                 pop     esi
.text:00406E33                 pop     edi
.text:00406E34                 pop     ebp
.text:00406E35                 retn
.text:00406E35 ; ---------------------------------------------------------------------------
.text:00406E36                 align 4
.text:00406E38
.text:00406E38 loc_406E38:                             ; CODE XREF: _d_operator_name+AA↑j
.text:00406E38                 mov     cl, [ecx+1]
.text:00406E3B                 cmp     [esp+3Ch+var_1D], cl
.text:00406E3F                 jz      short loc_406E78
.text:00406E41                 cmp     cl, [esp+3Ch+var_1D]
.text:00406E45                 jg      short loc_406E26
.text:00406E47
.text:00406E47 loc_406E47:                             ; CODE XREF: _d_operator_name+AC↑j
.text:00406E47                 lea     edx, [eax+1]
.text:00406E4A                 jmp     short loc_406E28
.text:00406E4C ; ---------------------------------------------------------------------------
.text:00406E4C
.text:00406E4C loc_406E4C:                             ; CODE XREF: _d_operator_name+2C↑j
.text:00406E4C                 cmp     bl, 63h ; 'c'
.text:00406E4F                 jnz     short loc_406DF9
.text:00406E51                 cmp     [esp+3Ch+var_1D], 76h ; 'v'
.text:00406E56                 jnz     short loc_406DF9
.text:00406E58                 mov     eax, esi
.text:00406E5A                 call    _d_type
.text:00406E5F                 mov     [esp+3Ch+var_3C], 0
.text:00406E66                 mov     ecx, eax
.text:00406E68                 mov     edx, 2Fh ; '/'
.text:00406E6D                 mov     eax, esi
.text:00406E6F                 call    _d_make_comp
.text:00406E74                 jmp     short loc_406E2E
.text:00406E74 ; ---------------------------------------------------------------------------
.text:00406E76                 align 4
.text:00406E78
.text:00406E78 loc_406E78:                             ; CODE XREF: _d_operator_name+C7↑j
.text:00406E78                 mov     edx, [esi+14h]
.text:00406E7B                 cmp     edx, [esi+18h]
.text:00406E7E                 jge     short loc_406E2C
.text:00406E80                 lea     ecx, [edx+edx*2]
.text:00406E83                 mov     eax, [esi+10h]
.text:00406E86                 lea     eax, [eax+ecx*4]
.text:00406E89                 inc     edx
.text:00406E8A                 mov     [esi+14h], edx
.text:00406E8D                 test    eax, eax
.text:00406E8F                 jz      short loc_406E2C
.text:00406E91                 mov     dword ptr [eax], 2Dh ; '-'
.text:00406E97                 mov     [eax+4], ebp
.text:00406E9A                 jmp     short loc_406E2E
.text:00406E9A _d_operator_name endp
.text:00406E9A
.text:00406E9C
.text:00406E9C ; =============== S U B R O U T I N E =======================================
.text:00406E9C
.text:00406E9C
.text:00406E9C _d_parmlist     proc near               ; CODE XREF: _d_unqualified_name+160↓p
.text:00406E9C                                         ; _d_bare_function_type+17↓p
.text:00406E9C
.text:00406E9C var_2C          = dword ptr -2Ch
.text:00406E9C var_10          = dword ptr -10h
.text:00406E9C
.text:00406E9C                 push    esi
.text:00406E9D                 push    ebx
.text:00406E9E                 sub     esp, 24h
.text:00406EA1                 mov     ebx, eax
.text:00406EA3                 mov     [esp+2Ch+var_10], 0
.text:00406EAB                 mov     eax, [eax+0Ch]
.text:00406EAE                 mov     al, [eax]
.text:00406EB0                 test    al, al
.text:00406EB2                 jz      short loc_406F00
.text:00406EB4                 cmp     al, 45h ; 'E'
.text:00406EB6                 jz      short loc_406F00
.text:00406EB8                 cmp     al, 2Eh ; '.'
.text:00406EBA                 jz      short loc_406F00
.text:00406EBC                 lea     esi, [esp+2Ch+var_10]
.text:00406EC0                 jmp     short loc_406EF5
.text:00406EC0 ; ---------------------------------------------------------------------------
.text:00406EC2                 align 4
.text:00406EC4
.text:00406EC4 loc_406EC4:                             ; CODE XREF: _d_parmlist+62↓j
.text:00406EC4                 mov     [esp+2Ch+var_2C], 0
.text:00406ECB                 mov     ecx, eax
.text:00406ECD                 mov     edx, 2Ah ; '*'
.text:00406ED2                 mov     eax, ebx
.text:00406ED4                 call    _d_make_comp
.text:00406ED9                 mov     [esi], eax
.text:00406EDB                 test    eax, eax
.text:00406EDD                 jz      short loc_406F00
.text:00406EDF                 lea     esi, [eax+8]
.text:00406EE2                 mov     eax, [ebx+0Ch]
.text:00406EE5                 mov     dl, [eax]
.text:00406EE7                 test    dl, dl
.text:00406EE9                 jz      short loc_406F08
.text:00406EEB                 cmp     dl, 45h ; 'E'
.text:00406EEE                 jz      short loc_406F08
.text:00406EF0                 cmp     dl, 2Eh ; '.'
.text:00406EF3                 jz      short loc_406F08
.text:00406EF5
.text:00406EF5 loc_406EF5:                             ; CODE XREF: _d_parmlist+24↑j
.text:00406EF5                 mov     eax, ebx
.text:00406EF7                 call    _d_type
.text:00406EFC                 test    eax, eax
.text:00406EFE                 jnz     short loc_406EC4
.text:00406F00
.text:00406F00 loc_406F00:                             ; CODE XREF: _d_parmlist+16↑j
.text:00406F00                                         ; _d_parmlist+1A↑j ...
.text:00406F00                 xor     eax, eax
.text:00406F02                 add     esp, 24h
.text:00406F05                 pop     ebx
.text:00406F06                 pop     esi
.text:00406F07                 retn
.text:00406F08 ; ---------------------------------------------------------------------------
.text:00406F08
.text:00406F08 loc_406F08:                             ; CODE XREF: _d_parmlist+4D↑j
.text:00406F08                                         ; _d_parmlist+52↑j ...
.text:00406F08                 mov     eax, [esp+2Ch+var_10]
.text:00406F0C                 test    eax, eax
.text:00406F0E                 jz      short loc_406F00
.text:00406F10                 mov     edx, [eax+8]
.text:00406F13                 test    edx, edx
.text:00406F15                 jz      short loc_406F1D
.text:00406F17
.text:00406F17 loc_406F17:                             ; CODE XREF: _d_parmlist+87↓j
.text:00406F17                                         ; _d_parmlist+90↓j ...
.text:00406F17                 add     esp, 24h
.text:00406F1A                 pop     ebx
.text:00406F1B                 pop     esi
.text:00406F1C                 retn
.text:00406F1D ; ---------------------------------------------------------------------------
.text:00406F1D
.text:00406F1D loc_406F1D:                             ; CODE XREF: _d_parmlist+79↑j
.text:00406F1D                 mov     edx, [eax+4]
.text:00406F20                 cmp     dword ptr [edx], 23h ; '#'
.text:00406F23                 jnz     short loc_406F17
.text:00406F25                 mov     edx, [edx+4]
.text:00406F28                 cmp     dword ptr [edx+10h], 9
.text:00406F2C                 jnz     short loc_406F17
.text:00406F2E                 mov     edx, [edx+4]
.text:00406F31                 sub     [ebx+30h], edx
.text:00406F34                 mov     dword ptr [eax+4], 0
.text:00406F3B                 jmp     short loc_406F17
.text:00406F3B _d_parmlist     endp
.text:00406F3B
.text:00406F3B ; ---------------------------------------------------------------------------
.text:00406F3D                 align 10h
.text:00406F40
.text:00406F40 ; =============== S U B R O U T I N E =======================================
.text:00406F40
.text:00406F40
.text:00406F40 _d_unqualified_name proc near           ; CODE XREF: _d_name+18↑p
.text:00406F40                                         ; _d_name+15E↑p ...
.text:00406F40
.text:00406F40 var_2C          = dword ptr -2Ch
.text:00406F40
.text:00406F40                 push    ebp
.text:00406F41                 push    edi
.text:00406F42                 push    esi
.text:00406F43                 push    ebx
.text:00406F44                 sub     esp, 1Ch
.text:00406F47                 mov     ebx, eax
.text:00406F49                 mov     eax, [eax+0Ch]
.text:00406F4C                 mov     dl, [eax]
.text:00406F4E                 lea     ecx, [edx-30h]
.text:00406F51                 cmp     cl, 9
.text:00406F54                 jbe     loc_406FEC
.text:00406F5A                 lea     ecx, [edx-61h]
.text:00406F5D                 cmp     cl, 19h
.text:00406F60                 jbe     short loc_406F9C
.text:00406F62                 lea     ecx, [edx-43h]
.text:00406F65                 cmp     cl, 1
.text:00406F68                 jbe     loc_407118
.text:00406F6E                 cmp     dl, 4Ch ; 'L'
.text:00406F71                 jz      loc_40705C
.text:00406F77                 cmp     dl, 55h ; 'U'
.text:00406F7A                 jnz     short loc_406F8D
.text:00406F7C                 mov     dl, [eax+1]
.text:00406F7F                 cmp     dl, 6Ch ; 'l'
.text:00406F82                 jz      loc_407088
.text:00406F88                 cmp     dl, 74h ; 't'
.text:00406F8B                 jz      short loc_406FFC
.text:00406F8D
.text:00406F8D loc_406F8D:                             ; CODE XREF: _d_unqualified_name+3A↑j
.text:00406F8D                                         ; _d_unqualified_name+67↓j ...
.text:00406F8D                 xor     ebp, ebp
.text:00406F8F
.text:00406F8F loc_406F8F:                             ; CODE XREF: _d_unqualified_name+6C↓j
.text:00406F8F                                         ; _d_unqualified_name+8B↓j ...
.text:00406F8F                 mov     eax, ebp
.text:00406F91                 add     esp, 1Ch
.text:00406F94                 pop     ebx
.text:00406F95                 pop     esi
.text:00406F96                 pop     edi
.text:00406F97                 pop     ebp
.text:00406F98                 retn
.text:00406F98 ; ---------------------------------------------------------------------------
.text:00406F99                 align 4
.text:00406F9C
.text:00406F9C loc_406F9C:                             ; CODE XREF: _d_unqualified_name+20↑j
.text:00406F9C                 mov     eax, ebx
.text:00406F9E                 call    _d_operator_name
.text:00406FA3                 mov     ebp, eax
.text:00406FA5                 test    eax, eax
.text:00406FA7                 jz      short loc_406F8D
.text:00406FA9                 cmp     dword ptr [eax], 2Dh ; '-'
.text:00406FAC                 jnz     short loc_406F8F
.text:00406FAE                 mov     edx, [eax+4]
.text:00406FB1                 mov     eax, [ebx+30h]
.text:00406FB4                 add     eax, [edx+8]
.text:00406FB7                 add     eax, 7
.text:00406FBA                 mov     [ebx+30h], eax
.text:00406FBD                 mov     esi, [edx]
.text:00406FBF                 mov     edi, offset unk_414ADC
.text:00406FC4                 mov     ecx, 3
.text:00406FC9                 repe cmpsb
.text:00406FCB                 jnz     short loc_406F8F
.text:00406FCD                 mov     eax, ebx
.text:00406FCF                 call    _d_source_name
.text:00406FD4                 mov     [esp+2Ch+var_2C], eax
.text:00406FD7                 mov     ecx, ebp
.text:00406FD9                 mov     edx, 31h ; '1'
.text:00406FDE                 mov     eax, ebx
.text:00406FE0                 call    _d_make_comp
.text:00406FE5                 mov     ebp, eax
.text:00406FE7                 jmp     short loc_406F8F
.text:00406FE7 ; ---------------------------------------------------------------------------
.text:00406FE9                 align 4
.text:00406FEC
.text:00406FEC loc_406FEC:                             ; CODE XREF: _d_unqualified_name+14↑j
.text:00406FEC                 mov     eax, ebx
.text:00406FEE                 add     esp, 1Ch
.text:00406FF1                 pop     ebx
.text:00406FF2                 pop     esi
.text:00406FF3                 pop     edi
.text:00406FF4                 pop     ebp
.text:00406FF5                 jmp     _d_source_name
.text:00406FF5 ; ---------------------------------------------------------------------------
.text:00406FFA                 align 4
.text:00406FFC
.text:00406FFC loc_406FFC:                             ; CODE XREF: _d_unqualified_name+4B↑j
.text:00406FFC                 lea     edx, [eax+1]
.text:00406FFF                 mov     [ebx+0Ch], edx
.text:00407002                 cmp     byte ptr [eax+1], 74h ; 't'
.text:00407006                 jnz     short loc_406F8D
.text:00407008                 add     eax, 2
.text:0040700B                 mov     [ebx+0Ch], eax
.text:0040700E                 mov     eax, ebx
.text:00407010                 call    _d_compact_number
.text:00407015                 test    eax, eax
.text:00407017                 js      loc_406F8D
.text:0040701D                 mov     edx, [ebx+14h]
.text:00407020                 cmp     edx, [ebx+18h]
.text:00407023                 jge     loc_406F8D
.text:00407029                 lea     esi, [edx+edx*2]
.text:0040702C                 mov     ecx, [ebx+10h]
.text:0040702F                 lea     ebp, [ecx+esi*4]
.text:00407032                 inc     edx
.text:00407033                 mov     [ebx+14h], edx
.text:00407036                 test    ebp, ebp
.text:00407038                 jz      loc_406F8D
.text:0040703E                 mov     dword ptr [ebp+0], 42h ; 'B'
.text:00407045                 mov     [ebp+4], eax
.text:00407048                 mov     eax, [ebx+20h]
.text:0040704B                 cmp     eax, [ebx+24h]
.text:0040704E                 jge     loc_406F8D
.text:00407054                 jmp     loc_407108
.text:00407054 ; ---------------------------------------------------------------------------
.text:00407059                 align 4
.text:0040705C
.text:0040705C loc_40705C:                             ; CODE XREF: _d_unqualified_name+31↑j
.text:0040705C                 inc     eax
.text:0040705D                 mov     [ebx+0Ch], eax
.text:00407060                 mov     eax, ebx
.text:00407062                 call    _d_source_name
.text:00407067                 mov     ebp, eax
.text:00407069                 test    eax, eax
.text:0040706B                 jz      loc_406F8D
.text:00407071                 mov     eax, ebx
.text:00407073                 call    _d_discriminator
.text:00407078                 test    eax, eax
.text:0040707A                 jnz     loc_406F8F
.text:00407080                 jmp     loc_406F8D
.text:00407080 ; ---------------------------------------------------------------------------
.text:00407085                 align 4
.text:00407088
.text:00407088 loc_407088:                             ; CODE XREF: _d_unqualified_name+42↑j
.text:00407088                 lea     edx, [eax+1]
.text:0040708B                 mov     [ebx+0Ch], edx
.text:0040708E                 cmp     byte ptr [eax+1], 6Ch ; 'l'
.text:00407092                 jnz     loc_406F8D
.text:00407098                 add     eax, 2
.text:0040709B                 mov     [ebx+0Ch], eax
.text:0040709E                 mov     eax, ebx
.text:004070A0                 call    _d_parmlist
.text:004070A5                 mov     esi, eax
.text:004070A7                 test    eax, eax
.text:004070A9                 jz      loc_406F8D
.text:004070AF                 mov     edx, [ebx+0Ch]
.text:004070B2                 cmp     byte ptr [edx], 45h ; 'E'
.text:004070B5                 jnz     loc_406F8D
.text:004070BB                 inc     edx
.text:004070BC                 mov     [ebx+0Ch], edx
.text:004070BF                 mov     eax, ebx
.text:004070C1                 call    _d_compact_number
.text:004070C6                 test    eax, eax
.text:004070C8                 js      loc_406F8D
.text:004070CE                 mov     edx, [ebx+14h]
.text:004070D1                 cmp     edx, [ebx+18h]
.text:004070D4                 jge     loc_406F8D
.text:004070DA                 lea     edi, [edx+edx*2]
.text:004070DD                 mov     ecx, [ebx+10h]
.text:004070E0                 lea     ebp, [ecx+edi*4]
.text:004070E3                 inc     edx
.text:004070E4                 mov     [ebx+14h], edx
.text:004070E7                 test    ebp, ebp
.text:004070E9                 jz      loc_406F8D
.text:004070EF                 mov     dword ptr [ebp+0], 40h ; '@'
.text:004070F6                 mov     [ebp+4], esi
.text:004070F9                 mov     [ebp+8], eax
.text:004070FC                 mov     eax, [ebx+20h]
.text:004070FF                 cmp     eax, [ebx+24h]
.text:00407102                 jge     loc_406F8D
.text:00407108
.text:00407108 loc_407108:                             ; CODE XREF: _d_unqualified_name+114↑j
.text:00407108                 mov     edx, [ebx+1Ch]
.text:0040710B                 mov     [edx+eax*4], ebp
.text:0040710E                 inc     eax
.text:0040710F                 mov     [ebx+20h], eax
.text:00407112                 jmp     loc_406F8F
.text:00407112 ; ---------------------------------------------------------------------------
.text:00407117                 align 4
.text:00407118
.text:00407118 loc_407118:                             ; CODE XREF: _d_unqualified_name+28↑j
.text:00407118                 mov     ecx, [ebx+2Ch]
.text:0040711B                 test    ecx, ecx
.text:0040711D                 jz      short loc_40712A
.text:0040711F                 mov     esi, [ecx]
.text:00407121                 test    esi, esi
.text:00407123                 jz      short loc_40719C
.text:00407125                 cmp     esi, 16h
.text:00407128                 jz      short loc_40719C
.text:0040712A
.text:0040712A loc_40712A:                             ; CODE XREF: _d_unqualified_name+1DD↑j
.text:0040712A                                         ; _d_unqualified_name+264↓j
.text:0040712A                 cmp     dl, 43h ; 'C'
.text:0040712D                 jz      short loc_4071A6
.text:0040712F                 cmp     dl, 44h ; 'D'
.text:00407132                 jnz     loc_406F8D
.text:00407138                 mov     dl, [eax+1]
.text:0040713B                 cmp     dl, 31h ; '1'
.text:0040713E                 jz      loc_407230
.text:00407144                 jg      loc_407203
.text:0040714A                 cmp     dl, 30h ; '0'
.text:0040714D                 jnz     loc_406F8D
.text:00407153                 mov     edx, 1
.text:00407158
.text:00407158 loc_407158:                             ; CODE XREF: _d_unqualified_name+2D6↓j
.text:00407158                                         ; _d_unqualified_name+2F5↓j ...
.text:00407158                 add     eax, 2
.text:0040715B                 mov     [ebx+0Ch], eax
.text:0040715E                 mov     eax, [ebx+14h]
.text:00407161                 cmp     eax, [ebx+18h]
.text:00407164                 jge     loc_406F8D
.text:0040716A                 lea     edi, [eax+eax*2]
.text:0040716D                 mov     esi, [ebx+10h]
.text:00407170                 lea     ebp, [esi+edi*4]
.text:00407173                 inc     eax
.text:00407174                 mov     [ebx+14h], eax
.text:00407177                 test    ebp, ebp
.text:00407179                 jz      loc_406F8D
.text:0040717F                 test    ecx, ecx
.text:00407181                 jz      loc_406F8D
.text:00407187                 mov     dword ptr [ebp+0], 8
.text:0040718E                 mov     [ebp+4], edx
.text:00407191                 mov     [ebp+8], ecx
.text:00407194                 jmp     loc_406F8F
.text:00407194 ; ---------------------------------------------------------------------------
.text:00407199                 align 4
.text:0040719C
.text:0040719C loc_40719C:                             ; CODE XREF: _d_unqualified_name+1E3↑j
.text:0040719C                                         ; _d_unqualified_name+1E8↑j
.text:0040719C                 mov     edx, [ecx+8]
.text:0040719F                 add     [ebx+30h], edx
.text:004071A2                 mov     dl, [eax]
.text:004071A4                 jmp     short loc_40712A
.text:004071A6 ; ---------------------------------------------------------------------------
.text:004071A6
.text:004071A6 loc_4071A6:                             ; CODE XREF: _d_unqualified_name+1ED↑j
.text:004071A6                 mov     dl, [eax+1]
.text:004071A9                 cmp     dl, 32h ; '2'
.text:004071AC                 jz      loc_407241
.text:004071B2                 jg      short loc_40721B
.text:004071B4                 cmp     dl, 31h ; '1'
.text:004071B7                 jnz     loc_406F8D
.text:004071BD                 mov     edx, 1
.text:004071C2
.text:004071C2 loc_4071C2:                             ; CODE XREF: _d_unqualified_name+2EE↓j
.text:004071C2                                         ; _d_unqualified_name+2FF↓j ...
.text:004071C2                 add     eax, 2
.text:004071C5                 mov     [ebx+0Ch], eax
.text:004071C8                 mov     eax, [ebx+14h]
.text:004071CB                 cmp     eax, [ebx+18h]
.text:004071CE                 jge     loc_406F8D
.text:004071D4                 lea     edi, [eax+eax*2]
.text:004071D7                 mov     esi, [ebx+10h]
.text:004071DA                 lea     ebp, [esi+edi*4]
.text:004071DD                 inc     eax
.text:004071DE                 mov     [ebx+14h], eax
.text:004071E1                 test    ebp, ebp
.text:004071E3                 jz      loc_406F8D
.text:004071E9                 test    ecx, ecx
.text:004071EB                 jz      loc_406F8D
.text:004071F1                 mov     dword ptr [ebp+0], 7
.text:004071F8                 mov     [ebp+4], edx
.text:004071FB                 mov     [ebp+8], ecx
.text:004071FE                 jmp     loc_406F8F
.text:00407203 ; ---------------------------------------------------------------------------
.text:00407203
.text:00407203 loc_407203:                             ; CODE XREF: _d_unqualified_name+204↑j
.text:00407203                 cmp     dl, 32h ; '2'
.text:00407206                 jz      short loc_40724B
.text:00407208                 cmp     dl, 35h ; '5'
.text:0040720B                 jnz     loc_406F8D
.text:00407211                 mov     edx, 4
.text:00407216                 jmp     loc_407158
.text:0040721B ; ---------------------------------------------------------------------------
.text:0040721B
.text:0040721B loc_40721B:                             ; CODE XREF: _d_unqualified_name+272↑j
.text:0040721B                 cmp     dl, 33h ; '3'
.text:0040721E                 jz      short loc_40723A
.text:00407220                 cmp     dl, 35h ; '5'
.text:00407223                 jnz     loc_406F8D
.text:00407229                 mov     edx, 4
.text:0040722E                 jmp     short loc_4071C2
.text:00407230 ; ---------------------------------------------------------------------------
.text:00407230
.text:00407230 loc_407230:                             ; CODE XREF: _d_unqualified_name+1FE↑j
.text:00407230                 mov     edx, 2
.text:00407235                 jmp     loc_407158
.text:0040723A ; ---------------------------------------------------------------------------
.text:0040723A
.text:0040723A loc_40723A:                             ; CODE XREF: _d_unqualified_name+2DE↑j
.text:0040723A                 mov     edx, 3
.text:0040723F                 jmp     short loc_4071C2
.text:00407241 ; ---------------------------------------------------------------------------
.text:00407241
.text:00407241 loc_407241:                             ; CODE XREF: _d_unqualified_name+26C↑j
.text:00407241                 mov     edx, 2
.text:00407246                 jmp     loc_4071C2
.text:0040724B ; ---------------------------------------------------------------------------
.text:0040724B
.text:0040724B loc_40724B:                             ; CODE XREF: _d_unqualified_name+2C6↑j
.text:0040724B                 mov     edx, 3
.text:00407250                 jmp     loc_407158
.text:00407250 _d_unqualified_name endp
.text:00407250
.text:00407250 ; ---------------------------------------------------------------------------
.text:00407255                 align 4
.text:00407258
.text:00407258 ; =============== S U B R O U T I N E =======================================
.text:00407258
.text:00407258
.text:00407258 _d_expression   proc near               ; CODE XREF: _d_template_args+80↑p
.text:00407258                                         ; _d_type+7C↑p ...
.text:00407258
.text:00407258 var_3C          = dword ptr -3Ch
.text:00407258 var_24          = dword ptr -24h
.text:00407258 var_20          = dword ptr -20h
.text:00407258
.text:00407258                 push    ebp
.text:00407259                 push    edi
.text:0040725A                 push    esi
.text:0040725B                 push    ebx
.text:0040725C                 sub     esp, 2Ch
.text:0040725F                 mov     ebx, eax
.text:00407261                 mov     edx, [eax+0Ch]
.text:00407264                 mov     al, [edx]
.text:00407266                 cmp     al, 4Ch ; 'L'
.text:00407268                 jz      loc_4074B8
.text:0040726E                 cmp     al, 54h ; 'T'
.text:00407270                 jz      loc_4074C8
.text:00407276                 cmp     al, 73h ; 's'
.text:00407278                 jz      loc_407344
.text:0040727E                 cmp     al, 66h ; 'f'
.text:00407280                 jz      short loc_4072FC
.text:00407282                 lea     ecx, [eax-30h]
.text:00407285                 cmp     cl, 9
.text:00407288                 ja      short loc_4072B4
.text:0040728A
.text:0040728A loc_40728A:                             ; CODE XREF: _d_expression+258↓j
.text:0040728A                 mov     eax, ebx
.text:0040728C                 call    _d_unqualified_name
.text:00407291                 mov     esi, eax
.text:00407293                 test    eax, eax
.text:00407295                 jz      loc_407335
.text:0040729B                 mov     eax, [ebx+0Ch]
.text:0040729E                 cmp     byte ptr [eax], 49h ; 'I'
.text:004072A1                 jz      loc_407558
.text:004072A7
.text:004072A7 loc_4072A7:                             ; CODE XREF: _d_expression+A2↓j
.text:004072A7                                         ; _d_expression+11F↓j ...
.text:004072A7                 mov     eax, esi
.text:004072A9                 add     esp, 2Ch
.text:004072AC                 pop     ebx
.text:004072AD                 pop     esi
.text:004072AE                 pop     edi
.text:004072AF                 pop     ebp
.text:004072B0                 retn
.text:004072B0 ; ---------------------------------------------------------------------------
.text:004072B1                 align 4
.text:004072B4
.text:004072B4 loc_4072B4:                             ; CODE XREF: _d_expression+30↑j
.text:004072B4                 cmp     al, 6Fh ; 'o'
.text:004072B6                 jz      loc_4074A0
.text:004072BC                 cmp     al, 69h ; 'i'
.text:004072BE                 jz      loc_407577
.text:004072C4                 cmp     al, 74h ; 't'
.text:004072C6                 jnz     short loc_407302
.text:004072C8                 cmp     byte ptr [edx+1], 6Ch ; 'l'
.text:004072CC                 jnz     short loc_407302
.text:004072CE                 mov     eax, ebx
.text:004072D0                 call    _d_type
.text:004072D5                 mov     esi, eax
.text:004072D7
.text:004072D7 loc_4072D7:                             ; CODE XREF: _d_expression+32B↓j
.text:004072D7                 add     dword ptr [ebx+0Ch], 2
.text:004072DB                 mov     edx, 45h ; 'E'
.text:004072E0                 mov     eax, ebx
.text:004072E2                 call    _d_exprlist
.text:004072E7                 mov     [esp+3Ch+var_3C], eax
.text:004072EA                 mov     ecx, esi
.text:004072EC                 mov     edx, 2Ch ; ','
.text:004072F1                 mov     eax, ebx
.text:004072F3                 call    _d_make_comp
.text:004072F8                 mov     esi, eax
.text:004072FA                 jmp     short loc_4072A7
.text:004072FC ; ---------------------------------------------------------------------------
.text:004072FC
.text:004072FC loc_4072FC:                             ; CODE XREF: _d_expression+28↑j
.text:004072FC                 cmp     byte ptr [edx+1], 70h ; 'p'
.text:00407300                 jz      short loc_40737C
.text:00407302
.text:00407302 loc_407302:                             ; CODE XREF: _d_expression+6E↑j
.text:00407302                                         ; _d_expression+74↑j ...
.text:00407302                 mov     eax, ebx
.text:00407304                 call    _d_operator_name
.text:00407309                 mov     ebp, eax
.text:0040730B                 test    eax, eax
.text:0040730D                 jz      short loc_407335
.text:0040730F                 mov     eax, [eax]
.text:00407311                 cmp     eax, 2Dh ; '-'
.text:00407314                 jz      loc_4074D8
.text:0040731A                 cmp     eax, 2Eh ; '.'
.text:0040731D                 jz      loc_4073C0
.text:00407323                 cmp     eax, 2Fh ; '/'
.text:00407326                 jz      loc_407514
.text:0040732C                 cmp     eax, 2Dh ; '-'
.text:0040732F                 jz      loc_4075D4
.text:00407335
.text:00407335 loc_407335:                             ; CODE XREF: _d_expression+3D↑j
.text:00407335                                         ; _d_expression+B5↑j ...
.text:00407335                 xor     esi, esi
.text:00407337                 mov     eax, esi
.text:00407339                 add     esp, 2Ch
.text:0040733C                 pop     ebx
.text:0040733D                 pop     esi
.text:0040733E                 pop     edi
.text:0040733F                 pop     ebp
.text:00407340                 retn
.text:00407340 ; ---------------------------------------------------------------------------
.text:00407341                 align 4
.text:00407344
.text:00407344 loc_407344:                             ; CODE XREF: _d_expression+20↑j
.text:00407344                 mov     al, [edx+1]
.text:00407347                 cmp     al, 72h ; 'r'
.text:00407349                 jz      loc_407588
.text:0040734F                 cmp     al, 70h ; 'p'
.text:00407351                 jnz     short loc_407302
.text:00407353                 add     edx, 2
.text:00407356                 mov     [ebx+0Ch], edx
.text:00407359                 mov     eax, ebx
.text:0040735B                 call    _d_expression
.text:00407360                 mov     [esp+3Ch+var_3C], 0
.text:00407367                 mov     ecx, eax
.text:00407369                 mov     edx, 45h ; 'E'
.text:0040736E                 mov     eax, ebx
.text:00407370                 call    _d_make_comp
.text:00407375                 mov     esi, eax
.text:00407377                 jmp     loc_4072A7
.text:0040737C ; ---------------------------------------------------------------------------
.text:0040737C
.text:0040737C loc_40737C:                             ; CODE XREF: _d_expression+A8↑j
.text:0040737C                 lea     eax, [edx+2]
.text:0040737F                 mov     [ebx+0Ch], eax
.text:00407382                 cmp     byte ptr [edx+2], 54h ; 'T'
.text:00407386                 jz      loc_4075C4
.text:0040738C                 mov     eax, ebx
.text:0040738E                 call    _d_compact_number
.text:00407393                 inc     eax
.text:00407394                 jz      short loc_407335
.text:00407396
.text:00407396 loc_407396:                             ; CODE XREF: _d_expression+374↓j
.text:00407396                 mov     edx, [ebx+14h]
.text:00407399                 cmp     edx, [ebx+18h]
.text:0040739C                 jge     short loc_407335
.text:0040739E                 lea     esi, [edx+edx*2]
.text:004073A1                 mov     ecx, [ebx+10h]
.text:004073A4                 lea     esi, [ecx+esi*4]
.text:004073A7                 inc     edx
.text:004073A8                 mov     [ebx+14h], edx
.text:004073AB                 test    esi, esi
.text:004073AD                 jz      short loc_407335
.text:004073AF                 mov     dword ptr [esi], 6
.text:004073B5                 mov     [esi+4], eax
.text:004073B8                 jmp     loc_4072A7
.text:004073B8 ; ---------------------------------------------------------------------------
.text:004073BD                 align 10h
.text:004073C0
.text:004073C0 loc_4073C0:                             ; CODE XREF: _d_expression+C5↑j
.text:004073C0                 mov     edx, [ebp+4]
.text:004073C3                 mov     [esp+3Ch+var_24], 0
.text:004073CB
.text:004073CB loc_4073CB:                             ; CODE XREF: _d_expression+2B7↓j
.text:004073CB                 cmp     edx, 1
.text:004073CE                 jz      loc_407762
.text:004073D4                 jle     loc_407688
.text:004073DA                 cmp     edx, 2
.text:004073DD                 jz      loc_4075FC
.text:004073E3                 cmp     edx, 3
.text:004073E6                 jnz     loc_407335
.text:004073EC                 mov     edi, offset unk_414AEB
.text:004073F1                 mov     ecx, 3
.text:004073F6                 mov     esi, [esp+3Ch+var_24]
.text:004073FA                 repe cmpsb
.text:004073FC                 jz      loc_4076CB
.text:00407402                 mov     eax, [esp+3Ch+var_24]
.text:00407406                 cmp     byte ptr [eax], 6Eh ; 'n'
.text:00407409                 jnz     loc_407335
.text:0040740F                 mov     al, [eax+1]
.text:00407412                 cmp     al, 77h ; 'w'
.text:00407414                 jz      short loc_40741E
.text:00407416                 cmp     al, 61h ; 'a'
.text:00407418                 jnz     loc_407335
.text:0040741E
.text:0040741E loc_40741E:                             ; CODE XREF: _d_expression+1BC↑j
.text:0040741E                 mov     edx, 5Fh ; '_'
.text:00407423                 mov     eax, ebx
.text:00407425                 call    _d_exprlist
.text:0040742A                 mov     esi, eax
.text:0040742C                 mov     eax, ebx
.text:0040742E                 call    _d_type
.text:00407433                 mov     edi, eax
.text:00407435                 mov     eax, [ebx+0Ch]
.text:00407438                 mov     dl, [eax]
.text:0040743A                 cmp     dl, 45h ; 'E'
.text:0040743D                 jz      loc_407717
.text:00407443                 cmp     dl, 70h ; 'p'
.text:00407446                 jz      loc_407741
.text:0040744C                 cmp     dl, 69h ; 'i'
.text:0040744F                 jnz     loc_407335
.text:00407455                 cmp     byte ptr [eax+1], 6Ch ; 'l'
.text:00407459                 jnz     loc_407335
.text:0040745F                 mov     eax, ebx
.text:00407461                 call    _d_expression
.text:00407466
.text:00407466 loc_407466:                             ; CODE XREF: _d_expression+48C↓j
.text:00407466                                         ; _d_expression+4C5↓j ...
.text:00407466                 mov     [esp+3Ch+var_3C], eax
.text:00407469                 mov     ecx, edi
.text:0040746B                 mov     edx, 36h ; '6'
.text:00407470                 mov     eax, ebx
.text:00407472                 call    _d_make_comp
.text:00407477                 mov     [esp+3Ch+var_3C], eax
.text:0040747A                 mov     ecx, esi
.text:0040747C                 mov     edx, 35h ; '5'
.text:00407481                 mov     eax, ebx
.text:00407483                 call    _d_make_comp
.text:00407488                 mov     [esp+3Ch+var_3C], eax
.text:0040748B                 mov     ecx, ebp
.text:0040748D                 mov     edx, 34h ; '4'
.text:00407492                 mov     eax, ebx
.text:00407494                 call    _d_make_comp
.text:00407499                 mov     esi, eax
.text:0040749B                 jmp     loc_4072A7
.text:004074A0 ; ---------------------------------------------------------------------------
.text:004074A0
.text:004074A0 loc_4074A0:                             ; CODE XREF: _d_expression+5E↑j
.text:004074A0                 cmp     byte ptr [edx+1], 6Eh ; 'n'
.text:004074A4                 jnz     loc_407302
.text:004074AA                 add     edx, 2
.text:004074AD                 mov     [ebx+0Ch], edx
.text:004074B0                 jmp     loc_40728A
.text:004074B0 ; ---------------------------------------------------------------------------
.text:004074B5                 align 4
.text:004074B8
.text:004074B8 loc_4074B8:                             ; CODE XREF: _d_expression+10↑j
.text:004074B8                 mov     eax, ebx
.text:004074BA                 add     esp, 2Ch
.text:004074BD                 pop     ebx
.text:004074BE                 pop     esi
.text:004074BF                 pop     edi
.text:004074C0                 pop     ebp
.text:004074C1                 jmp     _d_expr_primary
.text:004074C1 ; ---------------------------------------------------------------------------
.text:004074C6                 align 4
.text:004074C8
.text:004074C8 loc_4074C8:                             ; CODE XREF: _d_expression+18↑j
.text:004074C8                 mov     eax, ebx
.text:004074CA                 add     esp, 2Ch
.text:004074CD                 pop     ebx
.text:004074CE                 pop     esi
.text:004074CF                 pop     edi
.text:004074D0                 pop     ebp
.text:004074D1                 jmp     _d_template_param
.text:004074D1 ; ---------------------------------------------------------------------------
.text:004074D6                 align 4
.text:004074D8
.text:004074D8 loc_4074D8:                             ; CODE XREF: _d_expression+BC↑j
.text:004074D8                 mov     edx, [ebp+4]
.text:004074DB                 mov     ecx, [edx]
.text:004074DD                 mov     [esp+3Ch+var_24], ecx
.text:004074E1                 mov     ecx, [edx+8]
.text:004074E4                 sub     ecx, 2
.text:004074E7                 add     [ebx+30h], ecx
.text:004074EA                 mov     edi, offset unk_414ADF
.text:004074EF                 mov     ecx, 3
.text:004074F4                 mov     esi, [esp+3Ch+var_24]
.text:004074F8                 repe cmpsb
.text:004074FA                 setnbe  cl
.text:004074FD                 setb    byte ptr [esp+3Ch+var_20]
.text:00407502                 cmp     cl, byte ptr [esp+3Ch+var_20]
.text:00407506                 jz      loc_4076AC
.text:0040750C
.text:0040750C loc_40750C:                             ; CODE XREF: _d_expression+387↓j
.text:0040750C                 mov     edx, [edx+0Ch]
.text:0040750F                 jmp     loc_4073CB
.text:00407514 ; ---------------------------------------------------------------------------
.text:00407514
.text:00407514 loc_407514:                             ; CODE XREF: _d_expression+CE↑j
.text:00407514                 xor     esi, esi
.text:00407516
.text:00407516 loc_407516:                             ; CODE XREF: _d_expression+52C↓j
.text:00407516                 mov     eax, [ebx+0Ch]
.text:00407519                 cmp     byte ptr [eax], 5Fh ; '_'
.text:0040751C                 jz      loc_4075E4
.text:00407522
.text:00407522 loc_407522:                             ; CODE XREF: _d_expression+526↓j
.text:00407522                 mov     eax, ebx
.text:00407524                 call    _d_expression
.text:00407529
.text:00407529 loc_407529:                             ; CODE XREF: _d_expression+39C↓j
.text:00407529                 mov     [esp+3Ch+var_3C], eax
.text:0040752C                 test    esi, esi
.text:0040752E                 jz      short loc_407541
.text:00407530                 mov     ecx, eax
.text:00407532                 mov     edx, 33h ; '3'
.text:00407537                 mov     eax, ebx
.text:00407539                 call    _d_make_comp
.text:0040753E                 mov     [esp+3Ch+var_3C], eax
.text:00407541
.text:00407541 loc_407541:                             ; CODE XREF: _d_expression+2D6↑j
.text:00407541                                         ; _d_expression+45E↓j
.text:00407541                 mov     ecx, ebp
.text:00407543                 mov     edx, 31h ; '1'
.text:00407548                 mov     eax, ebx
.text:0040754A                 call    _d_make_comp
.text:0040754F                 mov     esi, eax
.text:00407551                 jmp     loc_4072A7
.text:00407551 ; ---------------------------------------------------------------------------
.text:00407556                 align 4
.text:00407558
.text:00407558 loc_407558:                             ; CODE XREF: _d_expression+49↑j
.text:00407558                 mov     eax, ebx
.text:0040755A                 call    _d_template_args
.text:0040755F                 mov     [esp+3Ch+var_3C], eax
.text:00407562                 mov     ecx, esi
.text:00407564                 mov     edx, 4
.text:00407569                 mov     eax, ebx
.text:0040756B                 call    _d_make_comp
.text:00407570                 mov     esi, eax
.text:00407572                 jmp     loc_4072A7
.text:00407577 ; ---------------------------------------------------------------------------
.text:00407577
.text:00407577 loc_407577:                             ; CODE XREF: _d_expression+66↑j
.text:00407577                 cmp     byte ptr [edx+1], 6Ch ; 'l'
.text:0040757B                 jnz     loc_407302
.text:00407581                 xor     esi, esi
.text:00407583                 jmp     loc_4072D7
.text:00407588 ; ---------------------------------------------------------------------------
.text:00407588
.text:00407588 loc_407588:                             ; CODE XREF: _d_expression+F1↑j
.text:00407588                 add     edx, 2
.text:0040758B                 mov     [ebx+0Ch], edx
.text:0040758E                 mov     eax, ebx
.text:00407590                 call    _d_type
.text:00407595                 mov     esi, eax
.text:00407597                 mov     eax, ebx
.text:00407599                 call    _d_unqualified_name
.text:0040759E                 mov     edi, eax
.text:004075A0                 mov     edx, [ebx+0Ch]
.text:004075A3                 cmp     byte ptr [edx], 49h ; 'I'
.text:004075A6                 jz      loc_4076E9
.text:004075AC                 mov     [esp+3Ch+var_3C], eax
.text:004075AF
.text:004075AF loc_4075AF:                             ; CODE XREF: _d_expression+4AC↓j
.text:004075AF                 mov     ecx, esi
.text:004075B1                 mov     edx, 1
.text:004075B6                 mov     eax, ebx
.text:004075B8                 call    _d_make_comp
.text:004075BD                 mov     esi, eax
.text:004075BF                 jmp     loc_4072A7
.text:004075C4 ; ---------------------------------------------------------------------------
.text:004075C4
.text:004075C4 loc_4075C4:                             ; CODE XREF: _d_expression+12E↑j
.text:004075C4                 add     edx, 3
.text:004075C7                 mov     [ebx+0Ch], edx
.text:004075CA                 xor     eax, eax
.text:004075CC                 jmp     loc_407396
.text:004075CC ; ---------------------------------------------------------------------------
.text:004075D1                 align 4
.text:004075D4
.text:004075D4 loc_4075D4:                             ; CODE XREF: _d_expression+D7↑j
.text:004075D4                 mov     edx, [ebp+4]
.text:004075D7                 mov     [esp+3Ch+var_24], 0
.text:004075DF                 jmp     loc_40750C
.text:004075E4 ; ---------------------------------------------------------------------------
.text:004075E4
.text:004075E4 loc_4075E4:                             ; CODE XREF: _d_expression+2C4↑j
.text:004075E4                 inc     eax
.text:004075E5                 mov     [ebx+0Ch], eax
.text:004075E8                 mov     edx, 45h ; 'E'
.text:004075ED                 mov     eax, ebx
.text:004075EF                 call    _d_exprlist
.text:004075F4                 jmp     loc_407529
.text:004075F4 ; ---------------------------------------------------------------------------
.text:004075F9                 align 4
.text:004075FC
.text:004075FC loc_4075FC:                             ; CODE XREF: _d_expression+185↑j
.text:004075FC                 mov     eax, ebx
.text:004075FE                 call    _d_expression
.text:00407603                 mov     [esp+3Ch+var_20], eax
.text:00407607                 mov     edi, offset unk_414AE2
.text:0040760C                 mov     ecx, 3
.text:00407611                 mov     esi, [esp+3Ch+var_24]
.text:00407615                 repe cmpsb
.text:00407617                 jz      loc_4076BB
.text:0040761D                 mov     edi, offset unk_414AE5
.text:00407622                 mov     ecx, 3
.text:00407627                 mov     esi, [esp+3Ch+var_24]
.text:0040762B                 repe cmpsb
.text:0040762D                 jz      short loc_407645
.text:0040762F                 mov     edi, offset unk_414AE8
.text:00407634                 mov     ecx, 3
.text:00407639                 mov     esi, [esp+3Ch+var_24]
.text:0040763D                 repe cmpsb
.text:0040763F                 jnz     loc_407709
.text:00407645
.text:00407645 loc_407645:                             ; CODE XREF: _d_expression+3D5↑j
.text:00407645                 mov     eax, ebx
.text:00407647                 call    _d_unqualified_name
.text:0040764C                 mov     esi, eax
.text:0040764E                 mov     eax, [ebx+0Ch]
.text:00407651                 cmp     byte ptr [eax], 49h ; 'I'
.text:00407654                 jz      loc_407722
.text:0040765A
.text:0040765A loc_40765A:                             ; CODE XREF: _d_expression+471↓j
.text:0040765A                                         ; _d_expression+4BA↓j ...
.text:0040765A                 mov     [esp+3Ch+var_3C], esi
.text:0040765D                 mov     ecx, [esp+3Ch+var_20]
.text:00407661                 mov     edx, 33h ; '3'
.text:00407666                 mov     eax, ebx
.text:00407668                 call    _d_make_comp
.text:0040766D                 mov     [esp+3Ch+var_3C], eax
.text:00407670                 mov     ecx, ebp
.text:00407672                 mov     edx, 32h ; '2'
.text:00407677                 mov     eax, ebx
.text:00407679                 call    _d_make_comp
.text:0040767E                 mov     esi, eax
.text:00407680                 jmp     loc_4072A7
.text:00407680 ; ---------------------------------------------------------------------------
.text:00407685                 align 4
.text:00407688
.text:00407688 loc_407688:                             ; CODE XREF: _d_expression+17C↑j
.text:00407688                 test    edx, edx
.text:0040768A                 jnz     loc_407335
.text:00407690                 mov     [esp+3Ch+var_3C], 0
.text:00407697                 mov     ecx, ebp
.text:00407699                 mov     edx, 30h ; '0'
.text:0040769E                 mov     eax, ebx
.text:004076A0                 call    _d_make_comp
.text:004076A5                 mov     esi, eax
.text:004076A7                 jmp     loc_4072A7
.text:004076AC ; ---------------------------------------------------------------------------
.text:004076AC
.text:004076AC loc_4076AC:                             ; CODE XREF: _d_expression+2AE↑j
.text:004076AC                 mov     eax, ebx
.text:004076AE                 call    _d_type
.text:004076B3                 mov     [esp+3Ch+var_3C], eax
.text:004076B6                 jmp     loc_407541
.text:004076BB ; ---------------------------------------------------------------------------
.text:004076BB
.text:004076BB loc_4076BB:                             ; CODE XREF: _d_expression+3BF↑j
.text:004076BB                 mov     edx, 45h ; 'E'
.text:004076C0                 mov     eax, ebx
.text:004076C2                 call    _d_exprlist
.text:004076C7                 mov     esi, eax
.text:004076C9                 jmp     short loc_40765A
.text:004076CB ; ---------------------------------------------------------------------------
.text:004076CB
.text:004076CB loc_4076CB:                             ; CODE XREF: _d_expression+1A4↑j
.text:004076CB                 mov     eax, ebx
.text:004076CD                 call    _d_expression
.text:004076D2                 mov     esi, eax
.text:004076D4                 mov     eax, ebx
.text:004076D6                 call    _d_expression
.text:004076DB                 mov     edi, eax
.text:004076DD                 mov     eax, ebx
.text:004076DF                 call    _d_expression
.text:004076E4                 jmp     loc_407466
.text:004076E9 ; ---------------------------------------------------------------------------
.text:004076E9
.text:004076E9 loc_4076E9:                             ; CODE XREF: _d_expression+34E↑j
.text:004076E9                 mov     eax, ebx
.text:004076EB                 call    _d_template_args
.text:004076F0                 mov     [esp+3Ch+var_3C], eax
.text:004076F3                 mov     ecx, edi
.text:004076F5                 mov     edx, 4
.text:004076FA                 mov     eax, ebx
.text:004076FC                 call    _d_make_comp
.text:00407701                 mov     [esp+3Ch+var_3C], eax
.text:00407704                 jmp     loc_4075AF
.text:00407709 ; ---------------------------------------------------------------------------
.text:00407709
.text:00407709 loc_407709:                             ; CODE XREF: _d_expression+3E7↑j
.text:00407709                 mov     eax, ebx
.text:0040770B                 call    _d_expression
.text:00407710                 mov     esi, eax
.text:00407712                 jmp     loc_40765A
.text:00407717 ; ---------------------------------------------------------------------------
.text:00407717
.text:00407717 loc_407717:                             ; CODE XREF: _d_expression+1E5↑j
.text:00407717                 inc     eax
.text:00407718                 mov     [ebx+0Ch], eax
.text:0040771B                 xor     eax, eax
.text:0040771D                 jmp     loc_407466
.text:00407722 ; ---------------------------------------------------------------------------
.text:00407722
.text:00407722 loc_407722:                             ; CODE XREF: _d_expression+3FC↑j
.text:00407722                 mov     eax, ebx
.text:00407724                 call    _d_template_args
.text:00407729                 mov     [esp+3Ch+var_3C], eax
.text:0040772C                 mov     ecx, esi
.text:0040772E                 mov     edx, 4
.text:00407733                 mov     eax, ebx
.text:00407735                 call    _d_make_comp
.text:0040773A                 mov     esi, eax
.text:0040773C                 jmp     loc_40765A
.text:00407741 ; ---------------------------------------------------------------------------
.text:00407741
.text:00407741 loc_407741:                             ; CODE XREF: _d_expression+1EE↑j
.text:00407741                 cmp     byte ptr [eax+1], 69h ; 'i'
.text:00407745                 jnz     loc_407335
.text:0040774B                 add     eax, 2
.text:0040774E                 mov     [ebx+0Ch], eax
.text:00407751                 mov     edx, 45h ; 'E'
.text:00407756                 mov     eax, ebx
.text:00407758                 call    _d_exprlist
.text:0040775D                 jmp     loc_407466
.text:00407762 ; ---------------------------------------------------------------------------
.text:00407762
.text:00407762 loc_407762:                             ; CODE XREF: _d_expression+176↑j
.text:00407762                 xor     esi, esi
.text:00407764                 cmp     [esp+3Ch+var_24], 0
.text:00407769                 jz      short loc_40777B
.text:0040776B                 mov     ecx, [esp+3Ch+var_24]
.text:0040776F                 mov     dl, [ecx]
.text:00407771                 cmp     dl, 70h ; 'p'
.text:00407774                 jz      short loc_40778C
.text:00407776                 cmp     dl, 6Dh ; 'm'
.text:00407779                 jz      short loc_40778C
.text:0040777B
.text:0040777B loc_40777B:                             ; CODE XREF: _d_expression+511↑j
.text:0040777B                                         ; _d_expression+53F↓j ...
.text:0040777B                 cmp     eax, 2Fh ; '/'
.text:0040777E                 jnz     loc_407522
.text:00407784                 jmp     loc_407516
.text:00407784 ; ---------------------------------------------------------------------------
.text:00407789                 align 4
.text:0040778C
.text:0040778C loc_40778C:                             ; CODE XREF: _d_expression+51C↑j
.text:0040778C                                         ; _d_expression+521↑j
.text:0040778C                 mov     ecx, [esp+3Ch+var_24]
.text:00407790                 cmp     dl, [ecx+1]
.text:00407793                 jz      short loc_407799
.text:00407795                 xor     esi, esi
.text:00407797                 jmp     short loc_40777B
.text:00407799 ; ---------------------------------------------------------------------------
.text:00407799
.text:00407799 loc_407799:                             ; CODE XREF: _d_expression+53B↑j
.text:00407799                 mov     edx, [ebx+0Ch]
.text:0040779C                 cmp     byte ptr [edx], 5Fh ; '_'
.text:0040779F                 jz      short loc_4077A8
.text:004077A1                 mov     esi, 1
.text:004077A6                 jmp     short loc_40777B
.text:004077A8 ; ---------------------------------------------------------------------------
.text:004077A8
.text:004077A8 loc_4077A8:                             ; CODE XREF: _d_expression+547↑j
.text:004077A8                 inc     edx
.text:004077A9                 mov     [ebx+0Ch], edx
.text:004077AC                 xor     esi, esi
.text:004077AE                 jmp     short loc_40777B
.text:004077AE _d_expression   endp
.text:004077AE
.text:004077B0
.text:004077B0 ; =============== S U B R O U T I N E =======================================
.text:004077B0
.text:004077B0
.text:004077B0 _d_exprlist     proc near               ; CODE XREF: _d_expression+8A↑p
.text:004077B0                                         ; _d_expression+1CD↑p ...
.text:004077B0
.text:004077B0 var_2C          = dword ptr -2Ch
.text:004077B0 var_10          = dword ptr -10h
.text:004077B0
.text:004077B0                 push    edi
.text:004077B1                 push    esi
.text:004077B2                 push    ebx
.text:004077B3                 sub     esp, 20h
.text:004077B6                 mov     ebx, eax
.text:004077B8                 mov     edi, edx
.text:004077BA                 mov     [esp+2Ch+var_10], 0
.text:004077C2                 mov     eax, [eax+0Ch]
.text:004077C5                 lea     esi, [esp+2Ch+var_10]
.text:004077C9                 cmp     [eax], dl
.text:004077CB                 jz      short loc_407820
.text:004077CD                 lea     esi, [esi+0]
.text:004077D0
.text:004077D0 loc_4077D0:                             ; CODE XREF: _d_exprlist+50↓j
.text:004077D0                 mov     eax, ebx
.text:004077D2                 call    _d_expression
.text:004077D7                 test    eax, eax
.text:004077D9                 jz      short loc_407814
.text:004077DB                 mov     [esp+2Ch+var_2C], 0
.text:004077E2                 mov     ecx, eax
.text:004077E4                 mov     edx, 2Ah ; '*'
.text:004077E9                 mov     eax, ebx
.text:004077EB                 call    _d_make_comp
.text:004077F0                 mov     [esi], eax
.text:004077F2                 test    eax, eax
.text:004077F4                 jz      short loc_407814
.text:004077F6                 lea     esi, [eax+8]
.text:004077F9                 mov     eax, [ebx+0Ch]
.text:004077FC                 mov     edx, edi
.text:004077FE                 cmp     [eax], dl
.text:00407800                 jnz     short loc_4077D0
.text:00407802                 inc     eax
.text:00407803                 mov     [ebx+0Ch], eax
.text:00407806                 mov     eax, [esp+2Ch+var_10]
.text:0040780A
.text:0040780A loc_40780A:                             ; CODE XREF: _d_exprlist+89↓j
.text:0040780A                 add     esp, 20h
.text:0040780D                 pop     ebx
.text:0040780E                 pop     esi
.text:0040780F                 pop     edi
.text:00407810                 retn
.text:00407810 ; ---------------------------------------------------------------------------
.text:00407811                 align 4
.text:00407814
.text:00407814 loc_407814:                             ; CODE XREF: _d_exprlist+29↑j
.text:00407814                                         ; _d_exprlist+44↑j
.text:00407814                 xor     eax, eax
.text:00407816                 add     esp, 20h
.text:00407819                 pop     ebx
.text:0040781A                 pop     esi
.text:0040781B                 pop     edi
.text:0040781C                 retn
.text:0040781C ; ---------------------------------------------------------------------------
.text:0040781D                 align 10h
.text:00407820
.text:00407820 loc_407820:                             ; CODE XREF: _d_exprlist+1B↑j
.text:00407820                 inc     eax
.text:00407821                 mov     [ebx+0Ch], eax
.text:00407824                 mov     [esp+2Ch+var_2C], 0
.text:0040782B                 xor     ecx, ecx
.text:0040782D                 mov     edx, 2Ah ; '*'
.text:00407832                 mov     eax, ebx
.text:00407834                 call    _d_make_comp
.text:00407839                 jmp     short loc_40780A
.text:00407839 _d_exprlist     endp
.text:00407839
.text:00407839 ; ---------------------------------------------------------------------------
.text:0040783B                 align 4
.text:0040783C
.text:0040783C ; =============== S U B R O U T I N E =======================================
.text:0040783C
.text:0040783C
.text:0040783C _d_bare_function_type proc near         ; CODE XREF: _d_type+1AF↑p
.text:0040783C                                         ; _d_encoding+6B↓p
.text:0040783C
.text:0040783C var_1C          = dword ptr -1Ch
.text:0040783C
.text:0040783C                 push    esi
.text:0040783D                 push    ebx
.text:0040783E                 sub     esp, 14h
.text:00407841                 mov     ebx, eax
.text:00407843                 mov     eax, [eax+0Ch]
.text:00407846                 cmp     byte ptr [eax], 4Ah ; 'J'
.text:00407849                 jz      short loc_407874
.text:0040784B                 test    edx, edx
.text:0040784D                 jnz     short loc_407878
.text:0040784F                 xor     esi, esi
.text:00407851
.text:00407851 loc_407851:                             ; CODE XREF: _d_bare_function_type+47↓j
.text:00407851                 mov     eax, ebx
.text:00407853                 call    _d_parmlist
.text:00407858                 test    eax, eax
.text:0040785A                 jz      short loc_407888
.text:0040785C                 mov     [esp+1Ch+var_1C], eax
.text:0040785F                 mov     ecx, esi
.text:00407861                 mov     edx, 25h ; '%'
.text:00407866                 mov     eax, ebx
.text:00407868                 call    _d_make_comp
.text:0040786D
.text:0040786D loc_40786D:                             ; CODE XREF: _d_bare_function_type+4E↓j
.text:0040786D                 add     esp, 14h
.text:00407870                 pop     ebx
.text:00407871                 pop     esi
.text:00407872                 retn
.text:00407872 ; ---------------------------------------------------------------------------
.text:00407873                 align 4
.text:00407874
.text:00407874 loc_407874:                             ; CODE XREF: _d_bare_function_type+D↑j
.text:00407874                 inc     eax
.text:00407875                 mov     [ebx+0Ch], eax
.text:00407878
.text:00407878 loc_407878:                             ; CODE XREF: _d_bare_function_type+11↑j
.text:00407878                 mov     eax, ebx
.text:0040787A                 call    _d_type
.text:0040787F                 mov     esi, eax
.text:00407881                 test    eax, eax
.text:00407883                 jnz     short loc_407851
.text:00407885                 lea     esi, [esi+0]
.text:00407888
.text:00407888 loc_407888:                             ; CODE XREF: _d_bare_function_type+1E↑j
.text:00407888                 xor     eax, eax
.text:0040788A                 jmp     short loc_40786D
.text:0040788A _d_bare_function_type endp
.text:0040788A
.text:0040788C
.text:0040788C ; =============== S U B R O U T I N E =======================================
.text:0040788C
.text:0040788C
.text:0040788C _d_encoding     proc near               ; CODE XREF: _d_expr_primary+3B↑p
.text:0040788C                                         ; _d_name+4C↑p ...
.text:0040788C
.text:0040788C var_3C          = dword ptr -3Ch
.text:0040788C var_24          = dword ptr -24h
.text:0040788C var_20          = dword ptr -20h
.text:0040788C
.text:0040788C                 push    ebp
.text:0040788D                 push    edi
.text:0040788E                 push    esi
.text:0040788F                 push    ebx
.text:00407890                 sub     esp, 2Ch
.text:00407893                 mov     ebx, eax
.text:00407895                 mov     eax, [eax+0Ch]
.text:00407898                 mov     cl, [eax]
.text:0040789A                 cmp     cl, 47h ; 'G'
.text:0040789D                 jz      loc_407950
.text:004078A3                 cmp     cl, 54h ; 'T'
.text:004078A6                 jz      loc_407950
.text:004078AC                 mov     eax, ebx
.text:004078AE                 mov     [esp+3Ch+var_24], edx
.text:004078B2                 call    _d_name
.text:004078B7                 mov     esi, eax
.text:004078B9                 test    eax, eax
.text:004078BB                 mov     edx, [esp+3Ch+var_24]
.text:004078BF                 jz      short loc_407910
.text:004078C1                 test    edx, edx
.text:004078C3                 jz      short loc_4078CB
.text:004078C5                 test    byte ptr [ebx+8], 1
.text:004078C9                 jz      short loc_40791F
.text:004078CB
.text:004078CB loc_4078CB:                             ; CODE XREF: _d_encoding+37↑j
.text:004078CB                 mov     eax, [ebx+0Ch]
.text:004078CE                 mov     al, [eax]
.text:004078D0                 test    al, al
.text:004078D2                 jz      short loc_407910
.text:004078D4                 cmp     al, 45h ; 'E'
.text:004078D6                 jz      short loc_407910
.text:004078D8                 mov     eax, esi
.text:004078DA
.text:004078DA loc_4078DA:                             ; CODE XREF: _d_encoding+115↓j
.text:004078DA                 mov     edx, [eax]
.text:004078DC                 cmp     edx, 4
.text:004078DF                 jz      loc_4079D4
.text:004078E5                 jb      short loc_4078F3 ; jumptable 004079EE cases 7,8,47
.text:004078E7                 sub     edx, 1Ah
.text:004078EA                 cmp     edx, 2
.text:004078ED                 jbe     loc_40799C
.text:004078F3
.text:004078F3 loc_4078F3:                             ; CODE XREF: _d_encoding+59↑j
.text:004078F3                                         ; _d_encoding+11B↓j ...
.text:004078F3                 xor     edx, edx        ; jumptable 004079EE cases 7,8,47
.text:004078F5
.text:004078F5 loc_4078F5:                             ; CODE XREF: _d_encoding+159↓j
.text:004078F5                 mov     eax, ebx
.text:004078F7                 call    _d_bare_function_type
.text:004078FC                 mov     [esp+3Ch+var_3C], eax
.text:004078FF                 mov     ecx, esi
.text:00407901                 mov     edx, 3
.text:00407906                 mov     eax, ebx
.text:00407908                 call    _d_make_comp
.text:0040790D                 mov     esi, eax
.text:0040790F                 nop
.text:00407910
.text:00407910 loc_407910:                             ; CODE XREF: _d_encoding+33↑j
.text:00407910                                         ; _d_encoding+46↑j ...
.text:00407910                 mov     eax, esi
.text:00407912                 add     esp, 2Ch
.text:00407915                 pop     ebx
.text:00407916                 pop     esi
.text:00407917                 pop     edi
.text:00407918                 pop     ebp
.text:00407919                 retn
.text:00407919 ; ---------------------------------------------------------------------------
.text:0040791A                 align 4
.text:0040791C
.text:0040791C loc_40791C:                             ; CODE XREF: _d_encoding+9B↓j
.text:0040791C                 mov     esi, [esi+4]
.text:0040791F
.text:0040791F loc_40791F:                             ; CODE XREF: _d_encoding+3D↑j
.text:0040791F                 mov     eax, [esi]
.text:00407921                 lea     edx, [eax-1Ah]
.text:00407924                 cmp     edx, 2
.text:00407927                 jbe     short loc_40791C
.text:00407929                 cmp     eax, 2
.text:0040792C                 jnz     short loc_407910
.text:0040792E                 mov     eax, [esi+8]
.text:00407931                 mov     edx, [eax]
.text:00407933                 sub     edx, 1Ah
.text:00407936                 cmp     edx, 2
.text:00407939                 ja      short loc_407949
.text:0040793B                 nop
.text:0040793C
.text:0040793C loc_40793C:                             ; CODE XREF: _d_encoding+BB↓j
.text:0040793C                 mov     eax, [eax+4]
.text:0040793F                 mov     edx, [eax]
.text:00407941                 sub     edx, 1Ah
.text:00407944                 cmp     edx, 2
.text:00407947                 jbe     short loc_40793C
.text:00407949
.text:00407949 loc_407949:                             ; CODE XREF: _d_encoding+AD↑j
.text:00407949                 mov     [esi+8], eax
.text:0040794C                 jmp     short loc_407910
.text:0040794C ; ---------------------------------------------------------------------------
.text:0040794E                 align 10h
.text:00407950
.text:00407950 loc_407950:                             ; CODE XREF: _d_encoding+11↑j
.text:00407950                                         ; _d_encoding+1A↑j
.text:00407950                 mov     ecx, [ebx+30h]
.text:00407953                 lea     edx, [ecx+14h]
.text:00407956                 mov     [ebx+30h], edx
.text:00407959                 mov     dl, [eax]
.text:0040795B                 cmp     dl, 54h ; 'T'
.text:0040795E                 jz      short loc_4079AC
.text:00407960                 cmp     dl, 47h ; 'G'
.text:00407963                 jz      short loc_407974
.text:00407965
.text:00407965 def_407992:                             ; CODE XREF: _d_encoding+F3↓j
.text:00407965                                         ; _d_encoding+101↓j ...
.text:00407965                 xor     esi, esi        ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:00407965                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:00407967
.text:00407967 loc_407967:                             ; CODE XREF: _d_encoding+556↓j
.text:00407967                 mov     eax, esi
.text:00407969                 add     esp, 2Ch
.text:0040796C                 pop     ebx
.text:0040796D                 pop     esi
.text:0040796E                 pop     edi
.text:0040796F                 pop     ebp
.text:00407970                 retn
.text:00407970 ; ---------------------------------------------------------------------------
.text:00407971                 align 4
.text:00407974
.text:00407974 loc_407974:                             ; CODE XREF: _d_encoding+D7↑j
.text:00407974                 lea     edx, [eax+1]
.text:00407977                 mov     [ebx+0Ch], edx
.text:0040797A                 mov     dl, [eax+1]
.text:0040797D                 test    dl, dl
.text:0040797F                 jz      short def_407992 ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:0040797F                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:00407981                 lea     ecx, [eax+2]
.text:00407984                 mov     [ebx+0Ch], ecx
.text:00407987                 sub     edx, 41h ; 'A'  ; switch 50 cases
.text:0040798A                 cmp     dl, 31h
.text:0040798D                 ja      short def_407992 ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:0040798D                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:0040798F                 movzx   edx, dl
.text:00407992                 jmp     ds:jpt_407992[edx*4] ; switch jump
.text:00407992 ; ---------------------------------------------------------------------------
.text:00407999                 align 4
.text:0040799C
.text:0040799C loc_40799C:                             ; CODE XREF: _d_encoding+61↑j
.text:0040799C                 mov     eax, [eax+4]
.text:0040799F                 test    eax, eax
.text:004079A1                 jnz     loc_4078DA
.text:004079A7                 jmp     loc_4078F3      ; jumptable 004079EE cases 7,8,47
.text:004079AC ; ---------------------------------------------------------------------------
.text:004079AC
.text:004079AC loc_4079AC:                             ; CODE XREF: _d_encoding+D2↑j
.text:004079AC                 lea     edx, [eax+1]
.text:004079AF                 mov     [ebx+0Ch], edx
.text:004079B2                 mov     dl, [eax+1]
.text:004079B5                 test    dl, dl
.text:004079B7                 jz      short def_407992 ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:004079B7                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:004079B9                 add     eax, 2
.text:004079BC                 mov     [ebx+0Ch], eax
.text:004079BF                 sub     edx, 43h ; 'C'  ; switch 52 cases
.text:004079C2                 cmp     dl, 33h
.text:004079C5                 ja      short def_407992 ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:004079C5                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:004079C7                 movzx   edx, dl
.text:004079CA                 jmp     ds:jpt_4079CA[edx*4] ; switch jump
.text:004079CA ; ---------------------------------------------------------------------------
.text:004079D1                 align 4
.text:004079D4
.text:004079D4 loc_4079D4:                             ; CODE XREF: _d_encoding+53↑j
.text:004079D4                 mov     eax, [eax+4]
.text:004079D7                 test    eax, eax
.text:004079D9                 jz      short def_4079EE ; jumptable 004079EE default case, cases 0,3-6,9-46
.text:004079DB
.text:004079DB loc_4079DB:                             ; CODE XREF: _d_encoding+171↓j
.text:004079DB                 cmp     dword ptr [eax], 2Fh ; switch 48 cases
.text:004079DE                 jbe     short loc_4079EC
.text:004079E0
.text:004079E0 def_4079EE:                             ; CODE XREF: _d_encoding+14D↑j
.text:004079E0                                         ; _d_encoding+162↓j ...
.text:004079E0                 mov     edx, 1          ; jumptable 004079EE default case, cases 0,3-6,9-46
.text:004079E5                 jmp     loc_4078F5
.text:004079E5 ; ---------------------------------------------------------------------------
.text:004079EA                 align 4
.text:004079EC
.text:004079EC loc_4079EC:                             ; CODE XREF: _d_encoding+152↑j
.text:004079EC                 mov     edx, [eax]
.text:004079EE                 jmp     ds:jpt_4079EE[edx*4] ; switch jump
.text:004079EE ; ---------------------------------------------------------------------------
.text:004079F5                 align 4
.text:004079F8
.text:004079F8 loc_4079F8:                             ; CODE XREF: _d_encoding+162↑j
.text:004079F8                                         ; DATA XREF: .rdata:jpt_4079EE↓o
.text:004079F8                 mov     eax, [eax+8]    ; jumptable 004079EE cases 1,2
.text:004079FB                 test    eax, eax
.text:004079FD                 jnz     short loc_4079DB
.text:004079FF                 jmp     short def_4079EE ; jumptable 004079EE default case, cases 0,3-6,9-46
.text:004079FF ; ---------------------------------------------------------------------------
.text:00407A01                 align 4
.text:00407A04
.text:00407A04 loc_407A04:                             ; CODE XREF: _d_encoding+106↑j
.text:00407A04                                         ; DATA XREF: .rdata:jpt_407992↓o
.text:00407A04                 lea     eax, [ebx+0Ch]  ; jumptable 00407992 case 114
.text:00407A07                 call    _d_number_isra_0
.text:00407A0C                 cmp     eax, 1
.text:00407A0F                 jle     def_407992      ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:00407A0F                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:00407A15                 mov     edi, [ebx+0Ch]
.text:00407A18                 mov     dl, [edi]
.text:00407A1A                 test    dl, dl
.text:00407A1C                 jz      def_407992      ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:00407A1C                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:00407A22                 inc     edi
.text:00407A23                 mov     [ebx+0Ch], edi
.text:00407A26                 cmp     dl, 5Fh ; '_'
.text:00407A29                 jnz     def_407992      ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:00407A29                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:00407A2F                 lea     ebp, [eax-1]
.text:00407A32                 mov     [esp+3Ch+var_20], 0
.text:00407A3A                 xchg    ax, ax
.text:00407A3C
.text:00407A3C loc_407A3C:                             ; CODE XREF: _d_encoding+21E↓j
.text:00407A3C                 mov     al, [edi]
.text:00407A3E                 test    al, al
.text:00407A40                 jz      def_407992      ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:00407A40                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:00407A46                 cmp     al, 24h ; '$'
.text:00407A48                 jz      loc_407D5C
.text:00407A4E                 xor     esi, esi
.text:00407A50
.text:00407A50 loc_407A50:                             ; CODE XREF: _d_encoding+1D2↓j
.text:00407A50                 mov     al, [edi+esi]
.text:00407A53                 test    al, al
.text:00407A55                 jz      short loc_407A60
.text:00407A57                 cmp     al, 24h ; '$'
.text:00407A59                 jz      short loc_407A60
.text:00407A5B                 inc     esi
.text:00407A5C                 cmp     esi, ebp
.text:00407A5E                 jl      short loc_407A50
.text:00407A60
.text:00407A60 loc_407A60:                             ; CODE XREF: _d_encoding+1C9↑j
.text:00407A60                                         ; _d_encoding+1CD↑j
.text:00407A60                 mov     ecx, esi
.text:00407A62                 mov     edx, edi
.text:00407A64                 mov     eax, ebx
.text:00407A66                 call    _d_make_name
.text:00407A6B                 mov     edi, [ebx+0Ch]
.text:00407A6E                 add     edi, esi
.text:00407A70                 mov     [ebx+0Ch], edi
.text:00407A73                 sub     ebp, esi
.text:00407A75                 test    eax, eax
.text:00407A77                 jz      def_407992      ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:00407A77                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:00407A7D
.text:00407A7D loc_407A7D:                             ; CODE XREF: _d_encoding+51A↓j
.text:00407A7D                 mov     ecx, [esp+3Ch+var_20]
.text:00407A81                 test    ecx, ecx
.text:00407A83                 jz      loc_407DAC
.text:00407A89                 mov     [esp+3Ch+var_3C], eax
.text:00407A8C                 mov     ecx, [esp+3Ch+var_20]
.text:00407A90                 mov     edx, 3Ah ; ':'
.text:00407A95                 mov     eax, ebx
.text:00407A97                 call    _d_make_comp
.text:00407A9C                 mov     [esp+3Ch+var_20], eax
.text:00407AA0                 test    eax, eax
.text:00407AA2                 jz      def_407992      ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:00407AA2                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:00407AA8
.text:00407AA8 loc_407AA8:                             ; CODE XREF: _d_encoding+524↓j
.text:00407AA8                 test    ebp, ebp
.text:00407AAA                 jg      short loc_407A3C
.text:00407AAC                 mov     [esp+3Ch+var_3C], 0
.text:00407AB3                 mov     ecx, [esp+3Ch+var_20]
.text:00407AB7                 mov     edx, 39h ; '9'
.text:00407ABC                 mov     eax, ebx
.text:00407ABE                 call    _d_make_comp
.text:00407AC3                 mov     esi, eax
.text:00407AC5                 jmp     loc_407910
.text:00407AC5 ; ---------------------------------------------------------------------------
.text:00407ACA                 align 4
.text:00407ACC
.text:00407ACC loc_407ACC:                             ; CODE XREF: _d_encoding+106↑j
.text:00407ACC                                         ; DATA XREF: .rdata:jpt_407992↓o
.text:00407ACC                 mov     eax, ebx        ; jumptable 00407992 case 86
.text:00407ACE                 call    _d_name
.text:00407AD3                 mov     [esp+3Ch+var_3C], 0
.text:00407ADA                 mov     ecx, eax
.text:00407ADC                 mov     edx, 13h
.text:00407AE1                 mov     eax, ebx
.text:00407AE3                 call    _d_make_comp
.text:00407AE8                 mov     esi, eax
.text:00407AEA                 jmp     loc_407910
.text:00407AEF ; ---------------------------------------------------------------------------
.text:00407AEF
.text:00407AEF loc_407AEF:                             ; CODE XREF: _d_encoding+106↑j
.text:00407AEF                                         ; DATA XREF: .rdata:jpt_407992↓o
.text:00407AEF                 mov     eax, ebx        ; jumptable 00407992 case 82
.text:00407AF1                 call    _d_name
.text:00407AF6                 mov     esi, eax
.text:00407AF8                 mov     eax, ebx
.text:00407AFA                 call    _d_number_component
.text:00407AFF                 mov     [esp+3Ch+var_3C], eax
.text:00407B02                 mov     ecx, esi
.text:00407B04                 mov     edx, 14h
.text:00407B09                 mov     eax, ebx
.text:00407B0B                 call    _d_make_comp
.text:00407B10                 mov     esi, eax
.text:00407B12                 jmp     loc_407910
.text:00407B17 ; ---------------------------------------------------------------------------
.text:00407B17
.text:00407B17 loc_407B17:                             ; CODE XREF: _d_encoding+106↑j
.text:00407B17                                         ; DATA XREF: .rdata:jpt_407992↓o
.text:00407B17                 xor     edx, edx        ; jumptable 00407992 case 65
.text:00407B19                 mov     eax, ebx
.text:00407B1B                 call    _d_encoding
.text:00407B20                 mov     [esp+3Ch+var_3C], 0
.text:00407B27                 mov     ecx, eax
.text:00407B29                 mov     edx, 15h
.text:00407B2E                 mov     eax, ebx
.text:00407B30                 call    _d_make_comp
.text:00407B35                 mov     esi, eax
.text:00407B37                 jmp     loc_407910
.text:00407B3C ; ---------------------------------------------------------------------------
.text:00407B3C
.text:00407B3C loc_407B3C:                             ; CODE XREF: _d_encoding+106↑j
.text:00407B3C                                         ; DATA XREF: .rdata:jpt_407992↓o
.text:00407B3C                 mov     dl, [eax+2]     ; jumptable 00407992 case 84
.text:00407B3F                 test    dl, dl
.text:00407B41                 jz      short loc_407B52
.text:00407B43                 add     eax, 3
.text:00407B46                 mov     [ebx+0Ch], eax
.text:00407B49                 cmp     dl, 6Eh ; 'n'
.text:00407B4C                 jz      loc_407DB5
.text:00407B52
.text:00407B52 loc_407B52:                             ; CODE XREF: _d_encoding+2B5↑j
.text:00407B52                 xor     edx, edx
.text:00407B54                 mov     eax, ebx
.text:00407B56                 call    _d_encoding
.text:00407B5B                 mov     [esp+3Ch+var_3C], 0
.text:00407B62                 mov     ecx, eax
.text:00407B64                 mov     edx, 43h ; 'C'
.text:00407B69                 mov     eax, ebx
.text:00407B6B                 call    _d_make_comp
.text:00407B70                 mov     esi, eax
.text:00407B72                 jmp     loc_407910
.text:00407B77 ; ---------------------------------------------------------------------------
.text:00407B77
.text:00407B77 loc_407B77:                             ; CODE XREF: _d_encoding+13E↑j
.text:00407B77                                         ; DATA XREF: .rdata:jpt_4079CA↓o
.text:00407B77                 mov     eax, ebx        ; jumptable 004079CA case 70
.text:00407B79                 call    _d_type
.text:00407B7E                 mov     [esp+3Ch+var_3C], 0
.text:00407B85                 mov     ecx, eax
.text:00407B87                 mov     edx, 0Eh
.text:00407B8C                 mov     eax, ebx
.text:00407B8E                 call    _d_make_comp
.text:00407B93                 mov     esi, eax
.text:00407B95                 jmp     loc_407910
.text:00407B9A ; ---------------------------------------------------------------------------
.text:00407B9A
.text:00407B9A loc_407B9A:                             ; CODE XREF: _d_encoding+13E↑j
.text:00407B9A                                         ; DATA XREF: .rdata:jpt_4079CA↓o
.text:00407B9A                 mov     eax, ebx        ; jumptable 004079CA case 67
.text:00407B9C                 call    _d_type
.text:00407BA1                 mov     esi, eax
.text:00407BA3                 lea     eax, [ebx+0Ch]
.text:00407BA6                 call    _d_number_isra_0
.text:00407BAB                 test    eax, eax
.text:00407BAD                 js      def_407992      ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:00407BAD                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:00407BB3                 mov     edx, [ebx+0Ch]
.text:00407BB6                 cmp     byte ptr [edx], 5Fh ; '_'
.text:00407BB9                 jnz     def_407992      ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:00407BB9                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:00407BBF                 inc     edx
.text:00407BC0                 mov     [ebx+0Ch], edx
.text:00407BC3                 mov     eax, ebx
.text:00407BC5                 call    _d_type
.text:00407BCA                 add     dword ptr [ebx+30h], 5
.text:00407BCE                 mov     [esp+3Ch+var_3C], esi
.text:00407BD1                 mov     ecx, eax
.text:00407BD3                 mov     edx, 0Bh
.text:00407BD8                 mov     eax, ebx
.text:00407BDA                 call    _d_make_comp
.text:00407BDF                 mov     esi, eax
.text:00407BE1                 jmp     loc_407910
.text:00407BE6 ; ---------------------------------------------------------------------------
.text:00407BE6
.text:00407BE6 loc_407BE6:                             ; CODE XREF: _d_encoding+13E↑j
.text:00407BE6                                         ; DATA XREF: .rdata:jpt_4079CA↓o
.text:00407BE6                 mov     edx, 76h ; 'v'  ; jumptable 004079CA case 118
.text:00407BEB                 mov     eax, ebx
.text:00407BED                 call    _d_call_offset
.text:00407BF2                 test    eax, eax
.text:00407BF4                 jz      def_407992      ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:00407BF4                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:00407BFA                 xor     edx, edx
.text:00407BFC                 mov     eax, ebx
.text:00407BFE                 call    _d_encoding
.text:00407C03                 mov     [esp+3Ch+var_3C], 0
.text:00407C0A                 mov     ecx, eax
.text:00407C0C                 mov     edx, 10h
.text:00407C11                 mov     eax, ebx
.text:00407C13                 call    _d_make_comp
.text:00407C18                 mov     esi, eax
.text:00407C1A                 jmp     loc_407910
.text:00407C1F ; ---------------------------------------------------------------------------
.text:00407C1F
.text:00407C1F loc_407C1F:                             ; CODE XREF: _d_encoding+13E↑j
.text:00407C1F                                         ; DATA XREF: .rdata:jpt_4079CA↓o
.text:00407C1F                 mov     edx, 68h ; 'h'  ; jumptable 004079CA case 104
.text:00407C24                 mov     eax, ebx
.text:00407C26                 call    _d_call_offset
.text:00407C2B                 test    eax, eax
.text:00407C2D                 jz      def_407992      ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:00407C2D                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:00407C33                 xor     edx, edx
.text:00407C35                 mov     eax, ebx
.text:00407C37                 call    _d_encoding
.text:00407C3C                 mov     [esp+3Ch+var_3C], 0
.text:00407C43                 mov     ecx, eax
.text:00407C45                 mov     edx, 0Fh
.text:00407C4A                 mov     eax, ebx
.text:00407C4C                 call    _d_make_comp
.text:00407C51                 mov     esi, eax
.text:00407C53                 jmp     loc_407910
.text:00407C58 ; ---------------------------------------------------------------------------
.text:00407C58
.text:00407C58 loc_407C58:                             ; CODE XREF: _d_encoding+13E↑j
.text:00407C58                                         ; DATA XREF: .rdata:jpt_4079CA↓o
.text:00407C58                 xor     edx, edx        ; jumptable 004079CA case 99
.text:00407C5A                 mov     eax, ebx
.text:00407C5C                 call    _d_call_offset
.text:00407C61                 test    eax, eax
.text:00407C63                 jz      def_407992      ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:00407C63                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:00407C69                 xor     edx, edx
.text:00407C6B                 mov     eax, ebx
.text:00407C6D                 call    _d_call_offset
.text:00407C72                 test    eax, eax
.text:00407C74                 jz      def_407992      ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:00407C74                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:00407C7A                 xor     edx, edx
.text:00407C7C                 mov     eax, ebx
.text:00407C7E                 call    _d_encoding
.text:00407C83                 mov     [esp+3Ch+var_3C], 0
.text:00407C8A                 mov     ecx, eax
.text:00407C8C                 mov     edx, 11h
.text:00407C91                 mov     eax, ebx
.text:00407C93                 call    _d_make_comp
.text:00407C98                 mov     esi, eax
.text:00407C9A                 jmp     loc_407910
.text:00407C9F ; ---------------------------------------------------------------------------
.text:00407C9F
.text:00407C9F loc_407C9F:                             ; CODE XREF: _d_encoding+13E↑j
.text:00407C9F                                         ; DATA XREF: .rdata:jpt_4079CA↓o
.text:00407C9F                 add     ecx, 0Fh        ; jumptable 004079CA case 86
.text:00407CA2                 mov     [ebx+30h], ecx
.text:00407CA5                 mov     eax, ebx
.text:00407CA7                 call    _d_type
.text:00407CAC                 mov     [esp+3Ch+var_3C], 0
.text:00407CB3                 mov     ecx, eax
.text:00407CB5                 mov     edx, 9
.text:00407CBA                 mov     eax, ebx
.text:00407CBC                 call    _d_make_comp
.text:00407CC1                 mov     esi, eax
.text:00407CC3                 jmp     loc_407910
.text:00407CC8 ; ---------------------------------------------------------------------------
.text:00407CC8
.text:00407CC8 loc_407CC8:                             ; CODE XREF: _d_encoding+13E↑j
.text:00407CC8                                         ; DATA XREF: .rdata:jpt_4079CA↓o
.text:00407CC8                 add     ecx, 0Ah        ; jumptable 004079CA case 84
.text:00407CCB                 mov     [ebx+30h], ecx
.text:00407CCE                 mov     eax, ebx
.text:00407CD0                 call    _d_type
.text:00407CD5                 mov     [esp+3Ch+var_3C], 0
.text:00407CDC                 mov     ecx, eax
.text:00407CDE                 mov     edx, 0Ah
.text:00407CE3                 mov     eax, ebx
.text:00407CE5                 call    _d_make_comp
.text:00407CEA                 mov     esi, eax
.text:00407CEC                 jmp     loc_407910
.text:00407CF1 ; ---------------------------------------------------------------------------
.text:00407CF1
.text:00407CF1 loc_407CF1:                             ; CODE XREF: _d_encoding+13E↑j
.text:00407CF1                                         ; DATA XREF: .rdata:jpt_4079CA↓o
.text:00407CF1                 mov     eax, ebx        ; jumptable 004079CA case 83
.text:00407CF3                 call    _d_type
.text:00407CF8                 mov     [esp+3Ch+var_3C], 0
.text:00407CFF                 mov     ecx, eax
.text:00407D01                 mov     edx, 0Dh
.text:00407D06                 mov     eax, ebx
.text:00407D08                 call    _d_make_comp
.text:00407D0D                 mov     esi, eax
.text:00407D0F                 jmp     loc_407910
.text:00407D14 ; ---------------------------------------------------------------------------
.text:00407D14
.text:00407D14 loc_407D14:                             ; CODE XREF: _d_encoding+13E↑j
.text:00407D14                                         ; DATA XREF: .rdata:jpt_4079CA↓o
.text:00407D14                 mov     eax, ebx        ; jumptable 004079CA case 74
.text:00407D16                 call    _d_type
.text:00407D1B                 mov     [esp+3Ch+var_3C], 0
.text:00407D22                 mov     ecx, eax
.text:00407D24                 mov     edx, 12h
.text:00407D29                 mov     eax, ebx
.text:00407D2B                 call    _d_make_comp
.text:00407D30                 mov     esi, eax
.text:00407D32                 jmp     loc_407910
.text:00407D37 ; ---------------------------------------------------------------------------
.text:00407D37
.text:00407D37 loc_407D37:                             ; CODE XREF: _d_encoding+13E↑j
.text:00407D37                                         ; DATA XREF: .rdata:jpt_4079CA↓o
.text:00407D37                 mov     eax, ebx        ; jumptable 004079CA case 73
.text:00407D39                 call    _d_type
.text:00407D3E                 mov     [esp+3Ch+var_3C], 0
.text:00407D45                 mov     ecx, eax
.text:00407D47                 mov     edx, 0Ch
.text:00407D4C                 mov     eax, ebx
.text:00407D4E                 call    _d_make_comp
.text:00407D53                 mov     esi, eax
.text:00407D55                 jmp     loc_407910
.text:00407D55 ; ---------------------------------------------------------------------------
.text:00407D5A                 align 4
.text:00407D5C
.text:00407D5C loc_407D5C:                             ; CODE XREF: _d_encoding+1BC↑j
.text:00407D5C                 mov     al, [edi+1]
.text:00407D5F                 cmp     al, 53h ; 'S'
.text:00407D61                 jz      loc_407DEE
.text:00407D67                 cmp     al, 5Fh ; '_'
.text:00407D69                 jz      short loc_407DE7
.text:00407D6B                 cmp     al, 24h ; '$'
.text:00407D6D                 jnz     def_407992      ; jumptable 00407992 default case, cases 66-81,83,85,87-113
.text:00407D6D                                         ; jumptable 004079CA default case, cases 68,69,71,72,75-82,85,87-98,100-103,105-117
.text:00407D73                 mov     ecx, 24h ; '$'
.text:00407D78
.text:00407D78 loc_407D78:                             ; CODE XREF: _d_encoding+560↓j
.text:00407D78                                         ; _d_encoding+567↓j
.text:00407D78                 mov     edx, [ebx+14h]
.text:00407D7B                 cmp     edx, [ebx+18h]
.text:00407D7E                 jge     short loc_407DDC
.text:00407D80                 lea     esi, [edx+edx*2]
.text:00407D83                 mov     eax, [ebx+10h]
.text:00407D86                 lea     eax, [eax+esi*4]
.text:00407D89                 inc     edx
.text:00407D8A                 mov     [ebx+14h], edx
.text:00407D8D                 test    eax, eax
.text:00407D8F                 jz      short loc_407DDC
.text:00407D91                 mov     dword ptr [eax], 3Bh ; ';'
.text:00407D97                 mov     [eax+4], ecx
.text:00407D9A                 mov     edi, [ebx+0Ch]
.text:00407D9D                 add     edi, 2
.text:00407DA0                 mov     [ebx+0Ch], edi
.text:00407DA3                 sub     ebp, 2
.text:00407DA6                 jmp     loc_407A7D
.text:00407DA6 ; ---------------------------------------------------------------------------
.text:00407DAB                 align 4
.text:00407DAC
.text:00407DAC loc_407DAC:                             ; CODE XREF: _d_encoding+1F7↑j
.text:00407DAC                 mov     [esp+3Ch+var_20], eax
.text:00407DB0                 jmp     loc_407AA8
.text:00407DB5 ; ---------------------------------------------------------------------------
.text:00407DB5
.text:00407DB5 loc_407DB5:                             ; CODE XREF: _d_encoding+2C0↑j
.text:00407DB5                 xor     edx, edx
.text:00407DB7                 mov     eax, ebx
.text:00407DB9                 call    _d_encoding
.text:00407DBE                 mov     [esp+3Ch+var_3C], 0
.text:00407DC5                 mov     ecx, eax
.text:00407DC7                 mov     edx, 44h ; 'D'
.text:00407DCC                 mov     eax, ebx
.text:00407DCE                 call    _d_make_comp
.text:00407DD3                 mov     esi, eax
.text:00407DD5                 jmp     loc_407910
.text:00407DD5 ; ---------------------------------------------------------------------------
.text:00407DDA                 align 4
.text:00407DDC
.text:00407DDC loc_407DDC:                             ; CODE XREF: _d_encoding+4F2↑j
.text:00407DDC                                         ; _d_encoding+503↑j
.text:00407DDC                 add     dword ptr [ebx+0Ch], 2
.text:00407DE0                 xor     esi, esi
.text:00407DE2                 jmp     loc_407967
.text:00407DE7 ; ---------------------------------------------------------------------------
.text:00407DE7
.text:00407DE7 loc_407DE7:                             ; CODE XREF: _d_encoding+4DD↑j
.text:00407DE7                 mov     ecx, 2Eh ; '.'
.text:00407DEC                 jmp     short loc_407D78
.text:00407DEE ; ---------------------------------------------------------------------------
.text:00407DEE
.text:00407DEE loc_407DEE:                             ; CODE XREF: _d_encoding+4D5↑j
.text:00407DEE                 mov     ecx, 2Fh ; '/'
.text:00407DF3                 jmp     short loc_407D78
.text:00407DF3 _d_encoding     endp
.text:00407DF3
.text:00407DF3 ; ---------------------------------------------------------------------------
.text:00407DF5                 align 4
.text:00407DF8
.text:00407DF8 ; =============== S U B R O U T I N E =======================================
.text:00407DF8
.text:00407DF8
.text:00407DF8 _d_growable_string_callback_adapter proc near
.text:00407DF8                                         ; DATA XREF: ___cxa_demangle+4F↓o
.text:00407DF8
.text:00407DF8 var_2C          = dword ptr -2Ch
.text:00407DF8 var_28          = dword ptr -28h
.text:00407DF8 arg_0           = dword ptr  4
.text:00407DF8 arg_4           = dword ptr  8
.text:00407DF8 arg_8           = dword ptr  0Ch
.text:00407DF8
.text:00407DF8                 push    ebp
.text:00407DF9                 push    edi
.text:00407DFA                 push    esi
.text:00407DFB                 push    ebx
.text:00407DFC                 sub     esp, 1Ch
.text:00407DFF                 mov     ebp, [esp+2Ch+arg_4]
.text:00407E03                 mov     ebx, [esp+2Ch+arg_8]
.text:00407E07                 mov     eax, [ebx+4]
.text:00407E0A                 lea     eax, [ebp+eax+1]
.text:00407E0E                 mov     esi, [ebx+8]
.text:00407E11                 cmp     eax, esi
.text:00407E13                 ja      short loc_407E48
.text:00407E15
.text:00407E15 loc_407E15:                             ; CODE XREF: _d_growable_string_callback_adapter+85↓j
.text:00407E15                 mov     esi, [ebx+0Ch]
.text:00407E18                 test    esi, esi
.text:00407E1A                 jz      short loc_407E24
.text:00407E1C
.text:00407E1C loc_407E1C:                             ; CODE XREF: _d_growable_string_callback_adapter+55↓j
.text:00407E1C                                         ; _d_growable_string_callback_adapter+AC↓j
.text:00407E1C                 add     esp, 1Ch
.text:00407E1F                 pop     ebx
.text:00407E20                 pop     esi
.text:00407E21                 pop     edi
.text:00407E22                 pop     ebp
.text:00407E23                 retn
.text:00407E24 ; ---------------------------------------------------------------------------
.text:00407E24
.text:00407E24 loc_407E24:                             ; CODE XREF: _d_growable_string_callback_adapter+22↑j
.text:00407E24                 mov     eax, [ebx]
.text:00407E26                 add     eax, [ebx+4]
.text:00407E29                 mov     edi, eax
.text:00407E2B                 mov     esi, [esp+2Ch+arg_0]
.text:00407E2F                 mov     ecx, ebp
.text:00407E31                 rep movsb
.text:00407E33                 mov     eax, [ebx]
.text:00407E35                 add     eax, ebp
.text:00407E37                 add     eax, [ebx+4]
.text:00407E3A                 mov     byte ptr [eax], 0
.text:00407E3D                 add     [ebx+4], ebp
.text:00407E40                 add     esp, 1Ch
.text:00407E43                 pop     ebx
.text:00407E44                 pop     esi
.text:00407E45                 pop     edi
.text:00407E46                 pop     ebp
.text:00407E47                 retn
.text:00407E48 ; ---------------------------------------------------------------------------
.text:00407E48
.text:00407E48 loc_407E48:                             ; CODE XREF: _d_growable_string_callback_adapter+1B↑j
.text:00407E48                 mov     edi, [ebx+0Ch]
.text:00407E4B                 test    edi, edi
.text:00407E4D                 jnz     short loc_407E1C
.text:00407E4F                 test    esi, esi
.text:00407E51                 jnz     short loc_407E60
.text:00407E53                 mov     esi, 2
.text:00407E58                 cmp     eax, 2
.text:00407E5B                 jbe     short loc_407E66
.text:00407E5D                 lea     esi, [esi+0]
.text:00407E60
.text:00407E60 loc_407E60:                             ; CODE XREF: _d_growable_string_callback_adapter+59↑j
.text:00407E60                                         ; _d_growable_string_callback_adapter+6C↓j
.text:00407E60                 shl     esi, 1
.text:00407E62                 cmp     eax, esi
.text:00407E64                 ja      short loc_407E60
.text:00407E66
.text:00407E66 loc_407E66:                             ; CODE XREF: _d_growable_string_callback_adapter+63↑j
.text:00407E66                 mov     [esp+2Ch+var_28], esi ; size_t
.text:00407E6A                 mov     eax, [ebx]
.text:00407E6C                 mov     [esp+2Ch+var_2C], eax ; void *
.text:00407E6F                 call    _realloc
.text:00407E74                 test    eax, eax
.text:00407E76                 jz      short loc_407E7F
.text:00407E78                 mov     [ebx], eax
.text:00407E7A                 mov     [ebx+8], esi
.text:00407E7D                 jmp     short loc_407E15
.text:00407E7F ; ---------------------------------------------------------------------------
.text:00407E7F
.text:00407E7F loc_407E7F:                             ; CODE XREF: _d_growable_string_callback_adapter+7E↑j
.text:00407E7F                 mov     eax, [ebx]
.text:00407E81                 mov     [esp+2Ch+var_2C], eax ; void *
.text:00407E84                 call    _free
.text:00407E89                 mov     dword ptr [ebx], 0
.text:00407E8F                 mov     dword ptr [ebx+4], 0
.text:00407E96                 mov     dword ptr [ebx+8], 0
.text:00407E9D                 mov     dword ptr [ebx+0Ch], 1
.text:00407EA4                 jmp     loc_407E1C
.text:00407EA4 _d_growable_string_callback_adapter endp
.text:00407EA4
.text:00407EA4 ; ---------------------------------------------------------------------------
.text:00407EA9                 align 4
.text:00407EAC
.text:00407EAC ; =============== S U B R O U T I N E =======================================
.text:00407EAC
.text:00407EAC
.text:00407EAC _d_print_comp   proc near               ; CODE XREF: _d_print_comp+9C↓p
.text:00407EAC                                         ; _d_print_comp+12D↓p ...
.text:00407EAC
.text:00407EAC var_AC          = dword ptr -0ACh
.text:00407EAC var_A8          = dword ptr -0A8h
.text:00407EAC var_A4          = dword ptr -0A4h
.text:00407EAC var_94          = dword ptr -94h
.text:00407EAC var_90          = dword ptr -90h
.text:00407EAC var_8C          = dword ptr -8Ch
.text:00407EAC var_88          = dword ptr -88h
.text:00407EAC var_84          = dword ptr -84h
.text:00407EAC var_80          = dword ptr -80h
.text:00407EAC var_7C          = dword ptr -7Ch
.text:00407EAC var_78          = dword ptr -78h
.text:00407EAC var_74          = dword ptr -74h
.text:00407EAC var_70          = dword ptr -70h
.text:00407EAC var_64          = dword ptr -64h
.text:00407EAC var_60          = dword ptr -60h
.text:00407EAC var_5C          = byte ptr -5Ch
.text:00407EAC var_58          = dword ptr -58h
.text:00407EAC var_54          = dword ptr -54h
.text:00407EAC var_50          = dword ptr -50h
.text:00407EAC var_4C          = byte ptr -4Ch
.text:00407EAC var_1C          = byte ptr -1Ch
.text:00407EAC
.text:00407EAC                 push    ebp
.text:00407EAD                 push    edi
.text:00407EAE                 push    esi
.text:00407EAF                 push    ebx
.text:00407EB0                 sub     esp, 9Ch
.text:00407EB6                 mov     ebp, eax
.text:00407EB8                 mov     [esp+0ACh+var_8C], edx
.text:00407EBC                 mov     [esp+0ACh+var_90], ecx
.text:00407EC0                 test    ecx, ecx
.text:00407EC2                 jz      short loc_407EF8
.text:00407EC4                 mov     eax, [eax+118h]
.text:00407ECA                 test    eax, eax
.text:00407ECC                 jnz     short def_40A961 ; jumptable 0040A961 default case
.text:00407ECE                 mov     ecx, [esp+0ACh+var_90]
.text:00407ED2                 mov     eax, [ecx]
.text:00407ED4                 cmp     eax, 46h        ; switch 71 cases
.text:00407ED7                 jbe     short loc_407EF0
.text:00407ED9
.text:00407ED9 def_407EF0:                             ; CODE XREF: _d_print_comp:loc_407EF0↓j
.text:00407ED9                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00407ED9                 mov     dword ptr [ebp+118h], 1 ; jumptable 00407EF0 default case, case 65
.text:00407EE3                 nop
.text:00407EE4
.text:00407EE4 def_40A961:                             ; CODE XREF: _d_print_comp+20↑j
.text:00407EE4                                         ; _d_print_comp+C2↓j ...
.text:00407EE4                 add     esp, 9Ch        ; jumptable 0040A961 default case
.text:00407EEA                 pop     ebx
.text:00407EEB                 pop     esi
.text:00407EEC                 pop     edi
.text:00407EED                 pop     ebp
.text:00407EEE                 retn
.text:00407EEE ; ---------------------------------------------------------------------------
.text:00407EEF                 align 10h
.text:00407EF0
.text:00407EF0 loc_407EF0:                             ; CODE XREF: _d_print_comp+2B↑j
.text:00407EF0                 jmp     ds:jpt_407EF0[eax*4] ; switch jump
.text:00407EF0 ; ---------------------------------------------------------------------------
.text:00407EF7                 align 4
.text:00407EF8
.text:00407EF8 loc_407EF8:                             ; CODE XREF: _d_print_comp+16↑j
.text:00407EF8                 mov     dword ptr [eax+118h], 1
.text:00407F02                 add     esp, 9Ch
.text:00407F08                 pop     ebx
.text:00407F09                 pop     esi
.text:00407F0A                 pop     edi
.text:00407F0B                 pop     ebp
.text:00407F0C                 retn
.text:00407F0D ; ---------------------------------------------------------------------------
.text:00407F0D
.text:00407F0D loc_407F0D:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00407F0D                                         ; _d_print_comp+12E4↓j
.text:00407F0D                                         ; DATA XREF: ...
.text:00407F0D                 mov     esi, [ebp+114h] ; jumptable 00407EF0 cases 26-30,33,34
.text:00407F13
.text:00407F13 loc_407F13:                             ; CODE XREF: _d_print_comp+A7B↓j
.text:00407F13                                         ; _d_print_comp+A8C↓j ...
.text:00407F13                 mov     dword ptr [esp+0ACh+var_5C], esi
.text:00407F17                 lea     eax, [esp+0ACh+var_5C]
.text:00407F1B                 mov     [ebp+114h], eax
.text:00407F21                 mov     ecx, [esp+0ACh+var_90]
.text:00407F25                 mov     [esp+0ACh+var_58], ecx
.text:00407F29                 mov     [esp+0ACh+var_54], 0
.text:00407F31                 mov     eax, [ebp+110h]
.text:00407F37                 mov     [esp+0ACh+var_50], eax
.text:00407F3B
.text:00407F3B loc_407F3B:                             ; CODE XREF: _d_print_comp+1323↓j
.text:00407F3B                 mov     eax, [esp+0ACh+var_90]
.text:00407F3F                 mov     ecx, [eax+4]
.text:00407F42
.text:00407F42 loc_407F42:                             ; CODE XREF: _d_print_comp+131D↓j
.text:00407F42                 mov     edx, [esp+0ACh+var_8C]
.text:00407F46                 mov     eax, ebp
.text:00407F48                 call    _d_print_comp
.text:00407F4D                 mov     edx, [esp+0ACh+var_54]
.text:00407F51                 test    edx, edx
.text:00407F53                 jnz     short loc_407F64
.text:00407F55                 mov     ecx, [esp+0ACh+var_90]
.text:00407F59                 mov     edx, [esp+0ACh+var_8C]
.text:00407F5D                 mov     eax, ebp
.text:00407F5F                 call    _d_print_mod
.text:00407F64
.text:00407F64 loc_407F64:                             ; CODE XREF: _d_print_comp+A7↑j
.text:00407F64                 mov     eax, dword ptr [esp+0ACh+var_5C]
.text:00407F68                 mov     [ebp+114h], eax
.text:00407F6E                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00407F73 ; ---------------------------------------------------------------------------
.text:00407F73
.text:00407F73 loc_407F73:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00407F73                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00407F73                 mov     ecx, [esp+0ACh+var_90] ; jumptable 00407EF0 case 69
.text:00407F77                 mov     edx, [ecx+4]
.text:00407F7A                 mov     eax, ebp
.text:00407F7C                 call    _d_find_pack
.text:00407F81                 xor     edi, edi
.text:00407F83                 test    eax, eax
.text:00407F85                 jz      loc_40AE05
.text:00407F8B                 nop
.text:00407F8C
.text:00407F8C loc_407F8C:                             ; CODE XREF: _d_print_comp+FA↓j
.text:00407F8C                 cmp     dword ptr [eax], 2Bh ; '+'
.text:00407F8F                 jnz     loc_409EA2
.text:00407F95                 mov     edx, [eax+4]
.text:00407F98                 test    edx, edx
.text:00407F9A                 jz      loc_409EA2
.text:00407FA0                 inc     edi
.text:00407FA1                 mov     eax, [eax+8]
.text:00407FA4                 test    eax, eax
.text:00407FA6                 jnz     short loc_407F8C
.text:00407FA8                 mov     ecx, [esp+0ACh+var_90]
.text:00407FAC                 mov     ecx, [ecx+4]
.text:00407FAF                 mov     [esp+0ACh+var_90], ecx
.text:00407FB3
.text:00407FB3 loc_407FB3:                             ; CODE XREF: _d_print_comp+2003↓j
.text:00407FB3                 lea     esi, [edi-1]
.text:00407FB6                 mov     [esp+0ACh+var_88], esi
.text:00407FBA                 xor     ebx, ebx
.text:00407FBC                 jmp     short loc_407FC9
.text:00407FBC ; ---------------------------------------------------------------------------
.text:00407FBE                 align 10h
.text:00407FC0
.text:00407FC0 loc_407FC0:                             ; CODE XREF: _d_print_comp+136↓j
.text:00407FC0                                         ; _d_print_comp+19B4↓j
.text:00407FC0                 inc     ebx
.text:00407FC1                 cmp     ebx, edi
.text:00407FC3                 jz      def_40A961      ; jumptable 0040A961 default case
.text:00407FC9
.text:00407FC9 loc_407FC9:                             ; CODE XREF: _d_print_comp+110↑j
.text:00407FC9                 mov     [ebp+11Ch], ebx
.text:00407FCF                 mov     ecx, [esp+0ACh+var_90]
.text:00407FD3                 mov     edx, [esp+0ACh+var_8C]
.text:00407FD7                 mov     eax, ebp
.text:00407FD9                 call    _d_print_comp
.text:00407FDE                 cmp     [esp+0ACh+var_88], ebx
.text:00407FE2                 jle     short loc_407FC0
.text:00407FE4                 mov     eax, [ebp+100h]
.text:00407FEA                 mov     esi, offset asc_414E95 ; ", "
.text:00407FEF                 mov     [esp+0ACh+var_84], ebx
.text:00407FF3                 jmp     short loc_408018
.text:00407FF3 ; ---------------------------------------------------------------------------
.text:00407FF5                 align 4
.text:00407FF8
.text:00407FF8 loc_407FF8:                             ; CODE XREF: _d_print_comp+173↓j
.text:00407FF8                 mov     ecx, eax
.text:00407FFA                 inc     eax
.text:00407FFB
.text:00407FFB loc_407FFB:                             ; CODE XREF: _d_print_comp+1A4↓j
.text:00407FFB                 mov     [ebp+ecx+0], bl
.text:00407FFF                 mov     [ebp+100h], eax
.text:00408005                 mov     [ebp+104h], bl
.text:0040800B                 inc     esi
.text:0040800C                 cmp     esi, (offset asc_414E95+2) ; ""
.text:00408012                 jz      loc_40985C
.text:00408018
.text:00408018 loc_408018:                             ; CODE XREF: _d_print_comp+147↑j
.text:00408018                 mov     bl, [esi]
.text:0040801A                 cmp     eax, 0FFh
.text:0040801F                 jnz     short loc_407FF8
.text:00408021                 mov     byte ptr [ebp+0FFh], 0
.text:00408028                 mov     eax, [ebp+10Ch]
.text:0040802E                 mov     [esp+0ACh+var_A4], eax
.text:00408032                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040803A                 mov     [esp+0ACh+var_AC], ebp
.text:0040803D                 call    dword ptr [ebp+108h]
.text:00408043                 inc     dword ptr [ebp+120h]
.text:00408049                 mov     eax, 1
.text:0040804E                 xor     ecx, ecx
.text:00408050                 jmp     short loc_407FFB
.text:00408052 ; ---------------------------------------------------------------------------
.text:00408052
.text:00408052 loc_408052:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408052                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408052                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 67
.text:00408058                 mov     ebx, offset aTransactionClo ; "transaction clone for "
.text:0040805D                 jmp     short loc_408080
.text:0040805D ; ---------------------------------------------------------------------------
.text:0040805F                 align 10h
.text:00408060
.text:00408060 loc_408060:                             ; CODE XREF: _d_print_comp+1DB↓j
.text:00408060                 mov     ecx, eax
.text:00408062                 inc     eax
.text:00408063
.text:00408063 loc_408063:                             ; CODE XREF: _d_print_comp+214↓j
.text:00408063                 mov     [ebp+ecx+0], dl
.text:00408067                 mov     [ebp+100h], eax
.text:0040806D                 mov     [ebp+104h], dl
.text:00408073                 inc     ebx
.text:00408074                 cmp     ebx, 414E65h
.text:0040807A                 jz      loc_409CF0
.text:00408080
.text:00408080 loc_408080:                             ; CODE XREF: _d_print_comp+1B1↑j
.text:00408080                 mov     dl, [ebx]
.text:00408082                 cmp     eax, 0FFh
.text:00408087                 jnz     short loc_408060
.text:00408089                 mov     byte ptr [ebp+0FFh], 0
.text:00408090                 mov     eax, [ebp+10Ch]
.text:00408096                 mov     [esp+0ACh+var_A4], eax
.text:0040809A                 mov     [esp+0ACh+var_A8], 0FFh
.text:004080A2                 mov     [esp+0ACh+var_AC], ebp
.text:004080A5                 mov     byte ptr [esp+0ACh+var_94], dl
.text:004080A9                 call    dword ptr [ebp+108h]
.text:004080AF                 inc     dword ptr [ebp+120h]
.text:004080B5                 mov     eax, 1
.text:004080BA                 xor     ecx, ecx
.text:004080BC                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:004080C0                 jmp     short loc_408063
.text:004080C2 ; ---------------------------------------------------------------------------
.text:004080C2
.text:004080C2 loc_4080C2:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:004080C2                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:004080C2                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 68
.text:004080C8                 mov     ebx, offset aNonTransaction ; "non-transaction clone for "
.text:004080CD                 jmp     short loc_4080F0
.text:004080CD ; ---------------------------------------------------------------------------
.text:004080CF                 align 10h
.text:004080D0
.text:004080D0 loc_4080D0:                             ; CODE XREF: _d_print_comp+24B↓j
.text:004080D0                 mov     ecx, eax
.text:004080D2                 inc     eax
.text:004080D3
.text:004080D3 loc_4080D3:                             ; CODE XREF: _d_print_comp+284↓j
.text:004080D3                 mov     [ebp+ecx+0], dl
.text:004080D7                 mov     [ebp+100h], eax
.text:004080DD                 mov     [ebp+104h], dl
.text:004080E3                 inc     ebx
.text:004080E4                 cmp     ebx, 414E80h
.text:004080EA                 jz      loc_409D1E
.text:004080F0
.text:004080F0 loc_4080F0:                             ; CODE XREF: _d_print_comp+221↑j
.text:004080F0                 mov     dl, [ebx]
.text:004080F2                 cmp     eax, 0FFh
.text:004080F7                 jnz     short loc_4080D0
.text:004080F9                 mov     byte ptr [ebp+0FFh], 0
.text:00408100                 mov     eax, [ebp+10Ch]
.text:00408106                 mov     [esp+0ACh+var_A4], eax
.text:0040810A                 mov     [esp+0ACh+var_A8], 0FFh
.text:00408112                 mov     [esp+0ACh+var_AC], ebp
.text:00408115                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00408119                 call    dword ptr [ebp+108h]
.text:0040811F                 inc     dword ptr [ebp+120h]
.text:00408125                 mov     eax, 1
.text:0040812A                 xor     ecx, ecx
.text:0040812C                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00408130                 jmp     short loc_4080D3
.text:00408132 ; ---------------------------------------------------------------------------
.text:00408132
.text:00408132 loc_408132:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408132                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408132                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 62
.text:00408138                 mov     ebx, offset aGlobalConstruc ; "global constructors keyed to "
.text:0040813D                 jmp     short loc_408160
.text:0040813D ; ---------------------------------------------------------------------------
.text:0040813F                 align 10h
.text:00408140
.text:00408140 loc_408140:                             ; CODE XREF: _d_print_comp+2BB↓j
.text:00408140                 mov     ecx, eax
.text:00408142                 inc     eax
.text:00408143
.text:00408143 loc_408143:                             ; CODE XREF: _d_print_comp+2F4↓j
.text:00408143                 mov     [ebp+ecx+0], dl
.text:00408147                 mov     [ebp+100h], eax
.text:0040814D                 mov     [ebp+104h], dl
.text:00408153                 inc     ebx
.text:00408154                 cmp     ebx, 414F1Dh
.text:0040815A                 jz      loc_409D07
.text:00408160
.text:00408160 loc_408160:                             ; CODE XREF: _d_print_comp+291↑j
.text:00408160                 mov     dl, [ebx]
.text:00408162                 cmp     eax, 0FFh
.text:00408167                 jnz     short loc_408140
.text:00408169                 mov     byte ptr [ebp+0FFh], 0
.text:00408170                 mov     eax, [ebp+10Ch]
.text:00408176                 mov     [esp+0ACh+var_A4], eax
.text:0040817A                 mov     [esp+0ACh+var_A8], 0FFh
.text:00408182                 mov     [esp+0ACh+var_AC], ebp
.text:00408185                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00408189                 call    dword ptr [ebp+108h]
.text:0040818F                 inc     dword ptr [ebp+120h]
.text:00408195                 mov     eax, 1
.text:0040819A                 xor     ecx, ecx
.text:0040819C                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:004081A0                 jmp     short loc_408143
.text:004081A2 ; ---------------------------------------------------------------------------
.text:004081A2
.text:004081A2 loc_4081A2:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:004081A2                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:004081A2                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 63
.text:004081A8                 mov     ebx, offset aGlobalDestruct ; "global destructors keyed to "
.text:004081AD                 jmp     short loc_4081D0
.text:004081AD ; ---------------------------------------------------------------------------
.text:004081AF                 align 10h
.text:004081B0
.text:004081B0 loc_4081B0:                             ; CODE XREF: _d_print_comp+32B↓j
.text:004081B0                 mov     ecx, eax
.text:004081B2                 inc     eax
.text:004081B3
.text:004081B3 loc_4081B3:                             ; CODE XREF: _d_print_comp+364↓j
.text:004081B3                 mov     [ebp+ecx+0], dl
.text:004081B7                 mov     [ebp+100h], eax
.text:004081BD                 mov     [ebp+104h], dl
.text:004081C3                 inc     ebx
.text:004081C4                 cmp     ebx, 414F3Ah
.text:004081CA                 jz      loc_409D35
.text:004081D0
.text:004081D0 loc_4081D0:                             ; CODE XREF: _d_print_comp+301↑j
.text:004081D0                 mov     dl, [ebx]
.text:004081D2                 cmp     eax, 0FFh
.text:004081D7                 jnz     short loc_4081B0
.text:004081D9                 mov     byte ptr [ebp+0FFh], 0
.text:004081E0                 mov     eax, [ebp+10Ch]
.text:004081E6                 mov     [esp+0ACh+var_A4], eax
.text:004081EA                 mov     [esp+0ACh+var_A8], 0FFh
.text:004081F2                 mov     [esp+0ACh+var_AC], ebp
.text:004081F5                 mov     byte ptr [esp+0ACh+var_94], dl
.text:004081F9                 call    dword ptr [ebp+108h]
.text:004081FF                 inc     dword ptr [ebp+120h]
.text:00408205                 mov     eax, 1
.text:0040820A                 xor     ecx, ecx
.text:0040820C                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00408210                 jmp     short loc_4081B3
.text:00408212 ; ---------------------------------------------------------------------------
.text:00408212
.text:00408212 loc_408212:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408212                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408212                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 64
.text:00408218                 mov     ebx, offset aLambda ; "{lambda("
.text:0040821D                 jmp     short loc_408240
.text:0040821D ; ---------------------------------------------------------------------------
.text:0040821F                 align 10h
.text:00408220
.text:00408220 loc_408220:                             ; CODE XREF: _d_print_comp+39B↓j
.text:00408220                 mov     ecx, eax
.text:00408222                 inc     eax
.text:00408223
.text:00408223 loc_408223:                             ; CODE XREF: _d_print_comp+3D4↓j
.text:00408223                 mov     [ebp+ecx+0], dl
.text:00408227                 mov     [ebp+100h], eax
.text:0040822D                 mov     [ebp+104h], dl
.text:00408233                 inc     ebx
.text:00408234                 cmp     ebx, 414F43h
.text:0040823A                 jz      loc_409B03
.text:00408240
.text:00408240 loc_408240:                             ; CODE XREF: _d_print_comp+371↑j
.text:00408240                 mov     dl, [ebx]
.text:00408242                 cmp     eax, 0FFh
.text:00408247                 jnz     short loc_408220
.text:00408249                 mov     byte ptr [ebp+0FFh], 0
.text:00408250                 mov     eax, [ebp+10Ch]
.text:00408256                 mov     [esp+0ACh+var_A4], eax
.text:0040825A                 mov     [esp+0ACh+var_A8], 0FFh
.text:00408262                 mov     [esp+0ACh+var_AC], ebp
.text:00408265                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00408269                 call    dword ptr [ebp+108h]
.text:0040826F                 inc     dword ptr [ebp+120h]
.text:00408275                 mov     eax, 1
.text:0040827A                 xor     ecx, ecx
.text:0040827C                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00408280                 jmp     short loc_408223
.text:00408282 ; ---------------------------------------------------------------------------
.text:00408282
.text:00408282 loc_408282:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408282                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408282                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 66
.text:00408288                 mov     ebx, offset aUnnamedType ; "{unnamed type#"
.text:0040828D                 jmp     short loc_4082B0
.text:0040828D ; ---------------------------------------------------------------------------
.text:0040828F                 align 10h
.text:00408290
.text:00408290 loc_408290:                             ; CODE XREF: _d_print_comp+40B↓j
.text:00408290                 mov     ecx, eax
.text:00408292                 inc     eax
.text:00408293
.text:00408293 loc_408293:                             ; CODE XREF: _d_print_comp+444↓j
.text:00408293                 mov     [ebp+ecx+0], dl
.text:00408297                 mov     [ebp+100h], eax
.text:0040829D                 mov     [ebp+104h], dl
.text:004082A3                 inc     ebx
.text:004082A4                 cmp     ebx, 414F55h
.text:004082AA                 jz      loc_409A4F
.text:004082B0
.text:004082B0 loc_4082B0:                             ; CODE XREF: _d_print_comp+3E1↑j
.text:004082B0                 mov     dl, [ebx]
.text:004082B2                 cmp     eax, 0FFh
.text:004082B7                 jnz     short loc_408290
.text:004082B9                 mov     byte ptr [ebp+0FFh], 0
.text:004082C0                 mov     eax, [ebp+10Ch]
.text:004082C6                 mov     [esp+0ACh+var_A4], eax
.text:004082CA                 mov     [esp+0ACh+var_A8], 0FFh
.text:004082D2                 mov     [esp+0ACh+var_AC], ebp
.text:004082D5                 mov     byte ptr [esp+0ACh+var_94], dl
.text:004082D9                 call    dword ptr [ebp+108h]
.text:004082DF                 inc     dword ptr [ebp+120h]
.text:004082E5                 mov     eax, 1
.text:004082EA                 xor     ecx, ecx
.text:004082EC                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:004082F0                 jmp     short loc_408293
.text:004082F2 ; ---------------------------------------------------------------------------
.text:004082F2
.text:004082F2 loc_4082F2:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:004082F2                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:004082F2                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 9
.text:004082F8                 mov     ebx, offset aVtableFor ; "vtable for "
.text:004082FD                 jmp     short loc_408320
.text:004082FD ; ---------------------------------------------------------------------------
.text:004082FF                 align 10h
.text:00408300
.text:00408300 loc_408300:                             ; CODE XREF: _d_print_comp+47B↓j
.text:00408300                 mov     ecx, eax
.text:00408302                 inc     eax
.text:00408303
.text:00408303 loc_408303:                             ; CODE XREF: _d_print_comp+4B4↓j
.text:00408303                 mov     [ebp+ecx+0], dl
.text:00408307                 mov     [ebp+100h], eax
.text:0040830D                 mov     [ebp+104h], dl
.text:00408313                 inc     ebx
.text:00408314                 cmp     ebx, 414D60h
.text:0040831A                 jz      loc_409A38
.text:00408320
.text:00408320 loc_408320:                             ; CODE XREF: _d_print_comp+451↑j
.text:00408320                 mov     dl, [ebx]
.text:00408322                 cmp     eax, 0FFh
.text:00408327                 jnz     short loc_408300
.text:00408329                 mov     byte ptr [ebp+0FFh], 0
.text:00408330                 mov     eax, [ebp+10Ch]
.text:00408336                 mov     [esp+0ACh+var_A4], eax
.text:0040833A                 mov     [esp+0ACh+var_A8], 0FFh
.text:00408342                 mov     [esp+0ACh+var_AC], ebp
.text:00408345                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00408349                 call    dword ptr [ebp+108h]
.text:0040834F                 inc     dword ptr [ebp+120h]
.text:00408355                 mov     eax, 1
.text:0040835A                 xor     ecx, ecx
.text:0040835C                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00408360                 jmp     short loc_408303
.text:00408362 ; ---------------------------------------------------------------------------
.text:00408362
.text:00408362 loc_408362:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408362                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408362                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 10
.text:00408368                 mov     ebx, offset aVttFor ; "VTT for "
.text:0040836D                 jmp     short loc_408390
.text:0040836D ; ---------------------------------------------------------------------------
.text:0040836F                 align 10h
.text:00408370
.text:00408370 loc_408370:                             ; CODE XREF: _d_print_comp+4EB↓j
.text:00408370                 mov     ecx, eax
.text:00408372                 inc     eax
.text:00408373
.text:00408373 loc_408373:                             ; CODE XREF: _d_print_comp+524↓j
.text:00408373                 mov     [ebp+ecx+0], dl
.text:00408377                 mov     [ebp+100h], eax
.text:0040837D                 mov     [ebp+104h], dl
.text:00408383                 inc     ebx
.text:00408384                 cmp     ebx, 414D69h
.text:0040838A                 jz      loc_409A21
.text:00408390
.text:00408390 loc_408390:                             ; CODE XREF: _d_print_comp+4C1↑j
.text:00408390                 mov     dl, [ebx]
.text:00408392                 cmp     eax, 0FFh
.text:00408397                 jnz     short loc_408370
.text:00408399                 mov     byte ptr [ebp+0FFh], 0
.text:004083A0                 mov     eax, [ebp+10Ch]
.text:004083A6                 mov     [esp+0ACh+var_A4], eax
.text:004083AA                 mov     [esp+0ACh+var_A8], 0FFh
.text:004083B2                 mov     [esp+0ACh+var_AC], ebp
.text:004083B5                 mov     byte ptr [esp+0ACh+var_94], dl
.text:004083B9                 call    dword ptr [ebp+108h]
.text:004083BF                 inc     dword ptr [ebp+120h]
.text:004083C5                 mov     eax, 1
.text:004083CA                 xor     ecx, ecx
.text:004083CC                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:004083D0                 jmp     short loc_408373
.text:004083D2 ; ---------------------------------------------------------------------------
.text:004083D2
.text:004083D2 loc_4083D2:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:004083D2                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:004083D2                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 11
.text:004083D8                 mov     ebx, offset aConstructionVt ; "construction vtable for "
.text:004083DD                 jmp     short loc_408400
.text:004083DD ; ---------------------------------------------------------------------------
.text:004083DF                 align 10h
.text:004083E0
.text:004083E0 loc_4083E0:                             ; CODE XREF: _d_print_comp+55B↓j
.text:004083E0                 mov     ecx, eax
.text:004083E2                 inc     eax
.text:004083E3
.text:004083E3 loc_4083E3:                             ; CODE XREF: _d_print_comp+594↓j
.text:004083E3                 mov     [ebp+ecx+0], dl
.text:004083E7                 mov     [ebp+100h], eax
.text:004083ED                 mov     [ebp+104h], dl
.text:004083F3                 inc     ebx
.text:004083F4                 cmp     ebx, 414D82h
.text:004083FA                 jz      loc_40998B
.text:00408400
.text:00408400 loc_408400:                             ; CODE XREF: _d_print_comp+531↑j
.text:00408400                 mov     dl, [ebx]
.text:00408402                 cmp     eax, 0FFh
.text:00408407                 jnz     short loc_4083E0
.text:00408409                 mov     byte ptr [ebp+0FFh], 0
.text:00408410                 mov     eax, [ebp+10Ch]
.text:00408416                 mov     [esp+0ACh+var_A4], eax
.text:0040841A                 mov     [esp+0ACh+var_A8], 0FFh
.text:00408422                 mov     [esp+0ACh+var_AC], ebp
.text:00408425                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00408429                 call    dword ptr [ebp+108h]
.text:0040842F                 inc     dword ptr [ebp+120h]
.text:00408435                 mov     eax, 1
.text:0040843A                 xor     ecx, ecx
.text:0040843C                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00408440                 jmp     short loc_4083E3
.text:00408442 ; ---------------------------------------------------------------------------
.text:00408442
.text:00408442 loc_408442:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408442                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408442                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 12
.text:00408448                 mov     ebx, offset aTypeinfoFor ; "typeinfo for "
.text:0040844D                 jmp     short loc_408470
.text:0040844D ; ---------------------------------------------------------------------------
.text:0040844F                 align 10h
.text:00408450
.text:00408450 loc_408450:                             ; CODE XREF: _d_print_comp+5CB↓j
.text:00408450                 mov     ecx, eax
.text:00408452                 inc     eax
.text:00408453
.text:00408453 loc_408453:                             ; CODE XREF: _d_print_comp+604↓j
.text:00408453                 mov     [ebp+ecx+0], dl
.text:00408457                 mov     [ebp+100h], eax
.text:0040845D                 mov     [ebp+104h], dl
.text:00408463                 inc     ebx
.text:00408464                 cmp     ebx, 414D95h
.text:0040846A                 jz      loc_409974
.text:00408470
.text:00408470 loc_408470:                             ; CODE XREF: _d_print_comp+5A1↑j
.text:00408470                 mov     dl, [ebx]
.text:00408472                 cmp     eax, 0FFh
.text:00408477                 jnz     short loc_408450
.text:00408479                 mov     byte ptr [ebp+0FFh], 0
.text:00408480                 mov     eax, [ebp+10Ch]
.text:00408486                 mov     [esp+0ACh+var_A4], eax
.text:0040848A                 mov     [esp+0ACh+var_A8], 0FFh
.text:00408492                 mov     [esp+0ACh+var_AC], ebp
.text:00408495                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00408499                 call    dword ptr [ebp+108h]
.text:0040849F                 inc     dword ptr [ebp+120h]
.text:004084A5                 mov     eax, 1
.text:004084AA                 xor     ecx, ecx
.text:004084AC                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:004084B0                 jmp     short loc_408453
.text:004084B2 ; ---------------------------------------------------------------------------
.text:004084B2
.text:004084B2 loc_4084B2:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:004084B2                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:004084B2                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 13
.text:004084B8                 mov     ebx, offset aTypeinfoNameFo ; "typeinfo name for "
.text:004084BD                 jmp     short loc_4084E0
.text:004084BD ; ---------------------------------------------------------------------------
.text:004084BF                 align 10h
.text:004084C0
.text:004084C0 loc_4084C0:                             ; CODE XREF: _d_print_comp+63B↓j
.text:004084C0                 mov     ecx, eax
.text:004084C2                 inc     eax
.text:004084C3
.text:004084C3 loc_4084C3:                             ; CODE XREF: _d_print_comp+674↓j
.text:004084C3                 mov     [ebp+ecx+0], dl
.text:004084C7                 mov     [ebp+100h], eax
.text:004084CD                 mov     [ebp+104h], dl
.text:004084D3                 inc     ebx
.text:004084D4                 cmp     ebx, 414DA8h
.text:004084DA                 jz      loc_40995D
.text:004084E0
.text:004084E0 loc_4084E0:                             ; CODE XREF: _d_print_comp+611↑j
.text:004084E0                 mov     dl, [ebx]
.text:004084E2                 cmp     eax, 0FFh
.text:004084E7                 jnz     short loc_4084C0
.text:004084E9                 mov     byte ptr [ebp+0FFh], 0
.text:004084F0                 mov     eax, [ebp+10Ch]
.text:004084F6                 mov     [esp+0ACh+var_A4], eax
.text:004084FA                 mov     [esp+0ACh+var_A8], 0FFh
.text:00408502                 mov     [esp+0ACh+var_AC], ebp
.text:00408505                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00408509                 call    dword ptr [ebp+108h]
.text:0040850F                 inc     dword ptr [ebp+120h]
.text:00408515                 mov     eax, 1
.text:0040851A                 xor     ecx, ecx
.text:0040851C                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00408520                 jmp     short loc_4084C3
.text:00408522 ; ---------------------------------------------------------------------------
.text:00408522
.text:00408522 loc_408522:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408522                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408522                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 14
.text:00408528                 mov     ebx, offset aTypeinfoFnFor ; "typeinfo fn for "
.text:0040852D                 jmp     short loc_408550
.text:0040852D ; ---------------------------------------------------------------------------
.text:0040852F                 align 10h
.text:00408530
.text:00408530 loc_408530:                             ; CODE XREF: _d_print_comp+6AB↓j
.text:00408530                 mov     ecx, eax
.text:00408532                 inc     eax
.text:00408533
.text:00408533 loc_408533:                             ; CODE XREF: _d_print_comp+6E4↓j
.text:00408533                 mov     [ebp+ecx+0], dl
.text:00408537                 mov     [ebp+100h], eax
.text:0040853D                 mov     [ebp+104h], dl
.text:00408543                 inc     ebx
.text:00408544                 cmp     ebx, 414DB9h
.text:0040854A                 jz      loc_409946
.text:00408550
.text:00408550 loc_408550:                             ; CODE XREF: _d_print_comp+681↑j
.text:00408550                 mov     dl, [ebx]
.text:00408552                 cmp     eax, 0FFh
.text:00408557                 jnz     short loc_408530
.text:00408559                 mov     byte ptr [ebp+0FFh], 0
.text:00408560                 mov     eax, [ebp+10Ch]
.text:00408566                 mov     [esp+0ACh+var_A4], eax
.text:0040856A                 mov     [esp+0ACh+var_A8], 0FFh
.text:00408572                 mov     [esp+0ACh+var_AC], ebp
.text:00408575                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00408579                 call    dword ptr [ebp+108h]
.text:0040857F                 inc     dword ptr [ebp+120h]
.text:00408585                 mov     eax, 1
.text:0040858A                 xor     ecx, ecx
.text:0040858C                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00408590                 jmp     short loc_408533
.text:00408592 ; ---------------------------------------------------------------------------
.text:00408592
.text:00408592 loc_408592:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408592                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408592                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 15
.text:00408598                 mov     ebx, offset aNonVirtualThun ; "non-virtual thunk to "
.text:0040859D                 jmp     short loc_4085C0
.text:0040859D ; ---------------------------------------------------------------------------
.text:0040859F                 align 10h
.text:004085A0
.text:004085A0 loc_4085A0:                             ; CODE XREF: _d_print_comp+71B↓j
.text:004085A0                 mov     ecx, eax
.text:004085A2                 inc     eax
.text:004085A3
.text:004085A3 loc_4085A3:                             ; CODE XREF: _d_print_comp+754↓j
.text:004085A3                 mov     [ebp+ecx+0], dl
.text:004085A7                 mov     [ebp+100h], eax
.text:004085AD                 mov     [ebp+104h], dl
.text:004085B3                 inc     ebx
.text:004085B4                 cmp     ebx, 414DCFh
.text:004085BA                 jz      loc_40992F
.text:004085C0
.text:004085C0 loc_4085C0:                             ; CODE XREF: _d_print_comp+6F1↑j
.text:004085C0                 mov     dl, [ebx]
.text:004085C2                 cmp     eax, 0FFh
.text:004085C7                 jnz     short loc_4085A0
.text:004085C9                 mov     byte ptr [ebp+0FFh], 0
.text:004085D0                 mov     eax, [ebp+10Ch]
.text:004085D6                 mov     [esp+0ACh+var_A4], eax
.text:004085DA                 mov     [esp+0ACh+var_A8], 0FFh
.text:004085E2                 mov     [esp+0ACh+var_AC], ebp
.text:004085E5                 mov     byte ptr [esp+0ACh+var_94], dl
.text:004085E9                 call    dword ptr [ebp+108h]
.text:004085EF                 inc     dword ptr [ebp+120h]
.text:004085F5                 mov     eax, 1
.text:004085FA                 xor     ecx, ecx
.text:004085FC                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00408600                 jmp     short loc_4085A3
.text:00408602 ; ---------------------------------------------------------------------------
.text:00408602
.text:00408602 loc_408602:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408602                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408602                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 16
.text:00408608                 mov     ebx, offset aVirtualThunkTo ; "virtual thunk to "
.text:0040860D                 jmp     short loc_408630
.text:0040860D ; ---------------------------------------------------------------------------
.text:0040860F                 align 10h
.text:00408610
.text:00408610 loc_408610:                             ; CODE XREF: _d_print_comp+78B↓j
.text:00408610                 mov     ecx, eax
.text:00408612                 inc     eax
.text:00408613
.text:00408613 loc_408613:                             ; CODE XREF: _d_print_comp+7C4↓j
.text:00408613                 mov     [ebp+ecx+0], dl
.text:00408617                 mov     [ebp+100h], eax
.text:0040861D                 mov     [ebp+104h], dl
.text:00408623                 inc     ebx
.text:00408624                 cmp     ebx, 414DE1h
.text:0040862A                 jz      loc_409D91
.text:00408630
.text:00408630 loc_408630:                             ; CODE XREF: _d_print_comp+761↑j
.text:00408630                 mov     dl, [ebx]
.text:00408632                 cmp     eax, 0FFh
.text:00408637                 jnz     short loc_408610
.text:00408639                 mov     byte ptr [ebp+0FFh], 0
.text:00408640                 mov     eax, [ebp+10Ch]
.text:00408646                 mov     [esp+0ACh+var_A4], eax
.text:0040864A                 mov     [esp+0ACh+var_A8], 0FFh
.text:00408652                 mov     [esp+0ACh+var_AC], ebp
.text:00408655                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00408659                 call    dword ptr [ebp+108h]
.text:0040865F                 inc     dword ptr [ebp+120h]
.text:00408665                 mov     eax, 1
.text:0040866A                 xor     ecx, ecx
.text:0040866C                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00408670                 jmp     short loc_408613
.text:00408672 ; ---------------------------------------------------------------------------
.text:00408672
.text:00408672 loc_408672:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408672                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408672                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 17
.text:00408678                 mov     ebx, offset aCovariantRetur ; "covariant return thunk to "
.text:0040867D                 jmp     short loc_4086A0
.text:0040867D ; ---------------------------------------------------------------------------
.text:0040867F                 align 10h
.text:00408680
.text:00408680 loc_408680:                             ; CODE XREF: _d_print_comp+7FB↓j
.text:00408680                 mov     ecx, eax
.text:00408682                 inc     eax
.text:00408683
.text:00408683 loc_408683:                             ; CODE XREF: _d_print_comp+834↓j
.text:00408683                 mov     [ebp+ecx+0], dl
.text:00408687                 mov     [ebp+100h], eax
.text:0040868D                 mov     [ebp+104h], dl
.text:00408693                 inc     ebx
.text:00408694                 cmp     ebx, 414DFCh
.text:0040869A                 jz      loc_409D7A
.text:004086A0
.text:004086A0 loc_4086A0:                             ; CODE XREF: _d_print_comp+7D1↑j
.text:004086A0                 mov     dl, [ebx]
.text:004086A2                 cmp     eax, 0FFh
.text:004086A7                 jnz     short loc_408680
.text:004086A9                 mov     byte ptr [ebp+0FFh], 0
.text:004086B0                 mov     eax, [ebp+10Ch]
.text:004086B6                 mov     [esp+0ACh+var_A4], eax
.text:004086BA                 mov     [esp+0ACh+var_A8], 0FFh
.text:004086C2                 mov     [esp+0ACh+var_AC], ebp
.text:004086C5                 mov     byte ptr [esp+0ACh+var_94], dl
.text:004086C9                 call    dword ptr [ebp+108h]
.text:004086CF                 inc     dword ptr [ebp+120h]
.text:004086D5                 mov     eax, 1
.text:004086DA                 xor     ecx, ecx
.text:004086DC                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:004086E0                 jmp     short loc_408683
.text:004086E2 ; ---------------------------------------------------------------------------
.text:004086E2
.text:004086E2 loc_4086E2:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:004086E2                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:004086E2                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 18
.text:004086E8                 mov     ebx, offset aJavaClassFor ; "java Class for "
.text:004086ED                 jmp     short loc_408710
.text:004086ED ; ---------------------------------------------------------------------------
.text:004086EF                 align 10h
.text:004086F0
.text:004086F0 loc_4086F0:                             ; CODE XREF: _d_print_comp+86B↓j
.text:004086F0                 mov     ecx, eax
.text:004086F2                 inc     eax
.text:004086F3
.text:004086F3 loc_4086F3:                             ; CODE XREF: _d_print_comp+8A4↓j
.text:004086F3                 mov     [ebp+ecx+0], dl
.text:004086F7                 mov     [ebp+100h], eax
.text:004086FD                 mov     [ebp+104h], dl
.text:00408703                 inc     ebx
.text:00408704                 cmp     ebx, 414E0Ch
.text:0040870A                 jz      loc_409D63
.text:00408710
.text:00408710 loc_408710:                             ; CODE XREF: _d_print_comp+841↑j
.text:00408710                 mov     dl, [ebx]
.text:00408712                 cmp     eax, 0FFh
.text:00408717                 jnz     short loc_4086F0
.text:00408719                 mov     byte ptr [ebp+0FFh], 0
.text:00408720                 mov     eax, [ebp+10Ch]
.text:00408726                 mov     [esp+0ACh+var_A4], eax
.text:0040872A                 mov     [esp+0ACh+var_A8], 0FFh
.text:00408732                 mov     [esp+0ACh+var_AC], ebp
.text:00408735                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00408739                 call    dword ptr [ebp+108h]
.text:0040873F                 inc     dword ptr [ebp+120h]
.text:00408745                 mov     eax, 1
.text:0040874A                 xor     ecx, ecx
.text:0040874C                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00408750                 jmp     short loc_4086F3
.text:00408752 ; ---------------------------------------------------------------------------
.text:00408752
.text:00408752 loc_408752:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408752                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408752                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 19
.text:00408758                 mov     ebx, offset aGuardVariableF ; "guard variable for "
.text:0040875D                 jmp     short loc_408780
.text:0040875D ; ---------------------------------------------------------------------------
.text:0040875F                 align 10h
.text:00408760
.text:00408760 loc_408760:                             ; CODE XREF: _d_print_comp+8DB↓j
.text:00408760                 mov     ecx, eax
.text:00408762                 inc     eax
.text:00408763
.text:00408763 loc_408763:                             ; CODE XREF: _d_print_comp+914↓j
.text:00408763                 mov     [ebp+ecx+0], dl
.text:00408767                 mov     [ebp+100h], eax
.text:0040876D                 mov     [ebp+104h], dl
.text:00408773                 inc     ebx
.text:00408774                 cmp     ebx, 414E20h
.text:0040877A                 jz      loc_409D4C
.text:00408780
.text:00408780 loc_408780:                             ; CODE XREF: _d_print_comp+8B1↑j
.text:00408780                 mov     dl, [ebx]
.text:00408782                 cmp     eax, 0FFh
.text:00408787                 jnz     short loc_408760
.text:00408789                 mov     byte ptr [ebp+0FFh], 0
.text:00408790                 mov     eax, [ebp+10Ch]
.text:00408796                 mov     [esp+0ACh+var_A4], eax
.text:0040879A                 mov     [esp+0ACh+var_A8], 0FFh
.text:004087A2                 mov     [esp+0ACh+var_AC], ebp
.text:004087A5                 mov     byte ptr [esp+0ACh+var_94], dl
.text:004087A9                 call    dword ptr [ebp+108h]
.text:004087AF                 inc     dword ptr [ebp+120h]
.text:004087B5                 mov     eax, 1
.text:004087BA                 xor     ecx, ecx
.text:004087BC                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:004087C0                 jmp     short loc_408763
.text:004087C2 ; ---------------------------------------------------------------------------
.text:004087C2
.text:004087C2 loc_4087C2:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:004087C2                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:004087C2                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 20
.text:004087C8                 mov     ebx, offset aReferenceTempo ; "reference temporary #"
.text:004087CD                 jmp     short loc_4087F0
.text:004087CD ; ---------------------------------------------------------------------------
.text:004087CF                 align 10h
.text:004087D0
.text:004087D0 loc_4087D0:                             ; CODE XREF: _d_print_comp+94B↓j
.text:004087D0                 mov     ecx, eax
.text:004087D2                 inc     eax
.text:004087D3
.text:004087D3 loc_4087D3:                             ; CODE XREF: _d_print_comp+984↓j
.text:004087D3                 mov     [ebp+ecx+0], dl
.text:004087D7                 mov     [ebp+100h], eax
.text:004087DD                 mov     [ebp+104h], dl
.text:004087E3                 inc     ebx
.text:004087E4                 cmp     ebx, 414E36h
.text:004087EA                 jz      loc_409DBF
.text:004087F0
.text:004087F0 loc_4087F0:                             ; CODE XREF: _d_print_comp+921↑j
.text:004087F0                 mov     dl, [ebx]
.text:004087F2                 cmp     eax, 0FFh
.text:004087F7                 jnz     short loc_4087D0
.text:004087F9                 mov     byte ptr [ebp+0FFh], 0
.text:00408800                 mov     eax, [ebp+10Ch]
.text:00408806                 mov     [esp+0ACh+var_A4], eax
.text:0040880A                 mov     [esp+0ACh+var_A8], 0FFh
.text:00408812                 mov     [esp+0ACh+var_AC], ebp
.text:00408815                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00408819                 call    dword ptr [ebp+108h]
.text:0040881F                 inc     dword ptr [ebp+120h]
.text:00408825                 mov     eax, 1
.text:0040882A                 xor     ecx, ecx
.text:0040882C                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00408830                 jmp     short loc_4087D3
.text:00408832 ; ---------------------------------------------------------------------------
.text:00408832
.text:00408832 loc_408832:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408832                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408832                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 21
.text:00408838                 mov     ebx, offset aHiddenAliasFor ; "hidden alias for "
.text:0040883D                 jmp     short loc_408860
.text:0040883D ; ---------------------------------------------------------------------------
.text:0040883F                 align 10h
.text:00408840
.text:00408840 loc_408840:                             ; CODE XREF: _d_print_comp+9BB↓j
.text:00408840                 mov     ecx, eax
.text:00408842                 inc     eax
.text:00408843
.text:00408843 loc_408843:                             ; CODE XREF: _d_print_comp+9F4↓j
.text:00408843                 mov     [ebp+ecx+0], dl
.text:00408847                 mov     [ebp+100h], eax
.text:0040884D                 mov     [ebp+104h], dl
.text:00408853                 inc     ebx
.text:00408854                 cmp     ebx, 414E4Eh
.text:0040885A                 jz      loc_409DA8
.text:00408860
.text:00408860 loc_408860:                             ; CODE XREF: _d_print_comp+991↑j
.text:00408860                 mov     dl, [ebx]
.text:00408862                 cmp     eax, 0FFh
.text:00408867                 jnz     short loc_408840
.text:00408869                 mov     byte ptr [ebp+0FFh], 0
.text:00408870                 mov     eax, [ebp+10Ch]
.text:00408876                 mov     [esp+0ACh+var_A4], eax
.text:0040887A                 mov     [esp+0ACh+var_A8], 0FFh
.text:00408882                 mov     [esp+0ACh+var_AC], ebp
.text:00408885                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00408889                 call    dword ptr [ebp+108h]
.text:0040888F                 inc     dword ptr [ebp+120h]
.text:00408895                 mov     eax, 1
.text:0040889A                 xor     ecx, ecx
.text:0040889C                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:004088A0                 jmp     short loc_408843
.text:004088A2 ; ---------------------------------------------------------------------------
.text:004088A2
.text:004088A2 loc_4088A2:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:004088A2                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:004088A2                 mov     ecx, [esp+0ACh+var_90] ; jumptable 00407EF0 case 22
.text:004088A6                 mov     esi, [ecx+8]
.text:004088A9                 mov     edi, [ecx+4]
.text:004088AC                 test    esi, esi
.text:004088AE                 jz      def_40A961      ; jumptable 0040A961 default case
.text:004088B4                 mov     eax, [ebp+100h]
.text:004088BA                 xor     ebx, ebx
.text:004088BC                 jmp     short loc_4088DC
.text:004088BC ; ---------------------------------------------------------------------------
.text:004088BE                 align 10h
.text:004088C0
.text:004088C0 loc_4088C0:                             ; CODE XREF: _d_print_comp+A38↓j
.text:004088C0                 mov     ecx, eax
.text:004088C2                 inc     eax
.text:004088C3
.text:004088C3 loc_4088C3:                             ; CODE XREF: _d_print_comp+A71↓j
.text:004088C3                 mov     [ebp+ecx+0], dl
.text:004088C7                 mov     [ebp+100h], eax
.text:004088CD                 mov     [ebp+104h], dl
.text:004088D3                 inc     ebx
.text:004088D4                 cmp     esi, ebx
.text:004088D6                 jz      def_40A961      ; jumptable 0040A961 default case
.text:004088DC
.text:004088DC loc_4088DC:                             ; CODE XREF: _d_print_comp+A10↑j
.text:004088DC                 mov     dl, [edi+ebx]
.text:004088DF                 cmp     eax, 0FFh
.text:004088E4                 jnz     short loc_4088C0
.text:004088E6                 mov     byte ptr [ebp+0FFh], 0
.text:004088ED                 mov     eax, [ebp+10Ch]
.text:004088F3                 mov     [esp+0ACh+var_A4], eax
.text:004088F7                 mov     [esp+0ACh+var_A8], 0FFh
.text:004088FF                 mov     [esp+0ACh+var_AC], ebp
.text:00408902                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00408906                 call    dword ptr [ebp+108h]
.text:0040890C                 inc     dword ptr [ebp+120h]
.text:00408912                 mov     eax, 1
.text:00408917                 xor     ecx, ecx
.text:00408919                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:0040891D                 jmp     short loc_4088C3
.text:0040891F ; ---------------------------------------------------------------------------
.text:0040891F
.text:0040891F loc_40891F:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:0040891F                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:0040891F                 mov     esi, [ebp+114h] ; jumptable 00407EF0 cases 23-25
.text:00408925                 test    esi, esi
.text:00408927                 jz      loc_407F13
.text:0040892D                 mov     edx, esi
.text:0040892F                 jmp     short loc_40893E
.text:0040892F ; ---------------------------------------------------------------------------
.text:00408931                 align 4
.text:00408934
.text:00408934 loc_408934:                             ; CODE XREF: _d_print_comp+A97↓j
.text:00408934                                         ; _d_print_comp+AAC↓j
.text:00408934                 mov     edx, [edx]
.text:00408936                 test    edx, edx
.text:00408938                 jz      loc_407F13
.text:0040893E
.text:0040893E loc_40893E:                             ; CODE XREF: _d_print_comp+A83↑j
.text:0040893E                 mov     ecx, [edx+8]
.text:00408941                 test    ecx, ecx
.text:00408943                 jnz     short loc_408934
.text:00408945                 mov     ecx, [edx+4]
.text:00408948                 mov     ecx, [ecx]
.text:0040894A                 lea     ebx, [ecx-17h]
.text:0040894D                 cmp     ebx, 2
.text:00408950                 ja      loc_407F13
.text:00408956                 cmp     eax, ecx
.text:00408958                 jnz     short loc_408934
.text:0040895A                 mov     esi, [esp+0ACh+var_90]
.text:0040895E                 mov     ecx, [esi+4]
.text:00408961                 mov     edx, [esp+0ACh+var_8C]
.text:00408965                 mov     eax, ebp
.text:00408967                 call    _d_print_comp
.text:0040896C                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00408971 ; ---------------------------------------------------------------------------
.text:00408971
.text:00408971 loc_408971:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408971                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408971                 test    byte ptr [esp+0ACh+var_8C], 20h ; jumptable 00407EF0 case 37
.text:00408976                 jnz     loc_40A416
.text:0040897C                 mov     ecx, [esp+0ACh+var_90]
.text:00408980                 cmp     dword ptr [ecx+4], 0
.text:00408984                 jz      short loc_408991
.text:00408986                 test    byte ptr [esp+0ACh+var_8C], 40h
.text:0040898B                 jz      loc_40A7BD
.text:00408991
.text:00408991 loc_408991:                             ; CODE XREF: _d_print_comp+AD8↑j
.text:00408991                                         ; _d_print_comp+2972↓j
.text:00408991                 mov     ecx, [esp+0ACh+var_90]
.text:00408995                 add     ecx, 8
.text:00408998                 mov     edx, [esp+0ACh+var_8C]
.text:0040899C                 and     edx, 0FFFFFF9Fh
.text:0040899F                 mov     eax, [ebp+114h]
.text:004089A5                 mov     [esp+0ACh+var_AC], eax
.text:004089A8                 mov     eax, ebp
.text:004089AA                 call    _d_print_function_type_isra_9
.text:004089AF                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:004089B4 ; ---------------------------------------------------------------------------
.text:004089B4
.text:004089B4 loc_4089B4:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:004089B4                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:004089B4                 mov     ecx, [esp+0ACh+var_90] ; jumptable 00407EF0 case 0
.text:004089B8                 test    byte ptr [esp+0ACh+var_8C], 4
.text:004089BD                 jnz     loc_40A0B7
.text:004089C3                 mov     esi, [ecx+8]
.text:004089C6                 mov     edi, [ecx+4]
.text:004089C9                 test    esi, esi
.text:004089CB                 jz      def_40A961      ; jumptable 0040A961 default case
.text:004089D1                 mov     eax, [ebp+100h]
.text:004089D7                 xor     ebx, ebx
.text:004089D9                 jmp     short loc_4089F8
.text:004089D9 ; ---------------------------------------------------------------------------
.text:004089DB                 align 4
.text:004089DC
.text:004089DC loc_4089DC:                             ; CODE XREF: _d_print_comp+B54↓j
.text:004089DC                 mov     ecx, eax
.text:004089DE                 inc     eax
.text:004089DF
.text:004089DF loc_4089DF:                             ; CODE XREF: _d_print_comp+B8D↓j
.text:004089DF                 mov     [ebp+ecx+0], dl
.text:004089E3                 mov     [ebp+100h], eax
.text:004089E9                 mov     [ebp+104h], dl
.text:004089EF                 inc     ebx
.text:004089F0                 cmp     esi, ebx
.text:004089F2                 jz      def_40A961      ; jumptable 0040A961 default case
.text:004089F8
.text:004089F8 loc_4089F8:                             ; CODE XREF: _d_print_comp+B2D↑j
.text:004089F8                 mov     dl, [edi+ebx]
.text:004089FB                 cmp     eax, 0FFh
.text:00408A00                 jnz     short loc_4089DC
.text:00408A02                 mov     byte ptr [ebp+0FFh], 0
.text:00408A09                 mov     eax, [ebp+10Ch]
.text:00408A0F                 mov     [esp+0ACh+var_A4], eax
.text:00408A13                 mov     [esp+0ACh+var_A8], 0FFh
.text:00408A1B                 mov     [esp+0ACh+var_AC], ebp
.text:00408A1E                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00408A22                 call    dword ptr [ebp+108h]
.text:00408A28                 inc     dword ptr [ebp+120h]
.text:00408A2E                 mov     eax, 1
.text:00408A33                 xor     ecx, ecx
.text:00408A35                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00408A39                 jmp     short loc_4089DF
.text:00408A3B ; ---------------------------------------------------------------------------
.text:00408A3B
.text:00408A3B loc_408A3B:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408A3B                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408A3B                 mov     esi, [esp+0ACh+var_90] ; jumptable 00407EF0 cases 1,2
.text:00408A3F                 mov     ecx, [esi+4]
.text:00408A42                 mov     edx, [esp+0ACh+var_8C]
.text:00408A46                 mov     eax, ebp
.text:00408A48                 call    _d_print_comp
.text:00408A4D                 mov     eax, [ebp+100h]
.text:00408A53                 test    byte ptr [esp+0ACh+var_8C], 4
.text:00408A58                 jnz     loc_409C37
.text:00408A5E                 mov     ebx, offset unk_414D48
.text:00408A63                 jmp     short loc_408A88
.text:00408A63 ; ---------------------------------------------------------------------------
.text:00408A65                 align 4
.text:00408A68
.text:00408A68 loc_408A68:                             ; CODE XREF: _d_print_comp+BE3↓j
.text:00408A68                 mov     ecx, eax
.text:00408A6A                 inc     eax
.text:00408A6B
.text:00408A6B loc_408A6B:                             ; CODE XREF: _d_print_comp+C1C↓j
.text:00408A6B                 mov     [ebp+ecx+0], dl
.text:00408A6F                 mov     [ebp+100h], eax
.text:00408A75                 mov     [ebp+104h], dl
.text:00408A7B                 inc     ebx
.text:00408A7C                 cmp     ebx, offset unk_414D4A
.text:00408A82                 jz      loc_409C57
.text:00408A88
.text:00408A88 loc_408A88:                             ; CODE XREF: _d_print_comp+BB7↑j
.text:00408A88                 mov     dl, [ebx]
.text:00408A8A                 cmp     eax, 0FFh
.text:00408A8F                 jnz     short loc_408A68
.text:00408A91                 mov     byte ptr [ebp+0FFh], 0
.text:00408A98                 mov     eax, [ebp+10Ch]
.text:00408A9E                 mov     [esp+0ACh+var_A4], eax
.text:00408AA2                 mov     [esp+0ACh+var_A8], 0FFh
.text:00408AAA                 mov     [esp+0ACh+var_AC], ebp
.text:00408AAD                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00408AB1                 call    dword ptr [ebp+108h]
.text:00408AB7                 inc     dword ptr [ebp+120h]
.text:00408ABD                 mov     eax, 1
.text:00408AC2                 xor     ecx, ecx
.text:00408AC4                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00408AC8                 jmp     short loc_408A6B
.text:00408ACA ; ---------------------------------------------------------------------------
.text:00408ACA
.text:00408ACA loc_408ACA:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408ACA                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408ACA                 mov     edx, [ebp+114h] ; jumptable 00407EF0 case 3
.text:00408AD0                 mov     [esp+0ACh+var_74], edx
.text:00408AD4                 mov     dword ptr [ebp+114h], 0
.text:00408ADE                 mov     ecx, [esp+0ACh+var_90]
.text:00408AE2                 mov     ebx, [ecx+4]
.text:00408AE5                 test    ebx, ebx
.text:00408AE7                 jz      loc_40AAF1
.text:00408AED                 mov     dword ptr [esp+0ACh+var_5C], 0
.text:00408AF5                 lea     esi, [esp+0ACh+var_5C]
.text:00408AF9                 mov     [esp+0ACh+var_80], esi
.text:00408AFD                 mov     [ebp+114h], esi
.text:00408B03                 mov     [esp+0ACh+var_58], ebx
.text:00408B07                 mov     [esp+0ACh+var_54], 0
.text:00408B0F                 mov     eax, [ebp+110h]
.text:00408B15                 mov     [esp+0ACh+var_84], eax
.text:00408B19                 mov     [esp+0ACh+var_50], eax
.text:00408B1D                 mov     eax, [ebx]
.text:00408B1F                 sub     eax, 1Ah
.text:00408B22                 cmp     eax, 2
.text:00408B25                 ja      loc_40AF49
.text:00408B2B                 lea     eax, [esp+0ACh+var_4C]
.text:00408B2F                 mov     [esp+0ACh+var_88], 1
.text:00408B37                 mov     edx, 1
.text:00408B3C                 mov     esi, [esp+0ACh+var_84]
.text:00408B40                 mov     edi, [esp+0ACh+var_80]
.text:00408B44
.text:00408B44 loc_408B44:                             ; CODE XREF: _d_print_comp+CDA↓j
.text:00408B44                 mov     ebx, [ebx+4]
.text:00408B47                 test    ebx, ebx
.text:00408B49                 jz      loc_40AAF1
.text:00408B4F                 cmp     edx, 4
.text:00408B52                 jz      loc_409E93
.text:00408B58                 mov     ecx, [ebp+114h]
.text:00408B5E                 mov     [eax], ecx
.text:00408B60                 mov     ecx, edx
.text:00408B62                 shl     ecx, 4
.text:00408B65                 add     ecx, edi
.text:00408B67                 mov     [ebp+114h], ecx
.text:00408B6D                 mov     [eax+4], ebx
.text:00408B70                 mov     dword ptr [eax+8], 0
.text:00408B77                 mov     [eax+0Ch], esi
.text:00408B7A                 inc     edx
.text:00408B7B                 add     eax, 10h
.text:00408B7E                 mov     ecx, [ebx]
.text:00408B80                 sub     ecx, 1Ah
.text:00408B83                 cmp     ecx, 2
.text:00408B86                 jbe     short loc_408B44
.text:00408B88                 mov     [esp+0ACh+var_88], edx
.text:00408B8C
.text:00408B8C loc_408B8C:                             ; CODE XREF: _d_print_comp+30A5↓j
.text:00408B8C                 mov     eax, [ebx]
.text:00408B8E                 cmp     eax, 4
.text:00408B91                 jz      loc_40AD5C
.text:00408B97                 cmp     eax, 2
.text:00408B9A                 jnz     loc_408C52
.text:00408BA0                 mov     eax, [ebx+8]
.text:00408BA3                 cmp     dword ptr [eax], 41h ; 'A'
.text:00408BA6                 jz      loc_40AF76
.text:00408BAC
.text:00408BAC loc_408BAC:                             ; CODE XREF: _d_print_comp+30CD↓j
.text:00408BAC                 mov     edx, [eax]
.text:00408BAE                 sub     edx, 1Ah
.text:00408BB1                 cmp     edx, 2
.text:00408BB4                 ja      loc_408C52
.text:00408BBA                 cmp     [esp+0ACh+var_88], 3
.text:00408BBF                 ja      loc_40AE2C
.text:00408BC5                 mov     esi, [esp+0ACh+var_88]
.text:00408BC9                 dec     esi
.text:00408BCA                 mov     [esp+0ACh+var_7C], esi
.text:00408BCE                 mov     edx, esi
.text:00408BD0                 shl     edx, 4
.text:00408BD3                 add     edx, [esp+0ACh+var_80]
.text:00408BD7                 mov     [esp+0ACh+var_70], ebx
.text:00408BDB                 mov     [esp+0ACh+var_78], ebp
.text:00408BDF                 mov     ebp, [esp+0ACh+var_88]
.text:00408BE3                 jmp     short loc_408BFA
.text:00408BE3 ; ---------------------------------------------------------------------------
.text:00408BE5                 align 4
.text:00408BE8
.text:00408BE8 loc_408BE8:                             ; CODE XREF: _d_print_comp+D9A↓j
.text:00408BE8                 mov     edx, ebx
.text:00408BEA                 cmp     ebp, 4
.text:00408BED                 jz      loc_40AE28
.text:00408BF3                 lea     ecx, [ebp-1]
.text:00408BF6                 mov     [esp+0ACh+var_7C], ecx
.text:00408BFA
.text:00408BFA loc_408BFA:                             ; CODE XREF: _d_print_comp+D37↑j
.text:00408BFA                 lea     ebx, [edx+10h]
.text:00408BFD                 mov     edi, ebx
.text:00408BFF                 mov     esi, edx
.text:00408C01                 mov     ecx, 4
.text:00408C06                 rep movsd
.text:00408C08                 mov     ecx, [esp+0ACh+var_7C]
.text:00408C0C                 shl     ecx, 4
.text:00408C0F                 add     ecx, [esp+0ACh+var_80]
.text:00408C13                 mov     [edx+10h], ecx
.text:00408C16                 mov     ecx, ebp
.text:00408C18                 shl     ecx, 4
.text:00408C1B                 add     ecx, [esp+0ACh+var_80]
.text:00408C1F                 mov     esi, [esp+0ACh+var_78]
.text:00408C23                 mov     [esi+114h], ecx
.text:00408C29                 mov     [edx+4], eax
.text:00408C2C                 mov     dword ptr [edx+8], 0
.text:00408C33                 mov     ecx, [esp+0ACh+var_84]
.text:00408C37                 mov     [edx+0Ch], ecx
.text:00408C3A                 inc     ebp
.text:00408C3B                 mov     eax, [eax+4]
.text:00408C3E                 mov     edx, [eax]
.text:00408C40                 sub     edx, 1Ah
.text:00408C43                 cmp     edx, 2
.text:00408C46                 jbe     short loc_408BE8
.text:00408C48                 mov     ebx, [esp+0ACh+var_70]
.text:00408C4C                 mov     [esp+0ACh+var_88], ebp
.text:00408C50                 mov     ebp, esi
.text:00408C52
.text:00408C52 loc_408C52:                             ; CODE XREF: _d_print_comp+CEE↑j
.text:00408C52                                         ; _d_print_comp+D08↑j ...
.text:00408C52                 mov     esi, [esp+0ACh+var_90]
.text:00408C56                 mov     ecx, [esi+8]
.text:00408C59                 mov     edx, [esp+0ACh+var_8C]
.text:00408C5D                 mov     eax, ebp
.text:00408C5F                 call    _d_print_comp
.text:00408C64                 cmp     dword ptr [ebx], 4
.text:00408C67                 jz      loc_40AD77
.text:00408C6D
.text:00408C6D loc_408C6D:                             ; CODE XREF: _d_print_comp+2ED5↓j
.text:00408C6D                 mov     eax, [esp+0ACh+var_88]
.text:00408C71                 test    eax, eax
.text:00408C73                 jz      loc_40A9C0
.text:00408C79                 mov     edx, [esp+0ACh+var_88]
.text:00408C7D                 dec     edx
.text:00408C7E                 mov     eax, edx
.text:00408C80                 shl     eax, 4
.text:00408C83                 mov     ecx, [esp+0ACh+var_80]
.text:00408C87                 lea     ebx, [ecx+eax+8]
.text:00408C8B                 mov     esi, edx
.text:00408C8D                 mov     edi, [ebx]
.text:00408C8F                 test    edi, edi
.text:00408C91                 jz      short loc_408CA5
.text:00408C93
.text:00408C93 loc_408C93:                             ; CODE XREF: _d_print_comp+DF7↓j
.text:00408C93                                         ; _d_print_comp+E2B↓j
.text:00408C93                 sub     ebx, 10h
.text:00408C96                 test    esi, esi
.text:00408C98                 jz      loc_40A9C0
.text:00408C9E                 dec     esi
.text:00408C9F                 mov     edi, [ebx]
.text:00408CA1                 test    edi, edi
.text:00408CA3                 jnz     short loc_408C93
.text:00408CA5
.text:00408CA5 loc_408CA5:                             ; CODE XREF: _d_print_comp+DE5↑j
.text:00408CA5                 mov     eax, [ebp+100h]
.text:00408CAB                 cmp     eax, 0FFh
.text:00408CB0                 jz      loc_40AE99
.text:00408CB6
.text:00408CB6 loc_408CB6:                             ; CODE XREF: _d_print_comp+3017↓j
.text:00408CB6                 mov     byte ptr [ebp+eax+0], 20h ; ' '
.text:00408CBB                 inc     eax
.text:00408CBC                 mov     [ebp+100h], eax
.text:00408CC2                 mov     byte ptr [ebp+104h], 20h ; ' '
.text:00408CC9                 mov     ecx, [ebx-4]
.text:00408CCC                 mov     edx, [esp+0ACh+var_8C]
.text:00408CD0                 mov     eax, ebp
.text:00408CD2                 call    _d_print_mod
.text:00408CD7                 jmp     short loc_408C93
.text:00408CD9 ; ---------------------------------------------------------------------------
.text:00408CD9
.text:00408CD9 loc_408CD9:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408CD9                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408CD9                 mov     ebx, [ebp+114h] ; jumptable 00407EF0 case 4
.text:00408CDF                 mov     dword ptr [ebp+114h], 0
.text:00408CE9                 mov     ecx, [esp+0ACh+var_90]
.text:00408CED                 mov     eax, [ecx+4]
.text:00408CF0                 test    byte ptr [esp+0ACh+var_8C], 4
.text:00408CF5                 jz      short loc_408D07
.text:00408CF7                 mov     esi, [eax]
.text:00408CF9                 test    esi, esi
.text:00408CFB                 jnz     short loc_408D07
.text:00408CFD                 cmp     dword ptr [eax+8], 6
.text:00408D01                 jz      loc_40ABD8
.text:00408D07
.text:00408D07 loc_408D07:                             ; CODE XREF: _d_print_comp+E49↑j
.text:00408D07                                         ; _d_print_comp+E4F↑j ...
.text:00408D07                 mov     ecx, eax
.text:00408D09                 mov     edx, [esp+0ACh+var_8C]
.text:00408D0D                 mov     eax, ebp
.text:00408D0F                 call    _d_print_comp
.text:00408D14                 cmp     byte ptr [ebp+104h], 3Ch ; '<'
.text:00408D1B                 mov     eax, [ebp+100h]
.text:00408D21                 jz      loc_40AA6F
.text:00408D27
.text:00408D27 loc_408D27:                             ; CODE XREF: _d_print_comp+2BE1↓j
.text:00408D27                 cmp     eax, 0FFh
.text:00408D2C                 jz      loc_40A651
.text:00408D32                 lea     edx, [eax+1]
.text:00408D35
.text:00408D35 loc_408D35:                             ; CODE XREF: _d_print_comp+27D4↓j
.text:00408D35                 mov     byte ptr [ebp+eax+0], 3Ch ; '<'
.text:00408D3A                 mov     [ebp+100h], edx
.text:00408D40                 mov     byte ptr [ebp+104h], 3Ch ; '<'
.text:00408D47                 mov     eax, [esp+0ACh+var_90]
.text:00408D4B                 mov     ecx, [eax+8]
.text:00408D4E                 mov     edx, [esp+0ACh+var_8C]
.text:00408D52                 mov     eax, ebp
.text:00408D54                 call    _d_print_comp
.text:00408D59                 cmp     byte ptr [ebp+104h], 3Eh ; '>'
.text:00408D60                 mov     eax, [ebp+100h]
.text:00408D66                 jz      loc_40AA4C
.text:00408D6C
.text:00408D6C loc_408D6C:                             ; CODE XREF: _d_print_comp+2BBE↓j
.text:00408D6C                 cmp     eax, 0FFh
.text:00408D71                 jz      loc_40A61D
.text:00408D77                 lea     edx, [eax+1]
.text:00408D7A
.text:00408D7A loc_408D7A:                             ; CODE XREF: _d_print_comp+27A0↓j
.text:00408D7A                 mov     byte ptr [ebp+eax+0], 3Eh ; '>'
.text:00408D7F                 mov     [ebp+100h], edx
.text:00408D85                 mov     byte ptr [ebp+104h], 3Eh ; '>'
.text:00408D8C
.text:00408D8C loc_408D8C:                             ; CODE XREF: _d_print_comp+2D5F↓j
.text:00408D8C                 mov     [ebp+114h], ebx
.text:00408D92                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00408D97 ; ---------------------------------------------------------------------------
.text:00408D97
.text:00408D97 loc_408D97:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408D97                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408D97                 mov     edx, [esp+0ACh+var_90] ; jumptable 00407EF0 case 5
.text:00408D9B                 add     edx, 4
.text:00408D9E                 mov     eax, ebp
.text:00408DA0                 call    _d_lookup_template_argument_isra_5
.text:00408DA5                 test    eax, eax
.text:00408DA7                 jz      loc_40A372
.text:00408DAD                 cmp     dword ptr [eax], 2Bh ; '+'
.text:00408DB0                 jz      loc_40A351
.text:00408DB6
.text:00408DB6 loc_408DB6:                             ; CODE XREF: _d_print_comp+3161↓j
.text:00408DB6                 mov     ebx, [ebp+110h]
.text:00408DBC                 mov     edx, [ebx]
.text:00408DBE                 mov     [ebp+110h], edx
.text:00408DC4                 mov     ecx, eax
.text:00408DC6                 mov     edx, [esp+0ACh+var_8C]
.text:00408DCA                 mov     eax, ebp
.text:00408DCC                 call    _d_print_comp
.text:00408DD1                 mov     [ebp+110h], ebx
.text:00408DD7                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00408DDC ; ---------------------------------------------------------------------------
.text:00408DDC
.text:00408DDC loc_408DDC:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408DDC                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408DDC                 mov     ecx, [esp+0ACh+var_90] ; jumptable 00407EF0 case 6
.text:00408DE0                 mov     esi, [ecx+4]
.text:00408DE3                 mov     eax, [ebp+100h]
.text:00408DE9                 test    esi, esi
.text:00408DEB                 jnz     loc_409F2A
.text:00408DF1                 mov     ebx, offset aThis ; "this"
.text:00408DF6                 jmp     short loc_408E18
.text:00408DF8 ; ---------------------------------------------------------------------------
.text:00408DF8
.text:00408DF8 loc_408DF8:                             ; CODE XREF: _d_print_comp+F73↓j
.text:00408DF8                 mov     ecx, eax
.text:00408DFA                 inc     eax
.text:00408DFB
.text:00408DFB loc_408DFB:                             ; CODE XREF: _d_print_comp+FAC↓j
.text:00408DFB                 mov     [ebp+ecx+0], dl
.text:00408DFF                 mov     [ebp+100h], eax
.text:00408E05                 mov     [ebp+104h], dl
.text:00408E0B                 inc     ebx
.text:00408E0C                 cmp     ebx, 414EF8h
.text:00408E12                 jz      def_40A961      ; jumptable 0040A961 default case
.text:00408E18
.text:00408E18 loc_408E18:                             ; CODE XREF: _d_print_comp+F4A↑j
.text:00408E18                 mov     dl, [ebx]
.text:00408E1A                 cmp     eax, 0FFh
.text:00408E1F                 jnz     short loc_408DF8
.text:00408E21                 mov     byte ptr [ebp+0FFh], 0
.text:00408E28                 mov     eax, [ebp+10Ch]
.text:00408E2E                 mov     [esp+0ACh+var_A4], eax
.text:00408E32                 mov     [esp+0ACh+var_A8], 0FFh
.text:00408E3A                 mov     [esp+0ACh+var_AC], ebp
.text:00408E3D                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00408E41                 call    dword ptr [ebp+108h]
.text:00408E47                 inc     dword ptr [ebp+120h]
.text:00408E4D                 mov     eax, 1
.text:00408E52                 xor     ecx, ecx
.text:00408E54                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00408E58                 jmp     short loc_408DFB
.text:00408E5A ; ---------------------------------------------------------------------------
.text:00408E5A
.text:00408E5A loc_408E5A:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408E5A                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408E5A                 mov     ebx, [ebp+114h] ; jumptable 00407EF0 case 38
.text:00408E60                 mov     [esp+0ACh+var_78], ebx
.text:00408E64                 mov     dword ptr [esp+0ACh+var_5C], ebx
.text:00408E68                 lea     eax, [esp+0ACh+var_5C]
.text:00408E6C                 mov     [esp+0ACh+var_80], eax
.text:00408E70                 mov     ebx, eax
.text:00408E72                 mov     [ebp+114h], eax
.text:00408E78                 mov     ecx, [esp+0ACh+var_90]
.text:00408E7C                 mov     [esp+0ACh+var_58], ecx
.text:00408E80                 mov     [esp+0ACh+var_54], 0
.text:00408E88                 mov     eax, [ebp+110h]
.text:00408E8E                 mov     [esp+0ACh+var_50], eax
.text:00408E92                 mov     eax, [esp+0ACh+var_78]
.text:00408E96                 test    eax, eax
.text:00408E98                 jz      loc_40A184
.text:00408E9E                 mov     esi, [esp+0ACh+var_78]
.text:00408EA2                 mov     eax, [esi+4]
.text:00408EA5                 mov     eax, [eax]
.text:00408EA7                 sub     eax, 17h
.text:00408EAA                 cmp     eax, 2
.text:00408EAD                 ja      loc_40A184
.text:00408EB3                 mov     [esp+0ACh+var_88], 1
.text:00408EBB                 mov     [esp+0ACh+var_7C], ebp
.text:00408EBF                 mov     eax, ebx
.text:00408EC1                 mov     ebx, esi
.text:00408EC3                 mov     edx, eax
.text:00408EC5                 jmp     short loc_408ED5
.text:00408EC5 ; ---------------------------------------------------------------------------
.text:00408EC7                 align 4
.text:00408EC8
.text:00408EC8 loc_408EC8:                             ; CODE XREF: _d_print_comp+107F↓j
.text:00408EC8                 mov     eax, [ebx+4]
.text:00408ECB                 mov     eax, [eax]
.text:00408ECD                 sub     eax, 17h
.text:00408ED0                 cmp     eax, 2
.text:00408ED3                 ja      short loc_408F2D
.text:00408ED5
.text:00408ED5 loc_408ED5:                             ; CODE XREF: _d_print_comp+1019↑j
.text:00408ED5                 mov     eax, [ebx+8]
.text:00408ED8                 test    eax, eax
.text:00408EDA                 jnz     short loc_408F27
.text:00408EDC                 cmp     [esp+0ACh+var_88], 3
.text:00408EE1                 ja      loc_40A823
.text:00408EE7                 mov     ebp, [esp+0ACh+var_88]
.text:00408EEB                 shl     ebp, 4
.text:00408EEE                 lea     eax, [esp+0ACh+var_1C]
.text:00408EF5                 add     eax, ebp
.text:00408EF7                 lea     ecx, [eax-40h]
.text:00408EFA                 mov     [esp+0ACh+var_84], ecx
.text:00408EFE                 mov     edi, ecx
.text:00408F00                 mov     esi, ebx
.text:00408F02                 mov     ecx, 4
.text:00408F07                 rep movsd
.text:00408F09                 mov     [eax-40h], edx
.text:00408F0C                 mov     edx, [esp+0ACh+var_80]
.text:00408F10                 add     edx, ebp
.text:00408F12                 mov     eax, [esp+0ACh+var_7C]
.text:00408F16                 mov     [eax+114h], edx
.text:00408F1C                 mov     dword ptr [ebx+8], 1
.text:00408F23                 inc     [esp+0ACh+var_88]
.text:00408F27
.text:00408F27 loc_408F27:                             ; CODE XREF: _d_print_comp+102E↑j
.text:00408F27                 mov     ebx, [ebx]
.text:00408F29                 test    ebx, ebx
.text:00408F2B                 jnz     short loc_408EC8
.text:00408F2D
.text:00408F2D loc_408F2D:                             ; CODE XREF: _d_print_comp+1027↑j
.text:00408F2D                 mov     ebp, [esp+0ACh+var_7C]
.text:00408F31                 mov     edx, [esp+0ACh+var_90]
.text:00408F35                 mov     ecx, [edx+8]
.text:00408F38                 mov     edx, [esp+0ACh+var_8C]
.text:00408F3C                 mov     eax, ebp
.text:00408F3E                 call    _d_print_comp
.text:00408F43                 mov     ecx, [esp+0ACh+var_78]
.text:00408F47                 mov     [ebp+114h], ecx
.text:00408F4D                 mov     eax, [esp+0ACh+var_54]
.text:00408F51                 test    eax, eax
.text:00408F53                 jnz     def_40A961      ; jumptable 0040A961 default case
.text:00408F59                 cmp     [esp+0ACh+var_88], 1
.text:00408F5E                 jz      loc_40A1AB
.text:00408F64                 mov     esi, [esp+0ACh+var_88]
.text:00408F68                 dec     esi
.text:00408F69                 mov     eax, esi
.text:00408F6B                 shl     eax, 4
.text:00408F6E                 mov     edx, [esp+0ACh+var_80]
.text:00408F72                 lea     ebx, [edx+eax+4]
.text:00408F76                 mov     edi, [esp+0ACh+var_8C]
.text:00408F7A
.text:00408F7A loc_408F7A:                             ; CODE XREF: _d_print_comp+10E6↓j
.text:00408F7A                 mov     ecx, [ebx]
.text:00408F7C                 mov     edx, edi
.text:00408F7E                 mov     eax, ebp
.text:00408F80                 call    _d_print_mod
.text:00408F85                 sub     ebx, 10h
.text:00408F88                 cmp     esi, 1
.text:00408F8B                 jz      loc_40A1AB
.text:00408F91                 dec     esi
.text:00408F92                 jmp     short loc_408F7A
.text:00408F94 ; ---------------------------------------------------------------------------
.text:00408F94
.text:00408F94 loc_408F94:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408F94                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408F94                 mov     eax, [ebp+114h] ; jumptable 00407EF0 cases 39,41
.text:00408F9A                 mov     dword ptr [esp+0ACh+var_5C], eax
.text:00408F9E                 lea     eax, [esp+0ACh+var_5C]
.text:00408FA2                 mov     [ebp+114h], eax
.text:00408FA8                 mov     ecx, [esp+0ACh+var_90]
.text:00408FAC                 mov     [esp+0ACh+var_58], ecx
.text:00408FB0                 mov     [esp+0ACh+var_54], 0
.text:00408FB8                 mov     eax, [ebp+110h]
.text:00408FBE                 mov     [esp+0ACh+var_50], eax
.text:00408FC2                 mov     esi, ecx
.text:00408FC4                 mov     ecx, [ecx+8]
.text:00408FC7                 mov     edx, [esp+0ACh+var_8C]
.text:00408FCB                 mov     eax, ebp
.text:00408FCD                 call    _d_print_comp
.text:00408FD2                 mov     eax, [esp+0ACh+var_54]
.text:00408FD6                 test    eax, eax
.text:00408FD8                 jnz     short loc_408FE7
.text:00408FDA                 mov     ecx, esi
.text:00408FDC                 mov     edx, [esp+0ACh+var_8C]
.text:00408FE0                 mov     eax, ebp
.text:00408FE2                 call    _d_print_mod
.text:00408FE7
.text:00408FE7 loc_408FE7:                             ; CODE XREF: _d_print_comp+112C↑j
.text:00408FE7                 mov     eax, dword ptr [esp+0ACh+var_5C]
.text:00408FEB                 mov     [ebp+114h], eax
.text:00408FF1                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00408FF6 ; ---------------------------------------------------------------------------
.text:00408FF6
.text:00408FF6 loc_408FF6:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00408FF6                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00408FF6                 mov     ecx, [esp+0ACh+var_90] ; jumptable 00407EF0 case 40
.text:00408FFA                 cmp     word ptr [ecx+0Ah], 0
.text:00408FFF                 jnz     loc_40A3A7
.text:00409005
.text:00409005 loc_409005:                             ; CODE XREF: _d_print_comp+2522↓j
.text:00409005                 mov     esi, [esp+0ACh+var_90]
.text:00409009                 mov     ecx, [esi+4]
.text:0040900C                 cmp     dword ptr [ecx+4], offset off_4153A0 ; "int"
.text:00409013                 jz      loc_40A346
.text:00409019                 mov     edx, [esp+0ACh+var_8C]
.text:0040901D                 mov     eax, ebp
.text:0040901F                 call    _d_print_comp
.text:00409024                 mov     edx, [ebp+100h]
.text:0040902A                 cmp     edx, 0FFh
.text:00409030                 jz      loc_40AA18
.text:00409036                 lea     eax, [edx+1]
.text:00409039
.text:00409039 loc_409039:                             ; CODE XREF: _d_print_comp+2B9B↓j
.text:00409039                 mov     byte ptr [ebp+edx+0], 20h ; ' '
.text:0040903E                 mov     [ebp+100h], eax
.text:00409044                 mov     byte ptr [ebp+104h], 20h ; ' '
.text:0040904B
.text:0040904B loc_40904B:                             ; CODE XREF: _d_print_comp+24A0↓j
.text:0040904B                 mov     ecx, [esp+0ACh+var_90]
.text:0040904F                 cmp     word ptr [ecx+8], 0
.text:00409054                 jz      loc_409EC1
.text:0040905A                 mov     ebx, offset aAccum ; "_Accum"
.text:0040905F                 jmp     short loc_409084
.text:0040905F ; ---------------------------------------------------------------------------
.text:00409061                 align 4
.text:00409064
.text:00409064 loc_409064:                             ; CODE XREF: _d_print_comp+11DF↓j
.text:00409064                 mov     ecx, eax
.text:00409066                 inc     eax
.text:00409067
.text:00409067 loc_409067:                             ; CODE XREF: _d_print_comp+1218↓j
.text:00409067                 mov     [ebp+ecx+0], dl
.text:0040906B                 mov     [ebp+100h], eax
.text:00409071                 mov     [ebp+104h], dl
.text:00409077                 inc     ebx
.text:00409078                 cmp     ebx, 414E8Dh
.text:0040907E                 jz      def_40A961      ; jumptable 0040A961 default case
.text:00409084
.text:00409084 loc_409084:                             ; CODE XREF: _d_print_comp+11B3↑j
.text:00409084                 mov     dl, [ebx]
.text:00409086                 cmp     eax, 0FFh
.text:0040908B                 jnz     short loc_409064
.text:0040908D                 mov     byte ptr [ebp+0FFh], 0
.text:00409094                 mov     eax, [ebp+10Ch]
.text:0040909A                 mov     [esp+0ACh+var_A4], eax
.text:0040909E                 mov     [esp+0ACh+var_A8], 0FFh
.text:004090A6                 mov     [esp+0ACh+var_AC], ebp
.text:004090A9                 mov     byte ptr [esp+0ACh+var_94], dl
.text:004090AD                 call    dword ptr [ebp+108h]
.text:004090B3                 inc     dword ptr [ebp+120h]
.text:004090B9                 mov     eax, 1
.text:004090BE                 xor     ecx, ecx
.text:004090C0                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:004090C4                 jmp     short loc_409067
.text:004090C6 ; ---------------------------------------------------------------------------
.text:004090C6
.text:004090C6 loc_4090C6:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:004090C6                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:004090C6                 mov     ecx, [esp+0ACh+var_90] ; jumptable 00407EF0 case 35
.text:004090CA                 mov     eax, [ecx+4]
.text:004090CD                 test    byte ptr [esp+0ACh+var_8C], 4
.text:004090D2                 jnz     loc_40A03F
.text:004090D8                 mov     esi, [eax+4]
.text:004090DB                 mov     edi, [eax]
.text:004090DD                 test    esi, esi
.text:004090DF                 jz      def_40A961      ; jumptable 0040A961 default case
.text:004090E5                 mov     eax, [ebp+100h]
.text:004090EB                 xor     ebx, ebx
.text:004090ED                 jmp     short loc_40910C
.text:004090ED ; ---------------------------------------------------------------------------
.text:004090EF                 align 10h
.text:004090F0
.text:004090F0 loc_4090F0:                             ; CODE XREF: _d_print_comp+1268↓j
.text:004090F0                 mov     ecx, eax
.text:004090F2                 inc     eax
.text:004090F3
.text:004090F3 loc_4090F3:                             ; CODE XREF: _d_print_comp+12A1↓j
.text:004090F3                 mov     [ebp+ecx+0], dl
.text:004090F7                 mov     [ebp+100h], eax
.text:004090FD                 mov     [ebp+104h], dl
.text:00409103                 inc     ebx
.text:00409104                 cmp     esi, ebx
.text:00409106                 jz      def_40A961      ; jumptable 0040A961 default case
.text:0040910C
.text:0040910C loc_40910C:                             ; CODE XREF: _d_print_comp+1241↑j
.text:0040910C                 mov     dl, [edi+ebx]
.text:0040910F                 cmp     eax, 0FFh
.text:00409114                 jnz     short loc_4090F0
.text:00409116                 mov     byte ptr [ebp+0FFh], 0
.text:0040911D                 mov     eax, [ebp+10Ch]
.text:00409123                 mov     [esp+0ACh+var_A4], eax
.text:00409127                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040912F                 mov     [esp+0ACh+var_AC], ebp
.text:00409132                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00409136                 call    dword ptr [ebp+108h]
.text:0040913C                 inc     dword ptr [ebp+120h]
.text:00409142                 mov     eax, 1
.text:00409147                 xor     ecx, ecx
.text:00409149                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:0040914D                 jmp     short loc_4090F3
.text:0040914F ; ---------------------------------------------------------------------------
.text:0040914F
.text:0040914F loc_40914F:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:0040914F                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:0040914F                 mov     esi, [esp+0ACh+var_90] ; jumptable 00407EF0 case 36
.text:00409153                 mov     ecx, [esi+4]
.text:00409156                 mov     edx, [esp+0ACh+var_8C]
.text:0040915A                 mov     eax, ebp
.text:0040915C                 call    _d_print_comp
.text:00409161                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409166 ; ---------------------------------------------------------------------------
.text:00409166
.text:00409166 loc_409166:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00409166                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00409166                 mov     ecx, [esp+0ACh+var_90] ; jumptable 00407EF0 cases 31,32
.text:0040916A                 mov     eax, [ecx+4]
.text:0040916D                 mov     edx, [eax]
.text:0040916F                 cmp     edx, 5
.text:00409172                 jz      loc_40A9CF
.text:00409178
.text:00409178 loc_409178:                             ; CODE XREF: _d_print_comp+2B36↓j
.text:00409178                                         ; _d_print_comp+3151↓j
.text:00409178                 cmp     edx, 1Fh
.text:0040917B                 jz      loc_40A1CB
.text:00409181                 mov     ecx, [esp+0ACh+var_90]
.text:00409185                 cmp     [ecx], edx
.text:00409187                 jz      loc_40A1CB
.text:0040918D                 cmp     edx, 20h ; ' '
.text:00409190                 jnz     loc_407F0D      ; jumptable 00407EF0 cases 26-30,33,34
.text:00409196                 mov     ecx, [eax+4]
.text:00409199                 mov     eax, [ebp+114h]
.text:0040919F                 mov     dword ptr [esp+0ACh+var_5C], eax
.text:004091A3                 lea     eax, [esp+0ACh+var_5C]
.text:004091A7                 mov     [ebp+114h], eax
.text:004091AD                 mov     esi, [esp+0ACh+var_90]
.text:004091B1                 mov     [esp+0ACh+var_58], esi
.text:004091B5                 mov     [esp+0ACh+var_54], 0
.text:004091BD                 mov     eax, [ebp+110h]
.text:004091C3                 mov     [esp+0ACh+var_50], eax
.text:004091C7                 test    ecx, ecx
.text:004091C9                 jnz     loc_407F42
.text:004091CF                 jmp     loc_407F3B
.text:004091D4 ; ---------------------------------------------------------------------------
.text:004091D4
.text:004091D4 loc_4091D4:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:004091D4                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:004091D4                 mov     esi, [esp+0ACh+var_90] ; jumptable 00407EF0 case 70
.text:004091D8                 mov     ecx, [esi+4]
.text:004091DB                 mov     edx, [esp+0ACh+var_8C]
.text:004091DF                 mov     eax, ebp
.text:004091E1                 call    _d_print_comp
.text:004091E6                 mov     eax, [ebp+100h]
.text:004091EC                 mov     ebx, offset aClone ; " [clone "
.text:004091F1                 jmp     short loc_409214
.text:004091F1 ; ---------------------------------------------------------------------------
.text:004091F3                 align 4
.text:004091F4
.text:004091F4 loc_4091F4:                             ; CODE XREF: _d_print_comp+136F↓j
.text:004091F4                 mov     ecx, eax
.text:004091F6                 inc     eax
.text:004091F7
.text:004091F7 loc_4091F7:                             ; CODE XREF: _d_print_comp+13A8↓j
.text:004091F7                 mov     [ebp+ecx+0], dl
.text:004091FB                 mov     [ebp+100h], eax
.text:00409201                 mov     [ebp+104h], dl
.text:00409207                 inc     ebx
.text:00409208                 cmp     ebx, 414F5Eh
.text:0040920E                 jz      loc_409865
.text:00409214
.text:00409214 loc_409214:                             ; CODE XREF: _d_print_comp+1345↑j
.text:00409214                 mov     dl, [ebx]
.text:00409216                 cmp     eax, 0FFh
.text:0040921B                 jnz     short loc_4091F4
.text:0040921D                 mov     byte ptr [ebp+0FFh], 0
.text:00409224                 mov     eax, [ebp+10Ch]
.text:0040922A                 mov     [esp+0ACh+var_A4], eax
.text:0040922E                 mov     [esp+0ACh+var_A8], 0FFh
.text:00409236                 mov     [esp+0ACh+var_AC], ebp
.text:00409239                 mov     byte ptr [esp+0ACh+var_94], dl
.text:0040923D                 call    dword ptr [ebp+108h]
.text:00409243                 inc     dword ptr [ebp+120h]
.text:00409249                 mov     eax, 1
.text:0040924E                 xor     ecx, ecx
.text:00409250                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00409254                 jmp     short loc_4091F7
.text:00409256 ; ---------------------------------------------------------------------------
.text:00409256
.text:00409256 loc_409256:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00409256                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00409256                 mov     esi, [esp+0ACh+var_90] ; jumptable 00407EF0 cases 42,43
.text:0040925A                 mov     ecx, [esi+4]
.text:0040925D                 test    ecx, ecx
.text:0040925F                 jz      short loc_40926C
.text:00409261                 mov     edx, [esp+0ACh+var_8C]
.text:00409265                 mov     eax, ebp
.text:00409267                 call    _d_print_comp
.text:0040926C
.text:0040926C loc_40926C:                             ; CODE XREF: _d_print_comp+13B3↑j
.text:0040926C                 mov     ecx, [esp+0ACh+var_90]
.text:00409270                 mov     eax, [ecx+8]
.text:00409273                 test    eax, eax
.text:00409275                 jz      def_40A961      ; jumptable 0040A961 default case
.text:0040927B                 mov     ebx, [ebp+100h]
.text:00409281                 cmp     ebx, 0FDh
.text:00409287                 ja      loc_40A582
.text:0040928D
.text:0040928D loc_40928D:                             ; CODE XREF: _d_print_comp+2704↓j
.text:0040928D                 mov     esi, offset asc_414E95 ; ", "
.text:00409292                 jmp     short loc_4092B4
.text:00409294 ; ---------------------------------------------------------------------------
.text:00409294
.text:00409294 loc_409294:                             ; CODE XREF: _d_print_comp+1410↓j
.text:00409294                 mov     edx, ebx
.text:00409296                 inc     ebx
.text:00409297
.text:00409297 loc_409297:                             ; CODE XREF: _d_print_comp+1449↓j
.text:00409297                 mov     [ebp+edx+0], al
.text:0040929B                 mov     [ebp+100h], ebx
.text:004092A1                 mov     [ebp+104h], al
.text:004092A7                 inc     esi
.text:004092A8                 cmp     esi, (offset asc_414E95+2) ; ""
.text:004092AE                 jz      loc_409E55
.text:004092B4
.text:004092B4 loc_4092B4:                             ; CODE XREF: _d_print_comp+13E6↑j
.text:004092B4                 mov     al, [esi]
.text:004092B6                 cmp     ebx, 0FFh
.text:004092BC                 jnz     short loc_409294
.text:004092BE                 mov     byte ptr [ebp+0FFh], 0
.text:004092C5                 mov     edx, [ebp+10Ch]
.text:004092CB                 mov     [esp+0ACh+var_A4], edx
.text:004092CF                 mov     [esp+0ACh+var_A8], 0FFh
.text:004092D7                 mov     [esp+0ACh+var_AC], ebp
.text:004092DA                 mov     byte ptr [esp+0ACh+var_94], al
.text:004092DE                 call    dword ptr [ebp+108h]
.text:004092E4                 inc     dword ptr [ebp+120h]
.text:004092EA                 mov     ebx, 1
.text:004092EF                 xor     edx, edx
.text:004092F1                 mov     al, byte ptr [esp+0ACh+var_94]
.text:004092F5                 jmp     short loc_409297
.text:004092F7 ; ---------------------------------------------------------------------------
.text:004092F7
.text:004092F7 loc_4092F7:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:004092F7                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:004092F7                 mov     edx, [esp+0ACh+var_90] ; jumptable 00407EF0 case 7
.text:004092FB                 mov     ecx, [edx+8]
.text:004092FE                 mov     edx, [esp+0ACh+var_8C]
.text:00409302                 mov     eax, ebp
.text:00409304                 call    _d_print_comp
.text:00409309                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040930E ; ---------------------------------------------------------------------------
.text:0040930E
.text:0040930E loc_40930E:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:0040930E                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:0040930E                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 8
.text:00409314                 cmp     eax, 0FFh
.text:00409319                 jz      loc_40A721
.text:0040931F                 lea     edx, [eax+1]
.text:00409322
.text:00409322 loc_409322:                             ; CODE XREF: _d_print_comp+28A4↓j
.text:00409322                 mov     byte ptr [ebp+eax+0], 7Eh ; '~'
.text:00409327                 mov     [ebp+100h], edx
.text:0040932D                 mov     byte ptr [ebp+104h], 7Eh ; '~'
.text:00409334                 mov     esi, [esp+0ACh+var_90]
.text:00409338                 mov     ecx, [esi+8]
.text:0040933B                 mov     edx, [esp+0ACh+var_8C]
.text:0040933F                 mov     eax, ebp
.text:00409341                 call    _d_print_comp
.text:00409346                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040934B ; ---------------------------------------------------------------------------
.text:0040934B
.text:0040934B loc_40934B:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:0040934B                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:0040934B                 mov     ecx, [esp+0ACh+var_90] ; jumptable 00407EF0 case 52
.text:0040934F                 mov     eax, [ecx+8]
.text:00409352                 cmp     dword ptr [eax], 35h ; '5'
.text:00409355                 jz      loc_40A298
.text:0040935B
.text:0040935B loc_40935B:                             ; CODE XREF: _d_print_comp+23F2↓j
.text:0040935B                 mov     dword ptr [ebp+118h], 1
.text:00409365                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040936A ; ---------------------------------------------------------------------------
.text:0040936A
.text:0040936A loc_40936A:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:0040936A                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:0040936A                 mov     edx, [esp+0ACh+var_90] ; jumptable 00407EF0 case 44
.text:0040936E                 mov     ecx, [edx+4]
.text:00409371                 mov     ebx, [edx+8]
.text:00409374                 test    ecx, ecx
.text:00409376                 jz      short loc_409383
.text:00409378                 mov     edx, [esp+0ACh+var_8C]
.text:0040937C                 mov     eax, ebp
.text:0040937E                 call    _d_print_comp
.text:00409383
.text:00409383 loc_409383:                             ; CODE XREF: _d_print_comp+14CA↑j
.text:00409383                 mov     eax, [ebp+100h]
.text:00409389                 cmp     eax, 0FFh
.text:0040938E                 jz      loc_40A6B9
.text:00409394                 lea     edx, [eax+1]
.text:00409397
.text:00409397 loc_409397:                             ; CODE XREF: _d_print_comp+283C↓j
.text:00409397                 mov     byte ptr [ebp+eax+0], 7Bh ; '{'
.text:0040939C                 mov     [ebp+100h], edx
.text:004093A2                 mov     byte ptr [ebp+104h], 7Bh ; '{'
.text:004093A9                 mov     ecx, ebx
.text:004093AB                 mov     edx, [esp+0ACh+var_8C]
.text:004093AF                 mov     eax, ebp
.text:004093B1                 call    _d_print_comp
.text:004093B6                 mov     eax, [ebp+100h]
.text:004093BC                 cmp     eax, 0FFh
.text:004093C1                 jz      loc_40A685
.text:004093C7                 lea     edx, [eax+1]
.text:004093CA
.text:004093CA loc_4093CA:                             ; CODE XREF: _d_print_comp+2808↓j
.text:004093CA                 mov     byte ptr [ebp+eax+0], 7Dh ; '}'
.text:004093CF                 mov     [ebp+100h], edx
.text:004093D5                 mov     byte ptr [ebp+104h], 7Dh ; '}'
.text:004093DC                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:004093E1 ; ---------------------------------------------------------------------------
.text:004093E1
.text:004093E1 loc_4093E1:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:004093E1                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:004093E1                 mov     eax, [esp+0ACh+var_90] ; jumptable 00407EF0 case 58
.text:004093E5                 mov     ecx, [eax+4]
.text:004093E8                 mov     edx, [esp+0ACh+var_8C]
.text:004093EC                 mov     eax, ebp
.text:004093EE                 call    _d_print_comp
.text:004093F3                 mov     edx, [esp+0ACh+var_90]
.text:004093F7                 mov     ecx, [edx+8]
.text:004093FA                 mov     edx, [esp+0ACh+var_8C]
.text:004093FE                 mov     eax, ebp
.text:00409400                 call    _d_print_comp
.text:00409405                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040940A ; ---------------------------------------------------------------------------
.text:0040940A
.text:0040940A loc_40940A:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:0040940A                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:0040940A                 mov     ecx, [esp+0ACh+var_90] ; jumptable 00407EF0 case 59
.text:0040940E                 mov     bl, [ecx+4]
.text:00409411                 mov     eax, [ebp+100h]
.text:00409417                 cmp     eax, 0FFh
.text:0040941C                 jz      loc_40A789
.text:00409422                 lea     edx, [eax+1]
.text:00409425
.text:00409425 loc_409425:                             ; CODE XREF: _d_print_comp+290C↓j
.text:00409425                 mov     [ebp+eax+0], bl
.text:00409429                 mov     [ebp+100h], edx
.text:0040942F                 mov     [ebp+104h], bl
.text:00409435                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040943A ; ---------------------------------------------------------------------------
.text:0040943A
.text:0040943A loc_40943A:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:0040943A                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:0040943A                 mov     eax, [esp+0ACh+var_90] ; jumptable 00407EF0 case 48
.text:0040943E                 mov     ecx, [eax+4]
.text:00409441                 mov     edx, [esp+0ACh+var_8C]
.text:00409445                 mov     eax, ebp
.text:00409447                 call    _d_print_expr_op
.text:0040944C                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409451 ; ---------------------------------------------------------------------------
.text:00409451
.text:00409451 loc_409451:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00409451                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00409451                 mov     ecx, [esp+0ACh+var_90] ; jumptable 00407EF0 cases 55,56
.text:00409455                 mov     edx, [ecx+4]
.text:00409458                 cmp     dword ptr [edx], 23h ; '#'
.text:0040945B                 jnz     loc_409EBA
.text:00409461                 mov     edx, [edx+4]
.text:00409464                 mov     ebx, [edx+10h]
.text:00409467                 cmp     ebx, 1
.text:0040946A                 jb      short loc_409480
.text:0040946C                 cmp     ebx, 6
.text:0040946F                 jbe     loc_40A930
.text:00409475                 cmp     ebx, 7
.text:00409478                 jz      loc_40A8E5
.text:0040947E                 xchg    ax, ax
.text:00409480
.text:00409480 loc_409480:                             ; CODE XREF: _d_print_comp+15BE↑j
.text:00409480                                         ; _d_print_comp+2010↓j ...
.text:00409480                 mov     eax, [ebp+100h]
.text:00409486                 cmp     eax, 0FFh
.text:0040948B                 jz      loc_40A89D
.text:00409491                 lea     edx, [eax+1]
.text:00409494
.text:00409494 loc_409494:                             ; CODE XREF: _d_print_comp+2A20↓j
.text:00409494                 mov     byte ptr [ebp+eax+0], 28h ; '('
.text:00409499                 mov     [ebp+100h], edx
.text:0040949F                 mov     byte ptr [ebp+104h], 28h ; '('
.text:004094A6                 mov     esi, [esp+0ACh+var_90]
.text:004094AA                 mov     ecx, [esi+4]
.text:004094AD                 mov     edx, [esp+0ACh+var_8C]
.text:004094B1                 mov     eax, ebp
.text:004094B3                 call    _d_print_comp
.text:004094B8                 mov     eax, [ebp+100h]
.text:004094BE                 cmp     eax, 0FFh
.text:004094C3                 jz      loc_40A836
.text:004094C9                 lea     edx, [eax+1]
.text:004094CC                 mov     byte ptr [ebp+eax+0], 29h ; ')'
.text:004094D1                 mov     [ebp+100h], edx
.text:004094D7                 mov     byte ptr [ebp+104h], 29h ; ')'
.text:004094DE                 cmp     dword ptr [esi], 38h ; '8'
.text:004094E1                 jz      loc_40AB00
.text:004094E7
.text:004094E7 loc_4094E7:                             ; CODE XREF: _d_print_comp+29CE↓j
.text:004094E7                                         ; _d_print_comp+29EC↓j
.text:004094E7                 cmp     ebx, 8
.text:004094EA                 jz      loc_40AA92
.text:004094F0                 mov     esi, [esp+0ACh+var_90]
.text:004094F4                 mov     ecx, [esi+8]
.text:004094F7                 mov     edx, [esp+0ACh+var_8C]
.text:004094FB                 mov     eax, ebp
.text:004094FD                 call    _d_print_comp
.text:00409502                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409507 ; ---------------------------------------------------------------------------
.text:00409507
.text:00409507 loc_409507:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00409507                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00409507                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 57
.text:0040950D                 mov     ebx, offset aJavaResource ; "java resource "
.text:00409512                 jmp     short loc_409534
.text:00409514 ; ---------------------------------------------------------------------------
.text:00409514
.text:00409514 loc_409514:                             ; CODE XREF: _d_print_comp+168F↓j
.text:00409514                 mov     ecx, eax
.text:00409516                 inc     eax
.text:00409517
.text:00409517 loc_409517:                             ; CODE XREF: _d_print_comp+16C8↓j
.text:00409517                 mov     [ebp+ecx+0], dl
.text:0040951B                 mov     [ebp+100h], eax
.text:00409521                 mov     [ebp+104h], dl
.text:00409527                 inc     ebx
.text:00409528                 cmp     ebx, 414EE4h
.text:0040952E                 jz      loc_409CAB
.text:00409534
.text:00409534 loc_409534:                             ; CODE XREF: _d_print_comp+1666↑j
.text:00409534                 mov     dl, [ebx]
.text:00409536                 cmp     eax, 0FFh
.text:0040953B                 jnz     short loc_409514
.text:0040953D                 mov     byte ptr [ebp+0FFh], 0
.text:00409544                 mov     eax, [ebp+10Ch]
.text:0040954A                 mov     [esp+0ACh+var_A4], eax
.text:0040954E                 mov     [esp+0ACh+var_A8], 0FFh
.text:00409556                 mov     [esp+0ACh+var_AC], ebp
.text:00409559                 mov     byte ptr [esp+0ACh+var_94], dl
.text:0040955D                 call    dword ptr [ebp+108h]
.text:00409563                 inc     dword ptr [ebp+120h]
.text:00409569                 mov     eax, 1
.text:0040956E                 xor     ecx, ecx
.text:00409570                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00409574                 jmp     short loc_409517
.text:00409576 ; ---------------------------------------------------------------------------
.text:00409576
.text:00409576 loc_409576:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00409576                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00409576                 mov     dword ptr [ebp+118h], 1 ; jumptable 00407EF0 cases 53,54
.text:00409580                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409585 ; ---------------------------------------------------------------------------
.text:00409585
.text:00409585 loc_409585:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00409585                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00409585                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 46
.text:0040958B                 mov     ebx, offset aOperator ; "operator "
.text:00409590                 jmp     short loc_4095B4
.text:00409590 ; ---------------------------------------------------------------------------
.text:00409592                 align 4
.text:00409594
.text:00409594 loc_409594:                             ; CODE XREF: _d_print_comp+170F↓j
.text:00409594                 mov     ecx, eax
.text:00409596                 inc     eax
.text:00409597
.text:00409597 loc_409597:                             ; CODE XREF: _d_print_comp+1748↓j
.text:00409597                 mov     [ebp+ecx+0], dl
.text:0040959B                 mov     [ebp+100h], eax
.text:004095A1                 mov     [ebp+104h], dl
.text:004095A7                 inc     ebx
.text:004095A8                 cmp     ebx, 414EAAh
.text:004095AE                 jz      loc_409CC2
.text:004095B4
.text:004095B4 loc_4095B4:                             ; CODE XREF: _d_print_comp+16E4↑j
.text:004095B4                 mov     dl, [ebx]
.text:004095B6                 cmp     eax, 0FFh
.text:004095BB                 jnz     short loc_409594
.text:004095BD                 mov     byte ptr [ebp+0FFh], 0
.text:004095C4                 mov     eax, [ebp+10Ch]
.text:004095CA                 mov     [esp+0ACh+var_A4], eax
.text:004095CE                 mov     [esp+0ACh+var_A8], 0FFh
.text:004095D6                 mov     [esp+0ACh+var_AC], ebp
.text:004095D9                 mov     byte ptr [esp+0ACh+var_94], dl
.text:004095DD                 call    dword ptr [ebp+108h]
.text:004095E3                 inc     dword ptr [ebp+120h]
.text:004095E9                 mov     eax, 1
.text:004095EE                 xor     ecx, ecx
.text:004095F0                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:004095F4                 jmp     short loc_409597
.text:004095F6 ; ---------------------------------------------------------------------------
.text:004095F6
.text:004095F6 loc_4095F6:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:004095F6                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:004095F6                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 47
.text:004095FC                 mov     ebx, offset aOperator ; "operator "
.text:00409601                 jmp     short loc_409624
.text:00409601 ; ---------------------------------------------------------------------------
.text:00409603                 align 4
.text:00409604
.text:00409604 loc_409604:                             ; CODE XREF: _d_print_comp+177F↓j
.text:00409604                 mov     ecx, eax
.text:00409606                 inc     eax
.text:00409607
.text:00409607 loc_409607:                             ; CODE XREF: _d_print_comp+17B8↓j
.text:00409607                 mov     [ebp+ecx+0], dl
.text:0040960B                 mov     [ebp+100h], eax
.text:00409611                 mov     [ebp+104h], dl
.text:00409617                 inc     ebx
.text:00409618                 cmp     ebx, 414EAAh
.text:0040961E                 jz      loc_409CD9
.text:00409624
.text:00409624 loc_409624:                             ; CODE XREF: _d_print_comp+1755↑j
.text:00409624                 mov     dl, [ebx]
.text:00409626                 cmp     eax, 0FFh
.text:0040962B                 jnz     short loc_409604
.text:0040962D                 mov     byte ptr [ebp+0FFh], 0
.text:00409634                 mov     eax, [ebp+10Ch]
.text:0040963A                 mov     [esp+0ACh+var_A4], eax
.text:0040963E                 mov     [esp+0ACh+var_A8], 0FFh
.text:00409646                 mov     [esp+0ACh+var_AC], ebp
.text:00409649                 mov     byte ptr [esp+0ACh+var_94], dl
.text:0040964D                 call    dword ptr [ebp+108h]
.text:00409653                 inc     dword ptr [ebp+120h]
.text:00409659                 mov     eax, 1
.text:0040965E                 xor     ecx, ecx
.text:00409660                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00409664                 jmp     short loc_409607
.text:00409666 ; ---------------------------------------------------------------------------
.text:00409666
.text:00409666 loc_409666:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00409666                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00409666                 mov     ecx, [esp+0ACh+var_90] ; jumptable 00407EF0 case 45
.text:0040966A                 mov     esi, [ecx+4]
.text:0040966D                 mov     edi, [esi+8]
.text:00409670                 mov     eax, [ebp+100h]
.text:00409676                 mov     ebx, offset aOperator_0 ; "operator"
.text:0040967B                 jmp     short loc_4096A0
.text:0040967B ; ---------------------------------------------------------------------------
.text:0040967D                 align 10h
.text:00409680
.text:00409680 loc_409680:                             ; CODE XREF: _d_print_comp+17FB↓j
.text:00409680                 mov     ecx, eax
.text:00409682                 inc     eax
.text:00409683
.text:00409683 loc_409683:                             ; CODE XREF: _d_print_comp+1834↓j
.text:00409683                 mov     [ebp+ecx+0], dl
.text:00409687                 mov     [ebp+100h], eax
.text:0040968D                 mov     [ebp+104h], dl
.text:00409693                 inc     ebx
.text:00409694                 cmp     ebx, 414EA0h
.text:0040969A                 jz      loc_4098A2
.text:004096A0
.text:004096A0 loc_4096A0:                             ; CODE XREF: _d_print_comp+17CF↑j
.text:004096A0                 mov     dl, [ebx]
.text:004096A2                 cmp     eax, 0FFh
.text:004096A7                 jnz     short loc_409680
.text:004096A9                 mov     byte ptr [ebp+0FFh], 0
.text:004096B0                 mov     eax, [ebp+10Ch]
.text:004096B6                 mov     [esp+0ACh+var_A4], eax
.text:004096BA                 mov     [esp+0ACh+var_A8], 0FFh
.text:004096C2                 mov     [esp+0ACh+var_AC], ebp
.text:004096C5                 mov     byte ptr [esp+0ACh+var_94], dl
.text:004096C9                 call    dword ptr [ebp+108h]
.text:004096CF                 inc     dword ptr [ebp+120h]
.text:004096D5                 mov     eax, 1
.text:004096DA                 xor     ecx, ecx
.text:004096DC                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:004096E0                 jmp     short loc_409683
.text:004096E2 ; ---------------------------------------------------------------------------
.text:004096E2
.text:004096E2 loc_4096E2:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:004096E2                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:004096E2                 mov     ecx, [esp+0ACh+var_90] ; jumptable 00407EF0 case 50
.text:004096E6                 mov     eax, [ecx+8]
.text:004096E9                 cmp     dword ptr [eax], 33h ; '3'
.text:004096EC                 jz      loc_40A1DA
.text:004096F2                 mov     dword ptr [ebp+118h], 1
.text:004096FC                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409701 ; ---------------------------------------------------------------------------
.text:00409701
.text:00409701 loc_409701:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00409701                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00409701                 mov     dword ptr [ebp+118h], 1 ; jumptable 00407EF0 case 51
.text:0040970B                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409710 ; ---------------------------------------------------------------------------
.text:00409710
.text:00409710 loc_409710:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00409710                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00409710                 mov     ecx, [esp+0ACh+var_90] ; jumptable 00407EF0 case 49
.text:00409714                 mov     ebx, [ecx+4]
.text:00409717                 mov     ecx, [ecx+8]
.text:0040971A                 mov     [esp+0ACh+var_90], ecx
.text:0040971E                 mov     eax, [ebx]
.text:00409720                 cmp     eax, 2Dh ; '-'
.text:00409723                 jz      loc_40A453
.text:00409729                 cmp     eax, 2Fh ; '/'
.text:0040972C                 jz      loc_40A527
.text:00409732                 mov     ecx, ebx
.text:00409734                 mov     edx, [esp+0ACh+var_8C]
.text:00409738                 mov     eax, ebp
.text:0040973A                 call    _d_print_expr_op
.text:0040973F
.text:0040973F loc_40973F:                             ; CODE XREF: _d_print_comp+25ED↓j
.text:0040973F                                         ; _d_print_comp+2619↓j ...
.text:0040973F                 mov     ecx, [esp+0ACh+var_90]
.text:00409743                 mov     edx, [esp+0ACh+var_8C]
.text:00409747                 mov     eax, ebp
.text:00409749                 call    _d_print_subexpr
.text:0040974E                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409753 ; ---------------------------------------------------------------------------
.text:00409753
.text:00409753 loc_409753:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:00409753                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:00409753                 mov     ecx, [esp+0ACh+var_90] ; jumptable 00407EF0 case 60
.text:00409757                 mov     eax, [ecx+4]
.text:0040975A                 mov     [esp+0ACh+var_A4], eax
.text:0040975E                 mov     [esp+0ACh+var_A8], offset aLd ; "%ld"
.text:00409766                 lea     ebx, [esp+0ACh+var_5C]
.text:0040976A                 mov     [esp+0ACh+var_AC], ebx ; char *
.text:0040976D                 call    _sprintf
.text:00409772                 xor     eax, eax
.text:00409774                 mov     ecx, 0FFFFFFFFh
.text:00409779                 mov     edi, ebx
.text:0040977B                 repne scasb
.text:0040977D                 not     ecx
.text:0040977F                 dec     ecx
.text:00409780                 jz      def_40A961      ; jumptable 0040A961 default case
.text:00409786                 mov     eax, [ebp+100h]
.text:0040978C                 mov     edi, ebx
.text:0040978E                 lea     esi, [ebx+ecx]
.text:00409791                 jmp     short loc_4097B0
.text:00409791 ; ---------------------------------------------------------------------------
.text:00409793                 align 4
.text:00409794
.text:00409794 loc_409794:                             ; CODE XREF: _d_print_comp+190B↓j
.text:00409794                 mov     edx, eax
.text:00409796                 inc     eax
.text:00409797
.text:00409797 loc_409797:                             ; CODE XREF: _d_print_comp+193C↓j
.text:00409797                 mov     [ebp+edx+0], bl
.text:0040979B                 mov     [ebp+100h], eax
.text:004097A1                 mov     [ebp+104h], bl
.text:004097A7                 inc     edi
.text:004097A8                 cmp     edi, esi
.text:004097AA                 jz      def_40A961      ; jumptable 0040A961 default case
.text:004097B0
.text:004097B0 loc_4097B0:                             ; CODE XREF: _d_print_comp+18E5↑j
.text:004097B0                 mov     bl, [edi]
.text:004097B2                 cmp     eax, 0FFh
.text:004097B7                 jnz     short loc_409794
.text:004097B9                 mov     byte ptr [ebp+0FFh], 0
.text:004097C0                 mov     eax, [ebp+10Ch]
.text:004097C6                 mov     [esp+0ACh+var_A4], eax
.text:004097CA                 mov     [esp+0ACh+var_A8], 0FFh
.text:004097D2                 mov     [esp+0ACh+var_AC], ebp
.text:004097D5                 call    dword ptr [ebp+108h]
.text:004097DB                 inc     dword ptr [ebp+120h]
.text:004097E1                 mov     eax, 1
.text:004097E6                 xor     edx, edx
.text:004097E8                 jmp     short loc_409797
.text:004097EA ; ---------------------------------------------------------------------------
.text:004097EA
.text:004097EA loc_4097EA:                             ; CODE XREF: _d_print_comp:loc_407EF0↑j
.text:004097EA                                         ; DATA XREF: .rdata:jpt_407EF0↓o
.text:004097EA                 mov     eax, [ebp+100h] ; jumptable 00407EF0 case 61
.text:004097F0                 mov     ebx, offset aDecltype ; "decltype ("
.text:004097F5                 jmp     short loc_409818
.text:004097F5 ; ---------------------------------------------------------------------------
.text:004097F7                 align 4
.text:004097F8
.text:004097F8 loc_4097F8:                             ; CODE XREF: _d_print_comp+1973↓j
.text:004097F8                 mov     ecx, eax
.text:004097FA                 inc     eax
.text:004097FB
.text:004097FB loc_4097FB:                             ; CODE XREF: _d_print_comp+19AC↓j
.text:004097FB                 mov     [ebp+ecx+0], dl
.text:004097FF                 mov     [ebp+100h], eax
.text:00409805                 mov     [ebp+104h], dl
.text:0040980B                 inc     ebx
.text:0040980C                 cmp     ebx, 414EEFh
.text:00409812                 jz      loc_409C6E
.text:00409818
.text:00409818 loc_409818:                             ; CODE XREF: _d_print_comp+1949↑j
.text:00409818                 mov     dl, [ebx]
.text:0040981A                 cmp     eax, 0FFh
.text:0040981F                 jnz     short loc_4097F8
.text:00409821                 mov     byte ptr [ebp+0FFh], 0
.text:00409828                 mov     eax, [ebp+10Ch]
.text:0040982E                 mov     [esp+0ACh+var_A4], eax
.text:00409832                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040983A                 mov     [esp+0ACh+var_AC], ebp
.text:0040983D                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00409841                 call    dword ptr [ebp+108h]
.text:00409847                 inc     dword ptr [ebp+120h]
.text:0040984D                 mov     eax, 1
.text:00409852                 xor     ecx, ecx
.text:00409854                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00409858                 jmp     short loc_4097FB
.text:00409858 ; ---------------------------------------------------------------------------
.text:0040985A                 align 4
.text:0040985C
.text:0040985C loc_40985C:                             ; CODE XREF: _d_print_comp+166↑j
.text:0040985C                 mov     ebx, [esp+0ACh+var_84]
.text:00409860                 jmp     loc_407FC0
.text:00409865 ; ---------------------------------------------------------------------------
.text:00409865
.text:00409865 loc_409865:                             ; CODE XREF: _d_print_comp+1362↑j
.text:00409865                 mov     eax, [esp+0ACh+var_90]
.text:00409869                 mov     ecx, [eax+8]
.text:0040986C                 mov     edx, [esp+0ACh+var_8C]
.text:00409870                 mov     eax, ebp
.text:00409872                 call    _d_print_comp
.text:00409877                 mov     eax, [ebp+100h]
.text:0040987D                 cmp     eax, 0FFh
.text:00409882                 jz      loc_40A5E9
.text:00409888                 lea     edx, [eax+1]
.text:0040988B
.text:0040988B loc_40988B:                             ; CODE XREF: _d_print_comp+276C↓j
.text:0040988B                 mov     byte ptr [ebp+eax+0], 5Dh ; ']'
.text:00409890                 mov     [ebp+100h], edx
.text:00409896                 mov     byte ptr [ebp+104h], 5Dh ; ']'
.text:0040989D                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:004098A2 ; ---------------------------------------------------------------------------
.text:004098A2
.text:004098A2 loc_4098A2:                             ; CODE XREF: _d_print_comp+17EE↑j
.text:004098A2                 mov     ebx, [esi+4]
.text:004098A5                 mov     dl, [ebx]
.text:004098A7                 sub     edx, 61h ; 'a'
.text:004098AA                 cmp     dl, 19h
.text:004098AD                 jbe     loc_40A381
.text:004098B3
.text:004098B3 loc_4098B3:                             ; CODE XREF: _d_print_comp+24F6↓j
.text:004098B3                 cmp     byte ptr [ebx+edi-1], 20h ; ' '
.text:004098B8                 jnz     short loc_4098BB
.text:004098BA                 dec     edi
.text:004098BB
.text:004098BB loc_4098BB:                             ; CODE XREF: _d_print_comp+1A0C↑j
.text:004098BB                 test    edi, edi
.text:004098BD                 jz      def_40A961      ; jumptable 0040A961 default case
.text:004098C3                 mov     eax, [ebp+100h]
.text:004098C9                 xor     esi, esi
.text:004098CB                 mov     ecx, ebx
.text:004098CD                 jmp     short loc_4098EC
.text:004098CD ; ---------------------------------------------------------------------------
.text:004098CF                 align 10h
.text:004098D0
.text:004098D0 loc_4098D0:                             ; CODE XREF: _d_print_comp+1A48↓j
.text:004098D0                 mov     edx, eax
.text:004098D2                 inc     eax
.text:004098D3
.text:004098D3 loc_4098D3:                             ; CODE XREF: _d_print_comp+1A81↓j
.text:004098D3                 mov     [ebp+edx+0], bl
.text:004098D7                 mov     [ebp+100h], eax
.text:004098DD                 mov     [ebp+104h], bl
.text:004098E3                 inc     esi
.text:004098E4                 cmp     edi, esi
.text:004098E6                 jz      def_40A961      ; jumptable 0040A961 default case
.text:004098EC
.text:004098EC loc_4098EC:                             ; CODE XREF: _d_print_comp+1A21↑j
.text:004098EC                 mov     bl, [ecx+esi]
.text:004098EF                 cmp     eax, 0FFh
.text:004098F4                 jnz     short loc_4098D0
.text:004098F6                 mov     byte ptr [ebp+0FFh], 0
.text:004098FD                 mov     eax, [ebp+10Ch]
.text:00409903                 mov     [esp+0ACh+var_A4], eax
.text:00409907                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040990F                 mov     [esp+0ACh+var_AC], ebp
.text:00409912                 mov     [esp+0ACh+var_94], ecx
.text:00409916                 call    dword ptr [ebp+108h]
.text:0040991C                 inc     dword ptr [ebp+120h]
.text:00409922                 mov     eax, 1
.text:00409927                 xor     edx, edx
.text:00409929                 mov     ecx, [esp+0ACh+var_94]
.text:0040992D                 jmp     short loc_4098D3
.text:0040992F ; ---------------------------------------------------------------------------
.text:0040992F
.text:0040992F loc_40992F:                             ; CODE XREF: _d_print_comp+70E↑j
.text:0040992F                 mov     edx, [esp+0ACh+var_90]
.text:00409933                 mov     ecx, [edx+4]
.text:00409936                 mov     edx, [esp+0ACh+var_8C]
.text:0040993A                 mov     eax, ebp
.text:0040993C                 call    _d_print_comp
.text:00409941                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409946 ; ---------------------------------------------------------------------------
.text:00409946
.text:00409946 loc_409946:                             ; CODE XREF: _d_print_comp+69E↑j
.text:00409946                 mov     eax, [esp+0ACh+var_90]
.text:0040994A                 mov     ecx, [eax+4]
.text:0040994D                 mov     edx, [esp+0ACh+var_8C]
.text:00409951                 mov     eax, ebp
.text:00409953                 call    _d_print_comp
.text:00409958                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040995D ; ---------------------------------------------------------------------------
.text:0040995D
.text:0040995D loc_40995D:                             ; CODE XREF: _d_print_comp+62E↑j
.text:0040995D                 mov     esi, [esp+0ACh+var_90]
.text:00409961                 mov     ecx, [esi+4]
.text:00409964                 mov     edx, [esp+0ACh+var_8C]
.text:00409968                 mov     eax, ebp
.text:0040996A                 call    _d_print_comp
.text:0040996F                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409974 ; ---------------------------------------------------------------------------
.text:00409974
.text:00409974 loc_409974:                             ; CODE XREF: _d_print_comp+5BE↑j
.text:00409974                 mov     edx, [esp+0ACh+var_90]
.text:00409978                 mov     ecx, [edx+4]
.text:0040997B                 mov     edx, [esp+0ACh+var_8C]
.text:0040997F                 mov     eax, ebp
.text:00409981                 call    _d_print_comp
.text:00409986                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040998B ; ---------------------------------------------------------------------------
.text:0040998B
.text:0040998B loc_40998B:                             ; CODE XREF: _d_print_comp+54E↑j
.text:0040998B                 mov     esi, [esp+0ACh+var_90]
.text:0040998F                 mov     ecx, [esi+4]
.text:00409992                 mov     edx, [esp+0ACh+var_8C]
.text:00409996                 mov     eax, ebp
.text:00409998                 call    _d_print_comp
.text:0040999D                 mov     eax, [ebp+100h]
.text:004099A3                 mov     ebx, offset aIn ; "-in-"
.text:004099A8                 jmp     short loc_4099C8
.text:004099A8 ; ---------------------------------------------------------------------------
.text:004099AA                 align 4
.text:004099AC
.text:004099AC loc_4099AC:                             ; CODE XREF: _d_print_comp+1B23↓j
.text:004099AC                 mov     ecx, eax
.text:004099AE                 inc     eax
.text:004099AF
.text:004099AF loc_4099AF:                             ; CODE XREF: _d_print_comp+1B5C↓j
.text:004099AF                 mov     [ebp+ecx+0], dl
.text:004099B3                 mov     [ebp+100h], eax
.text:004099B9                 mov     [ebp+104h], dl
.text:004099BF                 inc     ebx
.text:004099C0                 cmp     ebx, 414D87h
.text:004099C6                 jz      short loc_409A0A
.text:004099C8
.text:004099C8 loc_4099C8:                             ; CODE XREF: _d_print_comp+1AFC↑j
.text:004099C8                 mov     dl, [ebx]
.text:004099CA                 cmp     eax, 0FFh
.text:004099CF                 jnz     short loc_4099AC
.text:004099D1                 mov     byte ptr [ebp+0FFh], 0
.text:004099D8                 mov     eax, [ebp+10Ch]
.text:004099DE                 mov     [esp+0ACh+var_A4], eax
.text:004099E2                 mov     [esp+0ACh+var_A8], 0FFh
.text:004099EA                 mov     [esp+0ACh+var_AC], ebp
.text:004099ED                 mov     byte ptr [esp+0ACh+var_94], dl
.text:004099F1                 call    dword ptr [ebp+108h]
.text:004099F7                 inc     dword ptr [ebp+120h]
.text:004099FD                 mov     eax, 1
.text:00409A02                 xor     ecx, ecx
.text:00409A04                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00409A08                 jmp     short loc_4099AF
.text:00409A0A ; ---------------------------------------------------------------------------
.text:00409A0A
.text:00409A0A loc_409A0A:                             ; CODE XREF: _d_print_comp+1B1A↑j
.text:00409A0A                 mov     eax, [esp+0ACh+var_90]
.text:00409A0E                 mov     ecx, [eax+8]
.text:00409A11                 mov     edx, [esp+0ACh+var_8C]
.text:00409A15                 mov     eax, ebp
.text:00409A17                 call    _d_print_comp
.text:00409A1C                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409A21 ; ---------------------------------------------------------------------------
.text:00409A21
.text:00409A21 loc_409A21:                             ; CODE XREF: _d_print_comp+4DE↑j
.text:00409A21                 mov     edx, [esp+0ACh+var_90]
.text:00409A25                 mov     ecx, [edx+4]
.text:00409A28                 mov     edx, [esp+0ACh+var_8C]
.text:00409A2C                 mov     eax, ebp
.text:00409A2E                 call    _d_print_comp
.text:00409A33                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409A38 ; ---------------------------------------------------------------------------
.text:00409A38
.text:00409A38 loc_409A38:                             ; CODE XREF: _d_print_comp+46E↑j
.text:00409A38                 mov     eax, [esp+0ACh+var_90]
.text:00409A3C                 mov     ecx, [eax+4]
.text:00409A3F                 mov     edx, [esp+0ACh+var_8C]
.text:00409A43                 mov     eax, ebp
.text:00409A45                 call    _d_print_comp
.text:00409A4A                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409A4F ; ---------------------------------------------------------------------------
.text:00409A4F
.text:00409A4F loc_409A4F:                             ; CODE XREF: _d_print_comp+3FE↑j
.text:00409A4F                 mov     ecx, [esp+0ACh+var_90]
.text:00409A53                 mov     eax, [ecx+4]
.text:00409A56                 inc     eax
.text:00409A57                 mov     [esp+0ACh+var_A4], eax
.text:00409A5B                 mov     [esp+0ACh+var_A8], offset aLd ; "%ld"
.text:00409A63                 lea     ebx, [esp+0ACh+var_5C]
.text:00409A67                 mov     [esp+0ACh+var_AC], ebx ; char *
.text:00409A6A                 call    _sprintf
.text:00409A6F                 xor     eax, eax
.text:00409A71                 mov     ecx, 0FFFFFFFFh
.text:00409A76                 mov     edi, ebx
.text:00409A78                 repne scasb
.text:00409A7A                 not     ecx
.text:00409A7C                 mov     eax, [ebp+100h]
.text:00409A82                 dec     ecx
.text:00409A83                 jz      short loc_409ADE
.text:00409A85                 mov     edi, ebx
.text:00409A87                 lea     esi, [ebx+ecx]
.text:00409A8A                 jmp     short loc_409AA4
.text:00409A8C ; ---------------------------------------------------------------------------
.text:00409A8C
.text:00409A8C loc_409A8C:                             ; CODE XREF: _d_print_comp+1BFF↓j
.text:00409A8C                 mov     edx, eax
.text:00409A8E                 inc     eax
.text:00409A8F
.text:00409A8F loc_409A8F:                             ; CODE XREF: _d_print_comp+1C30↓j
.text:00409A8F                 mov     [ebp+edx+0], bl
.text:00409A93                 mov     [ebp+100h], eax
.text:00409A99                 mov     [ebp+104h], bl
.text:00409A9F                 inc     edi
.text:00409AA0                 cmp     edi, esi
.text:00409AA2                 jz      short loc_409ADE
.text:00409AA4
.text:00409AA4 loc_409AA4:                             ; CODE XREF: _d_print_comp+1BDE↑j
.text:00409AA4                 mov     bl, [edi]
.text:00409AA6                 cmp     eax, 0FFh
.text:00409AAB                 jnz     short loc_409A8C
.text:00409AAD                 mov     byte ptr [ebp+0FFh], 0
.text:00409AB4                 mov     eax, [ebp+10Ch]
.text:00409ABA                 mov     [esp+0ACh+var_A4], eax
.text:00409ABE                 mov     [esp+0ACh+var_A8], 0FFh
.text:00409AC6                 mov     [esp+0ACh+var_AC], ebp
.text:00409AC9                 call    dword ptr [ebp+108h]
.text:00409ACF                 inc     dword ptr [ebp+120h]
.text:00409AD5                 mov     eax, 1
.text:00409ADA                 xor     edx, edx
.text:00409ADC                 jmp     short loc_409A8F
.text:00409ADE ; ---------------------------------------------------------------------------
.text:00409ADE
.text:00409ADE loc_409ADE:                             ; CODE XREF: _d_print_comp+1BD7↑j
.text:00409ADE                                         ; _d_print_comp+1BF6↑j
.text:00409ADE                 cmp     eax, 0FFh
.text:00409AE3                 jz      loc_40A6ED
.text:00409AE9                 lea     edx, [eax+1]
.text:00409AEC
.text:00409AEC loc_409AEC:                             ; CODE XREF: _d_print_comp+2870↓j
.text:00409AEC                 mov     byte ptr [ebp+eax+0], 7Dh ; '}'
.text:00409AF1                 mov     [ebp+100h], edx
.text:00409AF7                 mov     byte ptr [ebp+104h], 7Dh ; '}'
.text:00409AFE                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409B03 ; ---------------------------------------------------------------------------
.text:00409B03
.text:00409B03 loc_409B03:                             ; CODE XREF: _d_print_comp+38E↑j
.text:00409B03                 mov     edx, [esp+0ACh+var_90]
.text:00409B07                 mov     ecx, [edx+4]
.text:00409B0A                 mov     edx, [esp+0ACh+var_8C]
.text:00409B0E                 mov     eax, ebp
.text:00409B10                 call    _d_print_comp
.text:00409B15                 mov     eax, [ebp+100h]
.text:00409B1B                 mov     ebx, offset asc_414F44 ; ")#"
.text:00409B20                 jmp     short loc_409B40
.text:00409B20 ; ---------------------------------------------------------------------------
.text:00409B22                 align 4
.text:00409B24
.text:00409B24 loc_409B24:                             ; CODE XREF: _d_print_comp+1C9B↓j
.text:00409B24                 mov     ecx, eax
.text:00409B26                 inc     eax
.text:00409B27
.text:00409B27 loc_409B27:                             ; CODE XREF: _d_print_comp+1CD4↓j
.text:00409B27                 mov     [ebp+ecx+0], dl
.text:00409B2B                 mov     [ebp+100h], eax
.text:00409B31                 mov     [ebp+104h], dl
.text:00409B37                 inc     ebx
.text:00409B38                 cmp     ebx, 414F46h
.text:00409B3E                 jz      short loc_409B82
.text:00409B40
.text:00409B40 loc_409B40:                             ; CODE XREF: _d_print_comp+1C74↑j
.text:00409B40                 mov     dl, [ebx]
.text:00409B42                 cmp     eax, 0FFh
.text:00409B47                 jnz     short loc_409B24
.text:00409B49                 mov     byte ptr [ebp+0FFh], 0
.text:00409B50                 mov     eax, [ebp+10Ch]
.text:00409B56                 mov     [esp+0ACh+var_A4], eax
.text:00409B5A                 mov     [esp+0ACh+var_A8], 0FFh
.text:00409B62                 mov     [esp+0ACh+var_AC], ebp
.text:00409B65                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00409B69                 call    dword ptr [ebp+108h]
.text:00409B6F                 inc     dword ptr [ebp+120h]
.text:00409B75                 mov     eax, 1
.text:00409B7A                 xor     ecx, ecx
.text:00409B7C                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00409B80                 jmp     short loc_409B27
.text:00409B82 ; ---------------------------------------------------------------------------
.text:00409B82
.text:00409B82 loc_409B82:                             ; CODE XREF: _d_print_comp+1C92↑j
.text:00409B82                 mov     ecx, [esp+0ACh+var_90]
.text:00409B86                 mov     eax, [ecx+8]
.text:00409B89                 inc     eax
.text:00409B8A                 mov     [esp+0ACh+var_A4], eax
.text:00409B8E                 mov     [esp+0ACh+var_A8], offset aLd ; "%ld"
.text:00409B96                 lea     ebx, [esp+0ACh+var_5C]
.text:00409B9A                 mov     [esp+0ACh+var_AC], ebx ; char *
.text:00409B9D                 call    _sprintf
.text:00409BA2                 xor     eax, eax
.text:00409BA4                 mov     ecx, 0FFFFFFFFh
.text:00409BA9                 mov     edi, ebx
.text:00409BAB                 repne scasb
.text:00409BAD                 not     ecx
.text:00409BAF                 mov     eax, [ebp+100h]
.text:00409BB5                 dec     ecx
.text:00409BB6                 jz      short loc_409C12
.text:00409BB8                 mov     edi, ebx
.text:00409BBA                 lea     esi, [ebx+ecx]
.text:00409BBD                 jmp     short loc_409BD8
.text:00409BBD ; ---------------------------------------------------------------------------
.text:00409BBF                 align 10h
.text:00409BC0
.text:00409BC0 loc_409BC0:                             ; CODE XREF: _d_print_comp+1D33↓j
.text:00409BC0                 mov     edx, eax
.text:00409BC2                 inc     eax
.text:00409BC3
.text:00409BC3 loc_409BC3:                             ; CODE XREF: _d_print_comp+1D64↓j
.text:00409BC3                 mov     [ebp+edx+0], bl
.text:00409BC7                 mov     [ebp+100h], eax
.text:00409BCD                 mov     [ebp+104h], bl
.text:00409BD3                 inc     edi
.text:00409BD4                 cmp     edi, esi
.text:00409BD6                 jz      short loc_409C12
.text:00409BD8
.text:00409BD8 loc_409BD8:                             ; CODE XREF: _d_print_comp+1D11↑j
.text:00409BD8                 mov     bl, [edi]
.text:00409BDA                 cmp     eax, 0FFh
.text:00409BDF                 jnz     short loc_409BC0
.text:00409BE1                 mov     byte ptr [ebp+0FFh], 0
.text:00409BE8                 mov     eax, [ebp+10Ch]
.text:00409BEE                 mov     [esp+0ACh+var_A4], eax
.text:00409BF2                 mov     [esp+0ACh+var_A8], 0FFh
.text:00409BFA                 mov     [esp+0ACh+var_AC], ebp
.text:00409BFD                 call    dword ptr [ebp+108h]
.text:00409C03                 inc     dword ptr [ebp+120h]
.text:00409C09                 mov     eax, 1
.text:00409C0E                 xor     edx, edx
.text:00409C10                 jmp     short loc_409BC3
.text:00409C12 ; ---------------------------------------------------------------------------
.text:00409C12
.text:00409C12 loc_409C12:                             ; CODE XREF: _d_print_comp+1D0A↑j
.text:00409C12                                         ; _d_print_comp+1D2A↑j
.text:00409C12                 cmp     eax, 0FFh
.text:00409C17                 jz      loc_40A5B5
.text:00409C1D                 lea     edx, [eax+1]
.text:00409C20
.text:00409C20 loc_409C20:                             ; CODE XREF: _d_print_comp+2738↓j
.text:00409C20                 mov     byte ptr [ebp+eax+0], 7Dh ; '}'
.text:00409C25                 mov     [ebp+100h], edx
.text:00409C2B                 mov     byte ptr [ebp+104h], 7Dh ; '}'
.text:00409C32                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409C37 ; ---------------------------------------------------------------------------
.text:00409C37
.text:00409C37 loc_409C37:                             ; CODE XREF: _d_print_comp+BAC↑j
.text:00409C37                 cmp     eax, 0FFh
.text:00409C3C                 jz      loc_40AB6D
.text:00409C42                 lea     edx, [eax+1]
.text:00409C45
.text:00409C45 loc_409C45:                             ; CODE XREF: _d_print_comp+2CF0↓j
.text:00409C45                 mov     byte ptr [ebp+eax+0], 2Eh ; '.'
.text:00409C4A                 mov     [ebp+100h], edx
.text:00409C50                 mov     byte ptr [ebp+104h], 2Eh ; '.'
.text:00409C57
.text:00409C57 loc_409C57:                             ; CODE XREF: _d_print_comp+BD6↑j
.text:00409C57                 mov     eax, [esp+0ACh+var_90]
.text:00409C5B                 mov     ecx, [eax+8]
.text:00409C5E                 mov     edx, [esp+0ACh+var_8C]
.text:00409C62                 mov     eax, ebp
.text:00409C64                 call    _d_print_comp
.text:00409C69                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409C6E ; ---------------------------------------------------------------------------
.text:00409C6E
.text:00409C6E loc_409C6E:                             ; CODE XREF: _d_print_comp+1966↑j
.text:00409C6E                 mov     esi, [esp+0ACh+var_90]
.text:00409C72                 mov     ecx, [esi+4]
.text:00409C75                 mov     edx, [esp+0ACh+var_8C]
.text:00409C79                 mov     eax, ebp
.text:00409C7B                 call    _d_print_comp
.text:00409C80                 mov     eax, [ebp+100h]
.text:00409C86                 cmp     eax, 0FFh
.text:00409C8B                 jz      loc_40A755
.text:00409C91                 lea     edx, [eax+1]
.text:00409C94
.text:00409C94 loc_409C94:                             ; CODE XREF: _d_print_comp+28D8↓j
.text:00409C94                 mov     byte ptr [ebp+eax+0], 29h ; ')'
.text:00409C99                 mov     [ebp+100h], edx
.text:00409C9F                 mov     byte ptr [ebp+104h], 29h ; ')'
.text:00409CA6                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409CAB ; ---------------------------------------------------------------------------
.text:00409CAB
.text:00409CAB loc_409CAB:                             ; CODE XREF: _d_print_comp+1682↑j
.text:00409CAB                 mov     esi, [esp+0ACh+var_90]
.text:00409CAF                 mov     ecx, [esi+4]
.text:00409CB2                 mov     edx, [esp+0ACh+var_8C]
.text:00409CB6                 mov     eax, ebp
.text:00409CB8                 call    _d_print_comp
.text:00409CBD                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409CC2 ; ---------------------------------------------------------------------------
.text:00409CC2
.text:00409CC2 loc_409CC2:                             ; CODE XREF: _d_print_comp+1702↑j
.text:00409CC2                 mov     esi, [esp+0ACh+var_90]
.text:00409CC6                 mov     ecx, [esi+8]
.text:00409CC9                 mov     edx, [esp+0ACh+var_8C]
.text:00409CCD                 mov     eax, ebp
.text:00409CCF                 call    _d_print_comp
.text:00409CD4                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409CD9 ; ---------------------------------------------------------------------------
.text:00409CD9
.text:00409CD9 loc_409CD9:                             ; CODE XREF: _d_print_comp+1772↑j
.text:00409CD9                 mov     ecx, [esp+0ACh+var_90]
.text:00409CDD                 add     ecx, 4
.text:00409CE0                 mov     edx, [esp+0ACh+var_8C]
.text:00409CE4                 mov     eax, ebp
.text:00409CE6                 call    _d_print_cast_isra_10
.text:00409CEB                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409CF0 ; ---------------------------------------------------------------------------
.text:00409CF0
.text:00409CF0 loc_409CF0:                             ; CODE XREF: _d_print_comp+1CE↑j
.text:00409CF0                 mov     eax, [esp+0ACh+var_90]
.text:00409CF4                 mov     ecx, [eax+4]
.text:00409CF7                 mov     edx, [esp+0ACh+var_8C]
.text:00409CFB                 mov     eax, ebp
.text:00409CFD                 call    _d_print_comp
.text:00409D02                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409D07 ; ---------------------------------------------------------------------------
.text:00409D07
.text:00409D07 loc_409D07:                             ; CODE XREF: _d_print_comp+2AE↑j
.text:00409D07                 mov     esi, [esp+0ACh+var_90]
.text:00409D0B                 mov     ecx, [esi+4]
.text:00409D0E                 mov     edx, [esp+0ACh+var_8C]
.text:00409D12                 mov     eax, ebp
.text:00409D14                 call    _d_print_comp
.text:00409D19                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409D1E ; ---------------------------------------------------------------------------
.text:00409D1E
.text:00409D1E loc_409D1E:                             ; CODE XREF: _d_print_comp+23E↑j
.text:00409D1E                 mov     edx, [esp+0ACh+var_90]
.text:00409D22                 mov     ecx, [edx+4]
.text:00409D25                 mov     edx, [esp+0ACh+var_8C]
.text:00409D29                 mov     eax, ebp
.text:00409D2B                 call    _d_print_comp
.text:00409D30                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409D35 ; ---------------------------------------------------------------------------
.text:00409D35
.text:00409D35 loc_409D35:                             ; CODE XREF: _d_print_comp+31E↑j
.text:00409D35                 mov     eax, [esp+0ACh+var_90]
.text:00409D39                 mov     ecx, [eax+4]
.text:00409D3C                 mov     edx, [esp+0ACh+var_8C]
.text:00409D40                 mov     eax, ebp
.text:00409D42                 call    _d_print_comp
.text:00409D47                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409D4C ; ---------------------------------------------------------------------------
.text:00409D4C
.text:00409D4C loc_409D4C:                             ; CODE XREF: _d_print_comp+8CE↑j
.text:00409D4C                 mov     esi, [esp+0ACh+var_90]
.text:00409D50                 mov     ecx, [esi+4]
.text:00409D53                 mov     edx, [esp+0ACh+var_8C]
.text:00409D57                 mov     eax, ebp
.text:00409D59                 call    _d_print_comp
.text:00409D5E                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409D63 ; ---------------------------------------------------------------------------
.text:00409D63
.text:00409D63 loc_409D63:                             ; CODE XREF: _d_print_comp+85E↑j
.text:00409D63                 mov     edx, [esp+0ACh+var_90]
.text:00409D67                 mov     ecx, [edx+4]
.text:00409D6A                 mov     edx, [esp+0ACh+var_8C]
.text:00409D6E                 mov     eax, ebp
.text:00409D70                 call    _d_print_comp
.text:00409D75                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409D7A ; ---------------------------------------------------------------------------
.text:00409D7A
.text:00409D7A loc_409D7A:                             ; CODE XREF: _d_print_comp+7EE↑j
.text:00409D7A                 mov     eax, [esp+0ACh+var_90]
.text:00409D7E                 mov     ecx, [eax+4]
.text:00409D81                 mov     edx, [esp+0ACh+var_8C]
.text:00409D85                 mov     eax, ebp
.text:00409D87                 call    _d_print_comp
.text:00409D8C                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409D91 ; ---------------------------------------------------------------------------
.text:00409D91
.text:00409D91 loc_409D91:                             ; CODE XREF: _d_print_comp+77E↑j
.text:00409D91                 mov     esi, [esp+0ACh+var_90]
.text:00409D95                 mov     ecx, [esi+4]
.text:00409D98                 mov     edx, [esp+0ACh+var_8C]
.text:00409D9C                 mov     eax, ebp
.text:00409D9E                 call    _d_print_comp
.text:00409DA3                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409DA8 ; ---------------------------------------------------------------------------
.text:00409DA8
.text:00409DA8 loc_409DA8:                             ; CODE XREF: _d_print_comp+9AE↑j
.text:00409DA8                 mov     esi, [esp+0ACh+var_90]
.text:00409DAC                 mov     ecx, [esi+4]
.text:00409DAF                 mov     edx, [esp+0ACh+var_8C]
.text:00409DB3                 mov     eax, ebp
.text:00409DB5                 call    _d_print_comp
.text:00409DBA                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409DBF ; ---------------------------------------------------------------------------
.text:00409DBF
.text:00409DBF loc_409DBF:                             ; CODE XREF: _d_print_comp+93E↑j
.text:00409DBF                 mov     eax, [esp+0ACh+var_90]
.text:00409DC3                 mov     ecx, [eax+8]
.text:00409DC6                 mov     edx, [esp+0ACh+var_8C]
.text:00409DCA                 mov     eax, ebp
.text:00409DCC                 call    _d_print_comp
.text:00409DD1                 mov     eax, [ebp+100h]
.text:00409DD7                 mov     ebx, offset aFor ; " for "
.text:00409DDC                 jmp     short loc_409DFC
.text:00409DDC ; ---------------------------------------------------------------------------
.text:00409DDE                 align 10h
.text:00409DE0
.text:00409DE0 loc_409DE0:                             ; CODE XREF: _d_print_comp+1F57↓j
.text:00409DE0                 mov     ecx, eax
.text:00409DE2                 inc     eax
.text:00409DE3
.text:00409DE3 loc_409DE3:                             ; CODE XREF: _d_print_comp+1F90↓j
.text:00409DE3                 mov     [ebp+ecx+0], dl
.text:00409DE7                 mov     [ebp+100h], eax
.text:00409DED                 mov     [ebp+104h], dl
.text:00409DF3                 inc     ebx
.text:00409DF4                 cmp     ebx, 414E3Ch
.text:00409DFA                 jz      short loc_409E3E
.text:00409DFC
.text:00409DFC loc_409DFC:                             ; CODE XREF: _d_print_comp+1F30↑j
.text:00409DFC                 mov     dl, [ebx]
.text:00409DFE                 cmp     eax, 0FFh
.text:00409E03                 jnz     short loc_409DE0
.text:00409E05                 mov     byte ptr [ebp+0FFh], 0
.text:00409E0C                 mov     eax, [ebp+10Ch]
.text:00409E12                 mov     [esp+0ACh+var_A4], eax
.text:00409E16                 mov     [esp+0ACh+var_A8], 0FFh
.text:00409E1E                 mov     [esp+0ACh+var_AC], ebp
.text:00409E21                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00409E25                 call    dword ptr [ebp+108h]
.text:00409E2B                 inc     dword ptr [ebp+120h]
.text:00409E31                 mov     eax, 1
.text:00409E36                 xor     ecx, ecx
.text:00409E38                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00409E3C                 jmp     short loc_409DE3
.text:00409E3E ; ---------------------------------------------------------------------------
.text:00409E3E
.text:00409E3E loc_409E3E:                             ; CODE XREF: _d_print_comp+1F4E↑j
.text:00409E3E                 mov     edx, [esp+0ACh+var_90]
.text:00409E42                 mov     ecx, [edx+4]
.text:00409E45                 mov     edx, [esp+0ACh+var_8C]
.text:00409E49                 mov     eax, ebp
.text:00409E4B                 call    _d_print_comp
.text:00409E50                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409E55 ; ---------------------------------------------------------------------------
.text:00409E55
.text:00409E55 loc_409E55:                             ; CODE XREF: _d_print_comp+1402↑j
.text:00409E55                 mov     esi, [ebp+120h]
.text:00409E5B                 mov     eax, [esp+0ACh+var_90]
.text:00409E5F                 mov     ecx, [eax+8]
.text:00409E62                 mov     edx, [esp+0ACh+var_8C]
.text:00409E66                 mov     eax, ebp
.text:00409E68                 call    _d_print_comp
.text:00409E6D                 cmp     esi, [ebp+120h]
.text:00409E73                 jnz     def_40A961      ; jumptable 0040A961 default case
.text:00409E79                 cmp     [ebp+100h], ebx
.text:00409E7F                 jnz     def_40A961      ; jumptable 0040A961 default case
.text:00409E85                 sub     ebx, 2
.text:00409E88                 mov     [ebp+100h], ebx
.text:00409E8E                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409E93 ; ---------------------------------------------------------------------------
.text:00409E93
.text:00409E93 loc_409E93:                             ; CODE XREF: _d_print_comp+CA6↑j
.text:00409E93                 mov     dword ptr [ebp+118h], 1
.text:00409E9D                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409EA2 ; ---------------------------------------------------------------------------
.text:00409EA2
.text:00409EA2 loc_409EA2:                             ; CODE XREF: _d_print_comp+E3↑j
.text:00409EA2                                         ; _d_print_comp+EE↑j
.text:00409EA2                 mov     ecx, [esp+0ACh+var_90]
.text:00409EA6                 mov     ecx, [ecx+4]
.text:00409EA9                 mov     [esp+0ACh+var_90], ecx
.text:00409EAD                 test    edi, edi
.text:00409EAF                 jnz     loc_407FB3
.text:00409EB5                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:00409EBA ; ---------------------------------------------------------------------------
.text:00409EBA
.text:00409EBA loc_409EBA:                             ; CODE XREF: _d_print_comp+15AF↑j
.text:00409EBA                 xor     ebx, ebx
.text:00409EBC                 jmp     loc_409480
.text:00409EC1 ; ---------------------------------------------------------------------------
.text:00409EC1
.text:00409EC1 loc_409EC1:                             ; CODE XREF: _d_print_comp+11A8↑j
.text:00409EC1                 mov     ebx, offset aFract ; "_Fract"
.text:00409EC6                 jmp     short loc_409EE8
.text:00409EC8 ; ---------------------------------------------------------------------------
.text:00409EC8
.text:00409EC8 loc_409EC8:                             ; CODE XREF: _d_print_comp+2043↓j
.text:00409EC8                 mov     ecx, eax
.text:00409ECA                 inc     eax
.text:00409ECB
.text:00409ECB loc_409ECB:                             ; CODE XREF: _d_print_comp+207C↓j
.text:00409ECB                 mov     [ebp+ecx+0], dl
.text:00409ECF                 mov     [ebp+100h], eax
.text:00409ED5                 mov     [ebp+104h], dl
.text:00409EDB                 inc     ebx
.text:00409EDC                 cmp     ebx, 414E94h
.text:00409EE2                 jz      def_40A961      ; jumptable 0040A961 default case
.text:00409EE8
.text:00409EE8 loc_409EE8:                             ; CODE XREF: _d_print_comp+201A↑j
.text:00409EE8                 mov     dl, [ebx]
.text:00409EEA                 cmp     eax, 0FFh
.text:00409EEF                 jnz     short loc_409EC8
.text:00409EF1                 mov     byte ptr [ebp+0FFh], 0
.text:00409EF8                 mov     eax, [ebp+10Ch]
.text:00409EFE                 mov     [esp+0ACh+var_A4], eax
.text:00409F02                 mov     [esp+0ACh+var_A8], 0FFh
.text:00409F0A                 mov     [esp+0ACh+var_AC], ebp
.text:00409F0D                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00409F11                 call    dword ptr [ebp+108h]
.text:00409F17                 inc     dword ptr [ebp+120h]
.text:00409F1D                 mov     eax, 1
.text:00409F22                 xor     ecx, ecx
.text:00409F24                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00409F28                 jmp     short loc_409ECB
.text:00409F2A ; ---------------------------------------------------------------------------
.text:00409F2A
.text:00409F2A loc_409F2A:                             ; CODE XREF: _d_print_comp+F3F↑j
.text:00409F2A                 mov     ebx, offset aParm ; "{parm#"
.text:00409F2F                 jmp     short loc_409F50
.text:00409F2F ; ---------------------------------------------------------------------------
.text:00409F31                 align 4
.text:00409F34
.text:00409F34 loc_409F34:                             ; CODE XREF: _d_print_comp+20AB↓j
.text:00409F34                 mov     ecx, eax
.text:00409F36                 inc     eax
.text:00409F37
.text:00409F37 loc_409F37:                             ; CODE XREF: _d_print_comp+20E4↓j
.text:00409F37                 mov     [ebp+ecx+0], dl
.text:00409F3B                 mov     [ebp+100h], eax
.text:00409F41                 mov     [ebp+104h], dl
.text:00409F47                 inc     ebx
.text:00409F48                 cmp     ebx, 414EFFh
.text:00409F4E                 jz      short loc_409F92
.text:00409F50
.text:00409F50 loc_409F50:                             ; CODE XREF: _d_print_comp+2083↑j
.text:00409F50                 mov     dl, [ebx]
.text:00409F52                 cmp     eax, 0FFh
.text:00409F57                 jnz     short loc_409F34
.text:00409F59                 mov     byte ptr [ebp+0FFh], 0
.text:00409F60                 mov     eax, [ebp+10Ch]
.text:00409F66                 mov     [esp+0ACh+var_A4], eax
.text:00409F6A                 mov     [esp+0ACh+var_A8], 0FFh
.text:00409F72                 mov     [esp+0ACh+var_AC], ebp
.text:00409F75                 mov     byte ptr [esp+0ACh+var_94], dl
.text:00409F79                 call    dword ptr [ebp+108h]
.text:00409F7F                 inc     dword ptr [ebp+120h]
.text:00409F85                 mov     eax, 1
.text:00409F8A                 xor     ecx, ecx
.text:00409F8C                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:00409F90                 jmp     short loc_409F37
.text:00409F92 ; ---------------------------------------------------------------------------
.text:00409F92
.text:00409F92 loc_409F92:                             ; CODE XREF: _d_print_comp+20A2↑j
.text:00409F92                 mov     [esp+0ACh+var_A4], esi
.text:00409F96                 mov     [esp+0ACh+var_A8], offset aLd ; "%ld"
.text:00409F9E                 lea     ebx, [esp+0ACh+var_5C]
.text:00409FA2                 mov     [esp+0ACh+var_AC], ebx ; char *
.text:00409FA5                 call    _sprintf
.text:00409FAA                 xor     eax, eax
.text:00409FAC                 mov     ecx, 0FFFFFFFFh
.text:00409FB1                 mov     edi, ebx
.text:00409FB3                 repne scasb
.text:00409FB5                 not     ecx
.text:00409FB7                 mov     eax, [ebp+100h]
.text:00409FBD                 dec     ecx
.text:00409FBE                 jz      short loc_40A01A
.text:00409FC0                 mov     edi, ebx
.text:00409FC2                 lea     esi, [ebx+ecx]
.text:00409FC5                 jmp     short loc_409FE0
.text:00409FC5 ; ---------------------------------------------------------------------------
.text:00409FC7                 align 4
.text:00409FC8
.text:00409FC8 loc_409FC8:                             ; CODE XREF: _d_print_comp+213B↓j
.text:00409FC8                 mov     edx, eax
.text:00409FCA                 inc     eax
.text:00409FCB
.text:00409FCB loc_409FCB:                             ; CODE XREF: _d_print_comp+216C↓j
.text:00409FCB                 mov     [ebp+edx+0], bl
.text:00409FCF                 mov     [ebp+100h], eax
.text:00409FD5                 mov     [ebp+104h], bl
.text:00409FDB                 inc     edi
.text:00409FDC                 cmp     edi, esi
.text:00409FDE                 jz      short loc_40A01A
.text:00409FE0
.text:00409FE0 loc_409FE0:                             ; CODE XREF: _d_print_comp+2119↑j
.text:00409FE0                 mov     bl, [edi]
.text:00409FE2                 cmp     eax, 0FFh
.text:00409FE7                 jnz     short loc_409FC8
.text:00409FE9                 mov     byte ptr [ebp+0FFh], 0
.text:00409FF0                 mov     eax, [ebp+10Ch]
.text:00409FF6                 mov     [esp+0ACh+var_A4], eax
.text:00409FFA                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040A002                 mov     [esp+0ACh+var_AC], ebp
.text:0040A005                 call    dword ptr [ebp+108h]
.text:0040A00B                 inc     dword ptr [ebp+120h]
.text:0040A011                 mov     eax, 1
.text:0040A016                 xor     edx, edx
.text:0040A018                 jmp     short loc_409FCB
.text:0040A01A ; ---------------------------------------------------------------------------
.text:0040A01A
.text:0040A01A loc_40A01A:                             ; CODE XREF: _d_print_comp+2112↑j
.text:0040A01A                                         ; _d_print_comp+2132↑j
.text:0040A01A                 cmp     eax, 0FFh
.text:0040A01F                 jz      loc_40AC10
.text:0040A025                 lea     edx, [eax+1]
.text:0040A028
.text:0040A028 loc_40A028:                             ; CODE XREF: _d_print_comp+2D93↓j
.text:0040A028                 mov     byte ptr [ebp+eax+0], 7Dh ; '}'
.text:0040A02D                 mov     [ebp+100h], edx
.text:0040A033                 mov     byte ptr [ebp+104h], 7Dh ; '}'
.text:0040A03A                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040A03F ; ---------------------------------------------------------------------------
.text:0040A03F
.text:0040A03F loc_40A03F:                             ; CODE XREF: _d_print_comp+1226↑j
.text:0040A03F                 mov     esi, [eax+0Ch]
.text:0040A042                 mov     edi, [eax+8]
.text:0040A045                 test    esi, esi
.text:0040A047                 jz      def_40A961      ; jumptable 0040A961 default case
.text:0040A04D                 mov     eax, [ebp+100h]
.text:0040A053                 xor     ebx, ebx
.text:0040A055                 jmp     short loc_40A074
.text:0040A055 ; ---------------------------------------------------------------------------
.text:0040A057                 align 4
.text:0040A058
.text:0040A058 loc_40A058:                             ; CODE XREF: _d_print_comp+21D0↓j
.text:0040A058                 mov     ecx, eax
.text:0040A05A                 inc     eax
.text:0040A05B
.text:0040A05B loc_40A05B:                             ; CODE XREF: _d_print_comp+2209↓j
.text:0040A05B                 mov     [ebp+ecx+0], dl
.text:0040A05F                 mov     [ebp+100h], eax
.text:0040A065                 mov     [ebp+104h], dl
.text:0040A06B                 inc     ebx
.text:0040A06C                 cmp     esi, ebx
.text:0040A06E                 jz      def_40A961      ; jumptable 0040A961 default case
.text:0040A074
.text:0040A074 loc_40A074:                             ; CODE XREF: _d_print_comp+21A9↑j
.text:0040A074                 mov     dl, [edi+ebx]
.text:0040A077                 cmp     eax, 0FFh
.text:0040A07C                 jnz     short loc_40A058
.text:0040A07E                 mov     byte ptr [ebp+0FFh], 0
.text:0040A085                 mov     eax, [ebp+10Ch]
.text:0040A08B                 mov     [esp+0ACh+var_A4], eax
.text:0040A08F                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040A097                 mov     [esp+0ACh+var_AC], ebp
.text:0040A09A                 mov     byte ptr [esp+0ACh+var_94], dl
.text:0040A09E                 call    dword ptr [ebp+108h]
.text:0040A0A4                 inc     dword ptr [ebp+120h]
.text:0040A0AA                 mov     eax, 1
.text:0040A0AF                 xor     ecx, ecx
.text:0040A0B1                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:0040A0B5                 jmp     short loc_40A05B
.text:0040A0B7 ; ---------------------------------------------------------------------------
.text:0040A0B7
.text:0040A0B7 loc_40A0B7:                             ; CODE XREF: _d_print_comp+B11↑j
.text:0040A0B7                 mov     ebx, [ecx+4]
.text:0040A0BA                 mov     edi, [ecx+8]
.text:0040A0BD                 add     edi, ebx
.text:0040A0BF                 cmp     ebx, edi
.text:0040A0C1                 jb      short loc_40A0E4
.text:0040A0C3                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040A0C8 ; ---------------------------------------------------------------------------
.text:0040A0C8
.text:0040A0C8 loc_40A0C8:                             ; CODE XREF: _d_print_comp+2253↓j
.text:0040A0C8                 lea     ecx, [edx+1]
.text:0040A0CB
.text:0040A0CB loc_40A0CB:                             ; CODE XREF: _d_print_comp+228C↓j
.text:0040A0CB                 mov     [ebp+edx+0], al
.text:0040A0CF                 mov     [ebp+100h], ecx
.text:0040A0D5                 mov     [ebp+104h], al
.text:0040A0DB
.text:0040A0DB loc_40A0DB:                             ; CODE XREF: _d_print_comp+3098↓j
.text:0040A0DB                 inc     ebx
.text:0040A0DC                 cmp     edi, ebx
.text:0040A0DE                 jbe     def_40A961      ; jumptable 0040A961 default case
.text:0040A0E4
.text:0040A0E4 loc_40A0E4:                             ; CODE XREF: _d_print_comp+2215↑j
.text:0040A0E4                 mov     eax, edi
.text:0040A0E6                 sub     eax, ebx
.text:0040A0E8                 cmp     eax, 3
.text:0040A0EB                 mov     al, [ebx]
.text:0040A0ED                 jle     short loc_40A0F3
.text:0040A0EF                 cmp     al, 5Fh ; '_'
.text:0040A0F1                 jz      short loc_40A13A
.text:0040A0F3
.text:0040A0F3 loc_40A0F3:                             ; CODE XREF: _d_print_comp+2241↑j
.text:0040A0F3                                         ; _d_print_comp+2292↓j ...
.text:0040A0F3                 mov     edx, [ebp+100h]
.text:0040A0F9                 cmp     edx, 0FFh
.text:0040A0FF                 jnz     short loc_40A0C8
.text:0040A101                 mov     byte ptr [ebp+0FFh], 0
.text:0040A108                 mov     edx, [ebp+10Ch]
.text:0040A10E                 mov     [esp+0ACh+var_A4], edx
.text:0040A112                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040A11A                 mov     [esp+0ACh+var_AC], ebp
.text:0040A11D                 mov     byte ptr [esp+0ACh+var_94], al
.text:0040A121                 call    dword ptr [ebp+108h]
.text:0040A127                 inc     dword ptr [ebp+120h]
.text:0040A12D                 mov     ecx, 1
.text:0040A132                 xor     edx, edx
.text:0040A134                 mov     al, byte ptr [esp+0ACh+var_94]
.text:0040A138                 jmp     short loc_40A0CB
.text:0040A13A ; ---------------------------------------------------------------------------
.text:0040A13A
.text:0040A13A loc_40A13A:                             ; CODE XREF: _d_print_comp+2245↑j
.text:0040A13A                 cmp     byte ptr [ebx+1], 5Fh ; '_'
.text:0040A13E                 jnz     short loc_40A0F3
.text:0040A140                 cmp     byte ptr [ebx+2], 55h ; 'U'
.text:0040A144                 jnz     short loc_40A0F3
.text:0040A146                 lea     esi, [ebx+3]
.text:0040A149                 cmp     edi, esi
.text:0040A14B                 jbe     short loc_40A0F3
.text:0040A14D                 xor     ecx, ecx
.text:0040A14F                 mov     byte ptr [esp+0ACh+var_90], al
.text:0040A153                 mov     eax, ecx
.text:0040A155                 jmp     short loc_40A168
.text:0040A157 ; ---------------------------------------------------------------------------
.text:0040A157
.text:0040A157 loc_40A157:                             ; CODE XREF: _d_print_comp+22C5↓j
.text:0040A157                 sub     edx, 30h ; '0'
.text:0040A15A
.text:0040A15A loc_40A15A:                             ; CODE XREF: _d_print_comp+22D6↓j
.text:0040A15A                                         ; _d_print_comp+2495↓j
.text:0040A15A                 shl     eax, 4
.text:0040A15D                 add     eax, edx
.text:0040A15F                 inc     esi
.text:0040A160                 cmp     esi, edi
.text:0040A162                 jz      loc_40ACAA
.text:0040A168
.text:0040A168 loc_40A168:                             ; CODE XREF: _d_print_comp+22A9↑j
.text:0040A168                 movsx   edx, byte ptr [esi]
.text:0040A16B                 lea     ecx, [edx-30h]
.text:0040A16E                 cmp     cl, 9
.text:0040A171                 jbe     short loc_40A157
.text:0040A173                 lea     ecx, [edx-41h]
.text:0040A176                 cmp     cl, 5
.text:0040A179                 ja      loc_40A332
.text:0040A17F                 sub     edx, 37h ; '7'
.text:0040A182                 jmp     short loc_40A15A
.text:0040A184 ; ---------------------------------------------------------------------------
.text:0040A184
.text:0040A184 loc_40A184:                             ; CODE XREF: _d_print_comp+FEC↑j
.text:0040A184                                         ; _d_print_comp+1001↑j
.text:0040A184                 mov     esi, [esp+0ACh+var_90]
.text:0040A188                 mov     ecx, [esi+8]
.text:0040A18B                 mov     edx, [esp+0ACh+var_8C]
.text:0040A18F                 mov     eax, ebp
.text:0040A191                 call    _d_print_comp
.text:0040A196                 mov     eax, [esp+0ACh+var_78]
.text:0040A19A                 mov     [ebp+114h], eax
.text:0040A1A0                 cmp     [esp+0ACh+var_54], 0
.text:0040A1A5                 jnz     def_40A961      ; jumptable 0040A961 default case
.text:0040A1AB
.text:0040A1AB loc_40A1AB:                             ; CODE XREF: _d_print_comp+10B2↑j
.text:0040A1AB                                         ; _d_print_comp+10DF↑j
.text:0040A1AB                 mov     ecx, [esp+0ACh+var_90]
.text:0040A1AF                 add     ecx, 4
.text:0040A1B2                 mov     eax, [ebp+114h]
.text:0040A1B8                 mov     [esp+0ACh+var_AC], eax
.text:0040A1BB                 mov     edx, [esp+0ACh+var_8C]
.text:0040A1BF                 mov     eax, ebp
.text:0040A1C1                 call    _d_print_array_type_isra_7
.text:0040A1C6                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040A1CB ; ---------------------------------------------------------------------------
.text:0040A1CB
.text:0040A1CB loc_40A1CB:                             ; CODE XREF: _d_print_comp+12CF↑j
.text:0040A1CB                                         ; _d_print_comp+12DB↑j
.text:0040A1CB                 mov     esi, [ebp+114h]
.text:0040A1D1                 mov     [esp+0ACh+var_90], eax
.text:0040A1D5                 jmp     loc_407F13
.text:0040A1DA ; ---------------------------------------------------------------------------
.text:0040A1DA
.text:0040A1DA loc_40A1DA:                             ; CODE XREF: _d_print_comp+1840↑j
.text:0040A1DA                 mov     ecx, [esp+0ACh+var_90]
.text:0040A1DE                 mov     edx, [ecx+4]
.text:0040A1E1                 cmp     dword ptr [edx], 2Dh ; '-'
.text:0040A1E4                 jz      loc_40ABA1
.text:0040A1EA
.text:0040A1EA loc_40A1EA:                             ; CODE XREF: _d_print_comp+2CFC↓j
.text:0040A1EA                                         ; _d_print_comp+2D08↓j ...
.text:0040A1EA                 mov     edx, [edx+4]
.text:0040A1ED                 mov     esi, [edx]
.text:0040A1EF                 mov     ecx, 3
.text:0040A1F4                 mov     edi, offset unk_414AE2
.text:0040A1F9                 repe cmpsb
.text:0040A1FB                 mov     ecx, [eax+4]
.text:0040A1FE                 jnz     short loc_40A209
.text:0040A200                 cmp     dword ptr [ecx], 3
.text:0040A203                 jz      loc_40AC56
.text:0040A209
.text:0040A209 loc_40A209:                             ; CODE XREF: _d_print_comp+2352↑j
.text:0040A209                 mov     edx, [esp+0ACh+var_8C]
.text:0040A20D                 mov     eax, ebp
.text:0040A20F                 call    _d_print_subexpr
.text:0040A214
.text:0040A214 loc_40A214:                             ; CODE XREF: _d_print_comp+2DCA↓j
.text:0040A214                 mov     ecx, [esp+0ACh+var_90]
.text:0040A218                 mov     eax, [ecx+4]
.text:0040A21B                 mov     edx, [eax+4]
.text:0040A21E                 mov     edx, [edx]
.text:0040A220                 mov     edi, offset aIx ; "ix"
.text:0040A225                 mov     ecx, 3
.text:0040A22A                 mov     esi, edx
.text:0040A22C                 repe cmpsb
.text:0040A22E                 jz      loc_40AB3B
.text:0040A234                 mov     ecx, 3
.text:0040A239                 mov     esi, edx
.text:0040A23B                 mov     edi, offset unk_414AE2
.text:0040A240                 repe cmpsb
.text:0040A242                 jnz     loc_40AC44
.text:0040A248
.text:0040A248 loc_40A248:                             ; CODE XREF: _d_print_comp+2DA5↓j
.text:0040A248                 mov     ecx, [esp+0ACh+var_90]
.text:0040A24C                 mov     eax, [ecx+8]
.text:0040A24F                 mov     ecx, [eax+8]
.text:0040A252                 mov     edx, [esp+0ACh+var_8C]
.text:0040A256                 mov     eax, ebp
.text:0040A258                 call    _d_print_subexpr
.text:0040A25D
.text:0040A25D loc_40A25D:                             ; CODE XREF: _d_print_comp+2CBC↓j
.text:0040A25D                 mov     ecx, [esp+0ACh+var_90]
.text:0040A261                 mov     eax, [ecx+4]
.text:0040A264                 cmp     dword ptr [eax], 2Dh ; '-'
.text:0040A267                 jnz     def_40A961      ; jumptable 0040A961 default case
.text:0040A26D                 mov     eax, [eax+4]
.text:0040A270                 cmp     dword ptr [eax+8], 1
.text:0040A274                 jnz     def_40A961      ; jumptable 0040A961 default case
.text:0040A27A                 mov     eax, [eax+4]
.text:0040A27D                 cmp     byte ptr [eax], 3Eh ; '>'
.text:0040A280                 jnz     def_40A961      ; jumptable 0040A961 default case
.text:0040A286                 mov     edx, 29h ; ')'
.text:0040A28B                 mov     eax, ebp
.text:0040A28D                 call    _d_append_char
.text:0040A292                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040A292 ; ---------------------------------------------------------------------------
.text:0040A297                 align 4
.text:0040A298
.text:0040A298 loc_40A298:                             ; CODE XREF: _d_print_comp+14A9↑j
.text:0040A298                 mov     edx, [eax+8]
.text:0040A29B                 cmp     dword ptr [edx], 36h ; '6'
.text:0040A29E                 jnz     loc_40935B
.text:0040A2A4                 mov     ecx, [esp+0ACh+var_90]
.text:0040A2A8                 mov     ebx, [ecx+4]
.text:0040A2AB                 mov     eax, [eax+4]
.text:0040A2AE                 mov     [esp+0ACh+var_90], eax
.text:0040A2B2                 mov     ecx, [edx+4]
.text:0040A2B5                 mov     [esp+0ACh+var_84], ecx
.text:0040A2B9                 mov     edx, [edx+8]
.text:0040A2BC                 mov     [esp+0ACh+var_88], edx
.text:0040A2C0                 mov     eax, [ebx+4]
.text:0040A2C3                 mov     esi, [eax]
.text:0040A2C5                 mov     edi, offset unk_414AEB
.text:0040A2CA                 mov     ecx, 3
.text:0040A2CF                 repe cmpsb
.text:0040A2D1                 jz      loc_40AD11
.text:0040A2D7                 mov     edx, offset aNew ; "new "
.text:0040A2DC                 mov     eax, ebp
.text:0040A2DE                 call    _d_append_string
.text:0040A2E3                 mov     ecx, [esp+0ACh+var_90]
.text:0040A2E7                 cmp     dword ptr [ecx+4], 0
.text:0040A2EB                 jz      short loc_40A304
.text:0040A2ED                 mov     edx, [esp+0ACh+var_8C]
.text:0040A2F1                 mov     eax, ebp
.text:0040A2F3                 call    _d_print_subexpr
.text:0040A2F8                 mov     edx, 20h ; ' '
.text:0040A2FD                 mov     eax, ebp
.text:0040A2FF                 call    _d_append_char
.text:0040A304
.text:0040A304 loc_40A304:                             ; CODE XREF: _d_print_comp+243F↑j
.text:0040A304                 mov     ecx, [esp+0ACh+var_84]
.text:0040A308                 mov     edx, [esp+0ACh+var_8C]
.text:0040A30C                 mov     eax, ebp
.text:0040A30E                 call    _d_print_comp
.text:0040A313                 cmp     [esp+0ACh+var_88], 0
.text:0040A318                 jz      def_40A961      ; jumptable 0040A961 default case
.text:0040A31E                 mov     ecx, [esp+0ACh+var_88]
.text:0040A322                 mov     edx, [esp+0ACh+var_8C]
.text:0040A326                 mov     eax, ebp
.text:0040A328                 call    _d_print_subexpr
.text:0040A32D                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040A332 ; ---------------------------------------------------------------------------
.text:0040A332
.text:0040A332 loc_40A332:                             ; CODE XREF: _d_print_comp+22CD↑j
.text:0040A332                 lea     ecx, [edx-61h]
.text:0040A335                 cmp     cl, 5
.text:0040A338                 ja      loc_40AEC8
.text:0040A33E                 sub     edx, 57h ; 'W'
.text:0040A341                 jmp     loc_40A15A
.text:0040A346 ; ---------------------------------------------------------------------------
.text:0040A346
.text:0040A346 loc_40A346:                             ; CODE XREF: _d_print_comp+1167↑j
.text:0040A346                 mov     eax, [ebp+100h]
.text:0040A34C                 jmp     loc_40904B
.text:0040A351 ; ---------------------------------------------------------------------------
.text:0040A351
.text:0040A351 loc_40A351:                             ; CODE XREF: _d_print_comp+F04↑j
.text:0040A351                 mov     edx, [ebp+11Ch]
.text:0040A357                 jmp     short loc_40A361
.text:0040A357 ; ---------------------------------------------------------------------------
.text:0040A359                 align 4
.text:0040A35C
.text:0040A35C loc_40A35C:                             ; CODE XREF: _d_print_comp+24C4↓j
.text:0040A35C                 cmp     dword ptr [eax], 2Bh ; '+'
.text:0040A35F                 jnz     short loc_40A372
.text:0040A361
.text:0040A361 loc_40A361:                             ; CODE XREF: _d_print_comp+24AB↑j
.text:0040A361                 cmp     edx, 0
.text:0040A364                 jle     loc_40B002
.text:0040A36A                 dec     edx
.text:0040A36B                 mov     eax, [eax+8]
.text:0040A36E                 test    eax, eax
.text:0040A370                 jnz     short loc_40A35C
.text:0040A372
.text:0040A372 loc_40A372:                             ; CODE XREF: _d_print_comp+EFB↑j
.text:0040A372                                         ; _d_print_comp+24B3↑j ...
.text:0040A372                 mov     dword ptr [ebp+118h], 1
.text:0040A37C                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040A381 ; ---------------------------------------------------------------------------
.text:0040A381
.text:0040A381 loc_40A381:                             ; CODE XREF: _d_print_comp+1A01↑j
.text:0040A381                 cmp     eax, 0FFh
.text:0040A386                 jz      loc_40AC7B
.text:0040A38C
.text:0040A38C loc_40A38C:                             ; CODE XREF: _d_print_comp+2DF9↓j
.text:0040A38C                 mov     byte ptr [ebp+eax+0], 20h ; ' '
.text:0040A391                 inc     eax
.text:0040A392                 mov     [ebp+100h], eax
.text:0040A398                 mov     byte ptr [ebp+104h], 20h ; ' '
.text:0040A39F                 mov     ebx, [esi+4]
.text:0040A3A2                 jmp     loc_4098B3
.text:0040A3A7 ; ---------------------------------------------------------------------------
.text:0040A3A7
.text:0040A3A7 loc_40A3A7:                             ; CODE XREF: _d_print_comp+1153↑j
.text:0040A3A7                 mov     eax, [ebp+100h]
.text:0040A3AD                 mov     ebx, offset aSat ; "_Sat "
.text:0040A3B2                 jmp     short loc_40A3D4
.text:0040A3B4 ; ---------------------------------------------------------------------------
.text:0040A3B4
.text:0040A3B4 loc_40A3B4:                             ; CODE XREF: _d_print_comp+252F↓j
.text:0040A3B4                 mov     ecx, eax
.text:0040A3B6                 inc     eax
.text:0040A3B7
.text:0040A3B7 loc_40A3B7:                             ; CODE XREF: _d_print_comp+2568↓j
.text:0040A3B7                 mov     [ebp+ecx+0], dl
.text:0040A3BB                 mov     [ebp+100h], eax
.text:0040A3C1                 mov     [ebp+104h], dl
.text:0040A3C7                 inc     ebx
.text:0040A3C8                 cmp     ebx, 414E86h
.text:0040A3CE                 jz      loc_409005
.text:0040A3D4
.text:0040A3D4 loc_40A3D4:                             ; CODE XREF: _d_print_comp+2506↑j
.text:0040A3D4                 mov     dl, [ebx]
.text:0040A3D6                 cmp     eax, 0FFh
.text:0040A3DB                 jnz     short loc_40A3B4
.text:0040A3DD                 mov     byte ptr [ebp+0FFh], 0
.text:0040A3E4                 mov     eax, [ebp+10Ch]
.text:0040A3EA                 mov     [esp+0ACh+var_A4], eax
.text:0040A3EE                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040A3F6                 mov     [esp+0ACh+var_AC], ebp
.text:0040A3F9                 mov     byte ptr [esp+0ACh+var_94], dl
.text:0040A3FD                 call    dword ptr [ebp+108h]
.text:0040A403                 inc     dword ptr [ebp+120h]
.text:0040A409                 mov     eax, 1
.text:0040A40E                 xor     ecx, ecx
.text:0040A410                 mov     dl, byte ptr [esp+0ACh+var_94]
.text:0040A414                 jmp     short loc_40A3B7
.text:0040A416 ; ---------------------------------------------------------------------------
.text:0040A416
.text:0040A416 loc_40A416:                             ; CODE XREF: _d_print_comp+ACA↑j
.text:0040A416                 mov     ebx, [esp+0ACh+var_8C]
.text:0040A41A                 and     ebx, 0FFFFFF9Fh
.text:0040A41D                 mov     ecx, [esp+0ACh+var_90]
.text:0040A421                 add     ecx, 8
.text:0040A424                 mov     eax, [ebp+114h]
.text:0040A42A                 mov     [esp+0ACh+var_AC], eax
.text:0040A42D                 mov     edx, ebx
.text:0040A42F                 mov     eax, ebp
.text:0040A431                 call    _d_print_function_type_isra_9
.text:0040A436                 mov     eax, [esp+0ACh+var_90]
.text:0040A43A                 mov     ecx, [eax+4]
.text:0040A43D                 test    ecx, ecx
.text:0040A43F                 jz      def_40A961      ; jumptable 0040A961 default case
.text:0040A445                 mov     edx, ebx
.text:0040A447                 mov     eax, ebp
.text:0040A449                 call    _d_print_comp
.text:0040A44E                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040A453 ; ---------------------------------------------------------------------------
.text:0040A453
.text:0040A453 loc_40A453:                             ; CODE XREF: _d_print_comp+1877↑j
.text:0040A453                 mov     eax, [ebx+4]
.text:0040A456                 mov     eax, [eax]
.text:0040A458                 mov     [esp+0ACh+var_88], eax
.text:0040A45C                 mov     edi, offset aAd ; "ad"
.text:0040A461                 mov     ecx, 3
.text:0040A466                 mov     esi, eax
.text:0040A468                 repe cmpsb
.text:0040A46A                 jnz     short loc_40A479
.text:0040A46C                 mov     ecx, [esp+0ACh+var_90]
.text:0040A470                 cmp     dword ptr [ecx], 3
.text:0040A473                 jz      loc_40ADE4
.text:0040A479
.text:0040A479 loc_40A479:                             ; CODE XREF: _d_print_comp+25BE↑j
.text:0040A479                 mov     ecx, [esp+0ACh+var_90]
.text:0040A47D                 cmp     dword ptr [ecx], 33h ; '3'
.text:0040A480                 jz      loc_40AF56
.text:0040A486
.text:0040A486 loc_40A486:                             ; CODE XREF: _d_print_comp+2F3E↓j
.text:0040A486                                         ; _d_print_comp+2F4A↓j ...
.text:0040A486                 mov     ecx, ebx
.text:0040A488                 mov     edx, [esp+0ACh+var_8C]
.text:0040A48C                 mov     eax, ebp
.text:0040A48E                 call    _d_print_expr_op
.text:0040A493                 mov     eax, [esp+0ACh+var_88]
.text:0040A497                 test    eax, eax
.text:0040A499                 jz      loc_40973F
.text:0040A49F                 mov     edi, offset aGs ; "gs"
.text:0040A4A4                 mov     ecx, 3
.text:0040A4A9                 mov     esi, [esp+0ACh+var_88]
.text:0040A4AD                 repe cmpsb
.text:0040A4AF                 jz      loc_40A8D1
.text:0040A4B5                 mov     edi, offset unk_414ADF
.text:0040A4BA                 mov     ecx, 3
.text:0040A4BF                 mov     esi, [esp+0ACh+var_88]
.text:0040A4C3                 repe cmpsb
.text:0040A4C5                 jnz     loc_40973F
.text:0040A4CB                 mov     eax, [ebp+100h]
.text:0040A4D1                 cmp     eax, 0FFh
.text:0040A4D6                 jz      loc_40ADB5
.text:0040A4DC
.text:0040A4DC loc_40A4DC:                             ; CODE XREF: _d_print_comp+2F33↓j
.text:0040A4DC                 mov     byte ptr [ebp+eax+0], 28h ; '('
.text:0040A4E1                 inc     eax
.text:0040A4E2                 mov     [ebp+100h], eax
.text:0040A4E8                 mov     byte ptr [ebp+104h], 28h ; '('
.text:0040A4EF                 mov     ecx, [esp+0ACh+var_90]
.text:0040A4F3                 mov     edx, [esp+0ACh+var_8C]
.text:0040A4F7                 mov     eax, ebp
.text:0040A4F9                 call    _d_print_comp
.text:0040A4FE                 mov     eax, [ebp+100h]
.text:0040A504                 cmp     eax, 0FFh
.text:0040A509                 jz      loc_40AD86
.text:0040A50F
.text:0040A50F loc_40A50F:                             ; CODE XREF: _d_print_comp+2F04↓j
.text:0040A50F                 mov     byte ptr [ebp+eax+0], 29h ; ')'
.text:0040A514                 inc     eax
.text:0040A515                 mov     [ebp+100h], eax
.text:0040A51B                 mov     byte ptr [ebp+104h], 29h ; ')'
.text:0040A522                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040A527 ; ---------------------------------------------------------------------------
.text:0040A527
.text:0040A527 loc_40A527:                             ; CODE XREF: _d_print_comp+1880↑j
.text:0040A527                 mov     eax, [ebp+100h]
.text:0040A52D                 cmp     eax, 0FFh
.text:0040A532                 jz      loc_40ACE2
.text:0040A538
.text:0040A538 loc_40A538:                             ; CODE XREF: _d_print_comp+2E60↓j
.text:0040A538                 mov     byte ptr [ebp+eax+0], 28h ; '('
.text:0040A53D                 inc     eax
.text:0040A53E                 mov     [ebp+100h], eax
.text:0040A544                 mov     byte ptr [ebp+104h], 28h ; '('
.text:0040A54B                 lea     ecx, [ebx+4]
.text:0040A54E                 mov     edx, [esp+0ACh+var_8C]
.text:0040A552                 mov     eax, ebp
.text:0040A554                 call    _d_print_cast_isra_10
.text:0040A559                 mov     eax, [ebp+100h]
.text:0040A55F                 cmp     eax, 0FFh
.text:0040A564                 jz      loc_40ACB3
.text:0040A56A
.text:0040A56A loc_40A56A:                             ; CODE XREF: _d_print_comp+2E31↓j
.text:0040A56A                 mov     byte ptr [ebp+eax+0], 29h ; ')'
.text:0040A56F                 inc     eax
.text:0040A570                 mov     [ebp+100h], eax
.text:0040A576                 mov     byte ptr [ebp+104h], 29h ; ')'
.text:0040A57D                 jmp     loc_40973F
.text:0040A582 ; ---------------------------------------------------------------------------
.text:0040A582
.text:0040A582 loc_40A582:                             ; CODE XREF: _d_print_comp+13DB↑j
.text:0040A582                 mov     byte ptr [ebp+ebx+0], 0
.text:0040A587                 mov     eax, [ebp+10Ch]
.text:0040A58D                 mov     [esp+0ACh+var_A4], eax
.text:0040A591                 mov     [esp+0ACh+var_A8], ebx
.text:0040A595                 mov     [esp+0ACh+var_AC], ebp
.text:0040A598                 call    dword ptr [ebp+108h]
.text:0040A59E                 mov     dword ptr [ebp+100h], 0
.text:0040A5A8                 inc     dword ptr [ebp+120h]
.text:0040A5AE                 xor     ebx, ebx
.text:0040A5B0                 jmp     loc_40928D
.text:0040A5B5 ; ---------------------------------------------------------------------------
.text:0040A5B5
.text:0040A5B5 loc_40A5B5:                             ; CODE XREF: _d_print_comp+1D6B↑j
.text:0040A5B5                 mov     byte ptr [ebp+0FFh], 0
.text:0040A5BC                 mov     eax, [ebp+10Ch]
.text:0040A5C2                 mov     [esp+0ACh+var_A4], eax
.text:0040A5C6                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040A5CE                 mov     [esp+0ACh+var_AC], ebp
.text:0040A5D1                 call    dword ptr [ebp+108h]
.text:0040A5D7                 inc     dword ptr [ebp+120h]
.text:0040A5DD                 mov     edx, 1
.text:0040A5E2                 xor     eax, eax
.text:0040A5E4                 jmp     loc_409C20
.text:0040A5E9 ; ---------------------------------------------------------------------------
.text:0040A5E9
.text:0040A5E9 loc_40A5E9:                             ; CODE XREF: _d_print_comp+19D6↑j
.text:0040A5E9                 mov     byte ptr [ebp+0FFh], 0
.text:0040A5F0                 mov     eax, [ebp+10Ch]
.text:0040A5F6                 mov     [esp+0ACh+var_A4], eax
.text:0040A5FA                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040A602                 mov     [esp+0ACh+var_AC], ebp
.text:0040A605                 call    dword ptr [ebp+108h]
.text:0040A60B                 inc     dword ptr [ebp+120h]
.text:0040A611                 mov     edx, 1
.text:0040A616                 xor     eax, eax
.text:0040A618                 jmp     loc_40988B
.text:0040A61D ; ---------------------------------------------------------------------------
.text:0040A61D
.text:0040A61D loc_40A61D:                             ; CODE XREF: _d_print_comp+EC5↑j
.text:0040A61D                 mov     byte ptr [ebp+0FFh], 0
.text:0040A624                 mov     eax, [ebp+10Ch]
.text:0040A62A                 mov     [esp+0ACh+var_A4], eax
.text:0040A62E                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040A636                 mov     [esp+0ACh+var_AC], ebp
.text:0040A639                 call    dword ptr [ebp+108h]
.text:0040A63F                 inc     dword ptr [ebp+120h]
.text:0040A645                 mov     edx, 1
.text:0040A64A                 xor     eax, eax
.text:0040A64C                 jmp     loc_408D7A
.text:0040A651 ; ---------------------------------------------------------------------------
.text:0040A651
.text:0040A651 loc_40A651:                             ; CODE XREF: _d_print_comp+E80↑j
.text:0040A651                 mov     byte ptr [ebp+0FFh], 0
.text:0040A658                 mov     eax, [ebp+10Ch]
.text:0040A65E                 mov     [esp+0ACh+var_A4], eax
.text:0040A662                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040A66A                 mov     [esp+0ACh+var_AC], ebp
.text:0040A66D                 call    dword ptr [ebp+108h]
.text:0040A673                 inc     dword ptr [ebp+120h]
.text:0040A679                 mov     edx, 1
.text:0040A67E                 xor     eax, eax
.text:0040A680                 jmp     loc_408D35
.text:0040A685 ; ---------------------------------------------------------------------------
.text:0040A685
.text:0040A685 loc_40A685:                             ; CODE XREF: _d_print_comp+1515↑j
.text:0040A685                 mov     byte ptr [ebp+0FFh], 0
.text:0040A68C                 mov     eax, [ebp+10Ch]
.text:0040A692                 mov     [esp+0ACh+var_A4], eax
.text:0040A696                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040A69E                 mov     [esp+0ACh+var_AC], ebp
.text:0040A6A1                 call    dword ptr [ebp+108h]
.text:0040A6A7                 inc     dword ptr [ebp+120h]
.text:0040A6AD                 mov     edx, 1
.text:0040A6B2                 xor     eax, eax
.text:0040A6B4                 jmp     loc_4093CA
.text:0040A6B9 ; ---------------------------------------------------------------------------
.text:0040A6B9
.text:0040A6B9 loc_40A6B9:                             ; CODE XREF: _d_print_comp+14E2↑j
.text:0040A6B9                 mov     byte ptr [ebp+0FFh], 0
.text:0040A6C0                 mov     eax, [ebp+10Ch]
.text:0040A6C6                 mov     [esp+0ACh+var_A4], eax
.text:0040A6CA                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040A6D2                 mov     [esp+0ACh+var_AC], ebp
.text:0040A6D5                 call    dword ptr [ebp+108h]
.text:0040A6DB                 inc     dword ptr [ebp+120h]
.text:0040A6E1                 mov     edx, 1
.text:0040A6E6                 xor     eax, eax
.text:0040A6E8                 jmp     loc_409397
.text:0040A6ED ; ---------------------------------------------------------------------------
.text:0040A6ED
.text:0040A6ED loc_40A6ED:                             ; CODE XREF: _d_print_comp+1C37↑j
.text:0040A6ED                 mov     byte ptr [ebp+0FFh], 0
.text:0040A6F4                 mov     eax, [ebp+10Ch]
.text:0040A6FA                 mov     [esp+0ACh+var_A4], eax
.text:0040A6FE                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040A706                 mov     [esp+0ACh+var_AC], ebp
.text:0040A709                 call    dword ptr [ebp+108h]
.text:0040A70F                 inc     dword ptr [ebp+120h]
.text:0040A715                 mov     edx, 1
.text:0040A71A                 xor     eax, eax
.text:0040A71C                 jmp     loc_409AEC
.text:0040A721 ; ---------------------------------------------------------------------------
.text:0040A721
.text:0040A721 loc_40A721:                             ; CODE XREF: _d_print_comp+146D↑j
.text:0040A721                 mov     byte ptr [ebp+0FFh], 0
.text:0040A728                 mov     eax, [ebp+10Ch]
.text:0040A72E                 mov     [esp+0ACh+var_A4], eax
.text:0040A732                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040A73A                 mov     [esp+0ACh+var_AC], ebp
.text:0040A73D                 call    dword ptr [ebp+108h]
.text:0040A743                 inc     dword ptr [ebp+120h]
.text:0040A749                 mov     edx, 1
.text:0040A74E                 xor     eax, eax
.text:0040A750                 jmp     loc_409322
.text:0040A755 ; ---------------------------------------------------------------------------
.text:0040A755
.text:0040A755 loc_40A755:                             ; CODE XREF: _d_print_comp+1DDF↑j
.text:0040A755                 mov     byte ptr [ebp+0FFh], 0
.text:0040A75C                 mov     eax, [ebp+10Ch]
.text:0040A762                 mov     [esp+0ACh+var_A4], eax
.text:0040A766                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040A76E                 mov     [esp+0ACh+var_AC], ebp
.text:0040A771                 call    dword ptr [ebp+108h]
.text:0040A777                 inc     dword ptr [ebp+120h]
.text:0040A77D                 mov     edx, 1
.text:0040A782                 xor     eax, eax
.text:0040A784                 jmp     loc_409C94
.text:0040A789 ; ---------------------------------------------------------------------------
.text:0040A789
.text:0040A789 loc_40A789:                             ; CODE XREF: _d_print_comp+1570↑j
.text:0040A789                 mov     byte ptr [ebp+0FFh], 0
.text:0040A790                 mov     eax, [ebp+10Ch]
.text:0040A796                 mov     [esp+0ACh+var_A4], eax
.text:0040A79A                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040A7A2                 mov     [esp+0ACh+var_AC], ebp
.text:0040A7A5                 call    dword ptr [ebp+108h]
.text:0040A7AB                 inc     dword ptr [ebp+120h]
.text:0040A7B1                 mov     edx, 1
.text:0040A7B6                 xor     eax, eax
.text:0040A7B8                 jmp     loc_409425
.text:0040A7BD ; ---------------------------------------------------------------------------
.text:0040A7BD
.text:0040A7BD loc_40A7BD:                             ; CODE XREF: _d_print_comp+ADF↑j
.text:0040A7BD                 mov     eax, [ebp+114h]
.text:0040A7C3                 mov     dword ptr [esp+0ACh+var_5C], eax
.text:0040A7C7                 lea     eax, [esp+0ACh+var_5C]
.text:0040A7CB                 mov     [ebp+114h], eax
.text:0040A7D1                 mov     ecx, [esp+0ACh+var_90]
.text:0040A7D5                 mov     [esp+0ACh+var_58], ecx
.text:0040A7D9                 mov     [esp+0ACh+var_54], 0
.text:0040A7E1                 mov     eax, [ebp+110h]
.text:0040A7E7                 mov     [esp+0ACh+var_50], eax
.text:0040A7EB                 mov     ecx, [ecx+4]
.text:0040A7EE                 mov     edx, [esp+0ACh+var_8C]
.text:0040A7F2                 and     edx, 0FFFFFF9Fh
.text:0040A7F5                 mov     eax, ebp
.text:0040A7F7                 call    _d_print_comp
.text:0040A7FC                 mov     eax, dword ptr [esp+0ACh+var_5C]
.text:0040A800                 mov     [ebp+114h], eax
.text:0040A806                 mov     eax, [esp+0ACh+var_54]
.text:0040A80A                 test    eax, eax
.text:0040A80C                 jnz     def_40A961      ; jumptable 0040A961 default case
.text:0040A812                 mov     edx, 20h ; ' '
.text:0040A817                 mov     eax, ebp
.text:0040A819                 call    _d_append_char
.text:0040A81E                 jmp     loc_408991
.text:0040A823 ; ---------------------------------------------------------------------------
.text:0040A823
.text:0040A823 loc_40A823:                             ; CODE XREF: _d_print_comp+1035↑j
.text:0040A823                 mov     ebp, [esp+0ACh+var_7C]
.text:0040A827                 mov     dword ptr [ebp+118h], 1
.text:0040A831                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040A836 ; ---------------------------------------------------------------------------
.text:0040A836
.text:0040A836 loc_40A836:                             ; CODE XREF: _d_print_comp+1617↑j
.text:0040A836                 mov     byte ptr [ebp+0FFh], 0
.text:0040A83D                 mov     eax, [ebp+10Ch]
.text:0040A843                 mov     [esp+0ACh+var_A4], eax
.text:0040A847                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040A84F                 mov     [esp+0ACh+var_AC], ebp
.text:0040A852                 call    dword ptr [ebp+108h]
.text:0040A858                 inc     dword ptr [ebp+120h]
.text:0040A85E                 mov     byte ptr [ebp+0], 29h ; ')'
.text:0040A862                 mov     dword ptr [ebp+100h], 1
.text:0040A86C                 mov     byte ptr [ebp+104h], 29h ; ')'
.text:0040A873                 mov     ecx, [esp+0ACh+var_90]
.text:0040A877                 cmp     dword ptr [ecx], 38h ; '8'
.text:0040A87A                 jnz     loc_4094E7
.text:0040A880                 mov     edx, 1
.text:0040A885
.text:0040A885 loc_40A885:                             ; CODE XREF: _d_print_comp+2C5A↓j
.text:0040A885                                         ; _d_print_comp+2C8A↓j
.text:0040A885                 mov     byte ptr [ebp+edx+0], 2Dh ; '-'
.text:0040A88A                 inc     edx
.text:0040A88B                 mov     [ebp+100h], edx
.text:0040A891                 mov     byte ptr [ebp+104h], 2Dh ; '-'
.text:0040A898                 jmp     loc_4094E7
.text:0040A89D ; ---------------------------------------------------------------------------
.text:0040A89D
.text:0040A89D loc_40A89D:                             ; CODE XREF: _d_print_comp+15DF↑j
.text:0040A89D                 mov     byte ptr [ebp+0FFh], 0
.text:0040A8A4                 mov     eax, [ebp+10Ch]
.text:0040A8AA                 mov     [esp+0ACh+var_A4], eax
.text:0040A8AE                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040A8B6                 mov     [esp+0ACh+var_AC], ebp
.text:0040A8B9                 call    dword ptr [ebp+108h]
.text:0040A8BF                 inc     dword ptr [ebp+120h]
.text:0040A8C5                 mov     edx, 1
.text:0040A8CA                 xor     eax, eax
.text:0040A8CC                 jmp     loc_409494
.text:0040A8D1 ; ---------------------------------------------------------------------------
.text:0040A8D1
.text:0040A8D1 loc_40A8D1:                             ; CODE XREF: _d_print_comp+2603↑j
.text:0040A8D1                 mov     ecx, [esp+0ACh+var_90]
.text:0040A8D5                 mov     edx, [esp+0ACh+var_8C]
.text:0040A8D9                 mov     eax, ebp
.text:0040A8DB                 call    _d_print_comp
.text:0040A8E0                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040A8E5 ; ---------------------------------------------------------------------------
.text:0040A8E5
.text:0040A8E5 loc_40A8E5:                             ; CODE XREF: _d_print_comp+15CC↑j
.text:0040A8E5                 mov     ecx, [esp+0ACh+var_90]
.text:0040A8E9                 mov     edx, [ecx+8]
.text:0040A8EC                 mov     ecx, [edx]
.text:0040A8EE                 test    ecx, ecx
.text:0040A8F0                 jnz     loc_409480
.text:0040A8F6                 cmp     dword ptr [edx+8], 1
.text:0040A8FA                 jnz     loc_409480
.text:0040A900                 cmp     eax, 37h ; '7'
.text:0040A903                 jnz     loc_409480
.text:0040A909                 mov     eax, [edx+4]
.text:0040A90C                 mov     al, [eax]
.text:0040A90E                 cmp     al, 30h ; '0'
.text:0040A910                 jz      loc_40B018
.text:0040A916                 cmp     al, 31h ; '1'
.text:0040A918                 jnz     loc_409480
.text:0040A91E                 mov     edx, offset aTrue ; "true"
.text:0040A923                 mov     eax, ebp
.text:0040A925                 call    _d_append_string
.text:0040A92A                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040A92A ; ---------------------------------------------------------------------------
.text:0040A92F                 align 10h
.text:0040A930
.text:0040A930 loc_40A930:                             ; CODE XREF: _d_print_comp+15C3↑j
.text:0040A930                 mov     esi, [esp+0ACh+var_90]
.text:0040A934                 mov     ecx, [esi+8]
.text:0040A937                 mov     edi, [ecx]
.text:0040A939                 test    edi, edi
.text:0040A93B                 jnz     loc_409480
.text:0040A941                 cmp     eax, 38h ; '8'
.text:0040A944                 jz      loc_40AFDC
.text:0040A94A
.text:0040A94A loc_40A94A:                             ; CODE XREF: _d_print_comp+313F↓j
.text:0040A94A                 mov     edx, [esp+0ACh+var_8C]
.text:0040A94E                 mov     eax, ebp
.text:0040A950                 call    _d_print_comp
.text:0040A955                 sub     ebx, 2          ; switch 5 cases
.text:0040A958                 cmp     ebx, 4
.text:0040A95B                 ja      def_40A961      ; jumptable 0040A961 default case
.text:0040A961                 jmp     ds:jpt_40A961[ebx*4] ; switch jump
.text:0040A968 ; ---------------------------------------------------------------------------
.text:0040A968
.text:0040A968 loc_40A968:                             ; CODE XREF: _d_print_comp+2AB5↑j
.text:0040A968                                         ; DATA XREF: .rdata:jpt_40A961↓o
.text:0040A968                 mov     edx, offset aLl ; jumptable 0040A961 case 5
.text:0040A96D                 mov     eax, ebp
.text:0040A96F                 call    _d_append_string
.text:0040A974                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040A979 ; ---------------------------------------------------------------------------
.text:0040A979
.text:0040A979 loc_40A979:                             ; CODE XREF: _d_print_comp+2AB5↑j
.text:0040A979                                         ; DATA XREF: .rdata:jpt_40A961↓o
.text:0040A979                 mov     edx, offset aUl ; jumptable 0040A961 case 4
.text:0040A97E                 mov     eax, ebp
.text:0040A980                 call    _d_append_string
.text:0040A985                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040A98A ; ---------------------------------------------------------------------------
.text:0040A98A
.text:0040A98A loc_40A98A:                             ; CODE XREF: _d_print_comp+2AB5↑j
.text:0040A98A                                         ; DATA XREF: .rdata:jpt_40A961↓o
.text:0040A98A                 mov     edx, 6Ch ; 'l'  ; jumptable 0040A961 case 3
.text:0040A98F                 mov     eax, ebp
.text:0040A991                 call    _d_append_char
.text:0040A996                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040A99B ; ---------------------------------------------------------------------------
.text:0040A99B
.text:0040A99B loc_40A99B:                             ; CODE XREF: _d_print_comp+2AB5↑j
.text:0040A99B                                         ; DATA XREF: .rdata:jpt_40A961↓o
.text:0040A99B                 mov     edx, 75h ; 'u'  ; jumptable 0040A961 case 2
.text:0040A9A0                 mov     eax, ebp
.text:0040A9A2                 call    _d_append_char
.text:0040A9A7                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040A9AC ; ---------------------------------------------------------------------------
.text:0040A9AC
.text:0040A9AC loc_40A9AC:                             ; CODE XREF: _d_print_comp+2AB5↑j
.text:0040A9AC                                         ; DATA XREF: .rdata:jpt_40A961↓o
.text:0040A9AC                 mov     edx, offset aUll ; jumptable 0040A961 case 6
.text:0040A9B1                 mov     eax, ebp
.text:0040A9B3                 call    _d_append_string
.text:0040A9B8                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040A9B8 ; ---------------------------------------------------------------------------
.text:0040A9BD                 align 10h
.text:0040A9C0
.text:0040A9C0 loc_40A9C0:                             ; CODE XREF: _d_print_comp+DC7↑j
.text:0040A9C0                                         ; _d_print_comp+DEC↑j
.text:0040A9C0                 mov     eax, [esp+0ACh+var_74]
.text:0040A9C4                 mov     [ebp+114h], eax
.text:0040A9CA                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040A9CF ; ---------------------------------------------------------------------------
.text:0040A9CF
.text:0040A9CF loc_40A9CF:                             ; CODE XREF: _d_print_comp+12C6↑j
.text:0040A9CF                 lea     edx, [eax+4]
.text:0040A9D2                 mov     eax, ebp
.text:0040A9D4                 call    _d_lookup_template_argument_isra_5
.text:0040A9D9                 test    eax, eax
.text:0040A9DB                 jz      short loc_40AA08
.text:0040A9DD                 mov     edx, [eax]
.text:0040A9DF                 cmp     edx, 2Bh ; '+'
.text:0040A9E2                 jnz     loc_409178
.text:0040A9E8                 mov     edx, [ebp+11Ch]
.text:0040A9EE                 jmp     short loc_40A9FD
.text:0040A9F0 ; ---------------------------------------------------------------------------
.text:0040A9F0
.text:0040A9F0 loc_40A9F0:                             ; CODE XREF: _d_print_comp+2B54↓j
.text:0040A9F0                 dec     edx
.text:0040A9F1                 mov     eax, [eax+8]
.text:0040A9F4                 test    eax, eax
.text:0040A9F6                 jz      short loc_40AA08
.text:0040A9F8                 cmp     dword ptr [eax], 2Bh ; '+'
.text:0040A9FB                 jnz     short loc_40AA08
.text:0040A9FD
.text:0040A9FD loc_40A9FD:                             ; CODE XREF: _d_print_comp+2B42↑j
.text:0040A9FD                 cmp     edx, 0
.text:0040AA00                 jg      short loc_40A9F0
.text:0040AA02                 jz      loc_40AFF0
.text:0040AA08
.text:0040AA08 loc_40AA08:                             ; CODE XREF: _d_print_comp+2B2F↑j
.text:0040AA08                                         ; _d_print_comp+2B4A↑j ...
.text:0040AA08                 mov     dword ptr [ebp+118h], 1
.text:0040AA12                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040AA12 ; ---------------------------------------------------------------------------
.text:0040AA17                 align 4
.text:0040AA18
.text:0040AA18 loc_40AA18:                             ; CODE XREF: _d_print_comp+1184↑j
.text:0040AA18                 mov     byte ptr [ebp+0FFh], 0
.text:0040AA1F                 mov     eax, [ebp+10Ch]
.text:0040AA25                 mov     [esp+0ACh+var_A4], eax
.text:0040AA29                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040AA31                 mov     [esp+0ACh+var_AC], ebp
.text:0040AA34                 call    dword ptr [ebp+108h]
.text:0040AA3A                 inc     dword ptr [ebp+120h]
.text:0040AA40                 mov     eax, 1
.text:0040AA45                 xor     edx, edx
.text:0040AA47                 jmp     loc_409039
.text:0040AA4C ; ---------------------------------------------------------------------------
.text:0040AA4C
.text:0040AA4C loc_40AA4C:                             ; CODE XREF: _d_print_comp+EBA↑j
.text:0040AA4C                 cmp     eax, 0FFh
.text:0040AA51                 jz      loc_40AE6A
.text:0040AA57
.text:0040AA57 loc_40AA57:                             ; CODE XREF: _d_print_comp+2FE8↓j
.text:0040AA57                 mov     byte ptr [ebp+eax+0], 20h ; ' '
.text:0040AA5C                 inc     eax
.text:0040AA5D                 mov     [ebp+100h], eax
.text:0040AA63                 mov     byte ptr [ebp+104h], 20h ; ' '
.text:0040AA6A                 jmp     loc_408D6C
.text:0040AA6F ; ---------------------------------------------------------------------------
.text:0040AA6F
.text:0040AA6F loc_40AA6F:                             ; CODE XREF: _d_print_comp+E75↑j
.text:0040AA6F                 cmp     eax, 0FFh
.text:0040AA74                 jz      loc_40AE3B
.text:0040AA7A
.text:0040AA7A loc_40AA7A:                             ; CODE XREF: _d_print_comp+2FB9↓j
.text:0040AA7A                 mov     byte ptr [ebp+eax+0], 20h ; ' '
.text:0040AA7F                 inc     eax
.text:0040AA80                 mov     [ebp+100h], eax
.text:0040AA86                 mov     byte ptr [ebp+104h], 20h ; ' '
.text:0040AA8D                 jmp     loc_408D27
.text:0040AA92 ; ---------------------------------------------------------------------------
.text:0040AA92
.text:0040AA92 loc_40AA92:                             ; CODE XREF: _d_print_comp+163E↑j
.text:0040AA92                 mov     eax, [ebp+100h]
.text:0040AA98                 cmp     eax, 0FFh
.text:0040AA9D                 jz      loc_40AFAD
.text:0040AAA3
.text:0040AAA3 loc_40AAA3:                             ; CODE XREF: _d_print_comp+312B↓j
.text:0040AAA3                 mov     byte ptr [ebp+eax+0], 5Bh ; '['
.text:0040AAA8                 inc     eax
.text:0040AAA9                 mov     [ebp+100h], eax
.text:0040AAAF                 mov     byte ptr [ebp+104h], 5Bh ; '['
.text:0040AAB6                 mov     esi, [esp+0ACh+var_90]
.text:0040AABA                 mov     ecx, [esi+8]
.text:0040AABD                 mov     edx, [esp+0ACh+var_8C]
.text:0040AAC1                 mov     eax, ebp
.text:0040AAC3                 call    _d_print_comp
.text:0040AAC8                 mov     eax, [ebp+100h]
.text:0040AACE                 cmp     eax, 0FFh
.text:0040AAD3                 jz      loc_40AF7E
.text:0040AAD9
.text:0040AAD9 loc_40AAD9:                             ; CODE XREF: _d_print_comp+30FC↓j
.text:0040AAD9                 mov     byte ptr [ebp+eax+0], 5Dh ; ']'
.text:0040AADE                 inc     eax
.text:0040AADF                 mov     [ebp+100h], eax
.text:0040AAE5                 mov     byte ptr [ebp+104h], 5Dh ; ']'
.text:0040AAEC                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040AAF1 ; ---------------------------------------------------------------------------
.text:0040AAF1
.text:0040AAF1 loc_40AAF1:                             ; CODE XREF: _d_print_comp+C3B↑j
.text:0040AAF1                                         ; _d_print_comp+C9D↑j
.text:0040AAF1                 mov     dword ptr [ebp+118h], 1
.text:0040AAFB                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040AB00 ; ---------------------------------------------------------------------------
.text:0040AB00
.text:0040AB00 loc_40AB00:                             ; CODE XREF: _d_print_comp+1635↑j
.text:0040AB00                 cmp     edx, 0FFh
.text:0040AB06                 jnz     loc_40A885
.text:0040AB0C                 mov     byte ptr [ebp+0FFh], 0
.text:0040AB13                 mov     eax, [ebp+10Ch]
.text:0040AB19                 mov     [esp+0ACh+var_A4], eax
.text:0040AB1D                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040AB25                 mov     [esp+0ACh+var_AC], ebp
.text:0040AB28                 call    dword ptr [ebp+108h]
.text:0040AB2E                 inc     dword ptr [ebp+120h]
.text:0040AB34                 xor     edx, edx
.text:0040AB36                 jmp     loc_40A885
.text:0040AB3B ; ---------------------------------------------------------------------------
.text:0040AB3B
.text:0040AB3B loc_40AB3B:                             ; CODE XREF: _d_print_comp+2382↑j
.text:0040AB3B                 mov     edx, 5Bh ; '['
.text:0040AB40                 mov     eax, ebp
.text:0040AB42                 call    _d_append_char
.text:0040AB47                 mov     ecx, [esp+0ACh+var_90]
.text:0040AB4B                 mov     eax, [ecx+8]
.text:0040AB4E                 mov     ecx, [eax+8]
.text:0040AB51                 mov     edx, [esp+0ACh+var_8C]
.text:0040AB55                 mov     eax, ebp
.text:0040AB57                 call    _d_print_comp
.text:0040AB5C                 mov     edx, 5Dh ; ']'
.text:0040AB61                 mov     eax, ebp
.text:0040AB63                 call    _d_append_char
.text:0040AB68                 jmp     loc_40A25D
.text:0040AB6D ; ---------------------------------------------------------------------------
.text:0040AB6D
.text:0040AB6D loc_40AB6D:                             ; CODE XREF: _d_print_comp+1D90↑j
.text:0040AB6D                 mov     byte ptr [ebp+0FFh], 0
.text:0040AB74                 mov     eax, [ebp+10Ch]
.text:0040AB7A                 mov     [esp+0ACh+var_A4], eax
.text:0040AB7E                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040AB86                 mov     [esp+0ACh+var_AC], ebp
.text:0040AB89                 call    dword ptr [ebp+108h]
.text:0040AB8F                 inc     dword ptr [ebp+120h]
.text:0040AB95                 mov     edx, 1
.text:0040AB9A                 xor     eax, eax
.text:0040AB9C                 jmp     loc_409C45
.text:0040ABA1 ; ---------------------------------------------------------------------------
.text:0040ABA1
.text:0040ABA1 loc_40ABA1:                             ; CODE XREF: _d_print_comp+2338↑j
.text:0040ABA1                 mov     ecx, [edx+4]
.text:0040ABA4                 cmp     dword ptr [ecx+8], 1
.text:0040ABA8                 jnz     loc_40A1EA
.text:0040ABAE                 mov     ecx, [ecx+4]
.text:0040ABB1                 cmp     byte ptr [ecx], 3Eh ; '>'
.text:0040ABB4                 jnz     loc_40A1EA
.text:0040ABBA                 mov     edx, 28h ; '('
.text:0040ABBF                 mov     eax, ebp
.text:0040ABC1                 call    _d_append_char
.text:0040ABC6                 mov     ecx, [esp+0ACh+var_90]
.text:0040ABCA                 mov     edx, [ecx+4]
.text:0040ABCD                 mov     eax, [ecx+8]
.text:0040ABD0                 jmp     loc_40A1EA
.text:0040ABD0 ; ---------------------------------------------------------------------------
.text:0040ABD5                 align 4
.text:0040ABD8
.text:0040ABD8 loc_40ABD8:                             ; CODE XREF: _d_print_comp+E55↑j
.text:0040ABD8                 mov     esi, [eax+4]
.text:0040ABDB                 mov     edi, offset aJarray ; "JArray"
.text:0040ABE0                 mov     ecx, 6
.text:0040ABE5                 repe cmpsb
.text:0040ABE7                 jnz     loc_408D07
.text:0040ABED                 mov     esi, [esp+0ACh+var_90]
.text:0040ABF1                 mov     ecx, [esi+8]
.text:0040ABF4                 mov     edx, [esp+0ACh+var_8C]
.text:0040ABF8                 mov     eax, ebp
.text:0040ABFA                 call    _d_print_comp
.text:0040ABFF                 mov     edx, offset asc_414D52 ; "[]"
.text:0040AC04                 mov     eax, ebp
.text:0040AC06                 call    _d_append_string
.text:0040AC0B                 jmp     loc_408D8C
.text:0040AC10 ; ---------------------------------------------------------------------------
.text:0040AC10
.text:0040AC10 loc_40AC10:                             ; CODE XREF: _d_print_comp+2173↑j
.text:0040AC10                 mov     byte ptr [ebp+0FFh], 0
.text:0040AC17                 mov     eax, [ebp+10Ch]
.text:0040AC1D                 mov     [esp+0ACh+var_A4], eax
.text:0040AC21                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040AC29                 mov     [esp+0ACh+var_AC], ebp
.text:0040AC2C                 call    dword ptr [ebp+108h]
.text:0040AC32                 inc     dword ptr [ebp+120h]
.text:0040AC38                 mov     edx, 1
.text:0040AC3D                 xor     eax, eax
.text:0040AC3F                 jmp     loc_40A028
.text:0040AC44 ; ---------------------------------------------------------------------------
.text:0040AC44
.text:0040AC44 loc_40AC44:                             ; CODE XREF: _d_print_comp+2396↑j
.text:0040AC44                 mov     ecx, eax
.text:0040AC46                 mov     edx, [esp+0ACh+var_8C]
.text:0040AC4A                 mov     eax, ebp
.text:0040AC4C                 call    _d_print_expr_op
.text:0040AC51                 jmp     loc_40A248
.text:0040AC56 ; ---------------------------------------------------------------------------
.text:0040AC56
.text:0040AC56 loc_40AC56:                             ; CODE XREF: _d_print_comp+2357↑j
.text:0040AC56                 mov     eax, [ecx+8]
.text:0040AC59                 cmp     dword ptr [eax], 25h ; '%'
.text:0040AC5C                 jz      short loc_40AC68
.text:0040AC5E                 mov     dword ptr [ebp+118h], 1
.text:0040AC68
.text:0040AC68 loc_40AC68:                             ; CODE XREF: _d_print_comp+2DB0↑j
.text:0040AC68                 mov     ecx, [ecx+4]
.text:0040AC6B                 mov     edx, [esp+0ACh+var_8C]
.text:0040AC6F                 mov     eax, ebp
.text:0040AC71                 call    _d_print_subexpr
.text:0040AC76                 jmp     loc_40A214
.text:0040AC7B ; ---------------------------------------------------------------------------
.text:0040AC7B
.text:0040AC7B loc_40AC7B:                             ; CODE XREF: _d_print_comp+24DA↑j
.text:0040AC7B                 mov     byte ptr [ebp+0FFh], 0
.text:0040AC82                 mov     eax, [ebp+10Ch]
.text:0040AC88                 mov     [esp+0ACh+var_A4], eax
.text:0040AC8C                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040AC94                 mov     [esp+0ACh+var_AC], ebp
.text:0040AC97                 call    dword ptr [ebp+108h]
.text:0040AC9D                 inc     dword ptr [ebp+120h]
.text:0040ACA3                 xor     eax, eax
.text:0040ACA5                 jmp     loc_40A38C
.text:0040ACAA ; ---------------------------------------------------------------------------
.text:0040ACAA
.text:0040ACAA loc_40ACAA:                             ; CODE XREF: _d_print_comp+22B6↑j
.text:0040ACAA                 mov     al, byte ptr [esp+0ACh+var_90]
.text:0040ACAE                 jmp     loc_40A0F3
.text:0040ACB3 ; ---------------------------------------------------------------------------
.text:0040ACB3
.text:0040ACB3 loc_40ACB3:                             ; CODE XREF: _d_print_comp+26B8↑j
.text:0040ACB3                 mov     byte ptr [ebp+0FFh], 0
.text:0040ACBA                 mov     eax, [ebp+10Ch]
.text:0040ACC0                 mov     [esp+0ACh+var_A4], eax
.text:0040ACC4                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040ACCC                 mov     [esp+0ACh+var_AC], ebp
.text:0040ACCF                 call    dword ptr [ebp+108h]
.text:0040ACD5                 inc     dword ptr [ebp+120h]
.text:0040ACDB                 xor     eax, eax
.text:0040ACDD                 jmp     loc_40A56A
.text:0040ACE2 ; ---------------------------------------------------------------------------
.text:0040ACE2
.text:0040ACE2 loc_40ACE2:                             ; CODE XREF: _d_print_comp+2686↑j
.text:0040ACE2                 mov     byte ptr [ebp+0FFh], 0
.text:0040ACE9                 mov     eax, [ebp+10Ch]
.text:0040ACEF                 mov     [esp+0ACh+var_A4], eax
.text:0040ACF3                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040ACFB                 mov     [esp+0ACh+var_AC], ebp
.text:0040ACFE                 call    dword ptr [ebp+108h]
.text:0040AD04                 inc     dword ptr [ebp+120h]
.text:0040AD0A                 xor     eax, eax
.text:0040AD0C                 jmp     loc_40A538
.text:0040AD11 ; ---------------------------------------------------------------------------
.text:0040AD11
.text:0040AD11 loc_40AD11:                             ; CODE XREF: _d_print_comp+2425↑j
.text:0040AD11                 mov     ecx, [esp+0ACh+var_90]
.text:0040AD15                 mov     edx, [esp+0ACh+var_8C]
.text:0040AD19                 mov     eax, ebp
.text:0040AD1B                 call    _d_print_subexpr
.text:0040AD20                 mov     ecx, ebx
.text:0040AD22                 mov     edx, [esp+0ACh+var_8C]
.text:0040AD26                 mov     eax, ebp
.text:0040AD28                 call    _d_print_expr_op
.text:0040AD2D                 mov     ecx, [esp+0ACh+var_84]
.text:0040AD31                 mov     edx, [esp+0ACh+var_8C]
.text:0040AD35                 mov     eax, ebp
.text:0040AD37                 call    _d_print_subexpr
.text:0040AD3C                 mov     edx, offset asc_414EB4 ; " : "
.text:0040AD41                 mov     eax, ebp
.text:0040AD43                 call    _d_append_string
.text:0040AD48                 mov     ecx, [esp+0ACh+var_88]
.text:0040AD4C                 mov     edx, [esp+0ACh+var_8C]
.text:0040AD50                 mov     eax, ebp
.text:0040AD52                 call    _d_print_subexpr
.text:0040AD57                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040AD5C ; ---------------------------------------------------------------------------
.text:0040AD5C
.text:0040AD5C loc_40AD5C:                             ; CODE XREF: _d_print_comp+CE5↑j
.text:0040AD5C                 mov     edx, [esp+0ACh+var_84]
.text:0040AD60                 mov     [esp+0ACh+var_64], edx
.text:0040AD64                 lea     eax, [esp+0ACh+var_64]
.text:0040AD68                 mov     [ebp+110h], eax
.text:0040AD6E                 mov     [esp+0ACh+var_60], ebx
.text:0040AD72                 jmp     loc_408C52
.text:0040AD77 ; ---------------------------------------------------------------------------
.text:0040AD77
.text:0040AD77 loc_40AD77:                             ; CODE XREF: _d_print_comp+DBB↑j
.text:0040AD77                 mov     eax, [esp+0ACh+var_64]
.text:0040AD7B                 mov     [ebp+110h], eax
.text:0040AD81                 jmp     loc_408C6D
.text:0040AD86 ; ---------------------------------------------------------------------------
.text:0040AD86
.text:0040AD86 loc_40AD86:                             ; CODE XREF: _d_print_comp+265D↑j
.text:0040AD86                 mov     byte ptr [ebp+0FFh], 0
.text:0040AD8D                 mov     eax, [ebp+10Ch]
.text:0040AD93                 mov     [esp+0ACh+var_A4], eax
.text:0040AD97                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040AD9F                 mov     [esp+0ACh+var_AC], ebp
.text:0040ADA2                 call    dword ptr [ebp+108h]
.text:0040ADA8                 inc     dword ptr [ebp+120h]
.text:0040ADAE                 xor     eax, eax
.text:0040ADB0                 jmp     loc_40A50F
.text:0040ADB5 ; ---------------------------------------------------------------------------
.text:0040ADB5
.text:0040ADB5 loc_40ADB5:                             ; CODE XREF: _d_print_comp+262A↑j
.text:0040ADB5                 mov     byte ptr [ebp+0FFh], 0
.text:0040ADBC                 mov     eax, [ebp+10Ch]
.text:0040ADC2                 mov     [esp+0ACh+var_A4], eax
.text:0040ADC6                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040ADCE                 mov     [esp+0ACh+var_AC], ebp
.text:0040ADD1                 call    dword ptr [ebp+108h]
.text:0040ADD7                 inc     dword ptr [ebp+120h]
.text:0040ADDD                 xor     eax, eax
.text:0040ADDF                 jmp     loc_40A4DC
.text:0040ADE4 ; ---------------------------------------------------------------------------
.text:0040ADE4
.text:0040ADE4 loc_40ADE4:                             ; CODE XREF: _d_print_comp+25C7↑j
.text:0040ADE4                 mov     eax, [ecx+4]
.text:0040ADE7                 cmp     dword ptr [eax], 1
.text:0040ADEA                 jnz     loc_40A486
.text:0040ADF0                 mov     edx, [ecx+8]
.text:0040ADF3                 cmp     dword ptr [edx], 25h ; '%'
.text:0040ADF6                 jnz     loc_40A486
.text:0040ADFC                 mov     [esp+0ACh+var_90], eax
.text:0040AE00                 jmp     loc_40A486
.text:0040AE05 ; ---------------------------------------------------------------------------
.text:0040AE05
.text:0040AE05 loc_40AE05:                             ; CODE XREF: _d_print_comp+D9↑j
.text:0040AE05                 mov     esi, [esp+0ACh+var_90]
.text:0040AE09                 mov     ecx, [esi+4]
.text:0040AE0C                 mov     edx, [esp+0ACh+var_8C]
.text:0040AE10                 mov     eax, ebp
.text:0040AE12                 call    _d_print_subexpr
.text:0040AE17                 mov     edx, offset asc_414EF0 ; "..."
.text:0040AE1C                 mov     eax, ebp
.text:0040AE1E                 call    _d_append_string
.text:0040AE23                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040AE28 ; ---------------------------------------------------------------------------
.text:0040AE28
.text:0040AE28 loc_40AE28:                             ; CODE XREF: _d_print_comp+D41↑j
.text:0040AE28                 mov     ebp, [esp+0ACh+var_78]
.text:0040AE2C
.text:0040AE2C loc_40AE2C:                             ; CODE XREF: _d_print_comp+D13↑j
.text:0040AE2C                 mov     dword ptr [ebp+118h], 1
.text:0040AE36                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040AE3B ; ---------------------------------------------------------------------------
.text:0040AE3B
.text:0040AE3B loc_40AE3B:                             ; CODE XREF: _d_print_comp+2BC8↑j
.text:0040AE3B                 mov     byte ptr [ebp+0FFh], 0
.text:0040AE42                 mov     eax, [ebp+10Ch]
.text:0040AE48                 mov     [esp+0ACh+var_A4], eax
.text:0040AE4C                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040AE54                 mov     [esp+0ACh+var_AC], ebp
.text:0040AE57                 call    dword ptr [ebp+108h]
.text:0040AE5D                 inc     dword ptr [ebp+120h]
.text:0040AE63                 xor     eax, eax
.text:0040AE65                 jmp     loc_40AA7A
.text:0040AE6A ; ---------------------------------------------------------------------------
.text:0040AE6A
.text:0040AE6A loc_40AE6A:                             ; CODE XREF: _d_print_comp+2BA5↑j
.text:0040AE6A                 mov     byte ptr [ebp+0FFh], 0
.text:0040AE71                 mov     eax, [ebp+10Ch]
.text:0040AE77                 mov     [esp+0ACh+var_A4], eax
.text:0040AE7B                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040AE83                 mov     [esp+0ACh+var_AC], ebp
.text:0040AE86                 call    dword ptr [ebp+108h]
.text:0040AE8C                 inc     dword ptr [ebp+120h]
.text:0040AE92                 xor     eax, eax
.text:0040AE94                 jmp     loc_40AA57
.text:0040AE99 ; ---------------------------------------------------------------------------
.text:0040AE99
.text:0040AE99 loc_40AE99:                             ; CODE XREF: _d_print_comp+E04↑j
.text:0040AE99                 mov     byte ptr [ebp+0FFh], 0
.text:0040AEA0                 mov     eax, [ebp+10Ch]
.text:0040AEA6                 mov     [esp+0ACh+var_A4], eax
.text:0040AEAA                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040AEB2                 mov     [esp+0ACh+var_AC], ebp
.text:0040AEB5                 call    dword ptr [ebp+108h]
.text:0040AEBB                 inc     dword ptr [ebp+120h]
.text:0040AEC1                 xor     eax, eax
.text:0040AEC3                 jmp     loc_408CB6
.text:0040AEC8 ; ---------------------------------------------------------------------------
.text:0040AEC8
.text:0040AEC8 loc_40AEC8:                             ; CODE XREF: _d_print_comp+248C↑j
.text:0040AEC8                 mov     ecx, eax
.text:0040AECA                 mov     al, byte ptr [esp+0ACh+var_90]
.text:0040AECE                 cmp     edi, esi
.text:0040AED0                 jbe     loc_40A0F3
.text:0040AED6                 cmp     dl, 5Fh ; '_'
.text:0040AED9                 jnz     loc_40A0F3
.text:0040AEDF                 cmp     ecx, 0FFh
.text:0040AEE5                 ja      loc_40A0F3
.text:0040AEEB                 mov     bl, cl
.text:0040AEED                 cmp     dword ptr [ebp+100h], 0FFh
.text:0040AEF7                 jnz     short loc_40AF2B
.text:0040AEF9                 mov     byte ptr [ebp+0FFh], 0
.text:0040AF00                 mov     eax, [ebp+10Ch]
.text:0040AF06                 mov     [esp+0ACh+var_A4], eax
.text:0040AF0A                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040AF12                 mov     [esp+0ACh+var_AC], ebp
.text:0040AF15                 call    dword ptr [ebp+108h]
.text:0040AF1B                 mov     dword ptr [ebp+100h], 0
.text:0040AF25                 inc     dword ptr [ebp+120h]
.text:0040AF2B
.text:0040AF2B loc_40AF2B:                             ; CODE XREF: _d_print_comp+304B↑j
.text:0040AF2B                 mov     eax, [ebp+100h]
.text:0040AF31                 mov     [ebp+eax+0], bl
.text:0040AF35                 inc     eax
.text:0040AF36                 mov     [ebp+100h], eax
.text:0040AF3C                 mov     [ebp+104h], bl
.text:0040AF42                 mov     ebx, esi
.text:0040AF44                 jmp     loc_40A0DB
.text:0040AF49 ; ---------------------------------------------------------------------------
.text:0040AF49
.text:0040AF49 loc_40AF49:                             ; CODE XREF: _d_print_comp+C79↑j
.text:0040AF49                 mov     [esp+0ACh+var_88], 1
.text:0040AF51                 jmp     loc_408B8C
.text:0040AF56 ; ---------------------------------------------------------------------------
.text:0040AF56
.text:0040AF56 loc_40AF56:                             ; CODE XREF: _d_print_comp+25D4↑j
.text:0040AF56                 mov     ecx, [ecx+4]
.text:0040AF59                 mov     edx, [esp+0ACh+var_8C]
.text:0040AF5D                 mov     eax, ebp
.text:0040AF5F                 call    _d_print_subexpr
.text:0040AF64                 mov     ecx, ebx
.text:0040AF66                 mov     edx, [esp+0ACh+var_8C]
.text:0040AF6A                 mov     eax, ebp
.text:0040AF6C                 call    _d_print_expr_op
.text:0040AF71                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040AF76 ; ---------------------------------------------------------------------------
.text:0040AF76
.text:0040AF76 loc_40AF76:                             ; CODE XREF: _d_print_comp+CFA↑j
.text:0040AF76                 mov     eax, [eax+4]
.text:0040AF79                 jmp     loc_408BAC
.text:0040AF7E ; ---------------------------------------------------------------------------
.text:0040AF7E
.text:0040AF7E loc_40AF7E:                             ; CODE XREF: _d_print_comp+2C27↑j
.text:0040AF7E                 mov     byte ptr [ebp+0FFh], 0
.text:0040AF85                 mov     eax, [ebp+10Ch]
.text:0040AF8B                 mov     [esp+0ACh+var_A4], eax
.text:0040AF8F                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040AF97                 mov     [esp+0ACh+var_AC], ebp
.text:0040AF9A                 call    dword ptr [ebp+108h]
.text:0040AFA0                 inc     dword ptr [ebp+120h]
.text:0040AFA6                 xor     eax, eax
.text:0040AFA8                 jmp     loc_40AAD9
.text:0040AFAD ; ---------------------------------------------------------------------------
.text:0040AFAD
.text:0040AFAD loc_40AFAD:                             ; CODE XREF: _d_print_comp+2BF1↑j
.text:0040AFAD                 mov     byte ptr [ebp+0FFh], 0
.text:0040AFB4                 mov     eax, [ebp+10Ch]
.text:0040AFBA                 mov     [esp+0ACh+var_A4], eax
.text:0040AFBE                 mov     [esp+0ACh+var_A8], 0FFh
.text:0040AFC6                 mov     [esp+0ACh+var_AC], ebp
.text:0040AFC9                 call    dword ptr [ebp+108h]
.text:0040AFCF                 inc     dword ptr [ebp+120h]
.text:0040AFD5                 xor     eax, eax
.text:0040AFD7                 jmp     loc_40AAA3
.text:0040AFDC ; ---------------------------------------------------------------------------
.text:0040AFDC
.text:0040AFDC loc_40AFDC:                             ; CODE XREF: _d_print_comp+2A98↑j
.text:0040AFDC                 mov     edx, 2Dh ; '-'
.text:0040AFE1                 mov     eax, ebp
.text:0040AFE3                 call    _d_append_char
.text:0040AFE8                 mov     ecx, [esi+8]
.text:0040AFEB                 jmp     loc_40A94A
.text:0040AFF0 ; ---------------------------------------------------------------------------
.text:0040AFF0
.text:0040AFF0 loc_40AFF0:                             ; CODE XREF: _d_print_comp+2B56↑j
.text:0040AFF0                 mov     eax, [eax+4]
.text:0040AFF3                 test    eax, eax
.text:0040AFF5                 jz      loc_40AA08
.text:0040AFFB                 mov     edx, [eax]
.text:0040AFFD                 jmp     loc_409178
.text:0040B002 ; ---------------------------------------------------------------------------
.text:0040B002
.text:0040B002 loc_40B002:                             ; CODE XREF: _d_print_comp+24B8↑j
.text:0040B002                 jnz     loc_40A372
.text:0040B008                 mov     eax, [eax+4]
.text:0040B00B                 test    eax, eax
.text:0040B00D                 jnz     loc_408DB6
.text:0040B013                 jmp     loc_40A372
.text:0040B018 ; ---------------------------------------------------------------------------
.text:0040B018
.text:0040B018 loc_40B018:                             ; CODE XREF: _d_print_comp+2A64↑j
.text:0040B018                 mov     edx, offset aFalse ; "false"
.text:0040B01D                 mov     eax, ebp
.text:0040B01F                 call    _d_append_string
.text:0040B024                 jmp     def_40A961      ; jumptable 0040A961 default case
.text:0040B024 _d_print_comp   endp
.text:0040B024
.text:0040B024 ; ---------------------------------------------------------------------------
.text:0040B029                 align 4
.text:0040B02C
.text:0040B02C ; =============== S U B R O U T I N E =======================================
.text:0040B02C
.text:0040B02C
.text:0040B02C _d_print_mod    proc near               ; CODE XREF: _d_print_comp+B3↑p
.text:0040B02C                                         ; _d_print_comp+E26↑p ...
.text:0040B02C
.text:0040B02C var_3C          = dword ptr -3Ch
.text:0040B02C var_38          = dword ptr -38h
.text:0040B02C var_34          = dword ptr -34h
.text:0040B02C var_24          = dword ptr -24h
.text:0040B02C var_1D          = byte ptr -1Dh
.text:0040B02C
.text:0040B02C                 push    ebp
.text:0040B02D                 push    edi
.text:0040B02E                 push    esi
.text:0040B02F                 push    ebx
.text:0040B030                 sub     esp, 2Ch
.text:0040B033                 mov     ebx, eax
.text:0040B035                 mov     ebp, edx
.text:0040B037                 mov     eax, [ecx]
.text:0040B039                 sub     eax, 3          ; switch 39 cases
.text:0040B03C                 cmp     eax, 26h
.text:0040B03F                 jbe     short loc_40B054
.text:0040B041
.text:0040B041 def_40B054:                             ; CODE XREF: _d_print_mod:loc_40B054↓j
.text:0040B041                                         ; _d_print_mod+123↓j ...
.text:0040B041                 mov     edx, ebp        ; jumptable 0040B054 default case, cases 4-22,35-38,40
.text:0040B043                 mov     eax, ebx
.text:0040B045                 add     esp, 2Ch
.text:0040B048                 pop     ebx
.text:0040B049                 pop     esi
.text:0040B04A                 pop     edi
.text:0040B04B                 pop     ebp
.text:0040B04C                 jmp     _d_print_comp
.text:0040B04C ; ---------------------------------------------------------------------------
.text:0040B051                 align 4
.text:0040B054
.text:0040B054 loc_40B054:                             ; CODE XREF: _d_print_mod+13↑j
.text:0040B054                 jmp     ds:jpt_40B054[eax*4] ; switch jump
.text:0040B054 ; ---------------------------------------------------------------------------
.text:0040B05B                 align 4
.text:0040B05C
.text:0040B05C loc_40B05C:                             ; CODE XREF: _d_print_mod:loc_40B054↑j
.text:0040B05C                                         ; DATA XREF: .rdata:jpt_40B054↓o
.text:0040B05C                 mov     eax, [ebx+100h] ; jumptable 0040B054 case 41
.text:0040B062                 mov     esi, offset aVector ; " __vector("
.text:0040B067                 jmp     short loc_40B08F
.text:0040B067 ; ---------------------------------------------------------------------------
.text:0040B069                 align 4
.text:0040B06C
.text:0040B06C loc_40B06C:                             ; CODE XREF: _d_print_mod+6E↓j
.text:0040B06C                 mov     edi, eax
.text:0040B06E                 inc     eax
.text:0040B06F
.text:0040B06F loc_40B06F:                             ; CODE XREF: _d_print_mod+A7↓j
.text:0040B06F                 mov     dl, [esp+3Ch+var_1D]
.text:0040B073                 mov     [ebx+edi], dl
.text:0040B076                 mov     [ebx+100h], eax
.text:0040B07C                 mov     [ebx+104h], dl
.text:0040B082                 inc     esi
.text:0040B083                 cmp     esi, 4150D0h
.text:0040B089                 jz      loc_40B4AC
.text:0040B08F
.text:0040B08F loc_40B08F:                             ; CODE XREF: _d_print_mod+3B↑j
.text:0040B08F                 mov     dl, [esi]
.text:0040B091                 mov     [esp+3Ch+var_1D], dl
.text:0040B095                 cmp     eax, 0FFh
.text:0040B09A                 jnz     short loc_40B06C
.text:0040B09C                 mov     byte ptr [ebx+0FFh], 0
.text:0040B0A3                 mov     eax, [ebx+10Ch]
.text:0040B0A9                 mov     [esp+3Ch+var_34], eax
.text:0040B0AD                 mov     [esp+3Ch+var_38], 0FFh
.text:0040B0B5                 mov     [esp+3Ch+var_3C], ebx
.text:0040B0B8                 mov     [esp+3Ch+var_24], ecx
.text:0040B0BC                 call    dword ptr [ebx+108h]
.text:0040B0C2                 inc     dword ptr [ebx+120h]
.text:0040B0C8                 mov     eax, 1
.text:0040B0CD                 xor     edi, edi
.text:0040B0CF                 mov     ecx, [esp+3Ch+var_24]
.text:0040B0D3                 jmp     short loc_40B06F
.text:0040B0D3 ; ---------------------------------------------------------------------------
.text:0040B0D5                 align 4
.text:0040B0D8
.text:0040B0D8 loc_40B0D8:                             ; CODE XREF: _d_print_mod:loc_40B054↑j
.text:0040B0D8                                         ; DATA XREF: .rdata:jpt_40B054↓o
.text:0040B0D8                 mov     eax, [ebx+100h] ; jumptable 0040B054 cases 23,26
.text:0040B0DE                 mov     esi, offset aRestrict ; " restrict"
.text:0040B0E3                 jmp     short loc_40B107
.text:0040B0E3 ; ---------------------------------------------------------------------------
.text:0040B0E5                 align 4
.text:0040B0E8
.text:0040B0E8 loc_40B0E8:                             ; CODE XREF: _d_print_mod+E2↓j
.text:0040B0E8                 mov     ecx, eax
.text:0040B0EA                 inc     eax
.text:0040B0EB
.text:0040B0EB loc_40B0EB:                             ; CODE XREF: _d_print_mod+11B↓j
.text:0040B0EB                 mov     [ebx+ecx], dl
.text:0040B0EE                 mov     [ebx+100h], eax
.text:0040B0F4                 mov     [ebx+104h], dl
.text:0040B0FA                 inc     esi
.text:0040B0FB                 cmp     esi, 415099h
.text:0040B101                 jz      loc_40B278
.text:0040B107
.text:0040B107 loc_40B107:                             ; CODE XREF: _d_print_mod+B7↑j
.text:0040B107                 mov     dl, [esi]
.text:0040B109                 cmp     eax, 0FFh
.text:0040B10E                 jnz     short loc_40B0E8
.text:0040B110                 mov     byte ptr [ebx+0FFh], 0
.text:0040B117                 mov     eax, [ebx+10Ch]
.text:0040B11D                 mov     [esp+3Ch+var_34], eax
.text:0040B121                 mov     [esp+3Ch+var_38], 0FFh
.text:0040B129                 mov     [esp+3Ch+var_3C], ebx
.text:0040B12C                 mov     byte ptr [esp+3Ch+var_24], dl
.text:0040B130                 call    dword ptr [ebx+108h]
.text:0040B136                 inc     dword ptr [ebx+120h]
.text:0040B13C                 mov     eax, 1
.text:0040B141                 xor     ecx, ecx
.text:0040B143                 mov     dl, byte ptr [esp+3Ch+var_24]
.text:0040B147                 jmp     short loc_40B0EB
.text:0040B147 ; ---------------------------------------------------------------------------
.text:0040B149                 align 4
.text:0040B14C
.text:0040B14C loc_40B14C:                             ; CODE XREF: _d_print_mod:loc_40B054↑j
.text:0040B14C                                         ; DATA XREF: .rdata:jpt_40B054↓o
.text:0040B14C                 mov     ecx, [ecx+4]    ; jumptable 0040B054 case 3
.text:0040B14F                 jmp     def_40B054      ; jumptable 0040B054 default case, cases 4-22,35-38,40
.text:0040B154 ; ---------------------------------------------------------------------------
.text:0040B154
.text:0040B154 loc_40B154:                             ; CODE XREF: _d_print_mod:loc_40B054↑j
.text:0040B154                                         ; DATA XREF: .rdata:jpt_40B054↓o
.text:0040B154                 mov     eax, [ebx+100h] ; jumptable 0040B054 cases 24,27
.text:0040B15A                 mov     esi, offset aVolatile ; " volatile"
.text:0040B15F                 jmp     short loc_40B183
.text:0040B15F ; ---------------------------------------------------------------------------
.text:0040B161                 align 4
.text:0040B164
.text:0040B164 loc_40B164:                             ; CODE XREF: _d_print_mod+15E↓j
.text:0040B164                 mov     ecx, eax
.text:0040B166                 inc     eax
.text:0040B167
.text:0040B167 loc_40B167:                             ; CODE XREF: _d_print_mod+197↓j
.text:0040B167                 mov     [ebx+ecx], dl
.text:0040B16A                 mov     [ebx+100h], eax
.text:0040B170                 mov     [ebx+104h], dl
.text:0040B176                 inc     esi
.text:0040B177                 cmp     esi, 4150A3h
.text:0040B17D                 jz      loc_40B278
.text:0040B183
.text:0040B183 loc_40B183:                             ; CODE XREF: _d_print_mod+133↑j
.text:0040B183                 mov     dl, [esi]
.text:0040B185                 cmp     eax, 0FFh
.text:0040B18A                 jnz     short loc_40B164
.text:0040B18C                 mov     byte ptr [ebx+0FFh], 0
.text:0040B193                 mov     eax, [ebx+10Ch]
.text:0040B199                 mov     [esp+3Ch+var_34], eax
.text:0040B19D                 mov     [esp+3Ch+var_38], 0FFh
.text:0040B1A5                 mov     [esp+3Ch+var_3C], ebx
.text:0040B1A8                 mov     byte ptr [esp+3Ch+var_24], dl
.text:0040B1AC                 call    dword ptr [ebx+108h]
.text:0040B1B2                 inc     dword ptr [ebx+120h]
.text:0040B1B8                 mov     eax, 1
.text:0040B1BD                 xor     ecx, ecx
.text:0040B1BF                 mov     dl, byte ptr [esp+3Ch+var_24]
.text:0040B1C3                 jmp     short loc_40B167
.text:0040B1C3 ; ---------------------------------------------------------------------------
.text:0040B1C5                 align 4
.text:0040B1C8
.text:0040B1C8 loc_40B1C8:                             ; CODE XREF: _d_print_mod:loc_40B054↑j
.text:0040B1C8                                         ; DATA XREF: .rdata:jpt_40B054↓o
.text:0040B1C8                 mov     eax, [ebx+100h] ; jumptable 0040B054 cases 25,28
.text:0040B1CE                 mov     esi, offset aConst ; " const"
.text:0040B1D3                 jmp     short loc_40B1F7
.text:0040B1D3 ; ---------------------------------------------------------------------------
.text:0040B1D5                 align 4
.text:0040B1D8
.text:0040B1D8 loc_40B1D8:                             ; CODE XREF: _d_print_mod+1D2↓j
.text:0040B1D8                 mov     ecx, eax
.text:0040B1DA                 inc     eax
.text:0040B1DB
.text:0040B1DB loc_40B1DB:                             ; CODE XREF: _d_print_mod+20B↓j
.text:0040B1DB                 mov     [ebx+ecx], dl
.text:0040B1DE                 mov     [ebx+100h], eax
.text:0040B1E4                 mov     [ebx+104h], dl
.text:0040B1EA                 inc     esi
.text:0040B1EB                 cmp     esi, 4150AAh
.text:0040B1F1                 jz      loc_40B278
.text:0040B1F7
.text:0040B1F7 loc_40B1F7:                             ; CODE XREF: _d_print_mod+1A7↑j
.text:0040B1F7                 mov     dl, [esi]
.text:0040B1F9                 cmp     eax, 0FFh
.text:0040B1FE                 jnz     short loc_40B1D8
.text:0040B200                 mov     byte ptr [ebx+0FFh], 0
.text:0040B207                 mov     eax, [ebx+10Ch]
.text:0040B20D                 mov     [esp+3Ch+var_34], eax
.text:0040B211                 mov     [esp+3Ch+var_38], 0FFh
.text:0040B219                 mov     [esp+3Ch+var_3C], ebx
.text:0040B21C                 mov     byte ptr [esp+3Ch+var_24], dl
.text:0040B220                 call    dword ptr [ebx+108h]
.text:0040B226                 inc     dword ptr [ebx+120h]
.text:0040B22C                 mov     eax, 1
.text:0040B231                 xor     ecx, ecx
.text:0040B233                 mov     dl, byte ptr [esp+3Ch+var_24]
.text:0040B237                 jmp     short loc_40B1DB
.text:0040B237 ; ---------------------------------------------------------------------------
.text:0040B239                 align 4
.text:0040B23C
.text:0040B23C loc_40B23C:                             ; CODE XREF: _d_print_mod:loc_40B054↑j
.text:0040B23C                                         ; DATA XREF: .rdata:jpt_40B054↓o
.text:0040B23C                 mov     eax, [ebx+100h] ; jumptable 0040B054 case 29
.text:0040B242                 cmp     eax, 0FFh
.text:0040B247                 jz      loc_40B510
.text:0040B24D                 lea     esi, [eax+1]
.text:0040B250
.text:0040B250 loc_40B250:                             ; CODE XREF: _d_print_mod+51B↓j
.text:0040B250                 mov     byte ptr [ebx+eax], 20h ; ' '
.text:0040B254                 mov     [ebx+100h], esi
.text:0040B25A                 mov     byte ptr [ebx+104h], 20h ; ' '
.text:0040B261                 mov     ecx, [ecx+8]
.text:0040B264                 jmp     def_40B054      ; jumptable 0040B054 default case, cases 4-22,35-38,40
.text:0040B264 ; ---------------------------------------------------------------------------
.text:0040B269                 align 4
.text:0040B26C
.text:0040B26C loc_40B26C:                             ; CODE XREF: _d_print_mod:loc_40B054↑j
.text:0040B26C                                         ; DATA XREF: .rdata:jpt_40B054↓o
.text:0040B26C                 and     ebp, 4          ; jumptable 0040B054 case 30
.text:0040B26F                 jz      loc_40B4E4
.text:0040B275                 lea     esi, [esi+0]
.text:0040B278
.text:0040B278 loc_40B278:                             ; CODE XREF: _d_print_mod+D5↑j
.text:0040B278                                         ; _d_print_mod+151↑j ...
.text:0040B278                 add     esp, 2Ch
.text:0040B27B                 pop     ebx
.text:0040B27C                 pop     esi
.text:0040B27D                 pop     edi
.text:0040B27E                 pop     ebp
.text:0040B27F                 retn
.text:0040B280 ; ---------------------------------------------------------------------------
.text:0040B280
.text:0040B280 loc_40B280:                             ; CODE XREF: _d_print_mod:loc_40B054↑j
.text:0040B280                                         ; DATA XREF: .rdata:jpt_40B054↓o
.text:0040B280                 mov     eax, [ebx+100h] ; jumptable 0040B054 case 31
.text:0040B286                 cmp     eax, 0FFh
.text:0040B28B                 jz      loc_40B54C
.text:0040B291                 lea     edx, [eax+1]
.text:0040B294
.text:0040B294 loc_40B294:                             ; CODE XREF: _d_print_mod+54F↓j
.text:0040B294                 mov     byte ptr [ebx+eax], 26h ; '&'
.text:0040B298                 mov     [ebx+100h], edx
.text:0040B29E                 mov     byte ptr [ebx+104h], 26h ; '&'
.text:0040B2A5                 jmp     short loc_40B278
.text:0040B2A5 ; ---------------------------------------------------------------------------
.text:0040B2A7                 align 4
.text:0040B2A8
.text:0040B2A8 loc_40B2A8:                             ; CODE XREF: _d_print_mod:loc_40B054↑j
.text:0040B2A8                                         ; DATA XREF: .rdata:jpt_40B054↓o
.text:0040B2A8                 mov     eax, [ebx+100h] ; jumptable 0040B054 case 32
.text:0040B2AE                 mov     esi, offset asc_4150AB ; "&&"
.text:0040B2B3                 jmp     short loc_40B2D3
.text:0040B2B3 ; ---------------------------------------------------------------------------
.text:0040B2B5                 align 4
.text:0040B2B8
.text:0040B2B8 loc_40B2B8:                             ; CODE XREF: _d_print_mod+2AE↓j
.text:0040B2B8                 mov     ecx, eax
.text:0040B2BA                 inc     eax
.text:0040B2BB
.text:0040B2BB loc_40B2BB:                             ; CODE XREF: _d_print_mod+2E7↓j
.text:0040B2BB                 mov     [ebx+ecx], dl
.text:0040B2BE                 mov     [ebx+100h], eax
.text:0040B2C4                 mov     [ebx+104h], dl
.text:0040B2CA                 inc     esi
.text:0040B2CB                 cmp     esi, 4150ADh
.text:0040B2D1                 jz      short loc_40B278
.text:0040B2D3
.text:0040B2D3 loc_40B2D3:                             ; CODE XREF: _d_print_mod+287↑j
.text:0040B2D3                 mov     dl, [esi]
.text:0040B2D5                 cmp     eax, 0FFh
.text:0040B2DA                 jnz     short loc_40B2B8
.text:0040B2DC                 mov     byte ptr [ebx+0FFh], 0
.text:0040B2E3                 mov     eax, [ebx+10Ch]
.text:0040B2E9                 mov     [esp+3Ch+var_34], eax
.text:0040B2ED                 mov     [esp+3Ch+var_38], 0FFh
.text:0040B2F5                 mov     [esp+3Ch+var_3C], ebx
.text:0040B2F8                 mov     byte ptr [esp+3Ch+var_24], dl
.text:0040B2FC                 call    dword ptr [ebx+108h]
.text:0040B302                 inc     dword ptr [ebx+120h]
.text:0040B308                 mov     eax, 1
.text:0040B30D                 xor     ecx, ecx
.text:0040B30F                 mov     dl, byte ptr [esp+3Ch+var_24]
.text:0040B313                 jmp     short loc_40B2BB
.text:0040B313 ; ---------------------------------------------------------------------------
.text:0040B315                 align 4
.text:0040B318
.text:0040B318 loc_40B318:                             ; CODE XREF: _d_print_mod:loc_40B054↑j
.text:0040B318                                         ; DATA XREF: .rdata:jpt_40B054↓o
.text:0040B318                 mov     eax, [ebx+100h] ; jumptable 0040B054 case 33
.text:0040B31E                 mov     esi, offset aComplex ; "complex "
.text:0040B323                 jmp     short loc_40B347
.text:0040B323 ; ---------------------------------------------------------------------------
.text:0040B325                 align 4
.text:0040B328
.text:0040B328 loc_40B328:                             ; CODE XREF: _d_print_mod+322↓j
.text:0040B328                 mov     ecx, eax
.text:0040B32A                 inc     eax
.text:0040B32B
.text:0040B32B loc_40B32B:                             ; CODE XREF: _d_print_mod+35B↓j
.text:0040B32B                 mov     [ebx+ecx], dl
.text:0040B32E                 mov     [ebx+100h], eax
.text:0040B334                 mov     [ebx+104h], dl
.text:0040B33A                 inc     esi
.text:0040B33B                 cmp     esi, 4150B6h
.text:0040B341                 jz      loc_40B278
.text:0040B347
.text:0040B347 loc_40B347:                             ; CODE XREF: _d_print_mod+2F7↑j
.text:0040B347                 mov     dl, [esi]
.text:0040B349                 cmp     eax, 0FFh
.text:0040B34E                 jnz     short loc_40B328
.text:0040B350                 mov     byte ptr [ebx+0FFh], 0
.text:0040B357                 mov     eax, [ebx+10Ch]
.text:0040B35D                 mov     [esp+3Ch+var_34], eax
.text:0040B361                 mov     [esp+3Ch+var_38], 0FFh
.text:0040B369                 mov     [esp+3Ch+var_3C], ebx
.text:0040B36C                 mov     byte ptr [esp+3Ch+var_24], dl
.text:0040B370                 call    dword ptr [ebx+108h]
.text:0040B376                 inc     dword ptr [ebx+120h]
.text:0040B37C                 mov     eax, 1
.text:0040B381                 xor     ecx, ecx
.text:0040B383                 mov     dl, byte ptr [esp+3Ch+var_24]
.text:0040B387                 jmp     short loc_40B32B
.text:0040B387 ; ---------------------------------------------------------------------------
.text:0040B389                 align 4
.text:0040B38C
.text:0040B38C loc_40B38C:                             ; CODE XREF: _d_print_mod:loc_40B054↑j
.text:0040B38C                                         ; DATA XREF: .rdata:jpt_40B054↓o
.text:0040B38C                 mov     eax, [ebx+100h] ; jumptable 0040B054 case 34
.text:0040B392                 mov     esi, offset aImaginary ; "imaginary "
.text:0040B397                 jmp     short loc_40B3BB
.text:0040B397 ; ---------------------------------------------------------------------------
.text:0040B399                 align 4
.text:0040B39C
.text:0040B39C loc_40B39C:                             ; CODE XREF: _d_print_mod+396↓j
.text:0040B39C                 mov     ecx, eax
.text:0040B39E                 inc     eax
.text:0040B39F
.text:0040B39F loc_40B39F:                             ; CODE XREF: _d_print_mod+3CF↓j
.text:0040B39F                 mov     [ebx+ecx], dl
.text:0040B3A2                 mov     [ebx+100h], eax
.text:0040B3A8                 mov     [ebx+104h], dl
.text:0040B3AE                 inc     esi
.text:0040B3AF                 cmp     esi, 4150C1h
.text:0040B3B5                 jz      loc_40B278
.text:0040B3BB
.text:0040B3BB loc_40B3BB:                             ; CODE XREF: _d_print_mod+36B↑j
.text:0040B3BB                 mov     dl, [esi]
.text:0040B3BD                 cmp     eax, 0FFh
.text:0040B3C2                 jnz     short loc_40B39C
.text:0040B3C4                 mov     byte ptr [ebx+0FFh], 0
.text:0040B3CB                 mov     eax, [ebx+10Ch]
.text:0040B3D1                 mov     [esp+3Ch+var_34], eax
.text:0040B3D5                 mov     [esp+3Ch+var_38], 0FFh
.text:0040B3DD                 mov     [esp+3Ch+var_3C], ebx
.text:0040B3E0                 mov     byte ptr [esp+3Ch+var_24], dl
.text:0040B3E4                 call    dword ptr [ebx+108h]
.text:0040B3EA                 inc     dword ptr [ebx+120h]
.text:0040B3F0                 mov     eax, 1
.text:0040B3F5                 xor     ecx, ecx
.text:0040B3F7                 mov     dl, byte ptr [esp+3Ch+var_24]
.text:0040B3FB                 jmp     short loc_40B39F
.text:0040B3FB ; ---------------------------------------------------------------------------
.text:0040B3FD                 align 10h
.text:0040B400
.text:0040B400 loc_40B400:                             ; CODE XREF: _d_print_mod:loc_40B054↑j
.text:0040B400                                         ; DATA XREF: .rdata:jpt_40B054↓o
.text:0040B400                 cmp     byte ptr [ebx+104h], 28h ; '(' ; jumptable 0040B054 case 39
.text:0040B407                 jz      short loc_40B42E
.text:0040B409                 mov     eax, [ebx+100h]
.text:0040B40F                 cmp     eax, 0FFh
.text:0040B414                 jz      loc_40B5B4
.text:0040B41A                 lea     esi, [eax+1]
.text:0040B41D
.text:0040B41D loc_40B41D:                             ; CODE XREF: _d_print_mod+5BF↓j
.text:0040B41D                 mov     byte ptr [ebx+eax], 20h ; ' '
.text:0040B421                 mov     [ebx+100h], esi
.text:0040B427                 mov     byte ptr [ebx+104h], 20h ; ' '
.text:0040B42E
.text:0040B42E loc_40B42E:                             ; CODE XREF: _d_print_mod+3DB↑j
.text:0040B42E                 mov     ecx, [ecx+4]
.text:0040B431                 mov     edx, ebp
.text:0040B433                 mov     eax, ebx
.text:0040B435                 call    _d_print_comp
.text:0040B43A                 mov     eax, [ebx+100h]
.text:0040B440                 mov     esi, offset asc_4150C2 ; "::*"
.text:0040B445                 jmp     short loc_40B467
.text:0040B445 ; ---------------------------------------------------------------------------
.text:0040B447                 align 4
.text:0040B448
.text:0040B448 loc_40B448:                             ; CODE XREF: _d_print_mod+442↓j
.text:0040B448                 mov     ecx, eax
.text:0040B44A                 inc     eax
.text:0040B44B
.text:0040B44B loc_40B44B:                             ; CODE XREF: _d_print_mod+47B↓j
.text:0040B44B                 mov     [ebx+ecx], dl
.text:0040B44E                 mov     [ebx+100h], eax
.text:0040B454                 mov     [ebx+104h], dl
.text:0040B45A                 inc     esi
.text:0040B45B                 cmp     esi, 4150C5h
.text:0040B461                 jz      loc_40B278
.text:0040B467
.text:0040B467 loc_40B467:                             ; CODE XREF: _d_print_mod+419↑j
.text:0040B467                 mov     dl, [esi]
.text:0040B469                 cmp     eax, 0FFh
.text:0040B46E                 jnz     short loc_40B448
.text:0040B470                 mov     byte ptr [ebx+0FFh], 0
.text:0040B477                 mov     eax, [ebx+10Ch]
.text:0040B47D                 mov     [esp+3Ch+var_34], eax
.text:0040B481                 mov     [esp+3Ch+var_38], 0FFh
.text:0040B489                 mov     [esp+3Ch+var_3C], ebx
.text:0040B48C                 mov     byte ptr [esp+3Ch+var_24], dl
.text:0040B490                 call    dword ptr [ebx+108h]
.text:0040B496                 inc     dword ptr [ebx+120h]
.text:0040B49C                 mov     eax, 1
.text:0040B4A1                 xor     ecx, ecx
.text:0040B4A3                 mov     dl, byte ptr [esp+3Ch+var_24]
.text:0040B4A7                 jmp     short loc_40B44B
.text:0040B4A7 ; ---------------------------------------------------------------------------
.text:0040B4A9                 align 4
.text:0040B4AC
.text:0040B4AC loc_40B4AC:                             ; CODE XREF: _d_print_mod+5D↑j
.text:0040B4AC                 mov     ecx, [ecx+4]
.text:0040B4AF                 mov     edx, ebp
.text:0040B4B1                 mov     eax, ebx
.text:0040B4B3                 call    _d_print_comp
.text:0040B4B8                 mov     eax, [ebx+100h]
.text:0040B4BE                 cmp     eax, 0FFh
.text:0040B4C3                 jz      loc_40B580
.text:0040B4C9                 lea     edx, [eax+1]
.text:0040B4CC
.text:0040B4CC loc_40B4CC:                             ; CODE XREF: _d_print_mod+583↓j
.text:0040B4CC                 mov     byte ptr [ebx+eax], 29h ; ')'
.text:0040B4D0                 mov     [ebx+100h], edx
.text:0040B4D6                 mov     byte ptr [ebx+104h], 29h ; ')'
.text:0040B4DD                 jmp     loc_40B278
.text:0040B4DD ; ---------------------------------------------------------------------------
.text:0040B4E2                 align 4
.text:0040B4E4
.text:0040B4E4 loc_40B4E4:                             ; CODE XREF: _d_print_mod+243↑j
.text:0040B4E4                 mov     eax, [ebx+100h]
.text:0040B4EA                 cmp     eax, 0FFh
.text:0040B4EF                 jz      loc_40B5F0
.text:0040B4F5                 lea     edx, [eax+1]
.text:0040B4F8
.text:0040B4F8 loc_40B4F8:                             ; CODE XREF: _d_print_mod+5F3↓j
.text:0040B4F8                 mov     byte ptr [ebx+eax], 2Ah ; '*'
.text:0040B4FC                 mov     [ebx+100h], edx
.text:0040B502                 mov     byte ptr [ebx+104h], 2Ah ; '*'
.text:0040B509                 jmp     loc_40B278
.text:0040B509 ; ---------------------------------------------------------------------------
.text:0040B50E                 align 10h
.text:0040B510
.text:0040B510 loc_40B510:                             ; CODE XREF: _d_print_mod+21B↑j
.text:0040B510                 mov     byte ptr [ebx+0FFh], 0
.text:0040B517                 mov     eax, [ebx+10Ch]
.text:0040B51D                 mov     [esp+3Ch+var_34], eax
.text:0040B521                 mov     [esp+3Ch+var_38], 0FFh
.text:0040B529                 mov     [esp+3Ch+var_3C], ebx
.text:0040B52C                 mov     [esp+3Ch+var_24], ecx
.text:0040B530                 call    dword ptr [ebx+108h]
.text:0040B536                 inc     dword ptr [ebx+120h]
.text:0040B53C                 mov     esi, 1
.text:0040B541                 xor     eax, eax
.text:0040B543                 mov     ecx, [esp+3Ch+var_24]
.text:0040B547                 jmp     loc_40B250
.text:0040B54C ; ---------------------------------------------------------------------------
.text:0040B54C
.text:0040B54C loc_40B54C:                             ; CODE XREF: _d_print_mod+25F↑j
.text:0040B54C                 mov     byte ptr [ebx+0FFh], 0
.text:0040B553                 mov     eax, [ebx+10Ch]
.text:0040B559                 mov     [esp+3Ch+var_34], eax
.text:0040B55D                 mov     [esp+3Ch+var_38], 0FFh
.text:0040B565                 mov     [esp+3Ch+var_3C], ebx
.text:0040B568                 call    dword ptr [ebx+108h]
.text:0040B56E                 inc     dword ptr [ebx+120h]
.text:0040B574                 mov     edx, 1
.text:0040B579                 xor     eax, eax
.text:0040B57B                 jmp     loc_40B294
.text:0040B580 ; ---------------------------------------------------------------------------
.text:0040B580
.text:0040B580 loc_40B580:                             ; CODE XREF: _d_print_mod+497↑j
.text:0040B580                 mov     byte ptr [ebx+0FFh], 0
.text:0040B587                 mov     eax, [ebx+10Ch]
.text:0040B58D                 mov     [esp+3Ch+var_34], eax
.text:0040B591                 mov     [esp+3Ch+var_38], 0FFh
.text:0040B599                 mov     [esp+3Ch+var_3C], ebx
.text:0040B59C                 call    dword ptr [ebx+108h]
.text:0040B5A2                 inc     dword ptr [ebx+120h]
.text:0040B5A8                 mov     edx, 1
.text:0040B5AD                 xor     eax, eax
.text:0040B5AF                 jmp     loc_40B4CC
.text:0040B5B4 ; ---------------------------------------------------------------------------
.text:0040B5B4
.text:0040B5B4 loc_40B5B4:                             ; CODE XREF: _d_print_mod+3E8↑j
.text:0040B5B4                 mov     byte ptr [ebx+0FFh], 0
.text:0040B5BB                 mov     eax, [ebx+10Ch]
.text:0040B5C1                 mov     [esp+3Ch+var_34], eax
.text:0040B5C5                 mov     [esp+3Ch+var_38], 0FFh
.text:0040B5CD                 mov     [esp+3Ch+var_3C], ebx
.text:0040B5D0                 mov     [esp+3Ch+var_24], ecx
.text:0040B5D4                 call    dword ptr [ebx+108h]
.text:0040B5DA                 inc     dword ptr [ebx+120h]
.text:0040B5E0                 mov     esi, 1
.text:0040B5E5                 xor     eax, eax
.text:0040B5E7                 mov     ecx, [esp+3Ch+var_24]
.text:0040B5EB                 jmp     loc_40B41D
.text:0040B5F0 ; ---------------------------------------------------------------------------
.text:0040B5F0
.text:0040B5F0 loc_40B5F0:                             ; CODE XREF: _d_print_mod+4C3↑j
.text:0040B5F0                 mov     byte ptr [ebx+0FFh], 0
.text:0040B5F7                 mov     eax, [ebx+10Ch]
.text:0040B5FD                 mov     [esp+3Ch+var_34], eax
.text:0040B601                 mov     [esp+3Ch+var_38], 0FFh
.text:0040B609                 mov     [esp+3Ch+var_3C], ebx
.text:0040B60C                 call    dword ptr [ebx+108h]
.text:0040B612                 inc     dword ptr [ebx+120h]
.text:0040B618                 mov     edx, 1
.text:0040B61D                 xor     eax, eax
.text:0040B61F                 jmp     loc_40B4F8
.text:0040B61F _d_print_mod    endp
.text:0040B61F
.text:0040B624
.text:0040B624 ; =============== S U B R O U T I N E =======================================
.text:0040B624
.text:0040B624
.text:0040B624 _d_print_mod_list proc near             ; CODE XREF: _d_print_array_type_isra_7+3C↓p
.text:0040B624                                         ; _d_print_array_type_isra_7+14F↓p ...
.text:0040B624
.text:0040B624 var_5C          = dword ptr -5Ch
.text:0040B624 var_58          = dword ptr -58h
.text:0040B624 var_54          = dword ptr -54h
.text:0040B624 var_48          = dword ptr -48h
.text:0040B624 var_44          = dword ptr -44h
.text:0040B624 var_40          = dword ptr -40h
.text:0040B624 var_35          = byte ptr -35h
.text:0040B624 arg_0           = dword ptr  4
.text:0040B624
.text:0040B624                 push    ebp
.text:0040B625                 push    edi
.text:0040B626                 push    esi
.text:0040B627                 push    ebx
.text:0040B628                 sub     esp, 4Ch
.text:0040B62B                 mov     [esp+5Ch+var_40], edx
.text:0040B62F                 mov     ebx, ecx
.text:0040B631                 mov     edi, [esp+5Ch+arg_0]
.text:0040B635                 test    ecx, ecx
.text:0040B637                 jz      short loc_40B6A8
.text:0040B639                 mov     esi, eax
.text:0040B63B                 mov     eax, [eax+118h]
.text:0040B641                 test    eax, eax
.text:0040B643                 jz      short loc_40B652
.text:0040B645                 jmp     short loc_40B6A8
.text:0040B645 ; ---------------------------------------------------------------------------
.text:0040B647                 align 4
.text:0040B648
.text:0040B648 loc_40B648:                             ; CODE XREF: _d_print_mod_list+82↓j
.text:0040B648                 mov     eax, [esi+118h]
.text:0040B64E                 test    eax, eax
.text:0040B650                 jnz     short loc_40B6A8
.text:0040B652
.text:0040B652 loc_40B652:                             ; CODE XREF: _d_print_mod_list+1F↑j
.text:0040B652                 mov     eax, [ebx+8]
.text:0040B655                 test    eax, eax
.text:0040B657                 jnz     short loc_40B6A2
.text:0040B659                 mov     ecx, [ebx+4]
.text:0040B65C                 test    edi, edi
.text:0040B65E                 jnz     short loc_40B66A
.text:0040B660                 mov     eax, [ecx]
.text:0040B662                 sub     eax, 1Ah
.text:0040B665                 cmp     eax, 2
.text:0040B668                 jbe     short loc_40B6A2
.text:0040B66A
.text:0040B66A loc_40B66A:                             ; CODE XREF: _d_print_mod_list+3A↑j
.text:0040B66A                 mov     dword ptr [ebx+8], 1
.text:0040B671                 mov     ebp, [esi+110h]
.text:0040B677                 mov     eax, [ebx+0Ch]
.text:0040B67A                 mov     [esi+110h], eax
.text:0040B680                 mov     eax, [ecx]
.text:0040B682                 cmp     eax, 25h ; '%'
.text:0040B685                 jz      short loc_40B6B0
.text:0040B687                 cmp     eax, 26h ; '&'
.text:0040B68A                 jz      short loc_40B6D1
.text:0040B68C                 cmp     eax, 2
.text:0040B68F                 jz      short loc_40B6F2
.text:0040B691                 mov     edx, [esp+5Ch+var_40]
.text:0040B695                 mov     eax, esi
.text:0040B697                 call    _d_print_mod
.text:0040B69C                 mov     [esi+110h], ebp
.text:0040B6A2
.text:0040B6A2 loc_40B6A2:                             ; CODE XREF: _d_print_mod_list+33↑j
.text:0040B6A2                                         ; _d_print_mod_list+44↑j
.text:0040B6A2                 mov     ebx, [ebx]
.text:0040B6A4                 test    ebx, ebx
.text:0040B6A6                 jnz     short loc_40B648
.text:0040B6A8
.text:0040B6A8 loc_40B6A8:                             ; CODE XREF: _d_print_mod_list+13↑j
.text:0040B6A8                                         ; _d_print_mod_list+21↑j ...
.text:0040B6A8                 add     esp, 4Ch
.text:0040B6AB                 pop     ebx
.text:0040B6AC                 pop     esi
.text:0040B6AD                 pop     edi
.text:0040B6AE                 pop     ebp
.text:0040B6AF                 retn
.text:0040B6B0 ; ---------------------------------------------------------------------------
.text:0040B6B0
.text:0040B6B0 loc_40B6B0:                             ; CODE XREF: _d_print_mod_list+61↑j
.text:0040B6B0                 add     ecx, 8
.text:0040B6B3                 mov     eax, [ebx]
.text:0040B6B5                 mov     [esp+5Ch+var_5C], eax
.text:0040B6B8                 mov     edx, [esp+5Ch+var_40]
.text:0040B6BC                 mov     eax, esi
.text:0040B6BE                 call    _d_print_function_type_isra_9
.text:0040B6C3                 mov     [esi+110h], ebp
.text:0040B6C9                 add     esp, 4Ch
.text:0040B6CC                 pop     ebx
.text:0040B6CD                 pop     esi
.text:0040B6CE                 pop     edi
.text:0040B6CF                 pop     ebp
.text:0040B6D0                 retn
.text:0040B6D1 ; ---------------------------------------------------------------------------
.text:0040B6D1
.text:0040B6D1 loc_40B6D1:                             ; CODE XREF: _d_print_mod_list+66↑j
.text:0040B6D1                 add     ecx, 4
.text:0040B6D4                 mov     eax, [ebx]
.text:0040B6D6                 mov     [esp+5Ch+var_5C], eax
.text:0040B6D9                 mov     edx, [esp+5Ch+var_40]
.text:0040B6DD                 mov     eax, esi
.text:0040B6DF                 call    _d_print_array_type_isra_7
.text:0040B6E4                 mov     [esi+110h], ebp
.text:0040B6EA                 add     esp, 4Ch
.text:0040B6ED                 pop     ebx
.text:0040B6EE                 pop     esi
.text:0040B6EF                 pop     edi
.text:0040B6F0                 pop     ebp
.text:0040B6F1                 retn
.text:0040B6F2 ; ---------------------------------------------------------------------------
.text:0040B6F2
.text:0040B6F2 loc_40B6F2:                             ; CODE XREF: _d_print_mod_list+6B↑j
.text:0040B6F2                 mov     edi, [esi+114h]
.text:0040B6F8                 mov     dword ptr [esi+114h], 0
.text:0040B702                 mov     ecx, [ecx+4]
.text:0040B705                 mov     edx, [esp+5Ch+var_40]
.text:0040B709                 mov     eax, esi
.text:0040B70B                 call    _d_print_comp
.text:0040B710                 mov     [esi+114h], edi
.text:0040B716                 mov     eax, [esi+100h]
.text:0040B71C                 test    byte ptr [esp+5Ch+var_40], 4
.text:0040B721                 jnz     short loc_40B785
.text:0040B723                 mov     edi, offset unk_414D48
.text:0040B728                 mov     [esp+5Ch+var_44], ebx
.text:0040B72C                 jmp     short loc_40B74B
.text:0040B72C ; ---------------------------------------------------------------------------
.text:0040B72E                 align 10h
.text:0040B730
.text:0040B730 loc_40B730:                             ; CODE XREF: _d_print_mod_list+12E↓j
.text:0040B730                 mov     ecx, eax
.text:0040B732                 inc     eax
.text:0040B733
.text:0040B733 loc_40B733:                             ; CODE XREF: _d_print_mod_list+15F↓j
.text:0040B733                 mov     [esi+ecx], bl
.text:0040B736                 mov     [esi+100h], eax
.text:0040B73C                 mov     [esi+104h], bl
.text:0040B742                 inc     edi
.text:0040B743                 cmp     edi, offset unk_414D4A
.text:0040B749                 jz      short loc_40B7A2
.text:0040B74B
.text:0040B74B loc_40B74B:                             ; CODE XREF: _d_print_mod_list+108↑j
.text:0040B74B                 mov     bl, [edi]
.text:0040B74D                 cmp     eax, 0FFh
.text:0040B752                 jnz     short loc_40B730
.text:0040B754                 mov     byte ptr [esi+0FFh], 0
.text:0040B75B                 mov     eax, [esi+10Ch]
.text:0040B761                 mov     [esp+5Ch+var_54], eax
.text:0040B765                 mov     [esp+5Ch+var_58], 0FFh
.text:0040B76D                 mov     [esp+5Ch+var_5C], esi
.text:0040B770                 call    dword ptr [esi+108h]
.text:0040B776                 inc     dword ptr [esi+120h]
.text:0040B77C                 mov     eax, 1
.text:0040B781                 xor     ecx, ecx
.text:0040B783                 jmp     short loc_40B733
.text:0040B785 ; ---------------------------------------------------------------------------
.text:0040B785
.text:0040B785 loc_40B785:                             ; CODE XREF: _d_print_mod_list+FD↑j
.text:0040B785                 cmp     eax, 0FFh
.text:0040B78A                 jz      short loc_40B7E0
.text:0040B78C                 lea     edx, [eax+1]
.text:0040B78F
.text:0040B78F loc_40B78F:                             ; CODE XREF: _d_print_mod_list+1EB↓j
.text:0040B78F                 mov     byte ptr [esi+eax], 2Eh ; '.'
.text:0040B793                 mov     [esi+100h], edx
.text:0040B799                 mov     byte ptr [esi+104h], 2Eh ; '.'
.text:0040B7A0                 jmp     short loc_40B7A6
.text:0040B7A2 ; ---------------------------------------------------------------------------
.text:0040B7A2
.text:0040B7A2 loc_40B7A2:                             ; CODE XREF: _d_print_mod_list+125↑j
.text:0040B7A2                 mov     ebx, [esp+5Ch+var_44]
.text:0040B7A6
.text:0040B7A6 loc_40B7A6:                             ; CODE XREF: _d_print_mod_list+17C↑j
.text:0040B7A6                 mov     eax, [ebx+4]
.text:0040B7A9                 mov     ebx, [eax+8]
.text:0040B7AC                 mov     eax, [ebx]
.text:0040B7AE                 cmp     eax, 41h ; 'A'
.text:0040B7B1                 jnz     short loc_40B7BD
.text:0040B7B3                 jmp     short loc_40B814
.text:0040B7B3 ; ---------------------------------------------------------------------------
.text:0040B7B5                 align 4
.text:0040B7B8
.text:0040B7B8 loc_40B7B8:                             ; CODE XREF: _d_print_mod_list+19F↓j
.text:0040B7B8                                         ; _d_print_mod_list+320↓j
.text:0040B7B8                 mov     ebx, [ebx+4]
.text:0040B7BB                 mov     eax, [ebx]
.text:0040B7BD
.text:0040B7BD loc_40B7BD:                             ; CODE XREF: _d_print_mod_list+18D↑j
.text:0040B7BD                 sub     eax, 1Ah
.text:0040B7C0                 cmp     eax, 2
.text:0040B7C3                 jbe     short loc_40B7B8
.text:0040B7C5                 mov     ecx, ebx
.text:0040B7C7                 mov     edx, [esp+5Ch+var_40]
.text:0040B7CB                 mov     eax, esi
.text:0040B7CD                 call    _d_print_comp
.text:0040B7D2                 mov     [esi+110h], ebp
.text:0040B7D8                 add     esp, 4Ch
.text:0040B7DB                 pop     ebx
.text:0040B7DC                 pop     esi
.text:0040B7DD                 pop     edi
.text:0040B7DE                 pop     ebp
.text:0040B7DF                 retn
.text:0040B7E0 ; ---------------------------------------------------------------------------
.text:0040B7E0
.text:0040B7E0 loc_40B7E0:                             ; CODE XREF: _d_print_mod_list+166↑j
.text:0040B7E0                 mov     byte ptr [esi+0FFh], 0
.text:0040B7E7                 mov     eax, [esi+10Ch]
.text:0040B7ED                 mov     [esp+5Ch+var_54], eax
.text:0040B7F1                 mov     [esp+5Ch+var_58], 0FFh
.text:0040B7F9                 mov     [esp+5Ch+var_5C], esi
.text:0040B7FC                 call    dword ptr [esi+108h]
.text:0040B802                 inc     dword ptr [esi+120h]
.text:0040B808                 mov     edx, 1
.text:0040B80D                 xor     eax, eax
.text:0040B80F                 jmp     loc_40B78F
.text:0040B814 ; ---------------------------------------------------------------------------
.text:0040B814
.text:0040B814 loc_40B814:                             ; CODE XREF: _d_print_mod_list+18F↑j
.text:0040B814                 mov     eax, [esi+100h]
.text:0040B81A                 mov     edi, offset aDefaultArg ; "{default arg#"
.text:0040B81F                 jmp     short loc_40B83C
.text:0040B821 ; ---------------------------------------------------------------------------
.text:0040B821
.text:0040B821 loc_40B821:                             ; CODE XREF: _d_print_mod_list+21F↓j
.text:0040B821                 mov     ecx, eax
.text:0040B823                 inc     eax
.text:0040B824
.text:0040B824 loc_40B824:                             ; CODE XREF: _d_print_mod_list+258↓j
.text:0040B824                 mov     [esi+ecx], dl
.text:0040B827                 mov     [esi+100h], eax
.text:0040B82D                 mov     [esi+104h], dl
.text:0040B833                 inc     edi
.text:0040B834                 cmp     edi, 41517Dh
.text:0040B83A                 jz      short loc_40B87E
.text:0040B83C
.text:0040B83C loc_40B83C:                             ; CODE XREF: _d_print_mod_list+1FB↑j
.text:0040B83C                 mov     dl, [edi]
.text:0040B83E                 cmp     eax, 0FFh
.text:0040B843                 jnz     short loc_40B821
.text:0040B845                 mov     byte ptr [esi+0FFh], 0
.text:0040B84C                 mov     eax, [esi+10Ch]
.text:0040B852                 mov     [esp+5Ch+var_54], eax
.text:0040B856                 mov     [esp+5Ch+var_58], 0FFh
.text:0040B85E                 mov     [esp+5Ch+var_5C], esi
.text:0040B861                 mov     byte ptr [esp+5Ch+var_48], dl
.text:0040B865                 call    dword ptr [esi+108h]
.text:0040B86B                 inc     dword ptr [esi+120h]
.text:0040B871                 mov     eax, 1
.text:0040B876                 xor     ecx, ecx
.text:0040B878                 mov     dl, byte ptr [esp+5Ch+var_48]
.text:0040B87C                 jmp     short loc_40B824
.text:0040B87E ; ---------------------------------------------------------------------------
.text:0040B87E
.text:0040B87E loc_40B87E:                             ; CODE XREF: _d_print_mod_list+216↑j
.text:0040B87E                 mov     eax, [ebx+8]
.text:0040B881                 inc     eax
.text:0040B882                 mov     [esp+5Ch+var_54], eax
.text:0040B886                 mov     [esp+5Ch+var_58], offset aLd ; "%ld"
.text:0040B88E                 lea     edx, [esp+5Ch+var_35]
.text:0040B892                 mov     [esp+5Ch+var_5C], edx ; char *
.text:0040B895                 mov     [esp+5Ch+var_48], edx
.text:0040B899                 call    _sprintf
.text:0040B89E                 xor     eax, eax
.text:0040B8A0                 mov     ecx, 0FFFFFFFFh
.text:0040B8A5                 mov     edx, [esp+5Ch+var_48]
.text:0040B8A9                 mov     edi, edx
.text:0040B8AB                 repne scasb
.text:0040B8AD                 not     ecx
.text:0040B8AF                 mov     eax, ecx
.text:0040B8B1                 mov     ecx, [esi+100h]
.text:0040B8B7                 dec     eax
.text:0040B8B8                 jz      short loc_40B924
.text:0040B8BA                 mov     edi, edx
.text:0040B8BC                 add     eax, edx
.text:0040B8BE                 mov     [esp+5Ch+var_44], ebx
.text:0040B8C2                 mov     ebx, eax
.text:0040B8C4                 jmp     short loc_40B8DD
.text:0040B8C6 ; ---------------------------------------------------------------------------
.text:0040B8C6
.text:0040B8C6 loc_40B8C6:                             ; CODE XREF: _d_print_mod_list+2C1↓j
.text:0040B8C6                 mov     edx, ecx
.text:0040B8C8                 inc     ecx
.text:0040B8C9
.text:0040B8C9 loc_40B8C9:                             ; CODE XREF: _d_print_mod_list+2FA↓j
.text:0040B8C9                 mov     [esi+edx], al
.text:0040B8CC                 mov     [esi+100h], ecx
.text:0040B8D2                 mov     [esi+104h], al
.text:0040B8D8                 inc     edi
.text:0040B8D9                 cmp     edi, ebx
.text:0040B8DB                 jz      short loc_40B920
.text:0040B8DD
.text:0040B8DD loc_40B8DD:                             ; CODE XREF: _d_print_mod_list+2A0↑j
.text:0040B8DD                 mov     al, [edi]
.text:0040B8DF                 cmp     ecx, 0FFh
.text:0040B8E5                 jnz     short loc_40B8C6
.text:0040B8E7                 mov     byte ptr [esi+0FFh], 0
.text:0040B8EE                 mov     edx, [esi+10Ch]
.text:0040B8F4                 mov     [esp+5Ch+var_54], edx
.text:0040B8F8                 mov     [esp+5Ch+var_58], 0FFh
.text:0040B900                 mov     [esp+5Ch+var_5C], esi
.text:0040B903                 mov     byte ptr [esp+5Ch+var_48], al
.text:0040B907                 call    dword ptr [esi+108h]
.text:0040B90D                 inc     dword ptr [esi+120h]
.text:0040B913                 mov     ecx, 1
.text:0040B918                 xor     edx, edx
.text:0040B91A                 mov     al, byte ptr [esp+5Ch+var_48]
.text:0040B91E                 jmp     short loc_40B8C9
.text:0040B920 ; ---------------------------------------------------------------------------
.text:0040B920
.text:0040B920 loc_40B920:                             ; CODE XREF: _d_print_mod_list+2B7↑j
.text:0040B920                 mov     ebx, [esp+5Ch+var_44]
.text:0040B924
.text:0040B924 loc_40B924:                             ; CODE XREF: _d_print_mod_list+294↑j
.text:0040B924                 mov     edi, offset asc_41517E ; "}::"
.text:0040B929                 jmp     short loc_40B94A
.text:0040B92B ; ---------------------------------------------------------------------------
.text:0040B92B
.text:0040B92B loc_40B92B:                             ; CODE XREF: _d_print_mod_list+32E↓j
.text:0040B92B                 mov     edx, ecx
.text:0040B92D                 inc     ecx
.text:0040B92E
.text:0040B92E loc_40B92E:                             ; CODE XREF: _d_print_mod_list+367↓j
.text:0040B92E                 mov     [esi+edx], al
.text:0040B931                 mov     [esi+100h], ecx
.text:0040B937                 mov     [esi+104h], al
.text:0040B93D                 inc     edi
.text:0040B93E                 cmp     edi, 415181h
.text:0040B944                 jz      loc_40B7B8
.text:0040B94A
.text:0040B94A loc_40B94A:                             ; CODE XREF: _d_print_mod_list+305↑j
.text:0040B94A                 mov     al, [edi]
.text:0040B94C                 cmp     ecx, 0FFh
.text:0040B952                 jnz     short loc_40B92B
.text:0040B954                 mov     byte ptr [esi+0FFh], 0
.text:0040B95B                 mov     edx, [esi+10Ch]
.text:0040B961                 mov     [esp+5Ch+var_54], edx
.text:0040B965                 mov     [esp+5Ch+var_58], 0FFh
.text:0040B96D                 mov     [esp+5Ch+var_5C], esi
.text:0040B970                 mov     byte ptr [esp+5Ch+var_48], al
.text:0040B974                 call    dword ptr [esi+108h]
.text:0040B97A                 inc     dword ptr [esi+120h]
.text:0040B980                 mov     ecx, 1
.text:0040B985                 xor     edx, edx
.text:0040B987                 mov     al, byte ptr [esp+5Ch+var_48]
.text:0040B98B                 jmp     short loc_40B92E
.text:0040B98B _d_print_mod_list endp
.text:0040B98B
.text:0040B98B ; ---------------------------------------------------------------------------
.text:0040B98D                 align 10h
.text:0040B990
.text:0040B990 ; =============== S U B R O U T I N E =======================================
.text:0040B990
.text:0040B990
.text:0040B990 _d_print_array_type_isra_7 proc near    ; CODE XREF: _d_print_comp+2315↑p
.text:0040B990                                         ; _d_print_mod_list+BB↑p
.text:0040B990
.text:0040B990 var_3C          = dword ptr -3Ch
.text:0040B990 var_38          = dword ptr -38h
.text:0040B990 var_34          = dword ptr -34h
.text:0040B990 var_20          = byte ptr -20h
.text:0040B990 arg_0           = dword ptr  4
.text:0040B990
.text:0040B990                 push    ebp
.text:0040B991                 push    edi
.text:0040B992                 push    esi
.text:0040B993                 push    ebx
.text:0040B994                 sub     esp, 2Ch
.text:0040B997                 mov     ebx, eax
.text:0040B999                 mov     esi, edx
.text:0040B99B                 mov     edi, ecx
.text:0040B99D                 mov     ecx, [esp+3Ch+arg_0]
.text:0040B9A1                 test    ecx, ecx
.text:0040B9A3                 jz      short loc_40B9D1
.text:0040B9A5                 mov     eax, [esp+3Ch+arg_0]
.text:0040B9A9                 lea     esi, [esi+0]
.text:0040B9AC
.text:0040B9AC loc_40B9AC:                             ; CODE XREF: _d_print_array_type_isra_7+2B↓j
.text:0040B9AC                 mov     edx, [eax+8]
.text:0040B9AF                 test    edx, edx
.text:0040B9B1                 jz      loc_40BA54
.text:0040B9B7                 mov     eax, [eax]
.text:0040B9B9                 test    eax, eax
.text:0040B9BB                 jnz     short loc_40B9AC
.text:0040B9BD                 mov     [esp+3Ch+var_3C], 0
.text:0040B9C4                 mov     ecx, [esp+3Ch+arg_0]
.text:0040B9C8                 mov     edx, esi
.text:0040B9CA                 mov     eax, ebx
.text:0040B9CC                 call    _d_print_mod_list
.text:0040B9D1
.text:0040B9D1 loc_40B9D1:                             ; CODE XREF: _d_print_array_type_isra_7+13↑j
.text:0040B9D1                 mov     eax, [ebx+100h]
.text:0040B9D7
.text:0040B9D7 loc_40B9D7:                             ; CODE XREF: _d_print_array_type_isra_7+176↓j
.text:0040B9D7                 cmp     eax, 0FFh
.text:0040B9DC                 jz      loc_40BB0B
.text:0040B9E2                 lea     edx, [eax+1]
.text:0040B9E5
.text:0040B9E5 loc_40B9E5:                             ; CODE XREF: _d_print_array_type_isra_7+1AA↓j
.text:0040B9E5                 mov     byte ptr [ebx+eax], 20h ; ' '
.text:0040B9E9                 mov     [ebx+100h], edx
.text:0040B9EF                 mov     byte ptr [ebx+104h], 20h ; ' '
.text:0040B9F6
.text:0040B9F6 loc_40B9F6:                             ; CODE XREF: _d_print_array_type_isra_7+262↓j
.text:0040B9F6                 cmp     edx, 0FFh
.text:0040B9FC                 jz      loc_40BBA4
.text:0040BA02                 lea     eax, [edx+1]
.text:0040BA05
.text:0040BA05 loc_40BA05:                             ; CODE XREF: _d_print_array_type_isra_7+243↓j
.text:0040BA05                 mov     byte ptr [ebx+edx], 5Bh ; '['
.text:0040BA09                 mov     [ebx+100h], eax
.text:0040BA0F                 mov     byte ptr [ebx+104h], 5Bh ; '['
.text:0040BA16                 mov     ecx, [edi]
.text:0040BA18                 test    ecx, ecx
.text:0040BA1A                 jz      short loc_40BA2B
.text:0040BA1C                 mov     edx, esi
.text:0040BA1E                 mov     eax, ebx
.text:0040BA20                 call    _d_print_comp
.text:0040BA25                 mov     eax, [ebx+100h]
.text:0040BA2B
.text:0040BA2B loc_40BA2B:                             ; CODE XREF: _d_print_array_type_isra_7+8A↑j
.text:0040BA2B                 cmp     eax, 0FFh
.text:0040BA30                 jz      loc_40BB70
.text:0040BA36                 lea     edx, [eax+1]
.text:0040BA39
.text:0040BA39 loc_40BA39:                             ; CODE XREF: _d_print_array_type_isra_7+20F↓j
.text:0040BA39                 mov     byte ptr [ebx+eax], 5Dh ; ']'
.text:0040BA3D                 mov     [ebx+100h], edx
.text:0040BA43                 mov     byte ptr [ebx+104h], 5Dh ; ']'
.text:0040BA4A                 add     esp, 2Ch
.text:0040BA4D                 pop     ebx
.text:0040BA4E                 pop     esi
.text:0040BA4F                 pop     edi
.text:0040BA50                 pop     ebp
.text:0040BA51                 retn
.text:0040BA51 ; ---------------------------------------------------------------------------
.text:0040BA52                 align 4
.text:0040BA54
.text:0040BA54 loc_40BA54:                             ; CODE XREF: _d_print_array_type_isra_7+21↑j
.text:0040BA54                 mov     eax, [eax+4]
.text:0040BA57                 cmp     dword ptr [eax], 26h ; '&'
.text:0040BA5A                 jz      loc_40BBD8
.text:0040BA60                 mov     eax, [ebx+100h]
.text:0040BA66                 mov     ebp, offset asc_415182 ; " ("
.text:0040BA6B                 jmp     short loc_40BA8B
.text:0040BA6B ; ---------------------------------------------------------------------------
.text:0040BA6D                 align 10h
.text:0040BA70
.text:0040BA70 loc_40BA70:                             ; CODE XREF: _d_print_array_type_isra_7+103↓j
.text:0040BA70                 mov     ecx, eax
.text:0040BA72                 inc     eax
.text:0040BA73
.text:0040BA73 loc_40BA73:                             ; CODE XREF: _d_print_array_type_isra_7+13C↓j
.text:0040BA73                 mov     [ebx+ecx], dl
.text:0040BA76                 mov     [ebx+100h], eax
.text:0040BA7C                 mov     [ebx+104h], dl
.text:0040BA82                 inc     ebp
.text:0040BA83                 cmp     ebp, 415184h
.text:0040BA89                 jz      short loc_40BAD0
.text:0040BA8B
.text:0040BA8B loc_40BA8B:                             ; CODE XREF: _d_print_array_type_isra_7+DB↑j
.text:0040BA8B                 mov     dl, [ebp+0]
.text:0040BA8E                 cmp     eax, 0FFh
.text:0040BA93                 jnz     short loc_40BA70
.text:0040BA95                 mov     byte ptr [ebx+0FFh], 0
.text:0040BA9C                 mov     eax, [ebx+10Ch]
.text:0040BAA2                 mov     [esp+3Ch+var_34], eax
.text:0040BAA6                 mov     [esp+3Ch+var_38], 0FFh
.text:0040BAAE                 mov     [esp+3Ch+var_3C], ebx
.text:0040BAB1                 mov     [esp+3Ch+var_20], dl
.text:0040BAB5                 call    dword ptr [ebx+108h]
.text:0040BABB                 inc     dword ptr [ebx+120h]
.text:0040BAC1                 mov     eax, 1
.text:0040BAC6                 xor     ecx, ecx
.text:0040BAC8                 mov     dl, [esp+3Ch+var_20]
.text:0040BACC                 jmp     short loc_40BA73
.text:0040BACC ; ---------------------------------------------------------------------------
.text:0040BACE                 align 10h
.text:0040BAD0
.text:0040BAD0 loc_40BAD0:                             ; CODE XREF: _d_print_array_type_isra_7+F9↑j
.text:0040BAD0                 mov     [esp+3Ch+var_3C], 0
.text:0040BAD7                 mov     ecx, [esp+3Ch+arg_0]
.text:0040BADB                 mov     edx, esi
.text:0040BADD                 mov     eax, ebx
.text:0040BADF                 call    _d_print_mod_list
.text:0040BAE4                 mov     edx, [ebx+100h]
.text:0040BAEA                 cmp     edx, 0FFh
.text:0040BAF0                 jz      short loc_40BB3F
.text:0040BAF2                 lea     eax, [edx+1]
.text:0040BAF5
.text:0040BAF5 loc_40BAF5:                             ; CODE XREF: _d_print_array_type_isra_7+1DE↓j
.text:0040BAF5                 mov     byte ptr [ebx+edx], 29h ; ')'
.text:0040BAF9                 mov     [ebx+100h], eax
.text:0040BAFF                 mov     byte ptr [ebx+104h], 29h ; ')'
.text:0040BB06                 jmp     loc_40B9D7
.text:0040BB0B ; ---------------------------------------------------------------------------
.text:0040BB0B
.text:0040BB0B loc_40BB0B:                             ; CODE XREF: _d_print_array_type_isra_7+4C↑j
.text:0040BB0B                 mov     byte ptr [ebx+0FFh], 0
.text:0040BB12                 mov     eax, [ebx+10Ch]
.text:0040BB18                 mov     [esp+3Ch+var_34], eax
.text:0040BB1C                 mov     [esp+3Ch+var_38], 0FFh
.text:0040BB24                 mov     [esp+3Ch+var_3C], ebx
.text:0040BB27                 call    dword ptr [ebx+108h]
.text:0040BB2D                 inc     dword ptr [ebx+120h]
.text:0040BB33                 mov     edx, 1
.text:0040BB38                 xor     eax, eax
.text:0040BB3A                 jmp     loc_40B9E5
.text:0040BB3F ; ---------------------------------------------------------------------------
.text:0040BB3F
.text:0040BB3F loc_40BB3F:                             ; CODE XREF: _d_print_array_type_isra_7+160↑j
.text:0040BB3F                 mov     byte ptr [ebx+0FFh], 0
.text:0040BB46                 mov     eax, [ebx+10Ch]
.text:0040BB4C                 mov     [esp+3Ch+var_34], eax
.text:0040BB50                 mov     [esp+3Ch+var_38], 0FFh
.text:0040BB58                 mov     [esp+3Ch+var_3C], ebx
.text:0040BB5B                 call    dword ptr [ebx+108h]
.text:0040BB61                 inc     dword ptr [ebx+120h]
.text:0040BB67                 mov     eax, 1
.text:0040BB6C                 xor     edx, edx
.text:0040BB6E                 jmp     short loc_40BAF5
.text:0040BB70 ; ---------------------------------------------------------------------------
.text:0040BB70
.text:0040BB70 loc_40BB70:                             ; CODE XREF: _d_print_array_type_isra_7+A0↑j
.text:0040BB70                 mov     byte ptr [ebx+0FFh], 0
.text:0040BB77                 mov     eax, [ebx+10Ch]
.text:0040BB7D                 mov     [esp+3Ch+var_34], eax
.text:0040BB81                 mov     [esp+3Ch+var_38], 0FFh
.text:0040BB89                 mov     [esp+3Ch+var_3C], ebx
.text:0040BB8C                 call    dword ptr [ebx+108h]
.text:0040BB92                 inc     dword ptr [ebx+120h]
.text:0040BB98                 mov     edx, 1
.text:0040BB9D                 xor     eax, eax
.text:0040BB9F                 jmp     loc_40BA39
.text:0040BBA4 ; ---------------------------------------------------------------------------
.text:0040BBA4
.text:0040BBA4 loc_40BBA4:                             ; CODE XREF: _d_print_array_type_isra_7+6C↑j
.text:0040BBA4                 mov     byte ptr [ebx+0FFh], 0
.text:0040BBAB                 mov     eax, [ebx+10Ch]
.text:0040BBB1                 mov     [esp+3Ch+var_34], eax
.text:0040BBB5                 mov     [esp+3Ch+var_38], 0FFh
.text:0040BBBD                 mov     [esp+3Ch+var_3C], ebx
.text:0040BBC0                 call    dword ptr [ebx+108h]
.text:0040BBC6                 inc     dword ptr [ebx+120h]
.text:0040BBCC                 mov     eax, 1
.text:0040BBD1                 xor     edx, edx
.text:0040BBD3                 jmp     loc_40BA05
.text:0040BBD8 ; ---------------------------------------------------------------------------
.text:0040BBD8
.text:0040BBD8 loc_40BBD8:                             ; CODE XREF: _d_print_array_type_isra_7+CA↑j
.text:0040BBD8                 mov     [esp+3Ch+var_3C], 0
.text:0040BBDF                 mov     ecx, [esp+3Ch+arg_0]
.text:0040BBE3                 mov     edx, esi
.text:0040BBE5                 mov     eax, ebx
.text:0040BBE7                 call    _d_print_mod_list
.text:0040BBEC                 mov     edx, [ebx+100h]
.text:0040BBF2                 jmp     loc_40B9F6
.text:0040BBF2 _d_print_array_type_isra_7 endp
.text:0040BBF2
.text:0040BBF2 ; ---------------------------------------------------------------------------
.text:0040BBF7                 align 4
.text:0040BBF8
.text:0040BBF8 ; =============== S U B R O U T I N E =======================================
.text:0040BBF8
.text:0040BBF8
.text:0040BBF8 _d_print_function_type_isra_9 proc near ; CODE XREF: _d_print_comp+AFE↑p
.text:0040BBF8                                         ; _d_print_comp+2585↑p ...
.text:0040BBF8
.text:0040BBF8 var_3C          = dword ptr -3Ch
.text:0040BBF8 var_38          = dword ptr -38h
.text:0040BBF8 var_34          = dword ptr -34h
.text:0040BBF8 var_20          = dword ptr -20h
.text:0040BBF8 arg_0           = dword ptr  4
.text:0040BBF8
.text:0040BBF8                 push    ebp
.text:0040BBF9                 push    edi
.text:0040BBFA                 push    esi
.text:0040BBFB                 push    ebx
.text:0040BBFC                 sub     esp, 2Ch
.text:0040BBFF                 mov     ebx, eax
.text:0040BC01                 mov     edi, edx
.text:0040BC03                 mov     [esp+3Ch+var_20], ecx
.text:0040BC07                 mov     esi, [esp+3Ch+arg_0]
.text:0040BC0B                 test    esi, esi
.text:0040BC0D                 jz      short loc_40BC39
.text:0040BC0F                 mov     eax, [esi+8]
.text:0040BC12                 test    eax, eax
.text:0040BC14                 jnz     short loc_40BC39
.text:0040BC16                 mov     eax, esi
.text:0040BC18
.text:0040BC18 loc_40BC18:                             ; CODE XREF: _d_print_function_type_isra_9+3F↓j
.text:0040BC18                 mov     edx, [eax+4]
.text:0040BC1B                 mov     edx, [edx]
.text:0040BC1D                 sub     edx, 17h        ; switch 17 cases
.text:0040BC20                 cmp     edx, 10h
.text:0040BC23                 ja      short def_40BC25 ; jumptable 0040BC25 default case, cases 26-28,35-38
.text:0040BC25                 jmp     ds:jpt_40BC25[edx*4] ; switch jump
.text:0040BC2C ; ---------------------------------------------------------------------------
.text:0040BC2C
.text:0040BC2C def_40BC25:                             ; CODE XREF: _d_print_function_type_isra_9+2B↑j
.text:0040BC2C                                         ; _d_print_function_type_isra_9+2D↑j
.text:0040BC2C                                         ; DATA XREF: ...
.text:0040BC2C                 mov     eax, [eax]      ; jumptable 0040BC25 default case, cases 26-28,35-38
.text:0040BC2E                 test    eax, eax
.text:0040BC30                 jz      short loc_40BC39
.text:0040BC32                 mov     ebp, [eax+8]
.text:0040BC35                 test    ebp, ebp
.text:0040BC37                 jz      short loc_40BC18
.text:0040BC39
.text:0040BC39 loc_40BC39:                             ; CODE XREF: _d_print_function_type_isra_9+15↑j
.text:0040BC39                                         ; _d_print_function_type_isra_9+1C↑j ...
.text:0040BC39                 mov     ebp, [ebx+114h]
.text:0040BC3F                 mov     dword ptr [ebx+114h], 0
.text:0040BC49                 mov     [esp+3Ch+var_3C], 0
.text:0040BC50                 mov     ecx, esi
.text:0040BC52                 mov     edx, edi
.text:0040BC54                 mov     eax, ebx
.text:0040BC56                 call    _d_print_mod_list
.text:0040BC5B                 mov     edx, [ebx+100h]
.text:0040BC61                 cmp     edx, 0FFh
.text:0040BC67                 jz      loc_40BDC8
.text:0040BC6D
.text:0040BC6D loc_40BC6D:                             ; CODE XREF: _d_print_function_type_isra_9+1CA↓j
.text:0040BC6D                 lea     eax, [edx+1]
.text:0040BC70
.text:0040BC70 loc_40BC70:                             ; CODE XREF: _d_print_function_type_isra_9+1FF↓j
.text:0040BC70                 mov     byte ptr [ebx+edx], 28h ; '('
.text:0040BC74                 mov     [ebx+100h], eax
.text:0040BC7A                 mov     byte ptr [ebx+104h], 28h ; '('
.text:0040BC81                 mov     edx, [esp+3Ch+var_20]
.text:0040BC85                 mov     ecx, [edx]
.text:0040BC87                 test    ecx, ecx
.text:0040BC89                 jz      short loc_40BC9A
.text:0040BC8B                 mov     edx, edi
.text:0040BC8D                 mov     eax, ebx
.text:0040BC8F                 call    _d_print_comp
.text:0040BC94                 mov     eax, [ebx+100h]
.text:0040BC9A
.text:0040BC9A loc_40BC9A:                             ; CODE XREF: _d_print_function_type_isra_9+91↑j
.text:0040BC9A                 cmp     eax, 0FFh
.text:0040BC9F                 jz      loc_40BDFC
.text:0040BCA5                 lea     edx, [eax+1]
.text:0040BCA8
.text:0040BCA8 loc_40BCA8:                             ; CODE XREF: _d_print_function_type_isra_9+233↓j
.text:0040BCA8                 mov     byte ptr [ebx+eax], 29h ; ')'
.text:0040BCAC                 mov     [ebx+100h], edx
.text:0040BCB2                 mov     byte ptr [ebx+104h], 29h ; ')'
.text:0040BCB9                 mov     [esp+3Ch+var_3C], 1
.text:0040BCC0                 mov     ecx, esi
.text:0040BCC2                 mov     edx, edi
.text:0040BCC4                 mov     eax, ebx
.text:0040BCC6                 call    _d_print_mod_list
.text:0040BCCB                 mov     [ebx+114h], ebp
.text:0040BCD1                 add     esp, 2Ch
.text:0040BCD4                 pop     ebx
.text:0040BCD5                 pop     esi
.text:0040BCD6                 pop     edi
.text:0040BCD7                 pop     ebp
.text:0040BCD8                 retn
.text:0040BCD8 ; ---------------------------------------------------------------------------
.text:0040BCD9                 align 4
.text:0040BCDC
.text:0040BCDC loc_40BCDC:                             ; CODE XREF: _d_print_function_type_isra_9+2D↑j
.text:0040BCDC                                         ; DATA XREF: .rdata:jpt_40BC25↓o
.text:0040BCDC                 mov     al, [ebx+104h]  ; jumptable 0040BC25 cases 23-25,29,33,34,39
.text:0040BCE2
.text:0040BCE2 loc_40BCE2:                             ; CODE XREF: _d_print_function_type_isra_9+158↓j
.text:0040BCE2                 cmp     al, 20h ; ' '
.text:0040BCE4                 jz      short loc_40BD54
.text:0040BCE6                 mov     edx, [ebx+100h]
.text:0040BCEC                 cmp     edx, 0FFh
.text:0040BCF2                 jz      loc_40BE64
.text:0040BCF8                 lea     eax, [edx+1]
.text:0040BCFB
.text:0040BCFB loc_40BCFB:                             ; CODE XREF: _d_print_function_type_isra_9+29B↓j
.text:0040BCFB                 mov     byte ptr [ebx+edx], 20h ; ' '
.text:0040BCFF                 mov     [ebx+100h], eax
.text:0040BD05                 mov     byte ptr [ebx+104h], 20h ; ' '
.text:0040BD0C                 cmp     eax, 0FFh
.text:0040BD11                 jnz     short loc_40BD61
.text:0040BD13
.text:0040BD13 loc_40BD13:                             ; CODE XREF: _d_print_function_type_isra_9+167↓j
.text:0040BD13                 mov     byte ptr [ebx+0FFh], 0
.text:0040BD1A                 mov     eax, [ebx+10Ch]
.text:0040BD20                 mov     [esp+3Ch+var_34], eax
.text:0040BD24                 mov     [esp+3Ch+var_38], 0FFh
.text:0040BD2C                 mov     [esp+3Ch+var_3C], ebx
.text:0040BD2F                 call    dword ptr [ebx+108h]
.text:0040BD35                 inc     dword ptr [ebx+120h]
.text:0040BD3B                 mov     edx, 1
.text:0040BD40                 xor     eax, eax
.text:0040BD42                 jmp     short loc_40BD64
.text:0040BD44 ; ---------------------------------------------------------------------------
.text:0040BD44
.text:0040BD44 loc_40BD44:                             ; CODE XREF: _d_print_function_type_isra_9+2D↑j
.text:0040BD44                                         ; DATA XREF: .rdata:jpt_40BC25↓o
.text:0040BD44                 mov     al, [ebx+104h]  ; jumptable 0040BC25 cases 30-32
.text:0040BD4A                 cmp     al, 28h ; '('
.text:0040BD4C                 jz      short loc_40BD54
.text:0040BD4E                 cmp     al, 2Ah ; '*'
.text:0040BD50                 jnz     short loc_40BCE2
.text:0040BD52                 xchg    ax, ax
.text:0040BD54
.text:0040BD54 loc_40BD54:                             ; CODE XREF: _d_print_function_type_isra_9+EC↑j
.text:0040BD54                                         ; _d_print_function_type_isra_9+154↑j
.text:0040BD54                 mov     eax, [ebx+100h]
.text:0040BD5A                 cmp     eax, 0FFh
.text:0040BD5F                 jz      short loc_40BD13
.text:0040BD61
.text:0040BD61 loc_40BD61:                             ; CODE XREF: _d_print_function_type_isra_9+119↑j
.text:0040BD61                 lea     edx, [eax+1]
.text:0040BD64
.text:0040BD64 loc_40BD64:                             ; CODE XREF: _d_print_function_type_isra_9+14A↑j
.text:0040BD64                 mov     byte ptr [ebx+eax], 28h ; '('
.text:0040BD68                 mov     [ebx+100h], edx
.text:0040BD6E                 mov     byte ptr [ebx+104h], 28h ; '('
.text:0040BD75                 mov     ebp, [ebx+114h]
.text:0040BD7B                 mov     dword ptr [ebx+114h], 0
.text:0040BD85                 mov     [esp+3Ch+var_3C], 0
.text:0040BD8C                 mov     ecx, esi
.text:0040BD8E                 mov     edx, edi
.text:0040BD90                 mov     eax, ebx
.text:0040BD92                 call    _d_print_mod_list
.text:0040BD97                 mov     eax, [ebx+100h]
.text:0040BD9D                 cmp     eax, 0FFh
.text:0040BDA2                 jz      loc_40BE30
.text:0040BDA8                 lea     edx, [eax+1]
.text:0040BDAB
.text:0040BDAB loc_40BDAB:                             ; CODE XREF: _d_print_function_type_isra_9+267↓j
.text:0040BDAB                 mov     byte ptr [ebx+eax], 29h ; ')'
.text:0040BDAF                 mov     [ebx+100h], edx
.text:0040BDB5                 mov     byte ptr [ebx+104h], 29h ; ')'
.text:0040BDBC                 cmp     edx, 0FFh
.text:0040BDC2                 jnz     loc_40BC6D
.text:0040BDC8
.text:0040BDC8 loc_40BDC8:                             ; CODE XREF: _d_print_function_type_isra_9+6F↑j
.text:0040BDC8                 mov     byte ptr [ebx+0FFh], 0
.text:0040BDCF                 mov     eax, [ebx+10Ch]
.text:0040BDD5                 mov     [esp+3Ch+var_34], eax
.text:0040BDD9                 mov     [esp+3Ch+var_38], 0FFh
.text:0040BDE1                 mov     [esp+3Ch+var_3C], ebx
.text:0040BDE4                 call    dword ptr [ebx+108h]
.text:0040BDEA                 inc     dword ptr [ebx+120h]
.text:0040BDF0                 mov     eax, 1
.text:0040BDF5                 xor     edx, edx
.text:0040BDF7                 jmp     loc_40BC70
.text:0040BDFC ; ---------------------------------------------------------------------------
.text:0040BDFC
.text:0040BDFC loc_40BDFC:                             ; CODE XREF: _d_print_function_type_isra_9+A7↑j
.text:0040BDFC                 mov     byte ptr [ebx+0FFh], 0
.text:0040BE03                 mov     eax, [ebx+10Ch]
.text:0040BE09                 mov     [esp+3Ch+var_34], eax
.text:0040BE0D                 mov     [esp+3Ch+var_38], 0FFh
.text:0040BE15                 mov     [esp+3Ch+var_3C], ebx
.text:0040BE18                 call    dword ptr [ebx+108h]
.text:0040BE1E                 inc     dword ptr [ebx+120h]
.text:0040BE24                 mov     edx, 1
.text:0040BE29                 xor     eax, eax
.text:0040BE2B                 jmp     loc_40BCA8
.text:0040BE30 ; ---------------------------------------------------------------------------
.text:0040BE30
.text:0040BE30 loc_40BE30:                             ; CODE XREF: _d_print_function_type_isra_9+1AA↑j
.text:0040BE30                 mov     byte ptr [ebx+0FFh], 0
.text:0040BE37                 mov     eax, [ebx+10Ch]
.text:0040BE3D                 mov     [esp+3Ch+var_34], eax
.text:0040BE41                 mov     [esp+3Ch+var_38], 0FFh
.text:0040BE49                 mov     [esp+3Ch+var_3C], ebx
.text:0040BE4C                 call    dword ptr [ebx+108h]
.text:0040BE52                 inc     dword ptr [ebx+120h]
.text:0040BE58                 mov     edx, 1
.text:0040BE5D                 xor     eax, eax
.text:0040BE5F                 jmp     loc_40BDAB
.text:0040BE64 ; ---------------------------------------------------------------------------
.text:0040BE64
.text:0040BE64 loc_40BE64:                             ; CODE XREF: _d_print_function_type_isra_9+FA↑j
.text:0040BE64                 mov     byte ptr [ebx+0FFh], 0
.text:0040BE6B                 mov     eax, [ebx+10Ch]
.text:0040BE71                 mov     [esp+3Ch+var_34], eax
.text:0040BE75                 mov     [esp+3Ch+var_38], 0FFh
.text:0040BE7D                 mov     [esp+3Ch+var_3C], ebx
.text:0040BE80                 call    dword ptr [ebx+108h]
.text:0040BE86                 inc     dword ptr [ebx+120h]
.text:0040BE8C                 mov     eax, 1
.text:0040BE91                 xor     edx, edx
.text:0040BE93                 jmp     loc_40BCFB
.text:0040BE93 _d_print_function_type_isra_9 endp
.text:0040BE93
.text:0040BE98
.text:0040BE98 ; =============== S U B R O U T I N E =======================================
.text:0040BE98
.text:0040BE98
.text:0040BE98 _d_print_cast_isra_10 proc near         ; CODE XREF: _d_print_comp+1E3A↑p
.text:0040BE98                                         ; _d_print_comp+26A8↑p
.text:0040BE98
.text:0040BE98 var_3C          = dword ptr -3Ch
.text:0040BE98 var_38          = dword ptr -38h
.text:0040BE98 var_34          = dword ptr -34h
.text:0040BE98 var_24          = dword ptr -24h
.text:0040BE98 var_20          = dword ptr -20h
.text:0040BE98
.text:0040BE98                 push    ebp
.text:0040BE99                 push    edi
.text:0040BE9A                 push    esi
.text:0040BE9B                 push    ebx
.text:0040BE9C                 sub     esp, 2Ch
.text:0040BE9F                 mov     ebx, eax
.text:0040BEA1                 mov     edi, edx
.text:0040BEA3                 mov     esi, ecx
.text:0040BEA5                 mov     ecx, [ecx]
.text:0040BEA7                 cmp     dword ptr [ecx], 4
.text:0040BEAA                 jz      short loc_40BEBC
.text:0040BEAC                 call    _d_print_comp
.text:0040BEB1                 add     esp, 2Ch
.text:0040BEB4                 pop     ebx
.text:0040BEB5                 pop     esi
.text:0040BEB6                 pop     edi
.text:0040BEB7                 pop     ebp
.text:0040BEB8                 retn
.text:0040BEB8 ; ---------------------------------------------------------------------------
.text:0040BEB9                 align 4
.text:0040BEBC
.text:0040BEBC loc_40BEBC:                             ; CODE XREF: _d_print_cast_isra_10+12↑j
.text:0040BEBC                 mov     ebp, [eax+114h]
.text:0040BEC2                 mov     dword ptr [eax+114h], 0
.text:0040BECC                 mov     eax, [eax+110h]
.text:0040BED2                 mov     [esp+3Ch+var_24], eax
.text:0040BED6                 lea     eax, [esp+3Ch+var_24]
.text:0040BEDA                 mov     [ebx+110h], eax
.text:0040BEE0                 mov     eax, [esi]
.text:0040BEE2                 mov     [esp+3Ch+var_20], eax
.text:0040BEE6                 mov     ecx, [eax+4]
.text:0040BEE9                 mov     eax, ebx
.text:0040BEEB                 call    _d_print_comp
.text:0040BEF0                 mov     eax, [esp+3Ch+var_24]
.text:0040BEF4                 mov     [ebx+110h], eax
.text:0040BEFA                 cmp     byte ptr [ebx+104h], 3Ch ; '<'
.text:0040BF01                 jz      loc_40BFDC
.text:0040BF07                 mov     eax, [ebx+100h]
.text:0040BF0D
.text:0040BF0D loc_40BF0D:                             ; CODE XREF: _d_print_cast_isra_10+166↓j
.text:0040BF0D                 cmp     eax, 0FFh
.text:0040BF12                 jz      short loc_40BF74
.text:0040BF14                 lea     edx, [eax+1]
.text:0040BF17
.text:0040BF17 loc_40BF17:                             ; CODE XREF: _d_print_cast_isra_10+10B↓j
.text:0040BF17                 mov     byte ptr [ebx+eax], 3Ch ; '<'
.text:0040BF1B                 mov     [ebx+100h], edx
.text:0040BF21                 mov     byte ptr [ebx+104h], 3Ch ; '<'
.text:0040BF28                 mov     eax, [esi]
.text:0040BF2A                 mov     ecx, [eax+8]
.text:0040BF2D                 mov     edx, edi
.text:0040BF2F                 mov     eax, ebx
.text:0040BF31                 call    _d_print_comp
.text:0040BF36                 cmp     byte ptr [ebx+104h], 3Eh ; '>'
.text:0040BF3D                 jz      loc_40C004
.text:0040BF43                 mov     eax, [ebx+100h]
.text:0040BF49
.text:0040BF49 loc_40BF49:                             ; CODE XREF: _d_print_cast_isra_10+18E↓j
.text:0040BF49                 cmp     eax, 0FFh
.text:0040BF4E                 jz      short loc_40BFA8
.text:0040BF50                 lea     edx, [eax+1]
.text:0040BF53
.text:0040BF53 loc_40BF53:                             ; CODE XREF: _d_print_cast_isra_10+13F↓j
.text:0040BF53                 mov     byte ptr [ebx+eax], 3Eh ; '>'
.text:0040BF57                 mov     [ebx+100h], edx
.text:0040BF5D                 mov     byte ptr [ebx+104h], 3Eh ; '>'
.text:0040BF64                 mov     [ebx+114h], ebp
.text:0040BF6A                 add     esp, 2Ch
.text:0040BF6D                 pop     ebx
.text:0040BF6E                 pop     esi
.text:0040BF6F                 pop     edi
.text:0040BF70                 pop     ebp
.text:0040BF71                 retn
.text:0040BF71 ; ---------------------------------------------------------------------------
.text:0040BF72                 align 4
.text:0040BF74
.text:0040BF74 loc_40BF74:                             ; CODE XREF: _d_print_cast_isra_10+7A↑j
.text:0040BF74                 mov     byte ptr [ebx+0FFh], 0
.text:0040BF7B                 mov     eax, [ebx+10Ch]
.text:0040BF81                 mov     [esp+3Ch+var_34], eax
.text:0040BF85                 mov     [esp+3Ch+var_38], 0FFh
.text:0040BF8D                 mov     [esp+3Ch+var_3C], ebx
.text:0040BF90                 call    dword ptr [ebx+108h]
.text:0040BF96                 inc     dword ptr [ebx+120h]
.text:0040BF9C                 mov     edx, 1
.text:0040BFA1                 xor     eax, eax
.text:0040BFA3                 jmp     loc_40BF17
.text:0040BFA8 ; ---------------------------------------------------------------------------
.text:0040BFA8
.text:0040BFA8 loc_40BFA8:                             ; CODE XREF: _d_print_cast_isra_10+B6↑j
.text:0040BFA8                 mov     byte ptr [ebx+0FFh], 0
.text:0040BFAF                 mov     eax, [ebx+10Ch]
.text:0040BFB5                 mov     [esp+3Ch+var_34], eax
.text:0040BFB9                 mov     [esp+3Ch+var_38], 0FFh
.text:0040BFC1                 mov     [esp+3Ch+var_3C], ebx
.text:0040BFC4                 call    dword ptr [ebx+108h]
.text:0040BFCA                 inc     dword ptr [ebx+120h]
.text:0040BFD0                 mov     edx, 1
.text:0040BFD5                 xor     eax, eax
.text:0040BFD7                 jmp     loc_40BF53
.text:0040BFDC ; ---------------------------------------------------------------------------
.text:0040BFDC
.text:0040BFDC loc_40BFDC:                             ; CODE XREF: _d_print_cast_isra_10+69↑j
.text:0040BFDC                 mov     edx, [ebx+100h]
.text:0040BFE2                 cmp     edx, 0FFh
.text:0040BFE8                 jz      short loc_40C060
.text:0040BFEA                 lea     eax, [edx+1]
.text:0040BFED
.text:0040BFED loc_40BFED:                             ; CODE XREF: _d_print_cast_isra_10+1F7↓j
.text:0040BFED                 mov     byte ptr [ebx+edx], 20h ; ' '
.text:0040BFF1                 mov     [ebx+100h], eax
.text:0040BFF7                 mov     byte ptr [ebx+104h], 20h ; ' '
.text:0040BFFE                 jmp     loc_40BF0D
.text:0040BFFE ; ---------------------------------------------------------------------------
.text:0040C003                 align 4
.text:0040C004
.text:0040C004 loc_40C004:                             ; CODE XREF: _d_print_cast_isra_10+A5↑j
.text:0040C004                 mov     edx, [ebx+100h]
.text:0040C00A                 cmp     edx, 0FFh
.text:0040C010                 jz      short loc_40C02C
.text:0040C012                 lea     eax, [edx+1]
.text:0040C015
.text:0040C015 loc_40C015:                             ; CODE XREF: _d_print_cast_isra_10+1C3↓j
.text:0040C015                 mov     byte ptr [ebx+edx], 20h ; ' '
.text:0040C019                 mov     [ebx+100h], eax
.text:0040C01F                 mov     byte ptr [ebx+104h], 20h ; ' '
.text:0040C026                 jmp     loc_40BF49
.text:0040C026 ; ---------------------------------------------------------------------------
.text:0040C02B                 align 4
.text:0040C02C
.text:0040C02C loc_40C02C:                             ; CODE XREF: _d_print_cast_isra_10+178↑j
.text:0040C02C                 mov     byte ptr [ebx+0FFh], 0
.text:0040C033                 mov     eax, [ebx+10Ch]
.text:0040C039                 mov     [esp+3Ch+var_34], eax
.text:0040C03D                 mov     [esp+3Ch+var_38], 0FFh
.text:0040C045                 mov     [esp+3Ch+var_3C], ebx
.text:0040C048                 call    dword ptr [ebx+108h]
.text:0040C04E                 inc     dword ptr [ebx+120h]
.text:0040C054                 mov     eax, 1
.text:0040C059                 xor     edx, edx
.text:0040C05B                 jmp     short loc_40C015
.text:0040C05B ; ---------------------------------------------------------------------------
.text:0040C05D                 align 10h
.text:0040C060
.text:0040C060 loc_40C060:                             ; CODE XREF: _d_print_cast_isra_10+150↑j
.text:0040C060                 mov     byte ptr [ebx+0FFh], 0
.text:0040C067                 mov     eax, [ebx+10Ch]
.text:0040C06D                 mov     [esp+3Ch+var_34], eax
.text:0040C071                 mov     [esp+3Ch+var_38], 0FFh
.text:0040C079                 mov     [esp+3Ch+var_3C], ebx
.text:0040C07C                 call    dword ptr [ebx+108h]
.text:0040C082                 inc     dword ptr [ebx+120h]
.text:0040C088                 mov     eax, 1
.text:0040C08D                 xor     edx, edx
.text:0040C08F                 jmp     loc_40BFED
.text:0040C08F _d_print_cast_isra_10 endp
.text:0040C08F
.text:0040C094
.text:0040C094 ; =============== S U B R O U T I N E =======================================
.text:0040C094
.text:0040C094
.text:0040C094 _d_print_expr_op proc near              ; CODE XREF: _d_print_comp+159B↑p
.text:0040C094                                         ; _d_print_comp+188E↑p ...
.text:0040C094
.text:0040C094 var_3C          = dword ptr -3Ch
.text:0040C094 var_38          = dword ptr -38h
.text:0040C094 var_34          = dword ptr -34h
.text:0040C094 var_24          = dword ptr -24h
.text:0040C094 var_20          = byte ptr -20h
.text:0040C094
.text:0040C094                 cmp     dword ptr [ecx], 2Dh ; '-'
.text:0040C097                 jz      short loc_40C0A0
.text:0040C099                 jmp     _d_print_comp
.text:0040C099 ; ---------------------------------------------------------------------------
.text:0040C09E                 align 10h
.text:0040C0A0
.text:0040C0A0 loc_40C0A0:                             ; CODE XREF: _d_print_expr_op+3↑j
.text:0040C0A0                 push    ebp
.text:0040C0A1                 push    edi
.text:0040C0A2                 push    esi
.text:0040C0A3                 push    ebx
.text:0040C0A4                 sub     esp, 2Ch
.text:0040C0A7                 mov     edx, [ecx+4]
.text:0040C0AA                 mov     edi, [edx+8]
.text:0040C0AD                 mov     ebp, [edx+4]
.text:0040C0B0                 test    edi, edi
.text:0040C0B2                 jz      short loc_40C124
.text:0040C0B4                 mov     edx, [eax+100h]
.text:0040C0BA                 xor     ebx, ebx
.text:0040C0BC                 jmp     short loc_40C0D7
.text:0040C0BC ; ---------------------------------------------------------------------------
.text:0040C0BE                 align 10h
.text:0040C0C0
.text:0040C0C0 loc_40C0C0:                             ; CODE XREF: _d_print_expr_op+4D↓j
.text:0040C0C0                 mov     esi, edx
.text:0040C0C2                 inc     edx
.text:0040C0C3
.text:0040C0C3 loc_40C0C3:                             ; CODE XREF: _d_print_expr_op+8E↓j
.text:0040C0C3                 mov     [eax+esi], cl
.text:0040C0C6                 mov     [eax+100h], edx
.text:0040C0CC                 mov     [eax+104h], cl
.text:0040C0D2                 inc     ebx
.text:0040C0D3                 cmp     edi, ebx
.text:0040C0D5                 jz      short loc_40C124
.text:0040C0D7
.text:0040C0D7 loc_40C0D7:                             ; CODE XREF: _d_print_expr_op+28↑j
.text:0040C0D7                 mov     cl, [ebp+ebx+0]
.text:0040C0DB                 cmp     edx, 0FFh
.text:0040C0E1                 jnz     short loc_40C0C0
.text:0040C0E3                 mov     byte ptr [eax+0FFh], 0
.text:0040C0EA                 mov     edx, [eax+10Ch]
.text:0040C0F0                 mov     [esp+3Ch+var_34], edx
.text:0040C0F4                 mov     [esp+3Ch+var_38], 0FFh
.text:0040C0FC                 mov     [esp+3Ch+var_3C], eax
.text:0040C0FF                 mov     [esp+3Ch+var_24], eax
.text:0040C103                 mov     [esp+3Ch+var_20], cl
.text:0040C107                 call    dword ptr [eax+108h]
.text:0040C10D                 mov     eax, [esp+3Ch+var_24]
.text:0040C111                 inc     dword ptr [eax+120h]
.text:0040C117                 mov     edx, 1
.text:0040C11C                 xor     esi, esi
.text:0040C11E                 mov     cl, [esp+3Ch+var_20]
.text:0040C122                 jmp     short loc_40C0C3
.text:0040C124 ; ---------------------------------------------------------------------------
.text:0040C124
.text:0040C124 loc_40C124:                             ; CODE XREF: _d_print_expr_op+1E↑j
.text:0040C124                                         ; _d_print_expr_op+41↑j
.text:0040C124                 add     esp, 2Ch
.text:0040C127                 pop     ebx
.text:0040C128                 pop     esi
.text:0040C129                 pop     edi
.text:0040C12A                 pop     ebp
.text:0040C12B                 retn
.text:0040C12B _d_print_expr_op endp
.text:0040C12B
.text:0040C12C
.text:0040C12C ; =============== S U B R O U T I N E =======================================
.text:0040C12C
.text:0040C12C
.text:0040C12C _d_print_subexpr proc near              ; CODE XREF: _d_print_comp+189D↑p
.text:0040C12C                                         ; _d_print_comp+2363↑p ...
.text:0040C12C
.text:0040C12C var_2C          = dword ptr -2Ch
.text:0040C12C var_28          = dword ptr -28h
.text:0040C12C var_24          = dword ptr -24h
.text:0040C12C var_14          = dword ptr -14h
.text:0040C12C var_10          = dword ptr -10h
.text:0040C12C
.text:0040C12C                 push    esi
.text:0040C12D                 push    ebx
.text:0040C12E                 sub     esp, 24h
.text:0040C131                 mov     ebx, eax
.text:0040C133                 mov     eax, [ecx]
.text:0040C135                 cmp     eax, 1
.text:0040C138                 jbe     short loc_40C198
.text:0040C13A                 cmp     eax, 2Ch ; ','
.text:0040C13D                 jz      short loc_40C198
.text:0040C13F                 cmp     eax, 6
.text:0040C142                 jz      short loc_40C198
.text:0040C144                 mov     eax, [ebx+100h]
.text:0040C14A                 cmp     eax, 0FFh
.text:0040C14F                 jz      loc_40C1D8
.text:0040C155                 lea     esi, [eax+1]
.text:0040C158
.text:0040C158 loc_40C158:                             ; CODE XREF: _d_print_subexpr+EB↓j
.text:0040C158                 mov     byte ptr [ebx+eax], 28h ; '('
.text:0040C15C                 mov     [ebx+100h], esi
.text:0040C162                 mov     byte ptr [ebx+104h], 28h ; '('
.text:0040C169                 mov     eax, ebx
.text:0040C16B                 call    _d_print_comp
.text:0040C170                 mov     eax, [ebx+100h]
.text:0040C176                 cmp     eax, 0FFh
.text:0040C17B                 jz      short loc_40C1A4
.text:0040C17D                 lea     edx, [eax+1]
.text:0040C180
.text:0040C180 loc_40C180:                             ; CODE XREF: _d_print_subexpr+A7↓j
.text:0040C180                 mov     byte ptr [ebx+eax], 29h ; ')'
.text:0040C184                 mov     [ebx+100h], edx
.text:0040C18A                 mov     byte ptr [ebx+104h], 29h ; ')'
.text:0040C191                 add     esp, 24h
.text:0040C194                 pop     ebx
.text:0040C195                 pop     esi
.text:0040C196                 retn
.text:0040C196 ; ---------------------------------------------------------------------------
.text:0040C197                 align 4
.text:0040C198
.text:0040C198 loc_40C198:                             ; CODE XREF: _d_print_subexpr+C↑j
.text:0040C198                                         ; _d_print_subexpr+11↑j ...
.text:0040C198                 mov     eax, ebx
.text:0040C19A                 add     esp, 24h
.text:0040C19D                 pop     ebx
.text:0040C19E                 pop     esi
.text:0040C19F                 jmp     _d_print_comp
.text:0040C1A4 ; ---------------------------------------------------------------------------
.text:0040C1A4
.text:0040C1A4 loc_40C1A4:                             ; CODE XREF: _d_print_subexpr+4F↑j
.text:0040C1A4                 mov     byte ptr [ebx+0FFh], 0
.text:0040C1AB                 mov     eax, [ebx+10Ch]
.text:0040C1B1                 mov     [esp+2Ch+var_24], eax
.text:0040C1B5                 mov     [esp+2Ch+var_28], 0FFh
.text:0040C1BD                 mov     [esp+2Ch+var_2C], ebx
.text:0040C1C0                 call    dword ptr [ebx+108h]
.text:0040C1C6                 inc     dword ptr [ebx+120h]
.text:0040C1CC                 mov     edx, 1
.text:0040C1D1                 xor     eax, eax
.text:0040C1D3                 jmp     short loc_40C180
.text:0040C1D3 ; ---------------------------------------------------------------------------
.text:0040C1D5                 align 4
.text:0040C1D8
.text:0040C1D8 loc_40C1D8:                             ; CODE XREF: _d_print_subexpr+23↑j
.text:0040C1D8                 mov     byte ptr [ebx+0FFh], 0
.text:0040C1DF                 mov     eax, [ebx+10Ch]
.text:0040C1E5                 mov     [esp+2Ch+var_24], eax
.text:0040C1E9                 mov     [esp+2Ch+var_28], 0FFh
.text:0040C1F1                 mov     [esp+2Ch+var_2C], ebx
.text:0040C1F4                 mov     [esp+2Ch+var_10], edx
.text:0040C1F8                 mov     [esp+2Ch+var_14], ecx
.text:0040C1FC                 call    dword ptr [ebx+108h]
.text:0040C202                 inc     dword ptr [ebx+120h]
.text:0040C208                 mov     esi, 1
.text:0040C20D                 xor     eax, eax
.text:0040C20F                 mov     ecx, [esp+2Ch+var_14]
.text:0040C213                 mov     edx, [esp+2Ch+var_10]
.text:0040C217                 jmp     loc_40C158
.text:0040C217 _d_print_subexpr endp
.text:0040C217
.text:0040C21C
.text:0040C21C ; =============== S U B R O U T I N E =======================================
.text:0040C21C
.text:0040C21C ; Attributes: bp-based frame
.text:0040C21C
.text:0040C21C _d_demangle_callback_constprop_15 proc near
.text:0040C21C                                         ; CODE XREF: ___cxa_demangle+54↓p
.text:0040C21C                                         ; ___gcclibcxx_demangle_callback+17↓p
.text:0040C21C
.text:0040C21C var_184         = dword ptr -184h
.text:0040C21C var_180         = dword ptr -180h
.text:0040C21C var_179         = byte ptr -179h
.text:0040C21C var_170         = dword ptr -170h
.text:0040C21C var_16C         = dword ptr -16Ch
.text:0040C21C var_168         = dword ptr -168h
.text:0040C21C var_164         = dword ptr -164h
.text:0040C21C var_160         = dword ptr -160h
.text:0040C21C var_15C         = dword ptr -15Ch
.text:0040C21C var_158         = dword ptr -158h
.text:0040C21C var_154         = dword ptr -154h
.text:0040C21C var_150         = dword ptr -150h
.text:0040C21C var_14C         = dword ptr -14Ch
.text:0040C21C var_148         = dword ptr -148h
.text:0040C21C var_144         = dword ptr -144h
.text:0040C21C var_140         = dword ptr -140h
.text:0040C21C var_13C         = byte ptr -13Ch
.text:0040C21C var_3C          = dword ptr -3Ch
.text:0040C21C var_38          = byte ptr -38h
.text:0040C21C var_34          = dword ptr -34h
.text:0040C21C var_30          = dword ptr -30h
.text:0040C21C var_2C          = dword ptr -2Ch
.text:0040C21C var_28          = dword ptr -28h
.text:0040C21C var_24          = dword ptr -24h
.text:0040C21C var_20          = dword ptr -20h
.text:0040C21C var_1C          = dword ptr -1Ch
.text:0040C21C
.text:0040C21C                 push    ebp
.text:0040C21D                 mov     ebp, esp
.text:0040C21F                 push    edi
.text:0040C220                 push    esi
.text:0040C221                 push    ebx
.text:0040C222                 sub     esp, 18Ch
.text:0040C228                 mov     ebx, eax
.text:0040C22A                 mov     [ebp+var_180], edx
.text:0040C230                 mov     [ebp+var_184], ecx
.text:0040C236                 mov     al, [eax]
.text:0040C238                 mov     [ebp+var_179], al
.text:0040C23E                 cmp     al, 5Fh ; '_'
.text:0040C240                 jz      loc_40C41C
.text:0040C246
.text:0040C246 loc_40C246:                             ; CODE XREF: _d_demangle_callback_constprop_15+204↓j
.text:0040C246                 mov     edi, offset aGlobal ; "_GLOBAL_"
.text:0040C24B                 mov     ecx, 8
.text:0040C250                 mov     esi, ebx
.text:0040C252                 repe cmpsb
.text:0040C254                 jnz     short loc_40C271
.text:0040C256                 mov     al, [ebx+8]
.text:0040C259                 cmp     al, 2Eh ; '.'
.text:0040C25B                 jz      loc_40C3F4
.text:0040C261                 cmp     al, 5Fh ; '_'
.text:0040C263                 jz      loc_40C3F4
.text:0040C269                 cmp     al, 24h ; '$'
.text:0040C26B                 jz      loc_40C3F4
.text:0040C271
.text:0040C271 loc_40C271:                             ; CODE XREF: _d_demangle_callback_constprop_15+38↑j
.text:0040C271                                         ; _d_demangle_callback_constprop_15+1E5↓j
.text:0040C271                 xor     esi, esi
.text:0040C273
.text:0040C273 loc_40C273:                             ; CODE XREF: _d_demangle_callback_constprop_15+1F8↓j
.text:0040C273                                         ; _d_demangle_callback_constprop_15+20F↓j ...
.text:0040C273                 xor     eax, eax
.text:0040C275                 mov     ecx, 0FFFFFFFFh
.text:0040C27A                 mov     edi, ebx
.text:0040C27C                 repne scasb
.text:0040C27E                 not     ecx
.text:0040C280                 dec     ecx
.text:0040C281                 mov     [ebp+var_170], ebx
.text:0040C287                 lea     eax, [ebx+ecx]
.text:0040C28A                 mov     [ebp+var_16C], eax
.text:0040C290                 mov     [ebp+var_168], 11h
.text:0040C29A                 mov     [ebp+var_164], ebx
.text:0040C2A0                 lea     eax, [ecx+ecx]
.text:0040C2A3                 mov     [ebp+var_158], eax
.text:0040C2A9                 mov     [ebp+var_15C], 0
.text:0040C2B3                 mov     [ebp+var_14C], ecx
.text:0040C2B9                 mov     [ebp+var_150], 0
.text:0040C2C3                 mov     [ebp+var_148], 0
.text:0040C2CD                 mov     [ebp+var_144], 0
.text:0040C2D7                 mov     [ebp+var_140], 0
.text:0040C2E1                 lea     edx, ds:0[ecx*4]
.text:0040C2E8                 add     eax, edx
.text:0040C2EA                 lea     eax, ds:12h[eax*4]
.text:0040C2F1                 mov     ecx, 10h
.text:0040C2F6                 and     eax, 0FFFFFFF0h
.text:0040C2F9                 call    ___chkstk_ms
.text:0040C2FE                 sub     esp, eax
.text:0040C300                 lea     edi, [esp+0Ch]
.text:0040C304                 lea     eax, [edx+12h]
.text:0040C307                 xor     edx, edx
.text:0040C309                 div     ecx
.text:0040C30B                 shl     eax, 4
.text:0040C30E                 call    ___chkstk_ms
.text:0040C313                 sub     esp, eax
.text:0040C315                 lea     eax, [esp+0Ch]
.text:0040C319                 mov     [ebp+var_160], edi
.text:0040C31F                 mov     [ebp+var_154], eax
.text:0040C325                 cmp     esi, 1
.text:0040C328                 jz      loc_40C4C4
.text:0040C32E                 jnb     loc_40C430
.text:0040C334
.text:0040C334 loc_40C334:                             ; CODE XREF: _d_demangle_callback_constprop_15+217↓j
.text:0040C334                 lea     eax, [ebp+var_170]
.text:0040C33A                 call    _d_type
.text:0040C33F                 mov     ebx, eax
.text:0040C341                 mov     eax, [ebp+var_164]
.text:0040C347                 mov     al, [eax]
.text:0040C349                 mov     [ebp+var_179], al
.text:0040C34F
.text:0040C34F loc_40C34F:                             ; CODE XREF: _d_demangle_callback_constprop_15+30F↓j
.text:0040C34F                                         ; _d_demangle_callback_constprop_15+326↓j ...
.text:0040C34F                 cmp     [ebp+var_179], 0
.text:0040C356                 jnz     loc_40C3E8
.text:0040C35C
.text:0040C35C loc_40C35C:                             ; CODE XREF: _d_demangle_callback_constprop_15+2A0↓j
.text:0040C35C                                         ; _d_demangle_callback_constprop_15+2C0↓j
.text:0040C35C                 test    ebx, ebx
.text:0040C35E                 jz      loc_40C3E8
.text:0040C364                 mov     [ebp+var_3C], 0
.text:0040C36B                 mov     [ebp+var_38], 0
.text:0040C36F                 mov     [ebp+var_2C], 0
.text:0040C376                 mov     [ebp+var_28], 0
.text:0040C37D                 mov     [ebp+var_20], 0
.text:0040C384                 mov     [ebp+var_1C], 0
.text:0040C38B                 mov     eax, [ebp+var_180]
.text:0040C391                 mov     [ebp+var_34], eax
.text:0040C394                 mov     eax, [ebp+var_184]
.text:0040C39A                 mov     [ebp+var_30], eax
.text:0040C39D                 mov     [ebp+var_24], 0
.text:0040C3A4                 lea     esi, [ebp+var_13C]
.text:0040C3AA                 mov     ecx, ebx
.text:0040C3AC                 mov     edx, 11h
.text:0040C3B1                 mov     eax, esi
.text:0040C3B3                 call    _d_print_comp
.text:0040C3B8                 mov     eax, [ebp+var_3C]
.text:0040C3BB                 mov     [ebp+eax+var_13C], 0
.text:0040C3C3                 mov     edx, [ebp+var_30]
.text:0040C3C6                 mov     [esp+8], edx
.text:0040C3CA                 mov     [esp+4], eax
.text:0040C3CE                 mov     [esp], esi
.text:0040C3D1                 call    [ebp+var_34]
.text:0040C3D4                 xor     eax, eax
.text:0040C3D6                 mov     edx, [ebp+var_24]
.text:0040C3D9                 test    edx, edx
.text:0040C3DB                 setz    al
.text:0040C3DE                 lea     esp, [ebp-0Ch]
.text:0040C3E1                 pop     ebx
.text:0040C3E2                 pop     esi
.text:0040C3E3                 pop     edi
.text:0040C3E4                 pop     ebp
.text:0040C3E5                 retn
.text:0040C3E5 ; ---------------------------------------------------------------------------
.text:0040C3E6                 align 4
.text:0040C3E8
.text:0040C3E8 loc_40C3E8:                             ; CODE XREF: _d_demangle_callback_constprop_15+13A↑j
.text:0040C3E8                                         ; _d_demangle_callback_constprop_15+142↑j ...
.text:0040C3E8                 xor     eax, eax
.text:0040C3EA                 lea     esp, [ebp-0Ch]
.text:0040C3ED                 pop     ebx
.text:0040C3EE                 pop     esi
.text:0040C3EF                 pop     edi
.text:0040C3F0                 pop     ebp
.text:0040C3F1                 retn
.text:0040C3F1 ; ---------------------------------------------------------------------------
.text:0040C3F2                 align 4
.text:0040C3F4
.text:0040C3F4 loc_40C3F4:                             ; CODE XREF: _d_demangle_callback_constprop_15+3F↑j
.text:0040C3F4                                         ; _d_demangle_callback_constprop_15+47↑j ...
.text:0040C3F4                 mov     al, [ebx+9]
.text:0040C3F7                 cmp     al, 44h ; 'D'
.text:0040C3F9                 jz      loc_40C627
.text:0040C3FF                 cmp     al, 49h ; 'I'
.text:0040C401                 jnz     loc_40C271
.text:0040C407                 xor     eax, eax
.text:0040C409                 cmp     byte ptr [ebx+0Ah], 5Fh ; '_'
.text:0040C40D                 setz    al
.text:0040C410                 mov     esi, eax
.text:0040C412                 shl     esi, 1
.text:0040C414                 jmp     loc_40C273
.text:0040C414 ; ---------------------------------------------------------------------------
.text:0040C419                 align 4
.text:0040C41C
.text:0040C41C loc_40C41C:                             ; CODE XREF: _d_demangle_callback_constprop_15+24↑j
.text:0040C41C                 cmp     byte ptr [ebx+1], 5Ah ; 'Z'
.text:0040C420                 jnz     loc_40C246
.text:0040C426                 mov     esi, 1
.text:0040C42B                 jmp     loc_40C273
.text:0040C430 ; ---------------------------------------------------------------------------
.text:0040C430
.text:0040C430 loc_40C430:                             ; CODE XREF: _d_demangle_callback_constprop_15+112↑j
.text:0040C430                 cmp     esi, 3
.text:0040C433                 ja      loc_40C334
.text:0040C439                 lea     edx, [ebx+0Bh]
.text:0040C43C                 mov     [ebp+var_164], edx
.text:0040C442                 cmp     byte ptr [ebx+0Bh], 5Fh ; '_'
.text:0040C446                 jnz     short loc_40C452
.text:0040C448                 cmp     byte ptr [ebx+0Ch], 5Ah ; 'Z'
.text:0040C44C                 jz      loc_40C5F9
.text:0040C452
.text:0040C452 loc_40C452:                             ; CODE XREF: _d_demangle_callback_constprop_15+22A↑j
.text:0040C452                 xor     eax, eax
.text:0040C454                 mov     ecx, 0FFFFFFFFh
.text:0040C459                 mov     edi, edx
.text:0040C45B                 repne scasb
.text:0040C45D                 not     ecx
.text:0040C45F                 dec     ecx
.text:0040C460                 lea     edi, [ebp+var_170]
.text:0040C466                 mov     eax, edi
.text:0040C468                 call    _d_make_name
.text:0040C46D                 mov     ecx, eax
.text:0040C46F
.text:0040C46F loc_40C46F:                             ; CODE XREF: _d_demangle_callback_constprop_15+3F7↓j
.text:0040C46F                 xor     edx, edx
.text:0040C471                 cmp     esi, 2
.text:0040C474                 setnz   dl
.text:0040C477                 add     edx, 3Eh ; '>'
.text:0040C47A                 mov     dword ptr [esp], 0
.text:0040C481                 mov     eax, edi
.text:0040C483                 call    _d_make_comp
.text:0040C488                 mov     ebx, eax
.text:0040C48A                 mov     edx, [ebp+var_164]
.text:0040C490                 xor     eax, eax
.text:0040C492                 mov     ecx, 0FFFFFFFFh
.text:0040C497                 mov     edi, edx
.text:0040C499                 repne scasb
.text:0040C49B                 not     ecx
.text:0040C49D                 lea     eax, [edx+ecx-1]
.text:0040C4A1                 mov     [ebp+var_164], eax
.text:0040C4A7                 mov     al, [eax]
.text:0040C4A9                 mov     [ebp+var_179], al
.text:0040C4AF                 cmp     [ebp+var_179], 0
.text:0040C4B6                 jnz     loc_40C3E8
.text:0040C4BC                 jmp     loc_40C35C
.text:0040C4BC ; ---------------------------------------------------------------------------
.text:0040C4C1                 align 4
.text:0040C4C4
.text:0040C4C4 loc_40C4C4:                             ; CODE XREF: _d_demangle_callback_constprop_15+10C↑j
.text:0040C4C4                 cmp     [ebp+var_179], 5Fh ; '_'
.text:0040C4CB                 jz      short loc_40C4E1
.text:0040C4CD
.text:0040C4CD loc_40C4CD:                             ; CODE XREF: _d_demangle_callback_constprop_15+2D9↓j
.text:0040C4CD                 xor     ebx, ebx
.text:0040C4CF                 cmp     [ebp+var_179], 0
.text:0040C4D6                 jnz     loc_40C3E8
.text:0040C4DC                 jmp     loc_40C35C
.text:0040C4E1 ; ---------------------------------------------------------------------------
.text:0040C4E1
.text:0040C4E1 loc_40C4E1:                             ; CODE XREF: _d_demangle_callback_constprop_15+2AF↑j
.text:0040C4E1                 lea     eax, [ebx+1]
.text:0040C4E4                 mov     [ebp+var_164], eax
.text:0040C4EA                 mov     al, [ebx+1]
.text:0040C4ED                 mov     [ebp+var_179], al
.text:0040C4F3                 cmp     al, 5Ah ; 'Z'
.text:0040C4F5                 jnz     short loc_40C4CD
.text:0040C4F7                 add     ebx, 2
.text:0040C4FA                 mov     [ebp+var_164], ebx
.text:0040C500                 lea     edi, [ebp+var_170]
.text:0040C506                 mov     edx, 1
.text:0040C50B                 mov     eax, edi
.text:0040C50D                 call    _d_encoding
.text:0040C512                 mov     ebx, eax
.text:0040C514                 test    byte ptr [ebp+var_168], 1
.text:0040C51B                 jnz     short loc_40C530
.text:0040C51D                 mov     eax, [ebp+var_164]
.text:0040C523                 mov     al, [eax]
.text:0040C525                 mov     [ebp+var_179], al
.text:0040C52B                 jmp     loc_40C34F
.text:0040C530 ; ---------------------------------------------------------------------------
.text:0040C530
.text:0040C530 loc_40C530:                             ; CODE XREF: _d_demangle_callback_constprop_15+2FF↑j
.text:0040C530                 mov     edx, [ebp+var_164]
.text:0040C536                 mov     al, [edx]
.text:0040C538                 mov     [ebp+var_179], al
.text:0040C53E                 mov     esi, ebx
.text:0040C540                 cmp     al, 2Eh ; '.'
.text:0040C542                 jnz     loc_40C34F
.text:0040C548
.text:0040C548 loc_40C548:                             ; CODE XREF: _d_demangle_callback_constprop_15+3A4↓j
.text:0040C548                 mov     al, [edx+1]
.text:0040C54B                 lea     ecx, [eax-61h]
.text:0040C54E                 cmp     cl, 19h
.text:0040C551                 jbe     loc_40C5E0
.text:0040C557                 cmp     al, 5Fh ; '_'
.text:0040C559                 jz      loc_40C5E0
.text:0040C55F                 sub     eax, 30h ; '0'
.text:0040C562                 cmp     al, 9
.text:0040C564                 ja      loc_40C618
.text:0040C56A                 mov     al, [edx]
.text:0040C56C                 mov     ebx, edx
.text:0040C56E
.text:0040C56E loc_40C56E:                             ; CODE XREF: _d_demangle_callback_constprop_15+3D4↓j
.text:0040C56E                 cmp     al, 2Eh ; '.'
.text:0040C570                 jnz     short loc_40C592
.text:0040C572                 xchg    ax, ax
.text:0040C574
.text:0040C574 loc_40C574:                             ; CODE XREF: _d_demangle_callback_constprop_15+374↓j
.text:0040C574                 mov     al, [ebx+1]
.text:0040C577                 sub     eax, 30h ; '0'
.text:0040C57A                 cmp     al, 9
.text:0040C57C                 ja      short loc_40C592
.text:0040C57E                 lea     ecx, [ebx+2]
.text:0040C581                 mov     al, [ebx+2]
.text:0040C584                 lea     ebx, [eax-30h]
.text:0040C587                 cmp     bl, 9
.text:0040C58A                 jbe     short loc_40C5D0
.text:0040C58C                 mov     ebx, ecx
.text:0040C58E
.text:0040C58E loc_40C58E:                             ; CODE XREF: _d_demangle_callback_constprop_15+3C1↓j
.text:0040C58E                 cmp     al, 2Eh ; '.'
.text:0040C590                 jz      short loc_40C574
.text:0040C592
.text:0040C592 loc_40C592:                             ; CODE XREF: _d_demangle_callback_constprop_15+354↑j
.text:0040C592                                         ; _d_demangle_callback_constprop_15+360↑j
.text:0040C592                 mov     ecx, ebx
.text:0040C594                 sub     ecx, edx
.text:0040C596                 mov     [ebp+var_164], ebx
.text:0040C59C                 mov     eax, edi
.text:0040C59E                 call    _d_make_name
.text:0040C5A3                 mov     [esp], eax
.text:0040C5A6                 mov     ecx, esi
.text:0040C5A8                 mov     edx, 46h ; 'F'
.text:0040C5AD                 mov     eax, edi
.text:0040C5AF                 call    _d_make_comp
.text:0040C5B4                 mov     esi, eax
.text:0040C5B6                 mov     edx, [ebp+var_164]
.text:0040C5BC                 mov     al, [edx]
.text:0040C5BE                 cmp     al, 2Eh ; '.'
.text:0040C5C0                 jz      short loc_40C548
.text:0040C5C2                 mov     [ebp+var_179], al
.text:0040C5C8                 mov     ebx, esi
.text:0040C5CA                 jmp     loc_40C34F
.text:0040C5CA ; ---------------------------------------------------------------------------
.text:0040C5CF                 align 10h
.text:0040C5D0
.text:0040C5D0 loc_40C5D0:                             ; CODE XREF: _d_demangle_callback_constprop_15+36E↑j
.text:0040C5D0                                         ; _d_demangle_callback_constprop_15+3BD↓j
.text:0040C5D0                 inc     ecx
.text:0040C5D1                 mov     al, [ecx]
.text:0040C5D3                 lea     ebx, [eax-30h]
.text:0040C5D6                 cmp     bl, 9
.text:0040C5D9                 jbe     short loc_40C5D0
.text:0040C5DB                 mov     ebx, ecx
.text:0040C5DD                 jmp     short loc_40C58E
.text:0040C5DD ; ---------------------------------------------------------------------------
.text:0040C5DF                 align 10h
.text:0040C5E0
.text:0040C5E0 loc_40C5E0:                             ; CODE XREF: _d_demangle_callback_constprop_15+335↑j
.text:0040C5E0                                         ; _d_demangle_callback_constprop_15+33D↑j
.text:0040C5E0                 lea     ebx, [edx+2]
.text:0040C5E3                 nop
.text:0040C5E4
.text:0040C5E4 loc_40C5E4:                             ; CODE XREF: _d_demangle_callback_constprop_15+3DB↓j
.text:0040C5E4                 mov     al, [ebx]
.text:0040C5E6                 lea     ecx, [eax-61h]
.text:0040C5E9                 cmp     cl, 19h
.text:0040C5EC                 jbe     short loc_40C5F6
.text:0040C5EE                 cmp     al, 5Fh ; '_'
.text:0040C5F0                 jnz     loc_40C56E
.text:0040C5F6
.text:0040C5F6 loc_40C5F6:                             ; CODE XREF: _d_demangle_callback_constprop_15+3D0↑j
.text:0040C5F6                 inc     ebx
.text:0040C5F7                 jmp     short loc_40C5E4
.text:0040C5F9 ; ---------------------------------------------------------------------------
.text:0040C5F9
.text:0040C5F9 loc_40C5F9:                             ; CODE XREF: _d_demangle_callback_constprop_15+230↑j
.text:0040C5F9                 add     ebx, 0Dh
.text:0040C5FC                 mov     [ebp+var_164], ebx
.text:0040C602                 lea     edi, [ebp+var_170]
.text:0040C608                 xor     edx, edx
.text:0040C60A                 mov     eax, edi
.text:0040C60C                 call    _d_encoding
.text:0040C611                 mov     ecx, eax
.text:0040C613                 jmp     loc_40C46F
.text:0040C618 ; ---------------------------------------------------------------------------
.text:0040C618
.text:0040C618 loc_40C618:                             ; CODE XREF: _d_demangle_callback_constprop_15+348↑j
.text:0040C618                 mov     ebx, esi
.text:0040C61A                 mov     dl, [edx]
.text:0040C61C                 mov     [ebp+var_179], dl
.text:0040C622                 jmp     loc_40C34F
.text:0040C627 ; ---------------------------------------------------------------------------
.text:0040C627
.text:0040C627 loc_40C627:                             ; CODE XREF: _d_demangle_callback_constprop_15+1DD↑j
.text:0040C627                 xor     eax, eax
.text:0040C629                 cmp     byte ptr [ebx+0Ah], 5Fh ; '_'
.text:0040C62D                 setz    al
.text:0040C630                 mov     esi, eax
.text:0040C632                 lea     esi, [esi+esi*2]
.text:0040C635                 jmp     loc_40C273
.text:0040C635 _d_demangle_callback_constprop_15 endp
.text:0040C635
.text:0040C635 ; ---------------------------------------------------------------------------
.text:0040C63A                 align 4
.text:0040C63C
.text:0040C63C ; =============== S U B R O U T I N E =======================================
.text:0040C63C
.text:0040C63C
.text:0040C63C ; char *__cdecl __cxa_demangle(const char *lpmangled, char *lpout, size_t *lpoutlen, int *lpstatus)
.text:0040C63C                 public ___cxa_demangle
.text:0040C63C ___cxa_demangle proc near               ; CODE XREF: __gnu_cxx::__verbose_terminate_handler(void)+98↑p
.text:0040C63C
.text:0040C63C var_3C          = dword ptr -3Ch
.text:0040C63C var_2C          = dword ptr -2Ch
.text:0040C63C var_28          = dword ptr -28h
.text:0040C63C var_24          = dword ptr -24h
.text:0040C63C var_20          = dword ptr -20h
.text:0040C63C lpmangled       = dword ptr  4
.text:0040C63C lpout           = dword ptr  8
.text:0040C63C lpoutlen        = dword ptr  0Ch
.text:0040C63C lpstatus        = dword ptr  10h
.text:0040C63C
.text:0040C63C                 push    ebp
.text:0040C63D                 push    edi
.text:0040C63E                 push    esi
.text:0040C63F                 push    ebx
.text:0040C640                 sub     esp, 2Ch
.text:0040C643                 mov     eax, [esp+3Ch+lpmangled]
.text:0040C647                 mov     ebp, [esp+3Ch+lpstatus]
.text:0040C64B                 test    eax, eax
.text:0040C64D                 jz      loc_40C70C
.text:0040C653                 mov     ecx, [esp+3Ch+lpout]
.text:0040C657                 test    ecx, ecx
.text:0040C659                 jz      short loc_40C667
.text:0040C65B                 mov     edx, [esp+3Ch+lpoutlen]
.text:0040C65F                 test    edx, edx
.text:0040C661                 jz      loc_40C70C
.text:0040C667
.text:0040C667 loc_40C667:                             ; CODE XREF: ___cxa_demangle+1D↑j
.text:0040C667                 mov     [esp+3Ch+var_2C], 0
.text:0040C66F                 mov     [esp+3Ch+var_28], 0
.text:0040C677                 mov     [esp+3Ch+var_24], 0
.text:0040C67F                 mov     [esp+3Ch+var_20], 0
.text:0040C687                 lea     ecx, [esp+3Ch+var_2C]
.text:0040C68B                 mov     edx, offset _d_growable_string_callback_adapter
.text:0040C690                 call    _d_demangle_callback_constprop_15
.text:0040C695                 test    eax, eax
.text:0040C697                 jz      loc_40C764
.text:0040C69D                 mov     eax, [esp+3Ch+var_20]
.text:0040C6A1                 test    eax, eax
.text:0040C6A3                 jz      short loc_40C704
.text:0040C6A5                 mov     esi, 1
.text:0040C6AA
.text:0040C6AA loc_40C6AA:                             ; CODE XREF: ___cxa_demangle+CC↓j
.text:0040C6AA                 mov     ebx, [esp+3Ch+var_2C]
.text:0040C6AE                 test    ebx, ebx
.text:0040C6B0                 jz      loc_40C738
.text:0040C6B6                 mov     edi, [esp+3Ch+lpout]
.text:0040C6BA                 test    edi, edi
.text:0040C6BC                 jz      loc_40C754
.text:0040C6C2                 xor     eax, eax
.text:0040C6C4                 mov     ecx, 0FFFFFFFFh
.text:0040C6C9                 mov     edi, ebx
.text:0040C6CB                 repne scasb
.text:0040C6CD                 not     ecx
.text:0040C6CF                 lea     eax, [ecx-1]
.text:0040C6D2                 mov     edx, [esp+3Ch+lpoutlen]
.text:0040C6D6                 cmp     eax, [edx]
.text:0040C6D8                 jnb     short loc_40C724
.text:0040C6DA                 mov     edi, [esp+3Ch+lpout]
.text:0040C6DE                 mov     esi, ebx
.text:0040C6E0                 rep movsb
.text:0040C6E2                 mov     [esp+3Ch+var_3C], ebx ; void *
.text:0040C6E5                 call    _free
.text:0040C6EA                 mov     ebx, [esp+3Ch+lpout]
.text:0040C6EE
.text:0040C6EE loc_40C6EE:                             ; CODE XREF: ___cxa_demangle+FA↓j
.text:0040C6EE                                         ; ___cxa_demangle+11E↓j ...
.text:0040C6EE                 test    ebp, ebp
.text:0040C6F0                 jz      short loc_40C6F9
.text:0040C6F2                 mov     dword ptr [ebp+0], 0
.text:0040C6F9
.text:0040C6F9 loc_40C6F9:                             ; CODE XREF: ___cxa_demangle+B4↑j
.text:0040C6F9                                         ; ___cxa_demangle+143↓j
.text:0040C6F9                 mov     eax, ebx
.text:0040C6FB                 add     esp, 2Ch
.text:0040C6FE                 pop     ebx
.text:0040C6FF                 pop     esi
.text:0040C700                 pop     edi
.text:0040C701                 pop     ebp
.text:0040C702                 retn
.text:0040C702 ; ---------------------------------------------------------------------------
.text:0040C703                 align 4
.text:0040C704
.text:0040C704 loc_40C704:                             ; CODE XREF: ___cxa_demangle+67↑j
.text:0040C704                 mov     esi, [esp+3Ch+var_24]
.text:0040C708                 jmp     short loc_40C6AA
.text:0040C708 ; ---------------------------------------------------------------------------
.text:0040C70A                 align 4
.text:0040C70C
.text:0040C70C loc_40C70C:                             ; CODE XREF: ___cxa_demangle+11↑j
.text:0040C70C                                         ; ___cxa_demangle+25↑j
.text:0040C70C                 test    ebp, ebp
.text:0040C70E                 jz      short loc_40C717
.text:0040C710                 mov     dword ptr [ebp+0], 0FFFFFFFDh
.text:0040C717
.text:0040C717 loc_40C717:                             ; CODE XREF: ___cxa_demangle+D2↑j
.text:0040C717                                         ; ___cxa_demangle+FE↓j
.text:0040C717                 xor     ebx, ebx
.text:0040C719
.text:0040C719 loc_40C719:                             ; CODE XREF: ___cxa_demangle+13A↓j
.text:0040C719                 mov     eax, ebx
.text:0040C71B                 add     esp, 2Ch
.text:0040C71E                 pop     ebx
.text:0040C71F                 pop     esi
.text:0040C720                 pop     edi
.text:0040C721                 pop     ebp
.text:0040C722                 retn
.text:0040C722 ; ---------------------------------------------------------------------------
.text:0040C723                 align 4
.text:0040C724
.text:0040C724 loc_40C724:                             ; CODE XREF: ___cxa_demangle+9C↑j
.text:0040C724                 mov     eax, [esp+3Ch+lpout]
.text:0040C728                 mov     [esp+3Ch+var_3C], eax ; void *
.text:0040C72B                 call    _free
.text:0040C730                 mov     edx, [esp+3Ch+lpoutlen]
.text:0040C734                 mov     [edx], esi
.text:0040C736                 jmp     short loc_40C6EE
.text:0040C738 ; ---------------------------------------------------------------------------
.text:0040C738
.text:0040C738 loc_40C738:                             ; CODE XREF: ___cxa_demangle+74↑j
.text:0040C738                 test    ebp, ebp
.text:0040C73A                 jz      short loc_40C717
.text:0040C73C                 dec     esi
.text:0040C73D                 jz      short loc_40C778
.text:0040C73F
.text:0040C73F loc_40C73F:                             ; CODE XREF: ___cxa_demangle+136↓j
.text:0040C73F                 mov     dword ptr [ebp+0], 0FFFFFFFEh
.text:0040C746                 xor     ebx, ebx
.text:0040C748                 mov     eax, ebx
.text:0040C74A                 add     esp, 2Ch
.text:0040C74D                 pop     ebx
.text:0040C74E                 pop     esi
.text:0040C74F                 pop     edi
.text:0040C750                 pop     ebp
.text:0040C751                 retn
.text:0040C751 ; ---------------------------------------------------------------------------
.text:0040C752                 align 4
.text:0040C754
.text:0040C754 loc_40C754:                             ; CODE XREF: ___cxa_demangle+80↑j
.text:0040C754                 mov     ecx, [esp+3Ch+lpoutlen]
.text:0040C758                 test    ecx, ecx
.text:0040C75A                 jz      short loc_40C6EE
.text:0040C75C                 mov     eax, [esp+3Ch+lpoutlen]
.text:0040C760                 mov     [eax], esi
.text:0040C762                 jmp     short loc_40C6EE
.text:0040C764 ; ---------------------------------------------------------------------------
.text:0040C764
.text:0040C764 loc_40C764:                             ; CODE XREF: ___cxa_demangle+5B↑j
.text:0040C764                 mov     eax, [esp+3Ch+var_2C]
.text:0040C768                 mov     [esp+3Ch+var_3C], eax ; void *
.text:0040C76B                 call    _free
.text:0040C770                 test    ebp, ebp
.text:0040C772                 jnz     short loc_40C73F
.text:0040C774                 xor     ebx, ebx
.text:0040C776                 jmp     short loc_40C719
.text:0040C778 ; ---------------------------------------------------------------------------
.text:0040C778
.text:0040C778 loc_40C778:                             ; CODE XREF: ___cxa_demangle+101↑j
.text:0040C778                 mov     dword ptr [ebp+0], 0FFFFFFFFh
.text:0040C77F                 jmp     loc_40C6F9
.text:0040C77F ___cxa_demangle endp
.text:0040C77F
.text:0040C784
.text:0040C784 ; =============== S U B R O U T I N E =======================================
.text:0040C784
.text:0040C784
.text:0040C784                 public ___gcclibcxx_demangle_callback
.text:0040C784 ___gcclibcxx_demangle_callback proc near
.text:0040C784
.text:0040C784 arg_0           = dword ptr  4
.text:0040C784 arg_4           = dword ptr  8
.text:0040C784 arg_8           = dword ptr  0Ch
.text:0040C784
.text:0040C784                 sub     esp, 0Ch
.text:0040C787                 mov     eax, [esp+0Ch+arg_0]
.text:0040C78B                 mov     edx, [esp+0Ch+arg_4]
.text:0040C78F                 test    eax, eax
.text:0040C791                 jz      short loc_40C7AC
.text:0040C793                 test    edx, edx
.text:0040C795                 jz      short loc_40C7AC
.text:0040C797                 mov     ecx, [esp+0Ch+arg_8]
.text:0040C79B                 call    _d_demangle_callback_constprop_15
.text:0040C7A0                 cmp     eax, 1
.text:0040C7A3                 sbb     eax, eax
.text:0040C7A5                 and     eax, 0FFFFFFFEh
.text:0040C7A8
.text:0040C7A8 loc_40C7A8:                             ; CODE XREF: ___gcclibcxx_demangle_callback+2D↓j
.text:0040C7A8                 add     esp, 0Ch
.text:0040C7AB                 retn
.text:0040C7AC ; ---------------------------------------------------------------------------
.text:0040C7AC
.text:0040C7AC loc_40C7AC:                             ; CODE XREF: ___gcclibcxx_demangle_callback+D↑j
.text:0040C7AC                                         ; ___gcclibcxx_demangle_callback+11↑j
.text:0040C7AC                 mov     eax, 0FFFFFFFDh
.text:0040C7B1                 jmp     short loc_40C7A8
.text:0040C7B1 ___gcclibcxx_demangle_callback endp
.text:0040C7B1
.text:0040C7B1 ; ---------------------------------------------------------------------------
.text:0040C7B3                 align 10h
.text:0040C7C0
.text:0040C7C0 ; =============== S U B R O U T I N E =======================================
.text:0040C7C0
.text:0040C7C0
.text:0040C7C0 ; __stdcall __dyn_tls_dtor(x, x, x)
.text:0040C7C0                 public ___dyn_tls_dtor@12
.text:0040C7C0 ___dyn_tls_dtor@12 proc near            ; DATA XREF: .CRT:___xl_d↓o
.text:0040C7C0
.text:0040C7C0 var_1C          = dword ptr -1Ch
.text:0040C7C0 var_18          = dword ptr -18h
.text:0040C7C0 var_14          = dword ptr -14h
.text:0040C7C0 arg_0           = dword ptr  4
.text:0040C7C0 arg_4           = dword ptr  8
.text:0040C7C0 arg_8           = dword ptr  0Ch
.text:0040C7C0
.text:0040C7C0 ; __unwind {
.text:0040C7C0                 sub     esp, 1Ch
.text:0040C7C3                 mov     eax, [esp+1Ch+arg_4]
.text:0040C7C7                 test    eax, eax
.text:0040C7C9                 jz      short loc_40C7E0
.text:0040C7CB                 cmp     eax, 3
.text:0040C7CE                 jz      short loc_40C7E0
.text:0040C7D0                 mov     eax, 1
.text:0040C7D5                 add     esp, 1Ch
.text:0040C7D8                 retn    0Ch
.text:0040C7D8 ; ---------------------------------------------------------------------------
.text:0040C7DB                 align 10h
.text:0040C7E0
.text:0040C7E0 loc_40C7E0:                             ; CODE XREF: __dyn_tls_dtor(x,x,x)+9↑j
.text:0040C7E0                                         ; __dyn_tls_dtor(x,x,x)+E↑j
.text:0040C7E0                 mov     edx, [esp+1Ch+arg_8]
.text:0040C7E4                 mov     [esp+1Ch+var_18], eax
.text:0040C7E8                 mov     eax, [esp+1Ch+arg_0]
.text:0040C7EC                 mov     [esp+1Ch+var_14], edx
.text:0040C7F0                 mov     [esp+1Ch+var_1C], eax
.text:0040C7F3                 call    ___mingw_TLScallback
.text:0040C7F8                 mov     eax, 1
.text:0040C7FD                 add     esp, 1Ch
.text:0040C800                 retn    0Ch
.text:0040C800 ; } // starts at 40C7C0
.text:0040C800 ___dyn_tls_dtor@12 endp
.text:0040C800
.text:0040C800 ; ---------------------------------------------------------------------------
.text:0040C803                 align 10h
.text:0040C810
.text:0040C810 ; =============== S U B R O U T I N E =======================================
.text:0040C810
.text:0040C810
.text:0040C810 ; __stdcall __dyn_tls_init(x, x, x)
.text:0040C810                 public ___dyn_tls_init@12
.text:0040C810 ___dyn_tls_init@12 proc near            ; CODE XREF: ___mingw_CRTStartup+24↑p
.text:0040C810                                         ; DATA XREF: .rdata:___dyn_tls_init_callback↓o ...
.text:0040C810
.text:0040C810 var_1C          = dword ptr -1Ch
.text:0040C810 var_18          = dword ptr -18h
.text:0040C810 var_14          = dword ptr -14h
.text:0040C810 arg_0           = dword ptr  4
.text:0040C810 arg_4           = dword ptr  8
.text:0040C810 arg_8           = dword ptr  0Ch
.text:0040C810
.text:0040C810 ; __unwind {
.text:0040C810                 push    esi
.text:0040C811                 push    ebx
.text:0040C812                 sub     esp, 14h
.text:0040C815                 cmp     ds:__CRT_MT, 2
.text:0040C81C                 mov     eax, [esp+1Ch+arg_4]
.text:0040C820                 jz      short loc_40C82C
.text:0040C822                 mov     ds:__CRT_MT, 2
.text:0040C82C
.text:0040C82C loc_40C82C:                             ; CODE XREF: __dyn_tls_init(x,x,x)+10↑j
.text:0040C82C                 cmp     eax, 2
.text:0040C82F                 jz      short loc_40C843
.text:0040C831                 cmp     eax, 1
.text:0040C834                 jz      short loc_40C878
.text:0040C836
.text:0040C836 loc_40C836:                             ; CODE XREF: __dyn_tls_init(x,x,x)+43↓j
.text:0040C836                                         ; __dyn_tls_init(x,x,x)+84↓j
.text:0040C836                 add     esp, 14h
.text:0040C839                 mov     eax, 1
.text:0040C83E                 pop     ebx
.text:0040C83F                 pop     esi
.text:0040C840                 retn    0Ch
.text:0040C843 ; ---------------------------------------------------------------------------
.text:0040C843
.text:0040C843 loc_40C843:                             ; CODE XREF: __dyn_tls_init(x,x,x)+1F↑j
.text:0040C843                 mov     esi, offset ___xd_z
.text:0040C848                 sub     esi, offset ___xd_z
.text:0040C84E                 sar     esi, 2
.text:0040C851                 test    esi, esi
.text:0040C853                 jle     short loc_40C836
.text:0040C855                 xor     ebx, ebx
.text:0040C857
.text:0040C857 loc_40C857:                             ; CODE XREF: __dyn_tls_init(x,x,x)+59↓j
.text:0040C857                 mov     eax, ds:___xd_z[ebx*4]
.text:0040C85E                 test    eax, eax
.text:0040C860                 jz      short loc_40C864
.text:0040C862                 call    eax ; ___xd_z
.text:0040C864
.text:0040C864 loc_40C864:                             ; CODE XREF: __dyn_tls_init(x,x,x)+50↑j
.text:0040C864                 add     ebx, 1
.text:0040C867                 cmp     ebx, esi
.text:0040C869                 jnz     short loc_40C857
.text:0040C86B                 add     esp, 14h
.text:0040C86E                 mov     eax, 1
.text:0040C873                 pop     ebx
.text:0040C874                 pop     esi
.text:0040C875                 retn    0Ch
.text:0040C878 ; ---------------------------------------------------------------------------
.text:0040C878
.text:0040C878 loc_40C878:                             ; CODE XREF: __dyn_tls_init(x,x,x)+24↑j
.text:0040C878                 mov     eax, [esp+1Ch+arg_8]
.text:0040C87C                 mov     [esp+1Ch+var_18], 1
.text:0040C884                 mov     [esp+1Ch+var_14], eax
.text:0040C888                 mov     eax, [esp+1Ch+arg_0]
.text:0040C88C                 mov     [esp+1Ch+var_1C], eax
.text:0040C88F                 call    ___mingw_TLScallback
.text:0040C894                 jmp     short loc_40C836
.text:0040C894 ; } // starts at 40C810
.text:0040C894 ___dyn_tls_init@12 endp
.text:0040C894
.text:0040C894 ; ---------------------------------------------------------------------------
.text:0040C896                 align 10h
.text:0040C8A0
.text:0040C8A0 ; =============== S U B R O U T I N E =======================================
.text:0040C8A0
.text:0040C8A0
.text:0040C8A0                 public ___tlregdtor
.text:0040C8A0 ___tlregdtor    proc near
.text:0040C8A0 ; __unwind {
.text:0040C8A0                 xor     eax, eax
.text:0040C8A2                 retn
.text:0040C8A2 ; } // starts at 40C8A0
.text:0040C8A2 ___tlregdtor    endp
.text:0040C8A2
.text:0040C8A2 ; ---------------------------------------------------------------------------
.text:0040C8A3                 align 10h
.text:0040C8B0
.text:0040C8B0 ; =============== S U B R O U T I N E =======================================
.text:0040C8B0
.text:0040C8B0
.text:0040C8B0                 public ___cpu_features_init
.text:0040C8B0 ___cpu_features_init proc near          ; CODE XREF: ___mingw_CRTStartup+38↑p
.text:0040C8B0 ; __unwind {
.text:0040C8B0                 pushf
.text:0040C8B1                 pushf
.text:0040C8B2                 pop     eax
.text:0040C8B3                 mov     edx, eax
.text:0040C8B5                 xor     eax, 200000h
.text:0040C8BA                 push    eax
.text:0040C8BB                 popf
.text:0040C8BC                 pushf
.text:0040C8BD                 pop     eax
.text:0040C8BE                 popf
.text:0040C8BF                 xor     eax, edx
.text:0040C8C1                 test    eax, 200000h
.text:0040C8C6                 jz      locret_40C971
.text:0040C8CC                 push    ebx
.text:0040C8CD                 xor     eax, eax
.text:0040C8CF                 cpuid
.text:0040C8D1                 test    eax, eax
.text:0040C8D3                 jz      loc_40C970
.text:0040C8D9                 mov     eax, 1
.text:0040C8DE                 cpuid
.text:0040C8E0                 test    dh, 1
.text:0040C8E3                 jz      short loc_40C8EC
.text:0040C8E5                 or      ds:___cpu_features, 1
.text:0040C8EC
.text:0040C8EC loc_40C8EC:                             ; CODE XREF: ___cpu_features_init+33↑j
.text:0040C8EC                 test    dh, 80h
.text:0040C8EF                 jz      short loc_40C8F8
.text:0040C8F1                 or      ds:___cpu_features, 2
.text:0040C8F8
.text:0040C8F8 loc_40C8F8:                             ; CODE XREF: ___cpu_features_init+3F↑j
.text:0040C8F8                 test    edx, 800000h
.text:0040C8FE                 jz      short loc_40C907
.text:0040C900                 or      ds:___cpu_features, 4
.text:0040C907
.text:0040C907 loc_40C907:                             ; CODE XREF: ___cpu_features_init+4E↑j
.text:0040C907                 test    edx, 1000000h
.text:0040C90D                 jz      short loc_40C916
.text:0040C90F                 or      ds:___cpu_features, 8
.text:0040C916
.text:0040C916 loc_40C916:                             ; CODE XREF: ___cpu_features_init+5D↑j
.text:0040C916                 test    edx, 2000000h
.text:0040C91C                 jz      short loc_40C925
.text:0040C91E                 or      ds:___cpu_features, 10h
.text:0040C925
.text:0040C925 loc_40C925:                             ; CODE XREF: ___cpu_features_init+6C↑j
.text:0040C925                 and     edx, 4000000h
.text:0040C92B                 jz      short loc_40C934
.text:0040C92D                 or      ds:___cpu_features, 20h
.text:0040C934
.text:0040C934 loc_40C934:                             ; CODE XREF: ___cpu_features_init+7B↑j
.text:0040C934                 test    cl, 1
.text:0040C937                 jz      short loc_40C940
.text:0040C939                 or      ds:___cpu_features, 40h
.text:0040C940
.text:0040C940 loc_40C940:                             ; CODE XREF: ___cpu_features_init+87↑j
.text:0040C940                 and     ch, 20h
.text:0040C943                 jnz     short loc_40C973
.text:0040C945
.text:0040C945 loc_40C945:                             ; CODE XREF: ___cpu_features_init+CD↓j
.text:0040C945                 mov     eax, 80000000h
.text:0040C94A                 cpuid
.text:0040C94C                 cmp     eax, 80000000h
.text:0040C951                 jbe     short loc_40C970
.text:0040C953                 mov     eax, 80000001h
.text:0040C958                 cpuid
.text:0040C95A                 test    edx, edx
.text:0040C95C                 js      short loc_40C980
.text:0040C95E
.text:0040C95E loc_40C95E:                             ; CODE XREF: ___cpu_features_init+DA↓j
.text:0040C95E                 and     edx, 40000000h
.text:0040C964                 jz      short loc_40C970
.text:0040C966                 or      ds:___cpu_features, 200h
.text:0040C970
.text:0040C970 loc_40C970:                             ; CODE XREF: ___cpu_features_init+23↑j
.text:0040C970                                         ; ___cpu_features_init+A1↑j ...
.text:0040C970                 pop     ebx
.text:0040C971
.text:0040C971 locret_40C971:                          ; CODE XREF: ___cpu_features_init+16↑j
.text:0040C971                 rep retn
.text:0040C973 ; ---------------------------------------------------------------------------
.text:0040C973
.text:0040C973 loc_40C973:                             ; CODE XREF: ___cpu_features_init+93↑j
.text:0040C973                 or      ds:___cpu_features, 80h
.text:0040C97D                 jmp     short loc_40C945
.text:0040C97D ; ---------------------------------------------------------------------------
.text:0040C97F                 align 10h
.text:0040C980
.text:0040C980 loc_40C980:                             ; CODE XREF: ___cpu_features_init+AC↑j
.text:0040C980                 or      ds:___cpu_features, 100h
.text:0040C98A                 jmp     short loc_40C95E
.text:0040C98A ; } // starts at 40C8B0
.text:0040C98A ___cpu_features_init endp
.text:0040C98A
.text:0040C98A ; ---------------------------------------------------------------------------
.text:0040C98C                 align 10h
.text:0040C990
.text:0040C990 ; =============== S U B R O U T I N E =======================================
.text:0040C990
.text:0040C990
.text:0040C990 ; void __cdecl fpreset()
.text:0040C990                 public _fpreset
.text:0040C990 _fpreset        proc near               ; CODE XREF: ___mingw_CRTStartup+3D↑p
.text:0040C990                                         ; _gnu_exception_handler(x)+155↑p
.text:0040C990 ; __unwind {
.text:0040C990                 fninit
.text:0040C992                 retn
.text:0040C992 ; } // starts at 40C990
.text:0040C992 _fpreset        endp
.text:0040C992
.text:0040C992 ; ---------------------------------------------------------------------------
.text:0040C993                 align 10h
.text:0040C9A0
.text:0040C9A0 ; =============== S U B R O U T I N E =======================================
.text:0040C9A0
.text:0040C9A0 ; Attributes: noreturn
.text:0040C9A0
.text:0040C9A0 ; void __cdecl __noreturn __report_error(char *, char)
.text:0040C9A0 ___report_error proc near               ; CODE XREF: ___write_memory_part_0+109↓p
.text:0040C9A0                                         ; __pei386_runtime_relocator+CF↓p ...
.text:0040C9A0
.text:0040C9A0 var_2C          = dword ptr -2Ch
.text:0040C9A0 var_28          = dword ptr -28h
.text:0040C9A0 var_24          = dword ptr -24h
.text:0040C9A0 var_20          = dword ptr -20h
.text:0040C9A0 var_10          = dword ptr -10h
.text:0040C9A0 arg_0           = dword ptr  4
.text:0040C9A0 arg_4           = byte ptr  8
.text:0040C9A0
.text:0040C9A0 ; __unwind {
.text:0040C9A0                 push    ebx
.text:0040C9A1                 sub     esp, 28h
.text:0040C9A4                 mov     ebx, ds:__imp___iob
.text:0040C9AA                 lea     eax, [esp+2Ch+arg_4]
.text:0040C9AE                 mov     [esp+2Ch+var_24], 17h ; size_t
.text:0040C9B6                 mov     [esp+2Ch+var_28], 1 ; size_t
.text:0040C9BE                 add     ebx, 40h ; '@'
.text:0040C9C1                 mov     [esp+2Ch+var_20], ebx ; FILE *
.text:0040C9C5                 mov     [esp+2Ch+var_2C], offset aMingwRuntimeFa ; "Mingw runtime failure:\n"
.text:0040C9CC                 mov     [esp+2Ch+var_10], eax
.text:0040C9D0                 call    _fwrite
.text:0040C9D5                 mov     eax, [esp+2Ch+var_10]
.text:0040C9D9                 mov     [esp+2Ch+var_2C], ebx ; FILE *
.text:0040C9DC                 mov     [esp+2Ch+var_24], eax ; va_list
.text:0040C9E0                 mov     eax, [esp+2Ch+arg_0]
.text:0040C9E4                 mov     [esp+2Ch+var_28], eax ; char *
.text:0040C9E8                 call    _vfprintf
.text:0040C9ED                 call    _abort
.text:0040C9ED ; } // starts at 40C9A0
.text:0040C9ED ___report_error endp
.text:0040C9ED
.text:0040C9ED ; ---------------------------------------------------------------------------
.text:0040C9F2                 align 10h
.text:0040CA00
.text:0040CA00 ; =============== S U B R O U T I N E =======================================
.text:0040CA00
.text:0040CA00
.text:0040CA00 ; int __fastcall __write_memory_part_0(size_t, void *)
.text:0040CA00 ___write_memory_part_0 proc near        ; CODE XREF: __pei386_runtime_relocator+102↓p
.text:0040CA00                                         ; __pei386_runtime_relocator+164↓p ...
.text:0040CA00
.text:0040CA00 lpAddress       = dword ptr -5Ch
.text:0040CA00 lpBuffer        = dword ptr -58h
.text:0040CA00 dwLength        = dword ptr -54h
.text:0040CA00 lpflOldProtect  = dword ptr -50h
.text:0040CA00 var_3E          = byte ptr -3Eh
.text:0040CA00 var_3D          = byte ptr -3Dh
.text:0040CA00 flOldProtect    = dword ptr -3Ch
.text:0040CA00 Buffer          = _MEMORY_BASIC_INFORMATION ptr -38h
.text:0040CA00 var_10          = dword ptr -10h
.text:0040CA00 var_C           = dword ptr -0Ch
.text:0040CA00 var_8           = dword ptr -8
.text:0040CA00 var_4           = dword ptr -4
.text:0040CA00
.text:0040CA00 ; __unwind {
.text:0040CA00                 sub     esp, 5Ch
.text:0040CA03                 mov     [esp+5Ch+var_10], ebx
.text:0040CA07                 mov     ebx, eax
.text:0040CA09                 lea     eax, [esp+5Ch+Buffer]
.text:0040CA0D                 mov     [esp+5Ch+dwLength], 1Ch ; dwLength
.text:0040CA15                 mov     [esp+5Ch+lpBuffer], eax ; lpBuffer
.text:0040CA19                 mov     [esp+5Ch+lpAddress], ebx ; lpAddress
.text:0040CA1C                 mov     [esp+5Ch+var_C], esi
.text:0040CA20                 mov     esi, edx
.text:0040CA22                 mov     [esp+5Ch+var_8], edi
.text:0040CA26                 mov     edi, ecx
.text:0040CA28                 mov     [esp+5Ch+var_4], ebp
.text:0040CA2C                 call    _VirtualQuery@12 ; VirtualQuery(x,x,x)
.text:0040CA31                 sub     esp, 0Ch
.text:0040CA34                 test    eax, eax
.text:0040CA36                 jz      loc_40CAF6
.text:0040CA3C                 mov     eax, [esp+5Ch+Buffer.Protect]
.text:0040CA40                 cmp     eax, 4
.text:0040CA43                 jnz     short loc_40CA70
.text:0040CA45
.text:0040CA45 loc_40CA45:                             ; CODE XREF: ___write_memory_part_0+73↓j
.text:0040CA45                 mov     [esp+5Ch+dwLength], edi ; size_t
.text:0040CA49                 mov     [esp+5Ch+lpBuffer], esi ; void *
.text:0040CA4D                 mov     [esp+5Ch+lpAddress], ebx ; void *
.text:0040CA50                 call    _memcpy
.text:0040CA55
.text:0040CA55 loc_40CA55:                             ; CODE XREF: ___write_memory_part_0+C5↓j
.text:0040CA55                                         ; ___write_memory_part_0+CC↓j ...
.text:0040CA55                 mov     ebx, [esp+5Ch+var_10]
.text:0040CA59                 mov     esi, [esp+5Ch+var_C]
.text:0040CA5D                 mov     edi, [esp+5Ch+var_8]
.text:0040CA61                 mov     ebp, [esp+5Ch+var_4]
.text:0040CA65                 add     esp, 5Ch
.text:0040CA68                 retn
.text:0040CA68 ; ---------------------------------------------------------------------------
.text:0040CA69                 align 10h
.text:0040CA70
.text:0040CA70 loc_40CA70:                             ; CODE XREF: ___write_memory_part_0+43↑j
.text:0040CA70                 cmp     eax, 40h ; '@'
.text:0040CA73                 jz      short loc_40CA45
.text:0040CA75                 mov     eax, [esp+5Ch+Buffer.RegionSize]
.text:0040CA79                 lea     ebp, [esp+5Ch+flOldProtect]
.text:0040CA7D                 mov     [esp+5Ch+lpflOldProtect], ebp ; lpflOldProtect
.text:0040CA81                 mov     [esp+5Ch+dwLength], 40h ; '@' ; flNewProtect
.text:0040CA89                 mov     [esp+5Ch+lpBuffer], eax ; dwSize
.text:0040CA8D                 mov     eax, [esp+5Ch+Buffer.BaseAddress]
.text:0040CA91                 mov     [esp+5Ch+lpAddress], eax ; lpAddress
.text:0040CA94                 call    _VirtualProtect@16 ; VirtualProtect(x,x,x,x)
.text:0040CA99                 sub     esp, 10h
.text:0040CA9C                 mov     eax, [esp+5Ch+Buffer.Protect]
.text:0040CAA0                 mov     [esp+5Ch+dwLength], edi ; size_t
.text:0040CAA4                 mov     [esp+5Ch+lpBuffer], esi ; void *
.text:0040CAA8                 mov     [esp+5Ch+lpAddress], ebx ; void *
.text:0040CAAB                 cmp     eax, 40h ; '@'
.text:0040CAAE                 setnz   [esp+5Ch+var_3E]
.text:0040CAB3                 cmp     eax, 4
.text:0040CAB6                 setnz   [esp+5Ch+var_3D]
.text:0040CABB                 call    _memcpy
.text:0040CAC0                 cmp     [esp+5Ch+var_3D], 0
.text:0040CAC5                 jz      short loc_40CA55
.text:0040CAC7                 cmp     [esp+5Ch+var_3E], 0
.text:0040CACC                 jz      short loc_40CA55
.text:0040CACE                 mov     eax, [esp+5Ch+flOldProtect]
.text:0040CAD2                 mov     [esp+5Ch+lpflOldProtect], ebp ; lpflOldProtect
.text:0040CAD6                 mov     [esp+5Ch+dwLength], eax ; flNewProtect
.text:0040CADA                 mov     eax, [esp+5Ch+Buffer.RegionSize]
.text:0040CADE                 mov     [esp+5Ch+lpBuffer], eax ; dwSize
.text:0040CAE2                 mov     eax, [esp+5Ch+Buffer.BaseAddress]
.text:0040CAE6                 mov     [esp+5Ch+lpAddress], eax ; lpAddress
.text:0040CAE9                 call    _VirtualProtect@16 ; VirtualProtect(x,x,x,x)
.text:0040CAEE                 sub     esp, 10h
.text:0040CAF1                 jmp     loc_40CA55
.text:0040CAF6 ; ---------------------------------------------------------------------------
.text:0040CAF6
.text:0040CAF6 loc_40CAF6:                             ; CODE XREF: ___write_memory_part_0+36↑j
.text:0040CAF6                 mov     [esp+5Ch+dwLength], ebx
.text:0040CAFA                 mov     [esp+5Ch+lpBuffer], 1Ch ; char
.text:0040CB02                 mov     [esp+5Ch+lpAddress], offset aVirtualqueryFa ; "  VirtualQuery failed for %d bytes at a"...
.text:0040CB09                 call    ___report_error
.text:0040CB09 ; } // starts at 40CA00
.text:0040CB09 ___write_memory_part_0 endp
.text:0040CB09
.text:0040CB09 ; ---------------------------------------------------------------------------
.text:0040CB0E                 align 10h
.text:0040CB10
.text:0040CB10 ; =============== S U B R O U T I N E =======================================
.text:0040CB10
.text:0040CB10
.text:0040CB10                 public __pei386_runtime_relocator
.text:0040CB10 __pei386_runtime_relocator proc near    ; CODE XREF: ___mingw_CRTStartup+CF↑p
.text:0040CB10
.text:0040CB10 var_2C          = dword ptr -2Ch
.text:0040CB10 var_28          = byte ptr -28h
.text:0040CB10 var_14          = dword ptr -14h
.text:0040CB10 var_10          = dword ptr -10h
.text:0040CB10 var_C           = dword ptr -0Ch
.text:0040CB10 var_8           = dword ptr -8
.text:0040CB10 var_4           = dword ptr -4
.text:0040CB10
.text:0040CB10 ; __unwind {
.text:0040CB10                 mov     eax, ds:_was_init_31048
.text:0040CB15                 test    eax, eax
.text:0040CB17                 jz      short loc_40CB20
.text:0040CB19
.text:0040CB19 locret_40CB19:                          ; CODE XREF: __pei386_runtime_relocator+27↓j
.text:0040CB19                 retn
.text:0040CB19 ; ---------------------------------------------------------------------------
.text:0040CB1A                 align 10h
.text:0040CB20
.text:0040CB20 loc_40CB20:                             ; CODE XREF: __pei386_runtime_relocator+7↑j
.text:0040CB20                 mov     eax, offset __rt_psrelocs_end
.text:0040CB25                 sub     eax, offset __rt_psrelocs_end
.text:0040CB2A                 cmp     eax, 7
.text:0040CB2D                 mov     ds:_was_init_31048, 1
.text:0040CB37                 jle     short locret_40CB19
.text:0040CB39                 sub     esp, 2Ch
.text:0040CB3C                 cmp     eax, 0Bh
.text:0040CB3F                 mov     [esp+2Ch+var_C], ebx
.text:0040CB43                 mov     [esp+2Ch+var_8], esi
.text:0040CB47                 mov     [esp+2Ch+var_4], edi
.text:0040CB4B                 jle     loc_40CC30
.text:0040CB51                 mov     esi, ds:__rt_psrelocs_end
.text:0040CB57                 test    esi, esi
.text:0040CB59                 jnz     loc_40CBE4
.text:0040CB5F                 mov     ebx, ds:dword_4165C4
.text:0040CB65                 test    ebx, ebx
.text:0040CB67                 jnz     short loc_40CBE4
.text:0040CB69                 mov     ecx, ds:dword_4165C8
.text:0040CB6F                 mov     ebx, offset unk_4165CC
.text:0040CB74                 test    ecx, ecx
.text:0040CB76                 jz      loc_40CC35
.text:0040CB7C                 mov     ebx, offset __rt_psrelocs_end
.text:0040CB81
.text:0040CB81 loc_40CB81:                             ; CODE XREF: __pei386_runtime_relocator+130↓j
.text:0040CB81                 mov     eax, [ebx+8]
.text:0040CB84                 cmp     eax, 1
.text:0040CB87                 jnz     loc_40CCD4
.text:0040CB8D
.text:0040CB8D loc_40CB8D:                             ; CODE XREF: __pei386_runtime_relocator+169↓j
.text:0040CB8D                                         ; __pei386_runtime_relocator+19E↓j ...
.text:0040CB8D                 add     ebx, 0Ch
.text:0040CB90                 cmp     ebx, offset __rt_psrelocs_end
.text:0040CB96                 jnb     loc_40CC1F
.text:0040CB9C                 movzx   edx, byte ptr [ebx+8]
.text:0040CBA0                 mov     esi, [ebx+4]
.text:0040CBA3                 mov     ecx, [ebx]
.text:0040CBA5                 cmp     edx, 10h
.text:0040CBA8                 lea     eax, [esi+400000h]
.text:0040CBAE                 mov     edi, [ecx+400000h]
.text:0040CBB4                 jz      loc_40CC48
.text:0040CBBA                 cmp     edx, 20h ; ' '
.text:0040CBBD                 jz      loc_40CCB3
.text:0040CBC3                 cmp     edx, 8
.text:0040CBC6                 jz      loc_40CC80
.text:0040CBCC                 mov     dword ptr [esp+2Ch+var_28], edx ; char
.text:0040CBD0                 mov     [esp+2Ch+var_2C], offset aUnknownPseudoR ; "  Unknown pseudo relocation bit size %d"...
.text:0040CBD7                 mov     [esp+2Ch+var_14], 0
.text:0040CBDF                 call    ___report_error
.text:0040CBE4 ; ---------------------------------------------------------------------------
.text:0040CBE4
.text:0040CBE4 loc_40CBE4:                             ; CODE XREF: __pei386_runtime_relocator+49↑j
.text:0040CBE4                                         ; __pei386_runtime_relocator+57↑j
.text:0040CBE4                 mov     ebx, offset __rt_psrelocs_end
.text:0040CBE9
.text:0040CBE9 loc_40CBE9:                             ; CODE XREF: __pei386_runtime_relocator+129↓j
.text:0040CBE9                                         ; __pei386_runtime_relocator+136↓j
.text:0040CBE9                 cmp     ebx, offset __rt_psrelocs_end
.text:0040CBEF                 jnb     short loc_40CC1F
.text:0040CBF1
.text:0040CBF1 loc_40CBF1:                             ; CODE XREF: __pei386_runtime_relocator+10D↓j
.text:0040CBF1                 mov     edx, [ebx+4]
.text:0040CBF4                 mov     ecx, 4          ; size_t
.text:0040CBF9                 lea     eax, [edx+400000h]
.text:0040CBFF                 mov     edx, [edx+400000h]
.text:0040CC05                 add     edx, [ebx]
.text:0040CC07                 add     ebx, 8
.text:0040CC0A                 mov     [esp+2Ch+var_10], edx
.text:0040CC0E                 lea     edx, [esp+2Ch+var_10] ; void *
.text:0040CC12                 call    ___write_memory_part_0
.text:0040CC17                 cmp     ebx, offset __rt_psrelocs_end
.text:0040CC1D                 jb      short loc_40CBF1
.text:0040CC1F
.text:0040CC1F loc_40CC1F:                             ; CODE XREF: __pei386_runtime_relocator+86↑j
.text:0040CC1F                                         ; __pei386_runtime_relocator+DF↑j
.text:0040CC1F                 mov     ebx, [esp+2Ch+var_C]
.text:0040CC23                 mov     esi, [esp+2Ch+var_8]
.text:0040CC27                 mov     edi, [esp+2Ch+var_4]
.text:0040CC2B                 add     esp, 2Ch
.text:0040CC2E                 retn
.text:0040CC2E ; ---------------------------------------------------------------------------
.text:0040CC2F                 align 10h
.text:0040CC30
.text:0040CC30 loc_40CC30:                             ; CODE XREF: __pei386_runtime_relocator+3B↑j
.text:0040CC30                 mov     ebx, offset __rt_psrelocs_end
.text:0040CC35
.text:0040CC35 loc_40CC35:                             ; CODE XREF: __pei386_runtime_relocator+66↑j
.text:0040CC35                 mov     edx, [ebx]
.text:0040CC37                 test    edx, edx
.text:0040CC39                 jnz     short loc_40CBE9
.text:0040CC3B                 mov     eax, [ebx+4]
.text:0040CC3E                 test    eax, eax
.text:0040CC40                 jz      loc_40CB81
.text:0040CC46                 jmp     short loc_40CBE9
.text:0040CC48 ; ---------------------------------------------------------------------------
.text:0040CC48
.text:0040CC48 loc_40CC48:                             ; CODE XREF: __pei386_runtime_relocator+A4↑j
.text:0040CC48                 movzx   esi, word ptr [esi+400000h]
.text:0040CC4F                 test    si, si
.text:0040CC52                 movzx   edx, si
.text:0040CC55                 jns     short loc_40CC5D
.text:0040CC57                 or      edx, 0FFFF0000h
.text:0040CC5D
.text:0040CC5D loc_40CC5D:                             ; CODE XREF: __pei386_runtime_relocator+145↑j
.text:0040CC5D                 sub     edx, ecx
.text:0040CC5F                 mov     ecx, 2          ; size_t
.text:0040CC64                 sub     edx, 400000h
.text:0040CC6A                 add     edx, edi
.text:0040CC6C                 mov     [esp+2Ch+var_14], edx
.text:0040CC70                 lea     edx, [esp+2Ch+var_14] ; void *
.text:0040CC74                 call    ___write_memory_part_0
.text:0040CC79                 jmp     loc_40CB8D
.text:0040CC79 ; ---------------------------------------------------------------------------
.text:0040CC7E                 align 10h
.text:0040CC80
.text:0040CC80 loc_40CC80:                             ; CODE XREF: __pei386_runtime_relocator+B6↑j
.text:0040CC80                 movzx   edx, byte ptr [eax]
.text:0040CC83                 test    dl, dl
.text:0040CC85                 movzx   esi, dl
.text:0040CC88                 jns     short loc_40CC90
.text:0040CC8A                 or      esi, 0FFFFFF00h
.text:0040CC90
.text:0040CC90 loc_40CC90:                             ; CODE XREF: __pei386_runtime_relocator+178↑j
.text:0040CC90                 mov     edx, esi
.text:0040CC92                 sub     edx, 400000h
.text:0040CC98                 sub     edx, ecx
.text:0040CC9A                 mov     ecx, 1          ; size_t
.text:0040CC9F                 add     edx, edi
.text:0040CCA1                 mov     [esp+2Ch+var_14], edx
.text:0040CCA5                 lea     edx, [esp+2Ch+var_14] ; void *
.text:0040CCA9                 call    ___write_memory_part_0
.text:0040CCAE                 jmp     loc_40CB8D
.text:0040CCB3 ; ---------------------------------------------------------------------------
.text:0040CCB3
.text:0040CCB3 loc_40CCB3:                             ; CODE XREF: __pei386_runtime_relocator+AD↑j
.text:0040CCB3                 add     ecx, 400000h
.text:0040CCB9                 sub     edi, ecx
.text:0040CCBB                 mov     ecx, 4          ; size_t
.text:0040CCC0                 add     edi, [eax]
.text:0040CCC2                 lea     edx, [esp+2Ch+var_14] ; void *
.text:0040CCC6                 mov     [esp+2Ch+var_14], edi
.text:0040CCCA                 call    ___write_memory_part_0
.text:0040CCCF                 jmp     loc_40CB8D
.text:0040CCD4 ; ---------------------------------------------------------------------------
.text:0040CCD4
.text:0040CCD4 loc_40CCD4:                             ; CODE XREF: __pei386_runtime_relocator+77↑j
.text:0040CCD4                 mov     dword ptr [esp+2Ch+var_28], eax ; char
.text:0040CCD8                 mov     [esp+2Ch+var_2C], offset aUnknownPseudoR_0 ; "  Unknown pseudo relocation protocol ve"...
.text:0040CCDF                 call    ___report_error
.text:0040CCDF ; } // starts at 40CB10
.text:0040CCDF __pei386_runtime_relocator endp
.text:0040CCDF
.text:0040CCDF ; ---------------------------------------------------------------------------
.text:0040CCE4                 align 10h
.text:0040CCF0
.text:0040CCF0 ; =============== S U B R O U T I N E =======================================
.text:0040CCF0
.text:0040CCF0
.text:0040CCF0 ; void __cdecl __do_global_dtors()
.text:0040CCF0                 public ___do_global_dtors
.text:0040CCF0 ___do_global_dtors proc near            ; DATA XREF: ___do_global_ctors:loc_40CD42↓o
.text:0040CCF0 ; __unwind {
.text:0040CCF0                 mov     eax, _p_1761
.text:0040CCF5                 mov     eax, [eax]
.text:0040CCF7                 test    eax, eax
.text:0040CCF9                 jz      short locret_40CD1A
.text:0040CCFB                 sub     esp, 0Ch
.text:0040CCFE                 xchg    ax, ax
.text:0040CD00
.text:0040CD00 loc_40CD00:                             ; CODE XREF: ___do_global_dtors+25↓j
.text:0040CD00                 call    eax
.text:0040CD02                 mov     eax, _p_1761
.text:0040CD07                 lea     edx, [eax+4]
.text:0040CD0A                 mov     eax, [eax+4]
.text:0040CD0D                 mov     _p_1761, edx
.text:0040CD13                 test    eax, eax
.text:0040CD15                 jnz     short loc_40CD00
.text:0040CD17                 add     esp, 0Ch
.text:0040CD1A
.text:0040CD1A locret_40CD1A:                          ; CODE XREF: ___do_global_dtors+9↑j
.text:0040CD1A                 rep retn
.text:0040CD1A ; } // starts at 40CCF0
.text:0040CD1A ___do_global_dtors endp
.text:0040CD1A
.text:0040CD1A ; ---------------------------------------------------------------------------
.text:0040CD1C                 align 10h
.text:0040CD20
.text:0040CD20 ; =============== S U B R O U T I N E =======================================
.text:0040CD20
.text:0040CD20
.text:0040CD20                 public ___do_global_ctors
.text:0040CD20 ___do_global_ctors proc near            ; CODE XREF: ___main+1A↓j
.text:0040CD20
.text:0040CD20 var_1C          = dword ptr -1Ch
.text:0040CD20
.text:0040CD20 ; __unwind {
.text:0040CD20                 push    ebx
.text:0040CD21                 sub     esp, 18h
.text:0040CD24                 mov     ebx, ds:___CTOR_LIST__
.text:0040CD2A                 cmp     ebx, 0FFFFFFFFh
.text:0040CD2D                 jz      short loc_40CD53
.text:0040CD2F
.text:0040CD2F loc_40CD2F:                             ; CODE XREF: ___do_global_ctors+47↓j
.text:0040CD2F                 test    ebx, ebx
.text:0040CD31                 jz      short loc_40CD42
.text:0040CD33
.text:0040CD33 loc_40CD33:                             ; CODE XREF: ___do_global_ctors+20↓j
.text:0040CD33                 call    ds:___CTOR_LIST__[ebx*4]
.text:0040CD3A                 sub     ebx, 1
.text:0040CD3D                 lea     esi, [esi+0]
.text:0040CD40                 jnz     short loc_40CD33
.text:0040CD42
.text:0040CD42 loc_40CD42:                             ; CODE XREF: ___do_global_ctors+11↑j
.text:0040CD42                 mov     [esp+1Ch+var_1C], offset ___do_global_dtors ; void (__cdecl *)()
.text:0040CD49                 call    _atexit
.text:0040CD4E                 add     esp, 18h
.text:0040CD51                 pop     ebx
.text:0040CD52                 retn
.text:0040CD53 ; ---------------------------------------------------------------------------
.text:0040CD53
.text:0040CD53 loc_40CD53:                             ; CODE XREF: ___do_global_ctors+D↑j
.text:0040CD53                 xor     ebx, ebx
.text:0040CD55                 jmp     short loc_40CD59
.text:0040CD57 ; ---------------------------------------------------------------------------
.text:0040CD57
.text:0040CD57 loc_40CD57:                             ; CODE XREF: ___do_global_ctors+45↓j
.text:0040CD57                 mov     ebx, eax
.text:0040CD59
.text:0040CD59 loc_40CD59:                             ; CODE XREF: ___do_global_ctors+35↑j
.text:0040CD59                 lea     eax, [ebx+1]
.text:0040CD5C                 mov     edx, ds:___CTOR_LIST__[eax*4]
.text:0040CD63                 test    edx, edx
.text:0040CD65                 jnz     short loc_40CD57
.text:0040CD67                 jmp     short loc_40CD2F
.text:0040CD67 ; } // starts at 40CD20
.text:0040CD67 ___do_global_ctors endp
.text:0040CD67
.text:0040CD67 ; ---------------------------------------------------------------------------
.text:0040CD69                 align 10h
.text:0040CD70
.text:0040CD70 ; =============== S U B R O U T I N E =======================================
.text:0040CD70
.text:0040CD70
.text:0040CD70                 public ___main
.text:0040CD70 ___main         proc near               ; CODE XREF: ___mingw_CRTStartup+D7↑p
.text:0040CD70                                         ; _main+46↑p
.text:0040CD70 ; __unwind {
.text:0040CD70                 mov     ecx, ds:_initialized
.text:0040CD76                 test    ecx, ecx
.text:0040CD78                 jz      short loc_40CD80
.text:0040CD7A                 rep retn
.text:0040CD7A ; ---------------------------------------------------------------------------
.text:0040CD7C                 align 10h
.text:0040CD80
.text:0040CD80 loc_40CD80:                             ; CODE XREF: ___main+8↑j
.text:0040CD80                 mov     ds:_initialized, 1
.text:0040CD8A                 jmp     short ___do_global_ctors
.text:0040CD8A ; } // starts at 40CD70
.text:0040CD8A ___main         endp
.text:0040CD8A
.text:0040CD8A ; ---------------------------------------------------------------------------
.text:0040CD8C                 align 10h
.text:0040CD90
.text:0040CD90 ; =============== S U B R O U T I N E =======================================
.text:0040CD90
.text:0040CD90
.text:0040CD90 ___mingwthr_run_key_dtors_part_0 proc near
.text:0040CD90                                         ; CODE XREF: ___mingw_TLScallback+79↓p
.text:0040CD90                                         ; ___mingw_TLScallback:loc_40CFA1↓p
.text:0040CD90
.text:0040CD90 lpCriticalSection= dword ptr -1Ch
.text:0040CD90
.text:0040CD90 ; __unwind {
.text:0040CD90                 push    esi
.text:0040CD91                 push    ebx
.text:0040CD92                 sub     esp, 14h
.text:0040CD95                 mov     [esp+1Ch+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
.text:0040CD9C                 call    _EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:0040CDA1                 mov     ebx, ds:_key_dtor_list
.text:0040CDA7                 sub     esp, 4
.text:0040CDAA                 test    ebx, ebx
.text:0040CDAC                 jz      short loc_40CDDB
.text:0040CDAE                 xchg    ax, ax
.text:0040CDB0
.text:0040CDB0 loc_40CDB0:                             ; CODE XREF: ___mingwthr_run_key_dtors_part_0+49↓j
.text:0040CDB0                 mov     eax, [ebx]
.text:0040CDB2                 mov     [esp+1Ch+lpCriticalSection], eax ; dwTlsIndex
.text:0040CDB5                 call    _TlsGetValue@4  ; TlsGetValue(x)
.text:0040CDBA                 sub     esp, 4
.text:0040CDBD                 mov     esi, eax
.text:0040CDBF                 call    _GetLastError@0 ; GetLastError()
.text:0040CDC4                 test    eax, eax
.text:0040CDC6                 jnz     short loc_40CDD4
.text:0040CDC8                 test    esi, esi
.text:0040CDCA                 jz      short loc_40CDD4
.text:0040CDCC                 mov     eax, [ebx+4]
.text:0040CDCF                 mov     [esp+1Ch+lpCriticalSection], esi
.text:0040CDD2                 call    eax
.text:0040CDD4
.text:0040CDD4 loc_40CDD4:                             ; CODE XREF: ___mingwthr_run_key_dtors_part_0+36↑j
.text:0040CDD4                                         ; ___mingwthr_run_key_dtors_part_0+3A↑j
.text:0040CDD4                 mov     ebx, [ebx+8]
.text:0040CDD7                 test    ebx, ebx
.text:0040CDD9                 jnz     short loc_40CDB0
.text:0040CDDB
.text:0040CDDB loc_40CDDB:                             ; CODE XREF: ___mingwthr_run_key_dtors_part_0+1C↑j
.text:0040CDDB                 mov     [esp+1Ch+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
.text:0040CDE2                 call    _LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:0040CDE7                 sub     esp, 4
.text:0040CDEA                 add     esp, 14h
.text:0040CDED                 pop     ebx
.text:0040CDEE                 pop     esi
.text:0040CDEF                 retn
.text:0040CDEF ; } // starts at 40CD90
.text:0040CDEF ___mingwthr_run_key_dtors_part_0 endp
.text:0040CDEF
.text:0040CDF0
.text:0040CDF0 ; =============== S U B R O U T I N E =======================================
.text:0040CDF0
.text:0040CDF0
.text:0040CDF0                 public ____w64_mingwthr_add_key_dtor
.text:0040CDF0 ____w64_mingwthr_add_key_dtor proc near ; CODE XREF: ___mingwthr_key_dtor+8↓j
.text:0040CDF0
.text:0040CDF0 var_1C          = dword ptr -1Ch
.text:0040CDF0 var_18          = dword ptr -18h
.text:0040CDF0 var_8           = dword ptr -8
.text:0040CDF0 var_4           = dword ptr -4
.text:0040CDF0 arg_0           = dword ptr  4
.text:0040CDF0 arg_4           = dword ptr  8
.text:0040CDF0
.text:0040CDF0 ; __unwind {
.text:0040CDF0                 sub     esp, 1Ch
.text:0040CDF3                 mov     eax, ds:___mingwthr_cs_init
.text:0040CDF8                 mov     [esp+1Ch+var_4], esi
.text:0040CDFC                 xor     esi, esi
.text:0040CDFE                 mov     [esp+1Ch+var_8], ebx
.text:0040CE02                 test    eax, eax
.text:0040CE04                 jnz     short loc_40CE14
.text:0040CE06
.text:0040CE06 loc_40CE06:                             ; CODE XREF: ____w64_mingwthr_add_key_dtor+8A↓j
.text:0040CE06                 mov     eax, esi
.text:0040CE08                 mov     ebx, [esp+1Ch+var_8]
.text:0040CE0C                 mov     esi, [esp+1Ch+var_4]
.text:0040CE10                 add     esp, 1Ch
.text:0040CE13                 retn
.text:0040CE14 ; ---------------------------------------------------------------------------
.text:0040CE14
.text:0040CE14 loc_40CE14:                             ; CODE XREF: ____w64_mingwthr_add_key_dtor+14↑j
.text:0040CE14                 mov     [esp+1Ch+var_18], 0Ch ; size_t
.text:0040CE1C                 mov     [esp+1Ch+var_1C], 1 ; size_t
.text:0040CE23                 call    _calloc
.text:0040CE28                 test    eax, eax
.text:0040CE2A                 mov     ebx, eax
.text:0040CE2C                 jz      short loc_40CE75
.text:0040CE2E                 mov     eax, [esp+1Ch+arg_0]
.text:0040CE32                 mov     [esp+1Ch+var_1C], offset ___mingwthr_cs ; lpCriticalSection
.text:0040CE39                 mov     [ebx], eax
.text:0040CE3B                 mov     eax, [esp+1Ch+arg_4]
.text:0040CE3F                 mov     [ebx+4], eax
.text:0040CE42                 call    _EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:0040CE47                 mov     eax, ds:_key_dtor_list
.text:0040CE4C                 mov     ds:_key_dtor_list, ebx
.text:0040CE52                 mov     [ebx+8], eax
.text:0040CE55                 sub     esp, 4
.text:0040CE58                 mov     [esp+1Ch+var_1C], offset ___mingwthr_cs ; lpCriticalSection
.text:0040CE5F                 call    _LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:0040CE64                 mov     eax, esi
.text:0040CE66                 sub     esp, 4
.text:0040CE69                 mov     ebx, [esp+1Ch+var_8]
.text:0040CE6D                 mov     esi, [esp+1Ch+var_4]
.text:0040CE71                 add     esp, 1Ch
.text:0040CE74                 retn
.text:0040CE75 ; ---------------------------------------------------------------------------
.text:0040CE75
.text:0040CE75 loc_40CE75:                             ; CODE XREF: ____w64_mingwthr_add_key_dtor+3C↑j
.text:0040CE75                 mov     esi, 0FFFFFFFFh
.text:0040CE7A                 jmp     short loc_40CE06
.text:0040CE7A ; } // starts at 40CDF0
.text:0040CE7A ____w64_mingwthr_add_key_dtor endp
.text:0040CE7A
.text:0040CE7A ; ---------------------------------------------------------------------------
.text:0040CE7C                 align 10h
.text:0040CE80
.text:0040CE80 ; =============== S U B R O U T I N E =======================================
.text:0040CE80
.text:0040CE80
.text:0040CE80                 public ____w64_mingwthr_remove_key_dtor
.text:0040CE80 ____w64_mingwthr_remove_key_dtor proc near
.text:0040CE80                                         ; CODE XREF: ___mingwthr_remove_key_dtor↓j
.text:0040CE80
.text:0040CE80 lpCriticalSection= dword ptr -1Ch
.text:0040CE80 arg_0           = dword ptr  4
.text:0040CE80
.text:0040CE80 ; __unwind {
.text:0040CE80                 push    ebx
.text:0040CE81                 sub     esp, 18h
.text:0040CE84                 mov     eax, ds:___mingwthr_cs_init
.text:0040CE89                 mov     ebx, [esp+1Ch+arg_0]
.text:0040CE8D                 test    eax, eax
.text:0040CE8F                 jnz     short loc_40CE98
.text:0040CE91                 add     esp, 18h
.text:0040CE94                 xor     eax, eax
.text:0040CE96                 pop     ebx
.text:0040CE97                 retn
.text:0040CE98 ; ---------------------------------------------------------------------------
.text:0040CE98
.text:0040CE98 loc_40CE98:                             ; CODE XREF: ____w64_mingwthr_remove_key_dtor+F↑j
.text:0040CE98                 mov     [esp+1Ch+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
.text:0040CE9F                 call    _EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:0040CEA4                 mov     edx, ds:_key_dtor_list
.text:0040CEAA                 sub     esp, 4
.text:0040CEAD                 test    edx, edx
.text:0040CEAF                 jz      short loc_40CECF
.text:0040CEB1                 mov     eax, [edx]
.text:0040CEB3                 cmp     eax, ebx
.text:0040CEB5                 jnz     short loc_40CEC8
.text:0040CEB7                 jmp     short loc_40CF04
.text:0040CEB7 ; ---------------------------------------------------------------------------
.text:0040CEB9                 align 10h
.text:0040CEC0
.text:0040CEC0 loc_40CEC0:                             ; CODE XREF: ____w64_mingwthr_remove_key_dtor+4D↓j
.text:0040CEC0                 mov     ecx, [eax]
.text:0040CEC2                 cmp     ecx, ebx
.text:0040CEC4                 jz      short loc_40CEE5
.text:0040CEC6                 mov     edx, eax
.text:0040CEC8
.text:0040CEC8 loc_40CEC8:                             ; CODE XREF: ____w64_mingwthr_remove_key_dtor+35↑j
.text:0040CEC8                 mov     eax, [edx+8]
.text:0040CECB                 test    eax, eax
.text:0040CECD                 jnz     short loc_40CEC0
.text:0040CECF
.text:0040CECF loc_40CECF:                             ; CODE XREF: ____w64_mingwthr_remove_key_dtor+2F↑j
.text:0040CECF                 mov     [esp+1Ch+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
.text:0040CED6                 call    _LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:0040CEDB                 sub     esp, 4
.text:0040CEDE
.text:0040CEDE loc_40CEDE:                             ; CODE XREF: ____w64_mingwthr_remove_key_dtor+82↓j
.text:0040CEDE                 add     esp, 18h
.text:0040CEE1                 xor     eax, eax
.text:0040CEE3                 pop     ebx
.text:0040CEE4                 retn
.text:0040CEE5 ; ---------------------------------------------------------------------------
.text:0040CEE5
.text:0040CEE5 loc_40CEE5:                             ; CODE XREF: ____w64_mingwthr_remove_key_dtor+44↑j
.text:0040CEE5                 mov     ecx, [eax+8]
.text:0040CEE8                 mov     [edx+8], ecx
.text:0040CEEB
.text:0040CEEB loc_40CEEB:                             ; CODE XREF: ____w64_mingwthr_remove_key_dtor+8E↓j
.text:0040CEEB                 mov     [esp+1Ch+lpCriticalSection], eax ; void *
.text:0040CEEE                 call    _free
.text:0040CEF3                 mov     [esp+1Ch+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
.text:0040CEFA                 call    _LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:0040CEFF                 sub     esp, 4
.text:0040CF02                 jmp     short loc_40CEDE
.text:0040CF04 ; ---------------------------------------------------------------------------
.text:0040CF04
.text:0040CF04 loc_40CF04:                             ; CODE XREF: ____w64_mingwthr_remove_key_dtor+37↑j
.text:0040CF04                 mov     eax, [edx+8]
.text:0040CF07                 mov     ds:_key_dtor_list, eax
.text:0040CF0C                 mov     eax, edx
.text:0040CF0E                 jmp     short loc_40CEEB
.text:0040CF0E ; } // starts at 40CE80
.text:0040CF0E ____w64_mingwthr_remove_key_dtor endp
.text:0040CF0E
.text:0040CF10
.text:0040CF10 ; =============== S U B R O U T I N E =======================================
.text:0040CF10
.text:0040CF10
.text:0040CF10                 public ___mingw_TLScallback
.text:0040CF10 ___mingw_TLScallback proc near          ; CODE XREF: __dyn_tls_dtor(x,x,x)+33↑p
.text:0040CF10                                         ; __dyn_tls_init(x,x,x)+7F↑p
.text:0040CF10
.text:0040CF10 lpCriticalSection= dword ptr -1Ch
.text:0040CF10 arg_4           = dword ptr  8
.text:0040CF10
.text:0040CF10 ; __unwind {
.text:0040CF10                 sub     esp, 1Ch
.text:0040CF13                 mov     eax, [esp+1Ch+arg_4]
.text:0040CF17                 cmp     eax, 1
.text:0040CF1A                 jz      short loc_40CF60
.text:0040CF1C                 jb      short loc_40CF30
.text:0040CF1E                 cmp     eax, 3
.text:0040CF21                 jz      short loc_40CF80
.text:0040CF23
.text:0040CF23 loc_40CF23:                             ; CODE XREF: ___mingw_TLScallback+31↓j
.text:0040CF23                                         ; ___mingw_TLScallback+4C↓j ...
.text:0040CF23                 mov     eax, 1
.text:0040CF28                 add     esp, 1Ch
.text:0040CF2B                 retn
.text:0040CF2B ; ---------------------------------------------------------------------------
.text:0040CF2C                 align 10h
.text:0040CF30
.text:0040CF30 loc_40CF30:                             ; CODE XREF: ___mingw_TLScallback+C↑j
.text:0040CF30                 mov     eax, ds:___mingwthr_cs_init
.text:0040CF35                 test    eax, eax
.text:0040CF37                 jnz     short loc_40CFA1
.text:0040CF39
.text:0040CF39 loc_40CF39:                             ; CODE XREF: ___mingw_TLScallback+96↓j
.text:0040CF39                 mov     eax, ds:___mingwthr_cs_init
.text:0040CF3E                 cmp     eax, 1
.text:0040CF41                 jnz     short loc_40CF23
.text:0040CF43                 mov     [esp+1Ch+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
.text:0040CF4A                 mov     ds:___mingwthr_cs_init, 0
.text:0040CF54                 call    _DeleteCriticalSection@4 ; DeleteCriticalSection(x)
.text:0040CF59                 sub     esp, 4
.text:0040CF5C                 jmp     short loc_40CF23
.text:0040CF5C ; ---------------------------------------------------------------------------
.text:0040CF5E                 align 10h
.text:0040CF60
.text:0040CF60 loc_40CF60:                             ; CODE XREF: ___mingw_TLScallback+A↑j
.text:0040CF60                 mov     eax, ds:___mingwthr_cs_init
.text:0040CF65                 test    eax, eax
.text:0040CF67                 jz      short loc_40CF90
.text:0040CF69
.text:0040CF69 loc_40CF69:                             ; CODE XREF: ___mingw_TLScallback+8F↓j
.text:0040CF69                 mov     ds:___mingwthr_cs_init, 1
.text:0040CF73                 mov     eax, 1
.text:0040CF78                 add     esp, 1Ch
.text:0040CF7B                 retn
.text:0040CF7B ; ---------------------------------------------------------------------------
.text:0040CF7C                 align 10h
.text:0040CF80
.text:0040CF80 loc_40CF80:                             ; CODE XREF: ___mingw_TLScallback+11↑j
.text:0040CF80                 mov     eax, ds:___mingwthr_cs_init
.text:0040CF85                 test    eax, eax
.text:0040CF87                 jz      short loc_40CF23
.text:0040CF89                 call    ___mingwthr_run_key_dtors_part_0
.text:0040CF8E                 jmp     short loc_40CF23
.text:0040CF90 ; ---------------------------------------------------------------------------
.text:0040CF90
.text:0040CF90 loc_40CF90:                             ; CODE XREF: ___mingw_TLScallback+57↑j
.text:0040CF90                 mov     [esp+1Ch+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
.text:0040CF97                 call    _InitializeCriticalSection@4 ; InitializeCriticalSection(x)
.text:0040CF9C                 sub     esp, 4
.text:0040CF9F                 jmp     short loc_40CF69
.text:0040CFA1 ; ---------------------------------------------------------------------------
.text:0040CFA1
.text:0040CFA1 loc_40CFA1:                             ; CODE XREF: ___mingw_TLScallback+27↑j
.text:0040CFA1                 call    ___mingwthr_run_key_dtors_part_0
.text:0040CFA6                 jmp     short loc_40CF39
.text:0040CFA6 ; } // starts at 40CF10
.text:0040CFA6 ___mingw_TLScallback endp
.text:0040CFA6
.text:0040CFA6 ; ---------------------------------------------------------------------------
.text:0040CFA8                 align 10h
.text:0040CFB0
.text:0040CFB0 ; =============== S U B R O U T I N E =======================================
.text:0040CFB0
.text:0040CFB0
.text:0040CFB0 ; void __cdecl __shmem_init_use_fc_key(void *mem)
.text:0040CFB0                 public ___shmem_init_use_fc_key
.text:0040CFB0 ___shmem_init_use_fc_key proc near      ; DATA XREF: ___shmem_grabber_use_fc_key+3↓o
.text:0040CFB0
.text:0040CFB0 mem             = dword ptr  4
.text:0040CFB0
.text:0040CFB0                 mov     eax, [esp+mem]
.text:0040CFB4                 mov     dword ptr [eax], 0FFFFFFFFh
.text:0040CFBA                 retn
.text:0040CFBA ___shmem_init_use_fc_key endp
.text:0040CFBA
.text:0040CFBA ; ---------------------------------------------------------------------------
.text:0040CFBB                 align 4
.text:0040CFBC
.text:0040CFBC ; =============== S U B R O U T I N E =======================================
.text:0040CFBC
.text:0040CFBC
.text:0040CFBC ; void __cdecl __shmem_init_sjlj_once(void *mem)
.text:0040CFBC                 public ___shmem_init_sjlj_once
.text:0040CFBC ___shmem_init_sjlj_once proc near       ; DATA XREF: ___shmem_grabber_sjlj_once+3↓o
.text:0040CFBC
.text:0040CFBC mem             = dword ptr  4
.text:0040CFBC
.text:0040CFBC                 mov     eax, [esp+mem]
.text:0040CFC0                 mov     dword ptr [eax], 0
.text:0040CFC6                 mov     dword ptr [eax+4], 0FFFFFFFFh
.text:0040CFCD                 retn
.text:0040CFCD ___shmem_init_sjlj_once endp
.text:0040CFCD
.text:0040CFCD ; ---------------------------------------------------------------------------
.text:0040CFCE                 align 10h
.text:0040CFD0
.text:0040CFD0 ; =============== S U B R O U T I N E =======================================
.text:0040CFD0
.text:0040CFD0 ; Attributes: static
.text:0040CFD0
.text:0040CFD0 ; _Unwind_Reason_Code __usercall _Unwind_RaiseException_Phase2@<eax>(_Unwind_Exception *exc@<eax>, _Unwind_Context *context@<edx>)
.text:0040CFD0 __Unwind_RaiseException_Phase2 proc near
.text:0040CFD0                                         ; CODE XREF: __Unwind_SjLj_RaiseException+EA↓p
.text:0040CFD0                                         ; __Unwind_SjLj_Resume+6D↓p
.text:0040CFD0
.text:0040CFD0 var_2C          = dword ptr -2Ch
.text:0040CFD0 var_28          = dword ptr -28h
.text:0040CFD0 var_24          = dword ptr -24h
.text:0040CFD0 var_20          = dword ptr -20h
.text:0040CFD0 var_1C          = dword ptr -1Ch
.text:0040CFD0 var_18          = dword ptr -18h
.text:0040CFD0
.text:0040CFD0 exc = eax                               ; _Unwind_Exception *
.text:0040CFD0 context = edx                           ; _Unwind_Context *
.text:0040CFD0                 push    edi
.text:0040CFD1                 push    esi
.text:0040CFD2                 push    ebx
.text:0040CFD3                 sub     esp, 20h
.text:0040CFD6                 mov     edi, exc
.text:0040CFD8                 mov     esi, context
.text:0040CFDA                 mov     ecx, [context]
.text:0040CFDC                 jmp     short loc_40D033
.text:0040CFDC ; ---------------------------------------------------------------------------
.text:0040CFDE exc = edi                               ; _Unwind_Exception *
.text:0040CFDE context = esi                           ; _Unwind_Context *
.text:0040CFDE                 align 10h
.text:0040CFE0
.text:0040CFE0 loc_40CFE0:                             ; CODE XREF: __Unwind_RaiseException_Phase2+65↓j
.text:0040CFE0                 mov     eax, [ecx+18h]
.text:0040CFE3 fs_0 = eax                              ; _Unwind_FrameState
.text:0040CFE3                 xor     edx, edx
.text:0040CFE5 code = edx                              ; _Unwind_Reason_Code
.text:0040CFE5                 xor     ebx, ebx
.text:0040CFE7                 cmp     ecx, [exc+10h]
.text:0040CFEA                 setz    bl
.text:0040CFED                 shl     ebx, 2
.text:0040CFF0 match_handler = ebx                     ; int
.text:0040CFF0                 test    code, code
.text:0040CFF2                 jnz     short loc_40D050
.text:0040CFF4
.text:0040CFF4 loc_40CFF4:                             ; CODE XREF: __Unwind_RaiseException_Phase2+7B↓j
.text:0040CFF4                 test    fs_0, fs_0
.text:0040CFF6                 jz      short loc_40D029
.text:0040CFF8                 mov     [esp+2Ch+var_18], context
.text:0040CFFC                 mov     [esp+2Ch+var_1C], exc
.text:0040D000                 mov     code, [exc]
.text:0040D002                 mov     ecx, [exc+4]
.text:0040D005                 mov     [esp+2Ch+var_24], edx
.text:0040D009                 mov     [esp+2Ch+var_20], ecx
.text:0040D00D                 mov     edx, match_handler
.text:0040D00F                 or      edx, 2
.text:0040D012                 mov     [esp+2Ch+var_28], edx
.text:0040D016                 mov     [esp+2Ch+var_2C], 1
.text:0040D01D                 call    fs_0
.text:0040D01F code = eax                              ; _Unwind_Reason_Code
.text:0040D01F                 cmp     code, 7
.text:0040D022                 jz      short loc_40D055
.text:0040D024                 cmp     code, 8
.text:0040D027                 jnz     short loc_40D050
.text:0040D029
.text:0040D029 loc_40D029:                             ; CODE XREF: __Unwind_RaiseException_Phase2+26↑j
.text:0040D029                 test    match_handler, match_handler
.text:0040D02B                 jnz     short loc_40D05C
.text:0040D02D                 mov     eax, [context]
.text:0040D02F                 mov     ecx, [eax]
.text:0040D031                 mov     [context], ecx
.text:0040D033
.text:0040D033 loc_40D033:                             ; CODE XREF: __Unwind_RaiseException_Phase2+C↑j
.text:0040D033                 test    ecx, ecx
.text:0040D035                 jnz     short loc_40CFE0
.text:0040D037                 xor     eax, eax
.text:0040D039                 mov     edx, 5
.text:0040D03E code = edx                              ; _Unwind_Reason_Code
.text:0040D03E fs_0 = eax                              ; _Unwind_FrameState
.text:0040D03E                 xor     ebx, ebx
.text:0040D040                 cmp     ecx, [exc+10h]
.text:0040D043                 setz    bl
.text:0040D046                 shl     ebx, 2
.text:0040D049 match_handler = ebx                     ; int
.text:0040D049                 test    code, code
.text:0040D04B                 jz      short loc_40CFF4
.text:0040D04D                 lea     context, [context+0]
.text:0040D050
.text:0040D050 loc_40D050:                             ; CODE XREF: __Unwind_RaiseException_Phase2+22↑j
.text:0040D050                                         ; __Unwind_RaiseException_Phase2+57↑j
.text:0040D050                 mov     eax, 2
.text:0040D055
.text:0040D055 loc_40D055:                             ; CODE XREF: __Unwind_RaiseException_Phase2+52↑j
.text:0040D055                 add     esp, 20h
.text:0040D058                 pop     match_handler
.text:0040D059                 pop     context
.text:0040D05A                 pop     exc
.text:0040D05B                 retn
.text:0040D05C ; ---------------------------------------------------------------------------
.text:0040D05C
.text:0040D05C loc_40D05C:                             ; CODE XREF: __Unwind_RaiseException_Phase2+5B↑j
.text:0040D05C exc = edi                               ; _Unwind_Exception *
.text:0040D05C context = esi                           ; _Unwind_Context *
.text:0040D05C match_handler = ebx                     ; int
.text:0040D05C                 call    _abort
.text:0040D05C __Unwind_RaiseException_Phase2 endp
.text:0040D05C
.text:0040D05C ; ---------------------------------------------------------------------------
.text:0040D061                 align 4
.text:0040D064
.text:0040D064 ; =============== S U B R O U T I N E =======================================
.text:0040D064
.text:0040D064
.text:0040D064 ; SjLj_Function_Context **__shmem_grabber_fc_static()
.text:0040D064                 public ___shmem_grabber_fc_static
.text:0040D064 ___shmem_grabber_fc_static proc near    ; CODE XREF: _uw_install_context_isra_3:loc_40D2EC↓p
.text:0040D064                                         ; __Unwind_SjLj_Register:loc_40D3EC↓p ...
.text:0040D064
.text:0040D064 name            = dword ptr -1Ch
.text:0040D064 size            = dword ptr -18h
.text:0040D064 initfunc        = dword ptr -14h
.text:0040D064
.text:0040D064                 sub     esp, 1Ch
.text:0040D067                 mov     [esp+1Ch+initfunc], 0 ; initfunc
.text:0040D06F                 mov     [esp+1Ch+size], 4 ; size
.text:0040D077                 mov     [esp+1Ch+name], offset aFcStatic ; "fc_static"
.text:0040D07E                 call    ___shmem_grab
.text:0040D083                 add     esp, 1Ch
.text:0040D086                 retn
.text:0040D086 ___shmem_grabber_fc_static endp
.text:0040D086
.text:0040D086 ; ---------------------------------------------------------------------------
.text:0040D087                 align 4
.text:0040D088
.text:0040D088 ; =============== S U B R O U T I N E =======================================
.text:0040D088
.text:0040D088
.text:0040D088 ; __gthread_key_t *__shmem_grabber_fc_key()
.text:0040D088                 public ___shmem_grabber_fc_key
.text:0040D088 ___shmem_grabber_fc_key proc near       ; CODE XREF: __Unwind_SjLj_SetContext_part_2:loc_40D0E4↓p
.text:0040D088                                         ; _fc_key_init:loc_40D174↓p ...
.text:0040D088
.text:0040D088 name            = dword ptr -1Ch
.text:0040D088 size            = dword ptr -18h
.text:0040D088 initfunc        = dword ptr -14h
.text:0040D088
.text:0040D088                 sub     esp, 1Ch
.text:0040D08B                 mov     [esp+1Ch+initfunc], 0 ; initfunc
.text:0040D093                 mov     [esp+1Ch+size], 4 ; size
.text:0040D09B                 mov     [esp+1Ch+name], offset aFcKey ; "fc_key"
.text:0040D0A2                 call    ___shmem_grab
.text:0040D0A7                 add     esp, 1Ch
.text:0040D0AA                 retn
.text:0040D0AA ___shmem_grabber_fc_key endp
.text:0040D0AA
.text:0040D0AA ; ---------------------------------------------------------------------------
.text:0040D0AB                 align 4
.text:0040D0AC
.text:0040D0AC ; =============== S U B R O U T I N E =======================================
.text:0040D0AC
.text:0040D0AC ; Attributes: static
.text:0040D0AC
.text:0040D0AC ; void __usercall _Unwind_SjLj_SetContext_part_2(SjLj_Function_Context *fc@<eax>)
.text:0040D0AC __Unwind_SjLj_SetContext_part_2 proc near
.text:0040D0AC                                         ; CODE XREF: _uw_install_context_isra_3+29↓p
.text:0040D0AC                                         ; __Unwind_SjLj_Unregister+2E↓j
.text:0040D0AC
.text:0040D0AC dwTlsIndex      = dword ptr -1Ch
.text:0040D0AC lpTlsValue      = dword ptr -18h
.text:0040D0AC
.text:0040D0AC fc = eax                                ; SjLj_Function_Context *
.text:0040D0AC                 push    ebx
.text:0040D0AD                 sub     esp, 18h
.text:0040D0B0                 mov     ebx, fc
.text:0040D0B2                 mov     fc, ds:___shmem_ptr_fc_key
.text:0040D0B7 fc = ebx                                ; SjLj_Function_Context *
.text:0040D0B7                 test    eax, eax
.text:0040D0B9                 jz      short loc_40D0E4
.text:0040D0BB
.text:0040D0BB loc_40D0BB:                             ; CODE XREF: __Unwind_SjLj_SetContext_part_2+42↓j
.text:0040D0BB                 mov     [esp+1Ch+lpTlsValue], fc ; lpTlsValue
.text:0040D0BF                 mov     eax, [eax]
.text:0040D0C1                 mov     [esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
.text:0040D0C4                 call    _TlsSetValue@8  ; TlsSetValue(x,x)
.text:0040D0C9                 sub     esp, 8
.text:0040D0CC                 test    eax, eax
.text:0040D0CE                 jz      short loc_40D0D8
.text:0040D0D0                 add     esp, 18h
.text:0040D0D3                 pop     fc
.text:0040D0D4                 retn
.text:0040D0D4 ; ---------------------------------------------------------------------------
.text:0040D0D5 fc = ebx                                ; SjLj_Function_Context *
.text:0040D0D5                 align 4
.text:0040D0D8
.text:0040D0D8 loc_40D0D8:                             ; CODE XREF: __Unwind_SjLj_SetContext_part_2+22↑j
.text:0040D0D8                 add     esp, 18h
.text:0040D0DB                 pop     fc
.text:0040D0DC                 jmp     _GetLastError@0 ; GetLastError()
.text:0040D0DC ; ---------------------------------------------------------------------------
.text:0040D0E1 fc = ebx                                ; SjLj_Function_Context *
.text:0040D0E1                 align 4
.text:0040D0E4
.text:0040D0E4 loc_40D0E4:                             ; CODE XREF: __Unwind_SjLj_SetContext_part_2+D↑j
.text:0040D0E4                 call    ___shmem_grabber_fc_key
.text:0040D0E9                 mov     ds:___shmem_ptr_fc_key, eax
.text:0040D0EE                 jmp     short loc_40D0BB
.text:0040D0EE __Unwind_SjLj_SetContext_part_2 endp
.text:0040D0EE
.text:0040D0F0
.text:0040D0F0 ; =============== S U B R O U T I N E =======================================
.text:0040D0F0
.text:0040D0F0
.text:0040D0F0 ; int *__shmem_grabber_use_fc_key()
.text:0040D0F0                 public ___shmem_grabber_use_fc_key
.text:0040D0F0 ___shmem_grabber_use_fc_key proc near   ; CODE XREF: _fc_key_init:loc_40D184↓p
.text:0040D0F0                                         ; _fc_key_init_once:loc_40D258↓p ...
.text:0040D0F0
.text:0040D0F0 name            = dword ptr -1Ch
.text:0040D0F0 size            = dword ptr -18h
.text:0040D0F0 initfunc        = dword ptr -14h
.text:0040D0F0
.text:0040D0F0                 sub     esp, 1Ch
.text:0040D0F3                 mov     [esp+1Ch+initfunc], offset ___shmem_init_use_fc_key ; initfunc
.text:0040D0FB                 mov     [esp+1Ch+size], 4 ; size
.text:0040D103                 mov     [esp+1Ch+name], offset aUseFcKey ; "use_fc_key"
.text:0040D10A                 call    ___shmem_grab
.text:0040D10F                 add     esp, 1Ch
.text:0040D112                 retn
.text:0040D112 ___shmem_grabber_use_fc_key endp
.text:0040D112
.text:0040D112 ; ---------------------------------------------------------------------------
.text:0040D113                 align 4
.text:0040D114
.text:0040D114 ; =============== S U B R O U T I N E =======================================
.text:0040D114
.text:0040D114 ; Attributes: static
.text:0040D114
.text:0040D114 ; void fc_key_init()
.text:0040D114 _fc_key_init    proc near               ; CODE XREF: _fc_key_init_once:loc_40D249↓p
.text:0040D114
.text:0040D114 var_1C          = dword ptr -1Ch
.text:0040D114 var_18          = dword ptr -18h
.text:0040D114
.text:0040D114                 push    esi
.text:0040D115                 push    ebx
.text:0040D116                 sub     esp, 14h
.text:0040D119                 mov     ebx, ds:___shmem_ptr_use_fc_key
.text:0040D11F                 test    ebx, ebx
.text:0040D121                 jz      short loc_40D184
.text:0040D123
.text:0040D123 loc_40D123:                             ; CODE XREF: _fc_key_init+7C↓j
.text:0040D123                 mov     esi, ds:___shmem_ptr_fc_key
.text:0040D129                 test    esi, esi
.text:0040D12B                 jz      short loc_40D174
.text:0040D12D
.text:0040D12D loc_40D12D:                             ; CODE XREF: _fc_key_init+6C↓j
.text:0040D12D                 call    _TlsAlloc@0     ; TlsAlloc()
.text:0040D132                 cmp     eax, 0FFFFFFFFh
.text:0040D135                 jz      short loc_40D15C
.text:0040D137                 mov     [esi], eax
.text:0040D139                 mov     [esp+1Ch+var_18], 0
.text:0040D141                 mov     [esp+1Ch+var_1C], eax
.text:0040D144                 call    ___mingwthr_key_dtor
.text:0040D149                 test    eax, eax
.text:0040D14B                 setz    al
.text:0040D14E                 movzx   eax, al
.text:0040D151                 mov     [ebx], eax
.text:0040D153                 add     esp, 14h
.text:0040D156                 pop     ebx
.text:0040D157                 pop     esi
.text:0040D158                 retn
.text:0040D158 ; ---------------------------------------------------------------------------
.text:0040D159                 align 4
.text:0040D15C
.text:0040D15C loc_40D15C:                             ; CODE XREF: _fc_key_init+21↑j
.text:0040D15C                 call    _GetLastError@0 ; GetLastError()
.text:0040D161                 test    eax, eax
.text:0040D163                 setz    al
.text:0040D166                 movzx   eax, al
.text:0040D169                 mov     [ebx], eax
.text:0040D16B                 add     esp, 14h
.text:0040D16E                 pop     ebx
.text:0040D16F                 pop     esi
.text:0040D170                 retn
.text:0040D170 ; ---------------------------------------------------------------------------
.text:0040D171                 align 4
.text:0040D174
.text:0040D174 loc_40D174:                             ; CODE XREF: _fc_key_init+17↑j
.text:0040D174                 call    ___shmem_grabber_fc_key
.text:0040D179                 mov     esi, eax
.text:0040D17B                 mov     ds:___shmem_ptr_fc_key, eax
.text:0040D180                 jmp     short loc_40D12D
.text:0040D180 ; ---------------------------------------------------------------------------
.text:0040D182                 align 4
.text:0040D184
.text:0040D184 loc_40D184:                             ; CODE XREF: _fc_key_init+D↑j
.text:0040D184                 call    ___shmem_grabber_use_fc_key
.text:0040D189                 mov     ebx, eax
.text:0040D18B                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040D190                 jmp     short loc_40D123
.text:0040D190 _fc_key_init    endp
.text:0040D190
.text:0040D190 ; ---------------------------------------------------------------------------
.text:0040D192                 align 4
.text:0040D194
.text:0040D194 ; =============== S U B R O U T I N E =======================================
.text:0040D194
.text:0040D194
.text:0040D194 ; __gthread_once_t *__shmem_grabber_sjlj_once()
.text:0040D194                 public ___shmem_grabber_sjlj_once
.text:0040D194 ___shmem_grabber_sjlj_once proc near    ; CODE XREF: _fc_key_init_once:loc_40D21C↓p
.text:0040D194
.text:0040D194 name            = dword ptr -1Ch
.text:0040D194 size            = dword ptr -18h
.text:0040D194 initfunc        = dword ptr -14h
.text:0040D194
.text:0040D194                 sub     esp, 1Ch
.text:0040D197                 mov     [esp+1Ch+initfunc], offset ___shmem_init_sjlj_once ; initfunc
.text:0040D19F                 mov     [esp+1Ch+size], 8 ; size
.text:0040D1A7                 mov     [esp+1Ch+name], offset aSjljOnce ; "sjlj_once"
.text:0040D1AE                 call    ___shmem_grab
.text:0040D1B3                 add     esp, 1Ch
.text:0040D1B6                 retn
.text:0040D1B6 ___shmem_grabber_sjlj_once endp
.text:0040D1B6
.text:0040D1B6 ; ---------------------------------------------------------------------------
.text:0040D1B7                 align 4
.text:0040D1B8
.text:0040D1B8 ; =============== S U B R O U T I N E =======================================
.text:0040D1B8
.text:0040D1B8 ; Attributes: static
.text:0040D1B8
.text:0040D1B8 ; void fc_key_init_once()
.text:0040D1B8 _fc_key_init_once proc near             ; CODE XREF: _uw_install_context_isra_3:loc_40D2CD↓p
.text:0040D1B8                                         ; __Unwind_SjLj_Register:loc_40D3C0↓p ...
.text:0040D1B8
.text:0040D1B8 lpAddend        = dword ptr -1Ch
.text:0040D1B8
.text:0040D1B8                 push    ebx
.text:0040D1B9                 sub     esp, 18h
.text:0040D1BC                 mov     ebx, ds:___shmem_ptr_sjlj_once
.text:0040D1C2                 test    ebx, ebx
.text:0040D1C4                 jz      short loc_40D21C
.text:0040D1C6                 cmp     ds:__CRT_MT, 0
.text:0040D1CD                 jz      short loc_40D235
.text:0040D1CF                 nop
.text:0040D1D0
.text:0040D1D0 loc_40D1D0:                             ; CODE XREF: _fc_key_init_once+7B↓j
.text:0040D1D0                 mov     ecx, [ebx]
.text:0040D1D2                 test    ecx, ecx
.text:0040D1D4                 jz      short loc_40D1F0
.text:0040D1D6
.text:0040D1D6 loc_40D1D6:                             ; CODE XREF: _fc_key_init_once+5F↓j
.text:0040D1D6                                         ; _fc_key_init_once+9C↓j
.text:0040D1D6                 mov     eax, ds:___shmem_ptr_use_fc_key
.text:0040D1DB                 test    eax, eax
.text:0040D1DD                 jz      loc_40D264
.text:0040D1E3
.text:0040D1E3 loc_40D1E3:                             ; CODE XREF: _fc_key_init_once+B6↓j
.text:0040D1E3                 mov     eax, [eax]
.text:0040D1E5                 test    eax, eax
.text:0040D1E7                 js      short loc_40D235
.text:0040D1E9                 add     esp, 18h
.text:0040D1EC                 pop     ebx
.text:0040D1ED                 retn
.text:0040D1ED ; ---------------------------------------------------------------------------
.text:0040D1EE                 align 10h
.text:0040D1F0
.text:0040D1F0 loc_40D1F0:                             ; CODE XREF: _fc_key_init_once+1C↑j
.text:0040D1F0                 lea     eax, [ebx+4]
.text:0040D1F3                 mov     [esp+1Ch+lpAddend], eax ; lpAddend
.text:0040D1F6                 call    _InterlockedIncrement@4 ; InterlockedIncrement(x)
.text:0040D1FB                 push    edx
.text:0040D1FC                 test    eax, eax
.text:0040D1FE                 jnz     short loc_40D211
.text:0040D200                 jmp     short loc_40D249
.text:0040D200 ; ---------------------------------------------------------------------------
.text:0040D202                 align 4
.text:0040D204
.text:0040D204 loc_40D204:                             ; CODE XREF: _fc_key_init_once+5D↓j
.text:0040D204                 mov     [esp+1Ch+lpAddend], 0 ; dwMilliseconds
.text:0040D20B                 call    _Sleep@4        ; Sleep(x)
.text:0040D210                 push    ecx
.text:0040D211
.text:0040D211 loc_40D211:                             ; CODE XREF: _fc_key_init_once+46↑j
.text:0040D211                 mov     edx, [ebx]
.text:0040D213                 test    edx, edx
.text:0040D215                 jz      short loc_40D204
.text:0040D217                 jmp     short loc_40D1D6
.text:0040D217 ; ---------------------------------------------------------------------------
.text:0040D219                 align 4
.text:0040D21C
.text:0040D21C loc_40D21C:                             ; CODE XREF: _fc_key_init_once+C↑j
.text:0040D21C                 call    ___shmem_grabber_sjlj_once
.text:0040D221                 mov     ebx, eax
.text:0040D223                 mov     ds:___shmem_ptr_sjlj_once, eax
.text:0040D228                 mov     eax, ds:__CRT_MT
.text:0040D22D                 test    eax, eax
.text:0040D22F                 jz      short loc_40D235
.text:0040D231                 test    ebx, ebx
.text:0040D233                 jnz     short loc_40D1D0
.text:0040D235
.text:0040D235 loc_40D235:                             ; CODE XREF: _fc_key_init_once+15↑j
.text:0040D235                                         ; _fc_key_init_once+2F↑j ...
.text:0040D235                 mov     eax, ds:___shmem_ptr_use_fc_key
.text:0040D23A                 test    eax, eax
.text:0040D23C                 jz      short loc_40D258
.text:0040D23E
.text:0040D23E loc_40D23E:                             ; CODE XREF: _fc_key_init_once+AA↓j
.text:0040D23E                 mov     dword ptr [eax], 0
.text:0040D244                 add     esp, 18h
.text:0040D247                 pop     ebx
.text:0040D248                 retn
.text:0040D249 ; ---------------------------------------------------------------------------
.text:0040D249
.text:0040D249 loc_40D249:                             ; CODE XREF: _fc_key_init_once+48↑j
.text:0040D249                 call    _fc_key_init
.text:0040D24E                 mov     dword ptr [ebx], 1
.text:0040D254                 jmp     short loc_40D1D6
.text:0040D254 ; ---------------------------------------------------------------------------
.text:0040D256                 align 4
.text:0040D258
.text:0040D258 loc_40D258:                             ; CODE XREF: _fc_key_init_once+84↑j
.text:0040D258                 call    ___shmem_grabber_use_fc_key
.text:0040D25D                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040D262                 jmp     short loc_40D23E
.text:0040D264 ; ---------------------------------------------------------------------------
.text:0040D264
.text:0040D264 loc_40D264:                             ; CODE XREF: _fc_key_init_once+25↑j
.text:0040D264                 call    ___shmem_grabber_use_fc_key
.text:0040D269                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040D26E                 jmp     loc_40D1E3
.text:0040D26E _fc_key_init_once endp
.text:0040D26E
.text:0040D26E ; ---------------------------------------------------------------------------
.text:0040D273                 align 4
.text:0040D274
.text:0040D274 ; =============== S U B R O U T I N E =======================================
.text:0040D274
.text:0040D274 ; Attributes: static bp-based frame
.text:0040D274
.text:0040D274 ; void uw_install_context_isra_3(_Unwind_Context *current, _Unwind_Context *target)
.text:0040D274 _uw_install_context_isra_3 proc near    ; CODE XREF: __Unwind_SjLj_RaiseException+F6↓p
.text:0040D274                                         ; __Unwind_SjLj_ForcedUnwind+D6↓p ...
.text:0040D274
.text:0040D274 current         = dword ptr  8
.text:0040D274 target_0        = dword ptr  0Ch
.text:0040D274
.text:0040D274 target = eax                            ; _Unwind_Context *
.text:0040D274                 push    ebp
.text:0040D275                 mov     ebp, esp
.text:0040D277                 push    esi
.text:0040D278                 push    ebx
.text:0040D279                 mov     ebx, target
.text:0040D27B                 mov     esi, [target]
.text:0040D27D                 mov     target, ds:___shmem_ptr_use_fc_key
.text:0040D282 target = ebx                            ; _Unwind_Context *
.text:0040D282                 test    eax, eax
.text:0040D284                 jz      short loc_40D2D4
.text:0040D286
.text:0040D286 loc_40D286:                             ; CODE XREF: _uw_install_context_isra_3+6A↓j
.text:0040D286                 mov     eax, [eax]
.text:0040D288                 test    eax, eax
.text:0040D28A                 js      short loc_40D2CD
.text:0040D28C
.text:0040D28C loc_40D28C:                             ; CODE XREF: _uw_install_context_isra_3+5E↓j
.text:0040D28C                 mov     eax, ds:___shmem_ptr_use_fc_key
.text:0040D291                 test    eax, eax
.text:0040D293                 jz      short loc_40D2E0
.text:0040D295
.text:0040D295 loc_40D295:                             ; CODE XREF: _uw_install_context_isra_3+76↓j
.text:0040D295                 mov     eax, [eax]
.text:0040D297                 test    eax, eax
.text:0040D299                 jz      short loc_40D2B2
.text:0040D29B                 mov     eax, esi        ; fc
.text:0040D29D                 call    __Unwind_SjLj_SetContext_part_2
.text:0040D2A2                 mov     edx, [target]
.text:0040D2A4                 lea     eax, [edx+20h]
.text:0040D2A7                 mov     ecx, [eax+4]
.text:0040D2AA                 mov     ebp, [edx+20h]
.text:0040D2AD                 mov     esp, [eax+8]
.text:0040D2B0                 jmp     ecx
.text:0040D2B2 ; ---------------------------------------------------------------------------
.text:0040D2B2
.text:0040D2B2 loc_40D2B2:                             ; CODE XREF: _uw_install_context_isra_3+25↑j
.text:0040D2B2                 mov     eax, ds:___shmem_ptr_fc_static
.text:0040D2B7                 test    eax, eax
.text:0040D2B9                 jz      short loc_40D2EC
.text:0040D2BB                 mov     [eax], esi
.text:0040D2BD                 mov     edx, [target]
.text:0040D2BF                 lea     eax, [edx+20h]
.text:0040D2C2                 mov     ecx, [eax+4]
.text:0040D2C5                 mov     ebp, [edx+20h]
.text:0040D2C8                 mov     esp, [eax+8]
.text:0040D2CB                 jmp     ecx
.text:0040D2CD ; ---------------------------------------------------------------------------
.text:0040D2CD
.text:0040D2CD loc_40D2CD:                             ; CODE XREF: _uw_install_context_isra_3+16↑j
.text:0040D2CD                 call    _fc_key_init_once
.text:0040D2D2                 jmp     short loc_40D28C
.text:0040D2D4 ; ---------------------------------------------------------------------------
.text:0040D2D4
.text:0040D2D4 loc_40D2D4:                             ; CODE XREF: _uw_install_context_isra_3+10↑j
.text:0040D2D4                 call    ___shmem_grabber_use_fc_key
.text:0040D2D9                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040D2DE                 jmp     short loc_40D286
.text:0040D2E0 ; ---------------------------------------------------------------------------
.text:0040D2E0
.text:0040D2E0 loc_40D2E0:                             ; CODE XREF: _uw_install_context_isra_3+1F↑j
.text:0040D2E0                 call    ___shmem_grabber_use_fc_key
.text:0040D2E5                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040D2EA                 jmp     short loc_40D295
.text:0040D2EC ; ---------------------------------------------------------------------------
.text:0040D2EC
.text:0040D2EC loc_40D2EC:                             ; CODE XREF: _uw_install_context_isra_3+45↑j
.text:0040D2EC                 call    ___shmem_grabber_fc_static
.text:0040D2F1                 mov     ds:___shmem_ptr_fc_static, eax
.text:0040D2F6                 mov     [eax], esi
.text:0040D2F8                 mov     edx, [target]
.text:0040D2FA                 lea     eax, [edx+20h]
.text:0040D2FD                 mov     ecx, [eax+4]
.text:0040D300                 mov     ebp, [edx+20h]
.text:0040D303                 mov     esp, [eax+8]
.text:0040D306                 jmp     ecx
.text:0040D306 _uw_install_context_isra_3 endp
.text:0040D306
.text:0040D308
.text:0040D308 ; =============== S U B R O U T I N E =======================================
.text:0040D308
.text:0040D308
.text:0040D308 ; void __cdecl _Unwind_SjLj_Register(struct SjLj_Function_Context *lpfctx)
.text:0040D308                 public __Unwind_SjLj_Register
.text:0040D308 __Unwind_SjLj_Register proc near        ; CODE XREF: _main+41↑p
.text:0040D308                                         ; ___gxx_personality_sj0+4E↑p ...
.text:0040D308
.text:0040D308 dwTlsIndex      = dword ptr -1Ch
.text:0040D308 lpTlsValue      = dword ptr -18h
.text:0040D308 fc              = dword ptr  4
.text:0040D308
.text:0040D308                 push    edi
.text:0040D309                 push    esi
.text:0040D30A                 push    ebx
.text:0040D30B                 sub     esp, 10h
.text:0040D30E                 mov     ebx, [esp+1Ch+fc]
.text:0040D312                 mov     eax, ds:___shmem_ptr_use_fc_key
.text:0040D317                 test    eax, eax
.text:0040D319                 jz      loc_40D3CC
.text:0040D31F
.text:0040D31F loc_40D31F:                             ; CODE XREF: __Unwind_SjLj_Register+CE↓j
.text:0040D31F                 mov     edi, [eax]
.text:0040D321                 test    edi, edi
.text:0040D323                 js      loc_40D3C0
.text:0040D329
.text:0040D329 loc_40D329:                             ; CODE XREF: __Unwind_SjLj_Register+BD↓j
.text:0040D329                 mov     eax, ds:___shmem_ptr_use_fc_key
.text:0040D32E                 test    eax, eax
.text:0040D330                 jz      loc_40D3DC
.text:0040D336
.text:0040D336 loc_40D336:                             ; CODE XREF: __Unwind_SjLj_Register+DE↓j
.text:0040D336                 mov     esi, [eax]
.text:0040D338                 test    esi, esi
.text:0040D33A                 jz      short loc_40D390
.text:0040D33C                 mov     eax, ds:___shmem_ptr_fc_key
.text:0040D341                 test    eax, eax
.text:0040D343                 jz      loc_40D40C
.text:0040D349
.text:0040D349 loc_40D349:                             ; CODE XREF: __Unwind_SjLj_Register+10E↓j
.text:0040D349                 mov     edi, [eax]
.text:0040D34B                 call    _GetLastError@0 ; GetLastError()
.text:0040D350                 mov     esi, eax
.text:0040D352                 mov     [esp+1Ch+dwTlsIndex], edi ; dwTlsIndex
.text:0040D355                 call    _TlsGetValue@4  ; TlsGetValue(x)
.text:0040D35A                 push    edx
.text:0040D35B                 mov     edi, eax
.text:0040D35D                 mov     [esp+1Ch+dwTlsIndex], esi ; dwErrCode
.text:0040D360                 call    _SetLastError@4 ; SetLastError(x)
.text:0040D365                 push    ecx
.text:0040D366                 mov     [ebx], edi
.text:0040D368                 mov     eax, ds:___shmem_ptr_fc_key
.text:0040D36D                 test    eax, eax
.text:0040D36F                 jz      short loc_40D3B4
.text:0040D371
.text:0040D371 loc_40D371:                             ; CODE XREF: __Unwind_SjLj_Register+B6↓j
.text:0040D371                 mov     [esp+1Ch+lpTlsValue], ebx ; lpTlsValue
.text:0040D375                 mov     eax, [eax]
.text:0040D377                 mov     [esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
.text:0040D37A                 call    _TlsSetValue@8  ; TlsSetValue(x,x)
.text:0040D37F                 sub     esp, 8
.text:0040D382                 test    eax, eax
.text:0040D384                 jz      short loc_40D3A8
.text:0040D386                 add     esp, 10h
.text:0040D389                 pop     ebx
.text:0040D38A                 pop     esi
.text:0040D38B                 pop     edi
.text:0040D38C                 retn
.text:0040D38C ; ---------------------------------------------------------------------------
.text:0040D38D                 align 10h
.text:0040D390
.text:0040D390 loc_40D390:                             ; CODE XREF: __Unwind_SjLj_Register+32↑j
.text:0040D390                 mov     eax, ds:___shmem_ptr_fc_static
.text:0040D395                 test    eax, eax
.text:0040D397                 jz      short loc_40D3EC
.text:0040D399                 mov     edx, [eax]
.text:0040D39B                 mov     [ebx], edx
.text:0040D39D
.text:0040D39D loc_40D39D:                             ; CODE XREF: __Unwind_SjLj_Register+F4↓j
.text:0040D39D                 mov     [eax], ebx
.text:0040D39F
.text:0040D39F loc_40D39F:                             ; CODE XREF: __Unwind_SjLj_Register+102↓j
.text:0040D39F                 add     esp, 10h
.text:0040D3A2                 pop     ebx
.text:0040D3A3                 pop     esi
.text:0040D3A4                 pop     edi
.text:0040D3A5                 retn
.text:0040D3A5 ; ---------------------------------------------------------------------------
.text:0040D3A6                 align 4
.text:0040D3A8
.text:0040D3A8 loc_40D3A8:                             ; CODE XREF: __Unwind_SjLj_Register+7C↑j
.text:0040D3A8                 add     esp, 10h
.text:0040D3AB                 pop     ebx
.text:0040D3AC                 pop     esi
.text:0040D3AD                 pop     edi
.text:0040D3AE                 jmp     _GetLastError@0 ; GetLastError()
.text:0040D3AE ; ---------------------------------------------------------------------------
.text:0040D3B3                 align 4
.text:0040D3B4
.text:0040D3B4 loc_40D3B4:                             ; CODE XREF: __Unwind_SjLj_Register+67↑j
.text:0040D3B4                 call    ___shmem_grabber_fc_key
.text:0040D3B9                 mov     ds:___shmem_ptr_fc_key, eax
.text:0040D3BE                 jmp     short loc_40D371
.text:0040D3C0 ; ---------------------------------------------------------------------------
.text:0040D3C0
.text:0040D3C0 loc_40D3C0:                             ; CODE XREF: __Unwind_SjLj_Register+1B↑j
.text:0040D3C0                 call    _fc_key_init_once
.text:0040D3C5                 jmp     loc_40D329
.text:0040D3C5 ; ---------------------------------------------------------------------------
.text:0040D3CA                 align 4
.text:0040D3CC
.text:0040D3CC loc_40D3CC:                             ; CODE XREF: __Unwind_SjLj_Register+11↑j
.text:0040D3CC                 call    ___shmem_grabber_use_fc_key
.text:0040D3D1                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040D3D6                 jmp     loc_40D31F
.text:0040D3D6 ; ---------------------------------------------------------------------------
.text:0040D3DB                 align 4
.text:0040D3DC
.text:0040D3DC loc_40D3DC:                             ; CODE XREF: __Unwind_SjLj_Register+28↑j
.text:0040D3DC                 call    ___shmem_grabber_use_fc_key
.text:0040D3E1                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040D3E6                 jmp     loc_40D336
.text:0040D3E6 ; ---------------------------------------------------------------------------
.text:0040D3EB                 align 4
.text:0040D3EC
.text:0040D3EC loc_40D3EC:                             ; CODE XREF: __Unwind_SjLj_Register+8F↑j
.text:0040D3EC                 call    ___shmem_grabber_fc_static
.text:0040D3F1                 mov     ds:___shmem_ptr_fc_static, eax
.text:0040D3F6                 mov     edx, [eax]
.text:0040D3F8                 mov     [ebx], edx
.text:0040D3FA                 test    eax, eax
.text:0040D3FC                 jnz     short loc_40D39D
.text:0040D3FE                 call    ___shmem_grabber_fc_static
.text:0040D403                 mov     ds:___shmem_ptr_fc_static, eax
.text:0040D408                 mov     [eax], ebx
.text:0040D40A                 jmp     short loc_40D39F
.text:0040D40C ; ---------------------------------------------------------------------------
.text:0040D40C
.text:0040D40C loc_40D40C:                             ; CODE XREF: __Unwind_SjLj_Register+3B↑j
.text:0040D40C                 call    ___shmem_grabber_fc_key
.text:0040D411                 mov     ds:___shmem_ptr_fc_key, eax
.text:0040D416                 jmp     loc_40D349
.text:0040D416 __Unwind_SjLj_Register endp
.text:0040D416
.text:0040D416 ; ---------------------------------------------------------------------------
.text:0040D41B                 align 4
.text:0040D41C
.text:0040D41C ; =============== S U B R O U T I N E =======================================
.text:0040D41C
.text:0040D41C
.text:0040D41C ; void __cdecl _Unwind_SjLj_Unregister(struct SjLj_Function_Context *lpfctx)
.text:0040D41C                 public __Unwind_SjLj_Unregister
.text:0040D41C __Unwind_SjLj_Unregister proc near      ; CODE XREF: _main+30D↑p
.text:0040D41C                                         ; ___gxx_personality_sj0+7C↑p ...
.text:0040D41C
.text:0040D41C fc              = dword ptr  4
.text:0040D41C
.text:0040D41C                 push    ebx
.text:0040D41D                 sub     esp, 8
.text:0040D420                 mov     eax, [esp+0Ch+fc]
.text:0040D424                 mov     ebx, [eax]
.text:0040D426                 mov     eax, ds:___shmem_ptr_use_fc_key
.text:0040D42B                 test    eax, eax
.text:0040D42D                 jz      short loc_40D468
.text:0040D42F
.text:0040D42F loc_40D42F:                             ; CODE XREF: __Unwind_SjLj_Unregister+56↓j
.text:0040D42F                 mov     eax, [eax]
.text:0040D431                 test    eax, eax
.text:0040D433                 js      short loc_40D460
.text:0040D435
.text:0040D435 loc_40D435:                             ; CODE XREF: __Unwind_SjLj_Unregister+49↓j
.text:0040D435                 mov     eax, ds:___shmem_ptr_use_fc_key
.text:0040D43A                 test    eax, eax
.text:0040D43C                 jz      short loc_40D474
.text:0040D43E
.text:0040D43E loc_40D43E:                             ; CODE XREF: __Unwind_SjLj_Unregister+62↓j
.text:0040D43E                 mov     eax, [eax]
.text:0040D440                 test    eax, eax
.text:0040D442                 jz      short loc_40D450
.text:0040D444                 mov     eax, ebx
.text:0040D446                 add     esp, 8
.text:0040D449                 pop     ebx
.text:0040D44A                 jmp     __Unwind_SjLj_SetContext_part_2
.text:0040D44A ; ---------------------------------------------------------------------------
.text:0040D44F                 align 10h
.text:0040D450
.text:0040D450 loc_40D450:                             ; CODE XREF: __Unwind_SjLj_Unregister+26↑j
.text:0040D450                 mov     eax, ds:___shmem_ptr_fc_static
.text:0040D455                 test    eax, eax
.text:0040D457                 jz      short loc_40D480
.text:0040D459
.text:0040D459 loc_40D459:                             ; CODE XREF: __Unwind_SjLj_Unregister+6E↓j
.text:0040D459                 mov     [eax], ebx
.text:0040D45B                 add     esp, 8
.text:0040D45E                 pop     ebx
.text:0040D45F                 retn
.text:0040D460 ; ---------------------------------------------------------------------------
.text:0040D460
.text:0040D460 loc_40D460:                             ; CODE XREF: __Unwind_SjLj_Unregister+17↑j
.text:0040D460                 call    _fc_key_init_once
.text:0040D465                 jmp     short loc_40D435
.text:0040D465 ; ---------------------------------------------------------------------------
.text:0040D467                 align 4
.text:0040D468
.text:0040D468 loc_40D468:                             ; CODE XREF: __Unwind_SjLj_Unregister+11↑j
.text:0040D468                 call    ___shmem_grabber_use_fc_key
.text:0040D46D                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040D472                 jmp     short loc_40D42F
.text:0040D474 ; ---------------------------------------------------------------------------
.text:0040D474
.text:0040D474 loc_40D474:                             ; CODE XREF: __Unwind_SjLj_Unregister+20↑j
.text:0040D474                 call    ___shmem_grabber_use_fc_key
.text:0040D479                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040D47E                 jmp     short loc_40D43E
.text:0040D480 ; ---------------------------------------------------------------------------
.text:0040D480
.text:0040D480 loc_40D480:                             ; CODE XREF: __Unwind_SjLj_Unregister+3B↑j
.text:0040D480                 call    ___shmem_grabber_fc_static
.text:0040D485                 mov     ds:___shmem_ptr_fc_static, eax
.text:0040D48A                 jmp     short loc_40D459
.text:0040D48A __Unwind_SjLj_Unregister endp
.text:0040D48A
.text:0040D48C
.text:0040D48C ; =============== S U B R O U T I N E =======================================
.text:0040D48C
.text:0040D48C ; Attributes: static
.text:0040D48C
.text:0040D48C ; _Unwind_Reason_Code __usercall _Unwind_ForcedUnwind_Phase2@<eax>(_Unwind_Exception *exc@<eax>, _Unwind_Context *context@<edx>)
.text:0040D48C __Unwind_ForcedUnwind_Phase2 proc near  ; CODE XREF: __Unwind_SjLj_ForcedUnwind+6A↓p
.text:0040D48C                                         ; __Unwind_SjLj_Resume:loc_40D8C5↓p ...
.text:0040D48C
.text:0040D48C lpfctx          = dword ptr -4Ch
.text:0040D48C var_48          = dword ptr -48h
.text:0040D48C var_44          = dword ptr -44h
.text:0040D48C var_40          = dword ptr -40h
.text:0040D48C var_3C          = dword ptr -3Ch
.text:0040D48C var_38          = dword ptr -38h
.text:0040D48C var_34          = dword ptr -34h
.text:0040D48C stop            = dword ptr -20h
.text:0040D48C
.text:0040D48C exc = eax                               ; _Unwind_Exception *
.text:0040D48C context = edx                           ; _Unwind_Context *
.text:0040D48C                 push    ebp
.text:0040D48D                 push    edi
.text:0040D48E                 push    esi
.text:0040D48F                 push    ebx
.text:0040D490                 sub     esp, 3Ch
.text:0040D493                 mov     esi, exc
.text:0040D495                 mov     ebx, context
.text:0040D497                 mov     context, [exc+0Ch]
.text:0040D49A context = ebx                           ; _Unwind_Context *
.text:0040D49A                 mov     [esp+4Ch+stop], edx
.text:0040D49E stop_0 = edx                            ; _Unwind_Stop_Fn
.text:0040D49E                 mov     ebp, [exc+10h]
.text:0040D4A1 stop_argument = ebp                     ; void *
.text:0040D4A1                 mov     exc, [context]
.text:0040D4A3 exc = esi                               ; _Unwind_Exception *
.text:0040D4A3                 jmp     loc_40D525
.text:0040D4A8 ; ---------------------------------------------------------------------------
.text:0040D4A8
.text:0040D4A8 loc_40D4A8:                             ; CODE XREF: __Unwind_ForcedUnwind_Phase2+9B↓j
.text:0040D4A8                 mov     edi, [eax+18h]
.text:0040D4AB fs_0 = edi                              ; _Unwind_FrameState
.text:0040D4AB                 mov     [esp+4Ch+var_34], stop_argument
.text:0040D4AF                 mov     [esp+4Ch+var_38], context
.text:0040D4B3                 mov     [esp+4Ch+var_3C], exc
.text:0040D4B7                 mov     eax, [exc]
.text:0040D4B9                 mov     edx, [exc+4]
.text:0040D4BC                 mov     [esp+4Ch+var_44], eax
.text:0040D4C0                 mov     [esp+4Ch+var_40], edx
.text:0040D4C4                 mov     [esp+4Ch+var_48], 0Ah
.text:0040D4CC                 mov     [esp+4Ch+lpfctx], 1
.text:0040D4D3                 mov     edx, [esp+4Ch+stop]
.text:0040D4D7                 call    edx
.text:0040D4D9 stop_code = eax                         ; _Unwind_Reason_Code
.text:0040D4D9                 test    stop_code, stop_code
.text:0040D4DB                 jnz     loc_40D56C
.text:0040D4E1                 test    fs_0, fs_0
.text:0040D4E3                 jz      short loc_40D515
.text:0040D4E5                 mov     [esp+4Ch+var_38], context
.text:0040D4E9                 mov     [esp+4Ch+var_3C], exc
.text:0040D4ED                 mov     stop_code, [exc]
.text:0040D4EF                 mov     edx, [exc+4]
.text:0040D4F2                 mov     [esp+4Ch+var_44], eax
.text:0040D4F6                 mov     [esp+4Ch+var_40], edx
.text:0040D4FA                 mov     [esp+4Ch+var_48], 0Ah
.text:0040D502                 mov     [esp+4Ch+lpfctx], 1
.text:0040D509                 call    fs_0
.text:0040D50B code = eax                              ; _Unwind_Reason_Code
.text:0040D50B                 cmp     code, 7
.text:0040D50E                 jz      short loc_40D561
.text:0040D510                 cmp     code, 8
.text:0040D513                 jnz     short loc_40D56C
.text:0040D515
.text:0040D515 loc_40D515:                             ; CODE XREF: __Unwind_ForcedUnwind_Phase2+57↑j
.text:0040D515                 mov     eax, [context]
.text:0040D517                 mov     [esp+4Ch+lpfctx], eax ; lpfctx
.text:0040D51A                 call    __Unwind_SjLj_Unregister
.text:0040D51F                 mov     eax, [context]
.text:0040D521                 mov     eax, [eax]
.text:0040D523                 mov     [context], eax
.text:0040D525
.text:0040D525 loc_40D525:                             ; CODE XREF: __Unwind_ForcedUnwind_Phase2+17↑j
.text:0040D525                 test    eax, eax
.text:0040D527                 jnz     loc_40D4A8
.text:0040D52D                 mov     [esp+4Ch+var_34], stop_argument
.text:0040D531                 mov     [esp+4Ch+var_38], context
.text:0040D535                 mov     [esp+4Ch+var_3C], exc
.text:0040D539                 mov     eax, [exc]
.text:0040D53B                 mov     edx, [exc+4]
.text:0040D53E                 mov     [esp+4Ch+var_44], eax
.text:0040D542                 mov     [esp+4Ch+var_40], edx
.text:0040D546                 mov     [esp+4Ch+var_48], 1Ah
.text:0040D54E                 mov     [esp+4Ch+lpfctx], 1
.text:0040D555                 mov     edx, [esp+4Ch+stop]
.text:0040D559                 call    edx
.text:0040D55B stop_code = eax                         ; _Unwind_Reason_Code
.text:0040D55B                 test    stop_code, stop_code
.text:0040D55D                 jnz     short loc_40D56C
.text:0040D55F                 mov     al, 5
.text:0040D561
.text:0040D561 loc_40D561:                             ; CODE XREF: __Unwind_ForcedUnwind_Phase2+82↑j
.text:0040D561                 add     esp, 3Ch
.text:0040D564                 pop     context
.text:0040D565                 pop     exc
.text:0040D566                 pop     edi
.text:0040D567                 pop     stop_argument
.text:0040D568                 retn
.text:0040D568 ; ---------------------------------------------------------------------------
.text:0040D569 exc = esi                               ; _Unwind_Exception *
.text:0040D569 context = ebx                           ; _Unwind_Context *
.text:0040D569 stop_argument = ebp                     ; void *
.text:0040D569                 align 4
.text:0040D56C
.text:0040D56C loc_40D56C:                             ; CODE XREF: __Unwind_ForcedUnwind_Phase2+4F↑j
.text:0040D56C                                         ; __Unwind_ForcedUnwind_Phase2+87↑j ...
.text:0040D56C                 mov     eax, 2
.text:0040D571                 add     esp, 3Ch
.text:0040D574                 pop     context
.text:0040D575                 pop     exc
.text:0040D576                 pop     edi
.text:0040D577                 pop     stop_argument
.text:0040D578                 retn
.text:0040D578 __Unwind_ForcedUnwind_Phase2 endp
.text:0040D578
.text:0040D578 ; ---------------------------------------------------------------------------
.text:0040D579                 align 4
.text:0040D57C
.text:0040D57C ; =============== S U B R O U T I N E =======================================
.text:0040D57C
.text:0040D57C
.text:0040D57C ; _Unwind_Word __cdecl _Unwind_GetGR(struct _Unwind_Context *lpuctx, int r)
.text:0040D57C                 public __Unwind_GetGR
.text:0040D57C __Unwind_GetGR  proc near
.text:0040D57C
.text:0040D57C context         = dword ptr  4
.text:0040D57C index           = dword ptr  8
.text:0040D57C
.text:0040D57C                 mov     eax, [esp+context]
.text:0040D580                 mov     eax, [eax]
.text:0040D582                 mov     edx, [esp+index]
.text:0040D586                 mov     eax, [eax+edx*4+8]
.text:0040D58A                 retn
.text:0040D58A __Unwind_GetGR  endp
.text:0040D58A
.text:0040D58A ; ---------------------------------------------------------------------------
.text:0040D58B                 align 4
.text:0040D58C
.text:0040D58C ; =============== S U B R O U T I N E =======================================
.text:0040D58C
.text:0040D58C
.text:0040D58C ; _Unwind_Word __cdecl _Unwind_GetCFA(_Unwind_Context *context)
.text:0040D58C                 public __Unwind_GetCFA
.text:0040D58C __Unwind_GetCFA proc near
.text:0040D58C
.text:0040D58C context         = dword ptr  4
.text:0040D58C
.text:0040D58C                 mov     eax, [esp+context]
.text:0040D590                 mov     eax, [eax]
.text:0040D592                 test    eax, eax
.text:0040D594                 jz      short loc_40D59C
.text:0040D596                 mov     eax, [eax+28h]
.text:0040D599                 retn
.text:0040D599 ; ---------------------------------------------------------------------------
.text:0040D59A                 align 4
.text:0040D59C
.text:0040D59C loc_40D59C:                             ; CODE XREF: __Unwind_GetCFA+8↑j
.text:0040D59C                 xor     eax, eax
.text:0040D59E                 retn
.text:0040D59E __Unwind_GetCFA endp
.text:0040D59E
.text:0040D59E ; ---------------------------------------------------------------------------
.text:0040D59F                 align 10h
.text:0040D5A0
.text:0040D5A0 ; =============== S U B R O U T I N E =======================================
.text:0040D5A0
.text:0040D5A0
.text:0040D5A0 ; void __cdecl _Unwind_SetGR(struct _Unwind_Context *lpuctx, int r, _Unwind_Word v)
.text:0040D5A0                 public __Unwind_SetGR
.text:0040D5A0 __Unwind_SetGR  proc near               ; CODE XREF: ___gxx_personality_sj0+3B5↑p
.text:0040D5A0                                         ; ___gxx_personality_sj0+3D4↑p
.text:0040D5A0
.text:0040D5A0 context         = dword ptr  4
.text:0040D5A0 index           = dword ptr  8
.text:0040D5A0 val             = dword ptr  0Ch
.text:0040D5A0
.text:0040D5A0                 mov     eax, [esp+context]
.text:0040D5A4                 mov     eax, [eax]
.text:0040D5A6                 mov     ecx, [esp+val]
.text:0040D5AA                 mov     edx, [esp+index]
.text:0040D5AE                 mov     [eax+edx*4+8], ecx
.text:0040D5B2                 retn
.text:0040D5B2 __Unwind_SetGR  endp
.text:0040D5B2
.text:0040D5B2 ; ---------------------------------------------------------------------------
.text:0040D5B3                 align 4
.text:0040D5B4
.text:0040D5B4 ; =============== S U B R O U T I N E =======================================
.text:0040D5B4
.text:0040D5B4
.text:0040D5B4 ; _Unwind_Ptr __cdecl _Unwind_GetIP(_Unwind_Context *context)
.text:0040D5B4                 public __Unwind_GetIP
.text:0040D5B4 __Unwind_GetIP  proc near
.text:0040D5B4
.text:0040D5B4 context         = dword ptr  4
.text:0040D5B4
.text:0040D5B4                 mov     eax, [esp+context]
.text:0040D5B8                 mov     eax, [eax]
.text:0040D5BA                 mov     eax, [eax+4]
.text:0040D5BD                 inc     eax
.text:0040D5BE                 retn
.text:0040D5BE __Unwind_GetIP  endp
.text:0040D5BE
.text:0040D5BE ; ---------------------------------------------------------------------------
.text:0040D5BF                 align 10h
.text:0040D5C0
.text:0040D5C0 ; =============== S U B R O U T I N E =======================================
.text:0040D5C0
.text:0040D5C0
.text:0040D5C0 ; _Unwind_Ptr __cdecl _Unwind_GetIPInfo(_Unwind_Context *context, int *ip_before_insn)
.text:0040D5C0                 public __Unwind_GetIPInfo
.text:0040D5C0 __Unwind_GetIPInfo proc near            ; CODE XREF: ___gxx_personality_sj0+138↑p
.text:0040D5C0
.text:0040D5C0 context         = dword ptr  4
.text:0040D5C0 ip_before_insn  = dword ptr  8
.text:0040D5C0
.text:0040D5C0                 mov     eax, [esp+ip_before_insn]
.text:0040D5C4                 mov     dword ptr [eax], 0
.text:0040D5CA                 mov     eax, [esp+context]
.text:0040D5CE                 mov     eax, [eax]
.text:0040D5D0                 test    eax, eax
.text:0040D5D2                 jz      short loc_40D5DC
.text:0040D5D4                 mov     eax, [eax+4]
.text:0040D5D7                 inc     eax
.text:0040D5D8                 retn
.text:0040D5D8 ; ---------------------------------------------------------------------------
.text:0040D5D9                 align 4
.text:0040D5DC
.text:0040D5DC loc_40D5DC:                             ; CODE XREF: __Unwind_GetIPInfo+12↑j
.text:0040D5DC                 xor     eax, eax
.text:0040D5DE                 retn
.text:0040D5DE __Unwind_GetIPInfo endp
.text:0040D5DE
.text:0040D5DE ; ---------------------------------------------------------------------------
.text:0040D5DF                 align 10h
.text:0040D5E0
.text:0040D5E0 ; =============== S U B R O U T I N E =======================================
.text:0040D5E0
.text:0040D5E0
.text:0040D5E0 ; void __cdecl _Unwind_SetIP(_Unwind_Context *context, _Unwind_Ptr val)
.text:0040D5E0                 public __Unwind_SetIP
.text:0040D5E0 __Unwind_SetIP  proc near               ; CODE XREF: ___gxx_personality_sj0+3EB↑p
.text:0040D5E0
.text:0040D5E0 context         = dword ptr  4
.text:0040D5E0 val             = dword ptr  8
.text:0040D5E0
.text:0040D5E0                 mov     eax, [esp+context]
.text:0040D5E4                 mov     eax, [eax]
.text:0040D5E6                 mov     edx, [esp+val]
.text:0040D5EA                 dec     edx
.text:0040D5EB                 mov     [eax+4], edx
.text:0040D5EE                 retn
.text:0040D5EE __Unwind_SetIP  endp
.text:0040D5EE
.text:0040D5EE ; ---------------------------------------------------------------------------
.text:0040D5EF                 align 10h
.text:0040D5F0
.text:0040D5F0 ; =============== S U B R O U T I N E =======================================
.text:0040D5F0
.text:0040D5F0
.text:0040D5F0 ; void *__cdecl _Unwind_GetLanguageSpecificData(_Unwind_Context *context)
.text:0040D5F0                 public __Unwind_GetLanguageSpecificData
.text:0040D5F0 __Unwind_GetLanguageSpecificData proc near
.text:0040D5F0                                         ; CODE XREF: ___gxx_personality_sj0+D7↑p
.text:0040D5F0
.text:0040D5F0 context         = dword ptr  4
.text:0040D5F0
.text:0040D5F0                 mov     eax, [esp+context]
.text:0040D5F4                 mov     eax, [eax]
.text:0040D5F6                 mov     eax, [eax+1Ch]
.text:0040D5F9                 retn
.text:0040D5F9 __Unwind_GetLanguageSpecificData endp
.text:0040D5F9
.text:0040D5F9 ; ---------------------------------------------------------------------------
.text:0040D5FA                 align 4
.text:0040D5FC
.text:0040D5FC ; =============== S U B R O U T I N E =======================================
.text:0040D5FC
.text:0040D5FC
.text:0040D5FC ; _Unwind_Ptr __cdecl _Unwind_GetRegionStart(_Unwind_Context *context)
.text:0040D5FC                 public __Unwind_GetRegionStart
.text:0040D5FC __Unwind_GetRegionStart proc near       ; CODE XREF: base_of_encoded_value(uchar,_Unwind_Context *)+3B↑p
.text:0040D5FC                                         ; parse_lsda_header(_Unwind_Context *,uchar const*,lsda_header_info *)+1A↑p
.text:0040D5FC
.text:0040D5FC context         = dword ptr  4
.text:0040D5FC
.text:0040D5FC                 xor     eax, eax
.text:0040D5FE                 retn
.text:0040D5FE __Unwind_GetRegionStart endp
.text:0040D5FE
.text:0040D5FE ; ---------------------------------------------------------------------------
.text:0040D5FF                 align 10h
.text:0040D600
.text:0040D600 ; =============== S U B R O U T I N E =======================================
.text:0040D600
.text:0040D600
.text:0040D600 ; void *__cdecl _Unwind_FindEnclosingFunction(void *pc)
.text:0040D600                 public __Unwind_FindEnclosingFunction
.text:0040D600 __Unwind_FindEnclosingFunction proc near
.text:0040D600
.text:0040D600 pc              = dword ptr  4
.text:0040D600
.text:0040D600                 xor     eax, eax
.text:0040D602                 retn
.text:0040D602 __Unwind_FindEnclosingFunction endp
.text:0040D602
.text:0040D602 ; ---------------------------------------------------------------------------
.text:0040D603                 align 4
.text:0040D604
.text:0040D604 ; =============== S U B R O U T I N E =======================================
.text:0040D604
.text:0040D604
.text:0040D604 ; _Unwind_Ptr __cdecl _Unwind_GetDataRelBase(_Unwind_Context *context)
.text:0040D604                 public __Unwind_GetDataRelBase
.text:0040D604 __Unwind_GetDataRelBase proc near       ; CODE XREF: base_of_encoded_value(uchar,_Unwind_Context *)+53↑p
.text:0040D604
.text:0040D604 context         = dword ptr  4
.text:0040D604
.text:0040D604                 xor     eax, eax
.text:0040D606                 retn
.text:0040D606 __Unwind_GetDataRelBase endp
.text:0040D606
.text:0040D606 ; ---------------------------------------------------------------------------
.text:0040D607                 align 4
.text:0040D608
.text:0040D608 ; =============== S U B R O U T I N E =======================================
.text:0040D608
.text:0040D608
.text:0040D608 ; _Unwind_Ptr __cdecl _Unwind_GetTextRelBase(_Unwind_Context *context)
.text:0040D608                 public __Unwind_GetTextRelBase
.text:0040D608 __Unwind_GetTextRelBase proc near       ; CODE XREF: base_of_encoded_value(uchar,_Unwind_Context *)+47↑p
.text:0040D608
.text:0040D608 context         = dword ptr  4
.text:0040D608
.text:0040D608                 xor     eax, eax
.text:0040D60A                 retn
.text:0040D60A __Unwind_GetTextRelBase endp
.text:0040D60A
.text:0040D60A ; ---------------------------------------------------------------------------
.text:0040D60B                 align 4
.text:0040D60C
.text:0040D60C ; =============== S U B R O U T I N E =======================================
.text:0040D60C
.text:0040D60C
.text:0040D60C ; _Unwind_Reason_Code __cdecl _Unwind_SjLj_RaiseException(struct _Unwind_Exception *lpuexcpt)
.text:0040D60C                 public __Unwind_SjLj_RaiseException
.text:0040D60C __Unwind_SjLj_RaiseException proc near  ; CODE XREF: ___cxa_throw+54↑p
.text:0040D60C                                         ; __Unwind_SjLj_Resume_or_Rethrow+14↓p
.text:0040D60C
.text:0040D60C dwTlsIndex      = dword ptr -3Ch
.text:0040D60C target          = dword ptr -38h
.text:0040D60C var_34          = dword ptr -34h
.text:0040D60C var_30          = dword ptr -30h
.text:0040D60C var_2C          = dword ptr -2Ch
.text:0040D60C var_28          = dword ptr -28h
.text:0040D60C cur_context     = _Unwind_Context ptr -10h
.text:0040D60C exc             = dword ptr  4
.text:0040D60C
.text:0040D60C                 push    edi
.text:0040D60D                 push    esi
.text:0040D60E                 push    ebx
.text:0040D60F                 sub     esp, 30h
.text:0040D612                 mov     edi, [esp+3Ch+exc]
.text:0040D616                 mov     eax, ds:___shmem_ptr_use_fc_key
.text:0040D61B                 test    eax, eax
.text:0040D61D                 jz      loc_40D73D
.text:0040D623
.text:0040D623 loc_40D623:                             ; CODE XREF: __Unwind_SjLj_RaiseException+13B↓j
.text:0040D623                 mov     esi, [eax]
.text:0040D625                 test    esi, esi
.text:0040D627                 js      loc_40D724
.text:0040D62D
.text:0040D62D loc_40D62D:                             ; CODE XREF: __Unwind_SjLj_RaiseException+11D↓j
.text:0040D62D                 mov     eax, ds:___shmem_ptr_use_fc_key
.text:0040D632                 test    eax, eax
.text:0040D634                 jz      loc_40D72E
.text:0040D63A
.text:0040D63A loc_40D63A:                             ; CODE XREF: __Unwind_SjLj_RaiseException+12C↓j
.text:0040D63A                 mov     ebx, [eax]
.text:0040D63C                 test    ebx, ebx
.text:0040D63E                 jz      loc_40D6D0
.text:0040D644                 mov     eax, ds:___shmem_ptr_fc_key
.text:0040D649                 test    eax, eax
.text:0040D64B                 jz      loc_40D708
.text:0040D651
.text:0040D651 loc_40D651:                             ; CODE XREF: __Unwind_SjLj_RaiseException+106↓j
.text:0040D651                 mov     esi, [eax]
.text:0040D653                 call    _GetLastError@0 ; GetLastError()
.text:0040D658                 mov     ebx, eax
.text:0040D65A                 mov     [esp+3Ch+dwTlsIndex], esi ; dwTlsIndex
.text:0040D65D                 call    _TlsGetValue@4  ; TlsGetValue(x)
.text:0040D662                 push    edx
.text:0040D663                 mov     esi, eax
.text:0040D665                 mov     [esp+3Ch+dwTlsIndex], ebx ; dwErrCode
.text:0040D668                 call    _SetLastError@4 ; SetLastError(x)
.text:0040D66D                 push    ecx
.text:0040D66E
.text:0040D66E loc_40D66E:                             ; CODE XREF: __Unwind_SjLj_RaiseException+CF↓j
.text:0040D66E                                         ; __Unwind_SjLj_RaiseException+14C↓j
.text:0040D66E this_context = esi                      ; _Unwind_Context
.text:0040D66E                 mov     [esp+3Ch+cur_context.fc], this_context
.text:0040D672                 test    this_context, this_context
.text:0040D674                 jz      short loc_40D6C1
.text:0040D676                 mov     ecx, this_context
.text:0040D678                 lea     ebx, [esp+3Ch+cur_context]
.text:0040D67C
.text:0040D67C loc_40D67C:                             ; CODE XREF: __Unwind_SjLj_RaiseException+B3↓j
.text:0040D67C                 mov     eax, [ecx+18h]
.text:0040D67F fs_0 = eax                              ; _Unwind_FrameState
.text:0040D67F                 test    fs_0, fs_0
.text:0040D681                 jz      short loc_40D6B3
.text:0040D683                 mov     [esp+3Ch+var_28], ebx
.text:0040D687                 mov     [esp+3Ch+var_2C], edi
.text:0040D68B                 mov     edx, [edi]
.text:0040D68D                 mov     ecx, [edi+4]
.text:0040D690                 mov     [esp+3Ch+var_34], edx
.text:0040D694                 mov     [esp+3Ch+var_30], ecx
.text:0040D698                 mov     [esp+3Ch+target], 1 ; target
.text:0040D6A0                 mov     [esp+3Ch+dwTlsIndex], 1 ; current
.text:0040D6A7                 call    fs_0
.text:0040D6A9 code = eax                              ; _Unwind_Reason_Code
.text:0040D6A9                 cmp     code, 6
.text:0040D6AC                 jz      short loc_40D6E0
.text:0040D6AE                 cmp     code, 8
.text:0040D6B1                 jnz     short loc_40D718
.text:0040D6B3
.text:0040D6B3 loc_40D6B3:                             ; CODE XREF: __Unwind_SjLj_RaiseException+75↑j
.text:0040D6B3                 mov     eax, [esp+3Ch+cur_context.fc]
.text:0040D6B7                 mov     ecx, [eax]
.text:0040D6B9                 mov     [esp+3Ch+cur_context.fc], ecx
.text:0040D6BD                 test    ecx, ecx
.text:0040D6BF                 jnz     short loc_40D67C
.text:0040D6C1
.text:0040D6C1 loc_40D6C1:                             ; CODE XREF: __Unwind_SjLj_RaiseException+68↑j
.text:0040D6C1                 mov     eax, 5
.text:0040D6C6
.text:0040D6C6 loc_40D6C6:                             ; CODE XREF: __Unwind_SjLj_RaiseException+F2↓j
.text:0040D6C6                 add     esp, 30h
.text:0040D6C9                 pop     ebx
.text:0040D6CA                 pop     this_context
.text:0040D6CB                 pop     edi
.text:0040D6CC                 retn
.text:0040D6CC ; ---------------------------------------------------------------------------
.text:0040D6CD                 align 10h
.text:0040D6D0
.text:0040D6D0 loc_40D6D0:                             ; CODE XREF: __Unwind_SjLj_RaiseException+32↑j
.text:0040D6D0                 mov     eax, ds:___shmem_ptr_fc_static
.text:0040D6D5                 test    eax, eax
.text:0040D6D7                 jz      short loc_40D74C
.text:0040D6D9                 mov     esi, [eax]
.text:0040D6DB                 jmp     short loc_40D66E
.text:0040D6DB ; ---------------------------------------------------------------------------
.text:0040D6DD this_context = esi                      ; _Unwind_Context
.text:0040D6DD code = eax                              ; _Unwind_Reason_Code
.text:0040D6DD                 align 10h
.text:0040D6E0
.text:0040D6E0 loc_40D6E0:                             ; CODE XREF: __Unwind_SjLj_RaiseException+A0↑j
.text:0040D6E0                 mov     dword ptr [edi+0Ch], 0
.text:0040D6E7                 mov     code, [esp+3Ch+cur_context.fc]
.text:0040D6EB                 mov     [edi+10h], eax
.text:0040D6EE                 mov     [esp+3Ch+cur_context.fc], this_context
.text:0040D6F2                 mov     edx, ebx        ; context
.text:0040D6F4                 mov     eax, edi        ; exc
.text:0040D6F6                 call    __Unwind_RaiseException_Phase2
.text:0040D6FB code = eax                              ; _Unwind_Reason_Code
.text:0040D6FB                 cmp     code, 7
.text:0040D6FE                 jnz     short loc_40D6C6
.text:0040D700                 mov     code, ebx
.text:0040D702                 call    _uw_install_context_isra_3
.text:0040D707                 nop
.text:0040D708
.text:0040D708 loc_40D708:                             ; CODE XREF: __Unwind_SjLj_RaiseException+3F↑j
.text:0040D708                 call    ___shmem_grabber_fc_key
.text:0040D70D                 mov     ds:___shmem_ptr_fc_key, eax
.text:0040D712                 jmp     loc_40D651
.text:0040D712 ; ---------------------------------------------------------------------------
.text:0040D717 this_context = esi                      ; _Unwind_Context
.text:0040D717 code = eax                              ; _Unwind_Reason_Code
.text:0040D717                 align 4
.text:0040D718
.text:0040D718 loc_40D718:                             ; CODE XREF: __Unwind_SjLj_RaiseException+A5↑j
.text:0040D718                 mov     code, 3
.text:0040D71D                 add     esp, 30h
.text:0040D720                 pop     ebx
.text:0040D721                 pop     this_context
.text:0040D722                 pop     edi
.text:0040D723                 retn
.text:0040D724 ; ---------------------------------------------------------------------------
.text:0040D724
.text:0040D724 loc_40D724:                             ; CODE XREF: __Unwind_SjLj_RaiseException+1B↑j
.text:0040D724                 call    _fc_key_init_once
.text:0040D729                 jmp     loc_40D62D
.text:0040D72E ; ---------------------------------------------------------------------------
.text:0040D72E
.text:0040D72E loc_40D72E:                             ; CODE XREF: __Unwind_SjLj_RaiseException+28↑j
.text:0040D72E                 call    ___shmem_grabber_use_fc_key
.text:0040D733                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040D738                 jmp     loc_40D63A
.text:0040D73D ; ---------------------------------------------------------------------------
.text:0040D73D
.text:0040D73D loc_40D73D:                             ; CODE XREF: __Unwind_SjLj_RaiseException+11↑j
.text:0040D73D                 call    ___shmem_grabber_use_fc_key
.text:0040D742                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040D747                 jmp     loc_40D623
.text:0040D74C ; ---------------------------------------------------------------------------
.text:0040D74C
.text:0040D74C loc_40D74C:                             ; CODE XREF: __Unwind_SjLj_RaiseException+CB↑j
.text:0040D74C                 call    ___shmem_grabber_fc_static
.text:0040D751                 mov     ds:___shmem_ptr_fc_static, eax
.text:0040D756                 mov     esi, [eax]
.text:0040D758                 jmp     loc_40D66E
.text:0040D758 __Unwind_SjLj_RaiseException endp
.text:0040D758
.text:0040D758 ; ---------------------------------------------------------------------------
.text:0040D75D                 align 10h
.text:0040D760
.text:0040D760 ; =============== S U B R O U T I N E =======================================
.text:0040D760
.text:0040D760
.text:0040D760 ; _Unwind_Reason_Code __cdecl _Unwind_SjLj_ForcedUnwind(struct _Unwind_Exception *lpuexcpt, _Unwind_Stop_Fn pfnstop, void *pdata)
.text:0040D760                 public __Unwind_SjLj_ForcedUnwind
.text:0040D760 __Unwind_SjLj_ForcedUnwind proc near
.text:0040D760
.text:0040D760 dwTlsIndex      = dword ptr -2Ch
.text:0040D760 cur_context     = _Unwind_Context ptr -10h
.text:0040D760 exc             = dword ptr  4
.text:0040D760 stop            = dword ptr  8
.text:0040D760 stop_argument   = dword ptr  0Ch
.text:0040D760
.text:0040D760                 push    edi
.text:0040D761                 push    esi
.text:0040D762                 push    ebx
.text:0040D763                 sub     esp, 20h
.text:0040D766                 mov     ebx, [esp+2Ch+exc]
.text:0040D76A                 mov     eax, ds:___shmem_ptr_use_fc_key
.text:0040D76F                 test    eax, eax
.text:0040D771                 jz      loc_40D814
.text:0040D777
.text:0040D777 loc_40D777:                             ; CODE XREF: __Unwind_SjLj_ForcedUnwind+BE↓j
.text:0040D777                 mov     edi, [eax]
.text:0040D779                 test    edi, edi
.text:0040D77B                 js      short loc_40D7F8
.text:0040D77D
.text:0040D77D loc_40D77D:                             ; CODE XREF: __Unwind_SjLj_ForcedUnwind+9D↓j
.text:0040D77D                 mov     eax, ds:___shmem_ptr_use_fc_key
.text:0040D782                 test    eax, eax
.text:0040D784                 jz      short loc_40D804
.text:0040D786
.text:0040D786 loc_40D786:                             ; CODE XREF: __Unwind_SjLj_ForcedUnwind+AE↓j
.text:0040D786                 mov     esi, [eax]
.text:0040D788                 test    esi, esi
.text:0040D78A                 jz      short loc_40D7DC
.text:0040D78C                 mov     eax, ds:___shmem_ptr_fc_key
.text:0040D791                 test    eax, eax
.text:0040D793                 jz      short loc_40D7EC
.text:0040D795
.text:0040D795 loc_40D795:                             ; CODE XREF: __Unwind_SjLj_ForcedUnwind+96↓j
.text:0040D795                 mov     esi, [eax]
.text:0040D797                 call    _GetLastError@0 ; GetLastError()
.text:0040D79C                 mov     edi, eax
.text:0040D79E                 mov     [esp+2Ch+dwTlsIndex], esi ; dwTlsIndex
.text:0040D7A1                 call    _TlsGetValue@4  ; TlsGetValue(x)
.text:0040D7A6                 push    edx
.text:0040D7A7                 mov     esi, eax
.text:0040D7A9                 mov     [esp+2Ch+dwTlsIndex], edi ; dwErrCode
.text:0040D7AC                 call    _SetLastError@4 ; SetLastError(x)
.text:0040D7B1                 push    ecx             ; current
.text:0040D7B2
.text:0040D7B2 loc_40D7B2:                             ; CODE XREF: __Unwind_SjLj_ForcedUnwind+87↓j
.text:0040D7B2                                         ; __Unwind_SjLj_ForcedUnwind+D0↓j
.text:0040D7B2 this_context = esi                      ; _Unwind_Context
.text:0040D7B2                 mov     [esp+2Ch+cur_context.fc], this_context
.text:0040D7B6                 mov     eax, [esp+2Ch+stop]
.text:0040D7BA                 mov     [ebx+0Ch], eax
.text:0040D7BD                 mov     eax, [esp+2Ch+stop_argument]
.text:0040D7C1                 mov     [ebx+10h], eax
.text:0040D7C4                 lea     edx, [esp+2Ch+cur_context] ; context
.text:0040D7C8                 mov     eax, ebx        ; exc
.text:0040D7CA                 call    __Unwind_ForcedUnwind_Phase2
.text:0040D7CF code = eax                              ; _Unwind_Reason_Code
.text:0040D7CF                 cmp     code, 7
.text:0040D7D2                 jz      short loc_40D832
.text:0040D7D4                 add     esp, 20h
.text:0040D7D7                 pop     ebx
.text:0040D7D8                 pop     this_context
.text:0040D7D9                 pop     edi
.text:0040D7DA                 retn
.text:0040D7DA ; ---------------------------------------------------------------------------
.text:0040D7DB                 align 4
.text:0040D7DC
.text:0040D7DC loc_40D7DC:                             ; CODE XREF: __Unwind_SjLj_ForcedUnwind+2A↑j
.text:0040D7DC                 mov     eax, ds:___shmem_ptr_fc_static
.text:0040D7E1                 test    eax, eax
.text:0040D7E3                 jz      short loc_40D824
.text:0040D7E5                 mov     esi, [eax]
.text:0040D7E7                 jmp     short loc_40D7B2
.text:0040D7E7 ; ---------------------------------------------------------------------------
.text:0040D7E9                 align 4
.text:0040D7EC
.text:0040D7EC loc_40D7EC:                             ; CODE XREF: __Unwind_SjLj_ForcedUnwind+33↑j
.text:0040D7EC                 call    ___shmem_grabber_fc_key
.text:0040D7F1                 mov     ds:___shmem_ptr_fc_key, eax
.text:0040D7F6                 jmp     short loc_40D795
.text:0040D7F8 ; ---------------------------------------------------------------------------
.text:0040D7F8
.text:0040D7F8 loc_40D7F8:                             ; CODE XREF: __Unwind_SjLj_ForcedUnwind+1B↑j
.text:0040D7F8                 call    _fc_key_init_once
.text:0040D7FD                 jmp     loc_40D77D
.text:0040D7FD ; ---------------------------------------------------------------------------
.text:0040D802                 align 4
.text:0040D804
.text:0040D804 loc_40D804:                             ; CODE XREF: __Unwind_SjLj_ForcedUnwind+24↑j
.text:0040D804                 call    ___shmem_grabber_use_fc_key
.text:0040D809                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040D80E                 jmp     loc_40D786
.text:0040D80E ; ---------------------------------------------------------------------------
.text:0040D813                 align 4
.text:0040D814
.text:0040D814 loc_40D814:                             ; CODE XREF: __Unwind_SjLj_ForcedUnwind+11↑j
.text:0040D814                 call    ___shmem_grabber_use_fc_key
.text:0040D819                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040D81E                 jmp     loc_40D777
.text:0040D81E ; ---------------------------------------------------------------------------
.text:0040D823                 align 4
.text:0040D824
.text:0040D824 loc_40D824:                             ; CODE XREF: __Unwind_SjLj_ForcedUnwind+83↑j
.text:0040D824                 call    ___shmem_grabber_fc_static
.text:0040D829                 mov     ds:___shmem_ptr_fc_static, eax
.text:0040D82E                 mov     esi, [eax]
.text:0040D830                 jmp     short loc_40D7B2
.text:0040D832 ; ---------------------------------------------------------------------------
.text:0040D832
.text:0040D832 loc_40D832:                             ; CODE XREF: __Unwind_SjLj_ForcedUnwind+72↑j
.text:0040D832 this_context = esi                      ; _Unwind_Context
.text:0040D832 code = eax                              ; _Unwind_Reason_Code
.text:0040D832                 lea     code, [esp+2Ch+cur_context]
.text:0040D836                 call    _uw_install_context_isra_3
.text:0040D836 __Unwind_SjLj_ForcedUnwind endp ; sp-analysis failed
.text:0040D836
.text:0040D83B                 nop
.text:0040D83C
.text:0040D83C ; =============== S U B R O U T I N E =======================================
.text:0040D83C
.text:0040D83C ; Attributes: noreturn
.text:0040D83C
.text:0040D83C ; void __cdecl _Unwind_SjLj_Resume(struct _Unwind_Exception *lpuexcpt)
.text:0040D83C                 public __Unwind_SjLj_Resume
.text:0040D83C __Unwind_SjLj_Resume proc near          ; CODE XREF: _main+2FF↑p
.text:0040D83C                                         ; ___cxa_call_unexpected+12B↑p ...
.text:0040D83C
.text:0040D83C dwTlsIndex      = dword ptr -2Ch
.text:0040D83C cur_context     = _Unwind_Context ptr -10h
.text:0040D83C exc             = dword ptr  4
.text:0040D83C
.text:0040D83C                 push    edi
.text:0040D83D                 push    esi
.text:0040D83E                 push    ebx
.text:0040D83F                 sub     esp, 20h
.text:0040D842                 mov     ebx, [esp+2Ch+exc]
.text:0040D846                 mov     eax, ds:___shmem_ptr_use_fc_key
.text:0040D84B                 test    eax, eax
.text:0040D84D                 jz      loc_40D8E9
.text:0040D853
.text:0040D853 loc_40D853:                             ; CODE XREF: __Unwind_SjLj_Resume+B7↓j
.text:0040D853                 mov     eax, [eax]
.text:0040D855                 test    eax, eax
.text:0040D857                 js      loc_40D8DF
.text:0040D85D
.text:0040D85D loc_40D85D:                             ; CODE XREF: __Unwind_SjLj_Resume+A8↓j
.text:0040D85D                 mov     eax, ds:___shmem_ptr_use_fc_key
.text:0040D862                 test    eax, eax
.text:0040D864                 jz      loc_40D8F8
.text:0040D86A
.text:0040D86A loc_40D86A:                             ; CODE XREF: __Unwind_SjLj_Resume+C6↓j
.text:0040D86A                 mov     eax, [eax]
.text:0040D86C                 test    eax, eax
.text:0040D86E                 jz      short loc_40D8B8
.text:0040D870                 mov     eax, ds:___shmem_ptr_fc_key
.text:0040D875                 test    eax, eax
.text:0040D877                 jz      short loc_40D8D3
.text:0040D879
.text:0040D879 loc_40D879:                             ; CODE XREF: __Unwind_SjLj_Resume+A1↓j
.text:0040D879                 mov     esi, [eax]
.text:0040D87B                 call    _GetLastError@0 ; GetLastError()
.text:0040D880                 mov     edi, eax
.text:0040D882                 mov     [esp+2Ch+dwTlsIndex], esi ; dwTlsIndex
.text:0040D885                 call    _TlsGetValue@4  ; TlsGetValue(x)
.text:0040D88A                 push    esi
.text:0040D88B                 mov     esi, eax
.text:0040D88D                 mov     [esp+2Ch+dwTlsIndex], edi ; dwErrCode
.text:0040D890                 call    _SetLastError@4 ; SetLastError(x)
.text:0040D895                 push    edi             ; current
.text:0040D896
.text:0040D896 loc_40D896:                             ; CODE XREF: __Unwind_SjLj_Resume+87↓j
.text:0040D896                                         ; __Unwind_SjLj_Resume+D7↓j
.text:0040D896 this_context = esi                      ; _Unwind_Context
.text:0040D896                 mov     [esp+2Ch+cur_context.fc], this_context
.text:0040D89A                 lea     this_context, [esp+2Ch+cur_context]
.text:0040D89E                 mov     edx, esi        ; context
.text:0040D8A0                 mov     eax, ebx        ; exc
.text:0040D8A2                 mov     ecx, [ebx+0Ch]
.text:0040D8A5                 test    ecx, ecx
.text:0040D8A7                 jnz     short loc_40D8C5
.text:0040D8A9                 call    __Unwind_RaiseException_Phase2
.text:0040D8AE
.text:0040D8AE loc_40D8AE:                             ; CODE XREF: __Unwind_SjLj_Resume+8E↓j
.text:0040D8AE code = eax                              ; _Unwind_Reason_Code
.text:0040D8AE                 cmp     code, 7
.text:0040D8B1                 jz      short loc_40D8CC
.text:0040D8B3                 call    _abort
.text:0040D8B8 ; ---------------------------------------------------------------------------
.text:0040D8B8
.text:0040D8B8 loc_40D8B8:                             ; CODE XREF: __Unwind_SjLj_Resume+32↑j
.text:0040D8B8                 mov     eax, ds:___shmem_ptr_fc_static
.text:0040D8BD                 test    eax, eax
.text:0040D8BF                 jz      short loc_40D907
.text:0040D8C1                 mov     esi, [eax]
.text:0040D8C3                 jmp     short loc_40D896
.text:0040D8C5 ; ---------------------------------------------------------------------------
.text:0040D8C5
.text:0040D8C5 loc_40D8C5:                             ; CODE XREF: __Unwind_SjLj_Resume+6B↑j
.text:0040D8C5                 call    __Unwind_ForcedUnwind_Phase2
.text:0040D8CA                 jmp     short loc_40D8AE
.text:0040D8CC ; ---------------------------------------------------------------------------
.text:0040D8CC
.text:0040D8CC loc_40D8CC:                             ; CODE XREF: __Unwind_SjLj_Resume+75↑j
.text:0040D8CC code = eax                              ; _Unwind_Reason_Code
.text:0040D8CC                 mov     code, esi
.text:0040D8CE                 call    _uw_install_context_isra_3
.text:0040D8D3
.text:0040D8D3 loc_40D8D3:                             ; CODE XREF: __Unwind_SjLj_Resume+3B↑j
.text:0040D8D3                 call    ___shmem_grabber_fc_key
.text:0040D8D8                 mov     ds:___shmem_ptr_fc_key, eax
.text:0040D8DD                 jmp     short loc_40D879
.text:0040D8DF ; ---------------------------------------------------------------------------
.text:0040D8DF
.text:0040D8DF loc_40D8DF:                             ; CODE XREF: __Unwind_SjLj_Resume+1B↑j
.text:0040D8DF                 call    _fc_key_init_once
.text:0040D8E4                 jmp     loc_40D85D
.text:0040D8E9 ; ---------------------------------------------------------------------------
.text:0040D8E9
.text:0040D8E9 loc_40D8E9:                             ; CODE XREF: __Unwind_SjLj_Resume+11↑j
.text:0040D8E9                 call    ___shmem_grabber_use_fc_key
.text:0040D8EE                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040D8F3                 jmp     loc_40D853
.text:0040D8F8 ; ---------------------------------------------------------------------------
.text:0040D8F8
.text:0040D8F8 loc_40D8F8:                             ; CODE XREF: __Unwind_SjLj_Resume+28↑j
.text:0040D8F8                 call    ___shmem_grabber_use_fc_key
.text:0040D8FD                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040D902                 jmp     loc_40D86A
.text:0040D907 ; ---------------------------------------------------------------------------
.text:0040D907
.text:0040D907 loc_40D907:                             ; CODE XREF: __Unwind_SjLj_Resume+83↑j
.text:0040D907                 call    ___shmem_grabber_fc_static
.text:0040D90C                 mov     ds:___shmem_ptr_fc_static, eax
.text:0040D911                 mov     esi, [eax]
.text:0040D913                 jmp     short loc_40D896
.text:0040D913 __Unwind_SjLj_Resume endp
.text:0040D913
.text:0040D913 ; ---------------------------------------------------------------------------
.text:0040D915                 align 4
.text:0040D918
.text:0040D918 ; =============== S U B R O U T I N E =======================================
.text:0040D918
.text:0040D918 ; Attributes: noreturn
.text:0040D918
.text:0040D918 ; _Unwind_Reason_Code __cdecl _Unwind_SjLj_Resume_or_Rethrow(struct _Unwind_Exception *lpuexcpt)
.text:0040D918                 public __Unwind_SjLj_Resume_or_Rethrow
.text:0040D918 __Unwind_SjLj_Resume_or_Rethrow proc near
.text:0040D918                                         ; CODE XREF: ___cxa_rethrow+35↑p
.text:0040D918
.text:0040D918 lpuexcpt        = dword ptr -2Ch
.text:0040D918 cur_context     = _Unwind_Context ptr -10h
.text:0040D918 exc             = dword ptr  4
.text:0040D918
.text:0040D918                 push    edi
.text:0040D919                 push    esi
.text:0040D91A                 push    ebx
.text:0040D91B                 sub     esp, 20h
.text:0040D91E                 mov     ebx, [esp+2Ch+exc]
.text:0040D922                 mov     eax, [ebx+0Ch]
.text:0040D925                 test    eax, eax
.text:0040D927                 jnz     short loc_40D938
.text:0040D929                 mov     [esp+2Ch+lpuexcpt], ebx ; lpuexcpt
.text:0040D92C                 call    __Unwind_SjLj_RaiseException
.text:0040D931                 add     esp, 20h
.text:0040D934                 pop     ebx
.text:0040D935                 pop     esi
.text:0040D936                 pop     edi
.text:0040D937                 retn
.text:0040D938 ; ---------------------------------------------------------------------------
.text:0040D938
.text:0040D938 loc_40D938:                             ; CODE XREF: __Unwind_SjLj_Resume_or_Rethrow+F↑j
.text:0040D938                 mov     eax, ds:___shmem_ptr_use_fc_key
.text:0040D93D                 test    eax, eax
.text:0040D93F                 jz      loc_40D9C8
.text:0040D945
.text:0040D945 loc_40D945:                             ; CODE XREF: __Unwind_SjLj_Resume_or_Rethrow+BA↓j
.text:0040D945                 mov     edi, [eax]
.text:0040D947                 test    edi, edi
.text:0040D949                 js      short loc_40D9B4
.text:0040D94B
.text:0040D94B loc_40D94B:                             ; CODE XREF: __Unwind_SjLj_Resume_or_Rethrow+A1↓j
.text:0040D94B                 mov     eax, ds:___shmem_ptr_use_fc_key
.text:0040D950                 test    eax, eax
.text:0040D952                 jz      loc_40D9D8
.text:0040D958
.text:0040D958 loc_40D958:                             ; CODE XREF: __Unwind_SjLj_Resume_or_Rethrow+CA↓j
.text:0040D958                 mov     esi, [eax]
.text:0040D95A                 test    esi, esi
.text:0040D95C                 jz      short loc_40D9A4
.text:0040D95E                 mov     eax, ds:___shmem_ptr_fc_key
.text:0040D963                 test    eax, eax
.text:0040D965                 jz      loc_40D9F8
.text:0040D96B
.text:0040D96B loc_40D96B:                             ; CODE XREF: __Unwind_SjLj_Resume_or_Rethrow+EA↓j
.text:0040D96B                 mov     esi, [eax]
.text:0040D96D                 call    _GetLastError@0 ; GetLastError()
.text:0040D972                 mov     edi, eax
.text:0040D974                 mov     [esp+2Ch+lpuexcpt], esi ; dwTlsIndex
.text:0040D977                 call    _TlsGetValue@4  ; TlsGetValue(x)
.text:0040D97C                 push    edx
.text:0040D97D                 mov     esi, eax
.text:0040D97F                 mov     [esp+2Ch+lpuexcpt], edi ; dwErrCode
.text:0040D982                 call    _SetLastError@4 ; SetLastError(x)
.text:0040D987                 push    ecx             ; current
.text:0040D988
.text:0040D988 loc_40D988:                             ; CODE XREF: __Unwind_SjLj_Resume_or_Rethrow+97↓j
.text:0040D988                                         ; __Unwind_SjLj_Resume_or_Rethrow+DC↓j
.text:0040D988 this_context = esi                      ; _Unwind_Context
.text:0040D988                 mov     [esp+2Ch+cur_context.fc], this_context
.text:0040D98C                 lea     edx, [esp+2Ch+cur_context] ; context
.text:0040D990                 mov     eax, ebx        ; exc
.text:0040D992                 call    __Unwind_ForcedUnwind_Phase2
.text:0040D997 code = eax                              ; _Unwind_Reason_Code
.text:0040D997                 cmp     code, 7
.text:0040D99A                 jz      short loc_40D9BC
.text:0040D99C                 call    _abort
.text:0040D99C ; ---------------------------------------------------------------------------
.text:0040D9A1                 align 4
.text:0040D9A4
.text:0040D9A4 loc_40D9A4:                             ; CODE XREF: __Unwind_SjLj_Resume_or_Rethrow+44↑j
.text:0040D9A4                 mov     eax, ds:___shmem_ptr_fc_static
.text:0040D9A9                 test    eax, eax
.text:0040D9AB                 jz      short loc_40D9E8
.text:0040D9AD                 mov     esi, [eax]
.text:0040D9AF                 jmp     short loc_40D988
.text:0040D9AF ; ---------------------------------------------------------------------------
.text:0040D9B1                 align 4
.text:0040D9B4
.text:0040D9B4 loc_40D9B4:                             ; CODE XREF: __Unwind_SjLj_Resume_or_Rethrow+31↑j
.text:0040D9B4                 call    _fc_key_init_once
.text:0040D9B9                 jmp     short loc_40D94B
.text:0040D9B9 ; ---------------------------------------------------------------------------
.text:0040D9BB this_context = esi                      ; _Unwind_Context
.text:0040D9BB code = eax                              ; _Unwind_Reason_Code
.text:0040D9BB                 align 4
.text:0040D9BC
.text:0040D9BC loc_40D9BC:                             ; CODE XREF: __Unwind_SjLj_Resume_or_Rethrow+82↑j
.text:0040D9BC                 lea     code, [esp+2Ch+cur_context]
.text:0040D9C0                 call    _uw_install_context_isra_3
.text:0040D9C5                 lea     esi, [esi+0]
.text:0040D9C8
.text:0040D9C8 loc_40D9C8:                             ; CODE XREF: __Unwind_SjLj_Resume_or_Rethrow+27↑j
.text:0040D9C8                 call    ___shmem_grabber_use_fc_key
.text:0040D9CD                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040D9D2                 jmp     loc_40D945
.text:0040D9D2 ; ---------------------------------------------------------------------------
.text:0040D9D7                 align 4
.text:0040D9D8
.text:0040D9D8 loc_40D9D8:                             ; CODE XREF: __Unwind_SjLj_Resume_or_Rethrow+3A↑j
.text:0040D9D8                 call    ___shmem_grabber_use_fc_key
.text:0040D9DD                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040D9E2                 jmp     loc_40D958
.text:0040D9E2 ; ---------------------------------------------------------------------------
.text:0040D9E7                 align 4
.text:0040D9E8
.text:0040D9E8 loc_40D9E8:                             ; CODE XREF: __Unwind_SjLj_Resume_or_Rethrow+93↑j
.text:0040D9E8                 call    ___shmem_grabber_fc_static
.text:0040D9ED                 mov     ds:___shmem_ptr_fc_static, eax
.text:0040D9F2                 mov     esi, [eax]
.text:0040D9F4                 jmp     short loc_40D988
.text:0040D9F4 ; ---------------------------------------------------------------------------
.text:0040D9F6                 align 4
.text:0040D9F8
.text:0040D9F8 loc_40D9F8:                             ; CODE XREF: __Unwind_SjLj_Resume_or_Rethrow+4D↑j
.text:0040D9F8                 call    ___shmem_grabber_fc_key
.text:0040D9FD                 mov     ds:___shmem_ptr_fc_key, eax
.text:0040DA02                 jmp     loc_40D96B
.text:0040DA02 __Unwind_SjLj_Resume_or_Rethrow endp
.text:0040DA02
.text:0040DA02 ; ---------------------------------------------------------------------------
.text:0040DA07                 align 4
.text:0040DA08
.text:0040DA08 ; =============== S U B R O U T I N E =======================================
.text:0040DA08
.text:0040DA08
.text:0040DA08 ; void __cdecl _Unwind_DeleteException(struct _Unwind_Exception *lpuexcpt)
.text:0040DA08                 public __Unwind_DeleteException
.text:0040DA08 __Unwind_DeleteException proc near      ; CODE XREF: ___cxa_end_catch+32↑p
.text:0040DA08                                         ; ___cxa_end_catch+6F↑p ...
.text:0040DA08
.text:0040DA08 var_1C          = dword ptr -1Ch
.text:0040DA08 var_18          = dword ptr -18h
.text:0040DA08 exc             = dword ptr  4
.text:0040DA08
.text:0040DA08                 sub     esp, 1Ch
.text:0040DA0B                 mov     edx, [esp+1Ch+exc]
.text:0040DA0F                 mov     eax, [edx+8]
.text:0040DA12                 test    eax, eax
.text:0040DA14                 jz      short loc_40DA23
.text:0040DA16                 mov     [esp+1Ch+var_18], edx
.text:0040DA1A                 mov     [esp+1Ch+var_1C], 1
.text:0040DA21                 call    eax
.text:0040DA23
.text:0040DA23 loc_40DA23:                             ; CODE XREF: __Unwind_DeleteException+C↑j
.text:0040DA23                 add     esp, 1Ch
.text:0040DA26                 retn
.text:0040DA26 __Unwind_DeleteException endp
.text:0040DA26
.text:0040DA26 ; ---------------------------------------------------------------------------
.text:0040DA27                 align 4
.text:0040DA28
.text:0040DA28 ; =============== S U B R O U T I N E =======================================
.text:0040DA28
.text:0040DA28
.text:0040DA28 ; _Unwind_Reason_Code __cdecl _Unwind_Backtrace(_Unwind_Trace_Fn pfntrace, void *lpdata)
.text:0040DA28                 public __Unwind_Backtrace
.text:0040DA28 __Unwind_Backtrace proc near
.text:0040DA28
.text:0040DA28 dwTlsIndex      = dword ptr -3Ch
.text:0040DA28 var_38          = dword ptr -38h
.text:0040DA28 context         = _Unwind_Context ptr -20h
.text:0040DA28 trace           = dword ptr  4
.text:0040DA28 trace_argument  = dword ptr  8
.text:0040DA28
.text:0040DA28                 push    ebp
.text:0040DA29                 push    edi
.text:0040DA2A                 push    esi
.text:0040DA2B                 push    ebx
.text:0040DA2C                 sub     esp, 2Ch
.text:0040DA2F                 mov     esi, [esp+3Ch+trace]
.text:0040DA33                 mov     ebp, [esp+3Ch+trace_argument]
.text:0040DA37                 mov     eax, ds:___shmem_ptr_use_fc_key
.text:0040DA3C                 test    eax, eax
.text:0040DA3E                 jz      loc_40DAFE
.text:0040DA44
.text:0040DA44 loc_40DA44:                             ; CODE XREF: __Unwind_Backtrace+E0↓j
.text:0040DA44                 mov     edi, [eax]
.text:0040DA46                 test    edi, edi
.text:0040DA48                 js      loc_40DAF4
.text:0040DA4E
.text:0040DA4E loc_40DA4E:                             ; CODE XREF: __Unwind_Backtrace+D1↓j
.text:0040DA4E                 mov     eax, ds:___shmem_ptr_use_fc_key
.text:0040DA53                 test    eax, eax
.text:0040DA55                 jz      loc_40DB0D
.text:0040DA5B
.text:0040DA5B loc_40DA5B:                             ; CODE XREF: __Unwind_Backtrace+EF↓j
.text:0040DA5B                 mov     ebx, [eax]
.text:0040DA5D                 test    ebx, ebx
.text:0040DA5F                 jz      short loc_40DAC8
.text:0040DA61                 mov     eax, ds:___shmem_ptr_fc_key
.text:0040DA66                 test    eax, eax
.text:0040DA68                 jz      short loc_40DAE5
.text:0040DA6A
.text:0040DA6A loc_40DA6A:                             ; CODE XREF: __Unwind_Backtrace+C7↓j
.text:0040DA6A                 mov     ebx, [eax]
.text:0040DA6C                 call    _GetLastError@0 ; GetLastError()
.text:0040DA71                 mov     edi, eax
.text:0040DA73                 mov     [esp+3Ch+dwTlsIndex], ebx ; dwTlsIndex
.text:0040DA76                 call    _TlsGetValue@4  ; TlsGetValue(x)
.text:0040DA7B                 push    edx
.text:0040DA7C                 mov     ebx, eax
.text:0040DA7E                 mov     [esp+3Ch+dwTlsIndex], edi ; dwErrCode
.text:0040DA81                 call    _SetLastError@4 ; SetLastError(x)
.text:0040DA86                 push    ecx
.text:0040DA87
.text:0040DA87 loc_40DA87:                             ; CODE XREF: __Unwind_Backtrace+AB↓j
.text:0040DA87                                         ; __Unwind_Backtrace+100↓j
.text:0040DA87                 mov     [esp+3Ch+context.fc], ebx
.text:0040DA8B                 lea     edi, [esp+3Ch+context]
.text:0040DA8F                 mov     [esp+3Ch+var_38], ebp
.text:0040DA93                 mov     [esp+3Ch+dwTlsIndex], edi
.text:0040DA96                 test    ebx, ebx
.text:0040DA98                 jz      short loc_40DAB7
.text:0040DA9A                 xchg    ax, ax
.text:0040DA9C
.text:0040DA9C loc_40DA9C:                             ; CODE XREF: __Unwind_Backtrace+8D↓j
.text:0040DA9C                 call    esi
.text:0040DA9E                 test    eax, eax
.text:0040DAA0                 jnz     short loc_40DAD8
.text:0040DAA2                 mov     eax, [esp+3Ch+context.fc]
.text:0040DAA6                 mov     ebx, [eax]
.text:0040DAA8                 mov     [esp+3Ch+context.fc], ebx
.text:0040DAAC                 mov     [esp+3Ch+var_38], ebp
.text:0040DAB0                 mov     [esp+3Ch+dwTlsIndex], edi
.text:0040DAB3                 test    ebx, ebx
.text:0040DAB5                 jnz     short loc_40DA9C
.text:0040DAB7
.text:0040DAB7 loc_40DAB7:                             ; CODE XREF: __Unwind_Backtrace+70↑j
.text:0040DAB7                 call    esi
.text:0040DAB9                 test    eax, eax
.text:0040DABB                 jnz     short loc_40DAD8
.text:0040DABD                 mov     al, 5
.text:0040DABF                 add     esp, 2Ch
.text:0040DAC2                 pop     ebx
.text:0040DAC3                 pop     esi
.text:0040DAC4                 pop     edi
.text:0040DAC5                 pop     ebp
.text:0040DAC6                 retn
.text:0040DAC6 ; ---------------------------------------------------------------------------
.text:0040DAC7                 align 4
.text:0040DAC8
.text:0040DAC8 loc_40DAC8:                             ; CODE XREF: __Unwind_Backtrace+37↑j
.text:0040DAC8                 mov     eax, ds:___shmem_ptr_fc_static
.text:0040DACD                 test    eax, eax
.text:0040DACF                 jz      short loc_40DB1C
.text:0040DAD1                 mov     ebx, [eax]
.text:0040DAD3                 jmp     short loc_40DA87
.text:0040DAD3 ; ---------------------------------------------------------------------------
.text:0040DAD5                 align 4
.text:0040DAD8
.text:0040DAD8 loc_40DAD8:                             ; CODE XREF: __Unwind_Backtrace+78↑j
.text:0040DAD8                                         ; __Unwind_Backtrace+93↑j
.text:0040DAD8                 mov     eax, 3
.text:0040DADD                 add     esp, 2Ch
.text:0040DAE0                 pop     ebx
.text:0040DAE1                 pop     esi
.text:0040DAE2                 pop     edi
.text:0040DAE3                 pop     ebp
.text:0040DAE4                 retn
.text:0040DAE5 ; ---------------------------------------------------------------------------
.text:0040DAE5
.text:0040DAE5 loc_40DAE5:                             ; CODE XREF: __Unwind_Backtrace+40↑j
.text:0040DAE5                 call    ___shmem_grabber_fc_key
.text:0040DAEA                 mov     ds:___shmem_ptr_fc_key, eax
.text:0040DAEF                 jmp     loc_40DA6A
.text:0040DAF4 ; ---------------------------------------------------------------------------
.text:0040DAF4
.text:0040DAF4 loc_40DAF4:                             ; CODE XREF: __Unwind_Backtrace+20↑j
.text:0040DAF4                 call    _fc_key_init_once
.text:0040DAF9                 jmp     loc_40DA4E
.text:0040DAFE ; ---------------------------------------------------------------------------
.text:0040DAFE
.text:0040DAFE loc_40DAFE:                             ; CODE XREF: __Unwind_Backtrace+16↑j
.text:0040DAFE                 call    ___shmem_grabber_use_fc_key
.text:0040DB03                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040DB08                 jmp     loc_40DA44
.text:0040DB0D ; ---------------------------------------------------------------------------
.text:0040DB0D
.text:0040DB0D loc_40DB0D:                             ; CODE XREF: __Unwind_Backtrace+2D↑j
.text:0040DB0D                 call    ___shmem_grabber_use_fc_key
.text:0040DB12                 mov     ds:___shmem_ptr_use_fc_key, eax
.text:0040DB17                 jmp     loc_40DA5B
.text:0040DB1C ; ---------------------------------------------------------------------------
.text:0040DB1C
.text:0040DB1C loc_40DB1C:                             ; CODE XREF: __Unwind_Backtrace+A7↑j
.text:0040DB1C                 call    ___shmem_grabber_fc_static
.text:0040DB21                 mov     ds:___shmem_ptr_fc_static, eax
.text:0040DB26                 mov     ebx, [eax]
.text:0040DB28                 jmp     loc_40DA87
.text:0040DB28 __Unwind_Backtrace endp
.text:0040DB28
.text:0040DB28 ; ---------------------------------------------------------------------------
.text:0040DB2D                 align 10h
.text:0040DB30
.text:0040DB30 ; =============== S U B R O U T I N E =======================================
.text:0040DB30
.text:0040DB30
.text:0040DB30 ; int __cdecl __gthr_win32_once(__gthread_once_t *once, void (*func)(void))
.text:0040DB30                 public ___gthr_win32_once
.text:0040DB30 ___gthr_win32_once proc near            ; CODE XREF: ___cxa_guard_acquire+5E↑p
.text:0040DB30
.text:0040DB30 lpAddend        = dword ptr -1Ch
.text:0040DB30 once            = dword ptr  4
.text:0040DB30 func            = dword ptr  8
.text:0040DB30
.text:0040DB30                 push    ebx
.text:0040DB31                 sub     esp, 18h
.text:0040DB34                 mov     ebx, [esp+1Ch+once]
.text:0040DB38                 test    ebx, ebx
.text:0040DB3A                 jz      short loc_40DB8C
.text:0040DB3C                 mov     eax, [esp+1Ch+func]
.text:0040DB40                 test    eax, eax
.text:0040DB42                 jz      short loc_40DB8C
.text:0040DB44                 mov     eax, [ebx]
.text:0040DB46                 test    eax, eax
.text:0040DB48                 jz      short loc_40DB54
.text:0040DB4A
.text:0040DB4A loc_40DB4A:                             ; CODE XREF: ___gthr_win32_once+40↓j
.text:0040DB4A                                         ; ___gthr_win32_once+57↓j
.text:0040DB4A                 xor     eax, eax
.text:0040DB4C                 add     esp, 18h
.text:0040DB4F                 pop     ebx
.text:0040DB50                 retn
.text:0040DB50 ; ---------------------------------------------------------------------------
.text:0040DB51                 align 4
.text:0040DB54
.text:0040DB54 loc_40DB54:                             ; CODE XREF: ___gthr_win32_once+18↑j
.text:0040DB54                 lea     eax, [ebx+4]
.text:0040DB57                 mov     [esp+1Ch+lpAddend], eax ; lpAddend
.text:0040DB5A                 call    _InterlockedIncrement@4 ; InterlockedIncrement(x)
.text:0040DB5F                 push    ecx
.text:0040DB60                 test    eax, eax
.text:0040DB62                 jnz     short loc_40DB81
.text:0040DB64                 mov     eax, [esp+1Ch+func]
.text:0040DB68                 call    eax
.text:0040DB6A                 mov     dword ptr [ebx], 1
.text:0040DB70                 jmp     short loc_40DB4A
.text:0040DB70 ; ---------------------------------------------------------------------------
.text:0040DB72                 align 4
.text:0040DB74
.text:0040DB74 loc_40DB74:                             ; CODE XREF: ___gthr_win32_once+55↓j
.text:0040DB74                 mov     [esp+1Ch+lpAddend], 0 ; dwMilliseconds
.text:0040DB7B                 call    _Sleep@4        ; Sleep(x)
.text:0040DB80                 push    edx
.text:0040DB81
.text:0040DB81 loc_40DB81:                             ; CODE XREF: ___gthr_win32_once+32↑j
.text:0040DB81                 mov     eax, [ebx]
.text:0040DB83                 test    eax, eax
.text:0040DB85                 jz      short loc_40DB74
.text:0040DB87                 jmp     short loc_40DB4A
.text:0040DB87 ; ---------------------------------------------------------------------------
.text:0040DB89                 align 4
.text:0040DB8C
.text:0040DB8C loc_40DB8C:                             ; CODE XREF: ___gthr_win32_once+A↑j
.text:0040DB8C                                         ; ___gthr_win32_once+12↑j
.text:0040DB8C                 mov     eax, 16h
.text:0040DB91                 add     esp, 18h
.text:0040DB94                 pop     ebx
.text:0040DB95                 retn
.text:0040DB95 ___gthr_win32_once endp
.text:0040DB95
.text:0040DB95 ; ---------------------------------------------------------------------------
.text:0040DB96                 align 4
.text:0040DB98
.text:0040DB98 ; =============== S U B R O U T I N E =======================================
.text:0040DB98
.text:0040DB98
.text:0040DB98 ; int __cdecl __gthr_win32_key_create(__gthread_key_t *key, void (*dtor)(void *))
.text:0040DB98                 public ___gthr_win32_key_create
.text:0040DB98 ___gthr_win32_key_create proc near      ; CODE XREF: ___shmem_init_init+37↑p
.text:0040DB98
.text:0040DB98 tls_index       = dword ptr  4
.text:0040DB98 dtor            = dword ptr  8
.text:0040DB98
.text:0040DB98                 push    esi
.text:0040DB99                 push    ebx
.text:0040DB9A                 push    eax
.text:0040DB9B                 mov     esi, [esp+0Ch+tls_index]
.text:0040DB9F                 mov     ebx, [esp+0Ch+dtor]
.text:0040DBA3                 call    _TlsAlloc@0     ; TlsAlloc()
.text:0040DBA8 tls_index_0 = eax                       ; DWORD
.text:0040DBA8                 cmp     tls_index_0, 0FFFFFFFFh
.text:0040DBAB                 jz      short loc_40DBC0
.text:0040DBAD                 mov     [esi], tls_index_0
.text:0040DBAF                 mov     [esp+0Ch+dtor], ebx
.text:0040DBB3                 mov     [esp+0Ch+tls_index], tls_index_0
.text:0040DBB7                 pop     tls_index_0
.text:0040DBB8                 pop     ebx
.text:0040DBB9                 pop     esi
.text:0040DBBA                 jmp     ___mingwthr_key_dtor
.text:0040DBBA ; ---------------------------------------------------------------------------
.text:0040DBBF tls_index_0 = eax                       ; DWORD
.text:0040DBBF                 align 10h
.text:0040DBC0
.text:0040DBC0 loc_40DBC0:                             ; CODE XREF: ___gthr_win32_key_create+13↑j
.text:0040DBC0                 pop     tls_index_0
.text:0040DBC1                 pop     ebx
.text:0040DBC2                 pop     esi
.text:0040DBC3                 jmp     _GetLastError@0 ; GetLastError()
.text:0040DBC3 ___gthr_win32_key_create endp
.text:0040DBC3
.text:0040DBC8
.text:0040DBC8 ; =============== S U B R O U T I N E =======================================
.text:0040DBC8
.text:0040DBC8
.text:0040DBC8 ; int __cdecl __gthr_win32_key_delete(__gthread_key_t key)
.text:0040DBC8                 public ___gthr_win32_key_delete
.text:0040DBC8 ___gthr_win32_key_delete proc near
.text:0040DBC8
.text:0040DBC8 dwTlsIndex      = dword ptr -1Ch
.text:0040DBC8 key             = dword ptr  4
.text:0040DBC8
.text:0040DBC8                 sub     esp, 1Ch
.text:0040DBCB                 mov     eax, [esp+1Ch+key]
.text:0040DBCF                 mov     [esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
.text:0040DBD2                 call    _TlsFree@4      ; TlsFree(x)
.text:0040DBD7                 push    edx
.text:0040DBD8                 test    eax, eax
.text:0040DBDA                 jz      short loc_40DBE4
.text:0040DBDC                 xor     eax, eax
.text:0040DBDE                 add     esp, 1Ch
.text:0040DBE1                 retn
.text:0040DBE1 ; ---------------------------------------------------------------------------
.text:0040DBE2                 align 4
.text:0040DBE4
.text:0040DBE4 loc_40DBE4:                             ; CODE XREF: ___gthr_win32_key_delete+12↑j
.text:0040DBE4                 add     esp, 1Ch
.text:0040DBE7                 jmp     _GetLastError@0 ; GetLastError()
.text:0040DBE7 ___gthr_win32_key_delete endp
.text:0040DBE7
.text:0040DBEC
.text:0040DBEC ; =============== S U B R O U T I N E =======================================
.text:0040DBEC
.text:0040DBEC
.text:0040DBEC ; void *__cdecl __gthr_win32_getspecific(__gthread_key_t key)
.text:0040DBEC                 public ___gthr_win32_getspecific
.text:0040DBEC ___gthr_win32_getspecific proc near     ; CODE XREF: ___cxa_get_globals_fast+59↑p
.text:0040DBEC                                         ; ___cxa_get_globals+5D↑p
.text:0040DBEC
.text:0040DBEC dwTlsIndex      = dword ptr -2Ch
.text:0040DBEC var_10          = dword ptr -10h
.text:0040DBEC key             = dword ptr  4
.text:0040DBEC
.text:0040DBEC                 push    esi
.text:0040DBED                 sub     esp, 28h
.text:0040DBF0                 call    _GetLastError@0 ; GetLastError()
.text:0040DBF5                 mov     esi, eax
.text:0040DBF7 lasterror = eax                         ; DWORD
.text:0040DBF7                 mov     lasterror, [esp+2Ch+key]
.text:0040DBFB lasterror = esi                         ; DWORD
.text:0040DBFB                 mov     [esp+2Ch+dwTlsIndex], eax ; dwTlsIndex
.text:0040DBFE                 call    _TlsGetValue@4  ; TlsGetValue(x)
.text:0040DC03                 push    ecx
.text:0040DC04 ptr = eax                               ; void *
.text:0040DC04                 mov     [esp+2Ch+dwTlsIndex], lasterror ; dwErrCode
.text:0040DC07                 mov     [esp+2Ch+var_10], ptr
.text:0040DC0B                 call    _SetLastError@4 ; SetLastError(x)
.text:0040DC10                 push    esi
.text:0040DC11                 mov     eax, [esp+2Ch+var_10]
.text:0040DC15                 add     esp, 28h
.text:0040DC18                 pop     esi
.text:0040DC19                 retn
.text:0040DC19 ___gthr_win32_getspecific endp
.text:0040DC19
.text:0040DC19 ; ---------------------------------------------------------------------------
.text:0040DC1A                 align 4
.text:0040DC1C
.text:0040DC1C ; =============== S U B R O U T I N E =======================================
.text:0040DC1C
.text:0040DC1C
.text:0040DC1C ; int __cdecl __gthr_win32_setspecific(__gthread_key_t key, const void *ptr)
.text:0040DC1C                 public ___gthr_win32_setspecific
.text:0040DC1C ___gthr_win32_setspecific proc near     ; CODE XREF: ___cxa_get_globals+EE↑p
.text:0040DC1C
.text:0040DC1C dwTlsIndex      = dword ptr -1Ch
.text:0040DC1C lpTlsValue      = dword ptr -18h
.text:0040DC1C key             = dword ptr  4
.text:0040DC1C ptr             = dword ptr  8
.text:0040DC1C
.text:0040DC1C                 sub     esp, 1Ch
.text:0040DC1F                 mov     eax, [esp+1Ch+ptr]
.text:0040DC23                 mov     [esp+1Ch+lpTlsValue], eax ; lpTlsValue
.text:0040DC27                 mov     eax, [esp+1Ch+key]
.text:0040DC2B                 mov     [esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
.text:0040DC2E                 call    _TlsSetValue@8  ; TlsSetValue(x,x)
.text:0040DC33                 sub     esp, 8
.text:0040DC36                 test    eax, eax
.text:0040DC38                 jz      short loc_40DC40
.text:0040DC3A                 xor     eax, eax
.text:0040DC3C                 add     esp, 1Ch
.text:0040DC3F                 retn
.text:0040DC40 ; ---------------------------------------------------------------------------
.text:0040DC40
.text:0040DC40 loc_40DC40:                             ; CODE XREF: ___gthr_win32_setspecific+1C↑j
.text:0040DC40                 add     esp, 1Ch
.text:0040DC43                 jmp     _GetLastError@0 ; GetLastError()
.text:0040DC43 ___gthr_win32_setspecific endp
.text:0040DC43
.text:0040DC48
.text:0040DC48 ; =============== S U B R O U T I N E =======================================
.text:0040DC48
.text:0040DC48
.text:0040DC48 ; void __cdecl __gthr_win32_mutex_init_function(__gthread_mutex_t *mutex)
.text:0040DC48                 public ___gthr_win32_mutex_init_function
.text:0040DC48 ___gthr_win32_mutex_init_function proc near
.text:0040DC48                                         ; CODE XREF: __GLOBAL__sub_I___cxa_allocate_exception+14↓p
.text:0040DC48
.text:0040DC48 lpSemaphoreAttributes= dword ptr -1Ch
.text:0040DC48 lInitialCount   = dword ptr -18h
.text:0040DC48 lMaximumCount   = dword ptr -14h
.text:0040DC48 lpName          = dword ptr -10h
.text:0040DC48 mutex           = dword ptr  4
.text:0040DC48
.text:0040DC48                 push    ebx
.text:0040DC49                 sub     esp, 18h
.text:0040DC4C                 mov     ebx, [esp+1Ch+mutex]
.text:0040DC50                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:0040DC56                 mov     [esp+1Ch+lpName], 0 ; lpName
.text:0040DC5E                 mov     [esp+1Ch+lMaximumCount], 0FFFFh ; lMaximumCount
.text:0040DC66                 mov     [esp+1Ch+lInitialCount], 0 ; lInitialCount
.text:0040DC6E                 mov     [esp+1Ch+lpSemaphoreAttributes], 0 ; lpSemaphoreAttributes
.text:0040DC75                 call    _CreateSemaphoreA@16 ; CreateSemaphoreA(x,x,x,x)
.text:0040DC7A                 sub     esp, 10h
.text:0040DC7D                 mov     [ebx+4], eax
.text:0040DC80                 add     esp, 18h
.text:0040DC83                 pop     ebx
.text:0040DC84                 retn
.text:0040DC84 ___gthr_win32_mutex_init_function endp
.text:0040DC84
.text:0040DC84 ; ---------------------------------------------------------------------------
.text:0040DC85                 align 4
.text:0040DC88
.text:0040DC88 ; =============== S U B R O U T I N E =======================================
.text:0040DC88
.text:0040DC88
.text:0040DC88 ; void __cdecl __gthr_win32_mutex_destroy(__gthread_mutex_t *mutex)
.text:0040DC88                 public ___gthr_win32_mutex_destroy
.text:0040DC88 ___gthr_win32_mutex_destroy proc near   ; CODE XREF: ___tcf_0+16↑p
.text:0040DC88
.text:0040DC88 hObject         = dword ptr -1Ch
.text:0040DC88 mutex           = dword ptr  4
.text:0040DC88
.text:0040DC88                 sub     esp, 1Ch
.text:0040DC8B                 mov     eax, [esp+1Ch+mutex]
.text:0040DC8F                 mov     eax, [eax+4]
.text:0040DC92                 mov     [esp+1Ch+hObject], eax ; hObject
.text:0040DC95                 call    _CloseHandle@4  ; CloseHandle(x)
.text:0040DC9A                 push    eax
.text:0040DC9B                 add     esp, 1Ch
.text:0040DC9E                 retn
.text:0040DC9E ___gthr_win32_mutex_destroy endp
.text:0040DC9E
.text:0040DC9E ; ---------------------------------------------------------------------------
.text:0040DC9F                 align 10h
.text:0040DCA0
.text:0040DCA0 ; =============== S U B R O U T I N E =======================================
.text:0040DCA0
.text:0040DCA0
.text:0040DCA0 ; int __cdecl __gthr_win32_mutex_lock(__gthread_mutex_t *mutex)
.text:0040DCA0                 public ___gthr_win32_mutex_lock
.text:0040DCA0 ___gthr_win32_mutex_lock proc near      ; CODE XREF: ___cxa_allocate_exception+143↑p
.text:0040DCA0                                         ; ___cxa_free_exception+9F↑p ...
.text:0040DCA0
.text:0040DCA0 lpAddend        = dword ptr -1Ch
.text:0040DCA0 dwMilliseconds  = dword ptr -18h
.text:0040DCA0 mutex           = dword ptr  4
.text:0040DCA0
.text:0040DCA0                 push    ebx
.text:0040DCA1                 sub     esp, 18h
.text:0040DCA4                 mov     ebx, [esp+1Ch+mutex]
.text:0040DCA8                 mov     [esp+1Ch+lpAddend], ebx ; lpAddend
.text:0040DCAB                 call    _InterlockedIncrement@4 ; InterlockedIncrement(x)
.text:0040DCB0                 push    edx
.text:0040DCB1                 test    eax, eax
.text:0040DCB3                 jnz     short loc_40DCBC
.text:0040DCB5
.text:0040DCB5 loc_40DCB5:                             ; CODE XREF: ___gthr_win32_mutex_lock+34↓j
.text:0040DCB5                 xor     eax, eax
.text:0040DCB7                 add     esp, 18h
.text:0040DCBA                 pop     ebx
.text:0040DCBB                 retn
.text:0040DCBC ; ---------------------------------------------------------------------------
.text:0040DCBC
.text:0040DCBC loc_40DCBC:                             ; CODE XREF: ___gthr_win32_mutex_lock+13↑j
.text:0040DCBC                 mov     [esp+1Ch+dwMilliseconds], 0FFFFFFFFh ; dwMilliseconds
.text:0040DCC4                 mov     eax, [ebx+4]
.text:0040DCC7                 mov     [esp+1Ch+lpAddend], eax ; hHandle
.text:0040DCCA                 call    _WaitForSingleObject@8 ; WaitForSingleObject(x,x)
.text:0040DCCF                 sub     esp, 8
.text:0040DCD2                 test    eax, eax
.text:0040DCD4                 jz      short loc_40DCB5
.text:0040DCD6                 mov     [esp+1Ch+lpAddend], ebx ; lpAddend
.text:0040DCD9                 call    _InterlockedDecrement@4 ; InterlockedDecrement(x)
.text:0040DCDE                 push    eax
.text:0040DCDF                 mov     eax, 1
.text:0040DCE4                 add     esp, 18h
.text:0040DCE7                 pop     ebx
.text:0040DCE8                 retn
.text:0040DCE8 ___gthr_win32_mutex_lock endp
.text:0040DCE8
.text:0040DCE8 ; ---------------------------------------------------------------------------
.text:0040DCE9                 align 4
.text:0040DCEC
.text:0040DCEC ; =============== S U B R O U T I N E =======================================
.text:0040DCEC
.text:0040DCEC
.text:0040DCEC ; int __cdecl __gthr_win32_mutex_trylock(__gthread_mutex_t *mutex)
.text:0040DCEC                 public ___gthr_win32_mutex_trylock
.text:0040DCEC ___gthr_win32_mutex_trylock proc near
.text:0040DCEC
.text:0040DCEC mutex           = dword ptr  4
.text:0040DCEC
.text:0040DCEC                 mov     edx, [esp+mutex]
.text:0040DCF0                 mov     eax, 0FFFFFFFFh
.text:0040DCF5                 xor     ecx, ecx
.text:0040DCF7                 lock cmpxchg [edx], ecx
.text:0040DCFB                 not     eax
.text:0040DCFD                 shr     eax, 1Fh
.text:0040DD00                 retn
.text:0040DD00 ___gthr_win32_mutex_trylock endp
.text:0040DD00
.text:0040DD00 ; ---------------------------------------------------------------------------
.text:0040DD01                 align 4
.text:0040DD04
.text:0040DD04 ; =============== S U B R O U T I N E =======================================
.text:0040DD04
.text:0040DD04
.text:0040DD04 ; int __cdecl __gthr_win32_mutex_unlock(__gthread_mutex_t *mutex)
.text:0040DD04                 public ___gthr_win32_mutex_unlock
.text:0040DD04 ___gthr_win32_mutex_unlock proc near    ; CODE XREF: ___cxa_allocate_exception+F4↑p
.text:0040DD04                                         ; ___cxa_free_exception+D1↑p ...
.text:0040DD04
.text:0040DD04 lpAddend        = dword ptr -1Ch
.text:0040DD04 lReleaseCount   = dword ptr -18h
.text:0040DD04 lpPreviousCount = dword ptr -14h
.text:0040DD04 mutex           = dword ptr  4
.text:0040DD04
.text:0040DD04                 push    ebx
.text:0040DD05                 sub     esp, 18h
.text:0040DD08                 mov     ebx, [esp+1Ch+mutex]
.text:0040DD0C                 mov     [esp+1Ch+lpAddend], ebx ; lpAddend
.text:0040DD0F                 call    _InterlockedDecrement@4 ; InterlockedDecrement(x)
.text:0040DD14                 push    ecx
.text:0040DD15                 test    eax, eax
.text:0040DD17                 js      short loc_40DD44
.text:0040DD19                 mov     [esp+1Ch+lpPreviousCount], 0 ; lpPreviousCount
.text:0040DD21                 mov     [esp+1Ch+lReleaseCount], 1 ; lReleaseCount
.text:0040DD29                 mov     eax, [ebx+4]
.text:0040DD2C                 mov     [esp+1Ch+lpAddend], eax ; hSemaphore
.text:0040DD2F                 call    _ReleaseSemaphore@12 ; ReleaseSemaphore(x,x,x)
.text:0040DD34                 sub     esp, 0Ch
.text:0040DD37                 test    eax, eax
.text:0040DD39                 setz    al
.text:0040DD3C                 movzx   eax, al
.text:0040DD3F                 add     esp, 18h
.text:0040DD42                 pop     ebx
.text:0040DD43                 retn
.text:0040DD44 ; ---------------------------------------------------------------------------
.text:0040DD44
.text:0040DD44 loc_40DD44:                             ; CODE XREF: ___gthr_win32_mutex_unlock+13↑j
.text:0040DD44                 xor     eax, eax
.text:0040DD46                 add     esp, 18h
.text:0040DD49                 pop     ebx
.text:0040DD4A                 retn
.text:0040DD4A ___gthr_win32_mutex_unlock endp
.text:0040DD4A
.text:0040DD4A ; ---------------------------------------------------------------------------
.text:0040DD4B                 align 4
.text:0040DD4C
.text:0040DD4C ; =============== S U B R O U T I N E =======================================
.text:0040DD4C
.text:0040DD4C
.text:0040DD4C ; void __cdecl __gthr_win32_recursive_mutex_init_function(__gthread_recursive_mutex_t *mutex)
.text:0040DD4C                 public ___gthr_win32_recursive_mutex_init_function
.text:0040DD4C ___gthr_win32_recursive_mutex_init_function proc near
.text:0040DD4C                                         ; CODE XREF: `anonymous namespace'::init(void)+1E↑p
.text:0040DD4C
.text:0040DD4C lpSemaphoreAttributes= dword ptr -1Ch
.text:0040DD4C lInitialCount   = dword ptr -18h
.text:0040DD4C lMaximumCount   = dword ptr -14h
.text:0040DD4C lpName          = dword ptr -10h
.text:0040DD4C mutex           = dword ptr  4
.text:0040DD4C
.text:0040DD4C                 push    ebx
.text:0040DD4D                 sub     esp, 18h
.text:0040DD50                 mov     ebx, [esp+1Ch+mutex]
.text:0040DD54                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:0040DD5A                 mov     dword ptr [ebx+4], 0
.text:0040DD61                 mov     dword ptr [ebx+8], 0
.text:0040DD68                 mov     [esp+1Ch+lpName], 0 ; lpName
.text:0040DD70                 mov     [esp+1Ch+lMaximumCount], 0FFFFh ; lMaximumCount
.text:0040DD78                 mov     [esp+1Ch+lInitialCount], 0 ; lInitialCount
.text:0040DD80                 mov     [esp+1Ch+lpSemaphoreAttributes], 0 ; lpSemaphoreAttributes
.text:0040DD87                 call    _CreateSemaphoreA@16 ; CreateSemaphoreA(x,x,x,x)
.text:0040DD8C                 sub     esp, 10h
.text:0040DD8F                 mov     [ebx+0Ch], eax
.text:0040DD92                 add     esp, 18h
.text:0040DD95                 pop     ebx
.text:0040DD96                 retn
.text:0040DD96 ___gthr_win32_recursive_mutex_init_function endp
.text:0040DD96
.text:0040DD96 ; ---------------------------------------------------------------------------
.text:0040DD97                 align 4
.text:0040DD98
.text:0040DD98 ; =============== S U B R O U T I N E =======================================
.text:0040DD98
.text:0040DD98
.text:0040DD98 ; int __cdecl __gthr_win32_recursive_mutex_lock(__gthread_recursive_mutex_t *mutex)
.text:0040DD98                 public ___gthr_win32_recursive_mutex_lock
.text:0040DD98 ___gthr_win32_recursive_mutex_lock proc near
.text:0040DD98                                         ; CODE XREF: ___cxa_guard_acquire+EF↑p
.text:0040DD98
.text:0040DD98 lpAddend        = dword ptr -1Ch
.text:0040DD98 dwMilliseconds  = dword ptr -18h
.text:0040DD98 mutex           = dword ptr  4
.text:0040DD98
.text:0040DD98                 push    esi
.text:0040DD99                 push    ebx
.text:0040DD9A                 sub     esp, 14h
.text:0040DD9D                 mov     ebx, [esp+1Ch+mutex]
.text:0040DDA1                 call    _GetCurrentThreadId@0 ; GetCurrentThreadId()
.text:0040DDA6                 mov     esi, eax
.text:0040DDA8 me = eax                                ; DWORD
.text:0040DDA8                 mov     [esp+1Ch+lpAddend], ebx ; lpAddend
.text:0040DDAB                 call    _InterlockedIncrement@4 ; InterlockedIncrement(x)
.text:0040DDB0                 push    edx
.text:0040DDB1                 test    eax, eax
.text:0040DDB3                 jz      short loc_40DDD4
.text:0040DDB5                 cmp     [ebx+8], me
.text:0040DDB8                 jz      short loc_40DDF8
.text:0040DDBA                 mov     [esp+1Ch+dwMilliseconds], 0FFFFFFFFh ; dwMilliseconds
.text:0040DDC2                 mov     eax, [ebx+0Ch]
.text:0040DDC5                 mov     [esp+1Ch+lpAddend], eax ; hHandle
.text:0040DDC8                 call    _WaitForSingleObject@8 ; WaitForSingleObject(x,x)
.text:0040DDCD                 sub     esp, 8
.text:0040DDD0                 test    eax, eax
.text:0040DDD2                 jnz     short loc_40DDE4
.text:0040DDD4
.text:0040DDD4 loc_40DDD4:                             ; CODE XREF: ___gthr_win32_recursive_mutex_lock+1B↑j
.text:0040DDD4                 mov     dword ptr [ebx+4], 1
.text:0040DDDB                 mov     [ebx+8], me
.text:0040DDDE                 add     esp, 14h
.text:0040DDE1                 pop     ebx
.text:0040DDE2                 pop     me
.text:0040DDE3                 retn
.text:0040DDE4 ; ---------------------------------------------------------------------------
.text:0040DDE4
.text:0040DDE4 loc_40DDE4:                             ; CODE XREF: ___gthr_win32_recursive_mutex_lock+3A↑j
.text:0040DDE4 me = esi                                ; DWORD ; lpAddend
.text:0040DDE4                 mov     [esp+1Ch+lpAddend], ebx
.text:0040DDE7                 call    _InterlockedDecrement@4 ; InterlockedDecrement(x)
.text:0040DDEC                 push    ebx
.text:0040DDED                 mov     eax, 1
.text:0040DDF2                 add     esp, 14h
.text:0040DDF5                 pop     ebx
.text:0040DDF6                 pop     me
.text:0040DDF7                 retn
.text:0040DDF8 ; ---------------------------------------------------------------------------
.text:0040DDF8
.text:0040DDF8 loc_40DDF8:                             ; CODE XREF: ___gthr_win32_recursive_mutex_lock+20↑j
.text:0040DDF8 me = esi                                ; DWORD ; lpAddend
.text:0040DDF8                 mov     [esp+1Ch+lpAddend], ebx
.text:0040DDFB                 call    _InterlockedDecrement@4 ; InterlockedDecrement(x)
.text:0040DE00                 push    esi
.text:0040DE01                 inc     dword ptr [ebx+4]
.text:0040DE04                 xor     eax, eax
.text:0040DE06                 add     esp, 14h
.text:0040DE09                 pop     ebx
.text:0040DE0A                 pop     esi
.text:0040DE0B                 retn
.text:0040DE0B ___gthr_win32_recursive_mutex_lock endp
.text:0040DE0B
.text:0040DE0C
.text:0040DE0C ; =============== S U B R O U T I N E =======================================
.text:0040DE0C
.text:0040DE0C
.text:0040DE0C ; int __cdecl __gthr_win32_recursive_mutex_trylock(__gthread_recursive_mutex_t *mutex)
.text:0040DE0C                 public ___gthr_win32_recursive_mutex_trylock
.text:0040DE0C ___gthr_win32_recursive_mutex_trylock proc near
.text:0040DE0C
.text:0040DE0C mutex           = dword ptr  4
.text:0040DE0C
.text:0040DE0C                 push    esi
.text:0040DE0D                 push    ebx
.text:0040DE0E                 push    ebx
.text:0040DE0F                 mov     ebx, [esp+0Ch+mutex]
.text:0040DE13                 call    _GetCurrentThreadId@0 ; GetCurrentThreadId()
.text:0040DE18                 mov     esi, eax
.text:0040DE1A me = eax                                ; DWORD
.text:0040DE1A                 mov     me, 0FFFFFFFFh
.text:0040DE1F me = esi                                ; DWORD
.text:0040DE1F                 xor     ecx, ecx
.text:0040DE21                 lock cmpxchg [ebx], ecx
.text:0040DE25                 test    eax, eax
.text:0040DE27                 js      short loc_40DE44
.text:0040DE29                 cmp     [ebx+8], me
.text:0040DE2C                 jz      short loc_40DE38
.text:0040DE2E                 mov     eax, 1
.text:0040DE33                 pop     ecx
.text:0040DE34                 pop     ebx
.text:0040DE35                 pop     me
.text:0040DE36                 retn
.text:0040DE36 ; ---------------------------------------------------------------------------
.text:0040DE37 me = esi                                ; DWORD
.text:0040DE37                 align 4
.text:0040DE38
.text:0040DE38 loc_40DE38:                             ; CODE XREF: ___gthr_win32_recursive_mutex_trylock+20↑j
.text:0040DE38                 inc     dword ptr [ebx+4]
.text:0040DE3B                 xor     eax, eax
.text:0040DE3D                 pop     ecx
.text:0040DE3E                 pop     ebx
.text:0040DE3F                 pop     me
.text:0040DE40                 retn
.text:0040DE40 ; ---------------------------------------------------------------------------
.text:0040DE41 me = esi                                ; DWORD
.text:0040DE41                 align 4
.text:0040DE44
.text:0040DE44 loc_40DE44:                             ; CODE XREF: ___gthr_win32_recursive_mutex_trylock+1B↑j
.text:0040DE44                 mov     dword ptr [ebx+4], 1
.text:0040DE4B                 mov     [ebx+8], me
.text:0040DE4E                 xor     eax, eax
.text:0040DE50                 pop     ecx
.text:0040DE51                 pop     ebx
.text:0040DE52                 pop     me
.text:0040DE53                 retn
.text:0040DE53 ___gthr_win32_recursive_mutex_trylock endp
.text:0040DE53
.text:0040DE54
.text:0040DE54 ; =============== S U B R O U T I N E =======================================
.text:0040DE54
.text:0040DE54
.text:0040DE54 ; int __cdecl __gthr_win32_recursive_mutex_unlock(__gthread_recursive_mutex_t *mutex)
.text:0040DE54                 public ___gthr_win32_recursive_mutex_unlock
.text:0040DE54 ___gthr_win32_recursive_mutex_unlock proc near
.text:0040DE54                                         ; CODE XREF: ___cxa_guard_acquire+133↑p
.text:0040DE54                                         ; ___cxa_guard_acquire+18F↑p ...
.text:0040DE54
.text:0040DE54 lpAddend        = dword ptr -1Ch
.text:0040DE54 lReleaseCount   = dword ptr -18h
.text:0040DE54 lpPreviousCount = dword ptr -14h
.text:0040DE54 mutex           = dword ptr  4
.text:0040DE54
.text:0040DE54                 push    ebx
.text:0040DE55                 sub     esp, 18h
.text:0040DE58                 mov     ebx, [esp+1Ch+mutex]
.text:0040DE5C                 dec     dword ptr [ebx+4]
.text:0040DE5F                 jz      short loc_40DE68
.text:0040DE61
.text:0040DE61 loc_40DE61:                             ; CODE XREF: ___gthr_win32_recursive_mutex_unlock+26↓j
.text:0040DE61                 xor     eax, eax
.text:0040DE63                 add     esp, 18h
.text:0040DE66                 pop     ebx
.text:0040DE67                 retn
.text:0040DE68 ; ---------------------------------------------------------------------------
.text:0040DE68
.text:0040DE68 loc_40DE68:                             ; CODE XREF: ___gthr_win32_recursive_mutex_unlock+B↑j
.text:0040DE68                 mov     dword ptr [ebx+8], 0
.text:0040DE6F                 mov     [esp+1Ch+lpAddend], ebx ; lpAddend
.text:0040DE72                 call    _InterlockedDecrement@4 ; InterlockedDecrement(x)
.text:0040DE77                 push    edx
.text:0040DE78                 test    eax, eax
.text:0040DE7A                 js      short loc_40DE61
.text:0040DE7C                 mov     [esp+1Ch+lpPreviousCount], 0 ; lpPreviousCount
.text:0040DE84                 mov     [esp+1Ch+lReleaseCount], 1 ; lReleaseCount
.text:0040DE8C                 mov     eax, [ebx+0Ch]
.text:0040DE8F                 mov     [esp+1Ch+lpAddend], eax ; hSemaphore
.text:0040DE92                 call    _ReleaseSemaphore@12 ; ReleaseSemaphore(x,x,x)
.text:0040DE97                 sub     esp, 0Ch
.text:0040DE9A                 test    eax, eax
.text:0040DE9C                 setz    al
.text:0040DE9F                 movzx   eax, al
.text:0040DEA2                 add     esp, 18h
.text:0040DEA5                 pop     ebx
.text:0040DEA6                 retn
.text:0040DEA6 ___gthr_win32_recursive_mutex_unlock endp
.text:0040DEA6
.text:0040DEA6 ; ---------------------------------------------------------------------------
.text:0040DEA7                 align 4
.text:0040DEA8
.text:0040DEA8 ; =============== S U B R O U T I N E =======================================
.text:0040DEA8
.text:0040DEA8 ; Attributes: static
.text:0040DEA8
.text:0040DEA8 ; void *__usercall get_ptr_from_atom@<eax>(ATOM atom@<ax>, char *name_buf@<edx>, int name_buf_len@<ecx>, int ptr_offset)
.text:0040DEA8 _get_ptr_from_atom proc near            ; CODE XREF: ___shmem_grab+10F↓p
.text:0040DEA8                                         ; ___shmem_grab+158↓p
.text:0040DEA8
.text:0040DEA8 nAtom           = word ptr -2Ch
.text:0040DEA8 lpBuffer        = dword ptr -28h
.text:0040DEA8 nSize           = dword ptr -24h
.text:0040DEA8 ptr_offset      = dword ptr  4
.text:0040DEA8
.text:0040DEA8 atom = eax                              ; ATOM
.text:0040DEA8 name_buf = edx                          ; char *
.text:0040DEA8 name_buf_len = ecx                      ; int
.text:0040DEA8                 push    ebp
.text:0040DEA9                 push    edi
.text:0040DEAA                 push    esi
.text:0040DEAB                 push    ebx
.text:0040DEAC                 sub     esp, 1Ch
.text:0040DEAF                 mov     edi, name_buf
.text:0040DEB1                 mov     esi, [esp+2Ch+ptr_offset]
.text:0040DEB5                 mov     name_buf, name_buf_len
.text:0040DEB7 name_buf = edi                          ; char *
.text:0040DEB7                 sub     edx, esi
.text:0040DEB9                 cmp     edx, 1Fh
.text:0040DEBC                 jg      short loc_40DEBF
.text:0040DEBE                 int     3               ; Trap to Debugger
.text:0040DEBF
.text:0040DEBF loc_40DEBF:                             ; CODE XREF: _get_ptr_from_atom+14↑j
.text:0040DEBF                 mov     [esp+2Ch+nSize], name_buf_len ; nSize
.text:0040DEC3                 mov     [esp+2Ch+lpBuffer], name_buf ; lpBuffer
.text:0040DEC7                 movzx   atom, ax
.text:0040DECA                 mov     dword ptr [esp+2Ch+nAtom], atom ; nAtom
.text:0040DECD                 call    _GetAtomNameA@12 ; GetAtomNameA(x,x,x)
.text:0040DED2                 sub     esp, 0Ch
.text:0040DED5                 test    eax, eax
.text:0040DED7                 jnz     short loc_40DF10
.text:0040DED9                 int     3               ; Trap to Debugger
.text:0040DEDA                 xor     ebx, ebx
.text:0040DEDC                 lea     edx, [name_buf+esi]
.text:0040DEDF
.text:0040DEDF loc_40DEDF:                             ; CODE XREF: _get_ptr_from_atom+6F↓j
.text:0040DEDF                 mov     name_buf, 20h ; ' '
.text:0040DEE4                 mov     esi, 1
.text:0040DEE9                 jmp     short loc_40DEF2
.text:0040DEE9 ; ---------------------------------------------------------------------------
.text:0040DEEB                 align 4
.text:0040DEEC
.text:0040DEEC loc_40DEEC:                             ; CODE XREF: _get_ptr_from_atom+4E↓j
.text:0040DEEC ptr = eax                               ; size_t
.text:0040DEEC                 inc     ebx
.text:0040DEED i = ebx                                 ; int
.text:0040DEED                 cmp     i, 20h ; ' '
.text:0040DEF0                 jz      short loc_40DF08
.text:0040DEF2
.text:0040DEF2 loc_40DEF2:                             ; CODE XREF: _get_ptr_from_atom+41↑j
.text:0040DEF2                                         ; _get_ptr_from_atom+5E↓j
.text:0040DEF2                 cmp     byte ptr [edx+ebx], 41h ; 'A'
.text:0040DEF6                 jnz     short loc_40DEEC
.text:0040DEF8                 mov     ecx, edi
.text:0040DEFA                 sub     ecx, ebx
.text:0040DEFC                 mov     ebp, esi
.text:0040DEFE                 shl     ebp, cl
.text:0040DF00                 or      eax, ebp
.text:0040DF02 ptr = eax                               ; size_t
.text:0040DF02                 inc     ebx
.text:0040DF03 i = ebx                                 ; int
.text:0040DF03                 cmp     i, 20h ; ' '
.text:0040DF06                 jnz     short loc_40DEF2
.text:0040DF08
.text:0040DF08 loc_40DF08:                             ; CODE XREF: _get_ptr_from_atom+48↑j
.text:0040DF08                 add     esp, 1Ch
.text:0040DF0B                 pop     i
.text:0040DF0C                 pop     esi
.text:0040DF0D                 pop     edi
.text:0040DF0E                 pop     ebp
.text:0040DF0F                 retn
.text:0040DF10 ; ---------------------------------------------------------------------------
.text:0040DF10
.text:0040DF10 loc_40DF10:                             ; CODE XREF: _get_ptr_from_atom+2F↑j
.text:0040DF10 name_buf = edi                          ; char *
.text:0040DF10                 xor     ebx, ebx
.text:0040DF12                 xor     eax, eax
.text:0040DF14                 lea     edx, [name_buf+esi]
.text:0040DF17                 jmp     short loc_40DEDF
.text:0040DF17 _get_ptr_from_atom endp
.text:0040DF17
.text:0040DF17 ; ---------------------------------------------------------------------------
.text:0040DF19                 align 4
.text:0040DF1C
.text:0040DF1C ; =============== S U B R O U T I N E =======================================
.text:0040DF1C
.text:0040DF1C ; Attributes: bp-based frame
.text:0040DF1C
.text:0040DF1C ; void *__cdecl __shmem_grab(const char *name, int size, void (*initfunc)(void *))
.text:0040DF1C                 public ___shmem_grab
.text:0040DF1C ___shmem_grab   proc near               ; CODE XREF: __shmem_grabber_eh_globals(void)+1A↑p
.text:0040DF1C                                         ; __shmem_grabber_init(void)+1A↑p ...
.text:0040DF1C
.text:0040DF1C Name            = byte ptr -2Ch
.text:0040DF1C var_24          = dword ptr -24h
.text:0040DF1C name_len        = dword ptr -20h
.text:0040DF1C hmutex          = dword ptr -1Ch
.text:0040DF1C name            = dword ptr  8
.text:0040DF1C size            = dword ptr  0Ch
.text:0040DF1C initfunc        = dword ptr  10h
.text:0040DF1C
.text:0040DF1C                 push    ebp
.text:0040DF1D                 mov     ebp, esp
.text:0040DF1F                 push    edi
.text:0040DF20                 push    esi
.text:0040DF21                 push    ebx
.text:0040DF22                 sub     esp, 2Ch
.text:0040DF25                 xor     eax, eax
.text:0040DF27                 mov     ecx, 0FFFFFFFFh
.text:0040DF2C                 mov     edi, [ebp+name]
.text:0040DF2F                 repne scasb
.text:0040DF31                 mov     edx, ecx
.text:0040DF33                 not     edx
.text:0040DF35                 lea     eax, [edx-1]
.text:0040DF38                 mov     [ebp+name_len], eax
.text:0040DF3B name_len_0 = eax                        ; int
.text:0040DF3B                 lea     name_len_0, [edx+0Eh]
.text:0040DF3E                 mov     [ebp+var_24], eax
.text:0040DF41                 lea     eax, [edx+3Fh]
.text:0040DF44                 and     eax, 0FFFFFFF0h
.text:0040DF47                 call    ___chkstk_ms
.text:0040DF4C                 sub     esp, eax
.text:0040DF4E                 lea     ebx, [esp+38h+Name]
.text:0040DF52                 mov     esi, offset aGccShmemTdm2 ; "gcc-shmem-tdm2"
.text:0040DF57                 mov     ecx, 0Eh
.text:0040DF5C                 mov     edi, ebx
.text:0040DF5E                 rep movsb
.text:0040DF60                 mov     byte ptr [esp+1Ah], 2Dh ; '-'
.text:0040DF65                 lea     eax, [esp+1Bh]
.text:0040DF69                 mov     edi, eax
.text:0040DF6B                 mov     esi, [ebp+name]
.text:0040DF6E                 mov     ecx, [ebp+name_len]
.text:0040DF71                 rep movsb
.text:0040DF73                 lea     esi, [ebx+edx+0Fh]
.text:0040DF77                 mov     cl, 20h ; ' '
.text:0040DF79                 mov     al, 61h ; 'a'
.text:0040DF7B                 mov     edi, esi
.text:0040DF7D                 rep stosb
.text:0040DF7F                 lea     edi, [edx+2Fh]
.text:0040DF82                 mov     byte ptr [esp+edi+0Ch], 0
.text:0040DF87                 mov     edx, [ebp+var_24]
.text:0040DF8A                 mov     byte ptr [esp+edx+0Ch], 0
.text:0040DF8F                 mov     [esp+8], ebx    ; lpName
.text:0040DF93                 mov     dword ptr [esp+4], 0 ; bInitialOwner
.text:0040DF9B                 mov     dword ptr [esp], 0 ; lpMutexAttributes
.text:0040DFA2                 call    _CreateMutexA@12 ; CreateMutexA(x,x,x)
.text:0040DFA7                 sub     esp, 0Ch
.text:0040DFAA                 mov     [ebp+hmutex], eax
.text:0040DFAD hmutex_0 = eax                          ; HANDLE
.text:0040DFAD                 mov     edx, [ebp+var_24]
.text:0040DFB0                 mov     byte ptr [ebx+edx], 2Dh ; '-'
.text:0040DFB4                 mov     dword ptr [esp+4], 0FFFFFFFFh ; dwMilliseconds
.text:0040DFBC                 mov     [esp], hmutex_0 ; hHandle
.text:0040DFBF                 call    _WaitForSingleObject@8 ; WaitForSingleObject(x,x)
.text:0040DFC4                 sub     esp, 8
.text:0040DFC7                 test    eax, eax
.text:0040DFC9                 jz      short loc_40DFCC
.text:0040DFCB                 int     3               ; Trap to Debugger
.text:0040DFCC
.text:0040DFCC loc_40DFCC:                             ; CODE XREF: ___shmem_grab+AD↑j
.text:0040DFCC                 mov     [esp], ebx      ; lpString
.text:0040DFCF                 call    _FindAtomA@4    ; FindAtomA(x)
.text:0040DFD4                 push    ecx
.text:0040DFD5 atom = eax                              ; ATOM
.text:0040DFD5                 test    ax, ax
.text:0040DFD8                 jnz     loc_40E064
.text:0040DFDE                 mov     atom, [ebp+size]
.text:0040DFE1                 mov     [esp], eax      ; size_t
.text:0040DFE4                 call    _malloc
.text:0040DFE9                 mov     esi, eax
.text:0040DFEB shared_mem = eax                        ; void *
.text:0040DFEB                 mov     edx, [ebp+name_len]
.text:0040DFEE                 add     edx, 10h
.text:0040DFF1                 mov     [ebp+name_len], edx
.text:0040DFF4                 mov     shared_mem, edx
.text:0040DFF6 shared_mem = esi                        ; void *
.text:0040DFF6                 add     eax, ebx
.text:0040DFF8                 mov     ecx, 20h ; ' '
.text:0040DFFD                 lea     shared_mem, [shared_mem+0]
.text:0040E000
.text:0040E000 loc_40E000:                             ; CODE XREF: ___shmem_grab+F2↓j
.text:0040E000                 mov     edx, shared_mem
.text:0040E002                 shr     edx, cl
.text:0040E004                 and     edx, 1
.text:0040E007                 jz      short loc_40E00C
.text:0040E009                 mov     byte ptr [eax], 41h ; 'A'
.text:0040E00C
.text:0040E00C loc_40E00C:                             ; CODE XREF: ___shmem_grab+EB↑j
.text:0040E00C                 inc     eax
.text:0040E00D                 dec     ecx
.text:0040E00E                 jnz     short loc_40E000
.text:0040E010                 mov     [esp], ebx      ; lpString
.text:0040E013                 call    _AddAtomA@4     ; AddAtomA(x)
.text:0040E018                 push    edx
.text:0040E019 atom = eax                              ; ATOM
.text:0040E019                 test    ax, ax
.text:0040E01C                 jz      short loc_40E060
.text:0040E01E
.text:0040E01E loc_40E01E:                             ; CODE XREF: ___shmem_grab+145↓j
.text:0040E01E                 movzx   atom, ax        ; atom
.text:0040E021                 mov     edx, [ebp+name_len]
.text:0040E024                 mov     [esp], edx      ; ptr_offset
.text:0040E027                 mov     ecx, edi        ; name_buf_len
.text:0040E029                 mov     edx, ebx        ; name_buf
.text:0040E02B                 call    _get_ptr_from_atom
.text:0040E030                 mov     ebx, eax
.text:0040E032 ret = eax                               ; void *
.text:0040E032                 cmp     ret, shared_mem
.text:0040E034                 jz      short loc_40E07D
.text:0040E036                 mov     [esp], shared_mem ; void *
.text:0040E039                 call    _free
.text:0040E03E
.text:0040E03E loc_40E03E:                             ; CODE XREF: ___shmem_grab+15F↓j
.text:0040E03E                                         ; ___shmem_grab+16F↓j ...
.text:0040E03E                 mov     eax, [ebp+hmutex]
.text:0040E041                 mov     [esp], eax      ; hMutex
.text:0040E044                 call    _ReleaseMutex@4 ; ReleaseMutex(x)
.text:0040E049                 push    eax
.text:0040E04A                 mov     eax, [ebp+hmutex]
.text:0040E04D                 mov     [esp], eax      ; hObject
.text:0040E050                 call    _CloseHandle@4  ; CloseHandle(x)
.text:0040E055                 push    edx
.text:0040E056                 mov     eax, ret
.text:0040E058                 lea     esp, [ebp-0Ch]
.text:0040E05B                 pop     ret
.text:0040E05C ret = eax                               ; void *
.text:0040E05C                 pop     esi
.text:0040E05D                 pop     edi
.text:0040E05E                 pop     ebp
.text:0040E05F                 retn
.text:0040E060 ; ---------------------------------------------------------------------------
.text:0040E060
.text:0040E060 loc_40E060:                             ; CODE XREF: ___shmem_grab+100↑j
.text:0040E060 atom = eax                              ; ATOM ; Trap to Debugger
.text:0040E060 shared_mem = esi                        ; void *
.text:0040E060                 int     3
.text:0040E061                 jmp     short loc_40E01E
.text:0040E061 ; ---------------------------------------------------------------------------
.text:0040E063                 align 4
.text:0040E064
.text:0040E064 loc_40E064:                             ; CODE XREF: ___shmem_grab+BC↑j
.text:0040E064                 movzx   atom, ax        ; atom
.text:0040E067                 mov     edx, [ebp+name_len]
.text:0040E06A                 add     edx, 10h
.text:0040E06D                 mov     [esp], edx      ; ptr_offset
.text:0040E070                 mov     ecx, edi        ; name_buf_len
.text:0040E072                 mov     edx, ebx        ; name_buf
.text:0040E074                 call    _get_ptr_from_atom
.text:0040E079                 mov     ebx, eax
.text:0040E07B ret = eax                               ; void *
.text:0040E07B                 jmp     short loc_40E03E
.text:0040E07D ; ---------------------------------------------------------------------------
.text:0040E07D
.text:0040E07D loc_40E07D:                             ; CODE XREF: ___shmem_grab+118↑j
.text:0040E07D shared_mem = esi                        ; void *
.text:0040E07D                 xor     ret, ret
.text:0040E07F ret = ebx                               ; void *
.text:0040E07F                 mov     edi, shared_mem
.text:0040E081                 mov     ecx, [ebp+size]
.text:0040E084                 rep stosb
.text:0040E086                 mov     ecx, [ebp+initfunc]
.text:0040E089                 test    ecx, ecx
.text:0040E08B                 jz      short loc_40E03E
.text:0040E08D                 mov     [esp], shared_mem
.text:0040E090                 mov     eax, [ebp+initfunc]
.text:0040E093                 call    eax
.text:0040E095                 jmp     short loc_40E03E
.text:0040E095 ___shmem_grab   endp
.text:0040E095
.text:0040E095 ; ---------------------------------------------------------------------------
.text:0040E097                 align 4
.text:0040E098
.text:0040E098 ; =============== S U B R O U T I N E =======================================
.text:0040E098
.text:0040E098
.text:0040E098                 public ___chkstk_ms
.text:0040E098 ___chkstk_ms    proc near               ; CODE XREF: _d_demangle_callback_constprop_15+DD↑p
.text:0040E098                                         ; _d_demangle_callback_constprop_15+F2↑p ...
.text:0040E098
.text:0040E098 arg_0           = byte ptr  4
.text:0040E098
.text:0040E098                 push    ecx
.text:0040E099                 push    eax
.text:0040E09A                 cmp     eax, 1000h
.text:0040E09F                 lea     ecx, [esp+8+arg_0]
.text:0040E0A3                 jb      short loc_40E0BA
.text:0040E0A5
.text:0040E0A5 loc_40E0A5:                             ; CODE XREF: ___chkstk_ms+20↓j
.text:0040E0A5                 sub     ecx, 1000h
.text:0040E0AB                 or      dword ptr [ecx], 0
.text:0040E0AE                 sub     eax, 1000h
.text:0040E0B3                 cmp     eax, 1000h
.text:0040E0B8                 ja      short loc_40E0A5
.text:0040E0BA
.text:0040E0BA loc_40E0BA:                             ; CODE XREF: ___chkstk_ms+B↑j
.text:0040E0BA                 sub     ecx, eax
.text:0040E0BC                 or      dword ptr [ecx], 0
.text:0040E0BF                 pop     eax
.text:0040E0C0                 pop     ecx
.text:0040E0C1                 retn
.text:0040E0C1 ___chkstk_ms    endp
.text:0040E0C1
.text:0040E0C1 ; ---------------------------------------------------------------------------
.text:0040E0C2                 align 4
.text:0040E0C4 ; [00000006 BYTES: COLLAPSED FUNCTION _write. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E0CA                 align 4
.text:0040E0CC ; [00000006 BYTES: COLLAPSED FUNCTION ___getmainargs. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E0D2                 align 4
.text:0040E0D4 ; [00000006 BYTES: COLLAPSED FUNCTION __setmode. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E0DA                 align 4
.text:0040E0DC ; [00000006 BYTES: COLLAPSED FUNCTION ___p__fmode. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E0E2                 align 4
.text:0040E0E4 ; [00000006 BYTES: COLLAPSED FUNCTION ___p__environ. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E0EA                 align 4
.text:0040E0EC ; [00000006 BYTES: COLLAPSED FUNCTION __cexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E0F2                 align 4
.text:0040E0F4 ; [00000006 BYTES: COLLAPSED FUNCTION _signal. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E0FA                 align 4
.text:0040E0FC ; [00000006 BYTES: COLLAPSED FUNCTION _scanf. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E102                 align 4
.text:0040E104 ; [00000006 BYTES: COLLAPSED FUNCTION _printf. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E10A                 align 4
.text:0040E10C ; [00000006 BYTES: COLLAPSED FUNCTION _abort. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E112                 align 4
.text:0040E114 ; [00000006 BYTES: COLLAPSED FUNCTION _free. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E11A                 align 4
.text:0040E11C ; [00000006 BYTES: COLLAPSED FUNCTION _malloc. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E122                 align 4
.text:0040E124 ; [00000006 BYTES: COLLAPSED FUNCTION _strerror. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E12A                 align 4
.text:0040E12C ; [00000006 BYTES: COLLAPSED FUNCTION _memmove. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E132                 align 4
.text:0040E134 ; [00000006 BYTES: COLLAPSED FUNCTION _memcmp. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E13A                 align 4
.text:0040E13C ; [00000006 BYTES: COLLAPSED FUNCTION _memchr. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E142                 align 4
.text:0040E144 ; [00000006 BYTES: COLLAPSED FUNCTION _strcmp. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E14A                 align 4
.text:0040E14C ; [00000006 BYTES: COLLAPSED FUNCTION _fwrite. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E152                 align 4
.text:0040E154 ; [00000006 BYTES: COLLAPSED FUNCTION _fputc. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E15A                 align 4
.text:0040E15C ; [00000006 BYTES: COLLAPSED FUNCTION _fputs. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E162                 align 4
.text:0040E164 ; [00000006 BYTES: COLLAPSED FUNCTION _realloc. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E16A                 align 4
.text:0040E16C ; [00000006 BYTES: COLLAPSED FUNCTION _sprintf. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E172                 align 4
.text:0040E174 ; [00000006 BYTES: COLLAPSED FUNCTION _vfprintf. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E17A                 align 4
.text:0040E17C ; [00000006 BYTES: COLLAPSED FUNCTION _memcpy. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E182                 align 4
.text:0040E184 ; [00000006 BYTES: COLLAPSED FUNCTION _calloc. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E18A                 align 4
.text:0040E18C ; [00000006 BYTES: COLLAPSED FUNCTION SetUnhandledExceptionFilter(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E192                 align 4
.text:0040E194 ; [00000006 BYTES: COLLAPSED FUNCTION ExitProcess(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E19A                 align 4
.text:0040E19C ; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E1A2                 align 4
.text:0040E1A4 ; [00000006 BYTES: COLLAPSED FUNCTION GetProcAddress(x,x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E1AA                 align 4
.text:0040E1AC ; [00000006 BYTES: COLLAPSED FUNCTION VirtualQuery(x,x,x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E1B2                 align 4
.text:0040E1B4 ; [00000006 BYTES: COLLAPSED FUNCTION VirtualProtect(x,x,x,x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E1BA                 align 4
.text:0040E1BC ; [00000006 BYTES: COLLAPSED FUNCTION EnterCriticalSection(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E1C2                 align 4
.text:0040E1C4 ; [00000006 BYTES: COLLAPSED FUNCTION TlsGetValue(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E1CA                 align 4
.text:0040E1CC ; [00000006 BYTES: COLLAPSED FUNCTION GetLastError(). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E1D2                 align 4
.text:0040E1D4 ; [00000006 BYTES: COLLAPSED FUNCTION LeaveCriticalSection(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E1DA                 align 4
.text:0040E1DC ; [00000006 BYTES: COLLAPSED FUNCTION DeleteCriticalSection(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E1E2                 align 4
.text:0040E1E4 ; [00000006 BYTES: COLLAPSED FUNCTION InitializeCriticalSection(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E1EA                 align 4
.text:0040E1EC ; [00000006 BYTES: COLLAPSED FUNCTION TlsSetValue(x,x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E1F2                 align 4
.text:0040E1F4 ; [00000006 BYTES: COLLAPSED FUNCTION TlsAlloc(). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E1FA                 align 4
.text:0040E1FC ; [00000006 BYTES: COLLAPSED FUNCTION InterlockedIncrement(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E202                 align 4
.text:0040E204 ; [00000006 BYTES: COLLAPSED FUNCTION Sleep(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E20A                 align 4
.text:0040E20C ; [00000006 BYTES: COLLAPSED FUNCTION SetLastError(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E212                 align 4
.text:0040E214 ; [00000006 BYTES: COLLAPSED FUNCTION TlsFree(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E21A                 align 4
.text:0040E21C ; [00000006 BYTES: COLLAPSED FUNCTION CreateSemaphoreA(x,x,x,x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E222                 align 4
.text:0040E224 ; [00000006 BYTES: COLLAPSED FUNCTION CloseHandle(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E22A                 align 4
.text:0040E22C ; [00000006 BYTES: COLLAPSED FUNCTION WaitForSingleObject(x,x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E232                 align 4
.text:0040E234 ; [00000006 BYTES: COLLAPSED FUNCTION InterlockedDecrement(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E23A                 align 4
.text:0040E23C ; [00000006 BYTES: COLLAPSED FUNCTION ReleaseSemaphore(x,x,x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E242                 align 4
.text:0040E244 ; [00000006 BYTES: COLLAPSED FUNCTION GetCurrentThreadId(). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E24A                 align 4
.text:0040E24C ; [00000006 BYTES: COLLAPSED FUNCTION GetAtomNameA(x,x,x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E252                 align 4
.text:0040E254 ; [00000006 BYTES: COLLAPSED FUNCTION CreateMutexA(x,x,x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E25A                 align 4
.text:0040E25C ; [00000006 BYTES: COLLAPSED FUNCTION FindAtomA(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E262                 align 4
.text:0040E264 ; [00000006 BYTES: COLLAPSED FUNCTION AddAtomA(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E26A                 align 4
.text:0040E26C ; [00000006 BYTES: COLLAPSED FUNCTION ReleaseMutex(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040E272                 align 10h
.text:0040E280
.text:0040E280 ; =============== S U B R O U T I N E =======================================
.text:0040E280
.text:0040E280
.text:0040E280                 public ___mingwthr_remove_key_dtor
.text:0040E280 ___mingwthr_remove_key_dtor proc near
.text:0040E280 ; __unwind {
.text:0040E280                 jmp     ____w64_mingwthr_remove_key_dtor
.text:0040E280 ; } // starts at 40E280
.text:0040E280 ___mingwthr_remove_key_dtor endp
.text:0040E280
.text:0040E280 ; ---------------------------------------------------------------------------
.text:0040E285                 align 10h
.text:0040E290
.text:0040E290 ; =============== S U B R O U T I N E =======================================
.text:0040E290
.text:0040E290
.text:0040E290                 public ___mingwthr_key_dtor
.text:0040E290 ___mingwthr_key_dtor proc near          ; CODE XREF: _fc_key_init+30↑p
.text:0040E290                                         ; ___gthr_win32_key_create+22↑j
.text:0040E290
.text:0040E290 arg_4           = dword ptr  8
.text:0040E290
.text:0040E290 ; __unwind {
.text:0040E290                 mov     eax, [esp+arg_4]
.text:0040E294                 test    eax, eax
.text:0040E296                 jz      short loc_40E2A0
.text:0040E298                 jmp     ____w64_mingwthr_add_key_dtor
.text:0040E298 ; ---------------------------------------------------------------------------
.text:0040E29D                 align 10h
.text:0040E2A0
.text:0040E2A0 loc_40E2A0:                             ; CODE XREF: ___mingwthr_key_dtor+6↑j
.text:0040E2A0                 xor     eax, eax
.text:0040E2A2                 retn
.text:0040E2A2 ; } // starts at 40E290
.text:0040E2A2 ___mingwthr_key_dtor endp
.text:0040E2A2
.text:0040E2A2 ; ---------------------------------------------------------------------------
.text:0040E2A3                 align 10h
.text:0040E2B0
.text:0040E2B0 ; =============== S U B R O U T I N E =======================================
.text:0040E2B0
.text:0040E2B0 ; Attributes: bp-based frame
.text:0040E2B0
.text:0040E2B0 ; int __stdcall __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::deallocate(void *, int)
.text:0040E2B0                 public __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEE10deallocateEPS2_j
.text:0040E2B0 __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEE10deallocateEPS2_j proc near
.text:0040E2B0                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_put_node(std::_Rb_tree_node<int> *)+1C↓p
.text:0040E2B0
.text:0040E2B0 var_C           = dword ptr -0Ch
.text:0040E2B0 arg_0           = dword ptr  8
.text:0040E2B0
.text:0040E2B0                 push    ebp
.text:0040E2B1                 mov     ebp, esp
.text:0040E2B3                 sub     esp, 28h
.text:0040E2B6                 mov     [ebp+var_C], ecx
.text:0040E2B9                 mov     eax, [ebp+arg_0]
.text:0040E2BC                 mov     [esp], eax      ; void *
.text:0040E2BF                 call    __ZdlPv         ; operator delete(void *)
.text:0040E2C4                 leave
.text:0040E2C5                 retn    8
.text:0040E2C5 __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEE10deallocateEPS2_j endp
.text:0040E2C5
.text:0040E2C8
.text:0040E2C8 ; =============== S U B R O U T I N E =======================================
.text:0040E2C8
.text:0040E2C8 ; Attributes: bp-based frame
.text:0040E2C8
.text:0040E2C8 ; __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::allocate(unsigned int, void const*)
.text:0040E2C8                 public __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEE8allocateEjPKv
.text:0040E2C8 __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEE8allocateEjPKv proc near
.text:0040E2C8                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_get_node(void)+1D↓p
.text:0040E2C8
.text:0040E2C8 var_C           = dword ptr -0Ch
.text:0040E2C8 arg_0           = dword ptr  8
.text:0040E2C8
.text:0040E2C8                 push    ebp
.text:0040E2C9                 mov     ebp, esp
.text:0040E2CB                 sub     esp, 28h
.text:0040E2CE                 mov     [ebp+var_C], ecx
.text:0040E2D1                 mov     eax, [ebp+var_C]
.text:0040E2D4                 mov     ecx, eax
.text:0040E2D6                 call    __ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEE8max_sizeEv ; __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::max_size(void)
.text:0040E2DB                 cmp     eax, [ebp+arg_0]
.text:0040E2DE                 setb    al
.text:0040E2E1                 test    al, al
.text:0040E2E3                 jz      short loc_40E2EA
.text:0040E2E5                 call    __ZSt17__throw_bad_allocv ; std::__throw_bad_alloc(void)
.text:0040E2EA ; ---------------------------------------------------------------------------
.text:0040E2EA
.text:0040E2EA loc_40E2EA:                             ; CODE XREF: __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::allocate(uint,void const*)+1B↑j
.text:0040E2EA                 mov     edx, [ebp+arg_0]
.text:0040E2ED                 mov     eax, edx
.text:0040E2EF                 shl     eax, 2
.text:0040E2F2                 add     eax, edx
.text:0040E2F4                 shl     eax, 2
.text:0040E2F7                 mov     [esp], eax      ; size_t
.text:0040E2FA                 call    __Znwj          ; operator new(uint)
.text:0040E2FF                 leave
.text:0040E300                 retn    8
.text:0040E300 __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEE8allocateEjPKv endp
.text:0040E300
.text:0040E300 ; ---------------------------------------------------------------------------
.text:0040E303                 align 4
.text:0040E304
.text:0040E304 ; =============== S U B R O U T I N E =======================================
.text:0040E304
.text:0040E304 ; Attributes: bp-based frame
.text:0040E304
.text:0040E304 ; __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::new_allocator(void)
.text:0040E304                 public __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEEC2Ev
.text:0040E304 __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEEC2Ev proc near
.text:0040E304                                         ; CODE XREF: std::allocator<std::_Rb_tree_node<int>>::allocator(void)+E↓p
.text:0040E304
.text:0040E304 var_4           = dword ptr -4
.text:0040E304
.text:0040E304                 push    ebp
.text:0040E305                 mov     ebp, esp
.text:0040E307                 sub     esp, 4
.text:0040E30A                 mov     [ebp+var_4], ecx
.text:0040E30D                 leave
.text:0040E30E                 retn
.text:0040E30E __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEEC2Ev endp
.text:0040E30E
.text:0040E30E ; ---------------------------------------------------------------------------
.text:0040E30F                 align 10h
.text:0040E310
.text:0040E310 ; =============== S U B R O U T I N E =======================================
.text:0040E310
.text:0040E310 ; Attributes: bp-based frame
.text:0040E310
.text:0040E310 ; __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::~new_allocator()
.text:0040E310                 public __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEED2Ev
.text:0040E310 __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEED2Ev proc near
.text:0040E310                                         ; CODE XREF: std::allocator<std::_Rb_tree_node<int>>::~allocator()+E↓p
.text:0040E310
.text:0040E310 var_4           = dword ptr -4
.text:0040E310
.text:0040E310                 push    ebp
.text:0040E311                 mov     ebp, esp
.text:0040E313                 sub     esp, 4
.text:0040E316                 mov     [ebp+var_4], ecx
.text:0040E319                 leave
.text:0040E31A                 retn
.text:0040E31A __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEED2Ev endp
.text:0040E31A
.text:0040E31A ; ---------------------------------------------------------------------------
.text:0040E31B                 align 4
.text:0040E31C
.text:0040E31C ; =============== S U B R O U T I N E =======================================
.text:0040E31C
.text:0040E31C ; Attributes: bp-based frame
.text:0040E31C
.text:0040E31C ; __gnu_cxx::new_allocator<int>::destroy(int *)
.text:0040E31C                 public __ZN9__gnu_cxx13new_allocatorIiE7destroyEPi
.text:0040E31C __ZN9__gnu_cxx13new_allocatorIiE7destroyEPi proc near
.text:0040E31C                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_destroy_node(std::_Rb_tree_node<int> *)+35↓p
.text:0040E31C
.text:0040E31C var_4           = dword ptr -4
.text:0040E31C
.text:0040E31C                 push    ebp
.text:0040E31D                 mov     ebp, esp
.text:0040E31F                 sub     esp, 4
.text:0040E322                 mov     [ebp+var_4], ecx
.text:0040E325                 leave
.text:0040E326                 retn    4
.text:0040E326 __ZN9__gnu_cxx13new_allocatorIiE7destroyEPi endp
.text:0040E326
.text:0040E326 ; ---------------------------------------------------------------------------
.text:0040E329                 align 4
.text:0040E32C
.text:0040E32C ; =============== S U B R O U T I N E =======================================
.text:0040E32C
.text:0040E32C ; Attributes: bp-based frame
.text:0040E32C
.text:0040E32C ; int __stdcall __gnu_cxx::new_allocator<int>::construct(void *, int)
.text:0040E32C                 public __ZN9__gnu_cxx13new_allocatorIiE9constructEPiRKi
.text:0040E32C __ZN9__gnu_cxx13new_allocatorIiE9constructEPiRKi proc near
.text:0040E32C                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_create_node(int const&)+49↓p
.text:0040E32C
.text:0040E32C var_4           = dword ptr -4
.text:0040E32C arg_0           = dword ptr  8
.text:0040E32C arg_4           = dword ptr  0Ch
.text:0040E32C
.text:0040E32C                 push    ebp
.text:0040E32D                 mov     ebp, esp
.text:0040E32F                 sub     esp, 0Ch
.text:0040E332                 mov     [ebp+var_4], ecx
.text:0040E335                 mov     eax, [ebp+arg_0]
.text:0040E338                 mov     [esp+4], eax    ; void *
.text:0040E33C                 mov     dword ptr [esp], 4 ; unsigned int
.text:0040E343                 call    __ZnwjPv        ; operator new(uint,void *)
.text:0040E348                 test    eax, eax
.text:0040E34A                 jz      short locret_40E353
.text:0040E34C                 mov     edx, [ebp+arg_4]
.text:0040E34F                 mov     edx, [edx]
.text:0040E351                 mov     [eax], edx
.text:0040E353
.text:0040E353 locret_40E353:                          ; CODE XREF: __gnu_cxx::new_allocator<int>::construct(int *,int const&)+1E↑j
.text:0040E353                 leave
.text:0040E354                 retn    8
.text:0040E354 __ZN9__gnu_cxx13new_allocatorIiE9constructEPiRKi endp
.text:0040E354
.text:0040E354 ; ---------------------------------------------------------------------------
.text:0040E357                 align 4
.text:0040E358
.text:0040E358 ; =============== S U B R O U T I N E =======================================
.text:0040E358
.text:0040E358 ; Attributes: bp-based frame
.text:0040E358
.text:0040E358 ; __gnu_cxx::new_allocator<int>::new_allocator(void)
.text:0040E358                 public __ZN9__gnu_cxx13new_allocatorIiEC2Ev
.text:0040E358 __ZN9__gnu_cxx13new_allocatorIiEC2Ev proc near
.text:0040E358                                         ; CODE XREF: std::allocator<int>::allocator<std::_Rb_tree_node<int>>(std::allocator<std::_Rb_tree_node<int>> const&)+E↓p
.text:0040E358
.text:0040E358 var_4           = dword ptr -4
.text:0040E358
.text:0040E358                 push    ebp
.text:0040E359                 mov     ebp, esp
.text:0040E35B                 sub     esp, 4
.text:0040E35E                 mov     [ebp+var_4], ecx
.text:0040E361                 leave
.text:0040E362                 retn
.text:0040E362 __ZN9__gnu_cxx13new_allocatorIiEC2Ev endp
.text:0040E362
.text:0040E362 ; ---------------------------------------------------------------------------
.text:0040E363                 align 4
.text:0040E364
.text:0040E364 ; =============== S U B R O U T I N E =======================================
.text:0040E364
.text:0040E364 ; Attributes: bp-based frame
.text:0040E364
.text:0040E364 ; __gnu_cxx::new_allocator<int>::~new_allocator()
.text:0040E364                 public __ZN9__gnu_cxx13new_allocatorIiED2Ev
.text:0040E364 __ZN9__gnu_cxx13new_allocatorIiED2Ev proc near
.text:0040E364                                         ; CODE XREF: std::allocator<int>::~allocator()+E↓p
.text:0040E364
.text:0040E364 var_4           = dword ptr -4
.text:0040E364
.text:0040E364                 push    ebp
.text:0040E365                 mov     ebp, esp
.text:0040E367                 sub     esp, 4
.text:0040E36A                 mov     [ebp+var_4], ecx
.text:0040E36D                 leave
.text:0040E36E                 retn
.text:0040E36E __ZN9__gnu_cxx13new_allocatorIiED2Ev endp
.text:0040E36E
.text:0040E36E ; ---------------------------------------------------------------------------
.text:0040E36F                 align 10h
.text:0040E370
.text:0040E370 ; =============== S U B R O U T I N E =======================================
.text:0040E370
.text:0040E370
.text:0040E370 ; void __cdecl __gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error(__gnu_cxx::__concurrence_lock_error *__hidden this)
.text:0040E370                 public __ZN9__gnu_cxx24__concurrence_lock_errorD0Ev
.text:0040E370 __ZN9__gnu_cxx24__concurrence_lock_errorD0Ev proc near
.text:0040E370                                         ; DATA XREF: .rdata:00416344↓o
.text:0040E370
.text:0040E370 var_1C          = dword ptr -1Ch
.text:0040E370 this            = dword ptr  4
.text:0040E370
.text:0040E370                 push    ebx
.text:0040E371                 sub     esp, 18h
.text:0040E374                 mov     ebx, ecx
.text:0040E376                 mov     dword ptr [ecx], offset off_416340
.text:0040E37C                 call    __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:0040E381                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:0040E384                 call    __ZdlPv         ; operator delete(void *)
.text:0040E389                 add     esp, 18h
.text:0040E38C                 pop     ebx
.text:0040E38D                 retn
.text:0040E38D __ZN9__gnu_cxx24__concurrence_lock_errorD0Ev endp
.text:0040E38D
.text:0040E38D ; ---------------------------------------------------------------------------
.text:0040E38E                 align 10h
.text:0040E390
.text:0040E390 ; =============== S U B R O U T I N E =======================================
.text:0040E390
.text:0040E390
.text:0040E390 ; void __cdecl __gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error(void *)
.text:0040E390                 public __ZN9__gnu_cxx24__concurrence_lock_errorD1Ev
.text:0040E390 __ZN9__gnu_cxx24__concurrence_lock_errorD1Ev proc near
.text:0040E390                                         ; DATA XREF: ___cxa_guard_acquire+10E↑o
.text:0040E390                                         ; __gnu_cxx::__throw_concurrence_lock_error(void)+15↓o ...
.text:0040E390                 mov     dword ptr [ecx], offset off_416340
.text:0040E396                 jmp     __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:0040E396 __ZN9__gnu_cxx24__concurrence_lock_errorD1Ev endp
.text:0040E396
.text:0040E396 ; ---------------------------------------------------------------------------
.text:0040E39B                 align 4
.text:0040E39C
.text:0040E39C ; =============== S U B R O U T I N E =======================================
.text:0040E39C
.text:0040E39C
.text:0040E39C ; void __cdecl __gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error(__gnu_cxx::__concurrence_unlock_error *__hidden this)
.text:0040E39C                 public __ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev
.text:0040E39C __ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev proc near
.text:0040E39C                                         ; DATA XREF: .rdata:0041635C↓o
.text:0040E39C
.text:0040E39C var_1C          = dword ptr -1Ch
.text:0040E39C this            = dword ptr  4
.text:0040E39C
.text:0040E39C                 push    ebx
.text:0040E39D                 sub     esp, 18h
.text:0040E3A0                 mov     ebx, ecx
.text:0040E3A2                 mov     dword ptr [ecx], offset off_416358
.text:0040E3A8                 call    __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:0040E3AD                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:0040E3B0                 call    __ZdlPv         ; operator delete(void *)
.text:0040E3B5                 add     esp, 18h
.text:0040E3B8                 pop     ebx
.text:0040E3B9                 retn
.text:0040E3B9 __ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev endp
.text:0040E3B9
.text:0040E3B9 ; ---------------------------------------------------------------------------
.text:0040E3BA                 align 4
.text:0040E3BC
.text:0040E3BC ; =============== S U B R O U T I N E =======================================
.text:0040E3BC
.text:0040E3BC
.text:0040E3BC ; void __cdecl __gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error(void *)
.text:0040E3BC                 public __ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev
.text:0040E3BC __ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev proc near
.text:0040E3BC                                         ; DATA XREF: ___cxa_allocate_exception+113↑o
.text:0040E3BC                                         ; ___cxa_free_exception+F0↑o ...
.text:0040E3BC                 mov     dword ptr [ecx], offset off_416358
.text:0040E3C2                 jmp     __ZNSt9exceptionD1Ev ; std::exception::~exception()
.text:0040E3C2 __ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev endp
.text:0040E3C2
.text:0040E3C2 ; ---------------------------------------------------------------------------
.text:0040E3C7                 align 4
.text:0040E3C8
.text:0040E3C8 ; =============== S U B R O U T I N E =======================================
.text:0040E3C8
.text:0040E3C8 ; Attributes: noreturn
.text:0040E3C8
.text:0040E3C8 ; void __noreturn __gnu_cxx::__throw_concurrence_lock_error(void)
.text:0040E3C8                 public __ZN9__gnu_cxx30__throw_concurrence_lock_errorEv
.text:0040E3C8 __ZN9__gnu_cxx30__throw_concurrence_lock_errorEv proc near
.text:0040E3C8                                         ; CODE XREF: ___cxa_allocate_exception+150↑p
.text:0040E3C8                                         ; ___cxa_free_exception+125↑p ...
.text:0040E3C8
.text:0040E3C8 thrown_size     = dword ptr -1Ch
.text:0040E3C8 lptinfo         = dword ptr -18h
.text:0040E3C8 var_14          = dword ptr -14h
.text:0040E3C8
.text:0040E3C8                 sub     esp, 1Ch
.text:0040E3CB                 mov     [esp+1Ch+thrown_size], 4 ; thrown_size
.text:0040E3D2                 call    ___cxa_allocate_exception
.text:0040E3D7                 mov     dword ptr [eax], offset off_416340
.text:0040E3DD                 mov     [esp+1Ch+var_14], offset __ZN9__gnu_cxx24__concurrence_lock_errorD1Ev ; void (__cdecl *)(void *)
.text:0040E3E5                 mov     [esp+1Ch+lptinfo], offset __ZTIN9__gnu_cxx24__concurrence_lock_errorE ; lptinfo
.text:0040E3ED                 mov     [esp+1Ch+thrown_size], eax ; void *
.text:0040E3F0                 call    ___cxa_throw
.text:0040E3F0 __ZN9__gnu_cxx30__throw_concurrence_lock_errorEv endp
.text:0040E3F0
.text:0040E3F0 ; ---------------------------------------------------------------------------
.text:0040E3F5                 align 4
.text:0040E3F8
.text:0040E3F8 ; =============== S U B R O U T I N E =======================================
.text:0040E3F8
.text:0040E3F8 ; Attributes: noreturn
.text:0040E3F8
.text:0040E3F8 ; void __noreturn __gnu_cxx::__throw_concurrence_unlock_error(void)
.text:0040E3F8                 public __ZN9__gnu_cxx32__throw_concurrence_unlock_errorEv
.text:0040E3F8 __ZN9__gnu_cxx32__throw_concurrence_unlock_errorEv proc near
.text:0040E3F8                                         ; CODE XREF: ___cxa_guard_acquire+148↑p
.text:0040E3F8                                         ; ___cxa_guard_abort+71↑p ...
.text:0040E3F8
.text:0040E3F8 thrown_size     = dword ptr -1Ch
.text:0040E3F8 lptinfo         = dword ptr -18h
.text:0040E3F8 var_14          = dword ptr -14h
.text:0040E3F8
.text:0040E3F8                 sub     esp, 1Ch
.text:0040E3FB                 mov     [esp+1Ch+thrown_size], 4 ; thrown_size
.text:0040E402                 call    ___cxa_allocate_exception
.text:0040E407                 mov     dword ptr [eax], offset off_416358
.text:0040E40D                 mov     [esp+1Ch+var_14], offset __ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev ; void (__cdecl *)(void *)
.text:0040E415                 mov     [esp+1Ch+lptinfo], offset __ZTIN9__gnu_cxx26__concurrence_unlock_errorE ; lptinfo
.text:0040E41D                 mov     [esp+1Ch+thrown_size], eax ; void *
.text:0040E420                 call    ___cxa_throw
.text:0040E420 __ZN9__gnu_cxx32__throw_concurrence_unlock_errorEv endp
.text:0040E420
.text:0040E420 ; ---------------------------------------------------------------------------
.text:0040E425                 align 4
.text:0040E428
.text:0040E428 ; =============== S U B R O U T I N E =======================================
.text:0040E428
.text:0040E428
.text:0040E428 ; bool __gnu_cxx::operator==<char const*, std::string>(__gnu_cxx::__normal_iterator<char const*, std::string> const&, __gnu_cxx::__normal_iterator<char const*, std::string> const&)
.text:0040E428                 public __ZN9__gnu_cxxeqIPKcSsEEbRKNS_17__normal_iteratorIT_T0_EES8_
.text:0040E428 __ZN9__gnu_cxxeqIPKcSsEEbRKNS_17__normal_iteratorIT_T0_EES8_ proc near
.text:0040E428
.text:0040E428 arg_0           = dword ptr  4
.text:0040E428 arg_4           = dword ptr  8
.text:0040E428
.text:0040E428                 mov     eax, [esp+arg_4]
.text:0040E42C                 mov     edx, [esp+arg_0]
.text:0040E430                 mov     ecx, [eax]
.text:0040E432                 cmp     [edx], ecx
.text:0040E434                 setz    al
.text:0040E437                 retn
.text:0040E437 __ZN9__gnu_cxxeqIPKcSsEEbRKNS_17__normal_iteratorIT_T0_EES8_ endp
.text:0040E437
.text:0040E438
.text:0040E438 ; =============== S U B R O U T I N E =======================================
.text:0040E438
.text:0040E438
.text:0040E438 ; bool __gnu_cxx::operator==<char *, std::string>(__gnu_cxx::__normal_iterator<char *, std::string> const&, __gnu_cxx::__normal_iterator<char *, std::string> const&)
.text:0040E438                 public __ZN9__gnu_cxxeqIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_
.text:0040E438 __ZN9__gnu_cxxeqIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_ proc near
.text:0040E438
.text:0040E438 arg_0           = dword ptr  4
.text:0040E438 arg_4           = dword ptr  8
.text:0040E438
.text:0040E438                 mov     eax, [esp+arg_4]
.text:0040E43C                 mov     edx, [esp+arg_0]
.text:0040E440                 mov     ecx, [eax]
.text:0040E442                 cmp     [edx], ecx
.text:0040E444                 setz    al
.text:0040E447                 retn
.text:0040E447 __ZN9__gnu_cxxeqIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_ endp
.text:0040E447
.text:0040E448
.text:0040E448 ; =============== S U B R O U T I N E =======================================
.text:0040E448
.text:0040E448 ; Attributes: bp-based frame
.text:0040E448
.text:0040E448 ; __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::max_size(void)const
.text:0040E448                 public __ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEE8max_sizeEv
.text:0040E448 __ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEE8max_sizeEv proc near
.text:0040E448                                         ; CODE XREF: __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::allocate(uint,void const*)+E↑p
.text:0040E448
.text:0040E448 var_4           = dword ptr -4
.text:0040E448
.text:0040E448                 push    ebp
.text:0040E449                 mov     ebp, esp
.text:0040E44B                 sub     esp, 4
.text:0040E44E                 mov     [ebp+var_4], ecx
.text:0040E451                 mov     eax, 0CCCCCCCh
.text:0040E456                 leave
.text:0040E457                 retn
.text:0040E457 __ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEE8max_sizeEv endp
.text:0040E457
.text:0040E458
.text:0040E458 ; =============== S U B R O U T I N E =======================================
.text:0040E458
.text:0040E458
.text:0040E458 ; _DWORD __gnu_cxx::__concurrence_lock_error::what(__gnu_cxx::__concurrence_lock_error *__hidden this)
.text:0040E458                 public __ZNK9__gnu_cxx24__concurrence_lock_error4whatEv
.text:0040E458 __ZNK9__gnu_cxx24__concurrence_lock_error4whatEv proc near
.text:0040E458                                         ; DATA XREF: .rdata:00416348↓o
.text:0040E458
.text:0040E458 this            = dword ptr  4
.text:0040E458
.text:0040E458                 mov     eax, offset aGnuCxxConcurre ; "__gnu_cxx::__concurrence_lock_error"
.text:0040E45D                 retn
.text:0040E45D __ZNK9__gnu_cxx24__concurrence_lock_error4whatEv endp
.text:0040E45D
.text:0040E45D ; ---------------------------------------------------------------------------
.text:0040E45E                 align 10h
.text:0040E460
.text:0040E460 ; =============== S U B R O U T I N E =======================================
.text:0040E460
.text:0040E460
.text:0040E460 ; _DWORD __gnu_cxx::__concurrence_unlock_error::what(__gnu_cxx::__concurrence_unlock_error *__hidden this)
.text:0040E460                 public __ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv
.text:0040E460 __ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv proc near
.text:0040E460                                         ; DATA XREF: .rdata:00416360↓o
.text:0040E460
.text:0040E460 this            = dword ptr  4
.text:0040E460
.text:0040E460                 mov     eax, offset aGnuCxxConcurre_0 ; "__gnu_cxx::__concurrence_unlock_error"
.text:0040E465                 retn
.text:0040E465 __ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv endp
.text:0040E465
.text:0040E465 ; ---------------------------------------------------------------------------
.text:0040E466                 align 4
.text:0040E468
.text:0040E468 ; =============== S U B R O U T I N E =======================================
.text:0040E468
.text:0040E468
.text:0040E468 ; _DWORD __stdcall std::string::_M_disjunct(std::string *__hidden this, const char *)
.text:0040E468                 public __ZNKSs11_M_disjunctEPKc
.text:0040E468 __ZNKSs11_M_disjunctEPKc proc near
.text:0040E468
.text:0040E468 this            = dword ptr  4
.text:0040E468
.text:0040E468                 mov     eax, [ecx]
.text:0040E46A                 cmp     [esp+this], eax
.text:0040E46E                 jb      short loc_40E480
.text:0040E470                 add     eax, [eax-0Ch]
.text:0040E473                 cmp     [esp+this], eax
.text:0040E477                 setnbe  al
.text:0040E47A                 retn    4
.text:0040E47A ; ---------------------------------------------------------------------------
.text:0040E47D                 align 10h
.text:0040E480
.text:0040E480 loc_40E480:                             ; CODE XREF: std::string::_M_disjunct(char const*)+6↑j
.text:0040E480                 mov     al, 1
.text:0040E482                 retn    4
.text:0040E482 __ZNKSs11_M_disjunctEPKc endp
.text:0040E482
.text:0040E482 ; ---------------------------------------------------------------------------
.text:0040E485                 align 4
.text:0040E488
.text:0040E488 ; =============== S U B R O U T I N E =======================================
.text:0040E488
.text:0040E488
.text:0040E488 ; _DWORD __stdcall std::string::find_last_of(std::string *__hidden this, const char *, unsigned int)
.text:0040E488                 public __ZNKSs12find_last_ofEPKcj
.text:0040E488 __ZNKSs12find_last_ofEPKcj proc near
.text:0040E488
.text:0040E488 var_1C          = dword ptr -1Ch
.text:0040E488 var_18          = dword ptr -18h
.text:0040E488 var_14          = dword ptr -14h
.text:0040E488 this            = dword ptr  4
.text:0040E488 arg_4           = dword ptr  8
.text:0040E488
.text:0040E488                 push    edi
.text:0040E489                 push    ebx
.text:0040E48A                 sub     esp, 14h
.text:0040E48D                 mov     ebx, ecx
.text:0040E48F                 mov     edx, [esp+1Ch+this]
.text:0040E493                 mov     edi, edx
.text:0040E495                 xor     eax, eax
.text:0040E497                 mov     ecx, 0FFFFFFFFh
.text:0040E49C                 repne scasb
.text:0040E49E                 not     ecx
.text:0040E4A0                 lea     eax, [ecx-1]
.text:0040E4A3                 mov     [esp+1Ch+var_14], eax ; size_t
.text:0040E4A7                 mov     eax, [esp+1Ch+arg_4]
.text:0040E4AB                 mov     [esp+1Ch+var_18], eax ; char *
.text:0040E4AF                 mov     [esp+1Ch+var_1C], edx ; this
.text:0040E4B2                 mov     ecx, ebx
.text:0040E4B4                 call    __ZNKSs12find_last_ofEPKcjj ; std::string::find_last_of(char const*,uint,uint)
.text:0040E4B9                 sub     esp, 0Ch
.text:0040E4BC                 add     esp, 14h
.text:0040E4BF                 pop     ebx
.text:0040E4C0                 pop     edi
.text:0040E4C1                 retn    8
.text:0040E4C1 __ZNKSs12find_last_ofEPKcj endp
.text:0040E4C1
.text:0040E4C4
.text:0040E4C4 ; =============== S U B R O U T I N E =======================================
.text:0040E4C4
.text:0040E4C4
.text:0040E4C4 ; _DWORD __stdcall std::string::find_last_of(std::string *__hidden this, const char *, size_t, unsigned int)
.text:0040E4C4                 public __ZNKSs12find_last_ofEPKcjj
.text:0040E4C4 __ZNKSs12find_last_ofEPKcjj proc near   ; CODE XREF: std::string::find_last_of(char const*,uint)+2C↑p
.text:0040E4C4                                         ; std::string::find_last_of(std::string const&,uint)+1B↓p
.text:0040E4C4
.text:0040E4C4 var_1C          = dword ptr -1Ch
.text:0040E4C4 var_18          = dword ptr -18h
.text:0040E4C4 var_14          = dword ptr -14h
.text:0040E4C4 this            = dword ptr  4
.text:0040E4C4 arg_4           = dword ptr  8
.text:0040E4C4 arg_8           = dword ptr  0Ch
.text:0040E4C4
.text:0040E4C4                 push    esi
.text:0040E4C5                 push    ebx
.text:0040E4C6                 sub     esp, 14h
.text:0040E4C9                 mov     esi, [ecx]
.text:0040E4CB                 mov     eax, [esi-0Ch]
.text:0040E4CE                 test    eax, eax
.text:0040E4D0                 jnz     short loc_40E4E4
.text:0040E4D2
.text:0040E4D2 loc_40E4D2:                             ; CODE XREF: std::string::find_last_of(char const*,uint,uint)+26↓j
.text:0040E4D2                                         ; std::string::find_last_of(char const*,uint,uint)+59↓j
.text:0040E4D2                 mov     ebx, 0FFFFFFFFh
.text:0040E4D7
.text:0040E4D7 loc_40E4D7:                             ; CODE XREF: std::string::find_last_of(char const*,uint,uint)+52↓j
.text:0040E4D7                 mov     eax, ebx
.text:0040E4D9                 add     esp, 14h
.text:0040E4DC                 pop     ebx
.text:0040E4DD                 pop     esi
.text:0040E4DE                 retn    0Ch
.text:0040E4DE ; ---------------------------------------------------------------------------
.text:0040E4E1                 align 4
.text:0040E4E4
.text:0040E4E4 loc_40E4E4:                             ; CODE XREF: std::string::find_last_of(char const*,uint,uint)+C↑j
.text:0040E4E4                 mov     edx, [esp+1Ch+arg_8]
.text:0040E4E8                 test    edx, edx
.text:0040E4EA                 jz      short loc_40E4D2
.text:0040E4EC                 dec     eax
.text:0040E4ED                 mov     ebx, [esp+1Ch+arg_4]
.text:0040E4F1                 cmp     ebx, eax
.text:0040E4F3                 ja      short loc_40E51F
.text:0040E4F5                 lea     esi, [esi+0]
.text:0040E4F8
.text:0040E4F8 loc_40E4F8:                             ; CODE XREF: std::string::find_last_of(char const*,uint,uint)+5D↓j
.text:0040E4F8                 mov     eax, [esp+1Ch+arg_8]
.text:0040E4FC                 mov     [esp+1Ch+var_14], eax ; size_t
.text:0040E500                 movsx   eax, byte ptr [esi+ebx]
.text:0040E504                 mov     [esp+1Ch+var_18], eax ; int
.text:0040E508                 mov     eax, [esp+1Ch+this]
.text:0040E50C                 mov     [esp+1Ch+var_1C], eax ; void *
.text:0040E50F                 call    _memchr
.text:0040E514                 test    eax, eax
.text:0040E516                 jnz     short loc_40E4D7
.text:0040E518                 lea     eax, [ebx-1]
.text:0040E51B                 test    ebx, ebx
.text:0040E51D                 jz      short loc_40E4D2
.text:0040E51F
.text:0040E51F loc_40E51F:                             ; CODE XREF: std::string::find_last_of(char const*,uint,uint)+2F↑j
.text:0040E51F                 mov     ebx, eax
.text:0040E521                 jmp     short loc_40E4F8
.text:0040E521 __ZNKSs12find_last_ofEPKcjj endp
.text:0040E521
.text:0040E521 ; ---------------------------------------------------------------------------
.text:0040E523                 align 4
.text:0040E524
.text:0040E524 ; =============== S U B R O U T I N E =======================================
.text:0040E524
.text:0040E524
.text:0040E524 ; _DWORD __stdcall std::string::find_last_of(std::string *__hidden this, const std::string *, unsigned int)
.text:0040E524                 public __ZNKSs12find_last_ofERKSsj
.text:0040E524 __ZNKSs12find_last_ofERKSsj proc near
.text:0040E524
.text:0040E524 var_1C          = dword ptr -1Ch
.text:0040E524 var_18          = dword ptr -18h
.text:0040E524 var_14          = dword ptr -14h
.text:0040E524 this            = dword ptr  4
.text:0040E524 arg_4           = dword ptr  8
.text:0040E524
.text:0040E524                 sub     esp, 1Ch
.text:0040E527                 mov     eax, [esp+1Ch+this]
.text:0040E52B                 mov     eax, [eax]
.text:0040E52D                 mov     edx, [eax-0Ch]
.text:0040E530                 mov     [esp+1Ch+var_14], edx ; size_t
.text:0040E534                 mov     edx, [esp+1Ch+arg_4]
.text:0040E538                 mov     [esp+1Ch+var_18], edx ; char *
.text:0040E53C                 mov     [esp+1Ch+var_1C], eax ; this
.text:0040E53F                 call    __ZNKSs12find_last_ofEPKcjj ; std::string::find_last_of(char const*,uint,uint)
.text:0040E544                 sub     esp, 0Ch
.text:0040E547                 add     esp, 1Ch
.text:0040E54A                 retn    8
.text:0040E54A __ZNKSs12find_last_ofERKSsj endp
.text:0040E54A
.text:0040E54A ; ---------------------------------------------------------------------------
.text:0040E54D                 align 10h
.text:0040E550
.text:0040E550 ; =============== S U B R O U T I N E =======================================
.text:0040E550
.text:0040E550
.text:0040E550 ; _DWORD __stdcall std::string::find_last_of(std::string *__hidden this, char, unsigned int)
.text:0040E550                 public __ZNKSs12find_last_ofEcj
.text:0040E550 __ZNKSs12find_last_ofEcj proc near
.text:0040E550
.text:0040E550 this            = dword ptr  4
.text:0040E550 arg_4           = byte ptr  8
.text:0040E550
.text:0040E550                 push    ebx
.text:0040E551                 mov     bl, byte ptr [esp+4+this]
.text:0040E555                 mov     ecx, [ecx]
.text:0040E557                 mov     eax, [ecx-0Ch]
.text:0040E55A                 test    eax, eax
.text:0040E55C                 jnz     short loc_40E568
.text:0040E55E                 mov     eax, 0FFFFFFFFh
.text:0040E563
.text:0040E563 loc_40E563:                             ; CODE XREF: std::string::find_last_of(char,uint)+27↓j
.text:0040E563                                         ; std::string::find_last_of(char,uint)+2F↓j
.text:0040E563                 pop     ebx
.text:0040E564                 retn    8
.text:0040E564 ; ---------------------------------------------------------------------------
.text:0040E567                 align 4
.text:0040E568
.text:0040E568 loc_40E568:                             ; CODE XREF: std::string::find_last_of(char,uint)+C↑j
.text:0040E568                 lea     edx, [eax-1]
.text:0040E56B                 mov     eax, dword ptr [esp+4+arg_4]
.text:0040E56F                 cmp     eax, edx
.text:0040E571                 ja      short loc_40E581
.text:0040E573                 nop
.text:0040E574
.text:0040E574 loc_40E574:                             ; CODE XREF: std::string::find_last_of(char,uint)+33↓j
.text:0040E574                 cmp     eax, 0FFFFFFFFh
.text:0040E577                 jz      short loc_40E563
.text:0040E579                 lea     edx, [eax-1]
.text:0040E57C                 cmp     bl, [ecx+eax]
.text:0040E57F                 jz      short loc_40E563
.text:0040E581
.text:0040E581 loc_40E581:                             ; CODE XREF: std::string::find_last_of(char,uint)+21↑j
.text:0040E581                 mov     eax, edx
.text:0040E583                 jmp     short loc_40E574
.text:0040E583 __ZNKSs12find_last_ofEcj endp
.text:0040E583
.text:0040E583 ; ---------------------------------------------------------------------------
.text:0040E585                 align 4
.text:0040E588
.text:0040E588 ; =============== S U B R O U T I N E =======================================
.text:0040E588
.text:0040E588
.text:0040E588 ; _DWORD __stdcall std::string::find_first_of(std::string *__hidden this, const char *, unsigned int)
.text:0040E588                 public __ZNKSs13find_first_ofEPKcj
.text:0040E588 __ZNKSs13find_first_ofEPKcj proc near
.text:0040E588
.text:0040E588 var_1C          = dword ptr -1Ch
.text:0040E588 var_18          = dword ptr -18h
.text:0040E588 var_14          = dword ptr -14h
.text:0040E588 this            = dword ptr  4
.text:0040E588 arg_4           = dword ptr  8
.text:0040E588
.text:0040E588                 push    edi
.text:0040E589                 push    ebx
.text:0040E58A                 sub     esp, 14h
.text:0040E58D                 mov     ebx, ecx
.text:0040E58F                 mov     edx, [esp+1Ch+this]
.text:0040E593                 mov     edi, edx
.text:0040E595                 xor     eax, eax
.text:0040E597                 mov     ecx, 0FFFFFFFFh
.text:0040E59C                 repne scasb
.text:0040E59E                 not     ecx
.text:0040E5A0                 lea     eax, [ecx-1]
.text:0040E5A3                 mov     [esp+1Ch+var_14], eax ; size_t
.text:0040E5A7                 mov     eax, [esp+1Ch+arg_4]
.text:0040E5AB                 mov     [esp+1Ch+var_18], eax ; char *
.text:0040E5AF                 mov     [esp+1Ch+var_1C], edx ; this
.text:0040E5B2                 mov     ecx, ebx
.text:0040E5B4                 call    __ZNKSs13find_first_ofEPKcjj ; std::string::find_first_of(char const*,uint,uint)
.text:0040E5B9                 sub     esp, 0Ch
.text:0040E5BC                 add     esp, 14h
.text:0040E5BF                 pop     ebx
.text:0040E5C0                 pop     edi
.text:0040E5C1                 retn    8
.text:0040E5C1 __ZNKSs13find_first_ofEPKcj endp
.text:0040E5C1
.text:0040E5C4
.text:0040E5C4 ; =============== S U B R O U T I N E =======================================
.text:0040E5C4
.text:0040E5C4
.text:0040E5C4 ; _DWORD __stdcall std::string::find_first_of(std::string *__hidden this, const char *, size_t, unsigned int)
.text:0040E5C4                 public __ZNKSs13find_first_ofEPKcjj
.text:0040E5C4 __ZNKSs13find_first_ofEPKcjj proc near  ; CODE XREF: std::string::find_first_of(char const*,uint)+2C↑p
.text:0040E5C4                                         ; std::string::find_first_of(std::string const&,uint)+1B↓p
.text:0040E5C4
.text:0040E5C4 var_2C          = dword ptr -2Ch
.text:0040E5C4 var_28          = dword ptr -28h
.text:0040E5C4 var_24          = dword ptr -24h
.text:0040E5C4 this            = dword ptr  4
.text:0040E5C4 arg_4           = dword ptr  8
.text:0040E5C4 arg_8           = dword ptr  0Ch
.text:0040E5C4
.text:0040E5C4                 push    ebp
.text:0040E5C5                 push    edi
.text:0040E5C6                 push    esi
.text:0040E5C7                 push    ebx
.text:0040E5C8                 sub     esp, 1Ch
.text:0040E5CB                 mov     ebx, [esp+2Ch+arg_4]
.text:0040E5CF                 mov     esi, [esp+2Ch+arg_8]
.text:0040E5D3                 test    esi, esi
.text:0040E5D5                 jz      short loc_40E601
.text:0040E5D7                 mov     edi, [ecx]
.text:0040E5D9                 mov     ebp, [edi-0Ch]
.text:0040E5DC                 cmp     ebp, ebx
.text:0040E5DE                 jbe     short loc_40E601
.text:0040E5E0
.text:0040E5E0 loc_40E5E0:                             ; CODE XREF: std::string::find_first_of(char const*,uint,uint)+3B↓j
.text:0040E5E0                 mov     [esp+2Ch+var_24], esi ; size_t
.text:0040E5E4                 movsx   eax, byte ptr [edi+ebx]
.text:0040E5E8                 mov     [esp+2Ch+var_28], eax ; int
.text:0040E5EC                 mov     eax, [esp+2Ch+this]
.text:0040E5F0                 mov     [esp+2Ch+var_2C], eax ; void *
.text:0040E5F3                 call    _memchr
.text:0040E5F8                 test    eax, eax
.text:0040E5FA                 jnz     short loc_40E606
.text:0040E5FC                 inc     ebx
.text:0040E5FD                 cmp     ebp, ebx
.text:0040E5FF                 ja      short loc_40E5E0
.text:0040E601
.text:0040E601 loc_40E601:                             ; CODE XREF: std::string::find_first_of(char const*,uint,uint)+11↑j
.text:0040E601                                         ; std::string::find_first_of(char const*,uint,uint)+1A↑j
.text:0040E601                 mov     ebx, 0FFFFFFFFh
.text:0040E606
.text:0040E606 loc_40E606:                             ; CODE XREF: std::string::find_first_of(char const*,uint,uint)+36↑j
.text:0040E606                 mov     eax, ebx
.text:0040E608                 add     esp, 1Ch
.text:0040E60B                 pop     ebx
.text:0040E60C                 pop     esi
.text:0040E60D                 pop     edi
.text:0040E60E                 pop     ebp
.text:0040E60F                 retn    0Ch
.text:0040E60F __ZNKSs13find_first_ofEPKcjj endp
.text:0040E60F
.text:0040E60F ; ---------------------------------------------------------------------------
.text:0040E612                 align 4
.text:0040E614
.text:0040E614 ; =============== S U B R O U T I N E =======================================
.text:0040E614
.text:0040E614
.text:0040E614 ; _DWORD __stdcall std::string::find_first_of(std::string *__hidden this, const std::string *, unsigned int)
.text:0040E614                 public __ZNKSs13find_first_ofERKSsj
.text:0040E614 __ZNKSs13find_first_ofERKSsj proc near
.text:0040E614
.text:0040E614 var_1C          = dword ptr -1Ch
.text:0040E614 var_18          = dword ptr -18h
.text:0040E614 var_14          = dword ptr -14h
.text:0040E614 this            = dword ptr  4
.text:0040E614 arg_4           = dword ptr  8
.text:0040E614
.text:0040E614                 sub     esp, 1Ch
.text:0040E617                 mov     eax, [esp+1Ch+this]
.text:0040E61B                 mov     eax, [eax]
.text:0040E61D                 mov     edx, [eax-0Ch]
.text:0040E620                 mov     [esp+1Ch+var_14], edx ; size_t
.text:0040E624                 mov     edx, [esp+1Ch+arg_4]
.text:0040E628                 mov     [esp+1Ch+var_18], edx ; char *
.text:0040E62C                 mov     [esp+1Ch+var_1C], eax ; this
.text:0040E62F                 call    __ZNKSs13find_first_ofEPKcjj ; std::string::find_first_of(char const*,uint,uint)
.text:0040E634                 sub     esp, 0Ch
.text:0040E637                 add     esp, 1Ch
.text:0040E63A                 retn    8
.text:0040E63A __ZNKSs13find_first_ofERKSsj endp
.text:0040E63A
.text:0040E63A ; ---------------------------------------------------------------------------
.text:0040E63D                 align 10h
.text:0040E640
.text:0040E640 ; =============== S U B R O U T I N E =======================================
.text:0040E640
.text:0040E640
.text:0040E640 ; _DWORD __stdcall std::string::find_first_of(std::string *__hidden this, char, unsigned int)
.text:0040E640                 public __ZNKSs13find_first_ofEcj
.text:0040E640 __ZNKSs13find_first_ofEcj proc near
.text:0040E640
.text:0040E640 this            = dword ptr  4
.text:0040E640
.text:0040E640                 movsx   eax, byte ptr [esp+this]
.text:0040E645                 mov     [esp+this], eax ; this
.text:0040E649                 jmp     __ZNKSs4findEcj ; std::string::find(char,uint)
.text:0040E649 __ZNKSs13find_first_ofEcj endp
.text:0040E649
.text:0040E649 ; ---------------------------------------------------------------------------
.text:0040E64E                 align 10h
.text:0040E650
.text:0040E650 ; =============== S U B R O U T I N E =======================================
.text:0040E650
.text:0040E650
.text:0040E650 ; _DWORD __stdcall std::string::get_allocator(std::string *__hidden this)
.text:0040E650                 public __ZNKSs13get_allocatorEv
.text:0040E650 __ZNKSs13get_allocatorEv proc near
.text:0040E650
.text:0040E650 this            = dword ptr  4
.text:0040E650
.text:0040E650                 mov     eax, ecx
.text:0040E652                 retn    4
.text:0040E652 __ZNKSs13get_allocatorEv endp
.text:0040E652
.text:0040E652 ; ---------------------------------------------------------------------------
.text:0040E655                 align 4
.text:0040E658
.text:0040E658 ; =============== S U B R O U T I N E =======================================
.text:0040E658
.text:0040E658
.text:0040E658 ; _DWORD __stdcall std::string::_M_check_length(std::string *__hidden this, unsigned int, char *, const char *)
.text:0040E658                 public __ZNKSs15_M_check_lengthEjjPKc
.text:0040E658 __ZNKSs15_M_check_lengthEjjPKc proc near
.text:0040E658
.text:0040E658 var_1C          = dword ptr -1Ch
.text:0040E658 this            = dword ptr  4
.text:0040E658 arg_4           = dword ptr  8
.text:0040E658 arg_8           = dword ptr  0Ch
.text:0040E658
.text:0040E658                 sub     esp, 1Ch
.text:0040E65B                 mov     edx, [ecx]
.text:0040E65D                 mov     eax, 3FFFFFFCh
.text:0040E662                 sub     eax, [edx-0Ch]
.text:0040E665                 add     eax, [esp+1Ch+this]
.text:0040E669                 cmp     eax, [esp+1Ch+arg_4]
.text:0040E66D                 jb      short loc_40E675
.text:0040E66F                 add     esp, 1Ch
.text:0040E672                 retn    0Ch
.text:0040E675 ; ---------------------------------------------------------------------------
.text:0040E675
.text:0040E675 loc_40E675:                             ; CODE XREF: std::string::_M_check_length(uint,uint,char const*)+15↑j
.text:0040E675                 mov     eax, [esp+1Ch+arg_8]
.text:0040E679                 mov     [esp+1Ch+var_1C], eax ; char *
.text:0040E67C                 call    __ZSt20__throw_length_errorPKc ; std::__throw_length_error(char const*)
.text:0040E67C __ZNKSs15_M_check_lengthEjjPKc endp
.text:0040E67C
.text:0040E67C ; ---------------------------------------------------------------------------
.text:0040E681                 align 4
.text:0040E684
.text:0040E684 ; =============== S U B R O U T I N E =======================================
.text:0040E684
.text:0040E684
.text:0040E684 ; _DWORD __stdcall std::string::find_last_not_of(std::string *__hidden this, const char *, unsigned int)
.text:0040E684                 public __ZNKSs16find_last_not_ofEPKcj
.text:0040E684 __ZNKSs16find_last_not_ofEPKcj proc near
.text:0040E684
.text:0040E684 var_1C          = dword ptr -1Ch
.text:0040E684 var_18          = dword ptr -18h
.text:0040E684 var_14          = dword ptr -14h
.text:0040E684 this            = dword ptr  4
.text:0040E684 arg_4           = dword ptr  8
.text:0040E684
.text:0040E684                 push    edi
.text:0040E685                 push    ebx
.text:0040E686                 sub     esp, 14h
.text:0040E689                 mov     ebx, ecx
.text:0040E68B                 mov     edx, [esp+1Ch+this]
.text:0040E68F                 mov     edi, edx
.text:0040E691                 xor     eax, eax
.text:0040E693                 mov     ecx, 0FFFFFFFFh
.text:0040E698                 repne scasb
.text:0040E69A                 not     ecx
.text:0040E69C                 lea     eax, [ecx-1]
.text:0040E69F                 mov     [esp+1Ch+var_14], eax ; size_t
.text:0040E6A3                 mov     eax, [esp+1Ch+arg_4]
.text:0040E6A7                 mov     [esp+1Ch+var_18], eax ; char *
.text:0040E6AB                 mov     [esp+1Ch+var_1C], edx ; this
.text:0040E6AE                 mov     ecx, ebx
.text:0040E6B0                 call    __ZNKSs16find_last_not_ofEPKcjj ; std::string::find_last_not_of(char const*,uint,uint)
.text:0040E6B5                 sub     esp, 0Ch
.text:0040E6B8                 add     esp, 14h
.text:0040E6BB                 pop     ebx
.text:0040E6BC                 pop     edi
.text:0040E6BD                 retn    8
.text:0040E6BD __ZNKSs16find_last_not_ofEPKcj endp
.text:0040E6BD
.text:0040E6C0
.text:0040E6C0 ; =============== S U B R O U T I N E =======================================
.text:0040E6C0
.text:0040E6C0
.text:0040E6C0 ; _DWORD __stdcall std::string::find_last_not_of(std::string *__hidden this, const char *, size_t, unsigned int)
.text:0040E6C0                 public __ZNKSs16find_last_not_ofEPKcjj
.text:0040E6C0 __ZNKSs16find_last_not_ofEPKcjj proc near
.text:0040E6C0                                         ; CODE XREF: std::string::find_last_not_of(char const*,uint)+2C↑p
.text:0040E6C0                                         ; std::string::find_last_not_of(std::string const&,uint)+1B↓p
.text:0040E6C0
.text:0040E6C0 var_2C          = dword ptr -2Ch
.text:0040E6C0 var_28          = dword ptr -28h
.text:0040E6C0 var_24          = dword ptr -24h
.text:0040E6C0 this            = dword ptr  4
.text:0040E6C0 arg_4           = dword ptr  8
.text:0040E6C0 arg_8           = dword ptr  0Ch
.text:0040E6C0
.text:0040E6C0                 push    ebp
.text:0040E6C1                 push    edi
.text:0040E6C2                 push    esi
.text:0040E6C3                 push    ebx
.text:0040E6C4                 sub     esp, 1Ch
.text:0040E6C7                 mov     edi, [esp+2Ch+this]
.text:0040E6CB                 mov     ebp, [esp+2Ch+arg_8]
.text:0040E6CF                 mov     esi, [ecx]
.text:0040E6D1                 mov     eax, [esi-0Ch]
.text:0040E6D4                 test    eax, eax
.text:0040E6D6                 jnz     short loc_40E6EC
.text:0040E6D8
.text:0040E6D8 loc_40E6D8:                             ; CODE XREF: std::string::find_last_not_of(char const*,uint,uint)+55↓j
.text:0040E6D8                 mov     ebx, 0FFFFFFFFh
.text:0040E6DD
.text:0040E6DD loc_40E6DD:                             ; CODE XREF: std::string::find_last_not_of(char const*,uint,uint)+4E↓j
.text:0040E6DD                 mov     eax, ebx
.text:0040E6DF                 add     esp, 1Ch
.text:0040E6E2                 pop     ebx
.text:0040E6E3                 pop     esi
.text:0040E6E4                 pop     edi
.text:0040E6E5                 pop     ebp
.text:0040E6E6                 retn    0Ch
.text:0040E6E6 ; ---------------------------------------------------------------------------
.text:0040E6E9                 align 4
.text:0040E6EC
.text:0040E6EC loc_40E6EC:                             ; CODE XREF: std::string::find_last_not_of(char const*,uint,uint)+16↑j
.text:0040E6EC                 dec     eax
.text:0040E6ED                 mov     ebx, [esp+2Ch+arg_4]
.text:0040E6F1                 cmp     ebx, eax
.text:0040E6F3                 ja      short loc_40E717
.text:0040E6F5                 lea     esi, [esi+0]
.text:0040E6F8
.text:0040E6F8 loc_40E6F8:                             ; CODE XREF: std::string::find_last_not_of(char const*,uint,uint)+59↓j
.text:0040E6F8                 mov     [esp+2Ch+var_24], ebp ; size_t
.text:0040E6FC                 movsx   eax, byte ptr [esi+ebx]
.text:0040E700                 mov     [esp+2Ch+var_28], eax ; int
.text:0040E704                 mov     [esp+2Ch+var_2C], edi ; void *
.text:0040E707                 call    _memchr
.text:0040E70C                 test    eax, eax
.text:0040E70E                 jz      short loc_40E6DD
.text:0040E710                 lea     eax, [ebx-1]
.text:0040E713                 test    ebx, ebx
.text:0040E715                 jz      short loc_40E6D8
.text:0040E717
.text:0040E717 loc_40E717:                             ; CODE XREF: std::string::find_last_not_of(char const*,uint,uint)+33↑j
.text:0040E717                 mov     ebx, eax
.text:0040E719                 jmp     short loc_40E6F8
.text:0040E719 __ZNKSs16find_last_not_ofEPKcjj endp
.text:0040E719
.text:0040E719 ; ---------------------------------------------------------------------------
.text:0040E71B                 align 4
.text:0040E71C
.text:0040E71C ; =============== S U B R O U T I N E =======================================
.text:0040E71C
.text:0040E71C
.text:0040E71C ; _DWORD __stdcall std::string::find_last_not_of(std::string *__hidden this, const std::string *, unsigned int)
.text:0040E71C                 public __ZNKSs16find_last_not_ofERKSsj
.text:0040E71C __ZNKSs16find_last_not_ofERKSsj proc near
.text:0040E71C
.text:0040E71C var_1C          = dword ptr -1Ch
.text:0040E71C var_18          = dword ptr -18h
.text:0040E71C var_14          = dword ptr -14h
.text:0040E71C this            = dword ptr  4
.text:0040E71C arg_4           = dword ptr  8
.text:0040E71C
.text:0040E71C                 sub     esp, 1Ch
.text:0040E71F                 mov     eax, [esp+1Ch+this]
.text:0040E723                 mov     eax, [eax]
.text:0040E725                 mov     edx, [eax-0Ch]
.text:0040E728                 mov     [esp+1Ch+var_14], edx ; size_t
.text:0040E72C                 mov     edx, [esp+1Ch+arg_4]
.text:0040E730                 mov     [esp+1Ch+var_18], edx ; char *
.text:0040E734                 mov     [esp+1Ch+var_1C], eax ; this
.text:0040E737                 call    __ZNKSs16find_last_not_ofEPKcjj ; std::string::find_last_not_of(char const*,uint,uint)
.text:0040E73C                 sub     esp, 0Ch
.text:0040E73F                 add     esp, 1Ch
.text:0040E742                 retn    8
.text:0040E742 __ZNKSs16find_last_not_ofERKSsj endp
.text:0040E742
.text:0040E742 ; ---------------------------------------------------------------------------
.text:0040E745                 align 4
.text:0040E748
.text:0040E748 ; =============== S U B R O U T I N E =======================================
.text:0040E748
.text:0040E748
.text:0040E748 ; _DWORD __stdcall std::string::find_last_not_of(std::string *__hidden this, char, unsigned int)
.text:0040E748                 public __ZNKSs16find_last_not_ofEcj
.text:0040E748 __ZNKSs16find_last_not_ofEcj proc near
.text:0040E748
.text:0040E748 this            = dword ptr  4
.text:0040E748 arg_4           = byte ptr  8
.text:0040E748
.text:0040E748                 push    ebx
.text:0040E749                 mov     bl, byte ptr [esp+4+this]
.text:0040E74D                 mov     edx, [ecx]
.text:0040E74F                 mov     eax, [edx-0Ch]
.text:0040E752                 test    eax, eax
.text:0040E754                 jnz     short loc_40E760
.text:0040E756
.text:0040E756 loc_40E756:                             ; CODE XREF: std::string::find_last_not_of(char,uint)+2E↓j
.text:0040E756                 mov     eax, 0FFFFFFFFh
.text:0040E75B
.text:0040E75B loc_40E75B:                             ; CODE XREF: std::string::find_last_not_of(char,uint)+27↓j
.text:0040E75B                 pop     ebx
.text:0040E75C                 retn    8
.text:0040E75C ; ---------------------------------------------------------------------------
.text:0040E75F                 align 10h
.text:0040E760
.text:0040E760 loc_40E760:                             ; CODE XREF: std::string::find_last_not_of(char,uint)+C↑j
.text:0040E760                 lea     ecx, [eax-1]
.text:0040E763                 mov     eax, dword ptr [esp+4+arg_4]
.text:0040E767                 cmp     eax, ecx
.text:0040E769                 ja      short loc_40E778
.text:0040E76B                 nop
.text:0040E76C
.text:0040E76C loc_40E76C:                             ; CODE XREF: std::string::find_last_not_of(char,uint)+32↓j
.text:0040E76C                 cmp     [edx+eax], bl
.text:0040E76F                 jnz     short loc_40E75B
.text:0040E771                 lea     ecx, [eax-1]
.text:0040E774                 test    eax, eax
.text:0040E776                 jz      short loc_40E756
.text:0040E778
.text:0040E778 loc_40E778:                             ; CODE XREF: std::string::find_last_not_of(char,uint)+21↑j
.text:0040E778                 mov     eax, ecx
.text:0040E77A                 jmp     short loc_40E76C
.text:0040E77A __ZNKSs16find_last_not_ofEcj endp
.text:0040E77A
.text:0040E77C
.text:0040E77C ; =============== S U B R O U T I N E =======================================
.text:0040E77C
.text:0040E77C
.text:0040E77C ; _DWORD __stdcall std::string::find_first_not_of(std::string *__hidden this, const char *, unsigned int)
.text:0040E77C                 public __ZNKSs17find_first_not_ofEPKcj
.text:0040E77C __ZNKSs17find_first_not_ofEPKcj proc near
.text:0040E77C
.text:0040E77C var_1C          = dword ptr -1Ch
.text:0040E77C var_18          = dword ptr -18h
.text:0040E77C var_14          = dword ptr -14h
.text:0040E77C this            = dword ptr  4
.text:0040E77C arg_4           = dword ptr  8
.text:0040E77C
.text:0040E77C                 push    edi
.text:0040E77D                 push    ebx
.text:0040E77E                 sub     esp, 14h
.text:0040E781                 mov     ebx, ecx
.text:0040E783                 mov     edx, [esp+1Ch+this]
.text:0040E787                 mov     edi, edx
.text:0040E789                 xor     eax, eax
.text:0040E78B                 mov     ecx, 0FFFFFFFFh
.text:0040E790                 repne scasb
.text:0040E792                 not     ecx
.text:0040E794                 lea     eax, [ecx-1]
.text:0040E797                 mov     [esp+1Ch+var_14], eax ; size_t
.text:0040E79B                 mov     eax, [esp+1Ch+arg_4]
.text:0040E79F                 mov     [esp+1Ch+var_18], eax ; char *
.text:0040E7A3                 mov     [esp+1Ch+var_1C], edx ; this
.text:0040E7A6                 mov     ecx, ebx
.text:0040E7A8                 call    __ZNKSs17find_first_not_ofEPKcjj ; std::string::find_first_not_of(char const*,uint,uint)
.text:0040E7AD                 sub     esp, 0Ch
.text:0040E7B0                 add     esp, 14h
.text:0040E7B3                 pop     ebx
.text:0040E7B4                 pop     edi
.text:0040E7B5                 retn    8
.text:0040E7B5 __ZNKSs17find_first_not_ofEPKcj endp
.text:0040E7B5
.text:0040E7B8
.text:0040E7B8 ; =============== S U B R O U T I N E =======================================
.text:0040E7B8
.text:0040E7B8
.text:0040E7B8 ; _DWORD __stdcall std::string::find_first_not_of(std::string *__hidden this, const char *, size_t, unsigned int)
.text:0040E7B8                 public __ZNKSs17find_first_not_ofEPKcjj
.text:0040E7B8 __ZNKSs17find_first_not_ofEPKcjj proc near
.text:0040E7B8                                         ; CODE XREF: std::string::find_first_not_of(char const*,uint)+2C↑p
.text:0040E7B8                                         ; std::string::find_first_not_of(std::string const&,uint)+1B↓p
.text:0040E7B8
.text:0040E7B8 var_3C          = dword ptr -3Ch
.text:0040E7B8 var_38          = dword ptr -38h
.text:0040E7B8 var_34          = dword ptr -34h
.text:0040E7B8 var_20          = dword ptr -20h
.text:0040E7B8 this            = dword ptr  4
.text:0040E7B8 arg_4           = dword ptr  8
.text:0040E7B8 arg_8           = dword ptr  0Ch
.text:0040E7B8
.text:0040E7B8                 push    ebp
.text:0040E7B9                 push    edi
.text:0040E7BA                 push    esi
.text:0040E7BB                 push    ebx
.text:0040E7BC                 sub     esp, 2Ch
.text:0040E7BF                 mov     ebp, [esp+3Ch+this]
.text:0040E7C3                 mov     esi, [esp+3Ch+arg_4]
.text:0040E7C7                 mov     edi, [esp+3Ch+arg_8]
.text:0040E7CB                 mov     ebx, [ecx]
.text:0040E7CD                 mov     eax, [ebx-0Ch]
.text:0040E7D0                 mov     [esp+3Ch+var_20], eax
.text:0040E7D4                 cmp     esi, eax
.text:0040E7D6                 jb      short loc_40E7E3
.text:0040E7D8                 jmp     short loc_40E808
.text:0040E7D8 ; ---------------------------------------------------------------------------
.text:0040E7DA                 align 4
.text:0040E7DC
.text:0040E7DC loc_40E7DC:                             ; CODE XREF: std::string::find_first_not_of(char const*,uint,uint)+41↓j
.text:0040E7DC                 inc     esi
.text:0040E7DD                 cmp     esi, [esp+3Ch+var_20]
.text:0040E7E1                 jnb     short loc_40E808
.text:0040E7E3
.text:0040E7E3 loc_40E7E3:                             ; CODE XREF: std::string::find_first_not_of(char const*,uint,uint)+1E↑j
.text:0040E7E3                 mov     [esp+3Ch+var_34], edi ; size_t
.text:0040E7E7                 movsx   eax, byte ptr [ebx+esi]
.text:0040E7EB                 mov     [esp+3Ch+var_38], eax ; int
.text:0040E7EF                 mov     [esp+3Ch+var_3C], ebp ; void *
.text:0040E7F2                 call    _memchr
.text:0040E7F7                 test    eax, eax
.text:0040E7F9                 jnz     short loc_40E7DC
.text:0040E7FB                 mov     eax, esi
.text:0040E7FD                 add     esp, 2Ch
.text:0040E800                 pop     ebx
.text:0040E801                 pop     esi
.text:0040E802                 pop     edi
.text:0040E803                 pop     ebp
.text:0040E804                 retn    0Ch
.text:0040E804 ; ---------------------------------------------------------------------------
.text:0040E807                 align 4
.text:0040E808
.text:0040E808 loc_40E808:                             ; CODE XREF: std::string::find_first_not_of(char const*,uint,uint)+20↑j
.text:0040E808                                         ; std::string::find_first_not_of(char const*,uint,uint)+29↑j
.text:0040E808                 mov     esi, 0FFFFFFFFh
.text:0040E80D                 mov     eax, esi
.text:0040E80F                 add     esp, 2Ch
.text:0040E812                 pop     ebx
.text:0040E813                 pop     esi
.text:0040E814                 pop     edi
.text:0040E815                 pop     ebp
.text:0040E816                 retn    0Ch
.text:0040E816 __ZNKSs17find_first_not_ofEPKcjj endp
.text:0040E816
.text:0040E816 ; ---------------------------------------------------------------------------
.text:0040E819                 align 4
.text:0040E81C
.text:0040E81C ; =============== S U B R O U T I N E =======================================
.text:0040E81C
.text:0040E81C
.text:0040E81C ; _DWORD __stdcall std::string::find_first_not_of(std::string *__hidden this, const std::string *, unsigned int)
.text:0040E81C                 public __ZNKSs17find_first_not_ofERKSsj
.text:0040E81C __ZNKSs17find_first_not_ofERKSsj proc near
.text:0040E81C
.text:0040E81C var_1C          = dword ptr -1Ch
.text:0040E81C var_18          = dword ptr -18h
.text:0040E81C var_14          = dword ptr -14h
.text:0040E81C this            = dword ptr  4
.text:0040E81C arg_4           = dword ptr  8
.text:0040E81C
.text:0040E81C                 sub     esp, 1Ch
.text:0040E81F                 mov     eax, [esp+1Ch+this]
.text:0040E823                 mov     eax, [eax]
.text:0040E825                 mov     edx, [eax-0Ch]
.text:0040E828                 mov     [esp+1Ch+var_14], edx ; size_t
.text:0040E82C                 mov     edx, [esp+1Ch+arg_4]
.text:0040E830                 mov     [esp+1Ch+var_18], edx ; char *
.text:0040E834                 mov     [esp+1Ch+var_1C], eax ; this
.text:0040E837                 call    __ZNKSs17find_first_not_ofEPKcjj ; std::string::find_first_not_of(char const*,uint,uint)
.text:0040E83C                 sub     esp, 0Ch
.text:0040E83F                 add     esp, 1Ch
.text:0040E842                 retn    8
.text:0040E842 __ZNKSs17find_first_not_ofERKSsj endp
.text:0040E842
.text:0040E842 ; ---------------------------------------------------------------------------
.text:0040E845                 align 4
.text:0040E848
.text:0040E848 ; =============== S U B R O U T I N E =======================================
.text:0040E848
.text:0040E848
.text:0040E848 ; _DWORD __stdcall std::string::find_first_not_of(std::string *__hidden this, char, unsigned int)
.text:0040E848                 public __ZNKSs17find_first_not_ofEcj
.text:0040E848 __ZNKSs17find_first_not_ofEcj proc near
.text:0040E848
.text:0040E848 this            = dword ptr  4
.text:0040E848 arg_4           = byte ptr  8
.text:0040E848
.text:0040E848                 push    esi
.text:0040E849                 push    ebx
.text:0040E84A                 mov     eax, dword ptr [esp+8+arg_4]
.text:0040E84E                 mov     bl, byte ptr [esp+8+this]
.text:0040E852                 mov     edx, [ecx]
.text:0040E854                 mov     esi, [edx-0Ch]
.text:0040E857                 cmp     eax, esi
.text:0040E859                 jnb     short loc_40E86E
.text:0040E85B                 mov     cl, [edx+eax]
.text:0040E85E                 cmp     cl, bl
.text:0040E860                 jz      short loc_40E869
.text:0040E862                 jmp     short loc_40E873
.text:0040E864 ; ---------------------------------------------------------------------------
.text:0040E864
.text:0040E864 loc_40E864:                             ; CODE XREF: std::string::find_first_not_of(char,uint)+24↓j
.text:0040E864                 cmp     [edx+eax], cl
.text:0040E867                 jnz     short loc_40E873
.text:0040E869
.text:0040E869 loc_40E869:                             ; CODE XREF: std::string::find_first_not_of(char,uint)+18↑j
.text:0040E869                 inc     eax
.text:0040E86A                 cmp     eax, esi
.text:0040E86C                 jb      short loc_40E864
.text:0040E86E
.text:0040E86E loc_40E86E:                             ; CODE XREF: std::string::find_first_not_of(char,uint)+11↑j
.text:0040E86E                 mov     eax, 0FFFFFFFFh
.text:0040E873
.text:0040E873 loc_40E873:                             ; CODE XREF: std::string::find_first_not_of(char,uint)+1A↑j
.text:0040E873                                         ; std::string::find_first_not_of(char,uint)+1F↑j
.text:0040E873                 pop     ebx
.text:0040E874                 pop     esi
.text:0040E875                 retn    8
.text:0040E875 __ZNKSs17find_first_not_ofEcj endp
.text:0040E875
.text:0040E878
.text:0040E878 ; =============== S U B R O U T I N E =======================================
.text:0040E878
.text:0040E878
.text:0040E878 ; _DWORD __stdcall std::string::at(std::string *__hidden this, unsigned int)
.text:0040E878                 public __ZNKSs2atEj
.text:0040E878 __ZNKSs2atEj    proc near
.text:0040E878
.text:0040E878 var_1C          = dword ptr -1Ch
.text:0040E878 this            = dword ptr  4
.text:0040E878
.text:0040E878                 sub     esp, 1Ch
.text:0040E87B                 mov     eax, [esp+1Ch+this]
.text:0040E87F                 mov     edx, [ecx]
.text:0040E881                 cmp     eax, [edx-0Ch]
.text:0040E884                 jnb     short loc_40E88E
.text:0040E886                 add     eax, edx
.text:0040E888                 add     esp, 1Ch
.text:0040E88B                 retn    4
.text:0040E88E ; ---------------------------------------------------------------------------
.text:0040E88E
.text:0040E88E loc_40E88E:                             ; CODE XREF: std::string::at(uint)+C↑j
.text:0040E88E                 mov     [esp+1Ch+var_1C], offset aBasicStringAt ; "basic_string::at"
.text:0040E895                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:0040E895 __ZNKSs2atEj    endp
.text:0040E895
.text:0040E895 ; ---------------------------------------------------------------------------
.text:0040E89A                 align 4
.text:0040E89C
.text:0040E89C ; =============== S U B R O U T I N E =======================================
.text:0040E89C
.text:0040E89C
.text:0040E89C ; _DWORD std::string::end(std::string *__hidden this)
.text:0040E89C                 public __ZNKSs3endEv
.text:0040E89C __ZNKSs3endEv   proc near
.text:0040E89C
.text:0040E89C this            = dword ptr  4
.text:0040E89C
.text:0040E89C                 mov     eax, [ecx]
.text:0040E89E                 add     eax, [eax-0Ch]
.text:0040E8A1                 retn
.text:0040E8A1 __ZNKSs3endEv   endp
.text:0040E8A1
.text:0040E8A1 ; ---------------------------------------------------------------------------
.text:0040E8A2                 align 4
.text:0040E8A4
.text:0040E8A4 ; =============== S U B R O U T I N E =======================================
.text:0040E8A4
.text:0040E8A4
.text:0040E8A4 ; _DWORD std::string::_Rep::_M_is_leaked(std::string::_Rep *__hidden this)
.text:0040E8A4                 public __ZNKSs4_Rep12_M_is_leakedEv
.text:0040E8A4 __ZNKSs4_Rep12_M_is_leakedEv proc near
.text:0040E8A4
.text:0040E8A4 this            = dword ptr  4
.text:0040E8A4
.text:0040E8A4                 mov     eax, [ecx+8]
.text:0040E8A7                 shr     eax, 1Fh
.text:0040E8AA                 retn
.text:0040E8AA __ZNKSs4_Rep12_M_is_leakedEv endp
.text:0040E8AA
.text:0040E8AA ; ---------------------------------------------------------------------------
.text:0040E8AB                 align 4
.text:0040E8AC
.text:0040E8AC ; =============== S U B R O U T I N E =======================================
.text:0040E8AC
.text:0040E8AC
.text:0040E8AC ; _DWORD std::string::_Rep::_M_is_shared(std::string::_Rep *__hidden this)
.text:0040E8AC                 public __ZNKSs4_Rep12_M_is_sharedEv
.text:0040E8AC __ZNKSs4_Rep12_M_is_sharedEv proc near
.text:0040E8AC
.text:0040E8AC this            = dword ptr  4
.text:0040E8AC
.text:0040E8AC                 mov     ecx, [ecx+8]
.text:0040E8AF                 test    ecx, ecx
.text:0040E8B1                 setnle  al
.text:0040E8B4                 retn
.text:0040E8B4 __ZNKSs4_Rep12_M_is_sharedEv endp
.text:0040E8B4
.text:0040E8B4 ; ---------------------------------------------------------------------------
.text:0040E8B5                 align 4
.text:0040E8B8
.text:0040E8B8 ; =============== S U B R O U T I N E =======================================
.text:0040E8B8
.text:0040E8B8
.text:0040E8B8 ; _DWORD std::string::back(std::string *__hidden this)
.text:0040E8B8                 public __ZNKSs4backEv
.text:0040E8B8 __ZNKSs4backEv  proc near
.text:0040E8B8
.text:0040E8B8 this            = dword ptr  4
.text:0040E8B8
.text:0040E8B8                 mov     eax, [ecx]
.text:0040E8BA                 mov     edx, [eax-0Ch]
.text:0040E8BD                 lea     eax, [eax+edx-1]
.text:0040E8C1                 retn
.text:0040E8C1 __ZNKSs4backEv  endp
.text:0040E8C1
.text:0040E8C1 ; ---------------------------------------------------------------------------
.text:0040E8C2                 align 4
.text:0040E8C4
.text:0040E8C4 ; =============== S U B R O U T I N E =======================================
.text:0040E8C4
.text:0040E8C4
.text:0040E8C4 ; _DWORD std::string::cend(std::string *__hidden this)
.text:0040E8C4                 public __ZNKSs4cendEv
.text:0040E8C4 __ZNKSs4cendEv  proc near
.text:0040E8C4
.text:0040E8C4 this            = dword ptr  4
.text:0040E8C4
.text:0040E8C4                 mov     eax, [ecx]
.text:0040E8C6                 add     eax, [eax-0Ch]
.text:0040E8C9                 retn
.text:0040E8C9 __ZNKSs4cendEv  endp
.text:0040E8C9
.text:0040E8C9 ; ---------------------------------------------------------------------------
.text:0040E8CA                 align 4
.text:0040E8CC
.text:0040E8CC ; =============== S U B R O U T I N E =======================================
.text:0040E8CC
.text:0040E8CC
.text:0040E8CC ; _DWORD __stdcall std::string::copy(std::string *__hidden this, char *, unsigned int, unsigned int)
.text:0040E8CC                 public __ZNKSs4copyEPcjj
.text:0040E8CC __ZNKSs4copyEPcjj proc near
.text:0040E8CC
.text:0040E8CC var_2C          = dword ptr -2Ch
.text:0040E8CC this            = dword ptr  4
.text:0040E8CC arg_4           = dword ptr  8
.text:0040E8CC arg_8           = dword ptr  0Ch
.text:0040E8CC
.text:0040E8CC                 push    edi
.text:0040E8CD                 push    esi
.text:0040E8CE                 sub     esp, 24h
.text:0040E8D1                 mov     edx, [esp+2Ch+arg_8]
.text:0040E8D5                 mov     esi, [ecx]
.text:0040E8D7                 mov     eax, [esi-0Ch]
.text:0040E8DA                 cmp     edx, eax
.text:0040E8DC                 ja      short loc_40E924
.text:0040E8DE                 sub     eax, edx
.text:0040E8E0                 cmp     eax, [esp+2Ch+arg_4]
.text:0040E8E4                 ja      short loc_40E8F4
.text:0040E8E6                 test    eax, eax
.text:0040E8E8                 jnz     short loc_40E8FC
.text:0040E8EA
.text:0040E8EA loc_40E8EA:                             ; CODE XREF: std::string::copy(char *,uint,uint)+2E↓j
.text:0040E8EA                 add     esp, 24h
.text:0040E8ED                 pop     esi
.text:0040E8EE                 pop     edi
.text:0040E8EF                 retn    0Ch
.text:0040E8EF ; ---------------------------------------------------------------------------
.text:0040E8F2                 align 4
.text:0040E8F4
.text:0040E8F4 loc_40E8F4:                             ; CODE XREF: std::string::copy(char *,uint,uint)+18↑j
.text:0040E8F4                 mov     eax, [esp+2Ch+arg_4]
.text:0040E8F8                 test    eax, eax
.text:0040E8FA                 jz      short loc_40E8EA
.text:0040E8FC
.text:0040E8FC loc_40E8FC:                             ; CODE XREF: std::string::copy(char *,uint,uint)+1C↑j
.text:0040E8FC                 add     esi, edx
.text:0040E8FE                 cmp     eax, 1
.text:0040E901                 jz      short loc_40E914
.text:0040E903                 mov     edi, [esp+2Ch+this]
.text:0040E907                 mov     ecx, eax
.text:0040E909                 rep movsb
.text:0040E90B                 add     esp, 24h
.text:0040E90E                 pop     esi
.text:0040E90F                 pop     edi
.text:0040E910                 retn    0Ch
.text:0040E910 ; ---------------------------------------------------------------------------
.text:0040E913                 align 4
.text:0040E914
.text:0040E914 loc_40E914:                             ; CODE XREF: std::string::copy(char *,uint,uint)+35↑j
.text:0040E914                 mov     dl, [esi]
.text:0040E916                 mov     ecx, [esp+2Ch+this]
.text:0040E91A                 mov     [ecx], dl
.text:0040E91C                 add     esp, 24h
.text:0040E91F                 pop     esi
.text:0040E920                 pop     edi
.text:0040E921                 retn    0Ch
.text:0040E924 ; ---------------------------------------------------------------------------
.text:0040E924
.text:0040E924 loc_40E924:                             ; CODE XREF: std::string::copy(char *,uint,uint)+10↑j
.text:0040E924                 mov     [esp+2Ch+var_2C], offset aBasicStringCop ; "basic_string::copy"
.text:0040E92B                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:0040E92B __ZNKSs4copyEPcjj endp
.text:0040E92B
.text:0040E930
.text:0040E930 ; =============== S U B R O U T I N E =======================================
.text:0040E930
.text:0040E930
.text:0040E930 ; _DWORD std::string::data(std::string *__hidden this)
.text:0040E930                 public __ZNKSs4dataEv
.text:0040E930 __ZNKSs4dataEv  proc near
.text:0040E930
.text:0040E930 this            = dword ptr  4
.text:0040E930
.text:0040E930                 mov     eax, [ecx]
.text:0040E932                 retn
.text:0040E932 __ZNKSs4dataEv  endp
.text:0040E932
.text:0040E932 ; ---------------------------------------------------------------------------
.text:0040E933                 align 4
.text:0040E934
.text:0040E934 ; =============== S U B R O U T I N E =======================================
.text:0040E934
.text:0040E934
.text:0040E934 ; _DWORD __stdcall std::string::find(std::string *__hidden this, const char *, unsigned int)
.text:0040E934                 public __ZNKSs4findEPKcj
.text:0040E934 __ZNKSs4findEPKcj proc near
.text:0040E934
.text:0040E934 var_1C          = dword ptr -1Ch
.text:0040E934 var_18          = dword ptr -18h
.text:0040E934 var_14          = dword ptr -14h
.text:0040E934 this            = dword ptr  4
.text:0040E934 arg_4           = dword ptr  8
.text:0040E934
.text:0040E934                 push    edi
.text:0040E935                 push    ebx
.text:0040E936                 sub     esp, 14h
.text:0040E939                 mov     ebx, ecx
.text:0040E93B                 mov     edx, [esp+1Ch+this]
.text:0040E93F                 mov     edi, edx
.text:0040E941                 xor     eax, eax
.text:0040E943                 mov     ecx, 0FFFFFFFFh
.text:0040E948                 repne scasb
.text:0040E94A                 not     ecx
.text:0040E94C                 lea     eax, [ecx-1]
.text:0040E94F                 mov     [esp+1Ch+var_14], eax ; unsigned int
.text:0040E953                 mov     eax, [esp+1Ch+arg_4]
.text:0040E957                 mov     [esp+1Ch+var_18], eax ; char *
.text:0040E95B                 mov     [esp+1Ch+var_1C], edx ; this
.text:0040E95E                 mov     ecx, ebx
.text:0040E960                 call    __ZNKSs4findEPKcjj ; std::string::find(char const*,uint,uint)
.text:0040E965                 sub     esp, 0Ch
.text:0040E968                 add     esp, 14h
.text:0040E96B                 pop     ebx
.text:0040E96C                 pop     edi
.text:0040E96D                 retn    8
.text:0040E96D __ZNKSs4findEPKcj endp
.text:0040E96D
.text:0040E970
.text:0040E970 ; =============== S U B R O U T I N E =======================================
.text:0040E970
.text:0040E970
.text:0040E970 ; _DWORD __stdcall std::string::find(std::string *__hidden this, const char *, unsigned int, unsigned int)
.text:0040E970                 public __ZNKSs4findEPKcjj
.text:0040E970 __ZNKSs4findEPKcjj proc near            ; CODE XREF: std::string::find(char const*,uint)+2C↑p
.text:0040E970                                         ; std::string::find(std::string const&,uint)+1B↓p
.text:0040E970
.text:0040E970 var_3C          = dword ptr -3Ch
.text:0040E970 var_38          = dword ptr -38h
.text:0040E970 var_34          = dword ptr -34h
.text:0040E970 var_28          = byte ptr -28h
.text:0040E970 var_24          = dword ptr -24h
.text:0040E970 var_20          = dword ptr -20h
.text:0040E970 this            = dword ptr  4
.text:0040E970 arg_4           = dword ptr  8
.text:0040E970 arg_8           = dword ptr  0Ch
.text:0040E970
.text:0040E970                 push    ebp
.text:0040E971                 push    edi
.text:0040E972                 push    esi
.text:0040E973                 push    ebx
.text:0040E974                 sub     esp, 2Ch
.text:0040E977                 mov     esi, [esp+3Ch+arg_4]
.text:0040E97B                 mov     ebp, [esp+3Ch+arg_8]
.text:0040E97F                 mov     edi, [ecx]
.text:0040E981                 mov     edx, [edi-0Ch]
.text:0040E984                 test    ebp, ebp
.text:0040E986                 jnz     short loc_40E998
.text:0040E988                 cmp     esi, edx
.text:0040E98A                 ja      short loc_40E99C
.text:0040E98C                 mov     eax, esi
.text:0040E98E                 add     esp, 2Ch
.text:0040E991                 pop     ebx
.text:0040E992                 pop     esi
.text:0040E993                 pop     edi
.text:0040E994                 pop     ebp
.text:0040E995                 retn    0Ch
.text:0040E998 ; ---------------------------------------------------------------------------
.text:0040E998
.text:0040E998 loc_40E998:                             ; CODE XREF: std::string::find(char const*,uint,uint)+16↑j
.text:0040E998                 cmp     ebp, edx
.text:0040E99A                 jbe     short loc_40E9B0
.text:0040E99C
.text:0040E99C loc_40E99C:                             ; CODE XREF: std::string::find(char const*,uint,uint)+1A↑j
.text:0040E99C                                         ; std::string::find(char const*,uint,uint)+44↓j ...
.text:0040E99C                 mov     esi, 0FFFFFFFFh
.text:0040E9A1                 mov     eax, esi
.text:0040E9A3                 add     esp, 2Ch
.text:0040E9A6                 pop     ebx
.text:0040E9A7                 pop     esi
.text:0040E9A8                 pop     edi
.text:0040E9A9                 pop     ebp
.text:0040E9AA                 retn    0Ch
.text:0040E9AA ; ---------------------------------------------------------------------------
.text:0040E9AD                 align 10h
.text:0040E9B0
.text:0040E9B0 loc_40E9B0:                             ; CODE XREF: std::string::find(char const*,uint,uint)+2A↑j
.text:0040E9B0                 sub     edx, ebp
.text:0040E9B2                 cmp     esi, edx
.text:0040E9B4                 ja      short loc_40E99C
.text:0040E9B6                 mov     eax, [esp+3Ch+this]
.text:0040E9BA                 mov     cl, [eax]
.text:0040E9BC                 lea     ebx, [esi+1]
.text:0040E9BF                 add     edi, ebx
.text:0040E9C1                 dec     ebp
.text:0040E9C2                 inc     eax
.text:0040E9C3                 mov     [esp+3Ch+var_24], eax
.text:0040E9C7                 mov     [esp+3Ch+var_20], ebp
.text:0040E9CB                 mov     ebp, edx
.text:0040E9CD                 jmp     short loc_40E9D8
.text:0040E9CD ; ---------------------------------------------------------------------------
.text:0040E9CF                 align 10h
.text:0040E9D0
.text:0040E9D0 loc_40E9D0:                             ; CODE XREF: std::string::find(char const*,uint,uint)+6E↓j
.text:0040E9D0                                         ; std::string::find(char const*,uint,uint)+92↓j
.text:0040E9D0                 mov     eax, ebx
.text:0040E9D2                 inc     ebx
.text:0040E9D3                 inc     edi
.text:0040E9D4                 cmp     ebp, eax
.text:0040E9D6                 jb      short loc_40E99C
.text:0040E9D8
.text:0040E9D8 loc_40E9D8:                             ; CODE XREF: std::string::find(char const*,uint,uint)+5D↑j
.text:0040E9D8                 lea     esi, [ebx-1]
.text:0040E9DB                 cmp     [edi-1], cl
.text:0040E9DE                 jnz     short loc_40E9D0
.text:0040E9E0                 mov     eax, [esp+3Ch+var_20]
.text:0040E9E4                 mov     [esp+3Ch+var_34], eax ; size_t
.text:0040E9E8                 mov     eax, [esp+3Ch+var_24]
.text:0040E9EC                 mov     [esp+3Ch+var_38], eax ; void *
.text:0040E9F0                 mov     [esp+3Ch+var_3C], edi ; void *
.text:0040E9F3                 mov     [esp+3Ch+var_28], cl
.text:0040E9F7                 call    _memcmp
.text:0040E9FC                 test    eax, eax
.text:0040E9FE                 mov     cl, [esp+3Ch+var_28]
.text:0040EA02                 jnz     short loc_40E9D0
.text:0040EA04                 mov     eax, esi
.text:0040EA06                 add     esp, 2Ch
.text:0040EA09                 pop     ebx
.text:0040EA0A                 pop     esi
.text:0040EA0B                 pop     edi
.text:0040EA0C                 pop     ebp
.text:0040EA0D                 retn    0Ch
.text:0040EA0D __ZNKSs4findEPKcjj endp
.text:0040EA0D
.text:0040EA10
.text:0040EA10 ; =============== S U B R O U T I N E =======================================
.text:0040EA10
.text:0040EA10
.text:0040EA10 ; _DWORD __stdcall std::string::find(std::string *__hidden this, const std::string *, unsigned int)
.text:0040EA10                 public __ZNKSs4findERKSsj
.text:0040EA10 __ZNKSs4findERKSsj proc near
.text:0040EA10
.text:0040EA10 var_1C          = dword ptr -1Ch
.text:0040EA10 var_18          = dword ptr -18h
.text:0040EA10 var_14          = dword ptr -14h
.text:0040EA10 this            = dword ptr  4
.text:0040EA10 arg_4           = dword ptr  8
.text:0040EA10
.text:0040EA10                 sub     esp, 1Ch
.text:0040EA13                 mov     eax, [esp+1Ch+this]
.text:0040EA17                 mov     eax, [eax]
.text:0040EA19                 mov     edx, [eax-0Ch]
.text:0040EA1C                 mov     [esp+1Ch+var_14], edx ; unsigned int
.text:0040EA20                 mov     edx, [esp+1Ch+arg_4]
.text:0040EA24                 mov     [esp+1Ch+var_18], edx ; char *
.text:0040EA28                 mov     [esp+1Ch+var_1C], eax ; this
.text:0040EA2B                 call    __ZNKSs4findEPKcjj ; std::string::find(char const*,uint,uint)
.text:0040EA30                 sub     esp, 0Ch
.text:0040EA33                 add     esp, 1Ch
.text:0040EA36                 retn    8
.text:0040EA36 __ZNKSs4findERKSsj endp
.text:0040EA36
.text:0040EA36 ; ---------------------------------------------------------------------------
.text:0040EA39                 align 4
.text:0040EA3C
.text:0040EA3C ; =============== S U B R O U T I N E =======================================
.text:0040EA3C
.text:0040EA3C
.text:0040EA3C ; _DWORD __stdcall std::string::find(std::string *__hidden this, char, unsigned int)
.text:0040EA3C                 public __ZNKSs4findEcj
.text:0040EA3C __ZNKSs4findEcj proc near               ; CODE XREF: std::string::find_first_of(char,uint)+9↑j
.text:0040EA3C
.text:0040EA3C var_1C          = dword ptr -1Ch
.text:0040EA3C var_18          = dword ptr -18h
.text:0040EA3C var_14          = dword ptr -14h
.text:0040EA3C this            = dword ptr  4
.text:0040EA3C arg_4           = byte ptr  8
.text:0040EA3C
.text:0040EA3C                 push    ebx
.text:0040EA3D                 sub     esp, 18h
.text:0040EA40                 movsx   edx, byte ptr [esp+1Ch+this]
.text:0040EA45                 mov     ebx, [ecx]
.text:0040EA47                 mov     eax, [ebx-0Ch]
.text:0040EA4A                 cmp     dword ptr [esp+1Ch+arg_4], eax
.text:0040EA4E                 jb      short loc_40EA5C
.text:0040EA50
.text:0040EA50 loc_40EA50:                             ; CODE XREF: std::string::find(char,uint)+3C↓j
.text:0040EA50                 mov     eax, 0FFFFFFFFh
.text:0040EA55                 add     esp, 18h
.text:0040EA58                 pop     ebx
.text:0040EA59                 retn    8
.text:0040EA5C ; ---------------------------------------------------------------------------
.text:0040EA5C
.text:0040EA5C loc_40EA5C:                             ; CODE XREF: std::string::find(char,uint)+12↑j
.text:0040EA5C                 sub     eax, dword ptr [esp+1Ch+arg_4]
.text:0040EA60                 mov     [esp+1Ch+var_14], eax ; size_t
.text:0040EA64                 mov     [esp+1Ch+var_18], edx ; int
.text:0040EA68                 mov     eax, dword ptr [esp+1Ch+arg_4]
.text:0040EA6C                 add     eax, ebx
.text:0040EA6E                 mov     [esp+1Ch+var_1C], eax ; void *
.text:0040EA71                 call    _memchr
.text:0040EA76                 test    eax, eax
.text:0040EA78                 jz      short loc_40EA50
.text:0040EA7A                 sub     eax, ebx
.text:0040EA7C                 add     esp, 18h
.text:0040EA7F                 pop     ebx
.text:0040EA80                 retn    8
.text:0040EA80 __ZNKSs4findEcj endp
.text:0040EA80
.text:0040EA80 ; ---------------------------------------------------------------------------
.text:0040EA83                 align 4
.text:0040EA84
.text:0040EA84 ; =============== S U B R O U T I N E =======================================
.text:0040EA84
.text:0040EA84
.text:0040EA84 ; _DWORD __stdcall std::string::rend(std::string *__hidden this)
.text:0040EA84                 public __ZNKSs4rendEv
.text:0040EA84 __ZNKSs4rendEv  proc near
.text:0040EA84
.text:0040EA84 this            = dword ptr  4
.text:0040EA84
.text:0040EA84                 mov     eax, ecx
.text:0040EA86                 mov     edx, [esp+this]
.text:0040EA8A                 mov     edx, [edx]
.text:0040EA8C                 mov     [ecx], edx
.text:0040EA8E                 retn    4
.text:0040EA8E __ZNKSs4rendEv  endp
.text:0040EA8E
.text:0040EA8E ; ---------------------------------------------------------------------------
.text:0040EA91                 align 4
.text:0040EA94
.text:0040EA94 ; =============== S U B R O U T I N E =======================================
.text:0040EA94
.text:0040EA94
.text:0040EA94 ; _DWORD std::string::size(std::string *__hidden this)
.text:0040EA94                 public __ZNKSs4sizeEv
.text:0040EA94 __ZNKSs4sizeEv  proc near
.text:0040EA94
.text:0040EA94 this            = dword ptr  4
.text:0040EA94
.text:0040EA94                 mov     eax, [ecx]
.text:0040EA96                 mov     eax, [eax-0Ch]
.text:0040EA99                 retn
.text:0040EA99 __ZNKSs4sizeEv  endp
.text:0040EA99
.text:0040EA99 ; ---------------------------------------------------------------------------
.text:0040EA9A                 align 4
.text:0040EA9C
.text:0040EA9C ; =============== S U B R O U T I N E =======================================
.text:0040EA9C
.text:0040EA9C
.text:0040EA9C ; _DWORD std::string::begin(std::string *__hidden this)
.text:0040EA9C                 public __ZNKSs5beginEv
.text:0040EA9C __ZNKSs5beginEv proc near
.text:0040EA9C
.text:0040EA9C this            = dword ptr  4
.text:0040EA9C
.text:0040EA9C                 mov     eax, [ecx]
.text:0040EA9E                 retn
.text:0040EA9E __ZNKSs5beginEv endp
.text:0040EA9E
.text:0040EA9E ; ---------------------------------------------------------------------------
.text:0040EA9F                 align 10h
.text:0040EAA0
.text:0040EAA0 ; =============== S U B R O U T I N E =======================================
.text:0040EAA0
.text:0040EAA0
.text:0040EAA0 ; _DWORD std::string::c_str(std::string *__hidden this)
.text:0040EAA0                 public __ZNKSs5c_strEv
.text:0040EAA0 __ZNKSs5c_strEv proc near
.text:0040EAA0
.text:0040EAA0 this            = dword ptr  4
.text:0040EAA0
.text:0040EAA0                 mov     eax, [ecx]
.text:0040EAA2                 retn
.text:0040EAA2 __ZNKSs5c_strEv endp
.text:0040EAA2
.text:0040EAA2 ; ---------------------------------------------------------------------------
.text:0040EAA3                 align 4
.text:0040EAA4
.text:0040EAA4 ; =============== S U B R O U T I N E =======================================
.text:0040EAA4
.text:0040EAA4
.text:0040EAA4 ; _DWORD __stdcall std::string::crend(std::string *__hidden this)
.text:0040EAA4                 public __ZNKSs5crendEv
.text:0040EAA4 __ZNKSs5crendEv proc near
.text:0040EAA4
.text:0040EAA4 this            = dword ptr  4
.text:0040EAA4
.text:0040EAA4                 mov     eax, ecx
.text:0040EAA6                 mov     edx, [esp+this]
.text:0040EAAA                 mov     edx, [edx]
.text:0040EAAC                 mov     [ecx], edx
.text:0040EAAE                 retn    4
.text:0040EAAE __ZNKSs5crendEv endp
.text:0040EAAE
.text:0040EAAE ; ---------------------------------------------------------------------------
.text:0040EAB1                 align 4
.text:0040EAB4
.text:0040EAB4 ; =============== S U B R O U T I N E =======================================
.text:0040EAB4
.text:0040EAB4
.text:0040EAB4 ; _DWORD std::string::empty(std::string *__hidden this)
.text:0040EAB4                 public __ZNKSs5emptyEv
.text:0040EAB4 __ZNKSs5emptyEv proc near
.text:0040EAB4
.text:0040EAB4 this            = dword ptr  4
.text:0040EAB4
.text:0040EAB4                 mov     eax, [ecx]
.text:0040EAB6                 mov     ecx, [eax-0Ch]
.text:0040EAB9                 test    ecx, ecx
.text:0040EABB                 setz    al
.text:0040EABE                 retn
.text:0040EABE __ZNKSs5emptyEv endp
.text:0040EABE
.text:0040EABE ; ---------------------------------------------------------------------------
.text:0040EABF                 align 10h
.text:0040EAC0
.text:0040EAC0 ; =============== S U B R O U T I N E =======================================
.text:0040EAC0
.text:0040EAC0
.text:0040EAC0 ; _DWORD std::string::front(std::string *__hidden this)
.text:0040EAC0                 public __ZNKSs5frontEv
.text:0040EAC0 __ZNKSs5frontEv proc near
.text:0040EAC0
.text:0040EAC0 this            = dword ptr  4
.text:0040EAC0
.text:0040EAC0                 mov     eax, [ecx]
.text:0040EAC2                 retn
.text:0040EAC2 __ZNKSs5frontEv endp
.text:0040EAC2
.text:0040EAC2 ; ---------------------------------------------------------------------------
.text:0040EAC3                 align 4
.text:0040EAC4
.text:0040EAC4 ; =============== S U B R O U T I N E =======================================
.text:0040EAC4
.text:0040EAC4
.text:0040EAC4 ; _DWORD __stdcall std::string::rfind(std::string *__hidden this, const char *, unsigned int)
.text:0040EAC4                 public __ZNKSs5rfindEPKcj
.text:0040EAC4 __ZNKSs5rfindEPKcj proc near
.text:0040EAC4
.text:0040EAC4 var_1C          = dword ptr -1Ch
.text:0040EAC4 var_18          = dword ptr -18h
.text:0040EAC4 var_14          = dword ptr -14h
.text:0040EAC4 this            = dword ptr  4
.text:0040EAC4 arg_4           = dword ptr  8
.text:0040EAC4
.text:0040EAC4                 push    edi
.text:0040EAC5                 push    ebx
.text:0040EAC6                 sub     esp, 14h
.text:0040EAC9                 mov     ebx, ecx
.text:0040EACB                 mov     edx, [esp+1Ch+this]
.text:0040EACF                 mov     edi, edx
.text:0040EAD1                 xor     eax, eax
.text:0040EAD3                 mov     ecx, 0FFFFFFFFh
.text:0040EAD8                 repne scasb
.text:0040EADA                 not     ecx
.text:0040EADC                 lea     eax, [ecx-1]
.text:0040EADF                 mov     [esp+1Ch+var_14], eax ; size_t
.text:0040EAE3                 mov     eax, [esp+1Ch+arg_4]
.text:0040EAE7                 mov     [esp+1Ch+var_18], eax ; char *
.text:0040EAEB                 mov     [esp+1Ch+var_1C], edx ; this
.text:0040EAEE                 mov     ecx, ebx
.text:0040EAF0                 call    __ZNKSs5rfindEPKcjj ; std::string::rfind(char const*,uint,uint)
.text:0040EAF5                 sub     esp, 0Ch
.text:0040EAF8                 add     esp, 14h
.text:0040EAFB                 pop     ebx
.text:0040EAFC                 pop     edi
.text:0040EAFD                 retn    8
.text:0040EAFD __ZNKSs5rfindEPKcj endp
.text:0040EAFD
.text:0040EB00
.text:0040EB00 ; =============== S U B R O U T I N E =======================================
.text:0040EB00
.text:0040EB00
.text:0040EB00 ; _DWORD __stdcall std::string::rfind(std::string *__hidden this, const char *, size_t, unsigned int)
.text:0040EB00                 public __ZNKSs5rfindEPKcjj
.text:0040EB00 __ZNKSs5rfindEPKcjj proc near           ; CODE XREF: std::string::rfind(char const*,uint)+2C↑p
.text:0040EB00                                         ; std::string::rfind(std::string const&,uint)+1B↓p
.text:0040EB00
.text:0040EB00 var_2C          = dword ptr -2Ch
.text:0040EB00 var_28          = dword ptr -28h
.text:0040EB00 var_24          = dword ptr -24h
.text:0040EB00 this            = dword ptr  4
.text:0040EB00 arg_4           = dword ptr  8
.text:0040EB00 arg_8           = dword ptr  0Ch
.text:0040EB00
.text:0040EB00                 push    ebp
.text:0040EB01                 push    edi
.text:0040EB02                 push    esi
.text:0040EB03                 push    ebx
.text:0040EB04                 sub     esp, 1Ch
.text:0040EB07                 mov     ebp, [esp+2Ch+this]
.text:0040EB0B                 mov     esi, [esp+2Ch+arg_8]
.text:0040EB0F                 mov     edi, [ecx]
.text:0040EB11                 mov     ebx, [edi-0Ch]
.text:0040EB14                 cmp     esi, ebx
.text:0040EB16                 jbe     short loc_40EB2C
.text:0040EB18
.text:0040EB18 loc_40EB18:                             ; CODE XREF: std::string::rfind(char const*,uint,uint)+5C↓j
.text:0040EB18                 mov     ebx, 0FFFFFFFFh
.text:0040EB1D
.text:0040EB1D loc_40EB1D:                             ; CODE XREF: std::string::rfind(char const*,uint,uint)+53↓j
.text:0040EB1D                 mov     eax, ebx
.text:0040EB1F                 add     esp, 1Ch
.text:0040EB22                 pop     ebx
.text:0040EB23                 pop     esi
.text:0040EB24                 pop     edi
.text:0040EB25                 pop     ebp
.text:0040EB26                 retn    0Ch
.text:0040EB26 ; ---------------------------------------------------------------------------
.text:0040EB29                 align 4
.text:0040EB2C
.text:0040EB2C loc_40EB2C:                             ; CODE XREF: std::string::rfind(char const*,uint,uint)+16↑j
.text:0040EB2C                 sub     ebx, esi
.text:0040EB2E                 cmp     ebx, [esp+2Ch+arg_4]
.text:0040EB32                 jbe     short loc_40EB3E
.text:0040EB34                 mov     ebx, [esp+2Ch+arg_4]
.text:0040EB38                 jmp     short loc_40EB3E
.text:0040EB38 ; ---------------------------------------------------------------------------
.text:0040EB3A                 align 4
.text:0040EB3C
.text:0040EB3C loc_40EB3C:                             ; CODE XREF: std::string::rfind(char const*,uint,uint)+5A↓j
.text:0040EB3C                 mov     ebx, eax
.text:0040EB3E
.text:0040EB3E loc_40EB3E:                             ; CODE XREF: std::string::rfind(char const*,uint,uint)+32↑j
.text:0040EB3E                                         ; std::string::rfind(char const*,uint,uint)+38↑j
.text:0040EB3E                 mov     [esp+2Ch+var_24], esi ; size_t
.text:0040EB42                 mov     [esp+2Ch+var_28], ebp ; void *
.text:0040EB46                 lea     eax, [edi+ebx]
.text:0040EB49                 mov     [esp+2Ch+var_2C], eax ; void *
.text:0040EB4C                 call    _memcmp
.text:0040EB51                 test    eax, eax
.text:0040EB53                 jz      short loc_40EB1D
.text:0040EB55                 lea     eax, [ebx-1]
.text:0040EB58                 test    ebx, ebx
.text:0040EB5A                 jnz     short loc_40EB3C
.text:0040EB5C                 jmp     short loc_40EB18
.text:0040EB5C __ZNKSs5rfindEPKcjj endp
.text:0040EB5C
.text:0040EB5C ; ---------------------------------------------------------------------------
.text:0040EB5E                 align 10h
.text:0040EB60
.text:0040EB60 ; =============== S U B R O U T I N E =======================================
.text:0040EB60
.text:0040EB60
.text:0040EB60 ; _DWORD __stdcall std::string::rfind(std::string *__hidden this, const std::string *, unsigned int)
.text:0040EB60                 public __ZNKSs5rfindERKSsj
.text:0040EB60 __ZNKSs5rfindERKSsj proc near
.text:0040EB60
.text:0040EB60 var_1C          = dword ptr -1Ch
.text:0040EB60 var_18          = dword ptr -18h
.text:0040EB60 var_14          = dword ptr -14h
.text:0040EB60 this            = dword ptr  4
.text:0040EB60 arg_4           = dword ptr  8
.text:0040EB60
.text:0040EB60                 sub     esp, 1Ch
.text:0040EB63                 mov     eax, [esp+1Ch+this]
.text:0040EB67                 mov     eax, [eax]
.text:0040EB69                 mov     edx, [eax-0Ch]
.text:0040EB6C                 mov     [esp+1Ch+var_14], edx ; size_t
.text:0040EB70                 mov     edx, [esp+1Ch+arg_4]
.text:0040EB74                 mov     [esp+1Ch+var_18], edx ; char *
.text:0040EB78                 mov     [esp+1Ch+var_1C], eax ; this
.text:0040EB7B                 call    __ZNKSs5rfindEPKcjj ; std::string::rfind(char const*,uint,uint)
.text:0040EB80                 sub     esp, 0Ch
.text:0040EB83                 add     esp, 1Ch
.text:0040EB86                 retn    8
.text:0040EB86 __ZNKSs5rfindERKSsj endp
.text:0040EB86
.text:0040EB86 ; ---------------------------------------------------------------------------
.text:0040EB89                 align 4
.text:0040EB8C
.text:0040EB8C ; =============== S U B R O U T I N E =======================================
.text:0040EB8C
.text:0040EB8C
.text:0040EB8C ; _DWORD __stdcall std::string::rfind(std::string *__hidden this, char, unsigned int)
.text:0040EB8C                 public __ZNKSs5rfindEcj
.text:0040EB8C __ZNKSs5rfindEcj proc near
.text:0040EB8C
.text:0040EB8C this            = dword ptr  4
.text:0040EB8C arg_4           = byte ptr  8
.text:0040EB8C
.text:0040EB8C                 push    ebx
.text:0040EB8D                 mov     bl, byte ptr [esp+4+this]
.text:0040EB91                 mov     ecx, [ecx]
.text:0040EB93                 mov     eax, [ecx-0Ch]
.text:0040EB96                 test    eax, eax
.text:0040EB98                 jnz     short loc_40EBA4
.text:0040EB9A                 mov     eax, 0FFFFFFFFh
.text:0040EB9F
.text:0040EB9F loc_40EB9F:                             ; CODE XREF: std::string::rfind(char,uint)+27↓j
.text:0040EB9F                                         ; std::string::rfind(char,uint)+2F↓j
.text:0040EB9F                 pop     ebx
.text:0040EBA0                 retn    8
.text:0040EBA0 ; ---------------------------------------------------------------------------
.text:0040EBA3                 align 4
.text:0040EBA4
.text:0040EBA4 loc_40EBA4:                             ; CODE XREF: std::string::rfind(char,uint)+C↑j
.text:0040EBA4                 lea     edx, [eax-1]
.text:0040EBA7                 mov     eax, dword ptr [esp+4+arg_4]
.text:0040EBAB                 cmp     eax, edx
.text:0040EBAD                 ja      short loc_40EBBD
.text:0040EBAF                 nop
.text:0040EBB0
.text:0040EBB0 loc_40EBB0:                             ; CODE XREF: std::string::rfind(char,uint)+33↓j
.text:0040EBB0                 cmp     eax, 0FFFFFFFFh
.text:0040EBB3                 jz      short loc_40EB9F
.text:0040EBB5                 lea     edx, [eax-1]
.text:0040EBB8                 cmp     [ecx+eax], bl
.text:0040EBBB                 jz      short loc_40EB9F
.text:0040EBBD
.text:0040EBBD loc_40EBBD:                             ; CODE XREF: std::string::rfind(char,uint)+21↑j
.text:0040EBBD                 mov     eax, edx
.text:0040EBBF                 jmp     short loc_40EBB0
.text:0040EBBF __ZNKSs5rfindEcj endp
.text:0040EBBF
.text:0040EBBF ; ---------------------------------------------------------------------------
.text:0040EBC1                 align 4
.text:0040EBC4
.text:0040EBC4 ; =============== S U B R O U T I N E =======================================
.text:0040EBC4
.text:0040EBC4
.text:0040EBC4 ; _DWORD std::string::_M_rep(std::string *__hidden this)
.text:0040EBC4                 public __ZNKSs6_M_repEv
.text:0040EBC4 __ZNKSs6_M_repEv proc near
.text:0040EBC4
.text:0040EBC4 this            = dword ptr  4
.text:0040EBC4
.text:0040EBC4                 mov     eax, [ecx]
.text:0040EBC6                 sub     eax, 0Ch
.text:0040EBC9                 retn
.text:0040EBC9 __ZNKSs6_M_repEv endp
.text:0040EBC9
.text:0040EBC9 ; ---------------------------------------------------------------------------
.text:0040EBCA                 align 4
.text:0040EBCC
.text:0040EBCC ; =============== S U B R O U T I N E =======================================
.text:0040EBCC
.text:0040EBCC
.text:0040EBCC ; _DWORD std::string::cbegin(std::string *__hidden this)
.text:0040EBCC                 public __ZNKSs6cbeginEv
.text:0040EBCC __ZNKSs6cbeginEv proc near
.text:0040EBCC
.text:0040EBCC this            = dword ptr  4
.text:0040EBCC
.text:0040EBCC                 mov     eax, [ecx]
.text:0040EBCE                 retn
.text:0040EBCE __ZNKSs6cbeginEv endp
.text:0040EBCE
.text:0040EBCE ; ---------------------------------------------------------------------------
.text:0040EBCF                 align 10h
.text:0040EBD0
.text:0040EBD0 ; =============== S U B R O U T I N E =======================================
.text:0040EBD0
.text:0040EBD0
.text:0040EBD0 ; _DWORD std::string::length(std::string *__hidden this)
.text:0040EBD0                 public __ZNKSs6lengthEv
.text:0040EBD0 __ZNKSs6lengthEv proc near
.text:0040EBD0
.text:0040EBD0 this            = dword ptr  4
.text:0040EBD0
.text:0040EBD0                 mov     eax, [ecx]
.text:0040EBD2                 mov     eax, [eax-0Ch]
.text:0040EBD5                 retn
.text:0040EBD5 __ZNKSs6lengthEv endp
.text:0040EBD5
.text:0040EBD5 ; ---------------------------------------------------------------------------
.text:0040EBD6                 align 4
.text:0040EBD8
.text:0040EBD8 ; =============== S U B R O U T I N E =======================================
.text:0040EBD8
.text:0040EBD8
.text:0040EBD8 ; _DWORD __stdcall std::string::rbegin(std::string *__hidden this)
.text:0040EBD8                 public __ZNKSs6rbeginEv
.text:0040EBD8 __ZNKSs6rbeginEv proc near
.text:0040EBD8
.text:0040EBD8 this            = dword ptr  4
.text:0040EBD8
.text:0040EBD8                 mov     eax, ecx
.text:0040EBDA                 mov     edx, [esp+this]
.text:0040EBDE                 mov     edx, [edx]
.text:0040EBE0                 add     edx, [edx-0Ch]
.text:0040EBE3                 mov     [ecx], edx
.text:0040EBE5                 retn    4
.text:0040EBE5 __ZNKSs6rbeginEv endp
.text:0040EBE5
.text:0040EBE8
.text:0040EBE8 ; =============== S U B R O U T I N E =======================================
.text:0040EBE8
.text:0040EBE8
.text:0040EBE8 ; _DWORD __stdcall std::string::substr(std::string *__hidden this, unsigned int, unsigned int)
.text:0040EBE8                 public __ZNKSs6substrEjj
.text:0040EBE8 __ZNKSs6substrEjj proc near
.text:0040EBE8
.text:0040EBE8 var_1C          = dword ptr -1Ch
.text:0040EBE8 var_18          = dword ptr -18h
.text:0040EBE8 var_14          = dword ptr -14h
.text:0040EBE8 this            = dword ptr  4
.text:0040EBE8 arg_4           = dword ptr  8
.text:0040EBE8 arg_8           = dword ptr  0Ch
.text:0040EBE8
.text:0040EBE8                 push    esi
.text:0040EBE9                 push    ebx
.text:0040EBEA                 sub     esp, 14h
.text:0040EBED                 mov     edx, [esp+1Ch+this]
.text:0040EBF1                 mov     ebx, [esp+1Ch+arg_4]
.text:0040EBF5                 mov     eax, [edx]
.text:0040EBF7                 cmp     ebx, [eax-0Ch]
.text:0040EBFA                 ja      short loc_40EC1F
.text:0040EBFC                 mov     esi, ecx
.text:0040EBFE                 mov     eax, [esp+1Ch+arg_8]
.text:0040EC02                 mov     [esp+1Ch+var_14], eax ; unsigned int
.text:0040EC06                 mov     [esp+1Ch+var_18], ebx ; std::string *
.text:0040EC0A                 mov     [esp+1Ch+var_1C], edx ; this
.text:0040EC0D                 call    __ZNSsC1ERKSsjj ; std::string::string(std::string const&,uint,uint)
.text:0040EC12                 sub     esp, 0Ch
.text:0040EC15                 mov     eax, esi
.text:0040EC17                 add     esp, 14h
.text:0040EC1A                 pop     ebx
.text:0040EC1B                 pop     esi
.text:0040EC1C                 retn    0Ch
.text:0040EC1F ; ---------------------------------------------------------------------------
.text:0040EC1F
.text:0040EC1F loc_40EC1F:                             ; CODE XREF: std::string::substr(uint,uint)+12↑j
.text:0040EC1F                 mov     [esp+1Ch+var_1C], offset aBasicStringSub ; "basic_string::substr"
.text:0040EC26                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:0040EC26 __ZNKSs6substrEjj endp
.text:0040EC26
.text:0040EC26 ; ---------------------------------------------------------------------------
.text:0040EC2B                 align 4
.text:0040EC2C
.text:0040EC2C ; =============== S U B R O U T I N E =======================================
.text:0040EC2C
.text:0040EC2C
.text:0040EC2C ; _DWORD std::string::_M_data(std::string *__hidden this)
.text:0040EC2C                 public __ZNKSs7_M_dataEv
.text:0040EC2C __ZNKSs7_M_dataEv proc near
.text:0040EC2C
.text:0040EC2C this            = dword ptr  4
.text:0040EC2C
.text:0040EC2C                 mov     eax, [ecx]
.text:0040EC2E                 retn
.text:0040EC2E __ZNKSs7_M_dataEv endp
.text:0040EC2E
.text:0040EC2E ; ---------------------------------------------------------------------------
.text:0040EC2F                 align 10h
.text:0040EC30
.text:0040EC30 ; =============== S U B R O U T I N E =======================================
.text:0040EC30
.text:0040EC30
.text:0040EC30 ; _DWORD std::string::_M_iend(std::string *__hidden this)
.text:0040EC30                 public __ZNKSs7_M_iendEv
.text:0040EC30 __ZNKSs7_M_iendEv proc near
.text:0040EC30
.text:0040EC30 this            = dword ptr  4
.text:0040EC30
.text:0040EC30                 mov     eax, [ecx]
.text:0040EC32                 add     eax, [eax-0Ch]
.text:0040EC35                 retn
.text:0040EC35 __ZNKSs7_M_iendEv endp
.text:0040EC35
.text:0040EC35 ; ---------------------------------------------------------------------------
.text:0040EC36                 align 4
.text:0040EC38
.text:0040EC38 ; =============== S U B R O U T I N E =======================================
.text:0040EC38
.text:0040EC38
.text:0040EC38 ; _DWORD __stdcall std::string::compare(std::string *__hidden this, const char *)
.text:0040EC38                 public __ZNKSs7compareEPKc
.text:0040EC38 __ZNKSs7compareEPKc proc near
.text:0040EC38
.text:0040EC38 var_1C          = dword ptr -1Ch
.text:0040EC38 var_18          = dword ptr -18h
.text:0040EC38 var_14          = dword ptr -14h
.text:0040EC38 this            = dword ptr  4
.text:0040EC38
.text:0040EC38                 push    edi
.text:0040EC39                 push    esi
.text:0040EC3A                 push    ebx
.text:0040EC3B                 sub     esp, 10h
.text:0040EC3E                 mov     edx, [ecx]
.text:0040EC40                 mov     ebx, [edx-0Ch]
.text:0040EC43                 xor     eax, eax
.text:0040EC45                 mov     ecx, 0FFFFFFFFh
.text:0040EC4A                 mov     edi, [esp+1Ch+this]
.text:0040EC4E                 repne scasb
.text:0040EC50                 not     ecx
.text:0040EC52                 lea     esi, [ecx-1]
.text:0040EC55                 mov     eax, esi
.text:0040EC57                 cmp     esi, ebx
.text:0040EC59                 jbe     short loc_40EC5D
.text:0040EC5B                 mov     eax, ebx
.text:0040EC5D
.text:0040EC5D loc_40EC5D:                             ; CODE XREF: std::string::compare(char const*)+21↑j
.text:0040EC5D                 mov     [esp+1Ch+var_14], eax ; size_t
.text:0040EC61                 mov     eax, [esp+1Ch+this]
.text:0040EC65                 mov     [esp+1Ch+var_18], eax ; void *
.text:0040EC69                 mov     [esp+1Ch+var_1C], edx ; void *
.text:0040EC6C                 call    _memcmp
.text:0040EC71                 test    eax, eax
.text:0040EC73                 jnz     short loc_40EC79
.text:0040EC75                 mov     eax, ebx
.text:0040EC77                 sub     eax, esi
.text:0040EC79
.text:0040EC79 loc_40EC79:                             ; CODE XREF: std::string::compare(char const*)+3B↑j
.text:0040EC79                 add     esp, 10h
.text:0040EC7C                 pop     ebx
.text:0040EC7D                 pop     esi
.text:0040EC7E                 pop     edi
.text:0040EC7F                 retn    4
.text:0040EC7F __ZNKSs7compareEPKc endp
.text:0040EC7F
.text:0040EC7F ; ---------------------------------------------------------------------------
.text:0040EC82                 align 4
.text:0040EC84
.text:0040EC84 ; =============== S U B R O U T I N E =======================================
.text:0040EC84
.text:0040EC84
.text:0040EC84 ; _DWORD __stdcall std::string::compare(std::string *__hidden this, const std::string *)
.text:0040EC84                 public __ZNKSs7compareERKSs
.text:0040EC84 __ZNKSs7compareERKSs proc near
.text:0040EC84
.text:0040EC84 var_1C          = dword ptr -1Ch
.text:0040EC84 var_18          = dword ptr -18h
.text:0040EC84 var_14          = dword ptr -14h
.text:0040EC84 this            = dword ptr  4
.text:0040EC84
.text:0040EC84                 push    esi
.text:0040EC85                 push    ebx
.text:0040EC86                 sub     esp, 14h
.text:0040EC89                 mov     eax, [ecx]
.text:0040EC8B                 mov     esi, [eax-0Ch]
.text:0040EC8E                 mov     edx, [esp+1Ch+this]
.text:0040EC92                 mov     edx, [edx]
.text:0040EC94                 mov     ebx, [edx-0Ch]
.text:0040EC97                 mov     ecx, ebx
.text:0040EC99                 cmp     ebx, esi
.text:0040EC9B                 jbe     short loc_40EC9F
.text:0040EC9D                 mov     ecx, esi
.text:0040EC9F
.text:0040EC9F loc_40EC9F:                             ; CODE XREF: std::string::compare(std::string const&)+17↑j
.text:0040EC9F                 mov     [esp+1Ch+var_14], ecx ; size_t
.text:0040ECA3                 mov     [esp+1Ch+var_18], edx ; void *
.text:0040ECA7                 mov     [esp+1Ch+var_1C], eax ; void *
.text:0040ECAA                 call    _memcmp
.text:0040ECAF                 test    eax, eax
.text:0040ECB1                 jnz     short loc_40ECB7
.text:0040ECB3                 mov     eax, esi
.text:0040ECB5                 sub     eax, ebx
.text:0040ECB7
.text:0040ECB7 loc_40ECB7:                             ; CODE XREF: std::string::compare(std::string const&)+2D↑j
.text:0040ECB7                 add     esp, 14h
.text:0040ECBA                 pop     ebx
.text:0040ECBB                 pop     esi
.text:0040ECBC                 retn    4
.text:0040ECBC __ZNKSs7compareERKSs endp
.text:0040ECBC
.text:0040ECBC ; ---------------------------------------------------------------------------
.text:0040ECBF                 align 10h
.text:0040ECC0
.text:0040ECC0 ; =============== S U B R O U T I N E =======================================
.text:0040ECC0
.text:0040ECC0
.text:0040ECC0 ; _DWORD __stdcall std::string::compare(std::string *__hidden this, unsigned int, void *, const char *)
.text:0040ECC0                 public __ZNKSs7compareEjjPKc
.text:0040ECC0 __ZNKSs7compareEjjPKc proc near
.text:0040ECC0
.text:0040ECC0 var_1C          = dword ptr -1Ch
.text:0040ECC0 var_18          = dword ptr -18h
.text:0040ECC0 var_14          = dword ptr -14h
.text:0040ECC0 this            = dword ptr  4
.text:0040ECC0 arg_4           = dword ptr  8
.text:0040ECC0 arg_8           = dword ptr  0Ch
.text:0040ECC0
.text:0040ECC0                 push    edi
.text:0040ECC1                 push    esi
.text:0040ECC2                 push    ebx
.text:0040ECC3                 sub     esp, 10h
.text:0040ECC6                 mov     edx, [esp+1Ch+this]
.text:0040ECCA                 mov     esi, [ecx]
.text:0040ECCC                 mov     ebx, [esi-0Ch]
.text:0040ECCF                 cmp     edx, ebx
.text:0040ECD1                 ja      short loc_40ED26
.text:0040ECD3                 sub     ebx, edx
.text:0040ECD5                 cmp     ebx, [esp+1Ch+arg_4]
.text:0040ECD9                 ja      short loc_40ED20
.text:0040ECDB
.text:0040ECDB loc_40ECDB:                             ; CODE XREF: std::string::compare(uint,uint,char const*)+64↓j
.text:0040ECDB                 xor     eax, eax
.text:0040ECDD                 mov     ecx, 0FFFFFFFFh
.text:0040ECE2                 mov     edi, [esp+1Ch+arg_8]
.text:0040ECE6                 repne scasb
.text:0040ECE8                 not     ecx
.text:0040ECEA                 lea     edi, [ecx-1]
.text:0040ECED                 mov     eax, edi
.text:0040ECEF                 cmp     edi, ebx
.text:0040ECF1                 ja      short loc_40ED1C
.text:0040ECF3
.text:0040ECF3 loc_40ECF3:                             ; CODE XREF: std::string::compare(uint,uint,char const*)+5E↓j
.text:0040ECF3                 mov     [esp+1Ch+var_14], eax ; size_t
.text:0040ECF7                 mov     eax, [esp+1Ch+arg_8]
.text:0040ECFB                 mov     [esp+1Ch+var_18], eax ; void *
.text:0040ECFF                 add     edx, esi
.text:0040ED01                 mov     [esp+1Ch+var_1C], edx ; void *
.text:0040ED04                 call    _memcmp
.text:0040ED09                 test    eax, eax
.text:0040ED0B                 jnz     short loc_40ED11
.text:0040ED0D                 mov     eax, ebx
.text:0040ED0F                 sub     eax, edi
.text:0040ED11
.text:0040ED11 loc_40ED11:                             ; CODE XREF: std::string::compare(uint,uint,char const*)+4B↑j
.text:0040ED11                 add     esp, 10h
.text:0040ED14                 pop     ebx
.text:0040ED15                 pop     esi
.text:0040ED16                 pop     edi
.text:0040ED17                 retn    0Ch
.text:0040ED17 ; ---------------------------------------------------------------------------
.text:0040ED1A                 align 4
.text:0040ED1C
.text:0040ED1C loc_40ED1C:                             ; CODE XREF: std::string::compare(uint,uint,char const*)+31↑j
.text:0040ED1C                 mov     eax, ebx
.text:0040ED1E                 jmp     short loc_40ECF3
.text:0040ED20 ; ---------------------------------------------------------------------------
.text:0040ED20
.text:0040ED20 loc_40ED20:                             ; CODE XREF: std::string::compare(uint,uint,char const*)+19↑j
.text:0040ED20                 mov     ebx, [esp+1Ch+arg_4]
.text:0040ED24                 jmp     short loc_40ECDB
.text:0040ED26 ; ---------------------------------------------------------------------------
.text:0040ED26
.text:0040ED26 loc_40ED26:                             ; CODE XREF: std::string::compare(uint,uint,char const*)+11↑j
.text:0040ED26                 mov     [esp+1Ch+var_1C], offset aBasicStringCom ; "basic_string::compare"
.text:0040ED2D                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:0040ED2D __ZNKSs7compareEjjPKc endp
.text:0040ED2D
.text:0040ED2D ; ---------------------------------------------------------------------------
.text:0040ED32                 align 4
.text:0040ED34
.text:0040ED34 ; =============== S U B R O U T I N E =======================================
.text:0040ED34
.text:0040ED34
.text:0040ED34 ; _DWORD __stdcall std::string::compare(std::string *__hidden this, unsigned int, void *, size_t, unsigned int)
.text:0040ED34                 public __ZNKSs7compareEjjPKcj
.text:0040ED34 __ZNKSs7compareEjjPKcj proc near
.text:0040ED34
.text:0040ED34 var_1C          = dword ptr -1Ch
.text:0040ED34 var_18          = dword ptr -18h
.text:0040ED34 var_14          = dword ptr -14h
.text:0040ED34 this            = dword ptr  4
.text:0040ED34 arg_4           = dword ptr  8
.text:0040ED34 arg_8           = dword ptr  0Ch
.text:0040ED34 arg_C           = dword ptr  10h
.text:0040ED34
.text:0040ED34                 push    esi
.text:0040ED35                 push    ebx
.text:0040ED36                 sub     esp, 14h
.text:0040ED39                 mov     eax, [esp+1Ch+this]
.text:0040ED3D                 mov     esi, [esp+1Ch+arg_C]
.text:0040ED41                 mov     edx, [ecx]
.text:0040ED43                 mov     ebx, [edx-0Ch]
.text:0040ED46                 cmp     eax, ebx
.text:0040ED48                 ja      short loc_40ED90
.text:0040ED4A                 sub     ebx, eax
.text:0040ED4C                 cmp     ebx, [esp+1Ch+arg_4]
.text:0040ED50                 ja      short loc_40ED84
.text:0040ED52                 mov     ecx, esi
.text:0040ED54                 cmp     esi, ebx
.text:0040ED56                 ja      short loc_40ED80
.text:0040ED58
.text:0040ED58 loc_40ED58:                             ; CODE XREF: std::string::compare(uint,uint,char const*,uint)+4E↓j
.text:0040ED58                                         ; std::string::compare(uint,uint,char const*,uint)+58↓j
.text:0040ED58                 mov     [esp+1Ch+var_14], ecx ; size_t
.text:0040ED5C                 mov     ecx, [esp+1Ch+arg_8]
.text:0040ED60                 mov     [esp+1Ch+var_18], ecx ; void *
.text:0040ED64                 add     eax, edx
.text:0040ED66                 mov     [esp+1Ch+var_1C], eax ; void *
.text:0040ED69                 call    _memcmp
.text:0040ED6E                 test    eax, eax
.text:0040ED70                 jnz     short loc_40ED76
.text:0040ED72                 mov     eax, ebx
.text:0040ED74                 sub     eax, esi
.text:0040ED76
.text:0040ED76 loc_40ED76:                             ; CODE XREF: std::string::compare(uint,uint,char const*,uint)+3C↑j
.text:0040ED76                 add     esp, 14h
.text:0040ED79                 pop     ebx
.text:0040ED7A                 pop     esi
.text:0040ED7B                 retn    10h
.text:0040ED7B ; ---------------------------------------------------------------------------
.text:0040ED7E                 align 10h
.text:0040ED80
.text:0040ED80 loc_40ED80:                             ; CODE XREF: std::string::compare(uint,uint,char const*,uint)+22↑j
.text:0040ED80                                         ; std::string::compare(uint,uint,char const*,uint)+5A↓j
.text:0040ED80                 mov     ecx, ebx
.text:0040ED82                 jmp     short loc_40ED58
.text:0040ED84 ; ---------------------------------------------------------------------------
.text:0040ED84
.text:0040ED84 loc_40ED84:                             ; CODE XREF: std::string::compare(uint,uint,char const*,uint)+1C↑j
.text:0040ED84                 mov     ebx, [esp+1Ch+arg_4]
.text:0040ED88                 mov     ecx, esi
.text:0040ED8A                 cmp     esi, ebx
.text:0040ED8C                 jbe     short loc_40ED58
.text:0040ED8E                 jmp     short loc_40ED80
.text:0040ED90 ; ---------------------------------------------------------------------------
.text:0040ED90
.text:0040ED90 loc_40ED90:                             ; CODE XREF: std::string::compare(uint,uint,char const*,uint)+14↑j
.text:0040ED90                 mov     [esp+1Ch+var_1C], offset aBasicStringCom ; "basic_string::compare"
.text:0040ED97                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:0040ED97 __ZNKSs7compareEjjPKcj endp
.text:0040ED97
.text:0040ED9C
.text:0040ED9C ; =============== S U B R O U T I N E =======================================
.text:0040ED9C
.text:0040ED9C
.text:0040ED9C ; _DWORD __stdcall std::string::compare(std::string *__hidden this, unsigned int, unsigned int, const std::string *)
.text:0040ED9C                 public __ZNKSs7compareEjjRKSs
.text:0040ED9C __ZNKSs7compareEjjRKSs proc near
.text:0040ED9C
.text:0040ED9C var_1C          = dword ptr -1Ch
.text:0040ED9C var_18          = dword ptr -18h
.text:0040ED9C var_14          = dword ptr -14h
.text:0040ED9C this            = dword ptr  4
.text:0040ED9C arg_4           = dword ptr  8
.text:0040ED9C arg_8           = dword ptr  0Ch
.text:0040ED9C
.text:0040ED9C                 push    edi
.text:0040ED9D                 push    esi
.text:0040ED9E                 push    ebx
.text:0040ED9F                 sub     esp, 10h
.text:0040EDA2                 mov     eax, [esp+1Ch+this]
.text:0040EDA6                 mov     edx, [ecx]
.text:0040EDA8                 mov     ebx, [edx-0Ch]
.text:0040EDAB                 cmp     eax, ebx
.text:0040EDAD                 ja      short loc_40EE05
.text:0040EDAF                 sub     ebx, eax
.text:0040EDB1                 cmp     ebx, [esp+1Ch+arg_4]
.text:0040EDB5                 ja      short loc_40EDF0
.text:0040EDB7                 mov     ecx, [esp+1Ch+arg_8]
.text:0040EDBB                 mov     ecx, [ecx]
.text:0040EDBD                 mov     esi, [ecx-0Ch]
.text:0040EDC0                 mov     edi, ebx
.text:0040EDC2                 cmp     ebx, esi
.text:0040EDC4                 ja      short loc_40EDEC
.text:0040EDC6
.text:0040EDC6 loc_40EDC6:                             ; CODE XREF: std::string::compare(uint,uint,std::string const&)+52↓j
.text:0040EDC6                                         ; std::string::compare(uint,uint,std::string const&)+65↓j
.text:0040EDC6                 mov     [esp+1Ch+var_14], edi ; size_t
.text:0040EDCA                 mov     [esp+1Ch+var_18], ecx ; void *
.text:0040EDCE                 add     eax, edx
.text:0040EDD0                 mov     [esp+1Ch+var_1C], eax ; void *
.text:0040EDD3                 call    _memcmp
.text:0040EDD8                 test    eax, eax
.text:0040EDDA                 jnz     short loc_40EDE0
.text:0040EDDC                 mov     eax, ebx
.text:0040EDDE                 sub     eax, esi
.text:0040EDE0
.text:0040EDE0 loc_40EDE0:                             ; CODE XREF: std::string::compare(uint,uint,std::string const&)+3E↑j
.text:0040EDE0                 add     esp, 10h
.text:0040EDE3                 pop     ebx
.text:0040EDE4                 pop     esi
.text:0040EDE5                 pop     edi
.text:0040EDE6                 retn    0Ch
.text:0040EDE6 ; ---------------------------------------------------------------------------
.text:0040EDE9                 align 4
.text:0040EDEC
.text:0040EDEC loc_40EDEC:                             ; CODE XREF: std::string::compare(uint,uint,std::string const&)+28↑j
.text:0040EDEC                                         ; std::string::compare(uint,uint,std::string const&)+67↓j
.text:0040EDEC                 mov     edi, esi
.text:0040EDEE                 jmp     short loc_40EDC6
.text:0040EDF0 ; ---------------------------------------------------------------------------
.text:0040EDF0
.text:0040EDF0 loc_40EDF0:                             ; CODE XREF: std::string::compare(uint,uint,std::string const&)+19↑j
.text:0040EDF0                 mov     ebx, [esp+1Ch+arg_4]
.text:0040EDF4                 mov     ecx, [esp+1Ch+arg_8]
.text:0040EDF8                 mov     ecx, [ecx]
.text:0040EDFA                 mov     esi, [ecx-0Ch]
.text:0040EDFD                 mov     edi, ebx
.text:0040EDFF                 cmp     ebx, esi
.text:0040EE01                 jbe     short loc_40EDC6
.text:0040EE03                 jmp     short loc_40EDEC
.text:0040EE05 ; ---------------------------------------------------------------------------
.text:0040EE05
.text:0040EE05 loc_40EE05:                             ; CODE XREF: std::string::compare(uint,uint,std::string const&)+11↑j
.text:0040EE05                 mov     [esp+1Ch+var_1C], offset aBasicStringCom ; "basic_string::compare"
.text:0040EE0C                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:0040EE0C __ZNKSs7compareEjjRKSs endp
.text:0040EE0C
.text:0040EE0C ; ---------------------------------------------------------------------------
.text:0040EE11                 align 4
.text:0040EE14
.text:0040EE14 ; =============== S U B R O U T I N E =======================================
.text:0040EE14
.text:0040EE14
.text:0040EE14 ; _DWORD __stdcall std::string::compare(std::string *__hidden this, unsigned int, unsigned int, const std::string *, size_t, unsigned int)
.text:0040EE14                 public __ZNKSs7compareEjjRKSsjj
.text:0040EE14 __ZNKSs7compareEjjRKSsjj proc near
.text:0040EE14
.text:0040EE14 var_2C          = dword ptr -2Ch
.text:0040EE14 var_28          = dword ptr -28h
.text:0040EE14 var_24          = dword ptr -24h
.text:0040EE14 this            = dword ptr  4
.text:0040EE14 arg_4           = dword ptr  8
.text:0040EE14 arg_8           = dword ptr  0Ch
.text:0040EE14 arg_C           = dword ptr  10h
.text:0040EE14 arg_10          = dword ptr  14h
.text:0040EE14
.text:0040EE14                 push    ebp
.text:0040EE15                 push    edi
.text:0040EE16                 push    esi
.text:0040EE17                 push    ebx
.text:0040EE18                 sub     esp, 1Ch
.text:0040EE1B                 mov     eax, [esp+2Ch+this]
.text:0040EE1F                 mov     edx, [esp+2Ch+arg_C]
.text:0040EE23                 mov     ecx, [ecx]
.text:0040EE25                 mov     esi, [ecx-0Ch]
.text:0040EE28                 cmp     eax, esi
.text:0040EE2A                 ja      short loc_40EE9E
.text:0040EE2C                 mov     ebx, [esp+2Ch+arg_8]
.text:0040EE30                 mov     edi, [ebx]
.text:0040EE32                 mov     ebx, [edi-0Ch]
.text:0040EE35                 cmp     edx, ebx
.text:0040EE37                 ja      short loc_40EE9E
.text:0040EE39                 sub     esi, eax
.text:0040EE3B                 cmp     esi, [esp+2Ch+arg_4]
.text:0040EE3F                 ja      short loc_40EE8C
.text:0040EE41                 mov     ebp, ebx
.text:0040EE43                 sub     ebp, edx
.text:0040EE45                 mov     ebx, [esp+2Ch+arg_10]
.text:0040EE49                 cmp     ebx, ebp
.text:0040EE4B                 ja      short loc_40EE80
.text:0040EE4D
.text:0040EE4D loc_40EE4D:                             ; CODE XREF: std::string::compare(uint,uint,std::string const&,uint,uint)+86↓j
.text:0040EE4D                 mov     ebp, ebx
.text:0040EE4F                 cmp     ebx, esi
.text:0040EE51                 ja      short loc_40EE7C
.text:0040EE53
.text:0040EE53 loc_40EE53:                             ; CODE XREF: std::string::compare(uint,uint,std::string const&,uint,uint)+6A↓j
.text:0040EE53                                         ; std::string::compare(uint,uint,std::string const&,uint,uint)+72↓j
.text:0040EE53                 mov     [esp+2Ch+var_24], ebp ; size_t
.text:0040EE57                 add     edx, edi
.text:0040EE59                 mov     [esp+2Ch+var_28], edx ; void *
.text:0040EE5D                 add     eax, ecx
.text:0040EE5F                 mov     [esp+2Ch+var_2C], eax ; void *
.text:0040EE62                 call    _memcmp
.text:0040EE67                 test    eax, eax
.text:0040EE69                 jnz     short loc_40EE6F
.text:0040EE6B                 mov     eax, esi
.text:0040EE6D                 sub     eax, ebx
.text:0040EE6F
.text:0040EE6F loc_40EE6F:                             ; CODE XREF: std::string::compare(uint,uint,std::string const&,uint,uint)+55↑j
.text:0040EE6F                 add     esp, 1Ch
.text:0040EE72                 pop     ebx
.text:0040EE73                 pop     esi
.text:0040EE74                 pop     edi
.text:0040EE75                 pop     ebp
.text:0040EE76                 retn    14h
.text:0040EE76 ; ---------------------------------------------------------------------------
.text:0040EE79                 align 4
.text:0040EE7C
.text:0040EE7C loc_40EE7C:                             ; CODE XREF: std::string::compare(uint,uint,std::string const&,uint,uint)+3D↑j
.text:0040EE7C                                         ; std::string::compare(uint,uint,std::string const&,uint,uint)+74↓j
.text:0040EE7C                 mov     ebp, esi
.text:0040EE7E                 jmp     short loc_40EE53
.text:0040EE80 ; ---------------------------------------------------------------------------
.text:0040EE80
.text:0040EE80 loc_40EE80:                             ; CODE XREF: std::string::compare(uint,uint,std::string const&,uint,uint)+37↑j
.text:0040EE80                                         ; std::string::compare(uint,uint,std::string const&,uint,uint)+88↓j
.text:0040EE80                 mov     ebx, ebp
.text:0040EE82                 mov     ebp, ebx
.text:0040EE84                 cmp     ebx, esi
.text:0040EE86                 jbe     short loc_40EE53
.text:0040EE88                 jmp     short loc_40EE7C
.text:0040EE88 ; ---------------------------------------------------------------------------
.text:0040EE8A                 align 4
.text:0040EE8C
.text:0040EE8C loc_40EE8C:                             ; CODE XREF: std::string::compare(uint,uint,std::string const&,uint,uint)+2B↑j
.text:0040EE8C                 mov     esi, [esp+2Ch+arg_4]
.text:0040EE90                 mov     ebp, ebx
.text:0040EE92                 sub     ebp, edx
.text:0040EE94                 mov     ebx, [esp+2Ch+arg_10]
.text:0040EE98                 cmp     ebx, ebp
.text:0040EE9A                 jbe     short loc_40EE4D
.text:0040EE9C                 jmp     short loc_40EE80
.text:0040EE9E ; ---------------------------------------------------------------------------
.text:0040EE9E
.text:0040EE9E loc_40EE9E:                             ; CODE XREF: std::string::compare(uint,uint,std::string const&,uint,uint)+16↑j
.text:0040EE9E                                         ; std::string::compare(uint,uint,std::string const&,uint,uint)+23↑j
.text:0040EE9E                 mov     [esp+2Ch+var_2C], offset aBasicStringCom ; "basic_string::compare"
.text:0040EEA5                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:0040EEA5 __ZNKSs7compareEjjRKSsjj endp
.text:0040EEA5
.text:0040EEA5 ; ---------------------------------------------------------------------------
.text:0040EEAA                 align 4
.text:0040EEAC
.text:0040EEAC ; =============== S U B R O U T I N E =======================================
.text:0040EEAC
.text:0040EEAC
.text:0040EEAC ; _DWORD __stdcall std::string::crbegin(std::string *__hidden this)
.text:0040EEAC                 public __ZNKSs7crbeginEv
.text:0040EEAC __ZNKSs7crbeginEv proc near
.text:0040EEAC
.text:0040EEAC this            = dword ptr  4
.text:0040EEAC
.text:0040EEAC                 mov     eax, ecx
.text:0040EEAE                 mov     edx, [esp+this]
.text:0040EEB2                 mov     edx, [edx]
.text:0040EEB4                 add     edx, [edx-0Ch]
.text:0040EEB7                 mov     [ecx], edx
.text:0040EEB9                 retn    4
.text:0040EEB9 __ZNKSs7crbeginEv endp
.text:0040EEB9
.text:0040EEBC
.text:0040EEBC ; =============== S U B R O U T I N E =======================================
.text:0040EEBC
.text:0040EEBC
.text:0040EEBC ; _DWORD __stdcall std::string::_M_check(std::string *__hidden this, char *, const char *)
.text:0040EEBC                 public __ZNKSs8_M_checkEjPKc
.text:0040EEBC __ZNKSs8_M_checkEjPKc proc near
.text:0040EEBC
.text:0040EEBC var_1C          = dword ptr -1Ch
.text:0040EEBC this            = dword ptr  4
.text:0040EEBC arg_4           = dword ptr  8
.text:0040EEBC
.text:0040EEBC                 sub     esp, 1Ch
.text:0040EEBF                 mov     eax, [esp+1Ch+this]
.text:0040EEC3                 mov     edx, [ecx]
.text:0040EEC5                 cmp     eax, [edx-0Ch]
.text:0040EEC8                 ja      short loc_40EED0
.text:0040EECA                 add     esp, 1Ch
.text:0040EECD                 retn    8
.text:0040EED0 ; ---------------------------------------------------------------------------
.text:0040EED0
.text:0040EED0 loc_40EED0:                             ; CODE XREF: std::string::_M_check(uint,char const*)+C↑j
.text:0040EED0                 mov     eax, [esp+1Ch+arg_4]
.text:0040EED4                 mov     [esp+1Ch+var_1C], eax ; char *
.text:0040EED7                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:0040EED7 __ZNKSs8_M_checkEjPKc endp
.text:0040EED7
.text:0040EEDC
.text:0040EEDC ; =============== S U B R O U T I N E =======================================
.text:0040EEDC
.text:0040EEDC
.text:0040EEDC ; _DWORD __stdcall std::string::_M_limit(std::string *__hidden this, unsigned int, unsigned int)
.text:0040EEDC                 public __ZNKSs8_M_limitEjj
.text:0040EEDC __ZNKSs8_M_limitEjj proc near
.text:0040EEDC
.text:0040EEDC this            = dword ptr  4
.text:0040EEDC arg_4           = dword ptr  8
.text:0040EEDC
.text:0040EEDC                 mov     eax, [ecx]
.text:0040EEDE                 mov     edx, [eax-0Ch]
.text:0040EEE1                 sub     edx, [esp+this]
.text:0040EEE5                 mov     eax, [esp+arg_4]
.text:0040EEE9                 cmp     eax, edx
.text:0040EEEB                 jbe     short locret_40EEEF
.text:0040EEED                 mov     eax, edx
.text:0040EEEF
.text:0040EEEF locret_40EEEF:                          ; CODE XREF: std::string::_M_limit(uint,uint)+F↑j
.text:0040EEEF                 retn    8
.text:0040EEEF __ZNKSs8_M_limitEjj endp
.text:0040EEEF
.text:0040EEEF ; ---------------------------------------------------------------------------
.text:0040EEF2                 align 4
.text:0040EEF4
.text:0040EEF4 ; =============== S U B R O U T I N E =======================================
.text:0040EEF4
.text:0040EEF4
.text:0040EEF4 ; _DWORD std::string::capacity(std::string *__hidden this)
.text:0040EEF4                 public __ZNKSs8capacityEv
.text:0040EEF4 __ZNKSs8capacityEv proc near
.text:0040EEF4
.text:0040EEF4 this            = dword ptr  4
.text:0040EEF4
.text:0040EEF4                 mov     eax, [ecx]
.text:0040EEF6                 mov     eax, [eax-8]
.text:0040EEF9                 retn
.text:0040EEF9 __ZNKSs8capacityEv endp
.text:0040EEF9
.text:0040EEF9 ; ---------------------------------------------------------------------------
.text:0040EEFA                 align 4
.text:0040EEFC
.text:0040EEFC ; =============== S U B R O U T I N E =======================================
.text:0040EEFC
.text:0040EEFC
.text:0040EEFC ; _DWORD std::string::max_size(std::string *__hidden this)
.text:0040EEFC                 public __ZNKSs8max_sizeEv
.text:0040EEFC __ZNKSs8max_sizeEv proc near
.text:0040EEFC
.text:0040EEFC this            = dword ptr  4
.text:0040EEFC
.text:0040EEFC                 mov     eax, 3FFFFFFCh
.text:0040EF01                 retn
.text:0040EF01 __ZNKSs8max_sizeEv endp
.text:0040EF01
.text:0040EF01 ; ---------------------------------------------------------------------------
.text:0040EF02                 align 4
.text:0040EF04
.text:0040EF04 ; =============== S U B R O U T I N E =======================================
.text:0040EF04
.text:0040EF04
.text:0040EF04 ; _DWORD std::string::_M_ibegin(std::string *__hidden this)
.text:0040EF04                 public __ZNKSs9_M_ibeginEv
.text:0040EF04 __ZNKSs9_M_ibeginEv proc near
.text:0040EF04
.text:0040EF04 this            = dword ptr  4
.text:0040EF04
.text:0040EF04                 mov     eax, [ecx]
.text:0040EF06                 retn
.text:0040EF06 __ZNKSs9_M_ibeginEv endp
.text:0040EF06
.text:0040EF06 ; ---------------------------------------------------------------------------
.text:0040EF07                 align 4
.text:0040EF08
.text:0040EF08 ; =============== S U B R O U T I N E =======================================
.text:0040EF08
.text:0040EF08
.text:0040EF08 ; std::string::operator[](unsigned int)const
.text:0040EF08                 public __ZNKSsixEj
.text:0040EF08 __ZNKSsixEj     proc near
.text:0040EF08
.text:0040EF08 arg_0           = dword ptr  4
.text:0040EF08
.text:0040EF08                 mov     eax, [ecx]
.text:0040EF0A                 add     eax, [esp+arg_0]
.text:0040EF0E                 retn    4
.text:0040EF0E __ZNKSsixEj     endp
.text:0040EF0E
.text:0040EF0E ; ---------------------------------------------------------------------------
.text:0040EF11                 align 4
.text:0040EF14
.text:0040EF14 ; =============== S U B R O U T I N E =======================================
.text:0040EF14
.text:0040EF14 ; Attributes: bp-based frame
.text:0040EF14
.text:0040EF14 ; std::_Rb_tree_iterator<int>::operator==(std::_Rb_tree_iterator<int> const&)const
.text:0040EF14                 public __ZNKSt17_Rb_tree_iteratorIiEeqERKS0_
.text:0040EF14 __ZNKSt17_Rb_tree_iteratorIiEeqERKS0_ proc near
.text:0040EF14                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+116↓p
.text:0040EF14                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::find(int const&)+9E↓p
.text:0040EF14
.text:0040EF14 var_4           = dword ptr -4
.text:0040EF14 arg_0           = dword ptr  8
.text:0040EF14
.text:0040EF14                 push    ebp
.text:0040EF15                 mov     ebp, esp
.text:0040EF17                 sub     esp, 4
.text:0040EF1A                 mov     [ebp+var_4], ecx
.text:0040EF1D                 mov     eax, [ebp+var_4]
.text:0040EF20                 mov     edx, [eax]
.text:0040EF22                 mov     eax, [ebp+arg_0]
.text:0040EF25                 mov     eax, [eax]
.text:0040EF27                 cmp     edx, eax
.text:0040EF29                 setz    al
.text:0040EF2C                 leave
.text:0040EF2D                 retn    4
.text:0040EF2D __ZNKSt17_Rb_tree_iteratorIiEeqERKS0_ endp
.text:0040EF2D
.text:0040EF30
.text:0040EF30 ; =============== S U B R O U T I N E =======================================
.text:0040EF30
.text:0040EF30 ; Attributes: bp-based frame
.text:0040EF30
.text:0040EF30 ; std::_Rb_tree_const_iterator<int>::operator==(std::_Rb_tree_const_iterator<int> const&)const
.text:0040EF30                 public __ZNKSt23_Rb_tree_const_iteratorIiEeqERKS0_
.text:0040EF30 __ZNKSt23_Rb_tree_const_iteratorIiEeqERKS0_ proc near
.text:0040EF30                                         ; CODE XREF: _main+1DA↑p
.text:0040EF30
.text:0040EF30 var_4           = dword ptr -4
.text:0040EF30 arg_0           = dword ptr  8
.text:0040EF30
.text:0040EF30                 push    ebp
.text:0040EF31                 mov     ebp, esp
.text:0040EF33                 sub     esp, 4
.text:0040EF36                 mov     [ebp+var_4], ecx
.text:0040EF39                 mov     eax, [ebp+var_4]
.text:0040EF3C                 mov     edx, [eax]
.text:0040EF3E                 mov     eax, [ebp+arg_0]
.text:0040EF41                 mov     eax, [eax]
.text:0040EF43                 cmp     edx, eax
.text:0040EF45                 setz    al
.text:0040EF48                 leave
.text:0040EF49                 retn    4
.text:0040EF49 __ZNKSt23_Rb_tree_const_iteratorIiEeqERKS0_ endp
.text:0040EF49
.text:0040EF4C
.text:0040EF4C ; =============== S U B R O U T I N E =======================================
.text:0040EF4C
.text:0040EF4C ; Attributes: bp-based frame
.text:0040EF4C
.text:0040EF4C ; std::set<int, std::less<int>, std::allocator<int>>::end(void)const
.text:0040EF4C                 public __ZNKSt3setIiSt4lessIiESaIiEE3endEv
.text:0040EF4C __ZNKSt3setIiSt4lessIiESaIiEE3endEv proc near
.text:0040EF4C                                         ; CODE XREF: _main+1A3↑p
.text:0040EF4C
.text:0040EF4C var_C           = dword ptr -0Ch
.text:0040EF4C
.text:0040EF4C                 push    ebp
.text:0040EF4D                 mov     ebp, esp
.text:0040EF4F                 sub     esp, 18h
.text:0040EF52                 mov     [ebp+var_C], ecx
.text:0040EF55                 mov     eax, [ebp+var_C]
.text:0040EF58                 mov     ecx, eax
.text:0040EF5A                 call    __ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE3endEv ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::end(void)
.text:0040EF5F                 leave
.text:0040EF60                 retn
.text:0040EF60 __ZNKSt3setIiSt4lessIiESaIiEE3endEv endp
.text:0040EF60
.text:0040EF60 ; ---------------------------------------------------------------------------
.text:0040EF61                 align 4
.text:0040EF64
.text:0040EF64 ; =============== S U B R O U T I N E =======================================
.text:0040EF64
.text:0040EF64 ; Attributes: bp-based frame
.text:0040EF64
.text:0040EF64 ; std::less<int>::operator()(int const&, int const&)const
.text:0040EF64                 public __ZNKSt4lessIiEclERKiS2_
.text:0040EF64 __ZNKSt4lessIiEclERKiS2_ proc near      ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*,int const&)+50↓p
.text:0040EF64                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_lower_bound(std::_Rb_tree_node<int> *,std::_Rb_tree_node<int> *,int const&)+27↓p ...
.text:0040EF64
.text:0040EF64 var_4           = dword ptr -4
.text:0040EF64 arg_0           = dword ptr  8
.text:0040EF64 arg_4           = dword ptr  0Ch
.text:0040EF64
.text:0040EF64                 push    ebp
.text:0040EF65                 mov     ebp, esp
.text:0040EF67                 sub     esp, 4
.text:0040EF6A                 mov     [ebp+var_4], ecx
.text:0040EF6D                 mov     eax, [ebp+arg_0]
.text:0040EF70                 mov     edx, [eax]
.text:0040EF72                 mov     eax, [ebp+arg_4]
.text:0040EF75                 mov     eax, [eax]
.text:0040EF77                 cmp     edx, eax
.text:0040EF79                 setl    al
.text:0040EF7C                 leave
.text:0040EF7D                 retn    8
.text:0040EF7D __ZNKSt4lessIiEclERKiS2_ endp
.text:0040EF7D
.text:0040EF80
.text:0040EF80 ; =============== S U B R O U T I N E =======================================
.text:0040EF80
.text:0040EF80 ; Attributes: bp-based frame
.text:0040EF80
.text:0040EF80 ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::get_allocator(void)const
.text:0040EF80                 public __ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13get_allocatorEv
.text:0040EF80 __ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13get_allocatorEv proc near
.text:0040EF80                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_create_node(int const&)+32↓p
.text:0040EF80                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_destroy_node(std::_Rb_tree_node<int> *)+25↓p
.text:0040EF80
.text:0040EF80 var_C           = dword ptr -0Ch
.text:0040EF80 arg_0           = dword ptr  8
.text:0040EF80
.text:0040EF80                 push    ebp
.text:0040EF81                 mov     ebp, esp
.text:0040EF83                 sub     esp, 28h
.text:0040EF86                 mov     [ebp+var_C], ecx
.text:0040EF89                 mov     ecx, [ebp+arg_0]
.text:0040EF8C                 call    __ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE21_M_get_Node_allocatorEv ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_get_Node_allocator(void)
.text:0040EF91                 mov     edx, [ebp+var_C]
.text:0040EF94                 mov     [esp], eax
.text:0040EF97                 mov     ecx, edx
.text:0040EF99                 call    __ZNSaIiEC1ISt13_Rb_tree_nodeIiEEERKSaIT_E ; std::allocator<int>::allocator<std::_Rb_tree_node<int>>(std::allocator<std::_Rb_tree_node<int>> const&)
.text:0040EF9E                 sub     esp, 4
.text:0040EFA1                 mov     eax, [ebp+var_C]
.text:0040EFA4                 leave
.text:0040EFA5                 retn    4
.text:0040EFA5 __ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13get_allocatorEv endp
.text:0040EFA5
.text:0040EFA8
.text:0040EFA8 ; =============== S U B R O U T I N E =======================================
.text:0040EFA8
.text:0040EFA8 ; Attributes: bp-based frame
.text:0040EFA8
.text:0040EFA8 ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_M_get_Node_allocator(void)const
.text:0040EFA8                 public __ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE21_M_get_Node_allocatorEv
.text:0040EFA8 __ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE21_M_get_Node_allocatorEv proc near
.text:0040EFA8                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::get_allocator(void)+C↑p
.text:0040EFA8
.text:0040EFA8 var_4           = dword ptr -4
.text:0040EFA8
.text:0040EFA8                 push    ebp
.text:0040EFA9                 mov     ebp, esp
.text:0040EFAB                 sub     esp, 4
.text:0040EFAE                 mov     [ebp+var_4], ecx
.text:0040EFB1                 mov     eax, [ebp+var_4]
.text:0040EFB4                 leave
.text:0040EFB5                 retn
.text:0040EFB5 __ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE21_M_get_Node_allocatorEv endp
.text:0040EFB5
.text:0040EFB5 ; ---------------------------------------------------------------------------
.text:0040EFB6                 align 4
.text:0040EFB8
.text:0040EFB8 ; =============== S U B R O U T I N E =======================================
.text:0040EFB8
.text:0040EFB8 ; Attributes: bp-based frame
.text:0040EFB8
.text:0040EFB8 ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::end(void)const
.text:0040EFB8                 public __ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE3endEv
.text:0040EFB8 __ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE3endEv proc near
.text:0040EFB8                                         ; CODE XREF: std::set<int,std::less<int>,std::allocator<int>>::end(void)+E↑p
.text:0040EFB8
.text:0040EFB8 var_1C          = dword ptr -1Ch
.text:0040EFB8 var_C           = dword ptr -0Ch
.text:0040EFB8
.text:0040EFB8                 push    ebp
.text:0040EFB9                 mov     ebp, esp
.text:0040EFBB                 sub     esp, 38h
.text:0040EFBE                 mov     [ebp+var_1C], ecx
.text:0040EFC1                 mov     eax, [ebp+var_1C]
.text:0040EFC4                 lea     edx, [eax+4]
.text:0040EFC7                 lea     eax, [ebp+var_C]
.text:0040EFCA                 mov     [esp], edx
.text:0040EFCD                 mov     ecx, eax
.text:0040EFCF                 call    __ZNSt23_Rb_tree_const_iteratorIiEC1EPKSt13_Rb_tree_nodeIiE ; std::_Rb_tree_const_iterator<int>::_Rb_tree_const_iterator(std::_Rb_tree_node<int> const*)
.text:0040EFD4                 sub     esp, 4
.text:0040EFD7                 mov     eax, [ebp+var_C]
.text:0040EFDA                 leave
.text:0040EFDB                 retn
.text:0040EFDB __ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE3endEv endp
.text:0040EFDB
.text:0040EFDC
.text:0040EFDC ; =============== S U B R O U T I N E =======================================
.text:0040EFDC
.text:0040EFDC ; Attributes: bp-based frame
.text:0040EFDC
.text:0040EFDC ; std::_Identity<int>::operator()(int const&)const
.text:0040EFDC                 public __ZNKSt9_IdentityIiEclERKi
.text:0040EFDC __ZNKSt9_IdentityIiEclERKi proc near    ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*,int const&)+3C↓p
.text:0040EFDC                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+90↓p ...
.text:0040EFDC
.text:0040EFDC var_4           = dword ptr -4
.text:0040EFDC arg_0           = dword ptr  8
.text:0040EFDC
.text:0040EFDC                 push    ebp
.text:0040EFDD                 mov     ebp, esp
.text:0040EFDF                 sub     esp, 4
.text:0040EFE2                 mov     [ebp+var_4], ecx
.text:0040EFE5                 mov     eax, [ebp+arg_0]
.text:0040EFE8                 leave
.text:0040EFE9                 retn    4
.text:0040EFE9 __ZNKSt9_IdentityIiEclERKi endp
.text:0040EFE9
.text:0040EFEC
.text:0040EFEC ; =============== S U B R O U T I N E =======================================
.text:0040EFEC
.text:0040EFEC ; Attributes: bp-based frame
.text:0040EFEC
.text:0040EFEC ; std::allocator<std::_Rb_tree_node<int>>::allocator(void)
.text:0040EFEC                 public __ZNSaISt13_Rb_tree_nodeIiEEC2Ev
.text:0040EFEC __ZNSaISt13_Rb_tree_nodeIiEEC2Ev proc near
.text:0040EFEC                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree_impl<std::less<int>,false>::_Rb_tree_impl(void)+10↓p
.text:0040EFEC
.text:0040EFEC var_C           = dword ptr -0Ch
.text:0040EFEC
.text:0040EFEC                 push    ebp
.text:0040EFED                 mov     ebp, esp
.text:0040EFEF                 sub     esp, 18h
.text:0040EFF2                 mov     [ebp+var_C], ecx
.text:0040EFF5                 mov     eax, [ebp+var_C]
.text:0040EFF8                 mov     ecx, eax
.text:0040EFFA                 call    __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEEC2Ev ; __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::new_allocator(void)
.text:0040EFFF                 leave
.text:0040F000                 retn
.text:0040F000 __ZNSaISt13_Rb_tree_nodeIiEEC2Ev endp
.text:0040F000
.text:0040F000 ; ---------------------------------------------------------------------------
.text:0040F001                 align 4
.text:0040F004
.text:0040F004 ; =============== S U B R O U T I N E =======================================
.text:0040F004
.text:0040F004 ; Attributes: bp-based frame
.text:0040F004
.text:0040F004 ; std::allocator<std::_Rb_tree_node<int>>::~allocator()
.text:0040F004                 public __ZNSaISt13_Rb_tree_nodeIiEED2Ev
.text:0040F004 __ZNSaISt13_Rb_tree_nodeIiEED2Ev proc near
.text:0040F004                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree_impl<std::less<int>,false>::~_Rb_tree_impl()+E↓p
.text:0040F004
.text:0040F004 var_C           = dword ptr -0Ch
.text:0040F004
.text:0040F004                 push    ebp
.text:0040F005                 mov     ebp, esp
.text:0040F007                 sub     esp, 18h
.text:0040F00A                 mov     [ebp+var_C], ecx
.text:0040F00D                 mov     eax, [ebp+var_C]
.text:0040F010                 mov     ecx, eax
.text:0040F012                 call    __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEED2Ev ; __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::~new_allocator()
.text:0040F017                 leave
.text:0040F018                 retn
.text:0040F018 __ZNSaISt13_Rb_tree_nodeIiEED2Ev endp
.text:0040F018
.text:0040F018 ; ---------------------------------------------------------------------------
.text:0040F019                 align 4
.text:0040F01C
.text:0040F01C ; =============== S U B R O U T I N E =======================================
.text:0040F01C
.text:0040F01C ; Attributes: bp-based frame
.text:0040F01C
.text:0040F01C ; std::allocator<int>::allocator<std::_Rb_tree_node<int>>(std::allocator<std::_Rb_tree_node<int>> const&)
.text:0040F01C                 public __ZNSaIiEC1ISt13_Rb_tree_nodeIiEEERKSaIT_E
.text:0040F01C __ZNSaIiEC1ISt13_Rb_tree_nodeIiEEERKSaIT_E proc near
.text:0040F01C                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::get_allocator(void)+19↑p
.text:0040F01C
.text:0040F01C var_C           = dword ptr -0Ch
.text:0040F01C
.text:0040F01C                 push    ebp
.text:0040F01D                 mov     ebp, esp
.text:0040F01F                 sub     esp, 18h
.text:0040F022                 mov     [ebp+var_C], ecx
.text:0040F025                 mov     eax, [ebp+var_C]
.text:0040F028                 mov     ecx, eax
.text:0040F02A                 call    __ZN9__gnu_cxx13new_allocatorIiEC2Ev ; __gnu_cxx::new_allocator<int>::new_allocator(void)
.text:0040F02F                 leave
.text:0040F030                 retn    4
.text:0040F030 __ZNSaIiEC1ISt13_Rb_tree_nodeIiEEERKSaIT_E endp
.text:0040F030
.text:0040F030 ; ---------------------------------------------------------------------------
.text:0040F033                 align 4
.text:0040F034
.text:0040F034 ; =============== S U B R O U T I N E =======================================
.text:0040F034
.text:0040F034 ; Attributes: bp-based frame
.text:0040F034
.text:0040F034 ; std::allocator<int>::~allocator()
.text:0040F034                 public __ZNSaIiED1Ev
.text:0040F034 __ZNSaIiED1Ev   proc near               ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_create_node(int const&)+56↓p
.text:0040F034                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_destroy_node(std::_Rb_tree_node<int> *)+42↓p
.text:0040F034
.text:0040F034 var_C           = dword ptr -0Ch
.text:0040F034
.text:0040F034                 push    ebp
.text:0040F035                 mov     ebp, esp
.text:0040F037                 sub     esp, 18h
.text:0040F03A                 mov     [ebp+var_C], ecx
.text:0040F03D                 mov     eax, [ebp+var_C]
.text:0040F040                 mov     ecx, eax
.text:0040F042                 call    __ZN9__gnu_cxx13new_allocatorIiED2Ev ; __gnu_cxx::new_allocator<int>::~new_allocator()
.text:0040F047                 leave
.text:0040F048                 retn
.text:0040F048 __ZNSaIiED1Ev   endp
.text:0040F048
.text:0040F048 ; ---------------------------------------------------------------------------
.text:0040F049                 align 4
.text:0040F04C
.text:0040F04C ; =============== S U B R O U T I N E =======================================
.text:0040F04C
.text:0040F04C
.text:0040F04C ; _DWORD __cdecl std::string::_S_compare(std::string *__hidden this, unsigned int, unsigned int)
.text:0040F04C                 public __ZNSs10_S_compareEjj
.text:0040F04C __ZNSs10_S_compareEjj proc near
.text:0040F04C
.text:0040F04C this            = dword ptr  4
.text:0040F04C arg_4           = dword ptr  8
.text:0040F04C
.text:0040F04C                 mov     eax, [esp+this]
.text:0040F050                 sub     eax, [esp+arg_4]
.text:0040F054                 retn
.text:0040F054 __ZNSs10_S_compareEjj endp
.text:0040F054
.text:0040F054 ; ---------------------------------------------------------------------------
.text:0040F055                 align 4
.text:0040F058
.text:0040F058 ; =============== S U B R O U T I N E =======================================
.text:0040F058
.text:0040F058
.text:0040F058 ; std::string::_Alloc_hider::_Alloc_hider(char *, std::allocator<char> const&)
.text:0040F058                 public __ZNSs12_Alloc_hiderC1EPcRKSaIcE
.text:0040F058 __ZNSs12_Alloc_hiderC1EPcRKSaIcE proc near
.text:0040F058
.text:0040F058 arg_0           = dword ptr  4
.text:0040F058
.text:0040F058                 mov     eax, [esp+arg_0]
.text:0040F05C                 mov     [ecx], eax
.text:0040F05E                 retn    8
.text:0040F05E __ZNSs12_Alloc_hiderC1EPcRKSaIcE endp
.text:0040F05E
.text:0040F05E ; ---------------------------------------------------------------------------
.text:0040F061                 align 4
.text:0040F064
.text:0040F064 ; =============== S U B R O U T I N E =======================================
.text:0040F064
.text:0040F064
.text:0040F064 ; std::string::_Alloc_hider::_Alloc_hider(char *, std::allocator<char> const&)
.text:0040F064                 public __ZNSs12_Alloc_hiderC2EPcRKSaIcE
.text:0040F064 __ZNSs12_Alloc_hiderC2EPcRKSaIcE proc near
.text:0040F064
.text:0040F064 arg_0           = dword ptr  4
.text:0040F064
.text:0040F064                 mov     eax, [esp+arg_0]
.text:0040F068                 mov     [ecx], eax
.text:0040F06A                 retn    8
.text:0040F06A __ZNSs12_Alloc_hiderC2EPcRKSaIcE endp
.text:0040F06A
.text:0040F06A ; ---------------------------------------------------------------------------
.text:0040F06D                 align 10h
.text:0040F070
.text:0040F070 ; =============== S U B R O U T I N E =======================================
.text:0040F070
.text:0040F070
.text:0040F070 ; _DWORD std::string::_M_leak_hard(std::string *__hidden this)
.text:0040F070                 public __ZNSs12_M_leak_hardEv
.text:0040F070 __ZNSs12_M_leak_hardEv proc near        ; CODE XREF: std::string::at(uint)+19↓p
.text:0040F070                                         ; std::string::end(void)+36↓p ...
.text:0040F070
.text:0040F070 var_1C          = dword ptr -1Ch
.text:0040F070 var_18          = dword ptr -18h
.text:0040F070 var_14          = dword ptr -14h
.text:0040F070 this            = dword ptr  4
.text:0040F070
.text:0040F070                 push    ebx
.text:0040F071                 sub     esp, 18h
.text:0040F074                 mov     ebx, ecx
.text:0040F076                 mov     eax, [ecx]
.text:0040F078                 mov     ecx, [eax-4]
.text:0040F07B                 test    ecx, ecx
.text:0040F07D                 jle     short loc_40F0A2
.text:0040F07F                 mov     [esp+1Ch+var_14], 0 ; unsigned int
.text:0040F087                 mov     [esp+1Ch+var_18], 0 ; unsigned int
.text:0040F08F                 mov     [esp+1Ch+var_1C], 0 ; this
.text:0040F096                 mov     ecx, ebx
.text:0040F098                 call    __ZNSs9_M_mutateEjjj ; std::string::_M_mutate(uint,uint,uint)
.text:0040F09D                 sub     esp, 0Ch
.text:0040F0A0                 mov     eax, [ebx]
.text:0040F0A2
.text:0040F0A2 loc_40F0A2:                             ; CODE XREF: std::string::_M_leak_hard(void)+D↑j
.text:0040F0A2                 mov     dword ptr [eax-4], 0FFFFFFFFh
.text:0040F0A9                 add     esp, 18h
.text:0040F0AC                 pop     ebx
.text:0040F0AD                 retn
.text:0040F0AD __ZNSs12_M_leak_hardEv endp
.text:0040F0AD
.text:0040F0AD ; ---------------------------------------------------------------------------
.text:0040F0AE                 align 10h
.text:0040F0B0
.text:0040F0B0 ; =============== S U B R O U T I N E =======================================
.text:0040F0B0
.text:0040F0B0
.text:0040F0B0 ; std::string::_S_construct(unsigned int, char, std::allocator<char> const&)
.text:0040F0B0                 public __ZNSs12_S_constructEjcRKSaIcE
.text:0040F0B0 __ZNSs12_S_constructEjcRKSaIcE proc near
.text:0040F0B0                                         ; CODE XREF: `anonymous namespace'::future_error_category::message(int)+57↑p
.text:0040F0B0                                         ; std::string::_S_construct_aux_2(uint,char,std::allocator<char> const&)+9↓j ...
.text:0040F0B0
.text:0040F0B0 var_2C          = dword ptr -2Ch
.text:0040F0B0 var_28          = dword ptr -28h
.text:0040F0B0 var_24          = dword ptr -24h
.text:0040F0B0 arg_0           = dword ptr  4
.text:0040F0B0 arg_4           = dword ptr  8
.text:0040F0B0 arg_8           = dword ptr  0Ch
.text:0040F0B0
.text:0040F0B0                 push    ebp
.text:0040F0B1                 push    edi
.text:0040F0B2                 push    esi
.text:0040F0B3                 push    ebx
.text:0040F0B4                 sub     esp, 1Ch
.text:0040F0B7                 mov     ebx, [esp+2Ch+arg_0]
.text:0040F0BB                 mov     ebp, [esp+2Ch+arg_4]
.text:0040F0BF                 mov     eax, [esp+2Ch+arg_8]
.text:0040F0C3                 mov     [esp+2Ch+var_24], eax
.text:0040F0C7                 mov     [esp+2Ch+var_28], 0
.text:0040F0CF                 mov     [esp+2Ch+var_2C], ebx
.text:0040F0D2                 call    __ZNSs4_Rep9_S_createEjjRKSaIcE ; std::string::_Rep::_S_create(uint,uint,std::allocator<char> const&)
.text:0040F0D7                 mov     edx, eax
.text:0040F0D9                 test    ebx, ebx
.text:0040F0DB                 jnz     short loc_40F0F8
.text:0040F0DD
.text:0040F0DD loc_40F0DD:                             ; CODE XREF: std::string::_S_construct(uint,char,std::allocator<char> const&)+61↓j
.text:0040F0DD                 lea     ebp, [edx+0Ch]
.text:0040F0E0
.text:0040F0E0 loc_40F0E0:                             ; CODE XREF: std::string::_S_construct(uint,char,std::allocator<char> const&)+5A↓j
.text:0040F0E0                 mov     dword ptr [edx+8], 0
.text:0040F0E7                 mov     [edx], ebx
.text:0040F0E9                 mov     byte ptr [ebp+ebx+0], 0
.text:0040F0EE                 mov     eax, ebp
.text:0040F0F0                 add     esp, 1Ch
.text:0040F0F3                 pop     ebx
.text:0040F0F4                 pop     esi
.text:0040F0F5                 pop     edi
.text:0040F0F6                 pop     ebp
.text:0040F0F7                 retn
.text:0040F0F8 ; ---------------------------------------------------------------------------
.text:0040F0F8
.text:0040F0F8 loc_40F0F8:                             ; CODE XREF: std::string::_S_construct(uint,char,std::allocator<char> const&)+2B↑j
.text:0040F0F8                 cmp     ebx, 1
.text:0040F0FB                 jz      short loc_40F10C
.text:0040F0FD                 mov     esi, ebp
.text:0040F0FF                 lea     ebp, [eax+0Ch]
.text:0040F102                 mov     edi, ebp
.text:0040F104                 mov     ecx, ebx
.text:0040F106                 mov     eax, esi
.text:0040F108                 rep stosb
.text:0040F10A                 jmp     short loc_40F0E0
.text:0040F10C ; ---------------------------------------------------------------------------
.text:0040F10C
.text:0040F10C loc_40F10C:                             ; CODE XREF: std::string::_S_construct(uint,char,std::allocator<char> const&)+4B↑j
.text:0040F10C                 mov     eax, ebp
.text:0040F10E                 mov     [edx+0Ch], al
.text:0040F111                 jmp     short loc_40F0DD
.text:0040F111 __ZNSs12_S_constructEjcRKSaIcE endp
.text:0040F111
.text:0040F111 ; ---------------------------------------------------------------------------
.text:0040F113                 align 4
.text:0040F114
.text:0040F114 ; =============== S U B R O U T I N E =======================================
.text:0040F114
.text:0040F114
.text:0040F114 ; char * std::string::_S_construct<__gnu_cxx::__normal_iterator<char *, std::string>>(__gnu_cxx::__normal_iterator<char *, std::string>, __gnu_cxx::__normal_iterator<char *, std::string>, std::allocator<char> const&, std::forward_iterator_tag)
.text:0040F114                 public __ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag
.text:0040F114 __ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag proc near
.text:0040F114                                         ; CODE XREF: std::string::string<__gnu_cxx::__normal_iterator<char *,std::string>>(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>,std::allocator<char> const&)+22↓p
.text:0040F114                                         ; std::string::string<__gnu_cxx::__normal_iterator<char *,std::string>>(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>,std::allocator<char> const&)+22↓p
.text:0040F114
.text:0040F114 var_1C          = dword ptr -1Ch
.text:0040F114 var_18          = dword ptr -18h
.text:0040F114 var_14          = dword ptr -14h
.text:0040F114 arg_0           = dword ptr  4
.text:0040F114 arg_4           = dword ptr  8
.text:0040F114 arg_8           = dword ptr  0Ch
.text:0040F114
.text:0040F114                 push    edi
.text:0040F115                 push    esi
.text:0040F116                 push    ebx
.text:0040F117                 sub     esp, 10h
.text:0040F11A                 mov     esi, [esp+1Ch+arg_0]
.text:0040F11E                 mov     ebx, [esp+1Ch+arg_4]
.text:0040F122                 sub     ebx, esi
.text:0040F124                 mov     eax, [esp+1Ch+arg_8]
.text:0040F128                 mov     [esp+1Ch+var_14], eax
.text:0040F12C                 mov     [esp+1Ch+var_18], 0
.text:0040F134                 mov     [esp+1Ch+var_1C], ebx
.text:0040F137                 call    __ZNSs4_Rep9_S_createEjjRKSaIcE ; std::string::_Rep::_S_create(uint,uint,std::allocator<char> const&)
.text:0040F13C                 lea     edx, [eax+0Ch]
.text:0040F13F                 cmp     ebx, 1
.text:0040F142                 jz      short loc_40F160
.text:0040F144                 mov     edi, edx
.text:0040F146                 mov     ecx, ebx
.text:0040F148                 rep movsb
.text:0040F14A
.text:0040F14A loc_40F14A:                             ; CODE XREF: std::string::_S_construct<__gnu_cxx::__normal_iterator<char *,std::string>>(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>,std::allocator<char> const&,std::forward_iterator_tag)+51↓j
.text:0040F14A                 mov     dword ptr [eax+8], 0
.text:0040F151                 mov     [eax], ebx
.text:0040F153                 mov     byte ptr [edx+ebx], 0
.text:0040F157                 mov     eax, edx
.text:0040F159                 add     esp, 10h
.text:0040F15C                 pop     ebx
.text:0040F15D                 pop     esi
.text:0040F15E                 pop     edi
.text:0040F15F                 retn
.text:0040F160 ; ---------------------------------------------------------------------------
.text:0040F160
.text:0040F160 loc_40F160:                             ; CODE XREF: std::string::_S_construct<__gnu_cxx::__normal_iterator<char *,std::string>>(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>,std::allocator<char> const&,std::forward_iterator_tag)+2E↑j
.text:0040F160                 mov     cl, [esi]
.text:0040F162                 mov     [eax+0Ch], cl
.text:0040F165                 jmp     short loc_40F14A
.text:0040F165 __ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag endp
.text:0040F165
.text:0040F165 ; ---------------------------------------------------------------------------
.text:0040F167                 align 4
.text:0040F168
.text:0040F168 ; =============== S U B R O U T I N E =======================================
.text:0040F168
.text:0040F168
.text:0040F168 ; char * std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)
.text:0040F168                 public __ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag
.text:0040F168 __ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag proc near
.text:0040F168                                         ; CODE XREF: std::string::string(char const*,std::allocator<char> const&)+34↓p
.text:0040F168                                         ; std::string::string(char const*,uint,std::allocator<char> const&)+24↓p ...
.text:0040F168
.text:0040F168 var_1C          = dword ptr -1Ch
.text:0040F168 var_18          = dword ptr -18h
.text:0040F168 var_14          = dword ptr -14h
.text:0040F168 arg_0           = dword ptr  4
.text:0040F168 arg_4           = dword ptr  8
.text:0040F168 arg_8           = dword ptr  0Ch
.text:0040F168
.text:0040F168                 push    edi
.text:0040F169                 push    esi
.text:0040F16A                 push    ebx
.text:0040F16B                 sub     esp, 10h
.text:0040F16E                 mov     esi, [esp+1Ch+arg_0]
.text:0040F172                 test    esi, esi
.text:0040F174                 jz      short loc_40F1C0
.text:0040F176                 mov     ebx, [esp+1Ch+arg_4]
.text:0040F17A                 sub     ebx, esi
.text:0040F17C                 mov     eax, [esp+1Ch+arg_8]
.text:0040F180                 mov     [esp+1Ch+var_14], eax
.text:0040F184                 mov     [esp+1Ch+var_18], 0
.text:0040F18C                 mov     [esp+1Ch+var_1C], ebx
.text:0040F18F                 call    __ZNSs4_Rep9_S_createEjjRKSaIcE ; std::string::_Rep::_S_create(uint,uint,std::allocator<char> const&)
.text:0040F194                 mov     edx, eax
.text:0040F196                 lea     eax, [eax+0Ch]
.text:0040F199                 cmp     ebx, 1
.text:0040F19C                 jz      short loc_40F1B8
.text:0040F19E
.text:0040F19E loc_40F19E:                             ; CODE XREF: std::string::_S_construct<char const*>(char const*,char const*,std::allocator<char> const&,std::forward_iterator_tag)+8F↓j
.text:0040F19E                 mov     edi, eax
.text:0040F1A0                 mov     ecx, ebx
.text:0040F1A2                 rep movsb
.text:0040F1A4
.text:0040F1A4 loc_40F1A4:                             ; CODE XREF: std::string::_S_construct<char const*>(char const*,char const*,std::allocator<char> const&,std::forward_iterator_tag)+55↓j
.text:0040F1A4                 mov     dword ptr [edx+8], 0
.text:0040F1AB                 mov     [edx], ebx
.text:0040F1AD                 mov     byte ptr [eax+ebx], 0
.text:0040F1B1                 add     esp, 10h
.text:0040F1B4                 pop     ebx
.text:0040F1B5                 pop     esi
.text:0040F1B6                 pop     edi
.text:0040F1B7                 retn
.text:0040F1B8 ; ---------------------------------------------------------------------------
.text:0040F1B8
.text:0040F1B8 loc_40F1B8:                             ; CODE XREF: std::string::_S_construct<char const*>(char const*,char const*,std::allocator<char> const&,std::forward_iterator_tag)+34↑j
.text:0040F1B8                 mov     cl, [esi]
.text:0040F1BA                 mov     [edx+0Ch], cl
.text:0040F1BD                 jmp     short loc_40F1A4
.text:0040F1BD ; ---------------------------------------------------------------------------
.text:0040F1BF                 align 10h
.text:0040F1C0
.text:0040F1C0 loc_40F1C0:                             ; CODE XREF: std::string::_S_construct<char const*>(char const*,char const*,std::allocator<char> const&,std::forward_iterator_tag)+C↑j
.text:0040F1C0                 mov     eax, [esp+1Ch+arg_4]
.text:0040F1C4                 test    eax, eax
.text:0040F1C6                 jz      short loc_40F1D4
.text:0040F1C8                 mov     [esp+1Ch+var_1C], offset aBasicStringSCo ; "basic_string::_S_construct null not val"...
.text:0040F1CF                 call    __ZSt19__throw_logic_errorPKc ; std::__throw_logic_error(char const*)
.text:0040F1D4 ; ---------------------------------------------------------------------------
.text:0040F1D4
.text:0040F1D4 loc_40F1D4:                             ; CODE XREF: std::string::_S_construct<char const*>(char const*,char const*,std::allocator<char> const&,std::forward_iterator_tag)+5E↑j
.text:0040F1D4                 mov     ecx, [esp+1Ch+arg_8]
.text:0040F1D8                 mov     [esp+1Ch+var_14], ecx
.text:0040F1DC                 mov     [esp+1Ch+var_18], 0
.text:0040F1E4                 mov     [esp+1Ch+var_1C], 0
.text:0040F1EB                 call    __ZNSs4_Rep9_S_createEjjRKSaIcE ; std::string::_Rep::_S_create(uint,uint,std::allocator<char> const&)
.text:0040F1F0                 mov     edx, eax
.text:0040F1F2                 lea     eax, [eax+0Ch]
.text:0040F1F5                 xor     ebx, ebx
.text:0040F1F7                 jmp     short loc_40F19E
.text:0040F1F7 __ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag endp
.text:0040F1F7
.text:0040F1F7 ; ---------------------------------------------------------------------------
.text:0040F1F9                 align 4
.text:0040F1FC
.text:0040F1FC ; =============== S U B R O U T I N E =======================================
.text:0040F1FC
.text:0040F1FC
.text:0040F1FC ; char * std::string::_S_construct<char *>(char *, char *, std::allocator<char> const&, std::forward_iterator_tag)
.text:0040F1FC                 public __ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag
.text:0040F1FC __ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag proc near
.text:0040F1FC                                         ; CODE XREF: std::string::string(std::string const&,uint,uint)+41↓p
.text:0040F1FC                                         ; std::string::string(std::string const&,uint,uint,std::allocator<char> const&)+41↓p ...
.text:0040F1FC
.text:0040F1FC var_1C          = dword ptr -1Ch
.text:0040F1FC var_18          = dword ptr -18h
.text:0040F1FC var_14          = dword ptr -14h
.text:0040F1FC arg_0           = dword ptr  4
.text:0040F1FC arg_4           = dword ptr  8
.text:0040F1FC arg_8           = dword ptr  0Ch
.text:0040F1FC
.text:0040F1FC                 push    edi
.text:0040F1FD                 push    esi
.text:0040F1FE                 push    ebx
.text:0040F1FF                 sub     esp, 10h
.text:0040F202                 mov     esi, [esp+1Ch+arg_0]
.text:0040F206                 test    esi, esi
.text:0040F208                 jz      short loc_40F254
.text:0040F20A                 mov     ebx, [esp+1Ch+arg_4]
.text:0040F20E                 sub     ebx, esi
.text:0040F210                 mov     eax, [esp+1Ch+arg_8]
.text:0040F214                 mov     [esp+1Ch+var_14], eax
.text:0040F218                 mov     [esp+1Ch+var_18], 0
.text:0040F220                 mov     [esp+1Ch+var_1C], ebx
.text:0040F223                 call    __ZNSs4_Rep9_S_createEjjRKSaIcE ; std::string::_Rep::_S_create(uint,uint,std::allocator<char> const&)
.text:0040F228                 mov     edx, eax
.text:0040F22A                 lea     eax, [eax+0Ch]
.text:0040F22D                 cmp     ebx, 1
.text:0040F230                 jz      short loc_40F24C
.text:0040F232
.text:0040F232 loc_40F232:                             ; CODE XREF: std::string::_S_construct<char *>(char *,char *,std::allocator<char> const&,std::forward_iterator_tag)+8F↓j
.text:0040F232                 mov     edi, eax
.text:0040F234                 mov     ecx, ebx
.text:0040F236                 rep movsb
.text:0040F238
.text:0040F238 loc_40F238:                             ; CODE XREF: std::string::_S_construct<char *>(char *,char *,std::allocator<char> const&,std::forward_iterator_tag)+55↓j
.text:0040F238                 mov     dword ptr [edx+8], 0
.text:0040F23F                 mov     [edx], ebx
.text:0040F241                 mov     byte ptr [eax+ebx], 0
.text:0040F245                 add     esp, 10h
.text:0040F248                 pop     ebx
.text:0040F249                 pop     esi
.text:0040F24A                 pop     edi
.text:0040F24B                 retn
.text:0040F24C ; ---------------------------------------------------------------------------
.text:0040F24C
.text:0040F24C loc_40F24C:                             ; CODE XREF: std::string::_S_construct<char *>(char *,char *,std::allocator<char> const&,std::forward_iterator_tag)+34↑j
.text:0040F24C                 mov     cl, [esi]
.text:0040F24E                 mov     [edx+0Ch], cl
.text:0040F251                 jmp     short loc_40F238
.text:0040F251 ; ---------------------------------------------------------------------------
.text:0040F253                 align 4
.text:0040F254
.text:0040F254 loc_40F254:                             ; CODE XREF: std::string::_S_construct<char *>(char *,char *,std::allocator<char> const&,std::forward_iterator_tag)+C↑j
.text:0040F254                 mov     eax, [esp+1Ch+arg_4]
.text:0040F258                 test    eax, eax
.text:0040F25A                 jz      short loc_40F268
.text:0040F25C                 mov     [esp+1Ch+var_1C], offset aBasicStringSCo ; "basic_string::_S_construct null not val"...
.text:0040F263                 call    __ZSt19__throw_logic_errorPKc ; std::__throw_logic_error(char const*)
.text:0040F268 ; ---------------------------------------------------------------------------
.text:0040F268
.text:0040F268 loc_40F268:                             ; CODE XREF: std::string::_S_construct<char *>(char *,char *,std::allocator<char> const&,std::forward_iterator_tag)+5E↑j
.text:0040F268                 mov     ecx, [esp+1Ch+arg_8]
.text:0040F26C                 mov     [esp+1Ch+var_14], ecx
.text:0040F270                 mov     [esp+1Ch+var_18], 0
.text:0040F278                 mov     [esp+1Ch+var_1C], 0
.text:0040F27F                 call    __ZNSs4_Rep9_S_createEjjRKSaIcE ; std::string::_Rep::_S_create(uint,uint,std::allocator<char> const&)
.text:0040F284                 mov     edx, eax
.text:0040F286                 lea     eax, [eax+0Ch]
.text:0040F289                 xor     ebx, ebx
.text:0040F28B                 jmp     short loc_40F232
.text:0040F28B __ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag endp
.text:0040F28B
.text:0040F28B ; ---------------------------------------------------------------------------
.text:0040F28D                 align 10h
.text:0040F290
.text:0040F290 ; =============== S U B R O U T I N E =======================================
.text:0040F290
.text:0040F290
.text:0040F290 ; _DWORD std::string::_S_empty_rep(std::string *__hidden this)
.text:0040F290                 public __ZNSs12_S_empty_repEv
.text:0040F290 __ZNSs12_S_empty_repEv proc near
.text:0040F290
.text:0040F290 this            = dword ptr  4
.text:0040F290
.text:0040F290                 mov     eax, offset __ZNSs4_Rep20_S_empty_rep_storageE ; std::string::_Rep::_S_empty_rep_storage
.text:0040F295                 retn
.text:0040F295 __ZNSs12_S_empty_repEv endp
.text:0040F295
.text:0040F295 ; ---------------------------------------------------------------------------
.text:0040F296                 align 4
.text:0040F298
.text:0040F298 ; =============== S U B R O U T I N E =======================================
.text:0040F298
.text:0040F298
.text:0040F298 ; std::string::_S_copy_chars(char *, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)
.text:0040F298                 public __ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_
.text:0040F298 __ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_ proc near
.text:0040F298
.text:0040F298 arg_0           = dword ptr  4
.text:0040F298 arg_4           = dword ptr  8
.text:0040F298 arg_8           = dword ptr  0Ch
.text:0040F298
.text:0040F298                 push    edi
.text:0040F299                 push    esi
.text:0040F29A                 push    eax
.text:0040F29B                 mov     esi, [esp+0Ch+arg_4]
.text:0040F29F                 mov     ecx, [esp+0Ch+arg_8]
.text:0040F2A3                 sub     ecx, esi
.text:0040F2A5                 cmp     ecx, 1
.text:0040F2A8                 jz      short loc_40F2B4
.text:0040F2AA                 mov     edi, [esp+0Ch+arg_0]
.text:0040F2AE                 rep movsb
.text:0040F2B0                 pop     edi
.text:0040F2B1                 pop     esi
.text:0040F2B2                 pop     edi
.text:0040F2B3                 retn
.text:0040F2B4 ; ---------------------------------------------------------------------------
.text:0040F2B4
.text:0040F2B4 loc_40F2B4:                             ; CODE XREF: std::string::_S_copy_chars(char *,__gnu_cxx::__normal_iterator<char const*,std::string>,__gnu_cxx::__normal_iterator<char const*,std::string>)+10↑j
.text:0040F2B4                 mov     al, [esi]
.text:0040F2B6                 mov     edx, [esp+0Ch+arg_0]
.text:0040F2BA                 mov     [edx], al
.text:0040F2BC                 pop     edi
.text:0040F2BD                 pop     esi
.text:0040F2BE                 pop     edi
.text:0040F2BF                 retn
.text:0040F2BF __ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_ endp
.text:0040F2BF
.text:0040F2C0
.text:0040F2C0 ; =============== S U B R O U T I N E =======================================
.text:0040F2C0
.text:0040F2C0
.text:0040F2C0 ; std::string::_S_copy_chars(char *, __gnu_cxx::__normal_iterator<char *, std::string>, __gnu_cxx::__normal_iterator<char *, std::string>)
.text:0040F2C0                 public __ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_
.text:0040F2C0 __ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_ proc near
.text:0040F2C0
.text:0040F2C0 arg_0           = dword ptr  4
.text:0040F2C0 arg_4           = dword ptr  8
.text:0040F2C0 arg_8           = dword ptr  0Ch
.text:0040F2C0
.text:0040F2C0                 push    edi
.text:0040F2C1                 push    esi
.text:0040F2C2                 push    esi
.text:0040F2C3                 mov     esi, [esp+0Ch+arg_4]
.text:0040F2C7                 mov     ecx, [esp+0Ch+arg_8]
.text:0040F2CB                 sub     ecx, esi
.text:0040F2CD                 cmp     ecx, 1
.text:0040F2D0                 jz      short loc_40F2DC
.text:0040F2D2                 mov     edi, [esp+0Ch+arg_0]
.text:0040F2D6                 rep movsb
.text:0040F2D8                 pop     ecx
.text:0040F2D9                 pop     esi
.text:0040F2DA                 pop     edi
.text:0040F2DB                 retn
.text:0040F2DC ; ---------------------------------------------------------------------------
.text:0040F2DC
.text:0040F2DC loc_40F2DC:                             ; CODE XREF: std::string::_S_copy_chars(char *,__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>)+10↑j
.text:0040F2DC                 mov     al, [esi]
.text:0040F2DE                 mov     edx, [esp+0Ch+arg_0]
.text:0040F2E2                 mov     [edx], al
.text:0040F2E4                 pop     ecx
.text:0040F2E5                 pop     esi
.text:0040F2E6                 pop     edi
.text:0040F2E7                 retn
.text:0040F2E7 __ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_ endp
.text:0040F2E7
.text:0040F2E8
.text:0040F2E8 ; =============== S U B R O U T I N E =======================================
.text:0040F2E8
.text:0040F2E8
.text:0040F2E8 ; _DWORD __cdecl std::string::_S_copy_chars(std::string *__hidden this, char *, const char *, const char *)
.text:0040F2E8                 public __ZNSs13_S_copy_charsEPcPKcS1_
.text:0040F2E8 __ZNSs13_S_copy_charsEPcPKcS1_ proc near
.text:0040F2E8
.text:0040F2E8 this            = dword ptr  4
.text:0040F2E8 arg_4           = dword ptr  8
.text:0040F2E8 arg_8           = dword ptr  0Ch
.text:0040F2E8
.text:0040F2E8                 push    edi
.text:0040F2E9                 push    esi
.text:0040F2EA                 push    eax
.text:0040F2EB                 mov     esi, [esp+0Ch+arg_4]
.text:0040F2EF                 mov     ecx, [esp+0Ch+arg_8]
.text:0040F2F3                 sub     ecx, esi
.text:0040F2F5                 cmp     ecx, 1
.text:0040F2F8                 jz      short loc_40F304
.text:0040F2FA                 mov     edi, [esp+0Ch+this]
.text:0040F2FE                 rep movsb
.text:0040F300                 pop     eax
.text:0040F301                 pop     esi
.text:0040F302                 pop     edi
.text:0040F303                 retn
.text:0040F304 ; ---------------------------------------------------------------------------
.text:0040F304
.text:0040F304 loc_40F304:                             ; CODE XREF: std::string::_S_copy_chars(char *,char const*,char const*)+10↑j
.text:0040F304                 mov     al, [esi]
.text:0040F306                 mov     edx, [esp+0Ch+this]
.text:0040F30A                 mov     [edx], al
.text:0040F30C                 pop     eax
.text:0040F30D                 pop     esi
.text:0040F30E                 pop     edi
.text:0040F30F                 retn
.text:0040F30F __ZNSs13_S_copy_charsEPcPKcS1_ endp
.text:0040F30F
.text:0040F310
.text:0040F310 ; =============== S U B R O U T I N E =======================================
.text:0040F310
.text:0040F310
.text:0040F310 ; _DWORD __cdecl std::string::_S_copy_chars(std::string *__hidden this, char *, char *, char *)
.text:0040F310                 public __ZNSs13_S_copy_charsEPcS_S_
.text:0040F310 __ZNSs13_S_copy_charsEPcS_S_ proc near
.text:0040F310
.text:0040F310 this            = dword ptr  4
.text:0040F310 arg_4           = dword ptr  8
.text:0040F310 arg_8           = dword ptr  0Ch
.text:0040F310
.text:0040F310                 push    edi
.text:0040F311                 push    esi
.text:0040F312                 push    eax
.text:0040F313                 mov     esi, [esp+0Ch+arg_4]
.text:0040F317                 mov     ecx, [esp+0Ch+arg_8]
.text:0040F31B                 sub     ecx, esi
.text:0040F31D                 cmp     ecx, 1
.text:0040F320                 jz      short loc_40F32C
.text:0040F322                 mov     edi, [esp+0Ch+this]
.text:0040F326                 rep movsb
.text:0040F328                 pop     eax
.text:0040F329                 pop     esi
.text:0040F32A                 pop     edi
.text:0040F32B                 retn
.text:0040F32C ; ---------------------------------------------------------------------------
.text:0040F32C
.text:0040F32C loc_40F32C:                             ; CODE XREF: std::string::_S_copy_chars(char *,char *,char *)+10↑j
.text:0040F32C                 mov     al, [esi]
.text:0040F32E                 mov     edx, [esp+0Ch+this]
.text:0040F332                 mov     [edx], al
.text:0040F334                 pop     eax
.text:0040F335                 pop     esi
.text:0040F336                 pop     edi
.text:0040F337                 retn
.text:0040F337 __ZNSs13_S_copy_charsEPcS_S_ endp
.text:0040F337
.text:0040F338
.text:0040F338 ; =============== S U B R O U T I N E =======================================
.text:0040F338
.text:0040F338
.text:0040F338 ; _DWORD std::string::shrink_to_fit(std::string *__hidden this)
.text:0040F338                 public __ZNSs13shrink_to_fitEv
.text:0040F338 __ZNSs13shrink_to_fitEv proc near
.text:0040F338
.text:0040F338 lpfctx          = dword ptr -6Ch
.text:0040F338 var_58          = dword ptr -58h
.text:0040F338 var_54          = dword ptr -54h
.text:0040F338 fctx            = SjLj_Function_Context ptr -50h
.text:0040F338 var_2C          = dword ptr -2Ch
.text:0040F338 var_28          = dword ptr -28h
.text:0040F338 var_1C          = byte ptr -1Ch
.text:0040F338 this            = dword ptr  4
.text:0040F338
.text:0040F338                 push    ebp
.text:0040F339                 push    edi
.text:0040F33A                 push    esi
.text:0040F33B                 push    ebx
.text:0040F33C                 sub     esp, 5Ch
.text:0040F33F                 mov     [esp+6Ch+var_54], ecx
.text:0040F343                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:0040F34B                 mov     [esp+6Ch+fctx.lsda], offset dword_4123BC
.text:0040F353                 lea     eax, [esp+6Ch+var_1C]
.text:0040F357                 mov     [esp+6Ch+fctx.jbuf], eax
.text:0040F35B                 mov     [esp+6Ch+var_2C], offset loc_40F3B7
.text:0040F363                 mov     [esp+6Ch+var_28], esp
.text:0040F367                 lea     edx, [esp+6Ch+fctx]
.text:0040F36B                 mov     [esp+6Ch+var_58], edx
.text:0040F36F                 mov     [esp+6Ch+lpfctx], edx ; lpfctx
.text:0040F372                 call    __Unwind_SjLj_Register
.text:0040F377 ; __unwind { // ___gxx_personality_sj0
.text:0040F377 ;   try {
.text:0040F377                 mov     edx, [esp+6Ch+var_54]
.text:0040F37B                 mov     eax, [edx]
.text:0040F37D                 mov     edx, [eax-0Ch]
.text:0040F380                 cmp     [eax-8], edx
.text:0040F383                 ja      short loc_40F39C
.text:0040F385
.text:0040F385 loc_40F385:                             ; CODE XREF: std::string::shrink_to_fit(void)+7D↓j
.text:0040F385                                         ; std::string::shrink_to_fit(void)+A0↓j
.text:0040F385                 mov     edx, [esp+6Ch+var_58]
.text:0040F389                 mov     [esp+6Ch+lpfctx], edx ; lpfctx
.text:0040F38C                 call    __Unwind_SjLj_Unregister
.text:0040F391                 add     esp, 5Ch
.text:0040F394                 pop     ebx
.text:0040F395                 pop     esi
.text:0040F396                 pop     edi
.text:0040F397                 pop     ebp
.text:0040F398                 retn
.text:0040F398 ; ---------------------------------------------------------------------------
.text:0040F399                 align 4
.text:0040F39C
.text:0040F39C loc_40F39C:                             ; CODE XREF: std::string::shrink_to_fit(void)+4B↑j
.text:0040F39C                 mov     [esp+6Ch+lpfctx], 0 ; this
.text:0040F3A3                 mov     [esp+6Ch+fctx.call_site], 1
.text:0040F3AB                 mov     ecx, [esp+6Ch+var_54]
.text:0040F3AF                 call    __ZNSs7reserveEj ; std::string::reserve(uint)
.text:0040F3B4                 push    eax
.text:0040F3B5                 jmp     short loc_40F385
.text:0040F3B7 ; ---------------------------------------------------------------------------
.text:0040F3B7
.text:0040F3B7 loc_40F3B7:                             ; DATA XREF: std::string::shrink_to_fit(void)+23↑o
.text:0040F3B7 ;   catch(...) // owned by 40F377
.text:0040F3B7                 mov     eax, [esp+6Ch+fctx.data]
.text:0040F3BB                 mov     [esp+6Ch+lpfctx], eax ; void *
.text:0040F3BE                 call    ___cxa_begin_catch
.text:0040F3C3                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:0040F3CB                 call    ___cxa_end_catch
.text:0040F3D0                 lea     eax, [esp+6Ch+fctx]
.text:0040F3D4                 mov     [esp+6Ch+var_58], eax
.text:0040F3D8                 jmp     short loc_40F385
.text:0040F3D8 ;   } // starts at 40F377
.text:0040F3D8 ; } // starts at 40F377
.text:0040F3D8 __ZNSs13shrink_to_fitEv endp
.text:0040F3D8
.text:0040F3D8 ; ---------------------------------------------------------------------------
.text:0040F3DA                 align 4
.text:0040F3DC
.text:0040F3DC ; =============== S U B R O U T I N E =======================================
.text:0040F3DC
.text:0040F3DC
.text:0040F3DC ; _DWORD __stdcall std::string::_M_replace_aux(std::string *__hidden this, unsigned int, unsigned int, unsigned int, char)
.text:0040F3DC                 public __ZNSs14_M_replace_auxEjjjc
.text:0040F3DC __ZNSs14_M_replace_auxEjjjc proc near   ; CODE XREF: std::string::assign(uint,char)+24↓p
.text:0040F3DC                                         ; std::string::insert(__gnu_cxx::__normal_iterator<char *,std::string>,char)+29↓p ...
.text:0040F3DC
.text:0040F3DC var_2C          = dword ptr -2Ch
.text:0040F3DC var_28          = dword ptr -28h
.text:0040F3DC var_24          = dword ptr -24h
.text:0040F3DC this            = dword ptr  4
.text:0040F3DC arg_4           = dword ptr  8
.text:0040F3DC arg_8           = dword ptr  0Ch
.text:0040F3DC arg_C           = dword ptr  10h
.text:0040F3DC
.text:0040F3DC                 push    ebp
.text:0040F3DD                 push    edi
.text:0040F3DE                 push    esi
.text:0040F3DF                 push    ebx
.text:0040F3E0                 sub     esp, 1Ch
.text:0040F3E3                 mov     esi, ecx
.text:0040F3E5                 mov     eax, [esp+2Ch+arg_4]
.text:0040F3E9                 mov     ebx, [esp+2Ch+arg_8]
.text:0040F3ED                 mov     edi, [esp+2Ch+arg_C]
.text:0040F3F1                 mov     edx, [ecx]
.text:0040F3F3                 mov     ecx, eax
.text:0040F3F5                 sub     ecx, [edx-0Ch]
.text:0040F3F8                 mov     edx, ecx
.text:0040F3FA                 add     edx, 3FFFFFFCh
.text:0040F400                 cmp     ebx, edx
.text:0040F402                 ja      short loc_40F464
.text:0040F404                 mov     [esp+2Ch+var_24], ebx ; unsigned int
.text:0040F408                 mov     [esp+2Ch+var_28], eax ; unsigned int
.text:0040F40C                 mov     eax, [esp+2Ch+this]
.text:0040F410                 mov     [esp+2Ch+var_2C], eax ; this
.text:0040F413                 mov     ecx, esi
.text:0040F415                 call    __ZNSs9_M_mutateEjjj ; std::string::_M_mutate(uint,uint,uint)
.text:0040F41A                 sub     esp, 0Ch
.text:0040F41D                 test    ebx, ebx
.text:0040F41F                 jnz     short loc_40F430
.text:0040F421                 mov     eax, esi
.text:0040F423                 add     esp, 1Ch
.text:0040F426                 pop     ebx
.text:0040F427                 pop     esi
.text:0040F428                 pop     edi
.text:0040F429                 pop     ebp
.text:0040F42A                 retn    10h
.text:0040F42A ; ---------------------------------------------------------------------------
.text:0040F42D                 align 10h
.text:0040F430
.text:0040F430 loc_40F430:                             ; CODE XREF: std::string::_M_replace_aux(uint,uint,uint,char)+43↑j
.text:0040F430                 mov     edx, [esp+2Ch+this]
.text:0040F434                 add     edx, [esi]
.text:0040F436                 cmp     ebx, 1
.text:0040F439                 jz      short loc_40F454
.text:0040F43B                 mov     ebp, edi
.text:0040F43D                 mov     edi, edx
.text:0040F43F                 mov     ecx, ebx
.text:0040F441                 mov     eax, ebp
.text:0040F443                 rep stosb
.text:0040F445                 mov     eax, esi
.text:0040F447                 add     esp, 1Ch
.text:0040F44A                 pop     ebx
.text:0040F44B                 pop     esi
.text:0040F44C                 pop     edi
.text:0040F44D                 pop     ebp
.text:0040F44E                 retn    10h
.text:0040F44E ; ---------------------------------------------------------------------------
.text:0040F451                 align 4
.text:0040F454
.text:0040F454 loc_40F454:                             ; CODE XREF: std::string::_M_replace_aux(uint,uint,uint,char)+5D↑j
.text:0040F454                 mov     ecx, edi
.text:0040F456                 mov     [edx], cl
.text:0040F458                 mov     eax, esi
.text:0040F45A                 add     esp, 1Ch
.text:0040F45D                 pop     ebx
.text:0040F45E                 pop     esi
.text:0040F45F                 pop     edi
.text:0040F460                 pop     ebp
.text:0040F461                 retn    10h
.text:0040F464 ; ---------------------------------------------------------------------------
.text:0040F464
.text:0040F464 loc_40F464:                             ; CODE XREF: std::string::_M_replace_aux(uint,uint,uint,char)+26↑j
.text:0040F464                 mov     [esp+2Ch+var_2C], offset aBasicStringMRe ; "basic_string::_M_replace_aux"
.text:0040F46B                 call    __ZSt20__throw_length_errorPKc ; std::__throw_length_error(char const*)
.text:0040F46B __ZNSs14_M_replace_auxEjjjc endp
.text:0040F46B
.text:0040F470
.text:0040F470 ; =============== S U B R O U T I N E =======================================
.text:0040F470
.text:0040F470
.text:0040F470 ; _DWORD __stdcall std::string::_M_replace_safe(std::string *__hidden this, unsigned int, unsigned int, const char *, unsigned int)
.text:0040F470                 public __ZNSs15_M_replace_safeEjjPKcj
.text:0040F470 __ZNSs15_M_replace_safeEjjPKcj proc near
.text:0040F470                                         ; CODE XREF: std::string::assign(char const*,uint)+3B↓p
.text:0040F470                                         ; std::string::insert(uint,char const*,uint)+4A↓p ...
.text:0040F470
.text:0040F470 var_2C          = dword ptr -2Ch
.text:0040F470 var_28          = dword ptr -28h
.text:0040F470 var_24          = dword ptr -24h
.text:0040F470 this            = dword ptr  4
.text:0040F470 arg_4           = dword ptr  8
.text:0040F470 arg_8           = dword ptr  0Ch
.text:0040F470 arg_C           = dword ptr  10h
.text:0040F470
.text:0040F470                 push    ebp
.text:0040F471                 push    edi
.text:0040F472                 push    esi
.text:0040F473                 push    ebx
.text:0040F474                 sub     esp, 1Ch
.text:0040F477                 mov     ebp, ecx
.text:0040F479                 mov     edi, [esp+2Ch+this]
.text:0040F47D                 mov     ebx, [esp+2Ch+arg_C]
.text:0040F481                 mov     [esp+2Ch+var_24], ebx ; unsigned int
.text:0040F485                 mov     eax, [esp+2Ch+arg_4]
.text:0040F489                 mov     [esp+2Ch+var_28], eax ; unsigned int
.text:0040F48D                 mov     [esp+2Ch+var_2C], edi ; this
.text:0040F490                 call    __ZNSs9_M_mutateEjjj ; std::string::_M_mutate(uint,uint,uint)
.text:0040F495                 sub     esp, 0Ch
.text:0040F498                 test    ebx, ebx
.text:0040F49A                 jnz     short loc_40F4A8
.text:0040F49C                 mov     eax, ebp
.text:0040F49E                 add     esp, 1Ch
.text:0040F4A1                 pop     ebx
.text:0040F4A2                 pop     esi
.text:0040F4A3                 pop     edi
.text:0040F4A4                 pop     ebp
.text:0040F4A5                 retn    10h
.text:0040F4A8 ; ---------------------------------------------------------------------------
.text:0040F4A8
.text:0040F4A8 loc_40F4A8:                             ; CODE XREF: std::string::_M_replace_safe(uint,uint,char const*,uint)+2A↑j
.text:0040F4A8                 mov     eax, [ebp+0]
.text:0040F4AB                 add     eax, edi
.text:0040F4AD                 cmp     ebx, 1
.text:0040F4B0                 jz      short loc_40F4C8
.text:0040F4B2                 mov     edi, eax
.text:0040F4B4                 mov     esi, [esp+2Ch+arg_8]
.text:0040F4B8                 mov     ecx, ebx
.text:0040F4BA                 rep movsb
.text:0040F4BC                 mov     eax, ebp
.text:0040F4BE                 add     esp, 1Ch
.text:0040F4C1                 pop     ebx
.text:0040F4C2                 pop     esi
.text:0040F4C3                 pop     edi
.text:0040F4C4                 pop     ebp
.text:0040F4C5                 retn    10h
.text:0040F4C8 ; ---------------------------------------------------------------------------
.text:0040F4C8
.text:0040F4C8 loc_40F4C8:                             ; CODE XREF: std::string::_M_replace_safe(uint,uint,char const*,uint)+40↑j
.text:0040F4C8                 mov     edx, [esp+2Ch+arg_8]
.text:0040F4CC                 mov     dl, [edx]
.text:0040F4CE                 mov     [eax], dl
.text:0040F4D0                 mov     eax, ebp
.text:0040F4D2                 add     esp, 1Ch
.text:0040F4D5                 pop     ebx
.text:0040F4D6                 pop     esi
.text:0040F4D7                 pop     edi
.text:0040F4D8                 pop     ebp
.text:0040F4D9                 retn    10h
.text:0040F4D9 __ZNSs15_M_replace_safeEjjPKcj endp
.text:0040F4D9
.text:0040F4DC
.text:0040F4DC ; =============== S U B R O U T I N E =======================================
.text:0040F4DC
.text:0040F4DC
.text:0040F4DC ; std::string::_S_construct_aux_2(unsigned int, char, std::allocator<char> const&)
.text:0040F4DC                 public __ZNSs18_S_construct_aux_2EjcRKSaIcE
.text:0040F4DC __ZNSs18_S_construct_aux_2EjcRKSaIcE proc near
.text:0040F4DC
.text:0040F4DC arg_4           = dword ptr  8
.text:0040F4DC
.text:0040F4DC                 movsx   eax, byte ptr [esp+arg_4]
.text:0040F4E1                 mov     [esp+arg_4], eax
.text:0040F4E5                 jmp     __ZNSs12_S_constructEjcRKSaIcE ; std::string::_S_construct(uint,char,std::allocator<char> const&)
.text:0040F4E5 __ZNSs18_S_construct_aux_2EjcRKSaIcE endp
.text:0040F4E5
.text:0040F4E5 ; ---------------------------------------------------------------------------
.text:0040F4EA                 align 4
.text:0040F4EC
.text:0040F4EC ; =============== S U B R O U T I N E =======================================
.text:0040F4EC
.text:0040F4EC
.text:0040F4EC ; _DWORD __stdcall std::string::at(std::string *__hidden this, unsigned int)
.text:0040F4EC                 public __ZNSs2atEj
.text:0040F4EC __ZNSs2atEj     proc near
.text:0040F4EC
.text:0040F4EC var_1C          = dword ptr -1Ch
.text:0040F4EC this            = dword ptr  4
.text:0040F4EC
.text:0040F4EC                 push    esi
.text:0040F4ED                 push    ebx
.text:0040F4EE                 sub     esp, 14h
.text:0040F4F1                 mov     ebx, ecx
.text:0040F4F3                 mov     esi, [esp+1Ch+this]
.text:0040F4F7                 mov     eax, [ecx]
.text:0040F4F9                 cmp     esi, [eax-0Ch]
.text:0040F4FC                 jnb     short loc_40F516
.text:0040F4FE                 mov     edx, [eax-4]
.text:0040F501                 test    edx, edx
.text:0040F503                 js      short loc_40F50C
.text:0040F505                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:0040F50A                 mov     eax, [ebx]
.text:0040F50C
.text:0040F50C loc_40F50C:                             ; CODE XREF: std::string::at(uint)+17↑j
.text:0040F50C                 add     eax, esi
.text:0040F50E                 add     esp, 14h
.text:0040F511                 pop     ebx
.text:0040F512                 pop     esi
.text:0040F513                 retn    4
.text:0040F516 ; ---------------------------------------------------------------------------
.text:0040F516
.text:0040F516 loc_40F516:                             ; CODE XREF: std::string::at(uint)+10↑j
.text:0040F516                 mov     [esp+1Ch+var_1C], offset aBasicStringAt ; "basic_string::at"
.text:0040F51D                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:0040F51D __ZNSs2atEj     endp
.text:0040F51D
.text:0040F51D ; ---------------------------------------------------------------------------
.text:0040F522                 align 4
.text:0040F524
.text:0040F524 ; =============== S U B R O U T I N E =======================================
.text:0040F524
.text:0040F524
.text:0040F524 ; _DWORD std::string::end(std::string *__hidden this)
.text:0040F524                 public __ZNSs3endEv
.text:0040F524 __ZNSs3endEv    proc near
.text:0040F524
.text:0040F524 lpfctx          = dword ptr -5Ch
.text:0040F524 fctx            = SjLj_Function_Context ptr -40h
.text:0040F524 this            = dword ptr  4
.text:0040F524
.text:0040F524                 push    esi
.text:0040F525                 push    ebx
.text:0040F526                 sub     esp, 54h
.text:0040F529                 mov     ebx, ecx
.text:0040F52B                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:0040F533                 mov     [esp+5Ch+fctx.lsda], offset dword_4123B4
.text:0040F53B                 lea     esi, [esp+5Ch+fctx]
.text:0040F53F                 mov     [esp+5Ch+lpfctx], esi ; this
.text:0040F542                 call    __Unwind_SjLj_Register
.text:0040F547                 mov     eax, [ebx]
.text:0040F549                 mov     ecx, [eax-4]
.text:0040F54C                 test    ecx, ecx
.text:0040F54E                 js      short loc_40F561
.text:0040F550                 mov     [esp+5Ch+fctx.call_site], 0
.text:0040F558                 mov     ecx, ebx
.text:0040F55A                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:0040F55F                 mov     eax, [ebx]
.text:0040F561
.text:0040F561 loc_40F561:                             ; CODE XREF: std::string::end(void)+2A↑j
.text:0040F561                 mov     ebx, [eax-0Ch]
.text:0040F564                 add     ebx, eax
.text:0040F566                 mov     [esp+5Ch+lpfctx], esi ; lpfctx
.text:0040F569                 call    __Unwind_SjLj_Unregister
.text:0040F56E                 mov     eax, ebx
.text:0040F570                 add     esp, 54h
.text:0040F573                 pop     ebx
.text:0040F574                 pop     esi
.text:0040F575                 retn
.text:0040F575 __ZNSs3endEv    endp
.text:0040F575
.text:0040F575 ; ---------------------------------------------------------------------------
.text:0040F576                 align 4
.text:0040F578
.text:0040F578 ; =============== S U B R O U T I N E =======================================
.text:0040F578
.text:0040F578
.text:0040F578 ; int __userpurge std::string::_Rep::_M_destroy@<eax>(void *@<ecx>, int)
.text:0040F578                 public __ZNSs4_Rep10_M_destroyERKSaIcE
.text:0040F578 __ZNSs4_Rep10_M_destroyERKSaIcE proc near
.text:0040F578                                         ; CODE XREF: std::__throw_system_error(int)+109↑p
.text:0040F578                                         ; std::__throw_future_error(int)+110↑p ...
.text:0040F578
.text:0040F578 var_1C          = dword ptr -1Ch
.text:0040F578
.text:0040F578                 sub     esp, 1Ch
.text:0040F57B                 mov     [esp+1Ch+var_1C], ecx ; void *
.text:0040F57E                 call    __ZdlPv         ; operator delete(void *)
.text:0040F583                 add     esp, 1Ch
.text:0040F586                 retn    4
.text:0040F586 __ZNSs4_Rep10_M_destroyERKSaIcE endp
.text:0040F586
.text:0040F586 ; ---------------------------------------------------------------------------
.text:0040F589                 align 4
.text:0040F58C
.text:0040F58C ; =============== S U B R O U T I N E =======================================
.text:0040F58C
.text:0040F58C
.text:0040F58C ; int __userpurge std::string::_Rep::_M_dispose@<eax>(void *@<ecx>, int)
.text:0040F58C                 public __ZNSs4_Rep10_M_disposeERKSaIcE
.text:0040F58C __ZNSs4_Rep10_M_disposeERKSaIcE proc near
.text:0040F58C
.text:0040F58C var_2C          = dword ptr -2Ch
.text:0040F58C var_28          = dword ptr -28h
.text:0040F58C var_10          = dword ptr -10h
.text:0040F58C
.text:0040F58C                 sub     esp, 2Ch
.text:0040F58F                 mov     eax, ds:__CRT_MT
.text:0040F594                 test    eax, eax
.text:0040F596                 jnz     short loc_40F5AC
.text:0040F598                 mov     eax, [ecx+8]
.text:0040F59B                 lea     edx, [eax-1]
.text:0040F59E                 mov     [ecx+8], edx
.text:0040F5A1                 test    eax, eax
.text:0040F5A3                 jle     short loc_40F5CB
.text:0040F5A5
.text:0040F5A5 loc_40F5A5:                             ; CODE XREF: std::string::_Rep::_M_dispose(std::allocator<char> const&)+3D↓j
.text:0040F5A5                 add     esp, 2Ch
.text:0040F5A8                 retn    4
.text:0040F5A8 ; ---------------------------------------------------------------------------
.text:0040F5AB                 align 4
.text:0040F5AC
.text:0040F5AC loc_40F5AC:                             ; CODE XREF: std::string::_Rep::_M_dispose(std::allocator<char> const&)+A↑j
.text:0040F5AC                 mov     [esp+2Ch+var_28], 0FFFFFFFFh ; int
.text:0040F5B4                 lea     eax, [ecx+8]
.text:0040F5B7                 mov     [esp+2Ch+var_2C], eax ; volatile int *
.text:0040F5BA                 mov     [esp+2Ch+var_10], ecx
.text:0040F5BE                 call    __ZN9__gnu_cxx18__exchange_and_addEPVii ; __gnu_cxx::__exchange_and_add(int volatile*,int)
.text:0040F5C3                 mov     ecx, [esp+2Ch+var_10]
.text:0040F5C7                 test    eax, eax
.text:0040F5C9                 jg      short loc_40F5A5
.text:0040F5CB
.text:0040F5CB loc_40F5CB:                             ; CODE XREF: std::string::_Rep::_M_dispose(std::allocator<char> const&)+17↑j
.text:0040F5CB                 mov     [esp+2Ch+var_2C], ecx ; void *
.text:0040F5CE                 call    __ZdlPv         ; operator delete(void *)
.text:0040F5D3                 add     esp, 2Ch
.text:0040F5D6                 retn    4
.text:0040F5D6 __ZNSs4_Rep10_M_disposeERKSaIcE endp
.text:0040F5D6
.text:0040F5D6 ; ---------------------------------------------------------------------------
.text:0040F5D9                 align 4
.text:0040F5DC
.text:0040F5DC ; =============== S U B R O U T I N E =======================================
.text:0040F5DC
.text:0040F5DC
.text:0040F5DC ; _DWORD std::string::_Rep::_M_refcopy(std::string::_Rep *__hidden this)
.text:0040F5DC                 public __ZNSs4_Rep10_M_refcopyEv
.text:0040F5DC __ZNSs4_Rep10_M_refcopyEv proc near
.text:0040F5DC
.text:0040F5DC var_2C          = dword ptr -2Ch
.text:0040F5DC var_28          = dword ptr -28h
.text:0040F5DC var_10          = dword ptr -10h
.text:0040F5DC this            = dword ptr  4
.text:0040F5DC
.text:0040F5DC                 mov     eax, ds:__CRT_MT
.text:0040F5E1                 test    eax, eax
.text:0040F5E3                 jnz     short loc_40F5EC
.text:0040F5E5                 inc     dword ptr [ecx+8]
.text:0040F5E8                 lea     eax, [ecx+0Ch]
.text:0040F5EB                 retn
.text:0040F5EC ; ---------------------------------------------------------------------------
.text:0040F5EC
.text:0040F5EC loc_40F5EC:                             ; CODE XREF: std::string::_Rep::_M_refcopy(void)+7↑j
.text:0040F5EC                 sub     esp, 2Ch
.text:0040F5EF                 mov     [esp+2Ch+var_28], 1 ; int
.text:0040F5F7                 lea     eax, [ecx+8]
.text:0040F5FA                 mov     [esp+2Ch+var_2C], eax ; volatile int *
.text:0040F5FD                 mov     [esp+2Ch+var_10], ecx
.text:0040F601                 call    __ZN9__gnu_cxx12__atomic_addEPVii ; __gnu_cxx::__atomic_add(int volatile*,int)
.text:0040F606                 mov     ecx, [esp+2Ch+var_10]
.text:0040F60A                 lea     eax, [ecx+0Ch]
.text:0040F60D                 add     esp, 2Ch
.text:0040F610                 retn
.text:0040F610 __ZNSs4_Rep10_M_refcopyEv endp
.text:0040F610
.text:0040F610 ; ---------------------------------------------------------------------------
.text:0040F611                 align 4
.text:0040F614
.text:0040F614 ; =============== S U B R O U T I N E =======================================
.text:0040F614
.text:0040F614
.text:0040F614 ; _DWORD std::string::_Rep::_M_refdata(std::string::_Rep *__hidden this)
.text:0040F614                 public __ZNSs4_Rep10_M_refdataEv
.text:0040F614 __ZNSs4_Rep10_M_refdataEv proc near
.text:0040F614
.text:0040F614 this            = dword ptr  4
.text:0040F614
.text:0040F614                 lea     eax, [ecx+0Ch]
.text:0040F617                 retn
.text:0040F617 __ZNSs4_Rep10_M_refdataEv endp
.text:0040F617
.text:0040F618
.text:0040F618 ; =============== S U B R O U T I N E =======================================
.text:0040F618
.text:0040F618
.text:0040F618 ; _DWORD std::string::_Rep::_S_empty_rep(std::string::_Rep *__hidden this)
.text:0040F618                 public __ZNSs4_Rep12_S_empty_repEv
.text:0040F618 __ZNSs4_Rep12_S_empty_repEv proc near
.text:0040F618
.text:0040F618 this            = dword ptr  4
.text:0040F618
.text:0040F618                 mov     eax, offset __ZNSs4_Rep20_S_empty_rep_storageE ; std::string::_Rep::_S_empty_rep_storage
.text:0040F61D                 retn
.text:0040F61D __ZNSs4_Rep12_S_empty_repEv endp
.text:0040F61D
.text:0040F61D ; ---------------------------------------------------------------------------
.text:0040F61E                 align 10h
.text:0040F620
.text:0040F620 ; =============== S U B R O U T I N E =======================================
.text:0040F620
.text:0040F620
.text:0040F620 ; _DWORD std::string::_Rep::_M_set_leaked(std::string::_Rep *__hidden this)
.text:0040F620                 public __ZNSs4_Rep13_M_set_leakedEv
.text:0040F620 __ZNSs4_Rep13_M_set_leakedEv proc near
.text:0040F620
.text:0040F620 this            = dword ptr  4
.text:0040F620
.text:0040F620                 mov     dword ptr [ecx+8], 0FFFFFFFFh
.text:0040F627                 retn
.text:0040F627 __ZNSs4_Rep13_M_set_leakedEv endp
.text:0040F627
.text:0040F628
.text:0040F628 ; =============== S U B R O U T I N E =======================================
.text:0040F628
.text:0040F628
.text:0040F628 ; _DWORD std::string::_Rep::_M_set_sharable(std::string::_Rep *__hidden this)
.text:0040F628                 public __ZNSs4_Rep15_M_set_sharableEv
.text:0040F628 __ZNSs4_Rep15_M_set_sharableEv proc near
.text:0040F628
.text:0040F628 this            = dword ptr  4
.text:0040F628
.text:0040F628                 mov     dword ptr [ecx+8], 0
.text:0040F62F                 retn
.text:0040F62F __ZNSs4_Rep15_M_set_sharableEv endp
.text:0040F62F
.text:0040F630
.text:0040F630 ; =============== S U B R O U T I N E =======================================
.text:0040F630
.text:0040F630
.text:0040F630 ; _DWORD __stdcall std::string::_Rep::_M_set_length_and_sharable(std::string::_Rep *__hidden this, unsigned int)
.text:0040F630                 public __ZNSs4_Rep26_M_set_length_and_sharableEj
.text:0040F630 __ZNSs4_Rep26_M_set_length_and_sharableEj proc near
.text:0040F630
.text:0040F630 this            = dword ptr  4
.text:0040F630
.text:0040F630                 mov     eax, [esp+this]
.text:0040F634                 mov     dword ptr [ecx+8], 0
.text:0040F63B                 mov     [ecx], eax
.text:0040F63D                 mov     byte ptr [ecx+eax+0Ch], 0
.text:0040F642                 retn    4
.text:0040F642 __ZNSs4_Rep26_M_set_length_and_sharableEj endp
.text:0040F642
.text:0040F642 ; ---------------------------------------------------------------------------
.text:0040F645                 align 4
.text:0040F648
.text:0040F648 ; =============== S U B R O U T I N E =======================================
.text:0040F648
.text:0040F648
.text:0040F648 ; std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)
.text:0040F648                 public __ZNSs4_Rep7_M_grabERKSaIcES2_
.text:0040F648 __ZNSs4_Rep7_M_grabERKSaIcES2_ proc near
.text:0040F648
.text:0040F648 var_2C          = dword ptr -2Ch
.text:0040F648 var_28          = dword ptr -28h
.text:0040F648 var_10          = dword ptr -10h
.text:0040F648 arg_0           = dword ptr  4
.text:0040F648 arg_4           = dword ptr  8
.text:0040F648
.text:0040F648                 sub     esp, 2Ch
.text:0040F64B                 mov     edx, [esp+2Ch+arg_0]
.text:0040F64F                 mov     eax, [ecx+8]
.text:0040F652                 test    eax, eax
.text:0040F654                 js      short loc_40F670
.text:0040F656                 mov     edx, ds:__CRT_MT
.text:0040F65C                 test    edx, edx
.text:0040F65E                 jnz     short loc_40F684
.text:0040F660                 inc     eax
.text:0040F661                 mov     [ecx+8], eax
.text:0040F664                 lea     eax, [ecx+0Ch]
.text:0040F667                 add     esp, 2Ch
.text:0040F66A                 retn    8
.text:0040F66A ; ---------------------------------------------------------------------------
.text:0040F66D                 align 10h
.text:0040F670
.text:0040F670 loc_40F670:                             ; CODE XREF: std::string::_Rep::_M_grab(std::allocator<char> const&,std::allocator<char> const&)+C↑j
.text:0040F670                 mov     [esp+2Ch+arg_4], 0
.text:0040F678                 mov     [esp+2Ch+arg_0], edx
.text:0040F67C                 add     esp, 2Ch
.text:0040F67F                 jmp     __ZNSs4_Rep8_M_cloneERKSaIcEj ; std::string::_Rep::_M_clone(std::allocator<char> const&,uint)
.text:0040F684 ; ---------------------------------------------------------------------------
.text:0040F684
.text:0040F684 loc_40F684:                             ; CODE XREF: std::string::_Rep::_M_grab(std::allocator<char> const&,std::allocator<char> const&)+16↑j
.text:0040F684                 mov     [esp+2Ch+var_28], 1 ; int
.text:0040F68C                 lea     eax, [ecx+8]
.text:0040F68F                 mov     [esp+2Ch+var_2C], eax ; volatile int *
.text:0040F692                 mov     [esp+2Ch+var_10], ecx
.text:0040F696                 call    __ZN9__gnu_cxx12__atomic_addEPVii ; __gnu_cxx::__atomic_add(int volatile*,int)
.text:0040F69B                 mov     ecx, [esp+2Ch+var_10]
.text:0040F69F                 lea     eax, [ecx+0Ch]
.text:0040F6A2                 add     esp, 2Ch
.text:0040F6A5                 retn    8
.text:0040F6A5 __ZNSs4_Rep7_M_grabERKSaIcES2_ endp
.text:0040F6A5
.text:0040F6A8
.text:0040F6A8 ; =============== S U B R O U T I N E =======================================
.text:0040F6A8
.text:0040F6A8
.text:0040F6A8 ; std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned int)
.text:0040F6A8                 public __ZNSs4_Rep8_M_cloneERKSaIcEj
.text:0040F6A8 __ZNSs4_Rep8_M_cloneERKSaIcEj proc near ; CODE XREF: std::string::_Rep::_M_grab(std::allocator<char> const&,std::allocator<char> const&)+37↑j
.text:0040F6A8                                         ; std::string::assign(std::string const&)+63↓p ...
.text:0040F6A8
.text:0040F6A8 var_1C          = dword ptr -1Ch
.text:0040F6A8 var_18          = dword ptr -18h
.text:0040F6A8 var_14          = dword ptr -14h
.text:0040F6A8 arg_0           = dword ptr  4
.text:0040F6A8 arg_4           = dword ptr  8
.text:0040F6A8
.text:0040F6A8                 push    edi
.text:0040F6A9                 push    esi
.text:0040F6AA                 push    ebx
.text:0040F6AB                 sub     esp, 10h
.text:0040F6AE                 mov     ebx, ecx
.text:0040F6B0                 mov     eax, [esp+1Ch+arg_4]
.text:0040F6B4                 mov     edx, [esp+1Ch+arg_0]
.text:0040F6B8                 mov     [esp+1Ch+var_14], edx
.text:0040F6BC                 mov     edx, [ecx+4]
.text:0040F6BF                 mov     [esp+1Ch+var_18], edx
.text:0040F6C3                 add     eax, [ecx]
.text:0040F6C5                 mov     [esp+1Ch+var_1C], eax
.text:0040F6C8                 call    __ZNSs4_Rep9_S_createEjjRKSaIcE ; std::string::_Rep::_S_create(uint,uint,std::allocator<char> const&)
.text:0040F6CD                 mov     ecx, [ebx]
.text:0040F6CF                 test    ecx, ecx
.text:0040F6D1                 jnz     short loc_40F6F0
.text:0040F6D3                 xor     ecx, ecx
.text:0040F6D5                 lea     edx, [eax+0Ch]
.text:0040F6D8
.text:0040F6D8 loc_40F6D8:                             ; CODE XREF: std::string::_Rep::_M_clone(std::allocator<char> const&,uint)+59↓j
.text:0040F6D8                                         ; std::string::_Rep::_M_clone(std::allocator<char> const&,uint)+67↓j
.text:0040F6D8                 mov     dword ptr [eax+8], 0
.text:0040F6DF                 mov     [eax], ecx
.text:0040F6E1                 mov     byte ptr [edx+ecx], 0
.text:0040F6E5                 mov     eax, edx
.text:0040F6E7                 add     esp, 10h
.text:0040F6EA                 pop     ebx
.text:0040F6EB                 pop     esi
.text:0040F6EC                 pop     edi
.text:0040F6ED                 retn    8
.text:0040F6F0 ; ---------------------------------------------------------------------------
.text:0040F6F0
.text:0040F6F0 loc_40F6F0:                             ; CODE XREF: std::string::_Rep::_M_clone(std::allocator<char> const&,uint)+29↑j
.text:0040F6F0                 cmp     ecx, 1
.text:0040F6F3                 jz      short loc_40F704
.text:0040F6F5                 lea     edx, [eax+0Ch]
.text:0040F6F8                 lea     esi, [ebx+0Ch]
.text:0040F6FB                 mov     edi, edx
.text:0040F6FD                 rep movsb
.text:0040F6FF                 mov     ecx, [ebx]
.text:0040F701                 jmp     short loc_40F6D8
.text:0040F701 ; ---------------------------------------------------------------------------
.text:0040F703                 align 4
.text:0040F704
.text:0040F704 loc_40F704:                             ; CODE XREF: std::string::_Rep::_M_clone(std::allocator<char> const&,uint)+4B↑j
.text:0040F704                 mov     dl, [ebx+0Ch]
.text:0040F707                 mov     [eax+0Ch], dl
.text:0040F70A                 mov     ecx, [ebx]
.text:0040F70C                 lea     edx, [eax+0Ch]
.text:0040F70F                 jmp     short loc_40F6D8
.text:0040F70F __ZNSs4_Rep8_M_cloneERKSaIcEj endp
.text:0040F70F
.text:0040F70F ; ---------------------------------------------------------------------------
.text:0040F711                 align 4
.text:0040F714
.text:0040F714 ; =============== S U B R O U T I N E =======================================
.text:0040F714
.text:0040F714
.text:0040F714 ; std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)
.text:0040F714                 public __ZNSs4_Rep9_S_createEjjRKSaIcE
.text:0040F714 __ZNSs4_Rep9_S_createEjjRKSaIcE proc near
.text:0040F714                                         ; CODE XREF: std::string::_S_construct(uint,char,std::allocator<char> const&)+22↑p
.text:0040F714                                         ; std::string::_S_construct<__gnu_cxx::__normal_iterator<char *,std::string>>(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>,std::allocator<char> const&,std::forward_iterator_tag)+23↑p ...
.text:0040F714
.text:0040F714 var_1C          = dword ptr -1Ch
.text:0040F714 arg_0           = dword ptr  4
.text:0040F714 arg_4           = dword ptr  8
.text:0040F714
.text:0040F714                 push    ebx
.text:0040F715                 sub     esp, 18h
.text:0040F718                 mov     ebx, [esp+1Ch+arg_0]
.text:0040F71C                 mov     eax, [esp+1Ch+arg_4]
.text:0040F720                 cmp     ebx, 3FFFFFFCh
.text:0040F726                 ja      short loc_40F77F
.text:0040F728                 cmp     ebx, eax
.text:0040F72A                 jbe     short loc_40F75D
.text:0040F72C                 lea     edx, [eax+eax]
.text:0040F72F                 cmp     ebx, edx
.text:0040F731                 jnb     short loc_40F735
.text:0040F733                 mov     ebx, edx
.text:0040F735
.text:0040F735 loc_40F735:                             ; CODE XREF: std::string::_Rep::_S_create(uint,uint,std::allocator<char> const&)+1D↑j
.text:0040F735                 lea     edx, [ebx+0Dh]
.text:0040F738                 lea     ecx, [ebx+1Dh]
.text:0040F73B                 cmp     ecx, 1000h
.text:0040F741                 jbe     short loc_40F760
.text:0040F743                 cmp     eax, ebx
.text:0040F745                 jnb     short loc_40F760
.text:0040F747                 add     ebx, 1000h
.text:0040F74D                 and     ecx, 0FFFh
.text:0040F753                 sub     ebx, ecx
.text:0040F755                 cmp     ebx, 3FFFFFFCh
.text:0040F75B                 ja      short loc_40F778
.text:0040F75D
.text:0040F75D loc_40F75D:                             ; CODE XREF: std::string::_Rep::_S_create(uint,uint,std::allocator<char> const&)+16↑j
.text:0040F75D                                         ; std::string::_Rep::_S_create(uint,uint,std::allocator<char> const&)+69↓j
.text:0040F75D                 lea     edx, [ebx+0Dh]
.text:0040F760
.text:0040F760 loc_40F760:                             ; CODE XREF: std::string::_Rep::_S_create(uint,uint,std::allocator<char> const&)+2D↑j
.text:0040F760                                         ; std::string::_Rep::_S_create(uint,uint,std::allocator<char> const&)+31↑j
.text:0040F760                 mov     [esp+1Ch+var_1C], edx ; size_t
.text:0040F763                 call    __Znwj          ; operator new(uint)
.text:0040F768                 mov     [eax+4], ebx
.text:0040F76B                 mov     dword ptr [eax+8], 0
.text:0040F772                 add     esp, 18h
.text:0040F775                 pop     ebx
.text:0040F776                 retn
.text:0040F776 ; ---------------------------------------------------------------------------
.text:0040F777                 align 4
.text:0040F778
.text:0040F778 loc_40F778:                             ; CODE XREF: std::string::_Rep::_S_create(uint,uint,std::allocator<char> const&)+47↑j
.text:0040F778                 mov     ebx, 3FFFFFFCh
.text:0040F77D                 jmp     short loc_40F75D
.text:0040F77F ; ---------------------------------------------------------------------------
.text:0040F77F
.text:0040F77F loc_40F77F:                             ; CODE XREF: std::string::_Rep::_S_create(uint,uint,std::allocator<char> const&)+12↑j
.text:0040F77F                 mov     [esp+1Ch+var_1C], offset aBasicStringSCr ; "basic_string::_S_create"
.text:0040F786                 call    __ZSt20__throw_length_errorPKc ; std::__throw_length_error(char const*)
.text:0040F786 __ZNSs4_Rep9_S_createEjjRKSaIcE endp
.text:0040F786
.text:0040F786 ; ---------------------------------------------------------------------------
.text:0040F78B                 align 4
.text:0040F78C
.text:0040F78C ; =============== S U B R O U T I N E =======================================
.text:0040F78C
.text:0040F78C
.text:0040F78C ; _DWORD std::string::back(std::string *__hidden this)
.text:0040F78C                 public __ZNSs4backEv
.text:0040F78C __ZNSs4backEv   proc near
.text:0040F78C
.text:0040F78C this            = dword ptr  4
.text:0040F78C
.text:0040F78C                 push    esi
.text:0040F78D                 push    ebx
.text:0040F78E                 push    ebx             ; this
.text:0040F78F                 mov     ebx, ecx
.text:0040F791                 mov     eax, [ecx]
.text:0040F793                 mov     esi, [eax-0Ch]
.text:0040F796                 dec     esi
.text:0040F797                 mov     edx, [eax-4]
.text:0040F79A                 test    edx, edx
.text:0040F79C                 js      short loc_40F7A5
.text:0040F79E                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:0040F7A3                 mov     eax, [ebx]
.text:0040F7A5
.text:0040F7A5 loc_40F7A5:                             ; CODE XREF: std::string::back(void)+10↑j
.text:0040F7A5                 add     eax, esi
.text:0040F7A7                 pop     ecx
.text:0040F7A8                 pop     ebx
.text:0040F7A9                 pop     esi
.text:0040F7AA                 retn
.text:0040F7AA __ZNSs4backEv   endp
.text:0040F7AA
.text:0040F7AA ; ---------------------------------------------------------------------------
.text:0040F7AB                 align 4
.text:0040F7AC
.text:0040F7AC ; =============== S U B R O U T I N E =======================================
.text:0040F7AC
.text:0040F7AC
.text:0040F7AC ; _DWORD __stdcall std::string::rend(std::string *__hidden this)
.text:0040F7AC                 public __ZNSs4rendEv
.text:0040F7AC __ZNSs4rendEv   proc near
.text:0040F7AC
.text:0040F7AC lpfctx          = dword ptr -5Ch
.text:0040F7AC fctx            = SjLj_Function_Context ptr -40h
.text:0040F7AC this            = dword ptr  4
.text:0040F7AC
.text:0040F7AC                 push    edi
.text:0040F7AD                 push    esi
.text:0040F7AE                 push    ebx
.text:0040F7AF                 sub     esp, 50h
.text:0040F7B2                 mov     esi, ecx
.text:0040F7B4                 mov     ebx, [esp+5Ch+this]
.text:0040F7B8                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:0040F7C0                 mov     [esp+5Ch+fctx.lsda], offset dword_4123AC
.text:0040F7C8                 lea     edi, [esp+5Ch+fctx]
.text:0040F7CC                 mov     [esp+5Ch+lpfctx], edi ; this
.text:0040F7CF                 call    __Unwind_SjLj_Register
.text:0040F7D4                 mov     edx, [ebx]
.text:0040F7D6                 mov     ecx, [edx-4]
.text:0040F7D9                 test    ecx, ecx
.text:0040F7DB                 js      short loc_40F7EE
.text:0040F7DD                 mov     [esp+5Ch+fctx.call_site], 0
.text:0040F7E5                 mov     ecx, ebx
.text:0040F7E7                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:0040F7EC                 mov     edx, [ebx]
.text:0040F7EE
.text:0040F7EE loc_40F7EE:                             ; CODE XREF: std::string::rend(void)+2F↑j
.text:0040F7EE                 mov     [esi], edx
.text:0040F7F0                 mov     [esp+5Ch+lpfctx], edi ; lpfctx
.text:0040F7F3                 call    __Unwind_SjLj_Unregister
.text:0040F7F8                 mov     eax, esi
.text:0040F7FA                 add     esp, 50h
.text:0040F7FD                 pop     ebx
.text:0040F7FE                 pop     esi
.text:0040F7FF                 pop     edi
.text:0040F800                 retn    4
.text:0040F800 __ZNSs4rendEv   endp
.text:0040F800
.text:0040F800 ; ---------------------------------------------------------------------------
.text:0040F803                 align 4
.text:0040F804
.text:0040F804 ; =============== S U B R O U T I N E =======================================
.text:0040F804
.text:0040F804
.text:0040F804 ; _DWORD __stdcall std::string::swap(std::string *__hidden this, std::string *)
.text:0040F804                 public __ZNSs4swapERSs
.text:0040F804 __ZNSs4swapERSs proc near
.text:0040F804
.text:0040F804 this            = dword ptr  4
.text:0040F804
.text:0040F804                 push    ebx
.text:0040F805                 mov     ebx, [esp+4+this]
.text:0040F809                 mov     edx, [ecx]
.text:0040F80B                 mov     eax, [edx-4]
.text:0040F80E                 test    eax, eax
.text:0040F810                 js      short loc_40F82C
.text:0040F812
.text:0040F812 loc_40F812:                             ; CODE XREF: std::string::swap(std::string &)+2F↓j
.text:0040F812                 mov     eax, [ebx]
.text:0040F814                 cmp     dword ptr [eax-4], 0
.text:0040F818                 jns     short loc_40F821
.text:0040F81A                 mov     dword ptr [eax-4], 0
.text:0040F821
.text:0040F821 loc_40F821:                             ; CODE XREF: std::string::swap(std::string &)+14↑j
.text:0040F821                 mov     [ecx], eax
.text:0040F823                 mov     [ebx], edx
.text:0040F825                 pop     ebx
.text:0040F826                 retn    4
.text:0040F826 ; ---------------------------------------------------------------------------
.text:0040F829                 align 4
.text:0040F82C
.text:0040F82C loc_40F82C:                             ; CODE XREF: std::string::swap(std::string &)+C↑j
.text:0040F82C                 mov     dword ptr [edx-4], 0
.text:0040F833                 jmp     short loc_40F812
.text:0040F833 __ZNSs4swapERSs endp
.text:0040F833
.text:0040F833 ; ---------------------------------------------------------------------------
.text:0040F835                 align 4
.text:0040F838
.text:0040F838 ; =============== S U B R O U T I N E =======================================
.text:0040F838
.text:0040F838
.text:0040F838 ; _DWORD std::string::begin(std::string *__hidden this)
.text:0040F838                 public __ZNSs5beginEv
.text:0040F838 __ZNSs5beginEv  proc near
.text:0040F838
.text:0040F838 lpfctx          = dword ptr -5Ch
.text:0040F838 fctx            = SjLj_Function_Context ptr -40h
.text:0040F838 this            = dword ptr  4
.text:0040F838
.text:0040F838                 push    edi
.text:0040F839                 push    esi
.text:0040F83A                 push    ebx
.text:0040F83B                 sub     esp, 50h
.text:0040F83E                 mov     esi, ecx
.text:0040F840                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:0040F848                 mov     [esp+5Ch+fctx.lsda], offset dword_4123B8
.text:0040F850                 lea     edi, [esp+5Ch+fctx]
.text:0040F854                 mov     [esp+5Ch+lpfctx], edi ; this
.text:0040F857                 call    __Unwind_SjLj_Register
.text:0040F85C                 mov     ebx, [esi]
.text:0040F85E                 mov     ecx, [ebx-4]
.text:0040F861                 test    ecx, ecx
.text:0040F863                 js      short loc_40F876
.text:0040F865                 mov     [esp+5Ch+fctx.call_site], 0
.text:0040F86D                 mov     ecx, esi
.text:0040F86F                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:0040F874                 mov     ebx, [esi]
.text:0040F876
.text:0040F876 loc_40F876:                             ; CODE XREF: std::string::begin(void)+2B↑j
.text:0040F876                 mov     [esp+5Ch+lpfctx], edi ; lpfctx
.text:0040F879                 call    __Unwind_SjLj_Unregister
.text:0040F87E                 mov     eax, ebx
.text:0040F880                 add     esp, 50h
.text:0040F883                 pop     ebx
.text:0040F884                 pop     esi
.text:0040F885                 pop     edi
.text:0040F886                 retn
.text:0040F886 __ZNSs5beginEv  endp
.text:0040F886
.text:0040F886 ; ---------------------------------------------------------------------------
.text:0040F887                 align 4
.text:0040F888
.text:0040F888 ; =============== S U B R O U T I N E =======================================
.text:0040F888
.text:0040F888
.text:0040F888 ; _DWORD std::string::clear(std::string *__hidden this)
.text:0040F888                 public __ZNSs5clearEv
.text:0040F888 __ZNSs5clearEv  proc near
.text:0040F888
.text:0040F888 lpfctx          = dword ptr -5Ch
.text:0040F888 var_58          = dword ptr -58h
.text:0040F888 var_54          = dword ptr -54h
.text:0040F888 var_44          = dword ptr -44h
.text:0040F888 fctx            = SjLj_Function_Context ptr -40h
.text:0040F888 this            = dword ptr  4
.text:0040F888
.text:0040F888                 push    ebx
.text:0040F889                 sub     esp, 58h
.text:0040F88C                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:0040F894                 mov     [esp+5Ch+fctx.lsda], offset dword_4123A8
.text:0040F89C                 lea     ebx, [esp+5Ch+fctx]
.text:0040F8A0                 mov     [esp+5Ch+lpfctx], ebx ; lpfctx
.text:0040F8A3                 mov     [esp+5Ch+var_44], ecx
.text:0040F8A7                 call    __Unwind_SjLj_Register
.text:0040F8AC                 mov     [esp+5Ch+var_54], 0 ; unsigned int
.text:0040F8B4                 mov     ecx, [esp+5Ch+var_44]
.text:0040F8B8                 mov     eax, [ecx]
.text:0040F8BA                 mov     eax, [eax-0Ch]
.text:0040F8BD                 mov     [esp+5Ch+var_58], eax ; unsigned int
.text:0040F8C1                 mov     [esp+5Ch+lpfctx], 0 ; this
.text:0040F8C8                 mov     [esp+5Ch+fctx.call_site], 0
.text:0040F8D0                 call    __ZNSs9_M_mutateEjjj ; std::string::_M_mutate(uint,uint,uint)
.text:0040F8D5                 sub     esp, 0Ch
.text:0040F8D8                 mov     [esp+5Ch+lpfctx], ebx ; lpfctx
.text:0040F8DB                 call    __Unwind_SjLj_Unregister
.text:0040F8E0                 add     esp, 58h
.text:0040F8E3                 pop     ebx
.text:0040F8E4                 retn
.text:0040F8E4 __ZNSs5clearEv  endp
.text:0040F8E4
.text:0040F8E4 ; ---------------------------------------------------------------------------
.text:0040F8E5                 align 4
.text:0040F8E8
.text:0040F8E8 ; =============== S U B R O U T I N E =======================================
.text:0040F8E8
.text:0040F8E8
.text:0040F8E8 ; std::string::erase(__gnu_cxx::__normal_iterator<char *, std::string>)
.text:0040F8E8                 public __ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEE
.text:0040F8E8 __ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEE proc near
.text:0040F8E8
.text:0040F8E8 var_1C          = dword ptr -1Ch
.text:0040F8E8 var_18          = dword ptr -18h
.text:0040F8E8 var_14          = dword ptr -14h
.text:0040F8E8 arg_0           = dword ptr  4
.text:0040F8E8
.text:0040F8E8                 push    esi
.text:0040F8E9                 push    ebx
.text:0040F8EA                 sub     esp, 14h
.text:0040F8ED                 mov     esi, ecx
.text:0040F8EF                 mov     ebx, [esp+1Ch+arg_0]
.text:0040F8F3                 sub     ebx, [ecx]
.text:0040F8F5                 mov     [esp+1Ch+var_14], 0 ; unsigned int
.text:0040F8FD                 mov     [esp+1Ch+var_18], 1 ; unsigned int
.text:0040F905                 mov     [esp+1Ch+var_1C], ebx ; this
.text:0040F908                 call    __ZNSs9_M_mutateEjjj ; std::string::_M_mutate(uint,uint,uint)
.text:0040F90D                 sub     esp, 0Ch
.text:0040F910                 mov     eax, [esi]
.text:0040F912                 mov     dword ptr [eax-4], 0FFFFFFFFh
.text:0040F919                 add     eax, ebx
.text:0040F91B                 add     esp, 14h
.text:0040F91E                 pop     ebx
.text:0040F91F                 pop     esi
.text:0040F920                 retn    4
.text:0040F920 __ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEE endp
.text:0040F920
.text:0040F920 ; ---------------------------------------------------------------------------
.text:0040F923                 align 4
.text:0040F924
.text:0040F924 ; =============== S U B R O U T I N E =======================================
.text:0040F924
.text:0040F924
.text:0040F924 ; std::string::erase(__gnu_cxx::__normal_iterator<char *, std::string>, __gnu_cxx::__normal_iterator<char *, std::string>)
.text:0040F924                 public __ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEES2_
.text:0040F924 __ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEES2_ proc near
.text:0040F924
.text:0040F924 var_1C          = dword ptr -1Ch
.text:0040F924 var_18          = dword ptr -18h
.text:0040F924 var_14          = dword ptr -14h
.text:0040F924 arg_0           = dword ptr  4
.text:0040F924 arg_4           = dword ptr  8
.text:0040F924
.text:0040F924                 push    esi
.text:0040F925                 push    ebx
.text:0040F926                 sub     esp, 14h
.text:0040F929                 mov     eax, [esp+1Ch+arg_0]
.text:0040F92D                 mov     edx, [esp+1Ch+arg_4]
.text:0040F931                 sub     edx, eax
.text:0040F933                 jnz     short loc_40F940
.text:0040F935                 add     esp, 14h
.text:0040F938                 pop     ebx
.text:0040F939                 pop     esi
.text:0040F93A                 retn    8
.text:0040F93A ; ---------------------------------------------------------------------------
.text:0040F93D                 align 10h
.text:0040F940
.text:0040F940 loc_40F940:                             ; CODE XREF: std::string::erase(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>)+F↑j
.text:0040F940                 mov     ebx, ecx
.text:0040F942                 mov     esi, eax
.text:0040F944                 sub     esi, [ecx]
.text:0040F946                 mov     [esp+1Ch+var_14], 0 ; unsigned int
.text:0040F94E                 mov     [esp+1Ch+var_18], edx ; unsigned int
.text:0040F952                 mov     [esp+1Ch+var_1C], esi ; this
.text:0040F955                 call    __ZNSs9_M_mutateEjjj ; std::string::_M_mutate(uint,uint,uint)
.text:0040F95A                 sub     esp, 0Ch
.text:0040F95D                 mov     eax, [ebx]
.text:0040F95F                 mov     dword ptr [eax-4], 0FFFFFFFFh
.text:0040F966                 add     eax, esi
.text:0040F968                 add     esp, 14h
.text:0040F96B                 pop     ebx
.text:0040F96C                 pop     esi
.text:0040F96D                 retn    8
.text:0040F96D __ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEES2_ endp
.text:0040F96D
.text:0040F970
.text:0040F970 ; =============== S U B R O U T I N E =======================================
.text:0040F970
.text:0040F970
.text:0040F970 ; _DWORD __stdcall std::string::erase(std::string *__hidden this, unsigned int, unsigned int)
.text:0040F970                 public __ZNSs5eraseEjj
.text:0040F970 __ZNSs5eraseEjj proc near
.text:0040F970
.text:0040F970 var_1C          = dword ptr -1Ch
.text:0040F970 var_18          = dword ptr -18h
.text:0040F970 var_14          = dword ptr -14h
.text:0040F970 this            = dword ptr  4
.text:0040F970 arg_4           = dword ptr  8
.text:0040F970
.text:0040F970                 push    ebx
.text:0040F971                 sub     esp, 18h
.text:0040F974                 mov     ebx, ecx
.text:0040F976                 mov     edx, [esp+1Ch+this]
.text:0040F97A                 mov     eax, [ecx]
.text:0040F97C                 mov     ecx, [eax-0Ch]
.text:0040F97F                 mov     eax, ecx
.text:0040F981                 sub     eax, edx
.text:0040F983                 cmp     eax, [esp+1Ch+arg_4]
.text:0040F987                 jbe     short loc_40F98D
.text:0040F989                 mov     eax, [esp+1Ch+arg_4]
.text:0040F98D
.text:0040F98D loc_40F98D:                             ; CODE XREF: std::string::erase(uint,uint)+17↑j
.text:0040F98D                 cmp     edx, ecx
.text:0040F98F                 ja      short loc_40F9B3
.text:0040F991                 mov     [esp+1Ch+var_14], 0 ; unsigned int
.text:0040F999                 mov     [esp+1Ch+var_18], eax ; unsigned int
.text:0040F99D                 mov     [esp+1Ch+var_1C], edx ; this
.text:0040F9A0                 mov     ecx, ebx
.text:0040F9A2                 call    __ZNSs9_M_mutateEjjj ; std::string::_M_mutate(uint,uint,uint)
.text:0040F9A7                 sub     esp, 0Ch
.text:0040F9AA                 mov     eax, ebx
.text:0040F9AC                 add     esp, 18h
.text:0040F9AF                 pop     ebx
.text:0040F9B0                 retn    8
.text:0040F9B3 ; ---------------------------------------------------------------------------
.text:0040F9B3
.text:0040F9B3 loc_40F9B3:                             ; CODE XREF: std::string::erase(uint,uint)+1F↑j
.text:0040F9B3                 mov     [esp+1Ch+var_1C], offset aBasicStringEra ; "basic_string::erase"
.text:0040F9BA                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:0040F9BA __ZNSs5eraseEjj endp
.text:0040F9BA
.text:0040F9BA ; ---------------------------------------------------------------------------
.text:0040F9BF                 align 10h
.text:0040F9C0
.text:0040F9C0 ; =============== S U B R O U T I N E =======================================
.text:0040F9C0
.text:0040F9C0
.text:0040F9C0 ; _DWORD std::string::front(std::string *__hidden this)
.text:0040F9C0                 public __ZNSs5frontEv
.text:0040F9C0 __ZNSs5frontEv  proc near
.text:0040F9C0
.text:0040F9C0 this            = dword ptr  4
.text:0040F9C0
.text:0040F9C0                 push    ebx
.text:0040F9C1                 sub     esp, 8
.text:0040F9C4                 mov     ebx, ecx
.text:0040F9C6                 mov     eax, [ecx]
.text:0040F9C8                 mov     edx, [eax-4]
.text:0040F9CB                 test    edx, edx
.text:0040F9CD                 js      short loc_40F9D6
.text:0040F9CF                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:0040F9D4                 mov     eax, [ebx]
.text:0040F9D6
.text:0040F9D6 loc_40F9D6:                             ; CODE XREF: std::string::front(void)+D↑j
.text:0040F9D6                 add     esp, 8
.text:0040F9D9                 pop     ebx
.text:0040F9DA                 retn
.text:0040F9DA __ZNSs5frontEv  endp
.text:0040F9DA
.text:0040F9DA ; ---------------------------------------------------------------------------
.text:0040F9DB                 align 4
.text:0040F9DC
.text:0040F9DC ; =============== S U B R O U T I N E =======================================
.text:0040F9DC
.text:0040F9DC
.text:0040F9DC ; _DWORD __stdcall std::string::append(std::string *__hidden this, const char *)
.text:0040F9DC                 public __ZNSs6appendEPKc
.text:0040F9DC __ZNSs6appendEPKc proc near
.text:0040F9DC
.text:0040F9DC var_1C          = dword ptr -1Ch
.text:0040F9DC var_18          = dword ptr -18h
.text:0040F9DC this            = dword ptr  4
.text:0040F9DC
.text:0040F9DC                 push    edi
.text:0040F9DD                 push    ebx
.text:0040F9DE                 sub     esp, 14h
.text:0040F9E1                 mov     ebx, ecx
.text:0040F9E3                 mov     edx, [esp+1Ch+this]
.text:0040F9E7                 mov     edi, edx
.text:0040F9E9                 xor     eax, eax
.text:0040F9EB                 mov     ecx, 0FFFFFFFFh
.text:0040F9F0                 repne scasb
.text:0040F9F2                 not     ecx
.text:0040F9F4                 lea     eax, [ecx-1]
.text:0040F9F7                 mov     [esp+1Ch+var_18], eax ; char *
.text:0040F9FB                 mov     [esp+1Ch+var_1C], edx ; this
.text:0040F9FE                 mov     ecx, ebx
.text:0040FA00                 call    __ZNSs6appendEPKcj ; std::string::append(char const*,uint)
.text:0040FA05                 sub     esp, 8
.text:0040FA08                 add     esp, 14h
.text:0040FA0B                 pop     ebx
.text:0040FA0C                 pop     edi
.text:0040FA0D                 retn    4
.text:0040FA0D __ZNSs6appendEPKc endp
.text:0040FA0D
.text:0040FA10
.text:0040FA10 ; =============== S U B R O U T I N E =======================================
.text:0040FA10
.text:0040FA10
.text:0040FA10 ; _DWORD __stdcall std::string::append(std::string *__hidden this, const char *, unsigned int)
.text:0040FA10                 public __ZNSs6appendEPKcj
.text:0040FA10 __ZNSs6appendEPKcj proc near            ; CODE XREF: std::string::append(char const*)+24↑p
.text:0040FA10                                         ; std::string::append(std::initializer_list<char>)↓j ...
.text:0040FA10
.text:0040FA10 var_3C          = dword ptr -3Ch
.text:0040FA10 var_20          = dword ptr -20h
.text:0040FA10 this            = dword ptr  4
.text:0040FA10 arg_4           = dword ptr  8
.text:0040FA10
.text:0040FA10                 push    ebp
.text:0040FA11                 push    edi
.text:0040FA12                 push    esi
.text:0040FA13                 push    ebx
.text:0040FA14                 sub     esp, 2Ch
.text:0040FA17                 mov     eax, ecx
.text:0040FA19                 mov     ebp, [esp+3Ch+arg_4]
.text:0040FA1D                 test    ebp, ebp
.text:0040FA1F                 jnz     short loc_40FA2C
.text:0040FA21                 add     esp, 2Ch
.text:0040FA24                 pop     ebx
.text:0040FA25                 pop     esi
.text:0040FA26                 pop     edi
.text:0040FA27                 pop     ebp
.text:0040FA28                 retn    8
.text:0040FA28 ; ---------------------------------------------------------------------------
.text:0040FA2B                 align 4
.text:0040FA2C
.text:0040FA2C loc_40FA2C:                             ; CODE XREF: std::string::append(char const*,uint)+F↑j
.text:0040FA2C                 mov     ecx, [ecx]
.text:0040FA2E                 mov     edx, [ecx-0Ch]
.text:0040FA31                 mov     ebx, 3FFFFFFCh
.text:0040FA36                 sub     ebx, edx
.text:0040FA38                 cmp     ebp, ebx
.text:0040FA3A                 ja      loc_40FADD
.text:0040FA40                 lea     ebx, [ebp+edx+0]
.text:0040FA44                 cmp     ebx, [ecx-8]
.text:0040FA47                 ja      short loc_40FA7C
.text:0040FA49                 mov     esi, [ecx-4]
.text:0040FA4C                 test    esi, esi
.text:0040FA4E                 jg      short loc_40FA7C
.text:0040FA50
.text:0040FA50 loc_40FA50:                             ; CODE XREF: std::string::append(char const*,uint)+C8↓j
.text:0040FA50                 add     edx, ecx
.text:0040FA52                 cmp     ebp, 1
.text:0040FA55                 jz      short loc_40FAA1
.text:0040FA57
.text:0040FA57 loc_40FA57:                             ; CODE XREF: std::string::append(char const*,uint)+8F↓j
.text:0040FA57                 mov     edi, edx
.text:0040FA59                 mov     esi, [esp+3Ch+this]
.text:0040FA5D                 mov     ecx, ebp
.text:0040FA5F                 rep movsb
.text:0040FA61
.text:0040FA61 loc_40FA61:                             ; CODE XREF: std::string::append(char const*,uint)+99↓j
.text:0040FA61                 mov     edx, [eax]
.text:0040FA63                 mov     dword ptr [edx-4], 0
.text:0040FA6A                 mov     [edx-0Ch], ebx
.text:0040FA6D                 mov     byte ptr [edx+ebx], 0
.text:0040FA71                 add     esp, 2Ch
.text:0040FA74                 pop     ebx
.text:0040FA75                 pop     esi
.text:0040FA76                 pop     edi
.text:0040FA77                 pop     ebp
.text:0040FA78                 retn    8
.text:0040FA78 ; ---------------------------------------------------------------------------
.text:0040FA7B                 align 4
.text:0040FA7C
.text:0040FA7C loc_40FA7C:                             ; CODE XREF: std::string::append(char const*,uint)+37↑j
.text:0040FA7C                                         ; std::string::append(char const*,uint)+3E↑j
.text:0040FA7C                 cmp     [esp+3Ch+this], ecx
.text:0040FA80                 jnb     short loc_40FAAC
.text:0040FA82
.text:0040FA82 loc_40FA82:                             ; CODE XREF: std::string::append(char const*,uint)+A2↓j
.text:0040FA82                 mov     [esp+3Ch+var_3C], ebx ; this
.text:0040FA85                 mov     ecx, eax
.text:0040FA87                 mov     [esp+3Ch+var_20], eax
.text:0040FA8B                 call    __ZNSs7reserveEj ; std::string::reserve(uint)
.text:0040FA90                 push    eax
.text:0040FA91                 mov     eax, [esp+3Ch+var_20]
.text:0040FA95                 mov     ecx, [eax]
.text:0040FA97                 mov     edx, [ecx-0Ch]
.text:0040FA9A                 add     edx, ecx
.text:0040FA9C                 cmp     ebp, 1
.text:0040FA9F                 jnz     short loc_40FA57
.text:0040FAA1
.text:0040FAA1 loc_40FAA1:                             ; CODE XREF: std::string::append(char const*,uint)+45↑j
.text:0040FAA1                 mov     ecx, [esp+3Ch+this]
.text:0040FAA5                 mov     cl, [ecx]
.text:0040FAA7                 mov     [edx], cl
.text:0040FAA9                 jmp     short loc_40FA61
.text:0040FAA9 ; ---------------------------------------------------------------------------
.text:0040FAAB                 align 4
.text:0040FAAC
.text:0040FAAC loc_40FAAC:                             ; CODE XREF: std::string::append(char const*,uint)+70↑j
.text:0040FAAC                 add     edx, ecx
.text:0040FAAE                 cmp     [esp+3Ch+this], edx
.text:0040FAB2                 ja      short loc_40FA82
.text:0040FAB4                 mov     esi, [esp+3Ch+this]
.text:0040FAB8                 sub     esi, ecx
.text:0040FABA                 mov     [esp+3Ch+var_3C], ebx ; this
.text:0040FABD                 mov     ecx, eax
.text:0040FABF                 mov     [esp+3Ch+var_20], eax
.text:0040FAC3                 call    __ZNSs7reserveEj ; std::string::reserve(uint)
.text:0040FAC8                 push    eax
.text:0040FAC9                 mov     eax, [esp+3Ch+var_20]
.text:0040FACD                 mov     ecx, [eax]
.text:0040FACF                 add     esi, ecx
.text:0040FAD1                 mov     [esp+3Ch+this], esi
.text:0040FAD5                 mov     edx, [ecx-0Ch]
.text:0040FAD8                 jmp     loc_40FA50
.text:0040FADD ; ---------------------------------------------------------------------------
.text:0040FADD
.text:0040FADD loc_40FADD:                             ; CODE XREF: std::string::append(char const*,uint)+2A↑j
.text:0040FADD                 mov     [esp+3Ch+var_3C], offset aBasicStringApp ; "basic_string::append"
.text:0040FAE4                 call    __ZSt20__throw_length_errorPKc ; std::__throw_length_error(char const*)
.text:0040FAE4 __ZNSs6appendEPKcj endp
.text:0040FAE4
.text:0040FAE4 ; ---------------------------------------------------------------------------
.text:0040FAE9                 align 4
.text:0040FAEC
.text:0040FAEC ; =============== S U B R O U T I N E =======================================
.text:0040FAEC
.text:0040FAEC
.text:0040FAEC ; _DWORD __stdcall std::string::append(std::string *__hidden this, const std::string *)
.text:0040FAEC                 public __ZNSs6appendERKSs
.text:0040FAEC __ZNSs6appendERKSs proc near            ; CODE XREF: std::string::operator+=(std::string const&)↓j
.text:0040FAEC                                         ; std::operator+<char,std::char_traits<char>,std::allocator<char>>(char const*,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const&)+BB↓p ...
.text:0040FAEC
.text:0040FAEC var_3C          = dword ptr -3Ch
.text:0040FAEC var_20          = dword ptr -20h
.text:0040FAEC this            = dword ptr  4
.text:0040FAEC
.text:0040FAEC                 push    ebp
.text:0040FAED                 push    edi
.text:0040FAEE                 push    esi
.text:0040FAEF                 push    ebx
.text:0040FAF0                 sub     esp, 2Ch
.text:0040FAF3                 mov     eax, ecx
.text:0040FAF5                 mov     edi, [esp+3Ch+this]
.text:0040FAF9                 mov     esi, [edi]
.text:0040FAFB                 mov     ebp, [esi-0Ch]
.text:0040FAFE                 test    ebp, ebp
.text:0040FB00                 jz      short loc_40FB46
.text:0040FB02                 mov     edx, [ecx]
.text:0040FB04                 mov     ecx, [edx-0Ch]
.text:0040FB07                 lea     ebx, [ecx+ebp]
.text:0040FB0A                 cmp     ebx, [edx-8]
.text:0040FB0D                 jbe     short loc_40FB50
.text:0040FB0F
.text:0040FB0F loc_40FB0F:                             ; CODE XREF: std::string::append(std::string const&)+68↓j
.text:0040FB0F                 mov     [esp+3Ch+var_3C], ebx ; this
.text:0040FB12                 mov     ecx, eax
.text:0040FB14                 mov     [esp+3Ch+var_20], eax
.text:0040FB18                 call    __ZNSs7reserveEj ; std::string::reserve(uint)
.text:0040FB1D                 push    eax
.text:0040FB1E                 mov     esi, [edi]
.text:0040FB20                 mov     eax, [esp+3Ch+var_20]
.text:0040FB24                 mov     edx, [eax]
.text:0040FB26                 mov     ecx, [edx-0Ch]
.text:0040FB29
.text:0040FB29 loc_40FB29:                             ; CODE XREF: std::string::append(std::string const&)+6A↓j
.text:0040FB29                 add     edx, ecx
.text:0040FB2B                 cmp     ebp, 1
.text:0040FB2E                 jz      short loc_40FB58
.text:0040FB30                 mov     edi, edx
.text:0040FB32                 mov     ecx, ebp
.text:0040FB34                 rep movsb
.text:0040FB36
.text:0040FB36 loc_40FB36:                             ; CODE XREF: std::string::append(std::string const&)+70↓j
.text:0040FB36                 mov     edx, [eax]
.text:0040FB38                 mov     dword ptr [edx-4], 0
.text:0040FB3F                 mov     [edx-0Ch], ebx
.text:0040FB42                 mov     byte ptr [edx+ebx], 0
.text:0040FB46
.text:0040FB46 loc_40FB46:                             ; CODE XREF: std::string::append(std::string const&)+14↑j
.text:0040FB46                 add     esp, 2Ch
.text:0040FB49                 pop     ebx
.text:0040FB4A                 pop     esi
.text:0040FB4B                 pop     edi
.text:0040FB4C                 pop     ebp
.text:0040FB4D                 retn    4
.text:0040FB50 ; ---------------------------------------------------------------------------
.text:0040FB50
.text:0040FB50 loc_40FB50:                             ; CODE XREF: std::string::append(std::string const&)+21↑j
.text:0040FB50                 cmp     dword ptr [edx-4], 0
.text:0040FB54                 jg      short loc_40FB0F
.text:0040FB56                 jmp     short loc_40FB29
.text:0040FB58 ; ---------------------------------------------------------------------------
.text:0040FB58
.text:0040FB58 loc_40FB58:                             ; CODE XREF: std::string::append(std::string const&)+42↑j
.text:0040FB58                 mov     cl, [esi]
.text:0040FB5A                 mov     [edx], cl
.text:0040FB5C                 jmp     short loc_40FB36
.text:0040FB5C __ZNSs6appendERKSs endp
.text:0040FB5C
.text:0040FB5C ; ---------------------------------------------------------------------------
.text:0040FB5E                 align 10h
.text:0040FB60
.text:0040FB60 ; =============== S U B R O U T I N E =======================================
.text:0040FB60
.text:0040FB60
.text:0040FB60 ; _DWORD __stdcall std::string::append(std::string *__hidden this, const std::string *, unsigned int, unsigned int)
.text:0040FB60                 public __ZNSs6appendERKSsjj
.text:0040FB60 __ZNSs6appendERKSsjj proc near
.text:0040FB60
.text:0040FB60 var_3C          = dword ptr -3Ch
.text:0040FB60 var_20          = dword ptr -20h
.text:0040FB60 this            = dword ptr  4
.text:0040FB60 arg_4           = dword ptr  8
.text:0040FB60 arg_8           = dword ptr  0Ch
.text:0040FB60
.text:0040FB60                 push    ebp
.text:0040FB61                 push    edi
.text:0040FB62                 push    esi
.text:0040FB63                 push    ebx
.text:0040FB64                 sub     esp, 2Ch
.text:0040FB67                 mov     edi, [esp+3Ch+this]
.text:0040FB6B                 mov     esi, [edi]
.text:0040FB6D                 mov     ebp, [esi-0Ch]
.text:0040FB70                 cmp     [esp+3Ch+arg_4], ebp
.text:0040FB74                 ja      short loc_40FBF2
.text:0040FB76                 mov     eax, ecx
.text:0040FB78                 sub     ebp, [esp+3Ch+arg_4]
.text:0040FB7C                 cmp     ebp, [esp+3Ch+arg_8]
.text:0040FB80                 ja      short loc_40FBDC
.text:0040FB82
.text:0040FB82 loc_40FB82:                             ; CODE XREF: std::string::append(std::string const&,uint,uint)+80↓j
.text:0040FB82                 test    ebp, ebp
.text:0040FB84                 jz      short loc_40FBCF
.text:0040FB86                 mov     edx, [eax]
.text:0040FB88                 mov     ecx, [edx-0Ch]
.text:0040FB8B                 lea     ebx, [ebp+ecx+0]
.text:0040FB8F                 cmp     ebx, [edx-8]
.text:0040FB92                 jbe     short loc_40FBE4
.text:0040FB94
.text:0040FB94 loc_40FB94:                             ; CODE XREF: std::string::append(std::string const&,uint,uint)+88↓j
.text:0040FB94                 mov     [esp+3Ch+var_3C], ebx ; this
.text:0040FB97                 mov     ecx, eax
.text:0040FB99                 mov     [esp+3Ch+var_20], eax
.text:0040FB9D                 call    __ZNSs7reserveEj ; std::string::reserve(uint)
.text:0040FBA2                 push    eax
.text:0040FBA3                 mov     esi, [edi]
.text:0040FBA5                 mov     eax, [esp+3Ch+var_20]
.text:0040FBA9                 mov     edx, [eax]
.text:0040FBAB                 mov     ecx, [edx-0Ch]
.text:0040FBAE
.text:0040FBAE loc_40FBAE:                             ; CODE XREF: std::string::append(std::string const&,uint,uint)+8A↓j
.text:0040FBAE                 add     esi, [esp+3Ch+arg_4]
.text:0040FBB2                 add     edx, ecx
.text:0040FBB4                 cmp     ebp, 1
.text:0040FBB7                 jz      short loc_40FBEC
.text:0040FBB9                 mov     edi, edx
.text:0040FBBB                 mov     ecx, ebp
.text:0040FBBD                 rep movsb
.text:0040FBBF
.text:0040FBBF loc_40FBBF:                             ; CODE XREF: std::string::append(std::string const&,uint,uint)+90↓j
.text:0040FBBF                 mov     edx, [eax]
.text:0040FBC1                 mov     dword ptr [edx-4], 0
.text:0040FBC8                 mov     [edx-0Ch], ebx
.text:0040FBCB                 mov     byte ptr [edx+ebx], 0
.text:0040FBCF
.text:0040FBCF loc_40FBCF:                             ; CODE XREF: std::string::append(std::string const&,uint,uint)+24↑j
.text:0040FBCF                 add     esp, 2Ch
.text:0040FBD2                 pop     ebx
.text:0040FBD3                 pop     esi
.text:0040FBD4                 pop     edi
.text:0040FBD5                 pop     ebp
.text:0040FBD6                 retn    0Ch
.text:0040FBD6 ; ---------------------------------------------------------------------------
.text:0040FBD9                 align 4
.text:0040FBDC
.text:0040FBDC loc_40FBDC:                             ; CODE XREF: std::string::append(std::string const&,uint,uint)+20↑j
.text:0040FBDC                 mov     ebp, [esp+3Ch+arg_8]
.text:0040FBE0                 jmp     short loc_40FB82
.text:0040FBE0 ; ---------------------------------------------------------------------------
.text:0040FBE2                 align 4
.text:0040FBE4
.text:0040FBE4 loc_40FBE4:                             ; CODE XREF: std::string::append(std::string const&,uint,uint)+32↑j
.text:0040FBE4                 cmp     dword ptr [edx-4], 0
.text:0040FBE8                 jg      short loc_40FB94
.text:0040FBEA                 jmp     short loc_40FBAE
.text:0040FBEC ; ---------------------------------------------------------------------------
.text:0040FBEC
.text:0040FBEC loc_40FBEC:                             ; CODE XREF: std::string::append(std::string const&,uint,uint)+57↑j
.text:0040FBEC                 mov     cl, [esi]
.text:0040FBEE                 mov     [edx], cl
.text:0040FBF0                 jmp     short loc_40FBBF
.text:0040FBF2 ; ---------------------------------------------------------------------------
.text:0040FBF2
.text:0040FBF2 loc_40FBF2:                             ; CODE XREF: std::string::append(std::string const&,uint,uint)+14↑j
.text:0040FBF2                 mov     [esp+3Ch+var_3C], offset aBasicStringApp ; "basic_string::append"
.text:0040FBF9                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:0040FBF9 __ZNSs6appendERKSsjj endp
.text:0040FBF9
.text:0040FBF9 ; ---------------------------------------------------------------------------
.text:0040FBFE                 align 10h
.text:0040FC00
.text:0040FC00 ; =============== S U B R O U T I N E =======================================
.text:0040FC00
.text:0040FC00
.text:0040FC00 ; std::string::append(std::initializer_list<char>)
.text:0040FC00                 public __ZNSs6appendESt16initializer_listIcE
.text:0040FC00 __ZNSs6appendESt16initializer_listIcE proc near
.text:0040FC00                 jmp     __ZNSs6appendEPKcj ; std::string::append(char const*,uint)
.text:0040FC00 __ZNSs6appendESt16initializer_listIcE endp
.text:0040FC00
.text:0040FC00 ; ---------------------------------------------------------------------------
.text:0040FC05                 align 4
.text:0040FC08
.text:0040FC08 ; =============== S U B R O U T I N E =======================================
.text:0040FC08
.text:0040FC08
.text:0040FC08 ; _DWORD __stdcall std::string::append(std::string *__hidden this, char, char)
.text:0040FC08                 public __ZNSs6appendEjc
.text:0040FC08 __ZNSs6appendEjc proc near              ; CODE XREF: std::string::resize(uint,char)+56↓j
.text:0040FC08
.text:0040FC08 var_1C          = dword ptr -1Ch
.text:0040FC08 var_18          = dword ptr -18h
.text:0040FC08 this            = dword ptr  4
.text:0040FC08 arg_4           = byte ptr  8
.text:0040FC08
.text:0040FC08                 push    ebx
.text:0040FC09                 sub     esp, 18h
.text:0040FC0C                 mov     ebx, ecx
.text:0040FC0E                 mov     eax, [esp+1Ch+this]
.text:0040FC12                 movsx   edx, [esp+1Ch+arg_4]
.text:0040FC17                 test    eax, eax
.text:0040FC19                 jz      short loc_40FC2A
.text:0040FC1B                 mov     [esp+1Ch+var_18], edx
.text:0040FC1F                 mov     [esp+1Ch+var_1C], eax
.text:0040FC22                 call    __ZNSs6appendEjc_part_22 ; std::string::append(uint,char) [clone]
.text:0040FC27                 sub     esp, 8
.text:0040FC2A
.text:0040FC2A loc_40FC2A:                             ; CODE XREF: std::string::append(uint,char)+11↑j
.text:0040FC2A                 mov     eax, ebx
.text:0040FC2C                 add     esp, 18h
.text:0040FC2F                 pop     ebx
.text:0040FC30                 retn    8
.text:0040FC30 __ZNSs6appendEjc endp
.text:0040FC30
.text:0040FC30 ; ---------------------------------------------------------------------------
.text:0040FC33                 align 4
.text:0040FC34
.text:0040FC34 ; =============== S U B R O U T I N E =======================================
.text:0040FC34
.text:0040FC34
.text:0040FC34 ; std::string::assign(std::string &&)
.text:0040FC34                 public __ZNSs6assignEOSs
.text:0040FC34 __ZNSs6assignEOSs proc near
.text:0040FC34
.text:0040FC34 arg_0           = dword ptr  4
.text:0040FC34
.text:0040FC34                 push    ebx
.text:0040FC35                 mov     eax, ecx
.text:0040FC37                 mov     ebx, [esp+4+arg_0]
.text:0040FC3B                 mov     ecx, [ecx]
.text:0040FC3D                 mov     edx, [ecx-4]
.text:0040FC40                 test    edx, edx
.text:0040FC42                 js      short loc_40FC5C
.text:0040FC44
.text:0040FC44 loc_40FC44:                             ; CODE XREF: std::string::assign(std::string &&)+2F↓j
.text:0040FC44                 mov     edx, [ebx]
.text:0040FC46                 cmp     dword ptr [edx-4], 0
.text:0040FC4A                 jns     short loc_40FC53
.text:0040FC4C                 mov     dword ptr [edx-4], 0
.text:0040FC53
.text:0040FC53 loc_40FC53:                             ; CODE XREF: std::string::assign(std::string &&)+16↑j
.text:0040FC53                 mov     [eax], edx
.text:0040FC55                 mov     [ebx], ecx
.text:0040FC57                 pop     ebx
.text:0040FC58                 retn    4
.text:0040FC58 ; ---------------------------------------------------------------------------
.text:0040FC5B                 align 4
.text:0040FC5C
.text:0040FC5C loc_40FC5C:                             ; CODE XREF: std::string::assign(std::string &&)+E↑j
.text:0040FC5C                 mov     dword ptr [ecx-4], 0
.text:0040FC63                 jmp     short loc_40FC44
.text:0040FC63 __ZNSs6assignEOSs endp
.text:0040FC63
.text:0040FC63 ; ---------------------------------------------------------------------------
.text:0040FC65                 align 4
.text:0040FC68
.text:0040FC68 ; =============== S U B R O U T I N E =======================================
.text:0040FC68
.text:0040FC68
.text:0040FC68 ; _DWORD __stdcall std::string::assign(std::string *__hidden this, const char *)
.text:0040FC68                 public __ZNSs6assignEPKc
.text:0040FC68 __ZNSs6assignEPKc proc near
.text:0040FC68
.text:0040FC68 var_1C          = dword ptr -1Ch
.text:0040FC68 var_18          = dword ptr -18h
.text:0040FC68 this            = dword ptr  4
.text:0040FC68
.text:0040FC68                 push    edi
.text:0040FC69                 push    ebx
.text:0040FC6A                 sub     esp, 14h
.text:0040FC6D                 mov     ebx, ecx
.text:0040FC6F                 mov     edx, [esp+1Ch+this]
.text:0040FC73                 mov     edi, edx
.text:0040FC75                 xor     eax, eax
.text:0040FC77                 mov     ecx, 0FFFFFFFFh
.text:0040FC7C                 repne scasb
.text:0040FC7E                 not     ecx
.text:0040FC80                 lea     eax, [ecx-1]
.text:0040FC83                 mov     [esp+1Ch+var_18], eax ; size_t
.text:0040FC87                 mov     [esp+1Ch+var_1C], edx ; this
.text:0040FC8A                 mov     ecx, ebx
.text:0040FC8C                 call    __ZNSs6assignEPKcj ; std::string::assign(char const*,uint)
.text:0040FC91                 sub     esp, 8
.text:0040FC94                 add     esp, 14h
.text:0040FC97                 pop     ebx
.text:0040FC98                 pop     edi
.text:0040FC99                 retn    4
.text:0040FC99 __ZNSs6assignEPKc endp
.text:0040FC99
.text:0040FC9C
.text:0040FC9C ; =============== S U B R O U T I N E =======================================
.text:0040FC9C
.text:0040FC9C
.text:0040FC9C ; _DWORD __stdcall std::string::assign(std::string *__hidden this, size_t, unsigned int)
.text:0040FC9C                 public __ZNSs6assignEPKcj
.text:0040FC9C __ZNSs6assignEPKcj proc near            ; CODE XREF: `anonymous namespace'::future_error_category::message(int)+95↑p
.text:0040FC9C                                         ; `anonymous namespace'::future_error_category::message(int)+DD↑p ...
.text:0040FC9C
.text:0040FC9C var_2C          = dword ptr -2Ch
.text:0040FC9C var_28          = dword ptr -28h
.text:0040FC9C var_24          = dword ptr -24h
.text:0040FC9C var_20          = dword ptr -20h
.text:0040FC9C this            = dword ptr  4
.text:0040FC9C arg_4           = dword ptr  8
.text:0040FC9C
.text:0040FC9C                 push    ebp
.text:0040FC9D                 push    edi
.text:0040FC9E                 push    esi
.text:0040FC9F                 push    ebx
.text:0040FCA0                 sub     esp, 1Ch
.text:0040FCA3                 mov     ebx, ecx
.text:0040FCA5                 mov     esi, [esp+2Ch+this]
.text:0040FCA9                 mov     ebp, [esp+2Ch+arg_4]
.text:0040FCAD                 mov     edx, [ecx]
.text:0040FCAF                 mov     eax, [edx-0Ch]
.text:0040FCB2                 cmp     ebp, 3FFFFFFCh
.text:0040FCB8                 ja      loc_40FD54
.text:0040FCBE                 cmp     esi, edx
.text:0040FCC0                 jnb     short loc_40FCEC
.text:0040FCC2
.text:0040FCC2 loc_40FCC2:                             ; CODE XREF: std::string::assign(char const*,uint)+55↓j
.text:0040FCC2                                         ; std::string::assign(char const*,uint)+5C↓j
.text:0040FCC2                 mov     [esp+2Ch+var_20], ebp ; char *
.text:0040FCC6                 mov     [esp+2Ch+var_24], esi ; unsigned int
.text:0040FCCA                 mov     [esp+2Ch+var_28], eax ; unsigned int
.text:0040FCCE                 mov     [esp+2Ch+var_2C], 0 ; this
.text:0040FCD5                 mov     ecx, ebx
.text:0040FCD7                 call    __ZNSs15_M_replace_safeEjjPKcj ; std::string::_M_replace_safe(uint,uint,char const*,uint)
.text:0040FCDC                 sub     esp, 10h
.text:0040FCDF                 add     esp, 1Ch
.text:0040FCE2                 pop     ebx
.text:0040FCE3                 pop     esi
.text:0040FCE4                 pop     edi
.text:0040FCE5                 pop     ebp
.text:0040FCE6                 retn    8
.text:0040FCE6 ; ---------------------------------------------------------------------------
.text:0040FCE9                 align 4
.text:0040FCEC
.text:0040FCEC loc_40FCEC:                             ; CODE XREF: std::string::assign(char const*,uint)+24↑j
.text:0040FCEC                 lea     ecx, [edx+eax]
.text:0040FCEF                 cmp     esi, ecx
.text:0040FCF1                 ja      short loc_40FCC2
.text:0040FCF3                 mov     edi, [edx-4]
.text:0040FCF6                 test    edi, edi
.text:0040FCF8                 jg      short loc_40FCC2
.text:0040FCFA                 mov     eax, esi
.text:0040FCFC                 sub     eax, edx
.text:0040FCFE                 cmp     ebp, eax
.text:0040FD00                 jbe     short loc_40FD20
.text:0040FD02                 test    eax, eax
.text:0040FD04                 jnz     short loc_40FD30
.text:0040FD06
.text:0040FD06 loc_40FD06:                             ; CODE XREF: std::string::assign(char const*,uint)+91↓j
.text:0040FD06                                         ; std::string::assign(char const*,uint)+AB↓j ...
.text:0040FD06                 mov     dword ptr [edx-4], 0
.text:0040FD0D                 mov     [edx-0Ch], ebp
.text:0040FD10                 mov     byte ptr [edx+ebp], 0
.text:0040FD14                 mov     eax, ebx
.text:0040FD16                 add     esp, 1Ch
.text:0040FD19                 pop     ebx
.text:0040FD1A                 pop     esi
.text:0040FD1B                 pop     edi
.text:0040FD1C                 pop     ebp
.text:0040FD1D                 retn    8
.text:0040FD20 ; ---------------------------------------------------------------------------
.text:0040FD20
.text:0040FD20 loc_40FD20:                             ; CODE XREF: std::string::assign(char const*,uint)+64↑j
.text:0040FD20                 cmp     ebp, 1
.text:0040FD23                 jz      short loc_40FD4C
.text:0040FD25                 mov     edi, edx
.text:0040FD27                 mov     ecx, ebp
.text:0040FD29                 rep movsb
.text:0040FD2B                 mov     edx, [ebx]
.text:0040FD2D                 jmp     short loc_40FD06
.text:0040FD2D ; ---------------------------------------------------------------------------
.text:0040FD2F                 align 10h
.text:0040FD30
.text:0040FD30 loc_40FD30:                             ; CODE XREF: std::string::assign(char const*,uint)+68↑j
.text:0040FD30                 cmp     ebp, 1
.text:0040FD33                 jz      short loc_40FD4C
.text:0040FD35                 mov     [esp+2Ch+var_24], ebp ; size_t
.text:0040FD39                 mov     [esp+2Ch+var_28], esi ; void *
.text:0040FD3D                 mov     [esp+2Ch+var_2C], edx ; void *
.text:0040FD40                 call    _memmove
.text:0040FD45                 mov     edx, [ebx]
.text:0040FD47                 jmp     short loc_40FD06
.text:0040FD47 ; ---------------------------------------------------------------------------
.text:0040FD49                 align 4
.text:0040FD4C
.text:0040FD4C loc_40FD4C:                             ; CODE XREF: std::string::assign(char const*,uint)+87↑j
.text:0040FD4C                                         ; std::string::assign(char const*,uint)+97↑j
.text:0040FD4C                 mov     al, [esi]
.text:0040FD4E                 mov     [edx], al
.text:0040FD50                 mov     edx, [ebx]
.text:0040FD52                 jmp     short loc_40FD06
.text:0040FD54 ; ---------------------------------------------------------------------------
.text:0040FD54
.text:0040FD54 loc_40FD54:                             ; CODE XREF: std::string::assign(char const*,uint)+1C↑j
.text:0040FD54                 mov     [esp+2Ch+var_2C], offset aBasicStringAss ; "basic_string::assign"
.text:0040FD5B                 call    __ZSt20__throw_length_errorPKc ; std::__throw_length_error(char const*)
.text:0040FD5B __ZNSs6assignEPKcj endp
.text:0040FD5B
.text:0040FD60
.text:0040FD60 ; =============== S U B R O U T I N E =======================================
.text:0040FD60
.text:0040FD60
.text:0040FD60 ; _DWORD __stdcall std::string::assign(std::string *__hidden this, const std::string *)
.text:0040FD60                 public __ZNSs6assignERKSs
.text:0040FD60 __ZNSs6assignERKSs proc near            ; CODE XREF: std::string::operator=(std::string const&)↓j
.text:0040FD60
.text:0040FD60 var_2C          = dword ptr -2Ch
.text:0040FD60 var_28          = dword ptr -28h
.text:0040FD60 var_D           = byte ptr -0Dh
.text:0040FD60 this            = dword ptr  4
.text:0040FD60
.text:0040FD60                 push    edi
.text:0040FD61                 push    esi
.text:0040FD62                 push    ebx
.text:0040FD63                 sub     esp, 20h
.text:0040FD66                 mov     esi, ecx
.text:0040FD68                 mov     edi, [ecx]
.text:0040FD6A                 mov     eax, [esp+2Ch+this]
.text:0040FD6E                 mov     ebx, [eax]
.text:0040FD70                 lea     ecx, [ebx-0Ch]
.text:0040FD73                 lea     eax, [edi-0Ch]
.text:0040FD76                 cmp     ecx, eax
.text:0040FD78                 jz      short loc_40FDA7
.text:0040FD7A                 mov     eax, [ebx-4]
.text:0040FD7D                 test    eax, eax
.text:0040FD7F                 js      short loc_40FDB4
.text:0040FD81                 mov     edx, ds:__CRT_MT
.text:0040FD87                 test    edx, edx
.text:0040FD89                 jnz     short loc_40FE00
.text:0040FD8B                 inc     eax
.text:0040FD8C                 mov     [ebx-4], eax
.text:0040FD8F
.text:0040FD8F loc_40FD8F:                             ; CODE XREF: std::string::assign(std::string const&)+B5↓j
.text:0040FD8F                 mov     eax, ds:__CRT_MT
.text:0040FD94                 test    eax, eax
.text:0040FD96                 jnz     short loc_40FDD8
.text:0040FD98
.text:0040FD98 loc_40FD98:                             ; CODE XREF: std::string::assign(std::string const&)+76↓j
.text:0040FD98                 mov     eax, [edi-4]
.text:0040FD9B                 lea     edx, [eax-1]
.text:0040FD9E                 mov     [edi-4], edx
.text:0040FDA1                 test    eax, eax
.text:0040FDA3                 jle     short loc_40FDEF
.text:0040FDA5
.text:0040FDA5 loc_40FDA5:                             ; CODE XREF: std::string::assign(std::string const&)+8D↓j
.text:0040FDA5                 mov     [esi], ebx
.text:0040FDA7
.text:0040FDA7 loc_40FDA7:                             ; CODE XREF: std::string::assign(std::string const&)+18↑j
.text:0040FDA7                                         ; std::string::assign(std::string const&)+9C↓j
.text:0040FDA7                 mov     eax, esi
.text:0040FDA9                 add     esp, 20h
.text:0040FDAC                 pop     ebx
.text:0040FDAD                 pop     esi
.text:0040FDAE                 pop     edi
.text:0040FDAF                 retn    4
.text:0040FDAF ; ---------------------------------------------------------------------------
.text:0040FDB2                 align 4
.text:0040FDB4
.text:0040FDB4 loc_40FDB4:                             ; CODE XREF: std::string::assign(std::string const&)+1F↑j
.text:0040FDB4                 mov     [esp+2Ch+var_28], 0
.text:0040FDBC                 lea     eax, [esp+2Ch+var_D]
.text:0040FDC0                 mov     [esp+2Ch+var_2C], eax
.text:0040FDC3                 call    __ZNSs4_Rep8_M_cloneERKSaIcEj ; std::string::_Rep::_M_clone(std::allocator<char> const&,uint)
.text:0040FDC8                 sub     esp, 8
.text:0040FDCB                 mov     ebx, eax
.text:0040FDCD                 mov     edi, [esi]
.text:0040FDCF                 mov     eax, ds:__CRT_MT
.text:0040FDD4                 test    eax, eax
.text:0040FDD6                 jz      short loc_40FD98
.text:0040FDD8
.text:0040FDD8 loc_40FDD8:                             ; CODE XREF: std::string::assign(std::string const&)+36↑j
.text:0040FDD8                 mov     [esp+2Ch+var_28], 0FFFFFFFFh ; int
.text:0040FDE0                 lea     eax, [edi-4]
.text:0040FDE3                 mov     [esp+2Ch+var_2C], eax ; volatile int *
.text:0040FDE6                 call    __ZN9__gnu_cxx18__exchange_and_addEPVii ; __gnu_cxx::__exchange_and_add(int volatile*,int)
.text:0040FDEB                 test    eax, eax
.text:0040FDED                 jg      short loc_40FDA5
.text:0040FDEF
.text:0040FDEF loc_40FDEF:                             ; CODE XREF: std::string::assign(std::string const&)+43↑j
.text:0040FDEF                 sub     edi, 0Ch
.text:0040FDF2                 mov     [esp+2Ch+var_2C], edi ; void *
.text:0040FDF5                 call    __ZdlPv         ; operator delete(void *)
.text:0040FDFA                 mov     [esi], ebx
.text:0040FDFC                 jmp     short loc_40FDA7
.text:0040FDFC ; ---------------------------------------------------------------------------
.text:0040FDFE                 align 10h
.text:0040FE00
.text:0040FE00 loc_40FE00:                             ; CODE XREF: std::string::assign(std::string const&)+29↑j
.text:0040FE00                 mov     [esp+2Ch+var_28], 1 ; int
.text:0040FE08                 lea     eax, [ebx-4]
.text:0040FE0B                 mov     [esp+2Ch+var_2C], eax ; volatile int *
.text:0040FE0E                 call    __ZN9__gnu_cxx12__atomic_addEPVii ; __gnu_cxx::__atomic_add(int volatile*,int)
.text:0040FE13                 mov     edi, [esi]
.text:0040FE15                 jmp     loc_40FD8F
.text:0040FE15 __ZNSs6assignERKSs endp
.text:0040FE15
.text:0040FE15 ; ---------------------------------------------------------------------------
.text:0040FE1A                 align 4
.text:0040FE1C
.text:0040FE1C ; =============== S U B R O U T I N E =======================================
.text:0040FE1C
.text:0040FE1C
.text:0040FE1C ; _DWORD __stdcall std::string::assign(std::string *__hidden this, const std::string *, unsigned int, unsigned int)
.text:0040FE1C                 public __ZNSs6assignERKSsjj
.text:0040FE1C __ZNSs6assignERKSsjj proc near
.text:0040FE1C
.text:0040FE1C var_1C          = dword ptr -1Ch
.text:0040FE1C var_18          = dword ptr -18h
.text:0040FE1C this            = dword ptr  4
.text:0040FE1C arg_4           = dword ptr  8
.text:0040FE1C arg_8           = dword ptr  0Ch
.text:0040FE1C
.text:0040FE1C                 push    esi
.text:0040FE1D                 push    ebx
.text:0040FE1E                 sub     esp, 14h
.text:0040FE21                 mov     eax, [esp+1Ch+arg_4]
.text:0040FE25                 mov     edx, [esp+1Ch+this]
.text:0040FE29                 mov     esi, [edx]
.text:0040FE2B                 mov     ebx, [esi-0Ch]
.text:0040FE2E                 mov     edx, ebx
.text:0040FE30                 sub     edx, eax
.text:0040FE32                 cmp     edx, [esp+1Ch+arg_8]
.text:0040FE36                 jbe     short loc_40FE3C
.text:0040FE38                 mov     edx, [esp+1Ch+arg_8]
.text:0040FE3C
.text:0040FE3C loc_40FE3C:                             ; CODE XREF: std::string::assign(std::string const&,uint,uint)+1A↑j
.text:0040FE3C                 cmp     eax, ebx
.text:0040FE3E                 ja      short loc_40FE59
.text:0040FE40                 mov     [esp+1Ch+var_18], edx ; size_t
.text:0040FE44                 add     eax, esi
.text:0040FE46                 mov     [esp+1Ch+var_1C], eax ; this
.text:0040FE49                 call    __ZNSs6assignEPKcj ; std::string::assign(char const*,uint)
.text:0040FE4E                 sub     esp, 8
.text:0040FE51                 add     esp, 14h
.text:0040FE54                 pop     ebx
.text:0040FE55                 pop     esi
.text:0040FE56                 retn    0Ch
.text:0040FE59 ; ---------------------------------------------------------------------------
.text:0040FE59
.text:0040FE59 loc_40FE59:                             ; CODE XREF: std::string::assign(std::string const&,uint,uint)+22↑j
.text:0040FE59                 mov     [esp+1Ch+var_1C], offset aBasicStringAss ; "basic_string::assign"
.text:0040FE60                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:0040FE60 __ZNSs6assignERKSsjj endp
.text:0040FE60
.text:0040FE60 ; ---------------------------------------------------------------------------
.text:0040FE65                 align 4
.text:0040FE68
.text:0040FE68 ; =============== S U B R O U T I N E =======================================
.text:0040FE68
.text:0040FE68
.text:0040FE68 ; std::string::assign(std::initializer_list<char>)
.text:0040FE68                 public __ZNSs6assignESt16initializer_listIcE
.text:0040FE68 __ZNSs6assignESt16initializer_listIcE proc near
.text:0040FE68                 jmp     __ZNSs6assignEPKcj ; std::string::assign(char const*,uint)
.text:0040FE68 __ZNSs6assignESt16initializer_listIcE endp
.text:0040FE68
.text:0040FE68 ; ---------------------------------------------------------------------------
.text:0040FE6D                 align 10h
.text:0040FE70
.text:0040FE70 ; =============== S U B R O U T I N E =======================================
.text:0040FE70
.text:0040FE70
.text:0040FE70 ; _DWORD __stdcall std::string::assign(std::string *__hidden this, char, char)
.text:0040FE70                 public __ZNSs6assignEjc
.text:0040FE70 __ZNSs6assignEjc proc near
.text:0040FE70
.text:0040FE70 var_1C          = dword ptr -1Ch
.text:0040FE70 var_18          = dword ptr -18h
.text:0040FE70 var_14          = dword ptr -14h
.text:0040FE70 var_10          = dword ptr -10h
.text:0040FE70 this            = dword ptr  4
.text:0040FE70 arg_4           = byte ptr  8
.text:0040FE70
.text:0040FE70                 sub     esp, 1Ch
.text:0040FE73                 movsx   eax, [esp+1Ch+arg_4]
.text:0040FE78                 mov     [esp+1Ch+var_10], eax ; unsigned int
.text:0040FE7C                 mov     eax, [esp+1Ch+this]
.text:0040FE80                 mov     [esp+1Ch+var_14], eax ; unsigned int
.text:0040FE84                 mov     eax, [ecx]
.text:0040FE86                 mov     eax, [eax-0Ch]
.text:0040FE89                 mov     [esp+1Ch+var_18], eax ; unsigned int
.text:0040FE8D                 mov     [esp+1Ch+var_1C], 0 ; this
.text:0040FE94                 call    __ZNSs14_M_replace_auxEjjjc ; std::string::_M_replace_aux(uint,uint,uint,char)
.text:0040FE99                 sub     esp, 10h
.text:0040FE9C                 add     esp, 1Ch
.text:0040FE9F                 retn    8
.text:0040FE9F __ZNSs6assignEjc endp
.text:0040FE9F
.text:0040FE9F ; ---------------------------------------------------------------------------
.text:0040FEA2                 align 4
.text:0040FEA4
.text:0040FEA4 ; =============== S U B R O U T I N E =======================================
.text:0040FEA4
.text:0040FEA4
.text:0040FEA4 ; std::string::insert(__gnu_cxx::__normal_iterator<char *, std::string>, std::initializer_list<char>)
.text:0040FEA4                 public __ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEESt16initializer_listIcE
.text:0040FEA4 __ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEESt16initializer_listIcE proc near
.text:0040FEA4
.text:0040FEA4 arg_0           = dword ptr  4
.text:0040FEA4
.text:0040FEA4                 mov     eax, [esp+arg_0]
.text:0040FEA8                 sub     eax, [ecx]
.text:0040FEAA                 mov     [esp+arg_0], eax ; this
.text:0040FEAE                 jmp     __ZNSs6insertEjPKcj ; std::string::insert(uint,char const*,uint)
.text:0040FEAE __ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEESt16initializer_listIcE endp
.text:0040FEAE
.text:0040FEAE ; ---------------------------------------------------------------------------
.text:0040FEB3                 align 4
.text:0040FEB4
.text:0040FEB4 ; =============== S U B R O U T I N E =======================================
.text:0040FEB4
.text:0040FEB4
.text:0040FEB4 ; std::string::insert(__gnu_cxx::__normal_iterator<char *, std::string>, char)
.text:0040FEB4                 public __ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEc
.text:0040FEB4 __ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEc proc near
.text:0040FEB4
.text:0040FEB4 var_1C          = dword ptr -1Ch
.text:0040FEB4 var_18          = dword ptr -18h
.text:0040FEB4 var_14          = dword ptr -14h
.text:0040FEB4 var_10          = dword ptr -10h
.text:0040FEB4 arg_0           = dword ptr  4
.text:0040FEB4 arg_4           = byte ptr  8
.text:0040FEB4
.text:0040FEB4                 push    esi
.text:0040FEB5                 push    ebx
.text:0040FEB6                 sub     esp, 14h
.text:0040FEB9                 mov     esi, ecx
.text:0040FEBB                 mov     ebx, [esp+1Ch+arg_0]
.text:0040FEBF                 sub     ebx, [ecx]
.text:0040FEC1                 movsx   eax, [esp+1Ch+arg_4]
.text:0040FEC6                 mov     [esp+1Ch+var_10], eax ; unsigned int
.text:0040FECA                 mov     [esp+1Ch+var_14], 1 ; unsigned int
.text:0040FED2                 mov     [esp+1Ch+var_18], 0 ; unsigned int
.text:0040FEDA                 mov     [esp+1Ch+var_1C], ebx ; this
.text:0040FEDD                 call    __ZNSs14_M_replace_auxEjjjc ; std::string::_M_replace_aux(uint,uint,uint,char)
.text:0040FEE2                 sub     esp, 10h
.text:0040FEE5                 mov     eax, [esi]
.text:0040FEE7                 mov     dword ptr [eax-4], 0FFFFFFFFh
.text:0040FEEE                 add     eax, ebx
.text:0040FEF0                 add     esp, 14h
.text:0040FEF3                 pop     ebx
.text:0040FEF4                 pop     esi
.text:0040FEF5                 retn    8
.text:0040FEF5 __ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEc endp
.text:0040FEF5
.text:0040FEF8
.text:0040FEF8 ; =============== S U B R O U T I N E =======================================
.text:0040FEF8
.text:0040FEF8
.text:0040FEF8 ; std::string::insert(__gnu_cxx::__normal_iterator<char *, std::string>, unsigned int, char)
.text:0040FEF8                 public __ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEjc
.text:0040FEF8 __ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEjc proc near
.text:0040FEF8
.text:0040FEF8 var_1C          = dword ptr -1Ch
.text:0040FEF8 var_18          = dword ptr -18h
.text:0040FEF8 var_14          = dword ptr -14h
.text:0040FEF8 var_10          = dword ptr -10h
.text:0040FEF8 arg_0           = dword ptr  4
.text:0040FEF8 arg_4           = dword ptr  8
.text:0040FEF8 arg_8           = byte ptr  0Ch
.text:0040FEF8
.text:0040FEF8                 sub     esp, 1Ch
.text:0040FEFB                 mov     eax, [esp+1Ch+arg_0]
.text:0040FEFF                 movsx   edx, [esp+1Ch+arg_8]
.text:0040FF04                 mov     [esp+1Ch+var_10], edx ; unsigned int
.text:0040FF08                 mov     edx, [esp+1Ch+arg_4]
.text:0040FF0C                 mov     [esp+1Ch+var_14], edx ; unsigned int
.text:0040FF10                 mov     [esp+1Ch+var_18], 0 ; unsigned int
.text:0040FF18                 sub     eax, [ecx]
.text:0040FF1A                 mov     [esp+1Ch+var_1C], eax ; this
.text:0040FF1D                 call    __ZNSs14_M_replace_auxEjjjc ; std::string::_M_replace_aux(uint,uint,uint,char)
.text:0040FF22                 sub     esp, 10h
.text:0040FF25                 add     esp, 1Ch
.text:0040FF28                 retn    0Ch
.text:0040FF28 __ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEjc endp
.text:0040FF28
.text:0040FF28 ; ---------------------------------------------------------------------------
.text:0040FF2B                 align 4
.text:0040FF2C
.text:0040FF2C ; =============== S U B R O U T I N E =======================================
.text:0040FF2C
.text:0040FF2C
.text:0040FF2C ; _DWORD __stdcall std::string::insert(std::string *__hidden this, unsigned int, const char *)
.text:0040FF2C                 public __ZNSs6insertEjPKc
.text:0040FF2C __ZNSs6insertEjPKc proc near
.text:0040FF2C
.text:0040FF2C var_1C          = dword ptr -1Ch
.text:0040FF2C var_18          = dword ptr -18h
.text:0040FF2C var_14          = dword ptr -14h
.text:0040FF2C this            = dword ptr  4
.text:0040FF2C arg_4           = dword ptr  8
.text:0040FF2C
.text:0040FF2C                 push    edi
.text:0040FF2D                 push    ebx
.text:0040FF2E                 sub     esp, 14h
.text:0040FF31                 mov     ebx, ecx
.text:0040FF33                 mov     edx, [esp+1Ch+arg_4]
.text:0040FF37                 mov     edi, edx
.text:0040FF39                 xor     eax, eax
.text:0040FF3B                 mov     ecx, 0FFFFFFFFh
.text:0040FF40                 repne scasb
.text:0040FF42                 not     ecx
.text:0040FF44                 lea     eax, [ecx-1]
.text:0040FF47                 mov     [esp+1Ch+var_14], eax ; char *
.text:0040FF4B                 mov     [esp+1Ch+var_18], edx ; unsigned int
.text:0040FF4F                 mov     eax, [esp+1Ch+this]
.text:0040FF53                 mov     [esp+1Ch+var_1C], eax ; this
.text:0040FF56                 mov     ecx, ebx
.text:0040FF58                 call    __ZNSs6insertEjPKcj ; std::string::insert(uint,char const*,uint)
.text:0040FF5D                 sub     esp, 0Ch
.text:0040FF60                 add     esp, 14h
.text:0040FF63                 pop     ebx
.text:0040FF64                 pop     edi
.text:0040FF65                 retn    8
.text:0040FF65 __ZNSs6insertEjPKc endp
.text:0040FF65
.text:0040FF68
.text:0040FF68 ; =============== S U B R O U T I N E =======================================
.text:0040FF68
.text:0040FF68
.text:0040FF68 ; _DWORD __stdcall std::string::insert(std::string *__hidden this, unsigned int, const char *, unsigned int)
.text:0040FF68                 public __ZNSs6insertEjPKcj
.text:0040FF68 __ZNSs6insertEjPKcj proc near           ; CODE XREF: std::string::insert(__gnu_cxx::__normal_iterator<char *,std::string>,std::initializer_list<char>)+A↑j
.text:0040FF68                                         ; std::string::insert(uint,char const*)+2C↑p ...
.text:0040FF68
.text:0040FF68 var_3C          = dword ptr -3Ch
.text:0040FF68 var_38          = dword ptr -38h
.text:0040FF68 var_34          = dword ptr -34h
.text:0040FF68 var_30          = dword ptr -30h
.text:0040FF68 var_20          = dword ptr -20h
.text:0040FF68 this            = dword ptr  4
.text:0040FF68 arg_4           = dword ptr  8
.text:0040FF68 arg_8           = dword ptr  0Ch
.text:0040FF68
.text:0040FF68                 push    ebp
.text:0040FF69                 push    edi
.text:0040FF6A                 push    esi
.text:0040FF6B                 push    ebx
.text:0040FF6C                 sub     esp, 2Ch
.text:0040FF6F                 mov     eax, ecx
.text:0040FF71                 mov     ebp, [esp+3Ch+this]
.text:0040FF75                 mov     esi, [esp+3Ch+arg_4]
.text:0040FF79                 mov     ebx, [esp+3Ch+arg_8]
.text:0040FF7D                 mov     ecx, [ecx]
.text:0040FF7F                 mov     edi, [ecx-0Ch]
.text:0040FF82                 cmp     ebp, edi
.text:0040FF84                 ja      loc_410082
.text:0040FF8A                 mov     edx, 3FFFFFFCh
.text:0040FF8F                 sub     edx, edi
.text:0040FF91                 cmp     ebx, edx
.text:0040FF93                 ja      loc_41008E
.text:0040FF99                 cmp     esi, ecx
.text:0040FF9B                 jnb     short loc_40FFC4
.text:0040FF9D
.text:0040FF9D loc_40FF9D:                             ; CODE XREF: std::string::insert(uint,char const*,uint)+60↓j
.text:0040FF9D                                         ; std::string::insert(uint,char const*,uint)+67↓j
.text:0040FF9D                 mov     [esp+3Ch+var_30], ebx ; char *
.text:0040FFA1                 mov     [esp+3Ch+var_34], esi ; unsigned int
.text:0040FFA5                 mov     [esp+3Ch+var_38], 0 ; unsigned int
.text:0040FFAD                 mov     [esp+3Ch+var_3C], ebp ; this
.text:0040FFB0                 mov     ecx, eax
.text:0040FFB2                 call    __ZNSs15_M_replace_safeEjjPKcj ; std::string::_M_replace_safe(uint,uint,char const*,uint)
.text:0040FFB7                 sub     esp, 10h
.text:0040FFBA
.text:0040FFBA loc_40FFBA:                             ; CODE XREF: std::string::insert(uint,char const*,uint)+10D↓j
.text:0040FFBA                 add     esp, 2Ch
.text:0040FFBD                 pop     ebx
.text:0040FFBE                 pop     esi
.text:0040FFBF                 pop     edi
.text:0040FFC0                 pop     ebp
.text:0040FFC1                 retn    0Ch
.text:0040FFC4 ; ---------------------------------------------------------------------------
.text:0040FFC4
.text:0040FFC4 loc_40FFC4:                             ; CODE XREF: std::string::insert(uint,char const*,uint)+33↑j
.text:0040FFC4                 add     edi, ecx
.text:0040FFC6                 cmp     esi, edi
.text:0040FFC8                 ja      short loc_40FF9D
.text:0040FFCA                 mov     edx, [ecx-4]
.text:0040FFCD                 test    edx, edx
.text:0040FFCF                 jg      short loc_40FF9D
.text:0040FFD1                 sub     esi, ecx
.text:0040FFD3                 mov     [esp+3Ch+var_34], ebx ; unsigned int
.text:0040FFD7                 mov     [esp+3Ch+var_38], 0 ; unsigned int
.text:0040FFDF                 mov     [esp+3Ch+var_3C], ebp ; this
.text:0040FFE2                 mov     ecx, eax
.text:0040FFE4                 mov     [esp+3Ch+var_20], eax
.text:0040FFE8                 call    __ZNSs9_M_mutateEjjj ; std::string::_M_mutate(uint,uint,uint)
.text:0040FFED                 sub     esp, 0Ch
.text:0040FFF0                 mov     eax, [esp+3Ch+var_20]
.text:0040FFF4                 mov     edx, [eax]
.text:0040FFF6                 add     esi, edx
.text:0040FFF8                 add     edx, ebp
.text:0040FFFA                 lea     ebp, [esi+ebx]
.text:0040FFFD                 cmp     edx, ebp
.text:0040FFFF                 jnb     short loc_410048
.text:00410001                 cmp     esi, edx
.text:00410003                 jb      short loc_41001C
.text:00410005                 cmp     ebx, 1
.text:00410008                 jz      short loc_410070
.text:0041000A                 mov     edi, edx
.text:0041000C                 mov     esi, ebp
.text:0041000E                 mov     ecx, ebx
.text:00410010                 rep movsb
.text:00410012                 add     esp, 2Ch
.text:00410015                 pop     ebx
.text:00410016                 pop     esi
.text:00410017                 pop     edi
.text:00410018                 pop     ebp
.text:00410019                 retn    0Ch
.text:0041001C ; ---------------------------------------------------------------------------
.text:0041001C
.text:0041001C loc_41001C:                             ; CODE XREF: std::string::insert(uint,char const*,uint)+9B↑j
.text:0041001C                 mov     ebp, edx
.text:0041001E                 sub     ebp, esi
.text:00410020                 cmp     ebp, 1
.text:00410023                 jz      short loc_41007C
.text:00410025                 mov     edi, edx
.text:00410027                 mov     ecx, ebp
.text:00410029                 rep movsb
.text:0041002B
.text:0041002B loc_41002B:                             ; CODE XREF: std::string::insert(uint,char const*,uint)+118↓j
.text:0041002B                 mov     ecx, ebx
.text:0041002D                 sub     ecx, ebp
.text:0041002F                 lea     esi, [edx+ebx]
.text:00410032                 add     edx, ebp
.text:00410034                 cmp     ecx, 1
.text:00410037                 jz      short loc_410060
.text:00410039                 mov     edi, edx
.text:0041003B                 rep movsb
.text:0041003D                 add     esp, 2Ch
.text:00410040                 pop     ebx
.text:00410041                 pop     esi
.text:00410042                 pop     edi
.text:00410043                 pop     ebp
.text:00410044                 retn    0Ch
.text:00410044 ; ---------------------------------------------------------------------------
.text:00410047                 align 4
.text:00410048
.text:00410048 loc_410048:                             ; CODE XREF: std::string::insert(uint,char const*,uint)+97↑j
.text:00410048                 cmp     ebx, 1
.text:0041004B                 jz      short loc_410060
.text:0041004D                 mov     edi, edx
.text:0041004F                 mov     ecx, ebx
.text:00410051                 rep movsb
.text:00410053                 add     esp, 2Ch
.text:00410056                 pop     ebx
.text:00410057                 pop     esi
.text:00410058                 pop     edi
.text:00410059                 pop     ebp
.text:0041005A                 retn    0Ch
.text:0041005A ; ---------------------------------------------------------------------------
.text:0041005D                 align 10h
.text:00410060
.text:00410060 loc_410060:                             ; CODE XREF: std::string::insert(uint,char const*,uint)+CF↑j
.text:00410060                                         ; std::string::insert(uint,char const*,uint)+E3↑j
.text:00410060                 mov     cl, [esi]
.text:00410062                 mov     [edx], cl
.text:00410064                 add     esp, 2Ch
.text:00410067                 pop     ebx
.text:00410068                 pop     esi
.text:00410069                 pop     edi
.text:0041006A                 pop     ebp
.text:0041006B                 retn    0Ch
.text:0041006B ; ---------------------------------------------------------------------------
.text:0041006E                 align 10h
.text:00410070
.text:00410070 loc_410070:                             ; CODE XREF: std::string::insert(uint,char const*,uint)+A0↑j
.text:00410070                 mov     cl, [ebp+0]
.text:00410073                 mov     [edx], cl
.text:00410075                 jmp     loc_40FFBA
.text:00410075 ; ---------------------------------------------------------------------------
.text:0041007A                 align 4
.text:0041007C
.text:0041007C loc_41007C:                             ; CODE XREF: std::string::insert(uint,char const*,uint)+BB↑j
.text:0041007C                 mov     cl, [esi]
.text:0041007E                 mov     [edx], cl
.text:00410080                 jmp     short loc_41002B
.text:00410082 ; ---------------------------------------------------------------------------
.text:00410082
.text:00410082 loc_410082:                             ; CODE XREF: std::string::insert(uint,char const*,uint)+1C↑j
.text:00410082                 mov     [esp+3Ch+var_3C], offset aBasicStringIns ; "basic_string::insert"
.text:00410089                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:0041008E ; ---------------------------------------------------------------------------
.text:0041008E
.text:0041008E loc_41008E:                             ; CODE XREF: std::string::insert(uint,char const*,uint)+2B↑j
.text:0041008E                 mov     [esp+3Ch+var_3C], offset aBasicStringIns ; "basic_string::insert"
.text:00410095                 call    __ZSt20__throw_length_errorPKc ; std::__throw_length_error(char const*)
.text:00410095 __ZNSs6insertEjPKcj endp
.text:00410095
.text:00410095 ; ---------------------------------------------------------------------------
.text:0041009A                 align 4
.text:0041009C
.text:0041009C ; =============== S U B R O U T I N E =======================================
.text:0041009C
.text:0041009C
.text:0041009C ; _DWORD __stdcall std::string::insert(std::string *__hidden this, unsigned int, const std::string *)
.text:0041009C                 public __ZNSs6insertEjRKSs
.text:0041009C __ZNSs6insertEjRKSs proc near
.text:0041009C
.text:0041009C var_1C          = dword ptr -1Ch
.text:0041009C var_18          = dword ptr -18h
.text:0041009C var_14          = dword ptr -14h
.text:0041009C this            = dword ptr  4
.text:0041009C arg_4           = dword ptr  8
.text:0041009C
.text:0041009C                 sub     esp, 1Ch
.text:0041009F                 mov     eax, [esp+1Ch+arg_4]
.text:004100A3                 mov     eax, [eax]
.text:004100A5                 mov     edx, [eax-0Ch]
.text:004100A8                 mov     [esp+1Ch+var_14], edx ; char *
.text:004100AC                 mov     [esp+1Ch+var_18], eax ; unsigned int
.text:004100B0                 mov     eax, [esp+1Ch+this]
.text:004100B4                 mov     [esp+1Ch+var_1C], eax ; this
.text:004100B7                 call    __ZNSs6insertEjPKcj ; std::string::insert(uint,char const*,uint)
.text:004100BC                 sub     esp, 0Ch
.text:004100BF                 add     esp, 1Ch
.text:004100C2                 retn    8
.text:004100C2 __ZNSs6insertEjRKSs endp
.text:004100C2
.text:004100C2 ; ---------------------------------------------------------------------------
.text:004100C5                 align 4
.text:004100C8
.text:004100C8 ; =============== S U B R O U T I N E =======================================
.text:004100C8
.text:004100C8
.text:004100C8 ; _DWORD __stdcall std::string::insert(std::string *__hidden this, unsigned int, const std::string *, unsigned int, unsigned int)
.text:004100C8                 public __ZNSs6insertEjRKSsjj
.text:004100C8 __ZNSs6insertEjRKSsjj proc near
.text:004100C8
.text:004100C8 var_1C          = dword ptr -1Ch
.text:004100C8 var_18          = dword ptr -18h
.text:004100C8 var_14          = dword ptr -14h
.text:004100C8 this            = dword ptr  4
.text:004100C8 arg_4           = dword ptr  8
.text:004100C8 arg_8           = dword ptr  0Ch
.text:004100C8 arg_C           = dword ptr  10h
.text:004100C8
.text:004100C8                 push    esi
.text:004100C9                 push    ebx
.text:004100CA                 sub     esp, 14h
.text:004100CD                 mov     eax, [esp+1Ch+arg_8]
.text:004100D1                 mov     edx, [esp+1Ch+arg_4]
.text:004100D5                 mov     esi, [edx]
.text:004100D7                 mov     ebx, [esi-0Ch]
.text:004100DA                 mov     edx, ebx
.text:004100DC                 sub     edx, eax
.text:004100DE                 cmp     edx, [esp+1Ch+arg_C]
.text:004100E2                 jbe     short loc_4100E8
.text:004100E4                 mov     edx, [esp+1Ch+arg_C]
.text:004100E8
.text:004100E8 loc_4100E8:                             ; CODE XREF: std::string::insert(uint,std::string const&,uint,uint)+1A↑j
.text:004100E8                 cmp     eax, ebx
.text:004100EA                 ja      short loc_41010D
.text:004100EC                 mov     [esp+1Ch+var_14], edx ; char *
.text:004100F0                 add     eax, esi
.text:004100F2                 mov     [esp+1Ch+var_18], eax ; unsigned int
.text:004100F6                 mov     eax, [esp+1Ch+this]
.text:004100FA                 mov     [esp+1Ch+var_1C], eax ; this
.text:004100FD                 call    __ZNSs6insertEjPKcj ; std::string::insert(uint,char const*,uint)
.text:00410102                 sub     esp, 0Ch
.text:00410105                 add     esp, 14h
.text:00410108                 pop     ebx
.text:00410109                 pop     esi
.text:0041010A                 retn    10h
.text:0041010D ; ---------------------------------------------------------------------------
.text:0041010D
.text:0041010D loc_41010D:                             ; CODE XREF: std::string::insert(uint,std::string const&,uint,uint)+22↑j
.text:0041010D                 mov     [esp+1Ch+var_1C], offset aBasicStringIns ; "basic_string::insert"
.text:00410114                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:00410114 __ZNSs6insertEjRKSsjj endp
.text:00410114
.text:00410114 ; ---------------------------------------------------------------------------
.text:00410119                 align 4
.text:0041011C
.text:0041011C ; =============== S U B R O U T I N E =======================================
.text:0041011C
.text:0041011C
.text:0041011C ; _DWORD __stdcall std::string::insert(std::string *__hidden this, unsigned int, char, char)
.text:0041011C                 public __ZNSs6insertEjjc
.text:0041011C __ZNSs6insertEjjc proc near
.text:0041011C
.text:0041011C var_1C          = dword ptr -1Ch
.text:0041011C var_18          = dword ptr -18h
.text:0041011C var_14          = dword ptr -14h
.text:0041011C var_10          = dword ptr -10h
.text:0041011C this            = dword ptr  4
.text:0041011C arg_4           = dword ptr  8
.text:0041011C arg_8           = byte ptr  0Ch
.text:0041011C
.text:0041011C                 push    ebx
.text:0041011D                 sub     esp, 18h
.text:00410120                 mov     eax, [esp+1Ch+this]
.text:00410124                 movsx   ebx, [esp+1Ch+arg_8]
.text:00410129                 mov     edx, [ecx]
.text:0041012B                 cmp     eax, [edx-0Ch]
.text:0041012E                 ja      short loc_410156
.text:00410130                 mov     [esp+1Ch+var_10], ebx ; unsigned int
.text:00410134                 mov     edx, [esp+1Ch+arg_4]
.text:00410138                 mov     [esp+1Ch+var_14], edx ; unsigned int
.text:0041013C                 mov     [esp+1Ch+var_18], 0 ; unsigned int
.text:00410144                 mov     [esp+1Ch+var_1C], eax ; this
.text:00410147                 call    __ZNSs14_M_replace_auxEjjjc ; std::string::_M_replace_aux(uint,uint,uint,char)
.text:0041014C                 sub     esp, 10h
.text:0041014F                 add     esp, 18h
.text:00410152                 pop     ebx
.text:00410153                 retn    0Ch
.text:00410156 ; ---------------------------------------------------------------------------
.text:00410156
.text:00410156 loc_410156:                             ; CODE XREF: std::string::insert(uint,uint,char)+12↑j
.text:00410156                 mov     [esp+1Ch+var_1C], offset aBasicStringIns ; "basic_string::insert"
.text:0041015D                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:0041015D __ZNSs6insertEjjc endp
.text:0041015D
.text:0041015D ; ---------------------------------------------------------------------------
.text:00410162                 align 4
.text:00410164
.text:00410164 ; =============== S U B R O U T I N E =======================================
.text:00410164
.text:00410164
.text:00410164 ; _DWORD __stdcall std::string::rbegin(std::string *__hidden this)
.text:00410164                 public __ZNSs6rbeginEv
.text:00410164 __ZNSs6rbeginEv proc near
.text:00410164
.text:00410164 lpfctx          = dword ptr -5Ch
.text:00410164 fctx            = SjLj_Function_Context ptr -40h
.text:00410164 this            = dword ptr  4
.text:00410164
.text:00410164                 push    edi
.text:00410165                 push    esi
.text:00410166                 push    ebx
.text:00410167                 sub     esp, 50h
.text:0041016A                 mov     esi, ecx
.text:0041016C                 mov     ebx, [esp+5Ch+this]
.text:00410170                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00410178                 mov     [esp+5Ch+fctx.lsda], offset dword_4123B0
.text:00410180                 lea     edi, [esp+5Ch+fctx]
.text:00410184                 mov     [esp+5Ch+lpfctx], edi ; this
.text:00410187                 call    __Unwind_SjLj_Register
.text:0041018C                 mov     edx, [ebx]
.text:0041018E                 mov     eax, [edx-4]
.text:00410191                 test    eax, eax
.text:00410193                 js      short loc_4101A6
.text:00410195                 mov     [esp+5Ch+fctx.call_site], 0
.text:0041019D                 mov     ecx, ebx
.text:0041019F                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:004101A4                 mov     edx, [ebx]
.text:004101A6
.text:004101A6 loc_4101A6:                             ; CODE XREF: std::string::rbegin(void)+2F↑j
.text:004101A6                 add     edx, [edx-0Ch]
.text:004101A9                 mov     [esi], edx
.text:004101AB                 mov     [esp+5Ch+lpfctx], edi ; lpfctx
.text:004101AE                 call    __Unwind_SjLj_Unregister
.text:004101B3                 mov     eax, esi
.text:004101B5                 add     esp, 50h
.text:004101B8                 pop     ebx
.text:004101B9                 pop     esi
.text:004101BA                 pop     edi
.text:004101BB                 retn    4
.text:004101BB __ZNSs6rbeginEv endp
.text:004101BB
.text:004101BB ; ---------------------------------------------------------------------------
.text:004101BE                 align 10h
.text:004101C0
.text:004101C0 ; =============== S U B R O U T I N E =======================================
.text:004101C0
.text:004101C0
.text:004101C0 ; _DWORD __stdcall std::string::resize(std::string *__hidden this, unsigned int)
.text:004101C0                 public __ZNSs6resizeEj
.text:004101C0 __ZNSs6resizeEj proc near
.text:004101C0
.text:004101C0 var_1C          = dword ptr -1Ch
.text:004101C0 var_18          = byte ptr -18h
.text:004101C0 this            = dword ptr  4
.text:004101C0
.text:004101C0                 sub     esp, 1Ch
.text:004101C3                 mov     dword ptr [esp+1Ch+var_18], 0 ; char
.text:004101CB                 mov     eax, [esp+1Ch+this]
.text:004101CF                 mov     [esp+1Ch+var_1C], eax ; this
.text:004101D2                 call    __ZNSs6resizeEjc ; std::string::resize(uint,char)
.text:004101D7                 sub     esp, 8
.text:004101DA                 add     esp, 1Ch
.text:004101DD                 retn    4
.text:004101DD __ZNSs6resizeEj endp
.text:004101DD
.text:004101E0
.text:004101E0 ; =============== S U B R O U T I N E =======================================
.text:004101E0
.text:004101E0
.text:004101E0 ; _DWORD __stdcall std::string::resize(std::string *__hidden this, char, char)
.text:004101E0                 public __ZNSs6resizeEjc
.text:004101E0 __ZNSs6resizeEjc proc near              ; CODE XREF: std::string::resize(uint)+12↑p
.text:004101E0
.text:004101E0 var_1C          = dword ptr -1Ch
.text:004101E0 var_18          = dword ptr -18h
.text:004101E0 var_14          = dword ptr -14h
.text:004101E0 this            = dword ptr  4
.text:004101E0 arg_4           = byte ptr  8
.text:004101E0
.text:004101E0                 push    ebx
.text:004101E1                 sub     esp, 18h
.text:004101E4                 mov     eax, [esp+1Ch+this]
.text:004101E8                 movsx   ebx, [esp+1Ch+arg_4]
.text:004101ED                 mov     edx, [ecx]
.text:004101EF                 mov     edx, [edx-0Ch]
.text:004101F2                 cmp     eax, 3FFFFFFCh
.text:004101F7                 ja      short loc_41023B
.text:004101F9                 cmp     eax, edx
.text:004101FB                 ja      short loc_410228
.text:004101FD                 jb      short loc_410208
.text:004101FF                 add     esp, 18h
.text:00410202                 pop     ebx
.text:00410203                 retn    8
.text:00410203 ; ---------------------------------------------------------------------------
.text:00410206                 align 4
.text:00410208
.text:00410208 loc_410208:                             ; CODE XREF: std::string::resize(uint,char)+1D↑j
.text:00410208                 mov     [esp+1Ch+var_14], 0 ; unsigned int
.text:00410210                 sub     edx, eax
.text:00410212                 mov     [esp+1Ch+var_18], edx ; unsigned int
.text:00410216                 mov     [esp+1Ch+var_1C], eax ; this
.text:00410219                 call    __ZNSs9_M_mutateEjjj ; std::string::_M_mutate(uint,uint,uint)
.text:0041021E                 sub     esp, 0Ch
.text:00410221                 add     esp, 18h
.text:00410224                 pop     ebx
.text:00410225                 retn    8
.text:00410228 ; ---------------------------------------------------------------------------
.text:00410228
.text:00410228 loc_410228:                             ; CODE XREF: std::string::resize(uint,char)+1B↑j
.text:00410228                 mov     dword ptr [esp+1Ch+arg_4], ebx ; char
.text:0041022C                 sub     eax, edx
.text:0041022E                 mov     [esp+1Ch+this], eax ; this
.text:00410232                 add     esp, 18h
.text:00410235                 pop     ebx
.text:00410236                 jmp     __ZNSs6appendEjc ; std::string::append(uint,char)
.text:0041023B ; ---------------------------------------------------------------------------
.text:0041023B
.text:0041023B loc_41023B:                             ; CODE XREF: std::string::resize(uint,char)+17↑j
.text:0041023B                 mov     [esp+1Ch+var_1C], offset aBasicStringRes ; "basic_string::resize"
.text:00410242                 call    __ZSt20__throw_length_errorPKc ; std::__throw_length_error(char const*)
.text:00410242 __ZNSs6resizeEjc endp
.text:00410242
.text:00410242 ; ---------------------------------------------------------------------------
.text:00410247                 align 4
.text:00410248
.text:00410248 ; =============== S U B R O U T I N E =======================================
.text:00410248
.text:00410248
.text:00410248 ; _DWORD __cdecl std::string::_M_copy(std::string *__hidden this, char *, const char *, unsigned int)
.text:00410248                 public __ZNSs7_M_copyEPcPKcj
.text:00410248 __ZNSs7_M_copyEPcPKcj proc near
.text:00410248
.text:00410248 this            = dword ptr  4
.text:00410248 arg_4           = dword ptr  8
.text:00410248 arg_8           = dword ptr  0Ch
.text:00410248
.text:00410248                 push    edi
.text:00410249                 push    esi
.text:0041024A                 push    edx
.text:0041024B                 mov     esi, [esp+0Ch+arg_4]
.text:0041024F                 mov     ecx, [esp+0Ch+arg_8]
.text:00410253                 cmp     ecx, 1
.text:00410256                 jz      short loc_410264
.text:00410258                 mov     edi, [esp+0Ch+this]
.text:0041025C                 rep movsb
.text:0041025E                 pop     eax
.text:0041025F                 pop     esi
.text:00410260                 pop     edi
.text:00410261                 retn
.text:00410261 ; ---------------------------------------------------------------------------
.text:00410262                 align 4
.text:00410264
.text:00410264 loc_410264:                             ; CODE XREF: std::string::_M_copy(char *,char const*,uint)+E↑j
.text:00410264                 mov     al, [esi]
.text:00410266                 mov     edx, [esp+0Ch+this]
.text:0041026A                 mov     [edx], al
.text:0041026C                 pop     eax
.text:0041026D                 pop     esi
.text:0041026E                 pop     edi
.text:0041026F                 retn
.text:0041026F __ZNSs7_M_copyEPcPKcj endp
.text:0041026F
.text:00410270
.text:00410270 ; =============== S U B R O U T I N E =======================================
.text:00410270
.text:00410270
.text:00410270 ; _DWORD __stdcall std::string::_M_data(std::string *__hidden this, char *)
.text:00410270                 public __ZNSs7_M_dataEPc
.text:00410270 __ZNSs7_M_dataEPc proc near
.text:00410270
.text:00410270 this            = dword ptr  4
.text:00410270
.text:00410270                 mov     eax, [esp+this]
.text:00410274                 mov     [ecx], eax
.text:00410276                 retn    4
.text:00410276 __ZNSs7_M_dataEPc endp
.text:00410276
.text:00410276 ; ---------------------------------------------------------------------------
.text:00410279                 align 4
.text:0041027C
.text:0041027C ; =============== S U B R O U T I N E =======================================
.text:0041027C
.text:0041027C
.text:0041027C ; _DWORD std::string::_M_leak(std::string *__hidden this)
.text:0041027C                 public __ZNSs7_M_leakEv
.text:0041027C __ZNSs7_M_leakEv proc near
.text:0041027C
.text:0041027C this            = dword ptr  4
.text:0041027C
.text:0041027C                 mov     eax, [ecx]
.text:0041027E                 mov     eax, [eax-4]
.text:00410281                 test    eax, eax
.text:00410283                 js      short locret_41028C
.text:00410285                 jmp     __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:00410285 ; ---------------------------------------------------------------------------
.text:0041028A                 align 4
.text:0041028C
.text:0041028C locret_41028C:                          ; CODE XREF: std::string::_M_leak(void)+7↑j
.text:0041028C                 retn
.text:0041028C __ZNSs7_M_leakEv endp
.text:0041028C
.text:0041028C ; ---------------------------------------------------------------------------
.text:0041028D                 align 10h
.text:00410290
.text:00410290 ; =============== S U B R O U T I N E =======================================
.text:00410290
.text:00410290
.text:00410290 ; _DWORD __cdecl std::string::_M_move(std::string *__hidden this, char *, size_t, unsigned int)
.text:00410290                 public __ZNSs7_M_moveEPcPKcj
.text:00410290 __ZNSs7_M_moveEPcPKcj proc near
.text:00410290
.text:00410290 this            = dword ptr  4
.text:00410290 arg_4           = dword ptr  8
.text:00410290 arg_8           = dword ptr  0Ch
.text:00410290
.text:00410290                 mov     edx, [esp+this]
.text:00410294                 mov     ecx, [esp+arg_4]
.text:00410298                 mov     eax, [esp+arg_8]
.text:0041029C                 cmp     eax, 1
.text:0041029F                 jz      short loc_4102B4
.text:004102A1                 mov     [esp+arg_8], eax ; size_t
.text:004102A5                 mov     [esp+arg_4], ecx ; void *
.text:004102A9                 mov     [esp+this], edx ; void *
.text:004102AD                 jmp     _memmove
.text:004102AD ; ---------------------------------------------------------------------------
.text:004102B2                 align 4
.text:004102B4
.text:004102B4 loc_4102B4:                             ; CODE XREF: std::string::_M_move(char *,char const*,uint)+F↑j
.text:004102B4                 mov     cl, [ecx]
.text:004102B6                 mov     [edx], cl
.text:004102B8                 retn
.text:004102B8 __ZNSs7_M_moveEPcPKcj endp
.text:004102B8
.text:004102B8 ; ---------------------------------------------------------------------------
.text:004102B9                 align 4
.text:004102BC
.text:004102BC ; =============== S U B R O U T I N E =======================================
.text:004102BC
.text:004102BC
.text:004102BC ; std::string::replace(__gnu_cxx::__normal_iterator<char *, std::string>, __gnu_cxx::__normal_iterator<char *, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)
.text:004102BC                 public __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_NS0_IPKcSsEES5_
.text:004102BC __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_NS0_IPKcSsEES5_ proc near
.text:004102BC
.text:004102BC arg_0           = dword ptr  4
.text:004102BC arg_4           = dword ptr  8
.text:004102BC arg_8           = dword ptr  0Ch
.text:004102BC arg_C           = dword ptr  10h
.text:004102BC
.text:004102BC                 push    ebx
.text:004102BD                 mov     edx, [esp+4+arg_0]
.text:004102C1                 mov     eax, [esp+4+arg_4]
.text:004102C5                 mov     ebx, [esp+4+arg_8]
.text:004102C9                 sub     [esp+4+arg_C], ebx
.text:004102CD                 sub     eax, edx
.text:004102CF                 mov     [esp+4+arg_4], eax ; unsigned int
.text:004102D3                 sub     edx, [ecx]
.text:004102D5                 mov     [esp+4+arg_0], edx ; this
.text:004102D9                 pop     ebx
.text:004102DA                 jmp     __ZNSs7replaceEjjPKcj ; std::string::replace(uint,uint,char const*,uint)
.text:004102DA __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_NS0_IPKcSsEES5_ endp
.text:004102DA
.text:004102DA ; ---------------------------------------------------------------------------
.text:004102DF                 align 10h
.text:004102E0
.text:004102E0 ; =============== S U B R O U T I N E =======================================
.text:004102E0
.text:004102E0
.text:004102E0 ; std::string::replace(__gnu_cxx::__normal_iterator<char *, std::string>, __gnu_cxx::__normal_iterator<char *, std::string>, char const*)
.text:004102E0                 public __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKc
.text:004102E0 __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKc proc near
.text:004102E0
.text:004102E0 var_2C          = dword ptr -2Ch
.text:004102E0 var_28          = dword ptr -28h
.text:004102E0 var_24          = dword ptr -24h
.text:004102E0 var_20          = dword ptr -20h
.text:004102E0 arg_0           = dword ptr  4
.text:004102E0 arg_4           = dword ptr  8
.text:004102E0 arg_8           = dword ptr  0Ch
.text:004102E0
.text:004102E0                 push    ebp
.text:004102E1                 push    edi
.text:004102E2                 push    esi
.text:004102E3                 push    ebx
.text:004102E4                 sub     esp, 1Ch
.text:004102E7                 mov     ebx, ecx
.text:004102E9                 mov     ebp, [esp+2Ch+arg_0]
.text:004102ED                 mov     edx, [esp+2Ch+arg_4]
.text:004102F1                 mov     esi, [esp+2Ch+arg_8]
.text:004102F5                 mov     edi, esi
.text:004102F7                 xor     eax, eax
.text:004102F9                 mov     ecx, 0FFFFFFFFh
.text:004102FE                 repne scasb
.text:00410300                 not     ecx
.text:00410302                 dec     ecx
.text:00410303                 mov     [esp+2Ch+var_20], ecx ; char *
.text:00410307                 mov     [esp+2Ch+var_24], esi ; unsigned int
.text:0041030B                 sub     edx, ebp
.text:0041030D                 mov     [esp+2Ch+var_28], edx ; unsigned int
.text:00410311                 sub     ebp, [ebx]
.text:00410313                 mov     [esp+2Ch+var_2C], ebp ; this
.text:00410316                 mov     ecx, ebx
.text:00410318                 call    __ZNSs7replaceEjjPKcj ; std::string::replace(uint,uint,char const*,uint)
.text:0041031D                 sub     esp, 10h
.text:00410320                 add     esp, 1Ch
.text:00410323                 pop     ebx
.text:00410324                 pop     esi
.text:00410325                 pop     edi
.text:00410326                 pop     ebp
.text:00410327                 retn    0Ch
.text:00410327 __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKc endp
.text:00410327
.text:00410327 ; ---------------------------------------------------------------------------
.text:0041032A                 align 4
.text:0041032C
.text:0041032C ; =============== S U B R O U T I N E =======================================
.text:0041032C
.text:0041032C
.text:0041032C ; std::string::replace(__gnu_cxx::__normal_iterator<char *, std::string>, __gnu_cxx::__normal_iterator<char *, std::string>, char const*, char const*)
.text:0041032C                 public __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcS4_
.text:0041032C __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcS4_ proc near
.text:0041032C
.text:0041032C arg_0           = dword ptr  4
.text:0041032C arg_4           = dword ptr  8
.text:0041032C arg_8           = dword ptr  0Ch
.text:0041032C arg_C           = dword ptr  10h
.text:0041032C
.text:0041032C                 push    ebx
.text:0041032D                 mov     edx, [esp+4+arg_0]
.text:00410331                 mov     eax, [esp+4+arg_4]
.text:00410335                 mov     ebx, [esp+4+arg_8]
.text:00410339                 sub     [esp+4+arg_C], ebx
.text:0041033D                 sub     eax, edx
.text:0041033F                 mov     [esp+4+arg_4], eax ; unsigned int
.text:00410343                 sub     edx, [ecx]
.text:00410345                 mov     [esp+4+arg_0], edx ; this
.text:00410349                 pop     ebx
.text:0041034A                 jmp     __ZNSs7replaceEjjPKcj ; std::string::replace(uint,uint,char const*,uint)
.text:0041034A __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcS4_ endp
.text:0041034A
.text:0041034A ; ---------------------------------------------------------------------------
.text:0041034F                 align 10h
.text:00410350
.text:00410350 ; =============== S U B R O U T I N E =======================================
.text:00410350
.text:00410350
.text:00410350 ; std::string::replace(__gnu_cxx::__normal_iterator<char *, std::string>, __gnu_cxx::__normal_iterator<char *, std::string>, char const*, unsigned int)
.text:00410350                 public __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcj
.text:00410350 __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcj proc near
.text:00410350
.text:00410350 arg_0           = dword ptr  4
.text:00410350 arg_4           = dword ptr  8
.text:00410350
.text:00410350                 push    ebx
.text:00410351                 mov     edx, [esp+4+arg_0]
.text:00410355                 mov     eax, [esp+4+arg_4]
.text:00410359                 sub     eax, edx
.text:0041035B                 mov     [esp+4+arg_4], eax ; unsigned int
.text:0041035F                 sub     edx, [ecx]
.text:00410361                 mov     [esp+4+arg_0], edx ; this
.text:00410365                 pop     ebx
.text:00410366                 jmp     __ZNSs7replaceEjjPKcj ; std::string::replace(uint,uint,char const*,uint)
.text:00410366 __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcj endp
.text:00410366
.text:00410366 ; ---------------------------------------------------------------------------
.text:0041036B                 align 4
.text:0041036C
.text:0041036C ; =============== S U B R O U T I N E =======================================
.text:0041036C
.text:0041036C
.text:0041036C ; std::string::replace(__gnu_cxx::__normal_iterator<char *, std::string>, __gnu_cxx::__normal_iterator<char *, std::string>, std::string const&)
.text:0041036C                 public __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_RKSs
.text:0041036C __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_RKSs proc near
.text:0041036C
.text:0041036C var_1C          = dword ptr -1Ch
.text:0041036C var_18          = dword ptr -18h
.text:0041036C var_14          = dword ptr -14h
.text:0041036C var_10          = dword ptr -10h
.text:0041036C arg_0           = dword ptr  4
.text:0041036C arg_4           = dword ptr  8
.text:0041036C arg_8           = dword ptr  0Ch
.text:0041036C
.text:0041036C                 push    esi
.text:0041036D                 push    ebx
.text:0041036E                 sub     esp, 14h
.text:00410371                 mov     edx, [esp+1Ch+arg_0]
.text:00410375                 mov     eax, [esp+1Ch+arg_4]
.text:00410379                 mov     ebx, [esp+1Ch+arg_8]
.text:0041037D                 mov     ebx, [ebx]
.text:0041037F                 mov     esi, [ebx-0Ch]
.text:00410382                 mov     [esp+1Ch+var_10], esi ; char *
.text:00410386                 mov     [esp+1Ch+var_14], ebx ; unsigned int
.text:0041038A                 sub     eax, edx
.text:0041038C                 mov     [esp+1Ch+var_18], eax ; unsigned int
.text:00410390                 sub     edx, [ecx]
.text:00410392                 mov     [esp+1Ch+var_1C], edx ; this
.text:00410395                 call    __ZNSs7replaceEjjPKcj ; std::string::replace(uint,uint,char const*,uint)
.text:0041039A                 sub     esp, 10h
.text:0041039D                 add     esp, 14h
.text:004103A0                 pop     ebx
.text:004103A1                 pop     esi
.text:004103A2                 retn    0Ch
.text:004103A2 __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_RKSs endp
.text:004103A2
.text:004103A2 ; ---------------------------------------------------------------------------
.text:004103A5                 align 4
.text:004103A8
.text:004103A8 ; =============== S U B R O U T I N E =======================================
.text:004103A8
.text:004103A8
.text:004103A8 ; std::string::replace(__gnu_cxx::__normal_iterator<char *, std::string>, __gnu_cxx::__normal_iterator<char *, std::string>, char *, char *)
.text:004103A8                 public __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S1_S1_
.text:004103A8 __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S1_S1_ proc near
.text:004103A8
.text:004103A8 arg_0           = dword ptr  4
.text:004103A8 arg_4           = dword ptr  8
.text:004103A8 arg_8           = dword ptr  0Ch
.text:004103A8 arg_C           = dword ptr  10h
.text:004103A8
.text:004103A8                 push    ebx
.text:004103A9                 mov     edx, [esp+4+arg_0]
.text:004103AD                 mov     eax, [esp+4+arg_4]
.text:004103B1                 mov     ebx, [esp+4+arg_8]
.text:004103B5                 sub     [esp+4+arg_C], ebx
.text:004103B9                 sub     eax, edx
.text:004103BB                 mov     [esp+4+arg_4], eax ; unsigned int
.text:004103BF                 sub     edx, [ecx]
.text:004103C1                 mov     [esp+4+arg_0], edx ; this
.text:004103C5                 pop     ebx
.text:004103C6                 jmp     __ZNSs7replaceEjjPKcj ; std::string::replace(uint,uint,char const*,uint)
.text:004103C6 __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S1_S1_ endp
.text:004103C6
.text:004103C6 ; ---------------------------------------------------------------------------
.text:004103CB                 align 4
.text:004103CC
.text:004103CC ; =============== S U B R O U T I N E =======================================
.text:004103CC
.text:004103CC
.text:004103CC ; std::string::replace(__gnu_cxx::__normal_iterator<char *, std::string>, __gnu_cxx::__normal_iterator<char *, std::string>, __gnu_cxx::__normal_iterator<char *, std::string>, __gnu_cxx::__normal_iterator<char *, std::string>)
.text:004103CC                 public __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S2_S2_
.text:004103CC __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S2_S2_ proc near
.text:004103CC
.text:004103CC arg_0           = dword ptr  4
.text:004103CC arg_4           = dword ptr  8
.text:004103CC arg_8           = dword ptr  0Ch
.text:004103CC arg_C           = dword ptr  10h
.text:004103CC
.text:004103CC                 push    ebx
.text:004103CD                 mov     edx, [esp+4+arg_0]
.text:004103D1                 mov     eax, [esp+4+arg_4]
.text:004103D5                 mov     ebx, [esp+4+arg_8]
.text:004103D9                 sub     [esp+4+arg_C], ebx
.text:004103DD                 sub     eax, edx
.text:004103DF                 mov     [esp+4+arg_4], eax ; unsigned int
.text:004103E3                 sub     edx, [ecx]
.text:004103E5                 mov     [esp+4+arg_0], edx ; this
.text:004103E9                 pop     ebx
.text:004103EA                 jmp     __ZNSs7replaceEjjPKcj ; std::string::replace(uint,uint,char const*,uint)
.text:004103EA __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S2_S2_ endp
.text:004103EA
.text:004103EA ; ---------------------------------------------------------------------------
.text:004103EF                 align 10h
.text:004103F0
.text:004103F0 ; =============== S U B R O U T I N E =======================================
.text:004103F0
.text:004103F0
.text:004103F0 ; std::string::replace(__gnu_cxx::__normal_iterator<char *, std::string>, __gnu_cxx::__normal_iterator<char *, std::string>, std::initializer_list<char>)
.text:004103F0                 public __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_St16initializer_listIcE
.text:004103F0 __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_St16initializer_listIcE proc near
.text:004103F0
.text:004103F0 arg_0           = dword ptr  4
.text:004103F0 arg_4           = dword ptr  8
.text:004103F0
.text:004103F0                 push    ebx
.text:004103F1                 mov     edx, [esp+4+arg_0]
.text:004103F5                 mov     eax, [esp+4+arg_4]
.text:004103F9                 sub     eax, edx
.text:004103FB                 mov     [esp+4+arg_4], eax ; unsigned int
.text:004103FF                 sub     edx, [ecx]
.text:00410401                 mov     [esp+4+arg_0], edx ; this
.text:00410405                 pop     ebx
.text:00410406                 jmp     __ZNSs7replaceEjjPKcj ; std::string::replace(uint,uint,char const*,uint)
.text:00410406 __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_St16initializer_listIcE endp
.text:00410406
.text:00410406 ; ---------------------------------------------------------------------------
.text:0041040B                 align 4
.text:0041040C
.text:0041040C ; =============== S U B R O U T I N E =======================================
.text:0041040C
.text:0041040C
.text:0041040C ; int __stdcall std::string::replace(std::string *, unsigned int, int, unsigned int)
.text:0041040C                 public __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_jc
.text:0041040C __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_jc proc near
.text:0041040C
.text:0041040C arg_0           = dword ptr  4
.text:0041040C arg_4           = dword ptr  8
.text:0041040C arg_C           = dword ptr  10h
.text:0041040C
.text:0041040C                 push    ebx
.text:0041040D                 mov     edx, [esp+4+arg_0]
.text:00410411                 mov     eax, [esp+4+arg_4]
.text:00410415                 movsx   ebx, byte ptr [esp+4+arg_C]
.text:0041041A                 mov     [esp+4+arg_C], ebx ; unsigned int
.text:0041041E                 sub     eax, edx
.text:00410420                 mov     [esp+4+arg_4], eax ; unsigned int
.text:00410424                 sub     edx, [ecx]
.text:00410426                 mov     [esp+4+arg_0], edx ; this
.text:0041042A                 pop     ebx
.text:0041042B                 jmp     __ZNSs14_M_replace_auxEjjjc ; std::string::_M_replace_aux(uint,uint,uint,char)
.text:0041042B __ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_jc endp
.text:0041042B
.text:00410430
.text:00410430 ; =============== S U B R O U T I N E =======================================
.text:00410430
.text:00410430
.text:00410430 ; _DWORD __stdcall std::string::replace(std::string *__hidden this, unsigned int, unsigned int, const char *)
.text:00410430                 public __ZNSs7replaceEjjPKc
.text:00410430 __ZNSs7replaceEjjPKc proc near
.text:00410430
.text:00410430 var_1C          = dword ptr -1Ch
.text:00410430 var_18          = dword ptr -18h
.text:00410430 var_14          = dword ptr -14h
.text:00410430 var_10          = dword ptr -10h
.text:00410430 this            = dword ptr  4
.text:00410430 arg_4           = dword ptr  8
.text:00410430 arg_8           = dword ptr  0Ch
.text:00410430
.text:00410430                 push    edi
.text:00410431                 push    ebx
.text:00410432                 sub     esp, 14h
.text:00410435                 mov     ebx, ecx
.text:00410437                 mov     edx, [esp+1Ch+arg_8]
.text:0041043B                 mov     edi, edx
.text:0041043D                 xor     eax, eax
.text:0041043F                 mov     ecx, 0FFFFFFFFh
.text:00410444                 repne scasb
.text:00410446                 not     ecx
.text:00410448                 lea     eax, [ecx-1]
.text:0041044B                 mov     [esp+1Ch+var_10], eax ; char *
.text:0041044F                 mov     [esp+1Ch+var_14], edx ; unsigned int
.text:00410453                 mov     eax, [esp+1Ch+arg_4]
.text:00410457                 mov     [esp+1Ch+var_18], eax ; unsigned int
.text:0041045B                 mov     eax, [esp+1Ch+this]
.text:0041045F                 mov     [esp+1Ch+var_1C], eax ; this
.text:00410462                 mov     ecx, ebx
.text:00410464                 call    __ZNSs7replaceEjjPKcj ; std::string::replace(uint,uint,char const*,uint)
.text:00410469                 sub     esp, 10h
.text:0041046C                 add     esp, 14h
.text:0041046F                 pop     ebx
.text:00410470                 pop     edi
.text:00410471                 retn    0Ch
.text:00410471 __ZNSs7replaceEjjPKc endp
.text:00410471
.text:00410474
.text:00410474 ; =============== S U B R O U T I N E =======================================
.text:00410474
.text:00410474
.text:00410474 ; _DWORD __stdcall std::string::replace(std::string *__hidden this, unsigned int, unsigned int, const char *, unsigned int)
.text:00410474                 public __ZNSs7replaceEjjPKcj
.text:00410474 __ZNSs7replaceEjjPKcj proc near         ; CODE XREF: std::string::replace(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char const*,std::string>,__gnu_cxx::__normal_iterator<char const*,std::string>)+1E↑j
.text:00410474                                         ; std::string::replace(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>,char const*)+38↑p ...
.text:00410474
.text:00410474 lpfctx          = dword ptr -7Ch
.text:00410474 var_78          = dword ptr -78h
.text:00410474 var_74          = dword ptr -74h
.text:00410474 var_70          = dword ptr -70h
.text:00410474 var_60          = dword ptr -60h
.text:00410474 var_5C          = dword ptr -5Ch
.text:00410474 var_58          = dword ptr -58h
.text:00410474 var_54          = dword ptr -54h
.text:00410474 fctx            = SjLj_Function_Context ptr -50h
.text:00410474 var_2C          = dword ptr -2Ch
.text:00410474 var_28          = dword ptr -28h
.text:00410474 var_11          = byte ptr -11h
.text:00410474 var_10          = dword ptr -10h
.text:00410474 var_C           = byte ptr -0Ch
.text:00410474 this            = dword ptr  4
.text:00410474 arg_4           = dword ptr  8
.text:00410474 arg_8           = dword ptr  0Ch
.text:00410474 arg_C           = dword ptr  10h
.text:00410474 lpuexcpt        = dword ptr  1Ch
.text:00410474 arg_2C          = dword ptr  30h
.text:00410474 arg_30          = dword ptr  34h
.text:00410474 arg_68          = byte ptr  6Ch
.text:00410474
.text:00410474                 push    ebp
.text:00410475                 push    edi
.text:00410476                 push    esi
.text:00410477                 sub     esp, 70h
.text:0041047A                 mov     [esp+7Ch+var_60], ecx
.text:0041047E                 mov     [esp+7Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00410486                 mov     [esp+7Ch+fctx.lsda], offset word_4123DE
.text:0041048E                 lea     eax, [esp+7Ch+var_C]
.text:00410492                 mov     [esp+7Ch+fctx.jbuf], eax
.text:00410496                 mov     [esp+7Ch+var_2C], offset loc_410731
.text:0041049E                 mov     [esp+7Ch+var_28], esp
.text:004104A2                 lea     edx, [esp+7Ch+fctx]
.text:004104A6                 mov     [esp+7Ch+lpfctx], edx ; lpfctx
.text:004104A9                 call    __Unwind_SjLj_Register
.text:004104AE ; __unwind { // ___gxx_personality_sj0
.text:004104AE ;   try {
.text:004104AE                 mov     ecx, [esp+7Ch+var_60]
.text:004104B2                 mov     eax, [ecx]
.text:004104B4                 mov     edx, [eax-0Ch]
.text:004104B7                 cmp     [esp+7Ch+this], edx
.text:004104BE                 ja      loc_410709
.text:004104C4                 mov     ecx, edx
.text:004104C6                 sub     ecx, [esp+7Ch+this]
.text:004104CD                 mov     [esp+7Ch+var_58], ecx
.text:004104D1                 mov     ecx, [esp+7Ch+arg_4]
.text:004104D8                 cmp     [esp+7Ch+var_58], ecx
.text:004104DC                 ja      short loc_41055C
.text:004104DE
.text:004104DE loc_4104DE:                             ; CODE XREF: std::string::replace(uint,uint,char const*,uint)+EC↓j
.text:004104DE                 mov     ecx, [esp+7Ch+var_58]
.text:004104E2                 sub     ecx, edx
.text:004104E4                 add     ecx, 3FFFFFFCh
.text:004104EA                 cmp     [esp+7Ch+arg_C], ecx
.text:004104F1                 ja      loc_41071D
.text:004104F7                 cmp     [esp+7Ch+arg_8], eax
.text:004104FE                 jnb     short loc_410568
.text:00410500
.text:00410500 loc_410500:                             ; CODE XREF: std::string::replace(uint,uint,char const*,uint)+FD↓j
.text:00410500                                         ; std::string::replace(uint,uint,char const*,uint)+104↓j
.text:00410500                 mov     ecx, [esp+7Ch+arg_C]
.text:00410507                 mov     [esp+7Ch+var_70], ecx ; char *
.text:0041050B                 mov     eax, [esp+7Ch+arg_8]
.text:00410512                 mov     [esp+7Ch+var_74], eax ; unsigned int
.text:00410516                 mov     edx, [esp+7Ch+var_58]
.text:0041051A                 mov     [esp+7Ch+var_78], edx ; unsigned int
.text:0041051E                 mov     ecx, [esp+7Ch+this]
.text:00410525                 mov     [esp+7Ch+lpfctx], ecx ; this
.text:00410528                 mov     [esp+7Ch+fctx.call_site], 0FFFFFFFFh
.text:00410530                 mov     ecx, [esp+7Ch+var_60]
.text:00410534                 call    __ZNSs15_M_replace_safeEjjPKcj ; std::string::_M_replace_safe(uint,uint,char const*,uint)
.text:00410539                 sub     esp, 10h
.text:0041053C                 mov     [esp+7Ch+var_60], eax
.text:00410540
.text:00410540 loc_410540:                             ; CODE XREF: std::string::replace(uint,uint,char const*,uint)+189↓j
.text:00410540                                         ; std::string::replace(uint,uint,char const*,uint)+1CC↓j ...
.text:00410540                 lea     eax, [esp+7Ch+fctx]
.text:00410544                 mov     [esp+7Ch+lpfctx], eax ; lpfctx
.text:00410547                 call    __Unwind_SjLj_Unregister
.text:0041054C                 mov     eax, [esp+7Ch+var_60]
.text:00410550                 add     esp, 70h
.text:00410553                 pop     esi
.text:00410554                 pop     edi
.text:00410555                 pop     ebp
.text:00410556                 retn    10h
.text:00410556 ; ---------------------------------------------------------------------------
.text:00410559                 align 4
.text:0041055C
.text:0041055C loc_41055C:                             ; CODE XREF: std::string::replace(uint,uint,char const*,uint)+68↑j
.text:0041055C                 mov     [esp+7Ch+var_58], ecx
.text:00410560                 jmp     loc_4104DE
.text:00410560 ; ---------------------------------------------------------------------------
.text:00410565                 align 4
.text:00410568
.text:00410568 loc_410568:                             ; CODE XREF: std::string::replace(uint,uint,char const*,uint)+8A↑j
.text:00410568                 add     edx, eax
.text:0041056A                 cmp     [esp+7Ch+arg_8], edx
.text:00410571                 ja      short loc_410500
.text:00410573                 mov     edx, [eax-4]
.text:00410576                 test    edx, edx
.text:00410578                 jg      short loc_410500
.text:0041057A                 mov     ecx, [esp+7Ch+arg_8]
.text:00410581                 add     ecx, [esp+7Ch+arg_C]
.text:00410588                 mov     edx, [esp+7Ch+this]
.text:0041058F                 add     edx, eax
.text:00410591                 cmp     ecx, edx
.text:00410593                 ja      short loc_410604
.text:00410595                 mov     ecx, [esp+7Ch+arg_8]
.text:0041059C                 sub     ecx, eax
.text:0041059E                 mov     [esp+7Ch+var_54], ecx
.text:004105A2
.text:004105A2 loc_4105A2:                             ; CODE XREF: std::string::replace(uint,uint,char const*,uint)+1C2↓j
.text:004105A2                 mov     ecx, [esp+7Ch+arg_C]
.text:004105A9                 mov     [esp+7Ch+var_74], ecx ; unsigned int
.text:004105AD                 mov     eax, [esp+7Ch+var_58]
.text:004105B1                 mov     [esp+7Ch+var_78], eax ; unsigned int
.text:004105B5                 mov     edx, [esp+7Ch+this]
.text:004105BC                 mov     [esp+7Ch+lpfctx], edx ; this
.text:004105BF                 mov     [esp+7Ch+fctx.call_site], 0FFFFFFFFh
.text:004105C7                 mov     ecx, [esp+7Ch+var_60]
.text:004105CB                 call    __ZNSs9_M_mutateEjjj ; std::string::_M_mutate(uint,uint,uint)
.text:004105D0                 sub     esp, 0Ch
.text:004105D3                 mov     ecx, [esp+7Ch+var_60]
.text:004105D7                 mov     edi, [ecx]
.text:004105D9                 mov     esi, [esp+7Ch+var_54]
.text:004105DD                 add     esi, edi
.text:004105DF                 mov     eax, [esp+7Ch+this]
.text:004105E6                 add     eax, edi
.text:004105E8                 cmp     [esp+7Ch+arg_C], 1
.text:004105F0                 jz      short loc_41063C
.text:004105F2                 mov     edi, eax
.text:004105F4                 mov     ecx, [esp+7Ch+arg_C]
.text:004105FB                 rep movsb
.text:004105FD                 jmp     loc_410540
.text:004105FD ; ---------------------------------------------------------------------------
.text:00410602                 align 4
.text:00410604
.text:00410604 loc_410604:                             ; CODE XREF: std::string::replace(uint,uint,char const*,uint)+11F↑j
.text:00410604                 mov     edx, [esp+7Ch+var_58]
.text:00410608                 add     edx, [esp+7Ch+this]
.text:0041060F                 add     edx, eax
.text:00410611                 cmp     [esp+7Ch+arg_8], edx
.text:00410618                 jb      short loc_410648
.text:0041061A                 mov     edx, [esp+7Ch+arg_8]
.text:00410621                 sub     edx, eax
.text:00410623                 mov     eax, edx
.text:00410625                 mov     edx, [esp+7Ch+arg_C]
.text:0041062C                 sub     edx, [esp+7Ch+var_58]
.text:00410630                 add     edx, eax
.text:00410632                 mov     [esp+7Ch+var_54], edx
.text:00410636                 jmp     loc_4105A2
.text:00410636 ; ---------------------------------------------------------------------------
.text:0041063B                 align 4
.text:0041063C
.text:0041063C loc_41063C:                             ; CODE XREF: std::string::replace(uint,uint,char const*,uint)+17C↑j
.text:0041063C                 mov     dl, [esi]
.text:0041063E                 mov     [eax], dl
.text:00410640                 jmp     loc_410540
.text:00410640 ; ---------------------------------------------------------------------------
.text:00410645                 align 4
.text:00410648
.text:00410648 loc_410648:                             ; CODE XREF: std::string::replace(uint,uint,char const*,uint)+1A4↑j
.text:00410648                 lea     eax, [esp+7Ch+var_11]
.text:0041064C                 mov     [esp+7Ch+var_74], eax
.text:00410650                 mov     ecx, [esp+7Ch+arg_C]
.text:00410657                 mov     [esp+7Ch+var_78], ecx
.text:0041065B                 mov     eax, [esp+7Ch+arg_8]
.text:00410662                 mov     [esp+7Ch+lpfctx], eax
.text:00410665                 mov     [esp+7Ch+fctx.call_site], 0FFFFFFFFh
.text:0041066D                 lea     ecx, [esp+7Ch+var_10]
.text:00410671                 call    __ZNSsC1EPKcjRKSaIcE ; std::string::string(char const*,uint,std::allocator<char> const&)
.text:00410676                 sub     esp, 0Ch
.text:00410679                 mov     ecx, [esp+7Ch+arg_C]
.text:00410680                 mov     [esp+7Ch+var_70], ecx ; char *
.text:00410684                 mov     eax, [esp+7Ch+var_10]
.text:00410688                 mov     [esp+7Ch+var_74], eax ; unsigned int
.text:0041068C                 mov     eax, [esp+7Ch+var_58]
.text:00410690                 mov     [esp+7Ch+var_78], eax ; unsigned int
.text:00410694                 mov     edx, [esp+7Ch+this]
.text:0041069B                 mov     [esp+7Ch+lpfctx], edx ; this
.text:0041069E                 mov     [esp+7Ch+fctx.call_site], 1
.text:004106A6                 mov     ecx, [esp+7Ch+var_60]
.text:004106AA                 call    __ZNSs15_M_replace_safeEjjPKcj ; std::string::_M_replace_safe(uint,uint,char const*,uint)
.text:004106AF                 sub     esp, 10h
.text:004106B2                 mov     [esp+7Ch+var_60], eax
.text:004106B6                 mov     ecx, [esp+7Ch+var_10]
.text:004106BA                 mov     [esp+7Ch+var_5C], ecx
.text:004106BE                 mov     eax, ds:__CRT_MT
.text:004106C3                 test    eax, eax
.text:004106C5                 jnz     short loc_4106F0
.text:004106C7                 mov     ecx, [esp+7Ch+var_5C]
.text:004106CB                 mov     eax, [ecx-4]
.text:004106CE                 lea     edx, [eax-1]
.text:004106D1                 mov     [ecx-4], edx
.text:004106D4
.text:004106D4 loc_4106D4:                             ; CODE XREF: std::string::replace(uint,uint,char const*,uint)+293↓j
.text:004106D4                 test    eax, eax
.text:004106D6                 jg      loc_410540
.text:004106DC                 mov     eax, [esp+7Ch+var_5C]
.text:004106E0                 sub     eax, 0Ch
.text:004106E3                 mov     [esp+7Ch+lpfctx], eax ; void *
.text:004106E6                 call    __ZdlPv         ; operator delete(void *)
.text:004106EB                 jmp     loc_410540
.text:004106F0 ; ---------------------------------------------------------------------------
.text:004106F0
.text:004106F0 loc_4106F0:                             ; CODE XREF: std::string::replace(uint,uint,char const*,uint)+251↑j
.text:004106F0                 mov     [esp+7Ch+var_78], 0FFFFFFFFh ; int
.text:004106F8                 mov     eax, [esp+7Ch+var_5C]
.text:004106FC                 sub     eax, 4
.text:004106FF                 mov     [esp+7Ch+lpfctx], eax ; volatile int *
.text:00410702                 call    __ZN9__gnu_cxx18__exchange_and_addEPVii ; __gnu_cxx::__exchange_and_add(int volatile*,int)
.text:00410707                 jmp     short loc_4106D4
.text:00410709 ; ---------------------------------------------------------------------------
.text:00410709
.text:00410709 loc_410709:                             ; CODE XREF: std::string::replace(uint,uint,char const*,uint)+4A↑j
.text:00410709                 mov     [esp+7Ch+lpfctx], offset aBasicStringRep ; "basic_string::replace"
.text:00410710                 mov     [esp+7Ch+fctx.call_site], 0FFFFFFFFh
.text:00410718                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:0041071D ; ---------------------------------------------------------------------------
.text:0041071D
.text:0041071D loc_41071D:                             ; CODE XREF: std::string::replace(uint,uint,char const*,uint)+7D↑j
.text:0041071D                 mov     [esp+7Ch+lpfctx], offset aBasicStringRep ; "basic_string::replace"
.text:00410724                 mov     [esp+7Ch+fctx.call_site], 0FFFFFFFFh
.text:0041072C                 call    __ZSt20__throw_length_errorPKc ; std::__throw_length_error(char const*)
.text:00410731 ; ---------------------------------------------------------------------------
.text:00410731
.text:00410731 loc_410731:                             ; DATA XREF: std::string::replace(uint,uint,char const*,uint)+22↑o
.text:00410731 ;   cleanup() // owned by 4104AE
.text:00410731                 mov     eax, [esp+arg_30]
.text:00410735                 mov     [esp+lpuexcpt], eax
.text:00410739                 lea     ecx, [esp+arg_68]
.text:0041073D                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00410742                 mov     edx, [esp+lpuexcpt]
.text:00410746                 mov     [esp+0], edx    ; lpuexcpt
.text:00410749                 mov     [esp+arg_2C], 0FFFFFFFFh
.text:00410751                 call    __Unwind_SjLj_Resume
.text:00410751 ;   } // starts at 4104AE
.text:00410751 ; } // starts at 4104AE
.text:00410751 __ZNSs7replaceEjjPKcj endp
.text:00410751
.text:00410751 ; ---------------------------------------------------------------------------
.text:00410756                 align 4
.text:00410758
.text:00410758 ; =============== S U B R O U T I N E =======================================
.text:00410758
.text:00410758
.text:00410758 ; _DWORD __stdcall std::string::replace(std::string *__hidden this, unsigned int, unsigned int, const std::string *)
.text:00410758                 public __ZNSs7replaceEjjRKSs
.text:00410758 __ZNSs7replaceEjjRKSs proc near
.text:00410758
.text:00410758 var_1C          = dword ptr -1Ch
.text:00410758 var_18          = dword ptr -18h
.text:00410758 var_14          = dword ptr -14h
.text:00410758 var_10          = dword ptr -10h
.text:00410758 this            = dword ptr  4
.text:00410758 arg_4           = dword ptr  8
.text:00410758 arg_8           = dword ptr  0Ch
.text:00410758
.text:00410758                 sub     esp, 1Ch
.text:0041075B                 mov     eax, [esp+1Ch+arg_8]
.text:0041075F                 mov     eax, [eax]
.text:00410761                 mov     edx, [eax-0Ch]
.text:00410764                 mov     [esp+1Ch+var_10], edx ; char *
.text:00410768                 mov     [esp+1Ch+var_14], eax ; unsigned int
.text:0041076C                 mov     eax, [esp+1Ch+arg_4]
.text:00410770                 mov     [esp+1Ch+var_18], eax ; unsigned int
.text:00410774                 mov     eax, [esp+1Ch+this]
.text:00410778                 mov     [esp+1Ch+var_1C], eax ; this
.text:0041077B                 call    __ZNSs7replaceEjjPKcj ; std::string::replace(uint,uint,char const*,uint)
.text:00410780                 sub     esp, 10h
.text:00410783                 add     esp, 1Ch
.text:00410786                 retn    0Ch
.text:00410786 __ZNSs7replaceEjjRKSs endp
.text:00410786
.text:00410786 ; ---------------------------------------------------------------------------
.text:00410789                 align 4
.text:0041078C
.text:0041078C ; =============== S U B R O U T I N E =======================================
.text:0041078C
.text:0041078C
.text:0041078C ; _DWORD __stdcall std::string::replace(std::string *__hidden this, unsigned int, unsigned int, const std::string *, unsigned int, unsigned int)
.text:0041078C                 public __ZNSs7replaceEjjRKSsjj
.text:0041078C __ZNSs7replaceEjjRKSsjj proc near
.text:0041078C
.text:0041078C var_1C          = dword ptr -1Ch
.text:0041078C var_18          = dword ptr -18h
.text:0041078C var_14          = dword ptr -14h
.text:0041078C var_10          = dword ptr -10h
.text:0041078C this            = dword ptr  4
.text:0041078C arg_4           = dword ptr  8
.text:0041078C arg_8           = dword ptr  0Ch
.text:0041078C arg_C           = dword ptr  10h
.text:0041078C arg_10          = dword ptr  14h
.text:0041078C
.text:0041078C                 push    esi
.text:0041078D                 push    ebx
.text:0041078E                 sub     esp, 14h
.text:00410791                 mov     eax, [esp+1Ch+arg_C]
.text:00410795                 mov     edx, [esp+1Ch+arg_8]
.text:00410799                 mov     esi, [edx]
.text:0041079B                 mov     ebx, [esi-0Ch]
.text:0041079E                 mov     edx, ebx
.text:004107A0                 sub     edx, eax
.text:004107A2                 cmp     edx, [esp+1Ch+arg_10]
.text:004107A6                 jbe     short loc_4107AC
.text:004107A8                 mov     edx, [esp+1Ch+arg_10]
.text:004107AC
.text:004107AC loc_4107AC:                             ; CODE XREF: std::string::replace(uint,uint,std::string const&,uint,uint)+1A↑j
.text:004107AC                 cmp     eax, ebx
.text:004107AE                 ja      short loc_4107D9
.text:004107B0                 mov     [esp+1Ch+var_10], edx ; char *
.text:004107B4                 add     eax, esi
.text:004107B6                 mov     [esp+1Ch+var_14], eax ; unsigned int
.text:004107BA                 mov     eax, [esp+1Ch+arg_4]
.text:004107BE                 mov     [esp+1Ch+var_18], eax ; unsigned int
.text:004107C2                 mov     eax, [esp+1Ch+this]
.text:004107C6                 mov     [esp+1Ch+var_1C], eax ; this
.text:004107C9                 call    __ZNSs7replaceEjjPKcj ; std::string::replace(uint,uint,char const*,uint)
.text:004107CE                 sub     esp, 10h
.text:004107D1                 add     esp, 14h
.text:004107D4                 pop     ebx
.text:004107D5                 pop     esi
.text:004107D6                 retn    14h
.text:004107D9 ; ---------------------------------------------------------------------------
.text:004107D9
.text:004107D9 loc_4107D9:                             ; CODE XREF: std::string::replace(uint,uint,std::string const&,uint,uint)+22↑j
.text:004107D9                 mov     [esp+1Ch+var_1C], offset aBasicStringRep ; "basic_string::replace"
.text:004107E0                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:004107E0 __ZNSs7replaceEjjRKSsjj endp
.text:004107E0
.text:004107E0 ; ---------------------------------------------------------------------------
.text:004107E5                 align 4
.text:004107E8
.text:004107E8 ; =============== S U B R O U T I N E =======================================
.text:004107E8
.text:004107E8
.text:004107E8 ; _DWORD __stdcall std::string::replace(std::string *__hidden this, unsigned int, unsigned int, unsigned int, char)
.text:004107E8                 public __ZNSs7replaceEjjjc
.text:004107E8 __ZNSs7replaceEjjjc proc near
.text:004107E8
.text:004107E8 var_2C          = dword ptr -2Ch
.text:004107E8 this            = dword ptr  4
.text:004107E8 arg_4           = dword ptr  8
.text:004107E8 arg_8           = dword ptr  0Ch
.text:004107E8 arg_C           = dword ptr  10h
.text:004107E8
.text:004107E8                 push    ebp
.text:004107E9                 push    edi
.text:004107EA                 push    esi
.text:004107EB                 push    ebx
.text:004107EC                 sub     esp, 1Ch
.text:004107EF                 mov     eax, [esp+2Ch+this]
.text:004107F3                 mov     esi, [esp+2Ch+arg_4]
.text:004107F7                 mov     edi, [esp+2Ch+arg_8]
.text:004107FB                 movsx   ebp, byte ptr [esp+2Ch+arg_C]
.text:00410800                 mov     edx, [ecx]
.text:00410802                 mov     ebx, [edx-0Ch]
.text:00410805                 mov     edx, ebx
.text:00410807                 sub     edx, eax
.text:00410809                 cmp     edx, esi
.text:0041080B                 jbe     short loc_41080F
.text:0041080D                 mov     edx, esi
.text:0041080F
.text:0041080F loc_41080F:                             ; CODE XREF: std::string::replace(uint,uint,uint,char)+23↑j
.text:0041080F                 cmp     eax, ebx
.text:00410811                 ja      short loc_41082F
.text:00410813                 mov     [esp+2Ch+arg_C], ebp ; unsigned int
.text:00410817                 mov     [esp+2Ch+arg_8], edi ; unsigned int
.text:0041081B                 mov     [esp+2Ch+arg_4], edx ; unsigned int
.text:0041081F                 mov     [esp+2Ch+this], eax ; this
.text:00410823                 add     esp, 1Ch
.text:00410826                 pop     ebx
.text:00410827                 pop     esi
.text:00410828                 pop     edi
.text:00410829                 pop     ebp
.text:0041082A                 jmp     __ZNSs14_M_replace_auxEjjjc ; std::string::_M_replace_aux(uint,uint,uint,char)
.text:0041082F ; ---------------------------------------------------------------------------
.text:0041082F
.text:0041082F loc_41082F:                             ; CODE XREF: std::string::replace(uint,uint,uint,char)+29↑j
.text:0041082F                 mov     [esp+2Ch+var_2C], offset aBasicStringRep ; "basic_string::replace"
.text:00410836                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:00410836 __ZNSs7replaceEjjjc endp
.text:00410836
.text:00410836 ; ---------------------------------------------------------------------------
.text:0041083B                 align 4
.text:0041083C
.text:0041083C ; =============== S U B R O U T I N E =======================================
.text:0041083C
.text:0041083C
.text:0041083C ; _DWORD __stdcall std::string::reserve(std::string *__hidden this, unsigned int)
.text:0041083C                 public __ZNSs7reserveEj
.text:0041083C __ZNSs7reserveEj proc near              ; CODE XREF: std::string::append(uint,char) [clone]+2F↑p
.text:0041083C                                         ; std::string::shrink_to_fit(void)+77↑p ...
.text:0041083C
.text:0041083C var_2C          = dword ptr -2Ch
.text:0041083C var_28          = dword ptr -28h
.text:0041083C var_D           = byte ptr -0Dh
.text:0041083C this            = dword ptr  4
.text:0041083C
.text:0041083C                 push    edi
.text:0041083D                 push    esi
.text:0041083E                 push    ebx
.text:0041083F                 sub     esp, 20h
.text:00410842                 mov     ebx, ecx
.text:00410844                 mov     esi, [esp+2Ch+this]
.text:00410848                 mov     eax, [ecx]
.text:0041084A                 cmp     esi, [eax-8]
.text:0041084D                 jz      short loc_410898
.text:0041084F
.text:0041084F loc_41084F:                             ; CODE XREF: std::string::reserve(uint)+61↓j
.text:0041084F                 mov     edx, [eax-0Ch]
.text:00410852                 lea     ecx, [eax-0Ch]
.text:00410855                 cmp     esi, edx
.text:00410857                 jb      short loc_410894
.text:00410859
.text:00410859 loc_410859:                             ; CODE XREF: std::string::reserve(uint)+5A↓j
.text:00410859                 sub     esi, edx
.text:0041085B                 mov     [esp+2Ch+var_28], esi
.text:0041085F                 lea     eax, [esp+2Ch+var_D]
.text:00410863                 mov     [esp+2Ch+var_2C], eax
.text:00410866                 call    __ZNSs4_Rep8_M_cloneERKSaIcEj ; std::string::_Rep::_M_clone(std::allocator<char> const&,uint)
.text:0041086B                 sub     esp, 8
.text:0041086E                 mov     edi, eax
.text:00410870                 mov     esi, [ebx]
.text:00410872                 mov     ecx, ds:__CRT_MT
.text:00410878                 test    ecx, ecx
.text:0041087A                 jnz     short loc_4108B4
.text:0041087C                 mov     edx, [esi-4]
.text:0041087F                 lea     eax, [edx-1]
.text:00410882                 mov     [esi-4], eax
.text:00410885                 test    edx, edx
.text:00410887                 jle     short loc_4108A4
.text:00410889
.text:00410889 loc_410889:                             ; CODE XREF: std::string::reserve(uint)+73↓j
.text:00410889                                         ; std::string::reserve(uint)+8F↓j
.text:00410889                 mov     [ebx], edi
.text:0041088B
.text:0041088B loc_41088B:                             ; CODE XREF: std::string::reserve(uint)+63↓j
.text:0041088B                 add     esp, 20h
.text:0041088E                 pop     ebx
.text:0041088F                 pop     esi
.text:00410890                 pop     edi
.text:00410891                 retn    4
.text:00410894 ; ---------------------------------------------------------------------------
.text:00410894
.text:00410894 loc_410894:                             ; CODE XREF: std::string::reserve(uint)+1B↑j
.text:00410894                 mov     esi, edx
.text:00410896                 jmp     short loc_410859
.text:00410898 ; ---------------------------------------------------------------------------
.text:00410898
.text:00410898 loc_410898:                             ; CODE XREF: std::string::reserve(uint)+11↑j
.text:00410898                 mov     edi, [eax-4]
.text:0041089B                 test    edi, edi
.text:0041089D                 jg      short loc_41084F
.text:0041089F                 jmp     short loc_41088B
.text:0041089F ; ---------------------------------------------------------------------------
.text:004108A1                 align 4
.text:004108A4
.text:004108A4 loc_4108A4:                             ; CODE XREF: std::string::reserve(uint)+4B↑j
.text:004108A4                                         ; std::string::reserve(uint)+91↓j
.text:004108A4                 sub     esi, 0Ch
.text:004108A7                 mov     [esp+2Ch+var_2C], esi ; void *
.text:004108AA                 call    __ZdlPv         ; operator delete(void *)
.text:004108AF                 jmp     short loc_410889
.text:004108AF ; ---------------------------------------------------------------------------
.text:004108B1                 align 4
.text:004108B4
.text:004108B4 loc_4108B4:                             ; CODE XREF: std::string::reserve(uint)+3E↑j
.text:004108B4                 mov     [esp+2Ch+var_28], 0FFFFFFFFh ; int
.text:004108BC                 lea     eax, [esi-4]
.text:004108BF                 mov     [esp+2Ch+var_2C], eax ; volatile int *
.text:004108C2                 call    __ZN9__gnu_cxx18__exchange_and_addEPVii ; __gnu_cxx::__exchange_and_add(int volatile*,int)
.text:004108C7                 mov     edx, eax
.text:004108C9                 test    edx, edx
.text:004108CB                 jg      short loc_410889
.text:004108CD                 jmp     short loc_4108A4
.text:004108CD __ZNSs7reserveEj endp
.text:004108CD
.text:004108CD ; ---------------------------------------------------------------------------
.text:004108CF                 align 10h
.text:004108D0
.text:004108D0 ; =============== S U B R O U T I N E =======================================
.text:004108D0
.text:004108D0
.text:004108D0 ; _DWORD std::string::pop_back(std::string *__hidden this)
.text:004108D0                 public __ZNSs8pop_backEv
.text:004108D0 __ZNSs8pop_backEv proc near
.text:004108D0
.text:004108D0 var_1C          = dword ptr -1Ch
.text:004108D0 var_18          = dword ptr -18h
.text:004108D0 var_14          = dword ptr -14h
.text:004108D0 this            = dword ptr  4
.text:004108D0
.text:004108D0                 sub     esp, 1Ch
.text:004108D3                 mov     eax, [ecx]
.text:004108D5                 mov     eax, [eax-0Ch]
.text:004108D8                 lea     edx, [eax-1]
.text:004108DB                 cmp     edx, eax
.text:004108DD                 ja      short loc_4108FE
.text:004108DF                 mov     [esp+1Ch+var_14], 0 ; unsigned int
.text:004108E7                 mov     [esp+1Ch+var_18], 1 ; unsigned int
.text:004108EF                 mov     [esp+1Ch+var_1C], edx ; this
.text:004108F2                 call    __ZNSs9_M_mutateEjjj ; std::string::_M_mutate(uint,uint,uint)
.text:004108F7                 sub     esp, 0Ch
.text:004108FA                 add     esp, 1Ch
.text:004108FD                 retn
.text:004108FE ; ---------------------------------------------------------------------------
.text:004108FE
.text:004108FE loc_4108FE:                             ; CODE XREF: std::string::pop_back(void)+D↑j
.text:004108FE                 mov     [esp+1Ch+var_1C], offset aBasicStringEra ; "basic_string::erase"
.text:00410905                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:00410905 __ZNSs8pop_backEv endp
.text:00410905
.text:00410905 ; ---------------------------------------------------------------------------
.text:0041090A                 align 4
.text:0041090C
.text:0041090C ; =============== S U B R O U T I N E =======================================
.text:0041090C
.text:0041090C
.text:0041090C ; _DWORD __cdecl std::string::_M_assign(std::string *__hidden this, char *, unsigned int, char)
.text:0041090C                 public __ZNSs9_M_assignEPcjc
.text:0041090C __ZNSs9_M_assignEPcjc proc near
.text:0041090C
.text:0041090C this            = dword ptr  4
.text:0041090C arg_4           = dword ptr  8
.text:0041090C arg_8           = dword ptr  0Ch
.text:0041090C
.text:0041090C                 push    edi
.text:0041090D                 mov     ecx, [esp+4+arg_4]
.text:00410911                 mov     edx, [esp+4+arg_8]
.text:00410915                 cmp     ecx, 1
.text:00410918                 jz      short loc_410924
.text:0041091A                 mov     al, dl
.text:0041091C                 mov     edi, [esp+4+this]
.text:00410920                 rep stosb
.text:00410922                 pop     edi
.text:00410923                 retn
.text:00410924 ; ---------------------------------------------------------------------------
.text:00410924
.text:00410924 loc_410924:                             ; CODE XREF: std::string::_M_assign(char *,uint,char)+C↑j
.text:00410924                 mov     eax, [esp+4+this]
.text:00410928                 mov     [eax], dl
.text:0041092A                 pop     edi
.text:0041092B                 retn
.text:0041092B __ZNSs9_M_assignEPcjc endp
.text:0041092B
.text:0041092C
.text:0041092C ; =============== S U B R O U T I N E =======================================
.text:0041092C
.text:0041092C
.text:0041092C ; _DWORD __stdcall std::string::_M_mutate(std::string *__hidden this, unsigned int, unsigned int, unsigned int)
.text:0041092C                 public __ZNSs9_M_mutateEjjj
.text:0041092C __ZNSs9_M_mutateEjjj proc near          ; CODE XREF: std::string::_M_leak_hard(void)+28↑p
.text:0041092C                                         ; std::string::_M_replace_aux(uint,uint,uint,char)+39↑p ...
.text:0041092C
.text:0041092C var_4C          = dword ptr -4Ch
.text:0041092C var_48          = dword ptr -48h
.text:0041092C var_44          = dword ptr -44h
.text:0041092C var_34          = dword ptr -34h
.text:0041092C var_30          = dword ptr -30h
.text:0041092C var_1D          = byte ptr -1Dh
.text:0041092C this            = dword ptr  4
.text:0041092C arg_4           = dword ptr  8
.text:0041092C arg_8           = dword ptr  0Ch
.text:0041092C
.text:0041092C                 push    ebp
.text:0041092D                 push    edi
.text:0041092E                 push    esi
.text:0041092F                 push    ebx
.text:00410930                 sub     esp, 3Ch
.text:00410933                 mov     ebp, ecx
.text:00410935                 mov     edi, [ecx]
.text:00410937                 mov     edx, [edi-0Ch]
.text:0041093A                 mov     ebx, [esp+4Ch+arg_8]
.text:0041093E                 sub     ebx, [esp+4Ch+arg_4]
.text:00410942                 add     ebx, edx
.text:00410944                 sub     edx, [esp+4Ch+this]
.text:00410948                 sub     edx, [esp+4Ch+arg_4]
.text:0041094C                 mov     eax, [edi-8]
.text:0041094F                 cmp     ebx, eax
.text:00410951                 ja      short loc_41095A
.text:00410953                 mov     ecx, [edi-4]
.text:00410956                 test    ecx, ecx
.text:00410958                 jle     short loc_4109D0
.text:0041095A
.text:0041095A loc_41095A:                             ; CODE XREF: std::string::_M_mutate(uint,uint,uint)+25↑j
.text:0041095A                 lea     ecx, [esp+4Ch+var_1D]
.text:0041095E                 mov     [esp+4Ch+var_44], ecx
.text:00410962                 mov     [esp+4Ch+var_48], eax
.text:00410966                 mov     [esp+4Ch+var_4C], ebx
.text:00410969                 mov     [esp+4Ch+var_34], edx
.text:0041096D                 call    __ZNSs4_Rep9_S_createEjjRKSaIcE ; std::string::_Rep::_S_create(uint,uint,std::allocator<char> const&)
.text:00410972                 mov     esi, [esp+4Ch+this]
.text:00410976                 test    esi, esi
.text:00410978                 mov     edx, [esp+4Ch+var_34]
.text:0041097C                 jnz     loc_410A40
.text:00410982                 add     eax, 0Ch
.text:00410985                 mov     [esp+4Ch+var_30], eax
.text:00410989
.text:00410989 loc_410989:                             ; CODE XREF: std::string::_M_mutate(uint,uint,uint)+12D↓j
.text:00410989                                         ; std::string::_M_mutate(uint,uint,uint)+174↓j
.text:00410989                 test    edx, edx
.text:0041098B                 jnz     short loc_410A0C
.text:0041098D
.text:0041098D loc_41098D:                             ; CODE XREF: std::string::_M_mutate(uint,uint,uint)+102↓j
.text:0041098D                                         ; std::string::_M_mutate(uint,uint,uint)+160↓j
.text:0041098D                 mov     esi, [ebp+0]
.text:00410990                 mov     edi, ds:__CRT_MT
.text:00410996                 test    edi, edi
.text:00410998                 jnz     loc_410A60
.text:0041099E                 mov     eax, [esi-4]
.text:004109A1                 lea     edx, [eax-1]
.text:004109A4                 mov     [esi-4], edx
.text:004109A7
.text:004109A7 loc_4109A7:                             ; CODE XREF: std::string::_M_mutate(uint,uint,uint)+147↓j
.text:004109A7                 test    eax, eax
.text:004109A9                 jle     loc_410A78
.text:004109AF
.text:004109AF loc_4109AF:                             ; CODE XREF: std::string::_M_mutate(uint,uint,uint)+157↓j
.text:004109AF                 mov     edi, [esp+4Ch+var_30]
.text:004109B3                 mov     [ebp+0], edi
.text:004109B6
.text:004109B6 loc_4109B6:                             ; CODE XREF: std::string::_M_mutate(uint,uint,uint)+A6↓j
.text:004109B6                                         ; std::string::_M_mutate(uint,uint,uint)+B0↓j ...
.text:004109B6                 mov     dword ptr [edi-4], 0
.text:004109BD                 mov     [edi-0Ch], ebx
.text:004109C0                 mov     byte ptr [edi+ebx], 0
.text:004109C4                 add     esp, 3Ch
.text:004109C7                 pop     ebx
.text:004109C8                 pop     esi
.text:004109C9                 pop     edi
.text:004109CA                 pop     ebp
.text:004109CB                 retn    0Ch
.text:004109CB ; ---------------------------------------------------------------------------
.text:004109CE                 align 10h
.text:004109D0
.text:004109D0 loc_4109D0:                             ; CODE XREF: std::string::_M_mutate(uint,uint,uint)+2C↑j
.text:004109D0                 test    edx, edx
.text:004109D2                 jz      short loc_4109B6
.text:004109D4                 mov     ecx, [esp+4Ch+arg_8]
.text:004109D8                 cmp     [esp+4Ch+arg_4], ecx
.text:004109DC                 jz      short loc_4109B6
.text:004109DE                 mov     esi, [esp+4Ch+arg_4]
.text:004109E2                 add     esi, [esp+4Ch+this]
.text:004109E6                 add     esi, edi
.text:004109E8                 mov     eax, [esp+4Ch+this]
.text:004109EC                 add     eax, ecx
.text:004109EE                 add     edi, eax
.text:004109F0                 cmp     edx, 1
.text:004109F3                 jz      short loc_410A34
.text:004109F5                 mov     [esp+4Ch+var_44], edx ; size_t
.text:004109F9                 mov     [esp+4Ch+var_48], esi ; void *
.text:004109FD                 mov     [esp+4Ch+var_4C], edi ; void *
.text:00410A00                 call    _memmove
.text:00410A05                 mov     edi, [ebp+0]
.text:00410A08                 jmp     short loc_4109B6
.text:00410A08 ; ---------------------------------------------------------------------------
.text:00410A0A                 align 4
.text:00410A0C
.text:00410A0C loc_410A0C:                             ; CODE XREF: std::string::_M_mutate(uint,uint,uint)+5F↑j
.text:00410A0C                 mov     esi, [esp+4Ch+arg_4]
.text:00410A10                 add     esi, [esp+4Ch+this]
.text:00410A14                 add     esi, [ebp+0]
.text:00410A17                 mov     eax, [esp+4Ch+arg_8]
.text:00410A1B                 add     eax, [esp+4Ch+this]
.text:00410A1F                 add     eax, [esp+4Ch+var_30]
.text:00410A23                 cmp     edx, 1
.text:00410A26                 jz      short loc_410A88
.text:00410A28                 mov     edi, eax
.text:00410A2A                 mov     ecx, edx
.text:00410A2C                 rep movsb
.text:00410A2E                 jmp     loc_41098D
.text:00410A2E ; ---------------------------------------------------------------------------
.text:00410A33                 align 4
.text:00410A34
.text:00410A34 loc_410A34:                             ; CODE XREF: std::string::_M_mutate(uint,uint,uint)+C7↑j
.text:00410A34                 mov     al, [esi]
.text:00410A36                 mov     [edi], al
.text:00410A38                 mov     edi, [ebp+0]
.text:00410A3B                 jmp     loc_4109B6
.text:00410A40 ; ---------------------------------------------------------------------------
.text:00410A40
.text:00410A40 loc_410A40:                             ; CODE XREF: std::string::_M_mutate(uint,uint,uint)+50↑j
.text:00410A40                 mov     esi, [ebp+0]
.text:00410A43                 cmp     [esp+4Ch+this], 1
.text:00410A48                 jz      short loc_410A94
.text:00410A4A                 add     eax, 0Ch
.text:00410A4D                 mov     [esp+4Ch+var_30], eax
.text:00410A51                 mov     edi, eax
.text:00410A53                 mov     ecx, [esp+4Ch+this]
.text:00410A57                 rep movsb
.text:00410A59                 jmp     loc_410989
.text:00410A59 ; ---------------------------------------------------------------------------
.text:00410A5E                 align 10h
.text:00410A60
.text:00410A60 loc_410A60:                             ; CODE XREF: std::string::_M_mutate(uint,uint,uint)+6C↑j
.text:00410A60                 mov     [esp+4Ch+var_48], 0FFFFFFFFh ; int
.text:00410A68                 lea     eax, [esi-4]
.text:00410A6B                 mov     [esp+4Ch+var_4C], eax ; volatile int *
.text:00410A6E                 call    __ZN9__gnu_cxx18__exchange_and_addEPVii ; __gnu_cxx::__exchange_and_add(int volatile*,int)
.text:00410A73                 jmp     loc_4109A7
.text:00410A78 ; ---------------------------------------------------------------------------
.text:00410A78
.text:00410A78 loc_410A78:                             ; CODE XREF: std::string::_M_mutate(uint,uint,uint)+7D↑j
.text:00410A78                 sub     esi, 0Ch
.text:00410A7B                 mov     [esp+4Ch+var_4C], esi ; void *
.text:00410A7E                 call    __ZdlPv         ; operator delete(void *)
.text:00410A83                 jmp     loc_4109AF
.text:00410A88 ; ---------------------------------------------------------------------------
.text:00410A88
.text:00410A88 loc_410A88:                             ; CODE XREF: std::string::_M_mutate(uint,uint,uint)+FA↑j
.text:00410A88                 mov     dl, [esi]
.text:00410A8A                 mov     [eax], dl
.text:00410A8C                 jmp     loc_41098D
.text:00410A8C ; ---------------------------------------------------------------------------
.text:00410A91                 align 4
.text:00410A94
.text:00410A94 loc_410A94:                             ; CODE XREF: std::string::_M_mutate(uint,uint,uint)+11C↑j
.text:00410A94                 mov     cl, [esi]
.text:00410A96                 mov     [eax+0Ch], cl
.text:00410A99                 add     eax, 0Ch
.text:00410A9C                 mov     [esp+4Ch+var_30], eax
.text:00410AA0                 jmp     loc_410989
.text:00410AA0 __ZNSs9_M_mutateEjjj endp
.text:00410AA0
.text:00410AA0 ; ---------------------------------------------------------------------------
.text:00410AA5                 align 4
.text:00410AA8
.text:00410AA8 ; =============== S U B R O U T I N E =======================================
.text:00410AA8
.text:00410AA8
.text:00410AA8 ; _DWORD __stdcall std::string::push_back(std::string *__hidden this, char)
.text:00410AA8                 public __ZNSs9push_backEc
.text:00410AA8 __ZNSs9push_backEc proc near
.text:00410AA8
.text:00410AA8 var_2C          = dword ptr -2Ch
.text:00410AA8 var_D           = byte ptr -0Dh
.text:00410AA8 this            = dword ptr  4
.text:00410AA8
.text:00410AA8                 push    esi
.text:00410AA9                 push    ebx
.text:00410AAA                 sub     esp, 24h
.text:00410AAD                 mov     esi, ecx
.text:00410AAF                 mov     al, byte ptr [esp+2Ch+this]
.text:00410AB3                 mov     [esp+2Ch+var_D], al
.text:00410AB7                 mov     eax, [ecx]
.text:00410AB9                 mov     edx, [eax-0Ch]
.text:00410ABC                 lea     ebx, [edx+1]
.text:00410ABF                 cmp     ebx, [eax-8]
.text:00410AC2                 ja      short loc_410ACB
.text:00410AC4                 mov     ecx, [eax-4]
.text:00410AC7                 test    ecx, ecx
.text:00410AC9                 jle     short loc_410ADB
.text:00410ACB
.text:00410ACB loc_410ACB:                             ; CODE XREF: std::string::push_back(char)+1A↑j
.text:00410ACB                 mov     [esp+2Ch+var_2C], ebx ; this
.text:00410ACE                 mov     ecx, esi
.text:00410AD0                 call    __ZNSs7reserveEj ; std::string::reserve(uint)
.text:00410AD5                 push    eax
.text:00410AD6                 mov     eax, [esi]
.text:00410AD8                 mov     edx, [eax-0Ch]
.text:00410ADB
.text:00410ADB loc_410ADB:                             ; CODE XREF: std::string::push_back(char)+21↑j
.text:00410ADB                 mov     cl, [esp+2Ch+var_D]
.text:00410ADF                 mov     [eax+edx], cl
.text:00410AE2                 mov     eax, [esi]
.text:00410AE4                 mov     dword ptr [eax-4], 0
.text:00410AEB                 mov     [eax-0Ch], ebx
.text:00410AEE                 mov     byte ptr [eax+ebx], 0
.text:00410AF2                 add     esp, 24h
.text:00410AF5                 pop     ebx
.text:00410AF6                 pop     esi
.text:00410AF7                 retn    4
.text:00410AF7 __ZNSs9push_backEc endp
.text:00410AF7
.text:00410AF7 ; ---------------------------------------------------------------------------
.text:00410AFA                 align 4
.text:00410AFC
.text:00410AFC ; =============== S U B R O U T I N E =======================================
.text:00410AFC
.text:00410AFC
.text:00410AFC ; std::string::string(std::string &&)
.text:00410AFC                 public __ZNSsC1EOSs
.text:00410AFC __ZNSsC1EOSs    proc near
.text:00410AFC
.text:00410AFC lpfctx          = dword ptr -6Ch
.text:00410AFC var_68          = dword ptr -68h
.text:00410AFC var_64          = dword ptr -64h
.text:00410AFC fctx            = SjLj_Function_Context ptr -50h
.text:00410AFC var_D           = byte ptr -0Dh
.text:00410AFC arg_0           = dword ptr  4
.text:00410AFC
.text:00410AFC                 push    edi
.text:00410AFD                 push    esi
.text:00410AFE                 push    ebx
.text:00410AFF                 sub     esp, 60h
.text:00410B02                 mov     edi, ecx
.text:00410B04                 mov     ebx, [esp+6Ch+arg_0]
.text:00410B08                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00410B10                 mov     [esp+6Ch+fctx.lsda], offset dword_4123A0
.text:00410B18                 lea     esi, [esp+6Ch+fctx]
.text:00410B1C                 mov     [esp+6Ch+lpfctx], esi ; lpfctx
.text:00410B1F                 call    __Unwind_SjLj_Register
.text:00410B24                 mov     eax, [ebx]
.text:00410B26                 mov     [edi], eax
.text:00410B28                 lea     eax, [esp+6Ch+var_D]
.text:00410B2C                 mov     [esp+6Ch+var_64], eax
.text:00410B30                 mov     [esp+6Ch+var_68], 0
.text:00410B38                 mov     [esp+6Ch+lpfctx], 0
.text:00410B3F                 mov     [esp+6Ch+fctx.call_site], 0
.text:00410B47                 call    __ZNSs12_S_constructEjcRKSaIcE ; std::string::_S_construct(uint,char,std::allocator<char> const&)
.text:00410B4C                 mov     [ebx], eax
.text:00410B4E                 mov     [esp+6Ch+lpfctx], esi ; lpfctx
.text:00410B51                 call    __Unwind_SjLj_Unregister
.text:00410B56                 add     esp, 60h
.text:00410B59                 pop     ebx
.text:00410B5A                 pop     esi
.text:00410B5B                 pop     edi
.text:00410B5C                 retn    4
.text:00410B5C __ZNSsC1EOSs    endp
.text:00410B5C
.text:00410B5C ; ---------------------------------------------------------------------------
.text:00410B5F                 align 10h
.text:00410B60
.text:00410B60 ; =============== S U B R O U T I N E =======================================
.text:00410B60
.text:00410B60
.text:00410B60 ; std::string::string(char const*, std::allocator<char> const&)
.text:00410B60                 public __ZNSsC1EPKcRKSaIcE
.text:00410B60 __ZNSsC1EPKcRKSaIcE proc near           ; CODE XREF: std::__throw_logic_error(char const*)+5F↑p
.text:00410B60                                         ; std::__throw_domain_error(char const*)+5F↑p ...
.text:00410B60
.text:00410B60 var_1C          = dword ptr -1Ch
.text:00410B60 var_18          = dword ptr -18h
.text:00410B60 var_14          = dword ptr -14h
.text:00410B60 var_10          = byte ptr -10h
.text:00410B60 arg_0           = dword ptr  4
.text:00410B60 arg_4           = dword ptr  8
.text:00410B60
.text:00410B60                 push    edi
.text:00410B61                 push    ebx
.text:00410B62                 sub     esp, 14h
.text:00410B65                 mov     ebx, ecx
.text:00410B67                 mov     edx, [esp+1Ch+arg_0]
.text:00410B6B                 test    edx, edx
.text:00410B6D                 jz      short loc_410BA4
.text:00410B6F                 xor     eax, eax
.text:00410B71                 mov     ecx, 0FFFFFFFFh
.text:00410B76                 mov     edi, edx
.text:00410B78                 repne scasb
.text:00410B7A                 not     ecx
.text:00410B7C                 lea     ecx, [edx+ecx-1]
.text:00410B80
.text:00410B80 loc_410B80:                             ; CODE XREF: std::string::string(char const*,std::allocator<char> const&)+49↓j
.text:00410B80                 mov     [esp+1Ch+var_10], 0
.text:00410B85                 mov     eax, [esp+1Ch+arg_4]
.text:00410B89                 mov     [esp+1Ch+var_14], eax
.text:00410B8D                 mov     [esp+1Ch+var_18], ecx
.text:00410B91                 mov     [esp+1Ch+var_1C], edx
.text:00410B94                 call    __ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag ; std::string::_S_construct<char const*>(char const*,char const*,std::allocator<char> const&,std::forward_iterator_tag)
.text:00410B99                 mov     [ebx], eax
.text:00410B9B                 add     esp, 14h
.text:00410B9E                 pop     ebx
.text:00410B9F                 pop     edi
.text:00410BA0                 retn    8
.text:00410BA0 ; ---------------------------------------------------------------------------
.text:00410BA3                 align 4
.text:00410BA4
.text:00410BA4 loc_410BA4:                             ; CODE XREF: std::string::string(char const*,std::allocator<char> const&)+D↑j
.text:00410BA4                 mov     ecx, 0FFFFFFFFh
.text:00410BA9                 jmp     short loc_410B80
.text:00410BA9 __ZNSsC1EPKcRKSaIcE endp
.text:00410BA9
.text:00410BA9 ; ---------------------------------------------------------------------------
.text:00410BAB                 align 4
.text:00410BAC
.text:00410BAC ; =============== S U B R O U T I N E =======================================
.text:00410BAC
.text:00410BAC
.text:00410BAC ; std::string::string(char const*, unsigned int, std::allocator<char> const&)
.text:00410BAC                 public __ZNSsC1EPKcjRKSaIcE
.text:00410BAC __ZNSsC1EPKcjRKSaIcE proc near          ; CODE XREF: std::string::replace(uint,uint,char const*,uint)+1FD↑p
.text:00410BAC
.text:00410BAC var_1C          = dword ptr -1Ch
.text:00410BAC var_18          = dword ptr -18h
.text:00410BAC var_14          = dword ptr -14h
.text:00410BAC var_10          = byte ptr -10h
.text:00410BAC arg_0           = dword ptr  4
.text:00410BAC arg_4           = dword ptr  8
.text:00410BAC arg_8           = dword ptr  0Ch
.text:00410BAC
.text:00410BAC                 push    ebx
.text:00410BAD                 sub     esp, 18h
.text:00410BB0                 mov     ebx, ecx
.text:00410BB2                 mov     eax, [esp+1Ch+arg_0]
.text:00410BB6                 mov     [esp+1Ch+var_10], 0
.text:00410BBB                 mov     edx, [esp+1Ch+arg_8]
.text:00410BBF                 mov     [esp+1Ch+var_14], edx
.text:00410BC3                 mov     edx, [esp+1Ch+arg_4]
.text:00410BC7                 add     edx, eax
.text:00410BC9                 mov     [esp+1Ch+var_18], edx
.text:00410BCD                 mov     [esp+1Ch+var_1C], eax
.text:00410BD0                 call    __ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag ; std::string::_S_construct<char const*>(char const*,char const*,std::allocator<char> const&,std::forward_iterator_tag)
.text:00410BD5                 mov     [ebx], eax
.text:00410BD7                 add     esp, 18h
.text:00410BDA                 pop     ebx
.text:00410BDB                 retn    0Ch
.text:00410BDB __ZNSsC1EPKcjRKSaIcE endp
.text:00410BDB
.text:00410BDB ; ---------------------------------------------------------------------------
.text:00410BDE                 align 10h
.text:00410BE0
.text:00410BE0 ; =============== S U B R O U T I N E =======================================
.text:00410BE0
.text:00410BE0
.text:00410BE0 ; std::string::string(std::allocator<char> const&)
.text:00410BE0                 public __ZNSsC1ERKSaIcE
.text:00410BE0 __ZNSsC1ERKSaIcE proc near
.text:00410BE0
.text:00410BE0 var_1C          = dword ptr -1Ch
.text:00410BE0 var_18          = dword ptr -18h
.text:00410BE0 var_14          = dword ptr -14h
.text:00410BE0 arg_0           = dword ptr  4
.text:00410BE0
.text:00410BE0                 push    ebx
.text:00410BE1                 sub     esp, 18h
.text:00410BE4                 mov     ebx, ecx
.text:00410BE6                 mov     eax, [esp+1Ch+arg_0]
.text:00410BEA                 mov     [esp+1Ch+var_14], eax
.text:00410BEE                 mov     [esp+1Ch+var_18], 0
.text:00410BF6                 mov     [esp+1Ch+var_1C], 0
.text:00410BFD                 call    __ZNSs12_S_constructEjcRKSaIcE ; std::string::_S_construct(uint,char,std::allocator<char> const&)
.text:00410C02                 mov     [ebx], eax
.text:00410C04                 add     esp, 18h
.text:00410C07                 pop     ebx
.text:00410C08                 retn    4
.text:00410C08 __ZNSsC1ERKSaIcE endp
.text:00410C08
.text:00410C08 ; ---------------------------------------------------------------------------
.text:00410C0B                 align 4
.text:00410C0C
.text:00410C0C ; =============== S U B R O U T I N E =======================================
.text:00410C0C
.text:00410C0C
.text:00410C0C ; _DWORD __stdcall std::string::string(std::string *__hidden this, const std::string *)
.text:00410C0C                 public __ZNSsC1ERKSs
.text:00410C0C __ZNSsC1ERKSs   proc near               ; CODE XREF: std::logic_error::logic_error(std::string const&)+56↑p
.text:00410C0C                                         ; std::runtime_error::runtime_error(std::string const&)+56↑p ...
.text:00410C0C
.text:00410C0C var_3C          = dword ptr -3Ch
.text:00410C0C var_38          = dword ptr -38h
.text:00410C0C var_20          = dword ptr -20h
.text:00410C0C var_D           = byte ptr -0Dh
.text:00410C0C this            = dword ptr  4
.text:00410C0C
.text:00410C0C                 push    ebx
.text:00410C0D                 sub     esp, 38h
.text:00410C10                 mov     ebx, ecx
.text:00410C12                 mov     eax, [esp+3Ch+this]
.text:00410C16                 mov     eax, [eax]
.text:00410C18                 mov     edx, [eax-4]
.text:00410C1B                 test    edx, edx
.text:00410C1D                 js      short loc_410C38
.text:00410C1F                 mov     ecx, ds:__CRT_MT
.text:00410C25                 test    ecx, ecx
.text:00410C27                 jnz     short loc_410C5C
.text:00410C29                 inc     edx
.text:00410C2A                 mov     [eax-4], edx
.text:00410C2D                 mov     [ebx], eax
.text:00410C2F                 add     esp, 38h
.text:00410C32                 pop     ebx
.text:00410C33                 retn    4
.text:00410C33 ; ---------------------------------------------------------------------------
.text:00410C36                 align 4
.text:00410C38
.text:00410C38 loc_410C38:                             ; CODE XREF: std::string::string(std::string const&)+11↑j
.text:00410C38                 lea     ecx, [eax-0Ch]
.text:00410C3B                 mov     [esp+3Ch+var_38], 0
.text:00410C43                 lea     eax, [esp+3Ch+var_D]
.text:00410C47                 mov     [esp+3Ch+var_3C], eax
.text:00410C4A                 call    __ZNSs4_Rep8_M_cloneERKSaIcEj ; std::string::_Rep::_M_clone(std::allocator<char> const&,uint)
.text:00410C4F                 sub     esp, 8
.text:00410C52                 mov     [ebx], eax
.text:00410C54                 add     esp, 38h
.text:00410C57                 pop     ebx
.text:00410C58                 retn    4
.text:00410C58 ; ---------------------------------------------------------------------------
.text:00410C5B                 align 4
.text:00410C5C
.text:00410C5C loc_410C5C:                             ; CODE XREF: std::string::string(std::string const&)+1B↑j
.text:00410C5C                 mov     [esp+3Ch+var_38], 1 ; int
.text:00410C64                 lea     edx, [eax-4]
.text:00410C67                 mov     [esp+3Ch+var_3C], edx ; volatile int *
.text:00410C6A                 mov     [esp+3Ch+var_20], eax
.text:00410C6E                 call    __ZN9__gnu_cxx12__atomic_addEPVii ; __gnu_cxx::__atomic_add(int volatile*,int)
.text:00410C73                 mov     eax, [esp+3Ch+var_20]
.text:00410C77                 mov     [ebx], eax
.text:00410C79                 add     esp, 38h
.text:00410C7C                 pop     ebx
.text:00410C7D                 retn    4
.text:00410C7D __ZNSsC1ERKSs   endp
.text:00410C7D
.text:00410C80
.text:00410C80 ; =============== S U B R O U T I N E =======================================
.text:00410C80
.text:00410C80
.text:00410C80 ; _DWORD __stdcall std::string::string(std::string *__hidden this, const std::string *, unsigned int, unsigned int)
.text:00410C80                 public __ZNSsC1ERKSsjj
.text:00410C80 __ZNSsC1ERKSsjj proc near               ; CODE XREF: std::string::substr(uint,uint)+25↑p
.text:00410C80
.text:00410C80 var_2C          = dword ptr -2Ch
.text:00410C80 var_28          = dword ptr -28h
.text:00410C80 var_24          = dword ptr -24h
.text:00410C80 var_20          = byte ptr -20h
.text:00410C80 var_D           = byte ptr -0Dh
.text:00410C80 this            = dword ptr  4
.text:00410C80 arg_4           = dword ptr  8
.text:00410C80 arg_8           = dword ptr  0Ch
.text:00410C80
.text:00410C80                 push    edi
.text:00410C81                 push    esi
.text:00410C82                 push    ebx
.text:00410C83                 sub     esp, 20h
.text:00410C86                 mov     edi, ecx
.text:00410C88                 mov     eax, [esp+2Ch+arg_4]
.text:00410C8C                 mov     edx, [esp+2Ch+this]
.text:00410C90                 mov     edx, [edx]
.text:00410C92                 mov     esi, [edx-0Ch]
.text:00410C95                 mov     ebx, esi
.text:00410C97                 sub     ebx, eax
.text:00410C99                 cmp     ebx, [esp+2Ch+arg_8]
.text:00410C9D                 jbe     short loc_410CA3
.text:00410C9F                 mov     ebx, [esp+2Ch+arg_8]
.text:00410CA3
.text:00410CA3 loc_410CA3:                             ; CODE XREF: std::string::string(std::string const&,uint,uint)+1D↑j
.text:00410CA3                 add     ebx, eax
.text:00410CA5                 add     ebx, edx
.text:00410CA7                 cmp     eax, esi
.text:00410CA9                 ja      short loc_410CD1
.text:00410CAB                 mov     [esp+2Ch+var_20], 0
.text:00410CB0                 lea     ecx, [esp+2Ch+var_D]
.text:00410CB4                 mov     [esp+2Ch+var_24], ecx
.text:00410CB8                 mov     [esp+2Ch+var_28], ebx
.text:00410CBC                 add     eax, edx
.text:00410CBE                 mov     [esp+2Ch+var_2C], eax
.text:00410CC1                 call    __ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag ; std::string::_S_construct<char *>(char *,char *,std::allocator<char> const&,std::forward_iterator_tag)
.text:00410CC6                 mov     [edi], eax
.text:00410CC8                 add     esp, 20h
.text:00410CCB                 pop     ebx
.text:00410CCC                 pop     esi
.text:00410CCD                 pop     edi
.text:00410CCE                 retn    0Ch
.text:00410CD1 ; ---------------------------------------------------------------------------
.text:00410CD1
.text:00410CD1 loc_410CD1:                             ; CODE XREF: std::string::string(std::string const&,uint,uint)+29↑j
.text:00410CD1                 mov     [esp+2Ch+var_2C], offset aBasicStringBas ; "basic_string::basic_string"
.text:00410CD8                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:00410CD8 __ZNSsC1ERKSsjj endp
.text:00410CD8
.text:00410CD8 ; ---------------------------------------------------------------------------
.text:00410CDD                 align 10h
.text:00410CE0
.text:00410CE0 ; =============== S U B R O U T I N E =======================================
.text:00410CE0
.text:00410CE0
.text:00410CE0 ; std::string::string(std::string const&, unsigned int, unsigned int, std::allocator<char> const&)
.text:00410CE0                 public __ZNSsC1ERKSsjjRKSaIcE
.text:00410CE0 __ZNSsC1ERKSsjjRKSaIcE proc near
.text:00410CE0
.text:00410CE0 var_1C          = dword ptr -1Ch
.text:00410CE0 var_18          = dword ptr -18h
.text:00410CE0 var_14          = dword ptr -14h
.text:00410CE0 var_10          = byte ptr -10h
.text:00410CE0 arg_0           = dword ptr  4
.text:00410CE0 arg_4           = dword ptr  8
.text:00410CE0 arg_8           = dword ptr  0Ch
.text:00410CE0 arg_C           = dword ptr  10h
.text:00410CE0
.text:00410CE0                 push    edi
.text:00410CE1                 push    esi
.text:00410CE2                 push    ebx
.text:00410CE3                 sub     esp, 10h
.text:00410CE6                 mov     edi, ecx
.text:00410CE8                 mov     eax, [esp+1Ch+arg_4]
.text:00410CEC                 mov     edx, [esp+1Ch+arg_0]
.text:00410CF0                 mov     edx, [edx]
.text:00410CF2                 mov     esi, [edx-0Ch]
.text:00410CF5                 mov     ebx, esi
.text:00410CF7                 sub     ebx, eax
.text:00410CF9                 cmp     ebx, [esp+1Ch+arg_8]
.text:00410CFD                 jbe     short loc_410D03
.text:00410CFF                 mov     ebx, [esp+1Ch+arg_8]
.text:00410D03
.text:00410D03 loc_410D03:                             ; CODE XREF: std::string::string(std::string const&,uint,uint,std::allocator<char> const&)+1D↑j
.text:00410D03                 add     ebx, eax
.text:00410D05                 add     ebx, edx
.text:00410D07                 cmp     eax, esi
.text:00410D09                 ja      short loc_410D31
.text:00410D0B                 mov     [esp+1Ch+var_10], 0
.text:00410D10                 mov     ecx, [esp+1Ch+arg_C]
.text:00410D14                 mov     [esp+1Ch+var_14], ecx
.text:00410D18                 mov     [esp+1Ch+var_18], ebx
.text:00410D1C                 add     eax, edx
.text:00410D1E                 mov     [esp+1Ch+var_1C], eax
.text:00410D21                 call    __ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag ; std::string::_S_construct<char *>(char *,char *,std::allocator<char> const&,std::forward_iterator_tag)
.text:00410D26                 mov     [edi], eax
.text:00410D28                 add     esp, 10h
.text:00410D2B                 pop     ebx
.text:00410D2C                 pop     esi
.text:00410D2D                 pop     edi
.text:00410D2E                 retn    10h
.text:00410D31 ; ---------------------------------------------------------------------------
.text:00410D31
.text:00410D31 loc_410D31:                             ; CODE XREF: std::string::string(std::string const&,uint,uint,std::allocator<char> const&)+29↑j
.text:00410D31                 mov     [esp+1Ch+var_1C], offset aBasicStringBas ; "basic_string::basic_string"
.text:00410D38                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:00410D38 __ZNSsC1ERKSsjjRKSaIcE endp
.text:00410D38
.text:00410D38 ; ---------------------------------------------------------------------------
.text:00410D3D                 align 10h
.text:00410D40
.text:00410D40 ; =============== S U B R O U T I N E =======================================
.text:00410D40
.text:00410D40
.text:00410D40 ; std::string::string(std::initializer_list<char>, std::allocator<char> const&)
.text:00410D40                 public __ZNSsC1ESt16initializer_listIcERKSaIcE
.text:00410D40 __ZNSsC1ESt16initializer_listIcERKSaIcE proc near
.text:00410D40
.text:00410D40 var_1C          = dword ptr -1Ch
.text:00410D40 var_18          = dword ptr -18h
.text:00410D40 var_14          = dword ptr -14h
.text:00410D40 var_10          = byte ptr -10h
.text:00410D40 arg_0           = dword ptr  4
.text:00410D40 arg_4           = dword ptr  8
.text:00410D40 arg_8           = dword ptr  0Ch
.text:00410D40
.text:00410D40                 push    ebx
.text:00410D41                 sub     esp, 18h
.text:00410D44                 mov     ebx, ecx
.text:00410D46                 mov     eax, [esp+1Ch+arg_0]
.text:00410D4A                 mov     [esp+1Ch+var_10], 0
.text:00410D4F                 mov     edx, [esp+1Ch+arg_8]
.text:00410D53                 mov     [esp+1Ch+var_14], edx
.text:00410D57                 mov     edx, [esp+1Ch+arg_4]
.text:00410D5B                 add     edx, eax
.text:00410D5D                 mov     [esp+1Ch+var_18], edx
.text:00410D61                 mov     [esp+1Ch+var_1C], eax
.text:00410D64                 call    __ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag ; std::string::_S_construct<char const*>(char const*,char const*,std::allocator<char> const&,std::forward_iterator_tag)
.text:00410D69                 mov     [ebx], eax
.text:00410D6B                 add     esp, 18h
.text:00410D6E                 pop     ebx
.text:00410D6F                 retn    0Ch
.text:00410D6F __ZNSsC1ESt16initializer_listIcERKSaIcE endp
.text:00410D6F
.text:00410D6F ; ---------------------------------------------------------------------------
.text:00410D72                 align 4
.text:00410D74
.text:00410D74 ; =============== S U B R O U T I N E =======================================
.text:00410D74
.text:00410D74
.text:00410D74 ; std::string::string(unsigned int, char, std::allocator<char> const&)
.text:00410D74                 public __ZNSsC1EjcRKSaIcE
.text:00410D74 __ZNSsC1EjcRKSaIcE proc near
.text:00410D74
.text:00410D74 var_1C          = dword ptr -1Ch
.text:00410D74 var_18          = dword ptr -18h
.text:00410D74 var_14          = dword ptr -14h
.text:00410D74 arg_0           = dword ptr  4
.text:00410D74 arg_4           = byte ptr  8
.text:00410D74 arg_8           = dword ptr  0Ch
.text:00410D74
.text:00410D74                 push    ebx
.text:00410D75                 sub     esp, 18h
.text:00410D78                 mov     ebx, ecx
.text:00410D7A                 movsx   eax, [esp+1Ch+arg_4]
.text:00410D7F                 mov     edx, [esp+1Ch+arg_8]
.text:00410D83                 mov     [esp+1Ch+var_14], edx
.text:00410D87                 mov     [esp+1Ch+var_18], eax
.text:00410D8B                 mov     eax, [esp+1Ch+arg_0]
.text:00410D8F                 mov     [esp+1Ch+var_1C], eax
.text:00410D92                 call    __ZNSs12_S_constructEjcRKSaIcE ; std::string::_S_construct(uint,char,std::allocator<char> const&)
.text:00410D97                 mov     [ebx], eax
.text:00410D99                 add     esp, 18h
.text:00410D9C                 pop     ebx
.text:00410D9D                 retn    0Ch
.text:00410D9D __ZNSsC1EjcRKSaIcE endp
.text:00410D9D
.text:00410DA0
.text:00410DA0 ; =============== S U B R O U T I N E =======================================
.text:00410DA0
.text:00410DA0
.text:00410DA0 ; _DWORD std::string::string(std::string *__hidden this)
.text:00410DA0                 public __ZNSsC1Ev
.text:00410DA0 __ZNSsC1Ev      proc near
.text:00410DA0
.text:00410DA0 var_2C          = dword ptr -2Ch
.text:00410DA0 var_28          = dword ptr -28h
.text:00410DA0 var_24          = dword ptr -24h
.text:00410DA0 var_D           = byte ptr -0Dh
.text:00410DA0 this            = dword ptr  4
.text:00410DA0
.text:00410DA0                 push    ebx
.text:00410DA1                 sub     esp, 28h
.text:00410DA4                 mov     ebx, ecx
.text:00410DA6                 lea     eax, [esp+2Ch+var_D]
.text:00410DAA                 mov     [esp+2Ch+var_24], eax
.text:00410DAE                 mov     [esp+2Ch+var_28], 0
.text:00410DB6                 mov     [esp+2Ch+var_2C], 0
.text:00410DBD                 call    __ZNSs12_S_constructEjcRKSaIcE ; std::string::_S_construct(uint,char,std::allocator<char> const&)
.text:00410DC2                 mov     [ebx], eax
.text:00410DC4                 add     esp, 28h
.text:00410DC7                 pop     ebx
.text:00410DC8                 retn
.text:00410DC8 __ZNSsC1Ev      endp
.text:00410DC8
.text:00410DC8 ; ---------------------------------------------------------------------------
.text:00410DC9                 align 4
.text:00410DCC
.text:00410DCC ; =============== S U B R O U T I N E =======================================
.text:00410DCC
.text:00410DCC
.text:00410DCC ; std::string::string<__gnu_cxx::__normal_iterator<char *, std::string>>(__gnu_cxx::__normal_iterator<char *, std::string>, __gnu_cxx::__normal_iterator<char *, std::string>, std::allocator<char> const&)
.text:00410DCC                 public __ZNSsC1IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE
.text:00410DCC __ZNSsC1IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE proc near
.text:00410DCC
.text:00410DCC var_1C          = dword ptr -1Ch
.text:00410DCC var_18          = dword ptr -18h
.text:00410DCC var_14          = dword ptr -14h
.text:00410DCC var_10          = byte ptr -10h
.text:00410DCC arg_0           = dword ptr  4
.text:00410DCC arg_4           = dword ptr  8
.text:00410DCC arg_8           = dword ptr  0Ch
.text:00410DCC
.text:00410DCC                 push    ebx
.text:00410DCD                 sub     esp, 18h
.text:00410DD0                 mov     ebx, ecx
.text:00410DD2                 mov     [esp+1Ch+var_10], 0
.text:00410DD7                 mov     eax, [esp+1Ch+arg_8]
.text:00410DDB                 mov     [esp+1Ch+var_14], eax
.text:00410DDF                 mov     eax, [esp+1Ch+arg_4]
.text:00410DE3                 mov     [esp+1Ch+var_18], eax
.text:00410DE7                 mov     eax, [esp+1Ch+arg_0]
.text:00410DEB                 mov     [esp+1Ch+var_1C], eax
.text:00410DEE                 call    __ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag ; std::string::_S_construct<__gnu_cxx::__normal_iterator<char *,std::string>>(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>,std::allocator<char> const&,std::forward_iterator_tag)
.text:00410DF3                 mov     [ebx], eax
.text:00410DF5                 add     esp, 18h
.text:00410DF8                 pop     ebx
.text:00410DF9                 retn    0Ch
.text:00410DF9 __ZNSsC1IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE endp
.text:00410DF9
.text:00410DFC
.text:00410DFC ; =============== S U B R O U T I N E =======================================
.text:00410DFC
.text:00410DFC
.text:00410DFC ; std::string::string<char const*>(char const*, char const*, std::allocator<char> const&)
.text:00410DFC                 public __ZNSsC1IPKcEET_S2_RKSaIcE
.text:00410DFC __ZNSsC1IPKcEET_S2_RKSaIcE proc near
.text:00410DFC
.text:00410DFC var_1C          = dword ptr -1Ch
.text:00410DFC var_18          = dword ptr -18h
.text:00410DFC var_14          = dword ptr -14h
.text:00410DFC var_10          = byte ptr -10h
.text:00410DFC arg_0           = dword ptr  4
.text:00410DFC arg_4           = dword ptr  8
.text:00410DFC arg_8           = dword ptr  0Ch
.text:00410DFC
.text:00410DFC                 push    ebx
.text:00410DFD                 sub     esp, 18h
.text:00410E00                 mov     ebx, ecx
.text:00410E02                 mov     [esp+1Ch+var_10], 0
.text:00410E07                 mov     eax, [esp+1Ch+arg_8]
.text:00410E0B                 mov     [esp+1Ch+var_14], eax
.text:00410E0F                 mov     eax, [esp+1Ch+arg_4]
.text:00410E13                 mov     [esp+1Ch+var_18], eax
.text:00410E17                 mov     eax, [esp+1Ch+arg_0]
.text:00410E1B                 mov     [esp+1Ch+var_1C], eax
.text:00410E1E                 call    __ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag ; std::string::_S_construct<char const*>(char const*,char const*,std::allocator<char> const&,std::forward_iterator_tag)
.text:00410E23                 mov     [ebx], eax
.text:00410E25                 add     esp, 18h
.text:00410E28                 pop     ebx
.text:00410E29                 retn    0Ch
.text:00410E29 __ZNSsC1IPKcEET_S2_RKSaIcE endp
.text:00410E29
.text:00410E2C
.text:00410E2C ; =============== S U B R O U T I N E =======================================
.text:00410E2C
.text:00410E2C
.text:00410E2C ; std::string::string<char *>(char *, char *, std::allocator<char> const&)
.text:00410E2C                 public __ZNSsC1IPcEET_S1_RKSaIcE
.text:00410E2C __ZNSsC1IPcEET_S1_RKSaIcE proc near
.text:00410E2C
.text:00410E2C var_1C          = dword ptr -1Ch
.text:00410E2C var_18          = dword ptr -18h
.text:00410E2C var_14          = dword ptr -14h
.text:00410E2C var_10          = byte ptr -10h
.text:00410E2C arg_0           = dword ptr  4
.text:00410E2C arg_4           = dword ptr  8
.text:00410E2C arg_8           = dword ptr  0Ch
.text:00410E2C
.text:00410E2C                 push    ebx
.text:00410E2D                 sub     esp, 18h
.text:00410E30                 mov     ebx, ecx
.text:00410E32                 mov     [esp+1Ch+var_10], 0
.text:00410E37                 mov     eax, [esp+1Ch+arg_8]
.text:00410E3B                 mov     [esp+1Ch+var_14], eax
.text:00410E3F                 mov     eax, [esp+1Ch+arg_4]
.text:00410E43                 mov     [esp+1Ch+var_18], eax
.text:00410E47                 mov     eax, [esp+1Ch+arg_0]
.text:00410E4B                 mov     [esp+1Ch+var_1C], eax
.text:00410E4E                 call    __ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag ; std::string::_S_construct<char *>(char *,char *,std::allocator<char> const&,std::forward_iterator_tag)
.text:00410E53                 mov     [ebx], eax
.text:00410E55                 add     esp, 18h
.text:00410E58                 pop     ebx
.text:00410E59                 retn    0Ch
.text:00410E59 __ZNSsC1IPcEET_S1_RKSaIcE endp
.text:00410E59
.text:00410E5C
.text:00410E5C ; =============== S U B R O U T I N E =======================================
.text:00410E5C
.text:00410E5C
.text:00410E5C ; std::string::string(std::string &&)
.text:00410E5C                 public __ZNSsC2EOSs
.text:00410E5C __ZNSsC2EOSs    proc near
.text:00410E5C
.text:00410E5C lpfctx          = dword ptr -6Ch
.text:00410E5C var_68          = dword ptr -68h
.text:00410E5C var_64          = dword ptr -64h
.text:00410E5C fctx            = SjLj_Function_Context ptr -50h
.text:00410E5C var_D           = byte ptr -0Dh
.text:00410E5C arg_0           = dword ptr  4
.text:00410E5C
.text:00410E5C                 push    edi
.text:00410E5D                 push    esi
.text:00410E5E                 push    ebx
.text:00410E5F                 sub     esp, 60h
.text:00410E62                 mov     edi, ecx
.text:00410E64                 mov     ebx, [esp+6Ch+arg_0]
.text:00410E68                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00410E70                 mov     [esp+6Ch+fctx.lsda], offset dword_4123A4
.text:00410E78                 lea     esi, [esp+6Ch+fctx]
.text:00410E7C                 mov     [esp+6Ch+lpfctx], esi ; lpfctx
.text:00410E7F                 call    __Unwind_SjLj_Register
.text:00410E84                 mov     eax, [ebx]
.text:00410E86                 mov     [edi], eax
.text:00410E88                 lea     eax, [esp+6Ch+var_D]
.text:00410E8C                 mov     [esp+6Ch+var_64], eax
.text:00410E90                 mov     [esp+6Ch+var_68], 0
.text:00410E98                 mov     [esp+6Ch+lpfctx], 0
.text:00410E9F                 mov     [esp+6Ch+fctx.call_site], 0
.text:00410EA7                 call    __ZNSs12_S_constructEjcRKSaIcE ; std::string::_S_construct(uint,char,std::allocator<char> const&)
.text:00410EAC                 mov     [ebx], eax
.text:00410EAE                 mov     [esp+6Ch+lpfctx], esi ; lpfctx
.text:00410EB1                 call    __Unwind_SjLj_Unregister
.text:00410EB6                 add     esp, 60h
.text:00410EB9                 pop     ebx
.text:00410EBA                 pop     esi
.text:00410EBB                 pop     edi
.text:00410EBC                 retn    4
.text:00410EBC __ZNSsC2EOSs    endp
.text:00410EBC
.text:00410EBC ; ---------------------------------------------------------------------------
.text:00410EBF                 align 10h
.text:00410EC0
.text:00410EC0 ; =============== S U B R O U T I N E =======================================
.text:00410EC0
.text:00410EC0
.text:00410EC0 ; std::string::string(char const*, std::allocator<char> const&)
.text:00410EC0                 public __ZNSsC2EPKcRKSaIcE
.text:00410EC0 __ZNSsC2EPKcRKSaIcE proc near
.text:00410EC0
.text:00410EC0 var_1C          = dword ptr -1Ch
.text:00410EC0 var_18          = dword ptr -18h
.text:00410EC0 var_14          = dword ptr -14h
.text:00410EC0 var_10          = byte ptr -10h
.text:00410EC0 arg_0           = dword ptr  4
.text:00410EC0 arg_4           = dword ptr  8
.text:00410EC0
.text:00410EC0                 push    edi
.text:00410EC1                 push    ebx
.text:00410EC2                 sub     esp, 14h
.text:00410EC5                 mov     ebx, ecx
.text:00410EC7                 mov     edx, [esp+1Ch+arg_0]
.text:00410ECB                 test    edx, edx
.text:00410ECD                 jz      short loc_410F04
.text:00410ECF                 xor     eax, eax
.text:00410ED1                 mov     ecx, 0FFFFFFFFh
.text:00410ED6                 mov     edi, edx
.text:00410ED8                 repne scasb
.text:00410EDA                 not     ecx
.text:00410EDC                 lea     ecx, [edx+ecx-1]
.text:00410EE0
.text:00410EE0 loc_410EE0:                             ; CODE XREF: std::string::string(char const*,std::allocator<char> const&)+49↓j
.text:00410EE0                 mov     [esp+1Ch+var_10], 0
.text:00410EE5                 mov     eax, [esp+1Ch+arg_4]
.text:00410EE9                 mov     [esp+1Ch+var_14], eax
.text:00410EED                 mov     [esp+1Ch+var_18], ecx
.text:00410EF1                 mov     [esp+1Ch+var_1C], edx
.text:00410EF4                 call    __ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag ; std::string::_S_construct<char const*>(char const*,char const*,std::allocator<char> const&,std::forward_iterator_tag)
.text:00410EF9                 mov     [ebx], eax
.text:00410EFB                 add     esp, 14h
.text:00410EFE                 pop     ebx
.text:00410EFF                 pop     edi
.text:00410F00                 retn    8
.text:00410F00 ; ---------------------------------------------------------------------------
.text:00410F03                 align 4
.text:00410F04
.text:00410F04 loc_410F04:                             ; CODE XREF: std::string::string(char const*,std::allocator<char> const&)+D↑j
.text:00410F04                 mov     ecx, 0FFFFFFFFh
.text:00410F09                 jmp     short loc_410EE0
.text:00410F09 __ZNSsC2EPKcRKSaIcE endp
.text:00410F09
.text:00410F09 ; ---------------------------------------------------------------------------
.text:00410F0B                 align 4
.text:00410F0C
.text:00410F0C ; =============== S U B R O U T I N E =======================================
.text:00410F0C
.text:00410F0C
.text:00410F0C ; std::string::string(char const*, unsigned int, std::allocator<char> const&)
.text:00410F0C                 public __ZNSsC2EPKcjRKSaIcE
.text:00410F0C __ZNSsC2EPKcjRKSaIcE proc near
.text:00410F0C
.text:00410F0C var_1C          = dword ptr -1Ch
.text:00410F0C var_18          = dword ptr -18h
.text:00410F0C var_14          = dword ptr -14h
.text:00410F0C var_10          = byte ptr -10h
.text:00410F0C arg_0           = dword ptr  4
.text:00410F0C arg_4           = dword ptr  8
.text:00410F0C arg_8           = dword ptr  0Ch
.text:00410F0C
.text:00410F0C                 push    ebx
.text:00410F0D                 sub     esp, 18h
.text:00410F10                 mov     ebx, ecx
.text:00410F12                 mov     eax, [esp+1Ch+arg_0]
.text:00410F16                 mov     [esp+1Ch+var_10], 0
.text:00410F1B                 mov     edx, [esp+1Ch+arg_8]
.text:00410F1F                 mov     [esp+1Ch+var_14], edx
.text:00410F23                 mov     edx, [esp+1Ch+arg_4]
.text:00410F27                 add     edx, eax
.text:00410F29                 mov     [esp+1Ch+var_18], edx
.text:00410F2D                 mov     [esp+1Ch+var_1C], eax
.text:00410F30                 call    __ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag ; std::string::_S_construct<char const*>(char const*,char const*,std::allocator<char> const&,std::forward_iterator_tag)
.text:00410F35                 mov     [ebx], eax
.text:00410F37                 add     esp, 18h
.text:00410F3A                 pop     ebx
.text:00410F3B                 retn    0Ch
.text:00410F3B __ZNSsC2EPKcjRKSaIcE endp
.text:00410F3B
.text:00410F3B ; ---------------------------------------------------------------------------
.text:00410F3E                 align 10h
.text:00410F40
.text:00410F40 ; =============== S U B R O U T I N E =======================================
.text:00410F40
.text:00410F40
.text:00410F40 ; std::string::string(std::allocator<char> const&)
.text:00410F40                 public __ZNSsC2ERKSaIcE
.text:00410F40 __ZNSsC2ERKSaIcE proc near
.text:00410F40
.text:00410F40 var_1C          = dword ptr -1Ch
.text:00410F40 var_18          = dword ptr -18h
.text:00410F40 var_14          = dword ptr -14h
.text:00410F40 arg_0           = dword ptr  4
.text:00410F40
.text:00410F40                 push    ebx
.text:00410F41                 sub     esp, 18h
.text:00410F44                 mov     ebx, ecx
.text:00410F46                 mov     eax, [esp+1Ch+arg_0]
.text:00410F4A                 mov     [esp+1Ch+var_14], eax
.text:00410F4E                 mov     [esp+1Ch+var_18], 0
.text:00410F56                 mov     [esp+1Ch+var_1C], 0
.text:00410F5D                 call    __ZNSs12_S_constructEjcRKSaIcE ; std::string::_S_construct(uint,char,std::allocator<char> const&)
.text:00410F62                 mov     [ebx], eax
.text:00410F64                 add     esp, 18h
.text:00410F67                 pop     ebx
.text:00410F68                 retn    4
.text:00410F68 __ZNSsC2ERKSaIcE endp
.text:00410F68
.text:00410F68 ; ---------------------------------------------------------------------------
.text:00410F6B                 align 4
.text:00410F6C
.text:00410F6C ; =============== S U B R O U T I N E =======================================
.text:00410F6C
.text:00410F6C
.text:00410F6C ; _DWORD __stdcall std::string::string(std::string *__hidden this, const std::string *)
.text:00410F6C                 public __ZNSsC2ERKSs
.text:00410F6C __ZNSsC2ERKSs   proc near
.text:00410F6C
.text:00410F6C var_3C          = dword ptr -3Ch
.text:00410F6C var_38          = dword ptr -38h
.text:00410F6C var_20          = dword ptr -20h
.text:00410F6C var_D           = byte ptr -0Dh
.text:00410F6C this            = dword ptr  4
.text:00410F6C
.text:00410F6C                 push    ebx
.text:00410F6D                 sub     esp, 38h
.text:00410F70                 mov     ebx, ecx
.text:00410F72                 mov     eax, [esp+3Ch+this]
.text:00410F76                 mov     eax, [eax]
.text:00410F78                 mov     edx, [eax-4]
.text:00410F7B                 test    edx, edx
.text:00410F7D                 js      short loc_410F98
.text:00410F7F                 mov     ecx, ds:__CRT_MT
.text:00410F85                 test    ecx, ecx
.text:00410F87                 jnz     short loc_410FBC
.text:00410F89                 inc     edx
.text:00410F8A                 mov     [eax-4], edx
.text:00410F8D                 mov     [ebx], eax
.text:00410F8F                 add     esp, 38h
.text:00410F92                 pop     ebx
.text:00410F93                 retn    4
.text:00410F93 ; ---------------------------------------------------------------------------
.text:00410F96                 align 4
.text:00410F98
.text:00410F98 loc_410F98:                             ; CODE XREF: std::string::string(std::string const&)+11↑j
.text:00410F98                 lea     ecx, [eax-0Ch]
.text:00410F9B                 mov     [esp+3Ch+var_38], 0
.text:00410FA3                 lea     eax, [esp+3Ch+var_D]
.text:00410FA7                 mov     [esp+3Ch+var_3C], eax
.text:00410FAA                 call    __ZNSs4_Rep8_M_cloneERKSaIcEj ; std::string::_Rep::_M_clone(std::allocator<char> const&,uint)
.text:00410FAF                 sub     esp, 8
.text:00410FB2                 mov     [ebx], eax
.text:00410FB4                 add     esp, 38h
.text:00410FB7                 pop     ebx
.text:00410FB8                 retn    4
.text:00410FB8 ; ---------------------------------------------------------------------------
.text:00410FBB                 align 4
.text:00410FBC
.text:00410FBC loc_410FBC:                             ; CODE XREF: std::string::string(std::string const&)+1B↑j
.text:00410FBC                 mov     [esp+3Ch+var_38], 1 ; int
.text:00410FC4                 lea     edx, [eax-4]
.text:00410FC7                 mov     [esp+3Ch+var_3C], edx ; volatile int *
.text:00410FCA                 mov     [esp+3Ch+var_20], eax
.text:00410FCE                 call    __ZN9__gnu_cxx12__atomic_addEPVii ; __gnu_cxx::__atomic_add(int volatile*,int)
.text:00410FD3                 mov     eax, [esp+3Ch+var_20]
.text:00410FD7                 mov     [ebx], eax
.text:00410FD9                 add     esp, 38h
.text:00410FDC                 pop     ebx
.text:00410FDD                 retn    4
.text:00410FDD __ZNSsC2ERKSs   endp
.text:00410FDD
.text:00410FE0
.text:00410FE0 ; =============== S U B R O U T I N E =======================================
.text:00410FE0
.text:00410FE0
.text:00410FE0 ; _DWORD __stdcall std::string::string(std::string *__hidden this, const std::string *, unsigned int, unsigned int)
.text:00410FE0                 public __ZNSsC2ERKSsjj
.text:00410FE0 __ZNSsC2ERKSsjj proc near
.text:00410FE0
.text:00410FE0 var_2C          = dword ptr -2Ch
.text:00410FE0 var_28          = dword ptr -28h
.text:00410FE0 var_24          = dword ptr -24h
.text:00410FE0 var_20          = byte ptr -20h
.text:00410FE0 var_D           = byte ptr -0Dh
.text:00410FE0 this            = dword ptr  4
.text:00410FE0 arg_4           = dword ptr  8
.text:00410FE0 arg_8           = dword ptr  0Ch
.text:00410FE0
.text:00410FE0                 push    edi
.text:00410FE1                 push    esi
.text:00410FE2                 push    ebx
.text:00410FE3                 sub     esp, 20h
.text:00410FE6                 mov     edi, ecx
.text:00410FE8                 mov     eax, [esp+2Ch+arg_4]
.text:00410FEC                 mov     edx, [esp+2Ch+this]
.text:00410FF0                 mov     edx, [edx]
.text:00410FF2                 mov     esi, [edx-0Ch]
.text:00410FF5                 mov     ebx, esi
.text:00410FF7                 sub     ebx, eax
.text:00410FF9                 cmp     ebx, [esp+2Ch+arg_8]
.text:00410FFD                 jbe     short loc_411003
.text:00410FFF                 mov     ebx, [esp+2Ch+arg_8]
.text:00411003
.text:00411003 loc_411003:                             ; CODE XREF: std::string::string(std::string const&,uint,uint)+1D↑j
.text:00411003                 add     ebx, eax
.text:00411005                 add     ebx, edx
.text:00411007                 cmp     eax, esi
.text:00411009                 ja      short loc_411031
.text:0041100B                 mov     [esp+2Ch+var_20], 0
.text:00411010                 lea     ecx, [esp+2Ch+var_D]
.text:00411014                 mov     [esp+2Ch+var_24], ecx
.text:00411018                 mov     [esp+2Ch+var_28], ebx
.text:0041101C                 add     eax, edx
.text:0041101E                 mov     [esp+2Ch+var_2C], eax
.text:00411021                 call    __ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag ; std::string::_S_construct<char *>(char *,char *,std::allocator<char> const&,std::forward_iterator_tag)
.text:00411026                 mov     [edi], eax
.text:00411028                 add     esp, 20h
.text:0041102B                 pop     ebx
.text:0041102C                 pop     esi
.text:0041102D                 pop     edi
.text:0041102E                 retn    0Ch
.text:00411031 ; ---------------------------------------------------------------------------
.text:00411031
.text:00411031 loc_411031:                             ; CODE XREF: std::string::string(std::string const&,uint,uint)+29↑j
.text:00411031                 mov     [esp+2Ch+var_2C], offset aBasicStringBas ; "basic_string::basic_string"
.text:00411038                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:00411038 __ZNSsC2ERKSsjj endp
.text:00411038
.text:00411038 ; ---------------------------------------------------------------------------
.text:0041103D                 align 10h
.text:00411040
.text:00411040 ; =============== S U B R O U T I N E =======================================
.text:00411040
.text:00411040
.text:00411040 ; std::string::string(std::string const&, unsigned int, unsigned int, std::allocator<char> const&)
.text:00411040                 public __ZNSsC2ERKSsjjRKSaIcE
.text:00411040 __ZNSsC2ERKSsjjRKSaIcE proc near
.text:00411040
.text:00411040 var_1C          = dword ptr -1Ch
.text:00411040 var_18          = dword ptr -18h
.text:00411040 var_14          = dword ptr -14h
.text:00411040 var_10          = byte ptr -10h
.text:00411040 arg_0           = dword ptr  4
.text:00411040 arg_4           = dword ptr  8
.text:00411040 arg_8           = dword ptr  0Ch
.text:00411040 arg_C           = dword ptr  10h
.text:00411040
.text:00411040                 push    edi
.text:00411041                 push    esi
.text:00411042                 push    ebx
.text:00411043                 sub     esp, 10h
.text:00411046                 mov     edi, ecx
.text:00411048                 mov     eax, [esp+1Ch+arg_4]
.text:0041104C                 mov     edx, [esp+1Ch+arg_0]
.text:00411050                 mov     edx, [edx]
.text:00411052                 mov     esi, [edx-0Ch]
.text:00411055                 mov     ebx, esi
.text:00411057                 sub     ebx, eax
.text:00411059                 cmp     ebx, [esp+1Ch+arg_8]
.text:0041105D                 jbe     short loc_411063
.text:0041105F                 mov     ebx, [esp+1Ch+arg_8]
.text:00411063
.text:00411063 loc_411063:                             ; CODE XREF: std::string::string(std::string const&,uint,uint,std::allocator<char> const&)+1D↑j
.text:00411063                 add     ebx, eax
.text:00411065                 add     ebx, edx
.text:00411067                 cmp     eax, esi
.text:00411069                 ja      short loc_411091
.text:0041106B                 mov     [esp+1Ch+var_10], 0
.text:00411070                 mov     ecx, [esp+1Ch+arg_C]
.text:00411074                 mov     [esp+1Ch+var_14], ecx
.text:00411078                 mov     [esp+1Ch+var_18], ebx
.text:0041107C                 add     eax, edx
.text:0041107E                 mov     [esp+1Ch+var_1C], eax
.text:00411081                 call    __ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag ; std::string::_S_construct<char *>(char *,char *,std::allocator<char> const&,std::forward_iterator_tag)
.text:00411086                 mov     [edi], eax
.text:00411088                 add     esp, 10h
.text:0041108B                 pop     ebx
.text:0041108C                 pop     esi
.text:0041108D                 pop     edi
.text:0041108E                 retn    10h
.text:00411091 ; ---------------------------------------------------------------------------
.text:00411091
.text:00411091 loc_411091:                             ; CODE XREF: std::string::string(std::string const&,uint,uint,std::allocator<char> const&)+29↑j
.text:00411091                 mov     [esp+1Ch+var_1C], offset aBasicStringBas ; "basic_string::basic_string"
.text:00411098                 call    __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*)
.text:00411098 __ZNSsC2ERKSsjjRKSaIcE endp
.text:00411098
.text:00411098 ; ---------------------------------------------------------------------------
.text:0041109D                 align 10h
.text:004110A0
.text:004110A0 ; =============== S U B R O U T I N E =======================================
.text:004110A0
.text:004110A0
.text:004110A0 ; std::string::string(std::initializer_list<char>, std::allocator<char> const&)
.text:004110A0                 public __ZNSsC2ESt16initializer_listIcERKSaIcE
.text:004110A0 __ZNSsC2ESt16initializer_listIcERKSaIcE proc near
.text:004110A0
.text:004110A0 var_1C          = dword ptr -1Ch
.text:004110A0 var_18          = dword ptr -18h
.text:004110A0 var_14          = dword ptr -14h
.text:004110A0 var_10          = byte ptr -10h
.text:004110A0 arg_0           = dword ptr  4
.text:004110A0 arg_4           = dword ptr  8
.text:004110A0 arg_8           = dword ptr  0Ch
.text:004110A0
.text:004110A0                 push    ebx
.text:004110A1                 sub     esp, 18h
.text:004110A4                 mov     ebx, ecx
.text:004110A6                 mov     eax, [esp+1Ch+arg_0]
.text:004110AA                 mov     [esp+1Ch+var_10], 0
.text:004110AF                 mov     edx, [esp+1Ch+arg_8]
.text:004110B3                 mov     [esp+1Ch+var_14], edx
.text:004110B7                 mov     edx, [esp+1Ch+arg_4]
.text:004110BB                 add     edx, eax
.text:004110BD                 mov     [esp+1Ch+var_18], edx
.text:004110C1                 mov     [esp+1Ch+var_1C], eax
.text:004110C4                 call    __ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag ; std::string::_S_construct<char const*>(char const*,char const*,std::allocator<char> const&,std::forward_iterator_tag)
.text:004110C9                 mov     [ebx], eax
.text:004110CB                 add     esp, 18h
.text:004110CE                 pop     ebx
.text:004110CF                 retn    0Ch
.text:004110CF __ZNSsC2ESt16initializer_listIcERKSaIcE endp
.text:004110CF
.text:004110CF ; ---------------------------------------------------------------------------
.text:004110D2                 align 4
.text:004110D4
.text:004110D4 ; =============== S U B R O U T I N E =======================================
.text:004110D4
.text:004110D4
.text:004110D4 ; std::string::string(unsigned int, char, std::allocator<char> const&)
.text:004110D4                 public __ZNSsC2EjcRKSaIcE
.text:004110D4 __ZNSsC2EjcRKSaIcE proc near
.text:004110D4
.text:004110D4 var_1C          = dword ptr -1Ch
.text:004110D4 var_18          = dword ptr -18h
.text:004110D4 var_14          = dword ptr -14h
.text:004110D4 arg_0           = dword ptr  4
.text:004110D4 arg_4           = byte ptr  8
.text:004110D4 arg_8           = dword ptr  0Ch
.text:004110D4
.text:004110D4                 push    ebx
.text:004110D5                 sub     esp, 18h
.text:004110D8                 mov     ebx, ecx
.text:004110DA                 movsx   eax, [esp+1Ch+arg_4]
.text:004110DF                 mov     edx, [esp+1Ch+arg_8]
.text:004110E3                 mov     [esp+1Ch+var_14], edx
.text:004110E7                 mov     [esp+1Ch+var_18], eax
.text:004110EB                 mov     eax, [esp+1Ch+arg_0]
.text:004110EF                 mov     [esp+1Ch+var_1C], eax
.text:004110F2                 call    __ZNSs12_S_constructEjcRKSaIcE ; std::string::_S_construct(uint,char,std::allocator<char> const&)
.text:004110F7                 mov     [ebx], eax
.text:004110F9                 add     esp, 18h
.text:004110FC                 pop     ebx
.text:004110FD                 retn    0Ch
.text:004110FD __ZNSsC2EjcRKSaIcE endp
.text:004110FD
.text:00411100
.text:00411100 ; =============== S U B R O U T I N E =======================================
.text:00411100
.text:00411100
.text:00411100 ; _DWORD std::string::string(std::string *__hidden this)
.text:00411100                 public __ZNSsC2Ev
.text:00411100 __ZNSsC2Ev      proc near
.text:00411100
.text:00411100 var_2C          = dword ptr -2Ch
.text:00411100 var_28          = dword ptr -28h
.text:00411100 var_24          = dword ptr -24h
.text:00411100 var_D           = byte ptr -0Dh
.text:00411100 this            = dword ptr  4
.text:00411100
.text:00411100                 push    ebx
.text:00411101                 sub     esp, 28h
.text:00411104                 mov     ebx, ecx
.text:00411106                 lea     eax, [esp+2Ch+var_D]
.text:0041110A                 mov     [esp+2Ch+var_24], eax
.text:0041110E                 mov     [esp+2Ch+var_28], 0
.text:00411116                 mov     [esp+2Ch+var_2C], 0
.text:0041111D                 call    __ZNSs12_S_constructEjcRKSaIcE ; std::string::_S_construct(uint,char,std::allocator<char> const&)
.text:00411122                 mov     [ebx], eax
.text:00411124                 add     esp, 28h
.text:00411127                 pop     ebx
.text:00411128                 retn
.text:00411128 __ZNSsC2Ev      endp
.text:00411128
.text:00411128 ; ---------------------------------------------------------------------------
.text:00411129                 align 4
.text:0041112C
.text:0041112C ; =============== S U B R O U T I N E =======================================
.text:0041112C
.text:0041112C
.text:0041112C ; std::string::string<__gnu_cxx::__normal_iterator<char *, std::string>>(__gnu_cxx::__normal_iterator<char *, std::string>, __gnu_cxx::__normal_iterator<char *, std::string>, std::allocator<char> const&)
.text:0041112C                 public __ZNSsC2IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE
.text:0041112C __ZNSsC2IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE proc near
.text:0041112C
.text:0041112C var_1C          = dword ptr -1Ch
.text:0041112C var_18          = dword ptr -18h
.text:0041112C var_14          = dword ptr -14h
.text:0041112C var_10          = byte ptr -10h
.text:0041112C arg_0           = dword ptr  4
.text:0041112C arg_4           = dword ptr  8
.text:0041112C arg_8           = dword ptr  0Ch
.text:0041112C
.text:0041112C                 push    ebx
.text:0041112D                 sub     esp, 18h
.text:00411130                 mov     ebx, ecx
.text:00411132                 mov     [esp+1Ch+var_10], 0
.text:00411137                 mov     eax, [esp+1Ch+arg_8]
.text:0041113B                 mov     [esp+1Ch+var_14], eax
.text:0041113F                 mov     eax, [esp+1Ch+arg_4]
.text:00411143                 mov     [esp+1Ch+var_18], eax
.text:00411147                 mov     eax, [esp+1Ch+arg_0]
.text:0041114B                 mov     [esp+1Ch+var_1C], eax
.text:0041114E                 call    __ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag ; std::string::_S_construct<__gnu_cxx::__normal_iterator<char *,std::string>>(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>,std::allocator<char> const&,std::forward_iterator_tag)
.text:00411153                 mov     [ebx], eax
.text:00411155                 add     esp, 18h
.text:00411158                 pop     ebx
.text:00411159                 retn    0Ch
.text:00411159 __ZNSsC2IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE endp
.text:00411159
.text:0041115C
.text:0041115C ; =============== S U B R O U T I N E =======================================
.text:0041115C
.text:0041115C
.text:0041115C ; std::string::string<char const*>(char const*, char const*, std::allocator<char> const&)
.text:0041115C                 public __ZNSsC2IPKcEET_S2_RKSaIcE
.text:0041115C __ZNSsC2IPKcEET_S2_RKSaIcE proc near
.text:0041115C
.text:0041115C var_1C          = dword ptr -1Ch
.text:0041115C var_18          = dword ptr -18h
.text:0041115C var_14          = dword ptr -14h
.text:0041115C var_10          = byte ptr -10h
.text:0041115C arg_0           = dword ptr  4
.text:0041115C arg_4           = dword ptr  8
.text:0041115C arg_8           = dword ptr  0Ch
.text:0041115C
.text:0041115C                 push    ebx
.text:0041115D                 sub     esp, 18h
.text:00411160                 mov     ebx, ecx
.text:00411162                 mov     [esp+1Ch+var_10], 0
.text:00411167                 mov     eax, [esp+1Ch+arg_8]
.text:0041116B                 mov     [esp+1Ch+var_14], eax
.text:0041116F                 mov     eax, [esp+1Ch+arg_4]
.text:00411173                 mov     [esp+1Ch+var_18], eax
.text:00411177                 mov     eax, [esp+1Ch+arg_0]
.text:0041117B                 mov     [esp+1Ch+var_1C], eax
.text:0041117E                 call    __ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag ; std::string::_S_construct<char const*>(char const*,char const*,std::allocator<char> const&,std::forward_iterator_tag)
.text:00411183                 mov     [ebx], eax
.text:00411185                 add     esp, 18h
.text:00411188                 pop     ebx
.text:00411189                 retn    0Ch
.text:00411189 __ZNSsC2IPKcEET_S2_RKSaIcE endp
.text:00411189
.text:0041118C
.text:0041118C ; =============== S U B R O U T I N E =======================================
.text:0041118C
.text:0041118C
.text:0041118C ; std::string::string<char *>(char *, char *, std::allocator<char> const&)
.text:0041118C                 public __ZNSsC2IPcEET_S1_RKSaIcE
.text:0041118C __ZNSsC2IPcEET_S1_RKSaIcE proc near
.text:0041118C
.text:0041118C var_1C          = dword ptr -1Ch
.text:0041118C var_18          = dword ptr -18h
.text:0041118C var_14          = dword ptr -14h
.text:0041118C var_10          = byte ptr -10h
.text:0041118C arg_0           = dword ptr  4
.text:0041118C arg_4           = dword ptr  8
.text:0041118C arg_8           = dword ptr  0Ch
.text:0041118C
.text:0041118C                 push    ebx
.text:0041118D                 sub     esp, 18h
.text:00411190                 mov     ebx, ecx
.text:00411192                 mov     [esp+1Ch+var_10], 0
.text:00411197                 mov     eax, [esp+1Ch+arg_8]
.text:0041119B                 mov     [esp+1Ch+var_14], eax
.text:0041119F                 mov     eax, [esp+1Ch+arg_4]
.text:004111A3                 mov     [esp+1Ch+var_18], eax
.text:004111A7                 mov     eax, [esp+1Ch+arg_0]
.text:004111AB                 mov     [esp+1Ch+var_1C], eax
.text:004111AE                 call    __ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag ; std::string::_S_construct<char *>(char *,char *,std::allocator<char> const&,std::forward_iterator_tag)
.text:004111B3                 mov     [ebx], eax
.text:004111B5                 add     esp, 18h
.text:004111B8                 pop     ebx
.text:004111B9                 retn    0Ch
.text:004111B9 __ZNSsC2IPcEET_S1_RKSaIcE endp
.text:004111B9
.text:004111BC
.text:004111BC ; =============== S U B R O U T I N E =======================================
.text:004111BC
.text:004111BC
.text:004111BC ; void __cdecl std::string::~string(std::string *__hidden this)
.text:004111BC                 public __ZNSsD1Ev
.text:004111BC __ZNSsD1Ev      proc near               ; CODE XREF: std::__throw_logic_error(char const*)+84↑p
.text:004111BC                                         ; std::__throw_logic_error(char const*)+C6↑p ...
.text:004111BC
.text:004111BC var_1C          = dword ptr -1Ch
.text:004111BC var_18          = dword ptr -18h
.text:004111BC this            = dword ptr  4
.text:004111BC
.text:004111BC                 push    ebx
.text:004111BD                 sub     esp, 18h
.text:004111C0                 mov     ebx, [ecx]
.text:004111C2                 mov     edx, ds:__CRT_MT
.text:004111C8                 test    edx, edx
.text:004111CA                 jnz     short loc_4111E0
.text:004111CC                 mov     eax, [ebx-4]
.text:004111CF                 lea     edx, [eax-1]
.text:004111D2                 mov     [ebx-4], edx
.text:004111D5                 test    eax, eax
.text:004111D7                 jle     short loc_4111F7
.text:004111D9
.text:004111D9 loc_4111D9:                             ; CODE XREF: std::string::~string()+39↓j
.text:004111D9                 add     esp, 18h
.text:004111DC                 pop     ebx
.text:004111DD                 retn
.text:004111DD ; ---------------------------------------------------------------------------
.text:004111DE                 align 10h
.text:004111E0
.text:004111E0 loc_4111E0:                             ; CODE XREF: std::string::~string()+E↑j
.text:004111E0                 mov     [esp+1Ch+var_18], 0FFFFFFFFh ; int
.text:004111E8                 lea     eax, [ebx-4]
.text:004111EB                 mov     [esp+1Ch+var_1C], eax ; volatile int *
.text:004111EE                 call    __ZN9__gnu_cxx18__exchange_and_addEPVii ; __gnu_cxx::__exchange_and_add(int volatile*,int)
.text:004111F3                 test    eax, eax
.text:004111F5                 jg      short loc_4111D9
.text:004111F7
.text:004111F7 loc_4111F7:                             ; CODE XREF: std::string::~string()+1B↑j
.text:004111F7                 sub     ebx, 0Ch
.text:004111FA                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:004111FD                 call    __ZdlPv         ; operator delete(void *)
.text:00411202                 add     esp, 18h
.text:00411205                 pop     ebx
.text:00411206                 retn
.text:00411206 __ZNSsD1Ev      endp
.text:00411206
.text:00411206 ; ---------------------------------------------------------------------------
.text:00411207                 align 4
.text:00411208
.text:00411208 ; =============== S U B R O U T I N E =======================================
.text:00411208
.text:00411208
.text:00411208 ; void __cdecl std::string::~string(std::string *__hidden this)
.text:00411208                 public __ZNSsD2Ev
.text:00411208 __ZNSsD2Ev      proc near
.text:00411208
.text:00411208 var_1C          = dword ptr -1Ch
.text:00411208 var_18          = dword ptr -18h
.text:00411208 this            = dword ptr  4
.text:00411208
.text:00411208                 push    ebx
.text:00411209                 sub     esp, 18h
.text:0041120C                 mov     ebx, [ecx]
.text:0041120E                 mov     eax, ds:__CRT_MT
.text:00411213                 test    eax, eax
.text:00411215                 jnz     short loc_41122C
.text:00411217                 mov     eax, [ebx-4]
.text:0041121A                 lea     edx, [eax-1]
.text:0041121D                 mov     [ebx-4], edx
.text:00411220                 test    eax, eax
.text:00411222                 jle     short loc_411243
.text:00411224
.text:00411224 loc_411224:                             ; CODE XREF: std::string::~string()+39↓j
.text:00411224                 add     esp, 18h
.text:00411227                 pop     ebx
.text:00411228                 retn
.text:00411228 ; ---------------------------------------------------------------------------
.text:00411229                 align 4
.text:0041122C
.text:0041122C loc_41122C:                             ; CODE XREF: std::string::~string()+D↑j
.text:0041122C                 mov     [esp+1Ch+var_18], 0FFFFFFFFh ; int
.text:00411234                 lea     eax, [ebx-4]
.text:00411237                 mov     [esp+1Ch+var_1C], eax ; volatile int *
.text:0041123A                 call    __ZN9__gnu_cxx18__exchange_and_addEPVii ; __gnu_cxx::__exchange_and_add(int volatile*,int)
.text:0041123F                 test    eax, eax
.text:00411241                 jg      short loc_411224
.text:00411243
.text:00411243 loc_411243:                             ; CODE XREF: std::string::~string()+1A↑j
.text:00411243                 sub     ebx, 0Ch
.text:00411246                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:00411249                 call    __ZdlPv         ; operator delete(void *)
.text:0041124E                 add     esp, 18h
.text:00411251                 pop     ebx
.text:00411252                 retn
.text:00411252 __ZNSsD2Ev      endp
.text:00411252
.text:00411252 ; ---------------------------------------------------------------------------
.text:00411253                 align 4
.text:00411254
.text:00411254 ; =============== S U B R O U T I N E =======================================
.text:00411254
.text:00411254
.text:00411254 ; std::string::operator=(std::string &&)
.text:00411254                 public __ZNSsaSEOSs
.text:00411254 __ZNSsaSEOSs    proc near
.text:00411254
.text:00411254 arg_0           = dword ptr  4
.text:00411254
.text:00411254                 push    ebx
.text:00411255                 mov     eax, ecx
.text:00411257                 mov     ebx, [esp+4+arg_0]
.text:0041125B                 mov     ecx, [ecx]
.text:0041125D                 mov     edx, [ecx-4]
.text:00411260                 test    edx, edx
.text:00411262                 js      short loc_41127C
.text:00411264
.text:00411264 loc_411264:                             ; CODE XREF: std::string::operator=(std::string &&)+2F↓j
.text:00411264                 mov     edx, [ebx]
.text:00411266                 cmp     dword ptr [edx-4], 0
.text:0041126A                 jns     short loc_411273
.text:0041126C                 mov     dword ptr [edx-4], 0
.text:00411273
.text:00411273 loc_411273:                             ; CODE XREF: std::string::operator=(std::string &&)+16↑j
.text:00411273                 mov     [eax], edx
.text:00411275                 mov     [ebx], ecx
.text:00411277                 pop     ebx
.text:00411278                 retn    4
.text:00411278 ; ---------------------------------------------------------------------------
.text:0041127B                 align 4
.text:0041127C
.text:0041127C loc_41127C:                             ; CODE XREF: std::string::operator=(std::string &&)+E↑j
.text:0041127C                 mov     dword ptr [ecx-4], 0
.text:00411283                 jmp     short loc_411264
.text:00411283 __ZNSsaSEOSs    endp
.text:00411283
.text:00411283 ; ---------------------------------------------------------------------------
.text:00411285                 align 4
.text:00411288
.text:00411288 ; =============== S U B R O U T I N E =======================================
.text:00411288
.text:00411288
.text:00411288 ; int __stdcall std::string::operator=(std::string *)
.text:00411288                 public __ZNSsaSEPKc
.text:00411288 __ZNSsaSEPKc    proc near
.text:00411288
.text:00411288 var_1C          = dword ptr -1Ch
.text:00411288 var_18          = dword ptr -18h
.text:00411288 arg_0           = dword ptr  4
.text:00411288
.text:00411288                 push    edi
.text:00411289                 push    ebx
.text:0041128A                 sub     esp, 14h
.text:0041128D                 mov     ebx, ecx
.text:0041128F                 mov     edx, [esp+1Ch+arg_0]
.text:00411293                 mov     edi, edx
.text:00411295                 xor     eax, eax
.text:00411297                 mov     ecx, 0FFFFFFFFh
.text:0041129C                 repne scasb
.text:0041129E                 not     ecx
.text:004112A0                 lea     eax, [ecx-1]
.text:004112A3                 mov     [esp+1Ch+var_18], eax ; size_t
.text:004112A7                 mov     [esp+1Ch+var_1C], edx ; this
.text:004112AA                 mov     ecx, ebx
.text:004112AC                 call    __ZNSs6assignEPKcj ; std::string::assign(char const*,uint)
.text:004112B1                 sub     esp, 8
.text:004112B4                 add     esp, 14h
.text:004112B7                 pop     ebx
.text:004112B8                 pop     edi
.text:004112B9                 retn    4
.text:004112B9 __ZNSsaSEPKc    endp
.text:004112B9
.text:004112BC
.text:004112BC ; =============== S U B R O U T I N E =======================================
.text:004112BC
.text:004112BC
.text:004112BC ; std::string::operator=(std::string const&)
.text:004112BC                 public __ZNSsaSERKSs
.text:004112BC __ZNSsaSERKSs   proc near
.text:004112BC                 jmp     __ZNSs6assignERKSs ; std::string::assign(std::string const&)
.text:004112BC __ZNSsaSERKSs   endp
.text:004112BC
.text:004112BC ; ---------------------------------------------------------------------------
.text:004112C1                 align 4
.text:004112C4
.text:004112C4 ; =============== S U B R O U T I N E =======================================
.text:004112C4
.text:004112C4
.text:004112C4 ; int __stdcall std::string::operator=(std::string *, size_t)
.text:004112C4                 public __ZNSsaSESt16initializer_listIcE
.text:004112C4 __ZNSsaSESt16initializer_listIcE proc near
.text:004112C4
.text:004112C4 var_1C          = dword ptr -1Ch
.text:004112C4 var_18          = dword ptr -18h
.text:004112C4 arg_0           = dword ptr  4
.text:004112C4 arg_4           = dword ptr  8
.text:004112C4
.text:004112C4                 push    ebx
.text:004112C5                 sub     esp, 18h
.text:004112C8                 mov     ebx, ecx
.text:004112CA                 mov     eax, [esp+1Ch+arg_4]
.text:004112CE                 mov     [esp+1Ch+var_18], eax ; size_t
.text:004112D2                 mov     eax, [esp+1Ch+arg_0]
.text:004112D6                 mov     [esp+1Ch+var_1C], eax ; this
.text:004112D9                 call    __ZNSs6assignEPKcj ; std::string::assign(char const*,uint)
.text:004112DE                 sub     esp, 8
.text:004112E1                 mov     eax, ebx
.text:004112E3                 add     esp, 18h
.text:004112E6                 pop     ebx
.text:004112E7                 retn    8
.text:004112E7 __ZNSsaSESt16initializer_listIcE endp
.text:004112E7
.text:004112E7 ; ---------------------------------------------------------------------------
.text:004112EA                 align 4
.text:004112EC
.text:004112EC ; =============== S U B R O U T I N E =======================================
.text:004112EC
.text:004112EC
.text:004112EC ; std::string::operator=(char)
.text:004112EC                 public __ZNSsaSEc
.text:004112EC __ZNSsaSEc      proc near
.text:004112EC
.text:004112EC var_1C          = dword ptr -1Ch
.text:004112EC var_18          = dword ptr -18h
.text:004112EC var_14          = dword ptr -14h
.text:004112EC var_10          = dword ptr -10h
.text:004112EC arg_0           = byte ptr  4
.text:004112EC
.text:004112EC                 push    ebx
.text:004112ED                 sub     esp, 18h
.text:004112F0                 mov     ebx, ecx
.text:004112F2                 movsx   eax, [esp+1Ch+arg_0]
.text:004112F7                 mov     [esp+1Ch+var_10], eax ; unsigned int
.text:004112FB                 mov     [esp+1Ch+var_14], 1 ; unsigned int
.text:00411303                 mov     eax, [ecx]
.text:00411305                 mov     eax, [eax-0Ch]
.text:00411308                 mov     [esp+1Ch+var_18], eax ; unsigned int
.text:0041130C                 mov     [esp+1Ch+var_1C], 0 ; this
.text:00411313                 call    __ZNSs14_M_replace_auxEjjjc ; std::string::_M_replace_aux(uint,uint,uint,char)
.text:00411318                 sub     esp, 10h
.text:0041131B                 mov     eax, ebx
.text:0041131D                 add     esp, 18h
.text:00411320                 pop     ebx
.text:00411321                 retn    4
.text:00411321 __ZNSsaSEc      endp
.text:00411321
.text:00411324
.text:00411324 ; =============== S U B R O U T I N E =======================================
.text:00411324
.text:00411324
.text:00411324 ; std::string::operator[](unsigned int)
.text:00411324                 public __ZNSsixEj
.text:00411324 __ZNSsixEj      proc near
.text:00411324
.text:00411324 arg_0           = dword ptr  4
.text:00411324
.text:00411324                 push    ebx
.text:00411325                 sub     esp, 8
.text:00411328                 mov     ebx, ecx
.text:0041132A                 mov     eax, [ecx]
.text:0041132C                 mov     edx, [eax-4]
.text:0041132F                 test    edx, edx
.text:00411331                 js      short loc_41133A
.text:00411333                 call    __ZNSs12_M_leak_hardEv ; std::string::_M_leak_hard(void)
.text:00411338                 mov     eax, [ebx]
.text:0041133A
.text:0041133A loc_41133A:                             ; CODE XREF: std::string::operator[](uint)+D↑j
.text:0041133A                 add     eax, [esp+0Ch+arg_0]
.text:0041133E                 add     esp, 8
.text:00411341                 pop     ebx
.text:00411342                 retn    4
.text:00411342 __ZNSsixEj      endp
.text:00411342
.text:00411342 ; ---------------------------------------------------------------------------
.text:00411345                 align 4
.text:00411348
.text:00411348 ; =============== S U B R O U T I N E =======================================
.text:00411348
.text:00411348
.text:00411348 ; int __stdcall std::string::operator+=(std::string *)
.text:00411348                 public __ZNSspLEPKc
.text:00411348 __ZNSspLEPKc    proc near
.text:00411348
.text:00411348 var_1C          = dword ptr -1Ch
.text:00411348 var_18          = dword ptr -18h
.text:00411348 arg_0           = dword ptr  4
.text:00411348
.text:00411348                 push    edi
.text:00411349                 push    ebx
.text:0041134A                 sub     esp, 14h
.text:0041134D                 mov     ebx, ecx
.text:0041134F                 mov     edx, [esp+1Ch+arg_0]
.text:00411353                 mov     edi, edx
.text:00411355                 xor     eax, eax
.text:00411357                 mov     ecx, 0FFFFFFFFh
.text:0041135C                 repne scasb
.text:0041135E                 not     ecx
.text:00411360                 lea     eax, [ecx-1]
.text:00411363                 mov     [esp+1Ch+var_18], eax ; char *
.text:00411367                 mov     [esp+1Ch+var_1C], edx ; this
.text:0041136A                 mov     ecx, ebx
.text:0041136C                 call    __ZNSs6appendEPKcj ; std::string::append(char const*,uint)
.text:00411371                 sub     esp, 8
.text:00411374                 add     esp, 14h
.text:00411377                 pop     ebx
.text:00411378                 pop     edi
.text:00411379                 retn    4
.text:00411379 __ZNSspLEPKc    endp
.text:00411379
.text:0041137C
.text:0041137C ; =============== S U B R O U T I N E =======================================
.text:0041137C
.text:0041137C
.text:0041137C ; std::string::operator+=(std::string const&)
.text:0041137C                 public __ZNSspLERKSs
.text:0041137C __ZNSspLERKSs   proc near
.text:0041137C                 jmp     __ZNSs6appendERKSs ; std::string::append(std::string const&)
.text:0041137C __ZNSspLERKSs   endp
.text:0041137C
.text:0041137C ; ---------------------------------------------------------------------------
.text:00411381                 align 4
.text:00411384
.text:00411384 ; =============== S U B R O U T I N E =======================================
.text:00411384
.text:00411384
.text:00411384 ; std::string::operator+=(std::initializer_list<char>)
.text:00411384                 public __ZNSspLESt16initializer_listIcE
.text:00411384 __ZNSspLESt16initializer_listIcE proc near
.text:00411384                 jmp     __ZNSs6appendEPKcj ; std::string::append(char const*,uint)
.text:00411384 __ZNSspLESt16initializer_listIcE endp
.text:00411384
.text:00411384 ; ---------------------------------------------------------------------------
.text:00411389                 align 4
.text:0041138C
.text:0041138C ; =============== S U B R O U T I N E =======================================
.text:0041138C
.text:0041138C
.text:0041138C ; std::string::operator+=(char)
.text:0041138C                 public __ZNSspLEc
.text:0041138C __ZNSspLEc      proc near
.text:0041138C
.text:0041138C var_2C          = dword ptr -2Ch
.text:0041138C var_14          = dword ptr -14h
.text:0041138C var_D           = byte ptr -0Dh
.text:0041138C arg_0           = byte ptr  4
.text:0041138C
.text:0041138C                 push    esi
.text:0041138D                 push    ebx
.text:0041138E                 sub     esp, 24h
.text:00411391                 mov     eax, ecx
.text:00411393                 mov     dl, [esp+2Ch+arg_0]
.text:00411397                 mov     [esp+2Ch+var_D], dl
.text:0041139B                 mov     edx, [ecx]
.text:0041139D                 mov     esi, [edx-0Ch]
.text:004113A0                 lea     ebx, [esi+1]
.text:004113A3                 cmp     ebx, [edx-8]
.text:004113A6                 ja      short loc_4113AF
.text:004113A8                 mov     ecx, [edx-4]
.text:004113AB                 test    ecx, ecx
.text:004113AD                 jle     short loc_4113C7
.text:004113AF
.text:004113AF loc_4113AF:                             ; CODE XREF: std::string::operator+=(char)+1A↑j
.text:004113AF                 mov     [esp+2Ch+var_2C], ebx ; this
.text:004113B2                 mov     ecx, eax
.text:004113B4                 mov     [esp+2Ch+var_14], eax
.text:004113B8                 call    __ZNSs7reserveEj ; std::string::reserve(uint)
.text:004113BD                 push    edx
.text:004113BE                 mov     eax, [esp+2Ch+var_14]
.text:004113C2                 mov     edx, [eax]
.text:004113C4                 mov     esi, [edx-0Ch]
.text:004113C7
.text:004113C7 loc_4113C7:                             ; CODE XREF: std::string::operator+=(char)+21↑j
.text:004113C7                 mov     cl, [esp+2Ch+var_D]
.text:004113CB                 mov     [edx+esi], cl
.text:004113CE                 mov     edx, [eax]
.text:004113D0                 mov     dword ptr [edx-4], 0
.text:004113D7                 mov     [edx-0Ch], ebx
.text:004113DA                 mov     byte ptr [edx+ebx], 0
.text:004113DE                 add     esp, 24h
.text:004113E1                 pop     ebx
.text:004113E2                 pop     esi
.text:004113E3                 retn    4
.text:004113E3 __ZNSspLEc      endp
.text:004113E3
.text:004113E3 ; ---------------------------------------------------------------------------
.text:004113E6                 align 4
.text:004113E8
.text:004113E8 ; =============== S U B R O U T I N E =======================================
.text:004113E8
.text:004113E8 ; Attributes: bp-based frame
.text:004113E8
.text:004113E8 ; std::_Rb_tree_iterator<int>::_Rb_tree_iterator(std::_Rb_tree_node<int> *)
.text:004113E8                 public __ZNSt17_Rb_tree_iteratorIiEC1EPSt13_Rb_tree_nodeIiE
.text:004113E8 __ZNSt17_Rb_tree_iteratorIiEC1EPSt13_Rb_tree_nodeIiE proc near
.text:004113E8                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*,int const&)+BB↓p
.text:004113E8                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_lower_bound(std::_Rb_tree_node<int> *,std::_Rb_tree_node<int> *,int const&)+70↓p ...
.text:004113E8
.text:004113E8 var_4           = dword ptr -4
.text:004113E8 arg_0           = dword ptr  8
.text:004113E8
.text:004113E8                 push    ebp
.text:004113E9                 mov     ebp, esp
.text:004113EB                 sub     esp, 4
.text:004113EE                 mov     [ebp+var_4], ecx
.text:004113F1                 mov     eax, [ebp+var_4]
.text:004113F4                 mov     edx, [ebp+arg_0]
.text:004113F7                 mov     [eax], edx
.text:004113F9                 leave
.text:004113FA                 retn    4
.text:004113FA __ZNSt17_Rb_tree_iteratorIiEC1EPSt13_Rb_tree_nodeIiE endp
.text:004113FA
.text:004113FA ; ---------------------------------------------------------------------------
.text:004113FD                 align 10h
.text:00411400
.text:00411400 ; =============== S U B R O U T I N E =======================================
.text:00411400
.text:00411400 ; Attributes: bp-based frame
.text:00411400
.text:00411400 ; std::_Rb_tree_iterator<int>::operator--(void)
.text:00411400                 public __ZNSt17_Rb_tree_iteratorIiEmmEv
.text:00411400 __ZNSt17_Rb_tree_iteratorIiEmmEv proc near
.text:00411400                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+17E↓p
.text:00411400
.text:00411400 var_C           = dword ptr -0Ch
.text:00411400
.text:00411400                 push    ebp
.text:00411401                 mov     ebp, esp
.text:00411403                 sub     esp, 28h
.text:00411406                 mov     [ebp+var_C], ecx
.text:00411409                 mov     eax, [ebp+var_C]
.text:0041140C                 mov     eax, [eax]
.text:0041140E                 mov     [esp], eax
.text:00411411                 call    __ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base ; std::_Rb_tree_decrement(std::_Rb_tree_node_base *)
.text:00411416                 mov     edx, [ebp+var_C]
.text:00411419                 mov     [edx], eax
.text:0041141B                 mov     eax, [ebp+var_C]
.text:0041141E                 leave
.text:0041141F                 retn
.text:0041141F __ZNSt17_Rb_tree_iteratorIiEmmEv endp
.text:0041141F
.text:00411420
.text:00411420 ; =============== S U B R O U T I N E =======================================
.text:00411420
.text:00411420 ; Attributes: bp-based frame
.text:00411420
.text:00411420 ; std::_Rb_tree_const_iterator<int>::_Rb_tree_const_iterator(std::_Rb_tree_node<int> const*)
.text:00411420                 public __ZNSt23_Rb_tree_const_iteratorIiEC1EPKSt13_Rb_tree_nodeIiE
.text:00411420 __ZNSt23_Rb_tree_const_iteratorIiEC1EPKSt13_Rb_tree_nodeIiE proc near
.text:00411420                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::end(void)+17↑p
.text:00411420
.text:00411420 var_4           = dword ptr -4
.text:00411420 arg_0           = dword ptr  8
.text:00411420
.text:00411420                 push    ebp
.text:00411421                 mov     ebp, esp
.text:00411423                 sub     esp, 4
.text:00411426                 mov     [ebp+var_4], ecx
.text:00411429                 mov     eax, [ebp+var_4]
.text:0041142C                 mov     edx, [ebp+arg_0]
.text:0041142F                 mov     [eax], edx
.text:00411431                 leave
.text:00411432                 retn    4
.text:00411432 __ZNSt23_Rb_tree_const_iteratorIiEC1EPKSt13_Rb_tree_nodeIiE endp
.text:00411432
.text:00411432 ; ---------------------------------------------------------------------------
.text:00411435                 align 4
.text:00411438
.text:00411438 ; =============== S U B R O U T I N E =======================================
.text:00411438
.text:00411438 ; Attributes: bp-based frame
.text:00411438
.text:00411438 ; std::_Rb_tree_const_iterator<int>::_Rb_tree_const_iterator(std::_Rb_tree_iterator<int> const&)
.text:00411438                 public __ZNSt23_Rb_tree_const_iteratorIiEC1ERKSt17_Rb_tree_iteratorIiE
.text:00411438 __ZNSt23_Rb_tree_const_iteratorIiEC1ERKSt17_Rb_tree_iteratorIiE proc near
.text:00411438                                         ; CODE XREF: std::set<int,std::less<int>,std::allocator<int>>::find(int const&)+2A↓p
.text:00411438                                         ; std::set<int,std::less<int>,std::allocator<int>>::insert(int const&)+63↓p
.text:00411438
.text:00411438 var_4           = dword ptr -4
.text:00411438 arg_0           = dword ptr  8
.text:00411438
.text:00411438                 push    ebp
.text:00411439                 mov     ebp, esp
.text:0041143B                 sub     esp, 4
.text:0041143E                 mov     [ebp+var_4], ecx
.text:00411441                 mov     eax, [ebp+arg_0]
.text:00411444                 mov     edx, [eax]
.text:00411446                 mov     eax, [ebp+var_4]
.text:00411449                 mov     [eax], edx
.text:0041144B                 leave
.text:0041144C                 retn    4
.text:0041144C __ZNSt23_Rb_tree_const_iteratorIiEC1ERKSt17_Rb_tree_iteratorIiE endp
.text:0041144C
.text:0041144C ; ---------------------------------------------------------------------------
.text:0041144F                 align 10h
.text:00411450
.text:00411450 ; =============== S U B R O U T I N E =======================================
.text:00411450
.text:00411450 ; Attributes: bp-based frame
.text:00411450
.text:00411450 ; std::set<int, std::less<int>, std::allocator<int>>::find(int const&)
.text:00411450                 public __ZNSt3setIiSt4lessIiESaIiEE4findERKi
.text:00411450 __ZNSt3setIiSt4lessIiESaIiEE4findERKi proc near
.text:00411450                                         ; CODE XREF: _main+1BD↑p
.text:00411450
.text:00411450 var_1C          = dword ptr -1Ch
.text:00411450 var_10          = dword ptr -10h
.text:00411450 var_C           = dword ptr -0Ch
.text:00411450 arg_0           = dword ptr  8
.text:00411450
.text:00411450                 push    ebp
.text:00411451                 mov     ebp, esp
.text:00411453                 sub     esp, 38h
.text:00411456                 mov     [ebp+var_1C], ecx
.text:00411459                 mov     eax, [ebp+var_1C]
.text:0041145C                 mov     edx, [ebp+arg_0]
.text:0041145F                 mov     [esp], edx
.text:00411462                 mov     ecx, eax
.text:00411464                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE4findERKi ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::find(int const&)
.text:00411469                 sub     esp, 4
.text:0041146C                 mov     [ebp+var_C], eax
.text:0041146F                 lea     eax, [ebp+var_10]
.text:00411472                 lea     edx, [ebp+var_C]
.text:00411475                 mov     [esp], edx
.text:00411478                 mov     ecx, eax
.text:0041147A                 call    __ZNSt23_Rb_tree_const_iteratorIiEC1ERKSt17_Rb_tree_iteratorIiE ; std::_Rb_tree_const_iterator<int>::_Rb_tree_const_iterator(std::_Rb_tree_iterator<int> const&)
.text:0041147F                 sub     esp, 4
.text:00411482                 mov     eax, [ebp+var_10]
.text:00411485                 leave
.text:00411486                 retn    4
.text:00411486 __ZNSt3setIiSt4lessIiESaIiEE4findERKi endp
.text:00411486
.text:00411486 ; ---------------------------------------------------------------------------
.text:00411489                 align 4
.text:0041148C
.text:0041148C ; =============== S U B R O U T I N E =======================================
.text:0041148C
.text:0041148C ; Attributes: bp-based frame
.text:0041148C
.text:0041148C ; std::set<int, std::less<int>, std::allocator<int>>::insert(int const&)
.text:0041148C                 public __ZNSt3setIiSt4lessIiESaIiEE6insertERKi
.text:0041148C __ZNSt3setIiSt4lessIiESaIiEE6insertERKi proc near
.text:0041148C                                         ; CODE XREF: _main+213↑p
.text:0041148C
.text:0041148C var_78          = dword ptr -78h
.text:0041148C var_74          = dword ptr -74h
.text:0041148C fctx            = SjLj_Function_Context ptr -70h
.text:0041148C var_3C          = dword ptr -3Ch
.text:0041148C var_2C          = dword ptr -2Ch
.text:0041148C var_28          = dword ptr -28h
.text:0041148C var_24          = dword ptr -24h
.text:0041148C var_20          = dword ptr -20h
.text:0041148C var_1C          = byte ptr -1Ch
.text:0041148C var_18          = byte ptr -18h
.text:0041148C arg_0           = dword ptr  8
.text:0041148C
.text:0041148C                 push    ebp
.text:0041148D                 mov     ebp, esp
.text:0041148F                 push    edi
.text:00411490                 push    esi
.text:00411491                 push    ebx
.text:00411492                 sub     esp, 7Ch
.text:00411495                 mov     [ebp+var_3C], ecx
.text:00411498                 mov     [ebp+fctx.personality], offset ___gxx_personality_sj0
.text:0041149F                 mov     [ebp+fctx.lsda], offset dword_412234
.text:004114A6                 lea     eax, [ebp+fctx.jbuf]
.text:004114A9                 lea     edx, [ebp+var_18]
.text:004114AC                 mov     [eax], edx
.text:004114AE                 mov     edx, offset loc_411522
.text:004114B3                 mov     [eax+4], edx
.text:004114B6                 mov     [eax+8], esp
.text:004114B9                 lea     eax, [ebp+fctx]
.text:004114BC                 mov     [esp], eax      ; lpfctx
.text:004114BF                 call    __Unwind_SjLj_Register
.text:004114C4                 mov     eax, [ebp+var_3C]
.text:004114C7                 mov     edx, [ebp+arg_0]
.text:004114CA                 mov     [esp], edx
.text:004114CD                 mov     [ebp+fctx.call_site], 1
.text:004114D4                 mov     ecx, eax
.text:004114D6                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueERKi ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)
.text:004114DB                 sub     esp, 4
.text:004114DE                 mov     [ebp+var_2C], eax
.text:004114E1                 mov     [ebp+var_28], edx
.text:004114E4                 lea     eax, [ebp+var_1C]
.text:004114E7                 lea     edx, [ebp+var_2C]
.text:004114EA                 mov     [esp], edx
.text:004114ED                 mov     ecx, eax
.text:004114EF                 call    __ZNSt23_Rb_tree_const_iteratorIiEC1ERKSt17_Rb_tree_iteratorIiE ; std::_Rb_tree_const_iterator<int>::_Rb_tree_const_iterator(std::_Rb_tree_iterator<int> const&)
.text:004114F4                 sub     esp, 4
.text:004114F7                 lea     eax, [ebp+var_24]
.text:004114FA                 lea     edx, [ebp+var_2C]
.text:004114FD                 add     edx, 4
.text:00411500                 mov     [esp+4], edx
.text:00411504                 lea     edx, [ebp+var_1C]
.text:00411507                 mov     [esp], edx
.text:0041150A                 mov     ecx, eax
.text:0041150C                 call    __ZNSt4pairISt23_Rb_tree_const_iteratorIiEbEC1ERKS1_RKb ; std::pair<std::_Rb_tree_const_iterator<int>,bool>::pair(std::_Rb_tree_const_iterator<int> const&,bool const&)
.text:00411511                 sub     esp, 8
.text:00411514                 mov     eax, [ebp+var_24]
.text:00411517                 mov     edx, [ebp+var_20]
.text:0041151A                 mov     [ebp+var_78], eax
.text:0041151D                 mov     [ebp+var_74], edx
.text:00411520                 jmp     short loc_411537
.text:00411522 ; ---------------------------------------------------------------------------
.text:00411522
.text:00411522 loc_411522:                             ; DATA XREF: std::set<int,std::less<int>,std::allocator<int>>::insert(int const&)+22↑o
.text:00411522                 lea     ebp, [ebp+18h]
.text:00411525                 mov     eax, [ebp+fctx.data]
.text:00411528                 mov     [esp], eax      ; lpuexcpt
.text:0041152B                 mov     [ebp+fctx.call_site], 0FFFFFFFFh
.text:00411532                 call    __Unwind_SjLj_Resume
.text:00411537 ; ---------------------------------------------------------------------------
.text:00411537
.text:00411537 loc_411537:                             ; CODE XREF: std::set<int,std::less<int>,std::allocator<int>>::insert(int const&)+94↑j
.text:00411537                 lea     eax, [ebp+fctx]
.text:0041153A                 mov     [esp], eax      ; lpfctx
.text:0041153D                 call    __Unwind_SjLj_Unregister
.text:00411542                 mov     eax, [ebp+var_78]
.text:00411545                 mov     edx, [ebp+var_74]
.text:00411548                 lea     esp, [ebp-0Ch]
.text:0041154B                 pop     ebx
.text:0041154C                 pop     esi
.text:0041154D                 pop     edi
.text:0041154E                 pop     ebp
.text:0041154F                 retn    4
.text:0041154F __ZNSt3setIiSt4lessIiESaIiEE6insertERKi endp
.text:0041154F
.text:0041154F ; ---------------------------------------------------------------------------
.text:00411552                 align 4
.text:00411554
.text:00411554 ; =============== S U B R O U T I N E =======================================
.text:00411554
.text:00411554 ; Attributes: bp-based frame
.text:00411554
.text:00411554 ; std::set<int, std::less<int>, std::allocator<int>>::set(void)
.text:00411554                 public __ZNSt3setIiSt4lessIiESaIiEEC1Ev
.text:00411554 __ZNSt3setIiSt4lessIiESaIiEEC1Ev proc near
.text:00411554                                         ; CODE XREF: _main+11B↑p
.text:00411554
.text:00411554 var_C           = dword ptr -0Ch
.text:00411554
.text:00411554                 push    ebp
.text:00411555                 mov     ebp, esp
.text:00411557                 sub     esp, 18h
.text:0041155A                 mov     [ebp+var_C], ecx
.text:0041155D                 mov     eax, [ebp+var_C]
.text:00411560                 mov     ecx, eax
.text:00411562                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEEC1Ev ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree(void)
.text:00411567                 leave
.text:00411568                 retn
.text:00411568 __ZNSt3setIiSt4lessIiESaIiEEC1Ev endp
.text:00411568
.text:00411568 ; ---------------------------------------------------------------------------
.text:00411569                 align 4
.text:0041156C
.text:0041156C ; =============== S U B R O U T I N E =======================================
.text:0041156C
.text:0041156C ; Attributes: bp-based frame
.text:0041156C
.text:0041156C ; std::set<int, std::less<int>, std::allocator<int>>::~set()
.text:0041156C                 public __ZNSt3setIiSt4lessIiESaIiEED1Ev
.text:0041156C __ZNSt3setIiSt4lessIiESaIiEED1Ev proc near
.text:0041156C                                         ; CODE XREF: _main+241↑p
.text:0041156C                                         ; _main+2C4↑p
.text:0041156C
.text:0041156C var_C           = dword ptr -0Ch
.text:0041156C
.text:0041156C                 push    ebp
.text:0041156D                 mov     ebp, esp
.text:0041156F                 sub     esp, 18h
.text:00411572                 mov     [ebp+var_C], ecx
.text:00411575                 mov     eax, [ebp+var_C]
.text:00411578                 mov     ecx, eax
.text:0041157A                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEED1Ev ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::~_Rb_tree()
.text:0041157F                 leave
.text:00411580                 retn
.text:00411580 __ZNSt3setIiSt4lessIiESaIiEED1Ev endp
.text:00411580
.text:00411580 ; ---------------------------------------------------------------------------
.text:00411581                 align 4
.text:00411584
.text:00411584 ; =============== S U B R O U T I N E =======================================
.text:00411584
.text:00411584 ; Attributes: bp-based frame
.text:00411584
.text:00411584 ; std::pair<std::_Rb_tree_iterator<int>, bool>::pair(std::_Rb_tree_iterator<int> const&, bool const&)
.text:00411584                 public __ZNSt4pairISt17_Rb_tree_iteratorIiEbEC1ERKS1_RKb
.text:00411584 __ZNSt4pairISt17_Rb_tree_iteratorIiEbEC1ERKS1_RKb proc near
.text:00411584                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+166↓p
.text:00411584                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+215↓p ...
.text:00411584
.text:00411584 var_4           = dword ptr -4
.text:00411584 arg_0           = dword ptr  8
.text:00411584 arg_4           = dword ptr  0Ch
.text:00411584
.text:00411584                 push    ebp
.text:00411585                 mov     ebp, esp
.text:00411587                 sub     esp, 4
.text:0041158A                 mov     [ebp+var_4], ecx
.text:0041158D                 mov     eax, [ebp+var_4]
.text:00411590                 mov     edx, [ebp+arg_0]
.text:00411593                 mov     edx, [edx]
.text:00411595                 mov     [eax], edx
.text:00411597                 mov     eax, [ebp+arg_4]
.text:0041159A                 mov     dl, [eax]
.text:0041159C                 mov     eax, [ebp+var_4]
.text:0041159F                 mov     [eax+4], dl
.text:004115A2                 leave
.text:004115A3                 retn    8
.text:004115A3 __ZNSt4pairISt17_Rb_tree_iteratorIiEbEC1ERKS1_RKb endp
.text:004115A3
.text:004115A3 ; ---------------------------------------------------------------------------
.text:004115A6                 align 4
.text:004115A8
.text:004115A8 ; =============== S U B R O U T I N E =======================================
.text:004115A8
.text:004115A8 ; Attributes: bp-based frame
.text:004115A8
.text:004115A8 ; std::pair<std::_Rb_tree_const_iterator<int>, bool>::pair(std::_Rb_tree_const_iterator<int> const&, bool const&)
.text:004115A8                 public __ZNSt4pairISt23_Rb_tree_const_iteratorIiEbEC1ERKS1_RKb
.text:004115A8 __ZNSt4pairISt23_Rb_tree_const_iteratorIiEbEC1ERKS1_RKb proc near
.text:004115A8                                         ; CODE XREF: std::set<int,std::less<int>,std::allocator<int>>::insert(int const&)+80↑p
.text:004115A8
.text:004115A8 var_4           = dword ptr -4
.text:004115A8 arg_0           = dword ptr  8
.text:004115A8 arg_4           = dword ptr  0Ch
.text:004115A8
.text:004115A8                 push    ebp
.text:004115A9                 mov     ebp, esp
.text:004115AB                 sub     esp, 4
.text:004115AE                 mov     [ebp+var_4], ecx
.text:004115B1                 mov     eax, [ebp+var_4]
.text:004115B4                 mov     edx, [ebp+arg_0]
.text:004115B7                 mov     edx, [edx]
.text:004115B9                 mov     [eax], edx
.text:004115BB                 mov     eax, [ebp+arg_4]
.text:004115BE                 mov     dl, [eax]
.text:004115C0                 mov     eax, [ebp+var_4]
.text:004115C3                 mov     [eax+4], dl
.text:004115C6                 leave
.text:004115C7                 retn    8
.text:004115C7 __ZNSt4pairISt23_Rb_tree_const_iteratorIiEbEC1ERKS1_RKb endp
.text:004115C7
.text:004115C7 ; ---------------------------------------------------------------------------
.text:004115CA                 align 4
.text:004115CC
.text:004115CC ; =============== S U B R O U T I N E =======================================
.text:004115CC
.text:004115CC ; Attributes: bp-based frame
.text:004115CC
.text:004115CC ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_M_insert_(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, int const&)
.text:004115CC                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE10_M_insert_EPKSt18_Rb_tree_node_baseS8_RKi
.text:004115CC __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE10_M_insert_EPKSt18_Rb_tree_node_baseS8_RKi proc near
.text:004115CC                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+149↓p
.text:004115CC                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+1F8↓p
.text:004115CC
.text:004115CC var_1C          = dword ptr -1Ch
.text:004115CC var_15          = byte ptr -15h
.text:004115CC var_14          = dword ptr -14h
.text:004115CC var_10          = dword ptr -10h
.text:004115CC var_9           = byte ptr -9
.text:004115CC arg_0           = dword ptr  8
.text:004115CC arg_4           = dword ptr  0Ch
.text:004115CC arg_8           = dword ptr  10h
.text:004115CC
.text:004115CC                 push    ebp
.text:004115CD                 mov     ebp, esp
.text:004115CF                 push    esi
.text:004115D0                 push    ebx
.text:004115D1                 sub     esp, 30h
.text:004115D4                 mov     [ebp+var_1C], ecx
.text:004115D7                 mov     bl, 0
.text:004115D9                 cmp     [ebp+arg_0], 0
.text:004115DD                 jnz     short loc_411628
.text:004115DF                 mov     eax, [ebp+var_1C]
.text:004115E2                 mov     ecx, eax
.text:004115E4                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_M_endEv ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_end(void)
.text:004115E9                 cmp     eax, [ebp+arg_4]
.text:004115EC                 jz      short loc_411628
.text:004115EE                 mov     eax, [ebp+arg_4]
.text:004115F1                 mov     [esp], eax
.text:004115F4                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_S_keyEPKSt18_Rb_tree_node_base ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_key(std::_Rb_tree_node_base const*)
.text:004115F9                 mov     esi, eax
.text:004115FB                 mov     bl, 1
.text:004115FD                 lea     eax, [ebp+var_15]
.text:00411600                 mov     edx, [ebp+arg_8]
.text:00411603                 mov     [esp], edx
.text:00411606                 mov     ecx, eax
.text:00411608                 call    __ZNKSt9_IdentityIiEclERKi ; std::_Identity<int>::operator()(int const&)
.text:0041160D                 sub     esp, 4
.text:00411610                 mov     edx, [ebp+var_1C]
.text:00411613                 mov     [esp+4], esi
.text:00411617                 mov     [esp], eax
.text:0041161A                 mov     ecx, edx
.text:0041161C                 call    __ZNKSt4lessIiEclERKiS2_ ; std::less<int>::operator()(int const&,int const&)
.text:00411621                 sub     esp, 8
.text:00411624                 test    al, al
.text:00411626                 jz      short loc_41162C
.text:00411628
.text:00411628 loc_411628:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*,int const&)+11↑j
.text:00411628                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*,int const&)+20↑j
.text:00411628                 mov     al, 1
.text:0041162A                 jmp     short loc_41162E
.text:0041162C ; ---------------------------------------------------------------------------
.text:0041162C
.text:0041162C loc_41162C:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*,int const&)+5A↑j
.text:0041162C                 mov     al, 0
.text:0041162E
.text:0041162E loc_41162E:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*,int const&)+5E↑j
.text:0041162E                 mov     [ebp+var_9], al
.text:00411631                 test    bl, bl
.text:00411633                 mov     eax, [ebp+var_1C]
.text:00411636                 mov     edx, [ebp+arg_8]
.text:00411639                 mov     [esp], edx
.text:0041163C                 mov     ecx, eax
.text:0041163E                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_create_nodeERKi ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_create_node(int const&)
.text:00411643                 sub     esp, 4
.text:00411646                 mov     [ebp+var_10], eax
.text:00411649                 mov     eax, [ebp+var_1C]
.text:0041164C                 lea     edx, [eax+4]
.text:0041164F                 movzx   eax, [ebp+var_9]
.text:00411653                 mov     [esp+0Ch], edx
.text:00411657                 mov     edx, [ebp+arg_4]
.text:0041165A                 mov     [esp+8], edx
.text:0041165E                 mov     edx, [ebp+var_10]
.text:00411661                 mov     [esp+4], edx
.text:00411665                 mov     [esp], eax
.text:00411668                 call    __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)
.text:0041166D                 mov     eax, [ebp+var_1C]
.text:00411670                 mov     eax, [eax+14h]
.text:00411673                 lea     edx, [eax+1]
.text:00411676                 mov     eax, [ebp+var_1C]
.text:00411679                 mov     [eax+14h], edx
.text:0041167C                 lea     eax, [ebp+var_14]
.text:0041167F                 mov     edx, [ebp+var_10]
.text:00411682                 mov     [esp], edx
.text:00411685                 mov     ecx, eax
.text:00411687                 call    __ZNSt17_Rb_tree_iteratorIiEC1EPSt13_Rb_tree_nodeIiE ; std::_Rb_tree_iterator<int>::_Rb_tree_iterator(std::_Rb_tree_node<int> *)
.text:0041168C                 sub     esp, 4
.text:0041168F                 mov     eax, [ebp+var_14]
.text:00411692                 lea     esp, [ebp-8]
.text:00411695                 pop     ebx
.text:00411696                 pop     esi
.text:00411697                 pop     ebp
.text:00411698                 retn    0Ch
.text:00411698 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE10_M_insert_EPKSt18_Rb_tree_node_baseS8_RKi endp
.text:00411698
.text:00411698 ; ---------------------------------------------------------------------------
.text:0041169B                 align 4
.text:0041169C
.text:0041169C ; =============== S U B R O U T I N E =======================================
.text:0041169C
.text:0041169C ; Attributes: bp-based frame
.text:0041169C
.text:0041169C ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_M_get_node(void)
.text:0041169C                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_M_get_nodeEv
.text:0041169C __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_M_get_nodeEv proc near
.text:0041169C                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_create_node(int const&)+F↓p
.text:0041169C
.text:0041169C var_C           = dword ptr -0Ch
.text:0041169C
.text:0041169C                 push    ebp
.text:0041169D                 mov     ebp, esp
.text:0041169F                 sub     esp, 28h
.text:004116A2                 mov     [ebp+var_C], ecx
.text:004116A5                 mov     eax, [ebp+var_C]
.text:004116A8                 mov     dword ptr [esp+4], 0
.text:004116B0                 mov     dword ptr [esp], 1
.text:004116B7                 mov     ecx, eax
.text:004116B9                 call    __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEE8allocateEjPKv ; __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::allocate(uint,void const*)
.text:004116BE                 sub     esp, 8
.text:004116C1                 leave
.text:004116C2                 retn
.text:004116C2 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_M_get_nodeEv endp
.text:004116C2
.text:004116C2 ; ---------------------------------------------------------------------------
.text:004116C3                 align 4
.text:004116C4
.text:004116C4 ; =============== S U B R O U T I N E =======================================
.text:004116C4
.text:004116C4 ; Attributes: bp-based frame
.text:004116C4
.text:004116C4 ; int __stdcall std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_put_node(void *)
.text:004116C4                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_M_put_nodeEPSt13_Rb_tree_nodeIiE
.text:004116C4 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_M_put_nodeEPSt13_Rb_tree_nodeIiE proc near
.text:004116C4                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_destroy_node(std::_Rb_tree_node<int> *)+52↓p
.text:004116C4
.text:004116C4 var_C           = dword ptr -0Ch
.text:004116C4 arg_0           = dword ptr  8
.text:004116C4
.text:004116C4                 push    ebp
.text:004116C5                 mov     ebp, esp
.text:004116C7                 sub     esp, 28h
.text:004116CA                 mov     [ebp+var_C], ecx
.text:004116CD                 mov     eax, [ebp+var_C]
.text:004116D0                 mov     dword ptr [esp+4], 1 ; int
.text:004116D8                 mov     edx, [ebp+arg_0]
.text:004116DB                 mov     [esp], edx      ; void *
.text:004116DE                 mov     ecx, eax
.text:004116E0                 call    __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEE10deallocateEPS2_j ; __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::deallocate(std::_Rb_tree_node<int>*,uint)
.text:004116E5                 sub     esp, 8
.text:004116E8                 leave
.text:004116E9                 retn    4
.text:004116E9 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_M_put_nodeEPSt13_Rb_tree_nodeIiE endp
.text:004116E9
.text:004116EC
.text:004116EC ; =============== S U B R O U T I N E =======================================
.text:004116EC
.text:004116EC ; Attributes: bp-based frame
.text:004116EC
.text:004116EC ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_Rb_tree_impl<std::less<int>, false>::_M_initialize(void)
.text:004116EC                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb0EE13_M_initializeEv
.text:004116EC __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb0EE13_M_initializeEv proc near
.text:004116EC                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree_impl<std::less<int>,false>::_Rb_tree_impl(void)+37↓p
.text:004116EC
.text:004116EC var_4           = dword ptr -4
.text:004116EC
.text:004116EC                 push    ebp
.text:004116ED                 mov     ebp, esp
.text:004116EF                 sub     esp, 4
.text:004116F2                 mov     [ebp+var_4], ecx
.text:004116F5                 mov     eax, [ebp+var_4]
.text:004116F8                 mov     dword ptr [eax+4], 0
.text:004116FF                 mov     eax, [ebp+var_4]
.text:00411702                 mov     dword ptr [eax+8], 0
.text:00411709                 mov     eax, [ebp+var_4]
.text:0041170C                 lea     edx, [eax+4]
.text:0041170F                 mov     eax, [ebp+var_4]
.text:00411712                 mov     [eax+0Ch], edx
.text:00411715                 mov     eax, [ebp+var_4]
.text:00411718                 lea     edx, [eax+4]
.text:0041171B                 mov     eax, [ebp+var_4]
.text:0041171E                 mov     [eax+10h], edx
.text:00411721                 leave
.text:00411722                 retn
.text:00411722 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb0EE13_M_initializeEv endp
.text:00411722
.text:00411722 ; ---------------------------------------------------------------------------
.text:00411723                 align 4
.text:00411724
.text:00411724 ; =============== S U B R O U T I N E =======================================
.text:00411724
.text:00411724 ; Attributes: bp-based frame
.text:00411724
.text:00411724 ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_Rb_tree_impl<std::less<int>, false>::_Rb_tree_impl(void)
.text:00411724                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb0EEC1Ev
.text:00411724 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb0EEC1Ev proc near
.text:00411724                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree(void)+E↓p
.text:00411724
.text:00411724 var_C           = dword ptr -0Ch
.text:00411724
.text:00411724                 push    ebp
.text:00411725                 mov     ebp, esp
.text:00411727                 push    edi
.text:00411728                 push    ebx
.text:00411729                 sub     esp, 10h
.text:0041172C                 mov     [ebp+var_C], ecx
.text:0041172F                 mov     eax, [ebp+var_C]
.text:00411732                 mov     ecx, eax
.text:00411734                 call    __ZNSaISt13_Rb_tree_nodeIiEEC2Ev ; std::allocator<std::_Rb_tree_node<int>>::allocator(void)
.text:00411739                 mov     eax, [ebp+var_C]
.text:0041173C                 lea     ebx, [eax+4]
.text:0041173F                 mov     al, 0
.text:00411741                 mov     edx, 10h
.text:00411746                 mov     edi, ebx
.text:00411748                 mov     ecx, edx
.text:0041174A                 rep stosb
.text:0041174C                 mov     eax, [ebp+var_C]
.text:0041174F                 mov     dword ptr [eax+14h], 0
.text:00411756                 mov     eax, [ebp+var_C]
.text:00411759                 mov     ecx, eax
.text:0041175B                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb0EE13_M_initializeEv ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree_impl<std::less<int>,false>::_M_initialize(void)
.text:00411760                 add     esp, 10h
.text:00411763                 pop     ebx
.text:00411764                 pop     edi
.text:00411765                 pop     ebp
.text:00411766                 retn
.text:00411766 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb0EEC1Ev endp
.text:00411766
.text:00411766 ; ---------------------------------------------------------------------------
.text:00411767                 align 4
.text:00411768
.text:00411768 ; =============== S U B R O U T I N E =======================================
.text:00411768
.text:00411768 ; Attributes: bp-based frame
.text:00411768
.text:00411768 ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_Rb_tree_impl<std::less<int>, false>::~_Rb_tree_impl()
.text:00411768                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb0EED1Ev
.text:00411768 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb0EED1Ev proc near
.text:00411768                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::~_Rb_tree()+5E↓p
.text:00411768                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::~_Rb_tree()+73↓p
.text:00411768
.text:00411768 var_C           = dword ptr -0Ch
.text:00411768
.text:00411768                 push    ebp
.text:00411769                 mov     ebp, esp
.text:0041176B                 sub     esp, 18h
.text:0041176E                 mov     [ebp+var_C], ecx
.text:00411771                 mov     eax, [ebp+var_C]
.text:00411774                 mov     ecx, eax
.text:00411776                 call    __ZNSaISt13_Rb_tree_nodeIiEED2Ev ; std::allocator<std::_Rb_tree_node<int>>::~allocator()
.text:0041177B                 leave
.text:0041177C                 retn
.text:0041177C __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb0EED1Ev endp
.text:0041177C
.text:0041177C ; ---------------------------------------------------------------------------
.text:0041177D                 align 10h
.text:00411780
.text:00411780 ; =============== S U B R O U T I N E =======================================
.text:00411780
.text:00411780 ; Attributes: bp-based frame
.text:00411780
.text:00411780 ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_M_create_node(int const&)
.text:00411780                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_create_nodeERKi
.text:00411780 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_create_nodeERKi proc near
.text:00411780                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*,int const&)+72↑p
.text:00411780
.text:00411780 var_1C          = dword ptr -1Ch
.text:00411780 var_D           = byte ptr -0Dh
.text:00411780 var_C           = dword ptr -0Ch
.text:00411780 var_4           = dword ptr -4
.text:00411780 arg_0           = dword ptr  8
.text:00411780
.text:00411780                 push    ebp
.text:00411781                 mov     ebp, esp
.text:00411783                 push    ebx
.text:00411784                 sub     esp, 34h
.text:00411787                 mov     [ebp+var_1C], ecx
.text:0041178A                 mov     eax, [ebp+var_1C]
.text:0041178D                 mov     ecx, eax
.text:0041178F                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_M_get_nodeEv ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_get_node(void)
.text:00411794                 mov     [ebp+var_C], eax
.text:00411797                 mov     eax, [ebp+var_C]
.text:0041179A                 add     eax, 10h
.text:0041179D                 mov     [esp], eax
.text:004117A0                 call    __ZSt11__addressofIiEPT_RS0_ ; std::__addressof<int>(int&)
.text:004117A5                 mov     ebx, eax
.text:004117A7                 lea     eax, [ebp+var_D]
.text:004117AA                 mov     edx, [ebp+var_1C]
.text:004117AD                 mov     [esp], edx
.text:004117B0                 mov     ecx, eax
.text:004117B2                 call    __ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13get_allocatorEv ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::get_allocator(void)
.text:004117B7                 sub     esp, 4
.text:004117BA                 lea     eax, [ebp+var_D]
.text:004117BD                 mov     edx, [ebp+arg_0]
.text:004117C0                 mov     [esp+4], edx    ; int
.text:004117C4                 mov     [esp], ebx      ; void *
.text:004117C7                 mov     ecx, eax
.text:004117C9                 call    __ZN9__gnu_cxx13new_allocatorIiE9constructEPiRKi ; __gnu_cxx::new_allocator<int>::construct(int *,int const&)
.text:004117CE                 sub     esp, 8
.text:004117D1                 lea     eax, [ebp+var_D]
.text:004117D4                 mov     ecx, eax
.text:004117D6                 call    __ZNSaIiED1Ev   ; std::allocator<int>::~allocator()
.text:004117DB                 mov     eax, [ebp+var_C]
.text:004117DE                 mov     ebx, [ebp+var_4]
.text:004117E1                 leave
.text:004117E2                 retn    4
.text:004117E2 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_create_nodeERKi endp
.text:004117E2
.text:004117E2 ; ---------------------------------------------------------------------------
.text:004117E5                 align 4
.text:004117E8
.text:004117E8 ; =============== S U B R O U T I N E =======================================
.text:004117E8
.text:004117E8 ; Attributes: bp-based frame
.text:004117E8
.text:004117E8 ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_M_lower_bound(std::_Rb_tree_node<int> *, std::_Rb_tree_node<int> *, int const&)
.text:004117E8                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_lower_boundEPSt13_Rb_tree_nodeIiES8_RKi
.text:004117E8 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_lower_boundEPSt13_Rb_tree_nodeIiES8_RKi proc near
.text:004117E8                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::find(int const&)+6C↓p
.text:004117E8
.text:004117E8 var_1C          = dword ptr -1Ch
.text:004117E8 var_C           = dword ptr -0Ch
.text:004117E8 arg_0           = dword ptr  8
.text:004117E8 arg_4           = dword ptr  0Ch
.text:004117E8 arg_8           = dword ptr  10h
.text:004117E8
.text:004117E8                 push    ebp
.text:004117E9                 mov     ebp, esp
.text:004117EB                 sub     esp, 38h
.text:004117EE                 mov     [ebp+var_1C], ecx
.text:004117F1                 jmp     short loc_411842
.text:004117F3 ; ---------------------------------------------------------------------------
.text:004117F3
.text:004117F3 loc_4117F3:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_lower_bound(std::_Rb_tree_node<int> *,std::_Rb_tree_node<int> *,int const&)+63↓j
.text:004117F3                 mov     eax, [ebp+arg_0]
.text:004117F6                 mov     [esp], eax
.text:004117F9                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_S_keyEPKSt13_Rb_tree_nodeIiE ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_key(std::_Rb_tree_node<int> const*)
.text:004117FE                 mov     edx, eax
.text:00411800                 mov     eax, [ebp+var_1C]
.text:00411803                 mov     ecx, [ebp+arg_8]
.text:00411806                 mov     [esp+4], ecx
.text:0041180A                 mov     [esp], edx
.text:0041180D                 mov     ecx, eax
.text:0041180F                 call    __ZNKSt4lessIiEclERKiS2_ ; std::less<int>::operator()(int const&,int const&)
.text:00411814                 sub     esp, 8
.text:00411817                 xor     eax, 1
.text:0041181A                 test    al, al
.text:0041181C                 jz      short loc_411834
.text:0041181E                 mov     eax, [ebp+arg_0]
.text:00411821                 mov     [ebp+arg_4], eax
.text:00411824                 mov     eax, [ebp+arg_0]
.text:00411827                 mov     [esp], eax
.text:0041182A                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_S_leftEPSt18_Rb_tree_node_base ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_left(std::_Rb_tree_node_base *)
.text:0041182F                 mov     [ebp+arg_0], eax
.text:00411832                 jmp     short loc_411842
.text:00411834 ; ---------------------------------------------------------------------------
.text:00411834
.text:00411834 loc_411834:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_lower_bound(std::_Rb_tree_node<int> *,std::_Rb_tree_node<int> *,int const&)+34↑j
.text:00411834                 mov     eax, [ebp+arg_0]
.text:00411837                 mov     [esp], eax
.text:0041183A                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_rightEPSt18_Rb_tree_node_base ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_right(std::_Rb_tree_node_base *)
.text:0041183F                 mov     [ebp+arg_0], eax
.text:00411842
.text:00411842 loc_411842:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_lower_bound(std::_Rb_tree_node<int> *,std::_Rb_tree_node<int> *,int const&)+9↑j
.text:00411842                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_lower_bound(std::_Rb_tree_node<int> *,std::_Rb_tree_node<int> *,int const&)+4A↑j
.text:00411842                 cmp     [ebp+arg_0], 0
.text:00411846                 setnz   al
.text:00411849                 test    al, al
.text:0041184B                 jnz     short loc_4117F3
.text:0041184D                 lea     eax, [ebp+var_C]
.text:00411850                 mov     edx, [ebp+arg_4]
.text:00411853                 mov     [esp], edx
.text:00411856                 mov     ecx, eax
.text:00411858                 call    __ZNSt17_Rb_tree_iteratorIiEC1EPSt13_Rb_tree_nodeIiE ; std::_Rb_tree_iterator<int>::_Rb_tree_iterator(std::_Rb_tree_node<int> *)
.text:0041185D                 sub     esp, 4
.text:00411860                 mov     eax, [ebp+var_C]
.text:00411863                 leave
.text:00411864                 retn    0Ch
.text:00411864 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_lower_boundEPSt13_Rb_tree_nodeIiES8_RKi endp
.text:00411864
.text:00411864 ; ---------------------------------------------------------------------------
.text:00411867                 align 4
.text:00411868
.text:00411868 ; =============== S U B R O U T I N E =======================================
.text:00411868
.text:00411868 ; Attributes: bp-based frame
.text:00411868
.text:00411868 ; int __stdcall std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_destroy_node(void *)
.text:00411868                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE15_M_destroy_nodeEPSt13_Rb_tree_nodeIiE
.text:00411868 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE15_M_destroy_nodeEPSt13_Rb_tree_nodeIiE proc near
.text:00411868                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_erase(std::_Rb_tree_node<int> *)+3F↓p
.text:00411868
.text:00411868 var_1C          = dword ptr -1Ch
.text:00411868 var_9           = byte ptr -9
.text:00411868 var_4           = dword ptr -4
.text:00411868 arg_0           = dword ptr  8
.text:00411868
.text:00411868                 push    ebp
.text:00411869                 mov     ebp, esp
.text:0041186B                 push    ebx
.text:0041186C                 sub     esp, 34h
.text:0041186F                 mov     [ebp+var_1C], ecx
.text:00411872                 mov     eax, [ebp+arg_0]
.text:00411875                 add     eax, 10h
.text:00411878                 mov     [esp], eax
.text:0041187B                 call    __ZSt11__addressofIiEPT_RS0_ ; std::__addressof<int>(int&)
.text:00411880                 mov     ebx, eax
.text:00411882                 lea     eax, [ebp+var_9]
.text:00411885                 mov     edx, [ebp+var_1C]
.text:00411888                 mov     [esp], edx
.text:0041188B                 mov     ecx, eax
.text:0041188D                 call    __ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13get_allocatorEv ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::get_allocator(void)
.text:00411892                 sub     esp, 4
.text:00411895                 lea     eax, [ebp+var_9]
.text:00411898                 mov     [esp], ebx
.text:0041189B                 mov     ecx, eax
.text:0041189D                 call    __ZN9__gnu_cxx13new_allocatorIiE7destroyEPi ; __gnu_cxx::new_allocator<int>::destroy(int *)
.text:004118A2                 sub     esp, 4
.text:004118A5                 lea     eax, [ebp+var_9]
.text:004118A8                 mov     ecx, eax
.text:004118AA                 call    __ZNSaIiED1Ev   ; std::allocator<int>::~allocator()
.text:004118AF                 mov     eax, [ebp+var_1C]
.text:004118B2                 mov     edx, [ebp+arg_0]
.text:004118B5                 mov     [esp], edx      ; void *
.text:004118B8                 mov     ecx, eax
.text:004118BA                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_M_put_nodeEPSt13_Rb_tree_nodeIiE ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_put_node(std::_Rb_tree_node<int> *)
.text:004118BF                 sub     esp, 4
.text:004118C2                 mov     ebx, [ebp+var_4]
.text:004118C5                 leave
.text:004118C6                 retn    4
.text:004118C6 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE15_M_destroy_nodeEPSt13_Rb_tree_nodeIiE endp
.text:004118C6
.text:004118C6 ; ---------------------------------------------------------------------------
.text:004118C9                 align 4
.text:004118CC
.text:004118CC ; =============== S U B R O U T I N E =======================================
.text:004118CC
.text:004118CC ; Attributes: bp-based frame
.text:004118CC
.text:004118CC ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_M_insert_unique(int const&)
.text:004118CC                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueERKi
.text:004118CC __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueERKi proc near
.text:004118CC                                         ; CODE XREF: std::set<int,std::less<int>,std::allocator<int>>::insert(int const&)+4A↑p
.text:004118CC
.text:004118CC var_B0          = dword ptr -0B0h
.text:004118CC var_AC          = dword ptr -0ACh
.text:004118CC var_A8          = dword ptr -0A8h
.text:004118CC var_A4          = dword ptr -0A4h
.text:004118CC fctx            = SjLj_Function_Context ptr -0A0h
.text:004118CC var_6C          = dword ptr -6Ch
.text:004118CC var_5C          = dword ptr -5Ch
.text:004118CC var_55          = byte ptr -55h
.text:004118CC var_54          = dword ptr -54h
.text:004118CC var_50          = dword ptr -50h
.text:004118CC var_4C          = dword ptr -4Ch
.text:004118CC var_45          = byte ptr -45h
.text:004118CC var_44          = dword ptr -44h
.text:004118CC var_3D          = byte ptr -3Dh
.text:004118CC var_3C          = dword ptr -3Ch
.text:004118CC var_38          = dword ptr -38h
.text:004118CC var_31          = byte ptr -31h
.text:004118CC var_30          = dword ptr -30h
.text:004118CC var_2C          = dword ptr -2Ch
.text:004118CC var_28          = dword ptr -28h
.text:004118CC var_22          = byte ptr -22h
.text:004118CC var_21          = byte ptr -21h
.text:004118CC var_20          = dword ptr -20h
.text:004118CC var_1C          = dword ptr -1Ch
.text:004118CC var_18          = byte ptr -18h
.text:004118CC arg_0           = dword ptr  8
.text:004118CC
.text:004118CC                 push    ebp
.text:004118CD                 mov     ebp, esp
.text:004118CF                 push    edi
.text:004118D0                 push    esi
.text:004118D1                 push    ebx
.text:004118D2                 sub     esp, 0BCh
.text:004118D8                 mov     [ebp+var_6C], ecx
.text:004118DB                 mov     [ebp+fctx.personality], offset ___gxx_personality_sj0
.text:004118E5                 mov     [ebp+fctx.lsda], offset word_412242
.text:004118EF                 lea     eax, [ebp+fctx.jbuf]
.text:004118F2                 lea     edx, [ebp+var_18]
.text:004118F5                 mov     [eax], edx
.text:004118F7                 mov     edx, offset loc_411B2F
.text:004118FC                 mov     [eax+4], edx
.text:004118FF                 mov     [eax+8], esp
.text:00411902                 lea     eax, [ebp+fctx]
.text:00411908                 mov     [esp], eax      ; lpfctx
.text:0041190B                 call    __Unwind_SjLj_Register
.text:00411910                 mov     eax, [ebp+var_6C]
.text:00411913                 mov     ecx, eax
.text:00411915                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_beginEv ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_begin(void)
.text:0041191A                 mov     [ebp+var_1C], eax
.text:0041191D                 mov     eax, [ebp+var_6C]
.text:00411920                 mov     ecx, eax
.text:00411922                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_M_endEv ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_end(void)
.text:00411927                 mov     [ebp+var_20], eax
.text:0041192A                 mov     [ebp+var_21], 1
.text:0041192E                 jmp     short loc_4119A2
.text:00411930 ; ---------------------------------------------------------------------------
.text:00411930
.text:00411930 loc_411930:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+DF↓j
.text:00411930                 mov     eax, [ebp+var_1C]
.text:00411933                 mov     [ebp+var_20], eax
.text:00411936                 mov     eax, [ebp+var_1C]
.text:00411939                 mov     [esp], eax
.text:0041193C                 mov     [ebp+fctx.call_site], 1
.text:00411946                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_S_keyEPKSt13_Rb_tree_nodeIiE ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_key(std::_Rb_tree_node<int> const*)
.text:0041194B                 mov     [ebp+var_A4], eax
.text:00411951                 lea     eax, [ebp+var_55]
.text:00411954                 mov     edx, [ebp+arg_0]
.text:00411957                 mov     [esp], edx
.text:0041195A                 mov     ecx, eax
.text:0041195C                 call    __ZNKSt9_IdentityIiEclERKi ; std::_Identity<int>::operator()(int const&)
.text:00411961                 sub     esp, 4
.text:00411964                 mov     edx, [ebp+var_6C]
.text:00411967                 mov     ecx, [ebp+var_A4]
.text:0041196D                 mov     [esp+4], ecx
.text:00411971                 mov     [esp], eax
.text:00411974                 mov     ecx, edx
.text:00411976                 call    __ZNKSt4lessIiEclERKiS2_ ; std::less<int>::operator()(int const&,int const&)
.text:0041197B                 sub     esp, 8
.text:0041197E                 mov     [ebp+var_21], al
.text:00411981                 cmp     [ebp+var_21], 0
.text:00411985                 jz      short loc_411994
.text:00411987                 mov     eax, [ebp+var_1C]
.text:0041198A                 mov     [esp], eax
.text:0041198D                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_S_leftEPSt18_Rb_tree_node_base ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_left(std::_Rb_tree_node_base *)
.text:00411992                 jmp     short loc_41199F
.text:00411994 ; ---------------------------------------------------------------------------
.text:00411994
.text:00411994 loc_411994:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+B9↑j
.text:00411994                 mov     eax, [ebp+var_1C]
.text:00411997                 mov     [esp], eax
.text:0041199A                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_rightEPSt18_Rb_tree_node_base ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_right(std::_Rb_tree_node_base *)
.text:0041199F
.text:0041199F loc_41199F:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+C6↑j
.text:0041199F                 mov     [ebp+var_1C], eax
.text:004119A2
.text:004119A2 loc_4119A2:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+62↑j
.text:004119A2                 cmp     [ebp+var_1C], 0
.text:004119A6                 setnz   al
.text:004119A9                 test    al, al
.text:004119AB                 jnz     short loc_411930
.text:004119AD                 lea     eax, [ebp+var_5C]
.text:004119B0                 mov     edx, [ebp+var_20]
.text:004119B3                 mov     [esp], edx
.text:004119B6                 mov     ecx, eax
.text:004119B8                 call    __ZNSt17_Rb_tree_iteratorIiEC1EPSt13_Rb_tree_nodeIiE ; std::_Rb_tree_iterator<int>::_Rb_tree_iterator(std::_Rb_tree_node<int> *)
.text:004119BD                 sub     esp, 4
.text:004119C0                 cmp     [ebp+var_21], 0
.text:004119C4                 jz      loc_411A4F
.text:004119CA                 mov     eax, [ebp+var_6C]
.text:004119CD                 mov     ecx, eax
.text:004119CF                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5beginEv ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::begin(void)
.text:004119D4                 mov     [ebp+var_54], eax
.text:004119D7                 lea     eax, [ebp+var_5C]
.text:004119DA                 lea     edx, [ebp+var_54]
.text:004119DD                 mov     [esp], edx
.text:004119E0                 mov     ecx, eax
.text:004119E2                 call    __ZNKSt17_Rb_tree_iteratorIiEeqERKS0_ ; std::_Rb_tree_iterator<int>::operator==(std::_Rb_tree_iterator<int> const&)
.text:004119E7                 sub     esp, 4
.text:004119EA                 test    al, al
.text:004119EC                 jz      short loc_411A45
.text:004119EE                 mov     [ebp+var_45], 1
.text:004119F2                 mov     eax, [ebp+var_6C]
.text:004119F5                 mov     edx, [ebp+arg_0]
.text:004119F8                 mov     [esp+8], edx
.text:004119FC                 mov     edx, [ebp+var_20]
.text:004119FF                 mov     [esp+4], edx
.text:00411A03                 mov     edx, [ebp+var_1C]
.text:00411A06                 mov     [esp], edx
.text:00411A09                 mov     [ebp+fctx.call_site], 2
.text:00411A13                 mov     ecx, eax
.text:00411A15                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE10_M_insert_EPKSt18_Rb_tree_node_baseS8_RKi ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*,int const&)
.text:00411A1A                 sub     esp, 0Ch
.text:00411A1D                 mov     [ebp+var_44], eax
.text:00411A20                 lea     eax, [ebp+var_50]
.text:00411A23                 lea     edx, [ebp+var_45]
.text:00411A26                 mov     [esp+4], edx
.text:00411A2A                 lea     edx, [ebp+var_44]
.text:00411A2D                 mov     [esp], edx
.text:00411A30                 mov     ecx, eax
.text:00411A32                 call    __ZNSt4pairISt17_Rb_tree_iteratorIiEbEC1ERKS1_RKb ; std::pair<std::_Rb_tree_iterator<int>,bool>::pair(std::_Rb_tree_iterator<int> const&,bool const&)
.text:00411A37                 sub     esp, 8
.text:00411A3A                 mov     eax, [ebp+var_50]
.text:00411A3D                 mov     edx, [ebp+var_4C]
.text:00411A40                 jmp     loc_411B15
.text:00411A45 ; ---------------------------------------------------------------------------
.text:00411A45
.text:00411A45 loc_411A45:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+120↑j
.text:00411A45                 lea     eax, [ebp+var_5C]
.text:00411A48                 mov     ecx, eax
.text:00411A4A                 call    __ZNSt17_Rb_tree_iteratorIiEmmEv ; std::_Rb_tree_iterator<int>::operator--(void)
.text:00411A4F
.text:00411A4F loc_411A4F:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+F8↑j
.text:00411A4F                 lea     eax, [ebp+var_3D]
.text:00411A52                 mov     edx, [ebp+arg_0]
.text:00411A55                 mov     [esp], edx
.text:00411A58                 mov     ecx, eax
.text:00411A5A                 call    __ZNKSt9_IdentityIiEclERKi ; std::_Identity<int>::operator()(int const&)
.text:00411A5F                 sub     esp, 4
.text:00411A62                 mov     [ebp+var_A8], eax
.text:00411A68                 mov     eax, [ebp+var_5C]
.text:00411A6B                 mov     [esp], eax
.text:00411A6E                 mov     [ebp+fctx.call_site], 3
.text:00411A78                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_S_keyEPKSt18_Rb_tree_node_base ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_key(std::_Rb_tree_node_base const*)
.text:00411A7D                 mov     edx, eax
.text:00411A7F                 mov     eax, [ebp+var_6C]
.text:00411A82                 mov     ecx, [ebp+var_A8]
.text:00411A88                 mov     [esp+4], ecx
.text:00411A8C                 mov     [esp], edx
.text:00411A8F                 mov     ecx, eax
.text:00411A91                 call    __ZNKSt4lessIiEclERKiS2_ ; std::less<int>::operator()(int const&,int const&)
.text:00411A96                 sub     esp, 8
.text:00411A99                 test    al, al
.text:00411A9B                 jz      short loc_411AF1
.text:00411A9D                 mov     [ebp+var_31], 1
.text:00411AA1                 mov     eax, [ebp+var_6C]
.text:00411AA4                 mov     edx, [ebp+arg_0]
.text:00411AA7                 mov     [esp+8], edx
.text:00411AAB                 mov     edx, [ebp+var_20]
.text:00411AAE                 mov     [esp+4], edx
.text:00411AB2                 mov     edx, [ebp+var_1C]
.text:00411AB5                 mov     [esp], edx
.text:00411AB8                 mov     [ebp+fctx.call_site], 4
.text:00411AC2                 mov     ecx, eax
.text:00411AC4                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE10_M_insert_EPKSt18_Rb_tree_node_baseS8_RKi ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*,int const&)
.text:00411AC9                 sub     esp, 0Ch
.text:00411ACC                 mov     [ebp+var_30], eax
.text:00411ACF                 lea     eax, [ebp+var_3C]
.text:00411AD2                 lea     edx, [ebp+var_31]
.text:00411AD5                 mov     [esp+4], edx
.text:00411AD9                 lea     edx, [ebp+var_30]
.text:00411ADC                 mov     [esp], edx
.text:00411ADF                 mov     ecx, eax
.text:00411AE1                 call    __ZNSt4pairISt17_Rb_tree_iteratorIiEbEC1ERKS1_RKb ; std::pair<std::_Rb_tree_iterator<int>,bool>::pair(std::_Rb_tree_iterator<int> const&,bool const&)
.text:00411AE6                 sub     esp, 8
.text:00411AE9                 mov     eax, [ebp+var_3C]
.text:00411AEC                 mov     edx, [ebp+var_38]
.text:00411AEF                 jmp     short loc_411B15
.text:00411AF1 ; ---------------------------------------------------------------------------
.text:00411AF1
.text:00411AF1 loc_411AF1:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+1CF↑j
.text:00411AF1                 mov     [ebp+var_22], 0
.text:00411AF5                 lea     eax, [ebp+var_2C]
.text:00411AF8                 lea     edx, [ebp+var_22]
.text:00411AFB                 mov     [esp+4], edx
.text:00411AFF                 lea     edx, [ebp+var_5C]
.text:00411B02                 mov     [esp], edx
.text:00411B05                 mov     ecx, eax
.text:00411B07                 call    __ZNSt4pairISt17_Rb_tree_iteratorIiEbEC1ERKS1_RKb ; std::pair<std::_Rb_tree_iterator<int>,bool>::pair(std::_Rb_tree_iterator<int> const&,bool const&)
.text:00411B0C                 sub     esp, 8
.text:00411B0F                 mov     eax, [ebp+var_2C]
.text:00411B12                 mov     edx, [ebp+var_28]
.text:00411B15
.text:00411B15 loc_411B15:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+174↑j
.text:00411B15                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+223↑j
.text:00411B15                 mov     [ebp+var_B0], eax
.text:00411B1B                 mov     [ebp+var_AC], edx
.text:00411B21                 jmp     short loc_411B6C
.text:00411B23 ; ---------------------------------------------------------------------------
.text:00411B23
.text:00411B23 loc_411B23:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+275↓j
.text:00411B23                 mov     eax, edx
.text:00411B25                 jmp     short loc_411B5A
.text:00411B27 ; ---------------------------------------------------------------------------
.text:00411B27
.text:00411B27 loc_411B27:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+283↓j
.text:00411B27                 mov     eax, edx
.text:00411B29                 jmp     short loc_411B5A
.text:00411B2B ; ---------------------------------------------------------------------------
.text:00411B2B
.text:00411B2B loc_411B2B:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+288↓j
.text:00411B2B                 mov     eax, edx
.text:00411B2D                 jmp     short loc_411B5A
.text:00411B2F ; ---------------------------------------------------------------------------
.text:00411B2F
.text:00411B2F loc_411B2F:                             ; DATA XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+2B↑o
.text:00411B2F                 lea     ebp, [ebp+18h]
.text:00411B32                 mov     edx, [ebp+fctx.data]
.text:00411B38                 mov     eax, [ebp+fctx.call_site]
.text:00411B3E                 cmp     eax, 1
.text:00411B41                 jz      short loc_411B23
.text:00411B43                 cmp     eax, 1
.text:00411B46                 jg      short loc_411B4C
.text:00411B48                 test    eax, eax
.text:00411B4A                 jz      short loc_411B58
.text:00411B4C
.text:00411B4C loc_411B4C:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+27A↑j
.text:00411B4C                 cmp     eax, 2
.text:00411B4F                 jz      short loc_411B27
.text:00411B51                 cmp     eax, 3
.text:00411B54                 jz      short loc_411B2B
.text:00411B56                 ud2
.text:00411B58 ; ---------------------------------------------------------------------------
.text:00411B58
.text:00411B58 loc_411B58:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+27E↑j
.text:00411B58                 mov     eax, edx
.text:00411B5A
.text:00411B5A loc_411B5A:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+259↑j
.text:00411B5A                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+25D↑j ...
.text:00411B5A                 mov     [esp], eax      ; lpuexcpt
.text:00411B5D                 mov     [ebp+fctx.call_site], 0FFFFFFFFh
.text:00411B67                 call    __Unwind_SjLj_Resume
.text:00411B6C ; ---------------------------------------------------------------------------
.text:00411B6C
.text:00411B6C loc_411B6C:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+255↑j
.text:00411B6C                 lea     eax, [ebp+fctx]
.text:00411B72                 mov     [esp], eax      ; lpfctx
.text:00411B75                 call    __Unwind_SjLj_Unregister
.text:00411B7A                 mov     eax, [ebp+var_B0]
.text:00411B80                 mov     edx, [ebp+var_AC]
.text:00411B86                 lea     esp, [ebp-0Ch]
.text:00411B89                 pop     ebx
.text:00411B8A                 pop     esi
.text:00411B8B                 pop     edi
.text:00411B8C                 pop     ebp
.text:00411B8D                 retn    4
.text:00411B8D __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueERKi endp
.text:00411B8D
.text:00411B90
.text:00411B90 ; =============== S U B R O U T I N E =======================================
.text:00411B90
.text:00411B90 ; Attributes: bp-based frame
.text:00411B90
.text:00411B90 ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::end(void)
.text:00411B90                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE3endEv
.text:00411B90 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE3endEv proc near
.text:00411B90                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::find(int const&)+87↓p
.text:00411B90                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::find(int const&)+DE↓p
.text:00411B90
.text:00411B90 var_1C          = dword ptr -1Ch
.text:00411B90 var_C           = dword ptr -0Ch
.text:00411B90
.text:00411B90                 push    ebp
.text:00411B91                 mov     ebp, esp
.text:00411B93                 sub     esp, 38h
.text:00411B96                 mov     [ebp+var_1C], ecx
.text:00411B99                 mov     eax, [ebp+var_1C]
.text:00411B9C                 lea     edx, [eax+4]
.text:00411B9F                 lea     eax, [ebp+var_C]
.text:00411BA2                 mov     [esp], edx
.text:00411BA5                 mov     ecx, eax
.text:00411BA7                 call    __ZNSt17_Rb_tree_iteratorIiEC1EPSt13_Rb_tree_nodeIiE ; std::_Rb_tree_iterator<int>::_Rb_tree_iterator(std::_Rb_tree_node<int> *)
.text:00411BAC                 sub     esp, 4
.text:00411BAF                 mov     eax, [ebp+var_C]
.text:00411BB2                 leave
.text:00411BB3                 retn
.text:00411BB3 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE3endEv endp
.text:00411BB3
.text:00411BB4
.text:00411BB4 ; =============== S U B R O U T I N E =======================================
.text:00411BB4
.text:00411BB4 ; Attributes: bp-based frame
.text:00411BB4
.text:00411BB4 ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::find(int const&)
.text:00411BB4                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE4findERKi
.text:00411BB4 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE4findERKi proc near
.text:00411BB4                                         ; CODE XREF: std::set<int,std::less<int>,std::allocator<int>>::find(int const&)+14↑p
.text:00411BB4
.text:00411BB4 var_6C          = dword ptr -6Ch
.text:00411BB4 var_68          = dword ptr -68h
.text:00411BB4 var_61          = byte ptr -61h
.text:00411BB4 fctx            = SjLj_Function_Context ptr -60h
.text:00411BB4 var_2C          = dword ptr -2Ch
.text:00411BB4 var_20          = dword ptr -20h
.text:00411BB4 var_1C          = dword ptr -1Ch
.text:00411BB4 var_18          = byte ptr -18h
.text:00411BB4 arg_0           = dword ptr  8
.text:00411BB4
.text:00411BB4                 push    ebp
.text:00411BB5                 mov     ebp, esp
.text:00411BB7                 push    edi
.text:00411BB8                 push    esi
.text:00411BB9                 push    ebx
.text:00411BBA                 sub     esp, 7Ch
.text:00411BBD                 mov     [ebp+var_2C], ecx
.text:00411BC0                 mov     [ebp+fctx.personality], offset ___gxx_personality_sj0
.text:00411BC7                 mov     [ebp+fctx.lsda], offset word_41223A
.text:00411BCE                 lea     eax, [ebp+fctx.jbuf]
.text:00411BD1                 lea     edx, [ebp+var_18]
.text:00411BD4                 mov     [eax], edx
.text:00411BD6                 mov     edx, offset loc_411CAD
.text:00411BDB                 mov     [eax+4], edx
.text:00411BDE                 mov     [eax+8], esp
.text:00411BE1                 lea     eax, [ebp+fctx]
.text:00411BE4                 mov     [esp], eax      ; lpfctx
.text:00411BE7                 call    __Unwind_SjLj_Register
.text:00411BEC                 mov     eax, [ebp+var_2C]
.text:00411BEF                 mov     ecx, eax
.text:00411BF1                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_M_endEv ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_end(void)
.text:00411BF6                 mov     [ebp+var_68], eax
.text:00411BF9                 mov     eax, [ebp+var_2C]
.text:00411BFC                 mov     ecx, eax
.text:00411BFE                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_beginEv ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_begin(void)
.text:00411C03                 mov     edx, [ebp+var_2C]
.text:00411C06                 mov     ecx, [ebp+arg_0]
.text:00411C09                 mov     [esp+8], ecx
.text:00411C0D                 mov     ecx, [ebp+var_68]
.text:00411C10                 mov     [esp+4], ecx
.text:00411C14                 mov     [esp], eax
.text:00411C17                 mov     [ebp+fctx.call_site], 1
.text:00411C1E                 mov     ecx, edx
.text:00411C20                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_lower_boundEPSt13_Rb_tree_nodeIiES8_RKi ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_lower_bound(std::_Rb_tree_node<int> *,std::_Rb_tree_node<int> *,int const&)
.text:00411C25                 sub     esp, 0Ch
.text:00411C28                 mov     [ebp+var_20], eax
.text:00411C2B                 mov     [ebp+var_61], 0
.text:00411C2F                 mov     eax, [ebp+var_2C]
.text:00411C32                 mov     [ebp+fctx.call_site], 2
.text:00411C39                 mov     ecx, eax
.text:00411C3B                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE3endEv ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::end(void)
.text:00411C40                 mov     [ebp+var_1C], eax
.text:00411C43                 mov     [ebp+var_61], 1
.text:00411C47                 lea     eax, [ebp+var_20]
.text:00411C4A                 lea     edx, [ebp+var_1C]
.text:00411C4D                 mov     [esp], edx
.text:00411C50                 mov     ecx, eax
.text:00411C52                 call    __ZNKSt17_Rb_tree_iteratorIiEeqERKS0_ ; std::_Rb_tree_iterator<int>::operator==(std::_Rb_tree_iterator<int> const&)
.text:00411C57                 sub     esp, 4
.text:00411C5A                 test    al, al
.text:00411C5C                 jnz     short loc_411C86
.text:00411C5E                 mov     eax, [ebp+var_20]
.text:00411C61                 mov     [esp], eax
.text:00411C64                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_S_keyEPKSt18_Rb_tree_node_base ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_key(std::_Rb_tree_node_base const*)
.text:00411C69                 mov     edx, eax
.text:00411C6B                 mov     eax, [ebp+var_2C]
.text:00411C6E                 mov     [esp+4], edx
.text:00411C72                 mov     edx, [ebp+arg_0]
.text:00411C75                 mov     [esp], edx
.text:00411C78                 mov     ecx, eax
.text:00411C7A                 call    __ZNKSt4lessIiEclERKiS2_ ; std::less<int>::operator()(int const&,int const&)
.text:00411C7F                 sub     esp, 8
.text:00411C82                 test    al, al
.text:00411C84                 jz      short loc_411C99
.text:00411C86
.text:00411C86 loc_411C86:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::find(int const&)+A8↑j
.text:00411C86                 mov     eax, [ebp+var_2C]
.text:00411C89                 mov     [ebp+fctx.call_site], 2
.text:00411C90                 mov     ecx, eax
.text:00411C92                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE3endEv ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::end(void)
.text:00411C97                 jmp     short loc_411C9C
.text:00411C99 ; ---------------------------------------------------------------------------
.text:00411C99
.text:00411C99 loc_411C99:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::find(int const&)+D0↑j
.text:00411C99                 mov     eax, [ebp+var_20]
.text:00411C9C
.text:00411C9C loc_411C9C:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::find(int const&)+E3↑j
.text:00411C9C                 cmp     [ebp+var_61], 0
.text:00411CA0                 mov     [ebp+var_6C], eax
.text:00411CA3                 jmp     short loc_411CD2
.text:00411CA5 ; ---------------------------------------------------------------------------
.text:00411CA5
.text:00411CA5 loc_411CA5:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::find(int const&)+109↓j
.text:00411CA5                 mov     eax, edx
.text:00411CA7                 cmp     [ebp+var_61], 0
.text:00411CAB                 jmp     short loc_411CC3
.text:00411CAD ; ---------------------------------------------------------------------------
.text:00411CAD
.text:00411CAD loc_411CAD:                             ; DATA XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::find(int const&)+22↑o
.text:00411CAD                 lea     ebp, [ebp+18h]
.text:00411CB0                 mov     edx, [ebp+fctx.data]
.text:00411CB3                 mov     eax, [ebp+fctx.call_site]
.text:00411CB6                 test    eax, eax
.text:00411CB8                 jz      short loc_411CC1
.text:00411CBA                 cmp     eax, 1
.text:00411CBD                 jz      short loc_411CA5
.text:00411CBF                 ud2
.text:00411CC1 ; ---------------------------------------------------------------------------
.text:00411CC1
.text:00411CC1 loc_411CC1:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::find(int const&)+104↑j
.text:00411CC1                 mov     eax, edx
.text:00411CC3
.text:00411CC3 loc_411CC3:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::find(int const&)+F7↑j
.text:00411CC3                 mov     [esp], eax      ; lpuexcpt
.text:00411CC6                 mov     [ebp+fctx.call_site], 0FFFFFFFFh
.text:00411CCD                 call    __Unwind_SjLj_Resume
.text:00411CD2 ; ---------------------------------------------------------------------------
.text:00411CD2
.text:00411CD2 loc_411CD2:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::find(int const&)+EF↑j
.text:00411CD2                 lea     eax, [ebp+fctx]
.text:00411CD5                 mov     [esp], eax      ; lpfctx
.text:00411CD8                 call    __Unwind_SjLj_Unregister
.text:00411CDD                 mov     eax, [ebp+var_6C]
.text:00411CE0                 lea     esp, [ebp-0Ch]
.text:00411CE3                 pop     ebx
.text:00411CE4                 pop     esi
.text:00411CE5                 pop     edi
.text:00411CE6                 pop     ebp
.text:00411CE7                 retn    4
.text:00411CE7 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE4findERKi endp
.text:00411CE7
.text:00411CE7 ; ---------------------------------------------------------------------------
.text:00411CEA                 align 4
.text:00411CEC
.text:00411CEC ; =============== S U B R O U T I N E =======================================
.text:00411CEC
.text:00411CEC ; Attributes: bp-based frame
.text:00411CEC
.text:00411CEC ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::begin(void)
.text:00411CEC                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5beginEv
.text:00411CEC __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5beginEv proc near
.text:00411CEC                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+103↑p
.text:00411CEC
.text:00411CEC var_14          = dword ptr -14h
.text:00411CEC var_4           = dword ptr -4
.text:00411CEC
.text:00411CEC                 push    ebp
.text:00411CED                 mov     ebp, esp
.text:00411CEF                 sub     esp, 18h
.text:00411CF2                 mov     [ebp+var_14], ecx
.text:00411CF5                 mov     eax, [ebp+var_14]
.text:00411CF8                 mov     edx, [eax+0Ch]
.text:00411CFB                 lea     eax, [ebp+var_4]
.text:00411CFE                 mov     [esp], edx
.text:00411D01                 mov     ecx, eax
.text:00411D03                 call    __ZNSt17_Rb_tree_iteratorIiEC1EPSt13_Rb_tree_nodeIiE ; std::_Rb_tree_iterator<int>::_Rb_tree_iterator(std::_Rb_tree_node<int> *)
.text:00411D08                 sub     esp, 4
.text:00411D0B                 mov     eax, [ebp+var_4]
.text:00411D0E                 leave
.text:00411D0F                 retn
.text:00411D0F __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5beginEv endp
.text:00411D0F
.text:00411D10
.text:00411D10 ; =============== S U B R O U T I N E =======================================
.text:00411D10
.text:00411D10 ; Attributes: bp-based frame
.text:00411D10
.text:00411D10 ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_M_end(void)
.text:00411D10                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_M_endEv
.text:00411D10 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_M_endEv proc near
.text:00411D10                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*,int const&)+18↑p
.text:00411D10                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+56↑p ...
.text:00411D10
.text:00411D10 var_4           = dword ptr -4
.text:00411D10
.text:00411D10                 push    ebp
.text:00411D11                 mov     ebp, esp
.text:00411D13                 sub     esp, 4
.text:00411D16                 mov     [ebp+var_4], ecx
.text:00411D19                 mov     eax, [ebp+var_4]
.text:00411D1C                 add     eax, 4
.text:00411D1F                 leave
.text:00411D20                 retn
.text:00411D20 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_M_endEv endp
.text:00411D20
.text:00411D20 ; ---------------------------------------------------------------------------
.text:00411D21                 align 4
.text:00411D24
.text:00411D24 ; =============== S U B R O U T I N E =======================================
.text:00411D24
.text:00411D24 ; Attributes: bp-based frame
.text:00411D24
.text:00411D24 ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_S_key(std::_Rb_tree_node<int> const*)
.text:00411D24                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_S_keyEPKSt13_Rb_tree_nodeIiE
.text:00411D24 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_S_keyEPKSt13_Rb_tree_nodeIiE proc near
.text:00411D24                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_lower_bound(std::_Rb_tree_node<int> *,std::_Rb_tree_node<int> *,int const&)+11↑p
.text:00411D24                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+7A↑p
.text:00411D24
.text:00411D24 var_9           = byte ptr -9
.text:00411D24 arg_0           = dword ptr  8
.text:00411D24
.text:00411D24                 push    ebp
.text:00411D25                 mov     ebp, esp
.text:00411D27                 sub     esp, 28h
.text:00411D2A                 mov     eax, [ebp+arg_0]
.text:00411D2D                 mov     [esp], eax
.text:00411D30                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_valueEPKSt13_Rb_tree_nodeIiE ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_value(std::_Rb_tree_node<int> const*)
.text:00411D35                 lea     edx, [ebp+var_9]
.text:00411D38                 mov     [esp], eax
.text:00411D3B                 mov     ecx, edx
.text:00411D3D                 call    __ZNKSt9_IdentityIiEclERKi ; std::_Identity<int>::operator()(int const&)
.text:00411D42                 sub     esp, 4
.text:00411D45                 leave
.text:00411D46                 retn
.text:00411D46 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_S_keyEPKSt13_Rb_tree_nodeIiE endp
.text:00411D46
.text:00411D46 ; ---------------------------------------------------------------------------
.text:00411D47                 align 4
.text:00411D48
.text:00411D48 ; =============== S U B R O U T I N E =======================================
.text:00411D48
.text:00411D48 ; Attributes: bp-based frame
.text:00411D48
.text:00411D48 ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_S_key(std::_Rb_tree_node_base const*)
.text:00411D48                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_S_keyEPKSt18_Rb_tree_node_base
.text:00411D48 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_S_keyEPKSt18_Rb_tree_node_base proc near
.text:00411D48                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_(std::_Rb_tree_node_base const*,std::_Rb_tree_node_base const*,int const&)+28↑p
.text:00411D48                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+1AC↑p ...
.text:00411D48
.text:00411D48 var_9           = byte ptr -9
.text:00411D48 arg_0           = dword ptr  8
.text:00411D48
.text:00411D48                 push    ebp
.text:00411D49                 mov     ebp, esp
.text:00411D4B                 sub     esp, 28h
.text:00411D4E                 mov     eax, [ebp+arg_0]
.text:00411D51                 mov     [esp], eax
.text:00411D54                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_valueEPKSt18_Rb_tree_node_base ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_value(std::_Rb_tree_node_base const*)
.text:00411D59                 lea     edx, [ebp+var_9]
.text:00411D5C                 mov     [esp], eax
.text:00411D5F                 mov     ecx, edx
.text:00411D61                 call    __ZNKSt9_IdentityIiEclERKi ; std::_Identity<int>::operator()(int const&)
.text:00411D66                 sub     esp, 4
.text:00411D69                 leave
.text:00411D6A                 retn
.text:00411D6A __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_S_keyEPKSt18_Rb_tree_node_base endp
.text:00411D6A
.text:00411D6A ; ---------------------------------------------------------------------------
.text:00411D6B                 align 4
.text:00411D6C
.text:00411D6C ; =============== S U B R O U T I N E =======================================
.text:00411D6C
.text:00411D6C ; Attributes: bp-based frame
.text:00411D6C
.text:00411D6C ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_S_left(std::_Rb_tree_node_base *)
.text:00411D6C                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_S_leftEPSt18_Rb_tree_node_base
.text:00411D6C __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_S_leftEPSt18_Rb_tree_node_base proc near
.text:00411D6C                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_lower_bound(std::_Rb_tree_node<int> *,std::_Rb_tree_node<int> *,int const&)+42↑p
.text:00411D6C                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+C1↑p ...
.text:00411D6C
.text:00411D6C arg_0           = dword ptr  8
.text:00411D6C
.text:00411D6C                 push    ebp
.text:00411D6D                 mov     ebp, esp
.text:00411D6F                 mov     eax, [ebp+arg_0]
.text:00411D72                 mov     eax, [eax+8]
.text:00411D75                 pop     ebp
.text:00411D76                 retn
.text:00411D76 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_S_leftEPSt18_Rb_tree_node_base endp
.text:00411D76
.text:00411D76 ; ---------------------------------------------------------------------------
.text:00411D77                 align 4
.text:00411D78
.text:00411D78 ; =============== S U B R O U T I N E =======================================
.text:00411D78
.text:00411D78 ; Attributes: bp-based frame
.text:00411D78
.text:00411D78 ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_M_begin(void)
.text:00411D78                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_beginEv
.text:00411D78 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_beginEv proc near
.text:00411D78                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+49↑p
.text:00411D78                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::find(int const&)+4A↑p ...
.text:00411D78
.text:00411D78 var_4           = dword ptr -4
.text:00411D78
.text:00411D78                 push    ebp
.text:00411D79                 mov     ebp, esp
.text:00411D7B                 sub     esp, 4
.text:00411D7E                 mov     [ebp+var_4], ecx
.text:00411D81                 mov     eax, [ebp+var_4]
.text:00411D84                 mov     eax, [eax+8]
.text:00411D87                 leave
.text:00411D88                 retn
.text:00411D88 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_beginEv endp
.text:00411D88
.text:00411D88 ; ---------------------------------------------------------------------------
.text:00411D89                 align 4
.text:00411D8C
.text:00411D8C ; =============== S U B R O U T I N E =======================================
.text:00411D8C
.text:00411D8C ; Attributes: bp-based frame
.text:00411D8C
.text:00411D8C ; int __stdcall std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_erase(void *)
.text:00411D8C                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE
.text:00411D8C __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE proc near
.text:00411D8C                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_erase(std::_Rb_tree_node<int> *)+1E↓p
.text:00411D8C                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::~_Rb_tree()+51↓p
.text:00411D8C
.text:00411D8C var_1C          = dword ptr -1Ch
.text:00411D8C var_C           = dword ptr -0Ch
.text:00411D8C arg_0           = dword ptr  8
.text:00411D8C
.text:00411D8C                 push    ebp
.text:00411D8D                 mov     ebp, esp
.text:00411D8F                 sub     esp, 38h
.text:00411D92                 mov     [ebp+var_1C], ecx
.text:00411D95                 jmp     short loc_411DD9
.text:00411D97 ; ---------------------------------------------------------------------------
.text:00411D97
.text:00411D97 loc_411D97:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_erase(std::_Rb_tree_node<int> *)+56↓j
.text:00411D97                 mov     eax, [ebp+arg_0]
.text:00411D9A                 mov     [esp], eax
.text:00411D9D                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_rightEPSt18_Rb_tree_node_base ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_right(std::_Rb_tree_node_base *)
.text:00411DA2                 mov     edx, [ebp+var_1C]
.text:00411DA5                 mov     [esp], eax      ; void *
.text:00411DA8                 mov     ecx, edx
.text:00411DAA                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_erase(std::_Rb_tree_node<int> *)
.text:00411DAF                 sub     esp, 4
.text:00411DB2                 mov     eax, [ebp+arg_0]
.text:00411DB5                 mov     [esp], eax
.text:00411DB8                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_S_leftEPSt18_Rb_tree_node_base ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_left(std::_Rb_tree_node_base *)
.text:00411DBD                 mov     [ebp+var_C], eax
.text:00411DC0                 mov     eax, [ebp+var_1C]
.text:00411DC3                 mov     edx, [ebp+arg_0]
.text:00411DC6                 mov     [esp], edx      ; void *
.text:00411DC9                 mov     ecx, eax
.text:00411DCB                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE15_M_destroy_nodeEPSt13_Rb_tree_nodeIiE ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_destroy_node(std::_Rb_tree_node<int> *)
.text:00411DD0                 sub     esp, 4
.text:00411DD3                 mov     eax, [ebp+var_C]
.text:00411DD6                 mov     [ebp+arg_0], eax
.text:00411DD9
.text:00411DD9 loc_411DD9:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_erase(std::_Rb_tree_node<int> *)+9↑j
.text:00411DD9                 cmp     [ebp+arg_0], 0
.text:00411DDD                 setnz   al
.text:00411DE0                 test    al, al
.text:00411DE2                 jnz     short loc_411D97
.text:00411DE4                 leave
.text:00411DE5                 retn    4
.text:00411DE5 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE endp
.text:00411DE5
.text:00411DE8
.text:00411DE8 ; =============== S U B R O U T I N E =======================================
.text:00411DE8
.text:00411DE8 ; Attributes: bp-based frame
.text:00411DE8
.text:00411DE8 ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_S_right(std::_Rb_tree_node_base *)
.text:00411DE8                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_rightEPSt18_Rb_tree_node_base
.text:00411DE8 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_rightEPSt18_Rb_tree_node_base proc near
.text:00411DE8                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_lower_bound(std::_Rb_tree_node<int> *,std::_Rb_tree_node<int> *,int const&)+52↑p
.text:00411DE8                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+CE↑p ...
.text:00411DE8
.text:00411DE8 arg_0           = dword ptr  8
.text:00411DE8
.text:00411DE8                 push    ebp
.text:00411DE9                 mov     ebp, esp
.text:00411DEB                 mov     eax, [ebp+arg_0]
.text:00411DEE                 mov     eax, [eax+0Ch]
.text:00411DF1                 pop     ebp
.text:00411DF2                 retn
.text:00411DF2 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_rightEPSt18_Rb_tree_node_base endp
.text:00411DF2
.text:00411DF2 ; ---------------------------------------------------------------------------
.text:00411DF3                 align 4
.text:00411DF4
.text:00411DF4 ; =============== S U B R O U T I N E =======================================
.text:00411DF4
.text:00411DF4 ; Attributes: bp-based frame
.text:00411DF4
.text:00411DF4 ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_S_value(std::_Rb_tree_node<int> const*)
.text:00411DF4                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_valueEPKSt13_Rb_tree_nodeIiE
.text:00411DF4 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_valueEPKSt13_Rb_tree_nodeIiE proc near
.text:00411DF4                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_key(std::_Rb_tree_node<int> const*)+C↑p
.text:00411DF4
.text:00411DF4 arg_0           = dword ptr  8
.text:00411DF4
.text:00411DF4                 push    ebp
.text:00411DF5                 mov     ebp, esp
.text:00411DF7                 mov     eax, [ebp+arg_0]
.text:00411DFA                 add     eax, 10h
.text:00411DFD                 pop     ebp
.text:00411DFE                 retn
.text:00411DFE __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_valueEPKSt13_Rb_tree_nodeIiE endp
.text:00411DFE
.text:00411DFE ; ---------------------------------------------------------------------------
.text:00411DFF                 align 10h
.text:00411E00
.text:00411E00 ; =============== S U B R O U T I N E =======================================
.text:00411E00
.text:00411E00 ; Attributes: bp-based frame
.text:00411E00
.text:00411E00 ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_S_value(std::_Rb_tree_node_base const*)
.text:00411E00                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_valueEPKSt18_Rb_tree_node_base
.text:00411E00 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_valueEPKSt18_Rb_tree_node_base proc near
.text:00411E00                                         ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_key(std::_Rb_tree_node_base const*)+C↑p
.text:00411E00
.text:00411E00 arg_0           = dword ptr  8
.text:00411E00
.text:00411E00                 push    ebp
.text:00411E01                 mov     ebp, esp
.text:00411E03                 mov     eax, [ebp+arg_0]
.text:00411E06                 add     eax, 10h
.text:00411E09                 pop     ebp
.text:00411E0A                 retn
.text:00411E0A __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_valueEPKSt18_Rb_tree_node_base endp
.text:00411E0A
.text:00411E0A ; ---------------------------------------------------------------------------
.text:00411E0B                 align 4
.text:00411E0C
.text:00411E0C ; =============== S U B R O U T I N E =======================================
.text:00411E0C
.text:00411E0C ; Attributes: bp-based frame
.text:00411E0C
.text:00411E0C ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::_Rb_tree(void)
.text:00411E0C                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEEC1Ev
.text:00411E0C __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEEC1Ev proc near
.text:00411E0C                                         ; CODE XREF: std::set<int,std::less<int>,std::allocator<int>>::set(void)+E↑p
.text:00411E0C
.text:00411E0C var_C           = dword ptr -0Ch
.text:00411E0C
.text:00411E0C                 push    ebp
.text:00411E0D                 mov     ebp, esp
.text:00411E0F                 sub     esp, 18h
.text:00411E12                 mov     [ebp+var_C], ecx
.text:00411E15                 mov     eax, [ebp+var_C]
.text:00411E18                 mov     ecx, eax
.text:00411E1A                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb0EEC1Ev ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree_impl<std::less<int>,false>::_Rb_tree_impl(void)
.text:00411E1F                 leave
.text:00411E20                 retn
.text:00411E20 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEEC1Ev endp
.text:00411E20
.text:00411E20 ; ---------------------------------------------------------------------------
.text:00411E21                 align 4
.text:00411E24
.text:00411E24 ; =============== S U B R O U T I N E =======================================
.text:00411E24
.text:00411E24 ; Attributes: bp-based frame
.text:00411E24
.text:00411E24 ; std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int>>::~_Rb_tree()
.text:00411E24                 public __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEED1Ev
.text:00411E24 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEED1Ev proc near
.text:00411E24                                         ; CODE XREF: std::set<int,std::less<int>,std::allocator<int>>::~set()+E↑p
.text:00411E24
.text:00411E24 lpuexcpt        = dword ptr -54h
.text:00411E24 fctx            = SjLj_Function_Context ptr -50h
.text:00411E24 var_1C          = dword ptr -1Ch
.text:00411E24 var_18          = byte ptr -18h
.text:00411E24
.text:00411E24                 push    ebp
.text:00411E25                 mov     ebp, esp
.text:00411E27                 push    edi
.text:00411E28                 push    esi
.text:00411E29                 push    ebx
.text:00411E2A                 sub     esp, 5Ch
.text:00411E2D                 mov     [ebp+var_1C], ecx
.text:00411E30                 mov     [ebp+fctx.personality], offset ___gxx_personality_sj0
.text:00411E37                 mov     [ebp+fctx.lsda], offset word_41222E
.text:00411E3E                 lea     eax, [ebp+fctx.jbuf]
.text:00411E41                 lea     edx, [ebp+var_18]
.text:00411E44                 mov     [eax], edx
.text:00411E46                 mov     edx, offset loc_411E89
.text:00411E4B                 mov     [eax+4], edx
.text:00411E4E                 mov     [eax+8], esp
.text:00411E51                 lea     eax, [ebp+fctx]
.text:00411E54                 mov     [esp], eax      ; lpfctx
.text:00411E57                 call    __Unwind_SjLj_Register
.text:00411E5C                 mov     eax, [ebp+var_1C]
.text:00411E5F                 mov     ecx, eax
.text:00411E61                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_beginEv ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_begin(void)
.text:00411E66                 mov     edx, [ebp+var_1C]
.text:00411E69                 mov     [esp], eax      ; void *
.text:00411E6C                 mov     [ebp+fctx.call_site], 1
.text:00411E73                 mov     ecx, edx
.text:00411E75                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_erase(std::_Rb_tree_node<int> *)
.text:00411E7A                 sub     esp, 4
.text:00411E7D                 mov     eax, [ebp+var_1C]
.text:00411E80                 mov     ecx, eax
.text:00411E82                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb0EED1Ev ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree_impl<std::less<int>,false>::~_Rb_tree_impl()
.text:00411E87                 jmp     short loc_411EAE
.text:00411E89 ; ---------------------------------------------------------------------------
.text:00411E89
.text:00411E89 loc_411E89:                             ; DATA XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::~_Rb_tree()+22↑o
.text:00411E89                 lea     ebp, [ebp+18h]
.text:00411E8C                 mov     eax, [ebp+fctx.data]
.text:00411E8F                 mov     [ebp+lpuexcpt], eax
.text:00411E92                 mov     eax, [ebp+var_1C]
.text:00411E95                 mov     ecx, eax
.text:00411E97                 call    __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb0EED1Ev ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree_impl<std::less<int>,false>::~_Rb_tree_impl()
.text:00411E9C                 mov     eax, [ebp+lpuexcpt]
.text:00411E9F                 mov     [esp], eax      ; lpuexcpt
.text:00411EA2                 mov     [ebp+fctx.call_site], 0FFFFFFFFh
.text:00411EA9                 call    __Unwind_SjLj_Resume
.text:00411EAE ; ---------------------------------------------------------------------------
.text:00411EAE
.text:00411EAE loc_411EAE:                             ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::~_Rb_tree()+63↑j
.text:00411EAE                 lea     eax, [ebp+fctx]
.text:00411EB1                 mov     [esp], eax      ; lpfctx
.text:00411EB4                 call    __Unwind_SjLj_Unregister
.text:00411EB9                 lea     esp, [ebp-0Ch]
.text:00411EBC                 pop     ebx
.text:00411EBD                 pop     esi
.text:00411EBE                 pop     edi
.text:00411EBF                 pop     ebp
.text:00411EC0                 retn
.text:00411EC0 __ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEED1Ev endp
.text:00411EC0
.text:00411EC0 ; ---------------------------------------------------------------------------
.text:00411EC1                 align 4
.text:00411EC4
.text:00411EC4 ; =============== S U B R O U T I N E =======================================
.text:00411EC4
.text:00411EC4 ; Attributes: bp-based frame
.text:00411EC4
.text:00411EC4 ; int * std::__addressof<int>(int&)
.text:00411EC4                 public __ZSt11__addressofIiEPT_RS0_
.text:00411EC4 __ZSt11__addressofIiEPT_RS0_ proc near  ; CODE XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_create_node(int const&)+20↑p
.text:00411EC4                                         ; std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_destroy_node(std::_Rb_tree_node<int> *)+13↑p
.text:00411EC4
.text:00411EC4 arg_0           = dword ptr  8
.text:00411EC4
.text:00411EC4                 push    ebp
.text:00411EC5                 mov     ebp, esp
.text:00411EC7                 mov     eax, [ebp+arg_0]
.text:00411ECA                 pop     ebp
.text:00411ECB                 retn
.text:00411ECB __ZSt11__addressofIiEPT_RS0_ endp
.text:00411ECB
.text:00411ECC
.text:00411ECC ; =============== S U B R O U T I N E =======================================
.text:00411ECC
.text:00411ECC
.text:00411ECC ; int __cdecl std::operator+<char,std::char_traits<char>,std::allocator<char>>(int, std::string *, std::string *, int, int, struct _Unwind_Exception *lpuexcpt, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)
.text:00411ECC                 public __ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_
.text:00411ECC __ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_ proc near
.text:00411ECC
.text:00411ECC lpfctx          = dword ptr -6Ch
.text:00411ECC var_68          = dword ptr -68h
.text:00411ECC var_64          = dword ptr -64h
.text:00411ECC var_54          = dword ptr -54h
.text:00411ECC fctx            = SjLj_Function_Context ptr -50h
.text:00411ECC var_2C          = dword ptr -2Ch
.text:00411ECC var_28          = dword ptr -28h
.text:00411ECC var_D           = dword ptr -0Dh
.text:00411ECC arg_0           = dword ptr  4
.text:00411ECC arg_4           = dword ptr  8
.text:00411ECC arg_8           = dword ptr  0Ch
.text:00411ECC lpuexcpt        = dword ptr  18h
.text:00411ECC arg_1C          = dword ptr  20h
.text:00411ECC arg_20          = dword ptr  24h
.text:00411ECC arg_6C          = dword ptr  70h
.text:00411ECC
.text:00411ECC                 push    ebp
.text:00411ECD                 push    edi
.text:00411ECE                 sub     esp, 64h
.text:00411ED1                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00411ED9                 mov     [esp+6Ch+fctx.lsda], offset dword_4123CC
.text:00411EE1                 lea     eax, [esp+6Ch+var_D+1]
.text:00411EE5                 mov     [esp+6Ch+fctx.jbuf], eax
.text:00411EE9                 mov     [esp+6Ch+var_2C], offset loc_411FA3
.text:00411EF1                 mov     [esp+6Ch+var_28], esp
.text:00411EF5                 lea     edx, [esp+6Ch+fctx]
.text:00411EF9                 mov     [esp+6Ch+lpfctx], edx ; lpfctx
.text:00411EFC                 call    __Unwind_SjLj_Register
.text:00411F01 ; __unwind { // ___gxx_personality_sj0
.text:00411F01 ;   try {
.text:00411F01                 xor     eax, eax
.text:00411F03                 mov     ecx, 0FFFFFFFFh
.text:00411F08                 mov     edi, [esp+6Ch+arg_4]
.text:00411F0C                 repne scasb
.text:00411F0E                 not     ecx
.text:00411F10                 dec     ecx
.text:00411F11                 mov     [esp+6Ch+var_54], ecx
.text:00411F15                 lea     eax, [esp+6Ch+var_D]
.text:00411F19                 mov     [esp+6Ch+var_64], eax ; unsigned int
.text:00411F1D                 mov     [esp+6Ch+var_68], 0 ; unsigned int
.text:00411F25                 mov     [esp+6Ch+lpfctx], 0
.text:00411F2C                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:00411F34                 call    __ZNSs12_S_constructEjcRKSaIcE ; std::string::_S_construct(uint,char,std::allocator<char> const&)
.text:00411F39                 mov     edx, [esp+6Ch+arg_0]
.text:00411F3D                 mov     [edx], eax
.text:00411F3F                 mov     edx, [esp+6Ch+arg_8]
.text:00411F43                 mov     eax, [edx]
.text:00411F45                 mov     eax, [eax-0Ch]
.text:00411F48                 add     eax, [esp+6Ch+var_54]
.text:00411F4C                 mov     [esp+6Ch+lpfctx], eax ; this
.text:00411F4F                 mov     [esp+6Ch+fctx.call_site], 1
.text:00411F57                 mov     ecx, [esp+6Ch+arg_0]
.text:00411F5B                 call    __ZNSs7reserveEj ; std::string::reserve(uint)
.text:00411F60                 push    edi
.text:00411F61                 mov     eax, [esp+6Ch+var_54]
.text:00411F65                 mov     [esp+6Ch+var_68], eax ; std::string *
.text:00411F69                 mov     edx, [esp+6Ch+arg_4]
.text:00411F6D                 mov     [esp+6Ch+lpfctx], edx ; this
.text:00411F70                 mov     ecx, [esp+6Ch+arg_0]
.text:00411F74                 call    __ZNSs6appendEPKcj ; std::string::append(char const*,uint)
.text:00411F79                 sub     esp, 8
.text:00411F7C                 mov     eax, [esp+6Ch+arg_8]
.text:00411F80                 mov     [esp+6Ch+lpfctx], eax ; this
.text:00411F83                 mov     ecx, [esp+6Ch+arg_0]
.text:00411F87                 call    __ZNSs6appendERKSs ; std::string::append(std::string const&)
.text:00411F8C                 push    ecx
.text:00411F8D                 lea     edx, [esp+6Ch+fctx]
.text:00411F91                 mov     [esp+6Ch+lpfctx], edx ; lpfctx
.text:00411F94                 call    __Unwind_SjLj_Unregister
.text:00411F99                 mov     eax, [esp+6Ch+arg_0]
.text:00411F9D                 add     esp, 64h
.text:00411FA0                 pop     edi
.text:00411FA1                 pop     ebp
.text:00411FA2                 retn
.text:00411FA3 ; ---------------------------------------------------------------------------
.text:00411FA3
.text:00411FA3 loc_411FA3:                             ; DATA XREF: std::operator+<char,std::char_traits<char>,std::allocator<char>>(char const*,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const&)+1D↑o
.text:00411FA3 ;   cleanup() // owned by 411F01
.text:00411FA3                 mov     edx, [esp+arg_20]
.text:00411FA7                 mov     [esp+lpuexcpt], edx
.text:00411FAB                 mov     ecx, [esp+arg_6C]
.text:00411FAF                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00411FB4                 mov     eax, [esp+lpuexcpt]
.text:00411FB8                 mov     [esp+0], eax    ; lpuexcpt
.text:00411FBB                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00411FC3                 call    __Unwind_SjLj_Resume
.text:00411FC3 ;   } // starts at 411F01
.text:00411FC3 ; } // starts at 411F01
.text:00411FC3 __ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_ endp
.text:00411FC3
.text:00411FC8
.text:00411FC8 ; =============== S U B R O U T I N E =======================================
.text:00411FC8
.text:00411FC8
.text:00411FC8 ; int __cdecl std::operator+<char,std::char_traits<char>,std::allocator<char>>(int, std::string *, std::string *, int, int, struct _Unwind_Exception *lpuexcpt, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)
.text:00411FC8                 public __ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_
.text:00411FC8 __ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_ proc near
.text:00411FC8
.text:00411FC8 lpfctx          = dword ptr -5Ch
.text:00411FC8 fctx            = SjLj_Function_Context ptr -40h
.text:00411FC8 var_1C          = dword ptr -1Ch
.text:00411FC8 var_18          = dword ptr -18h
.text:00411FC8 var_C           = byte ptr -0Ch
.text:00411FC8 arg_0           = dword ptr  4
.text:00411FC8 arg_4           = dword ptr  8
.text:00411FC8 arg_8           = dword ptr  0Ch
.text:00411FC8 lpuexcpt        = dword ptr  18h
.text:00411FC8 arg_1C          = dword ptr  20h
.text:00411FC8 arg_20          = dword ptr  24h
.text:00411FC8 arg_5C          = dword ptr  60h
.text:00411FC8
.text:00411FC8                 push    ebp
.text:00411FC9                 sub     esp, 58h
.text:00411FCC                 mov     [esp+5Ch+fctx.personality], offset ___gxx_personality_sj0
.text:00411FD4                 mov     [esp+5Ch+fctx.lsda], offset dword_4123D8
.text:00411FDC                 lea     eax, [esp+5Ch+var_C]
.text:00411FE0                 mov     [esp+5Ch+fctx.jbuf], eax
.text:00411FE4                 mov     [esp+5Ch+var_1C], offset loc_412043
.text:00411FEC                 mov     [esp+5Ch+var_18], esp
.text:00411FF0                 lea     eax, [esp+5Ch+fctx]
.text:00411FF4                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:00411FF7                 call    __Unwind_SjLj_Register
.text:00411FFC ; __unwind { // ___gxx_personality_sj0
.text:00411FFC ;   try {
.text:00411FFC                 mov     eax, [esp+5Ch+arg_4]
.text:00412000                 mov     [esp+5Ch+lpfctx], eax ; this
.text:00412003                 mov     [esp+5Ch+fctx.call_site], 0FFFFFFFFh
.text:0041200B                 mov     ecx, [esp+5Ch+arg_0]
.text:0041200F                 call    __ZNSsC1ERKSs   ; std::string::string(std::string const&)
.text:00412014                 push    eax
.text:00412015                 mov     eax, [esp+5Ch+arg_8]
.text:00412019                 mov     [esp+5Ch+lpfctx], eax ; this
.text:0041201C                 mov     [esp+5Ch+fctx.call_site], 1
.text:00412024                 mov     ecx, [esp+5Ch+arg_0]
.text:00412028                 call    __ZNSs6appendERKSs ; std::string::append(std::string const&)
.text:0041202D                 push    eax
.text:0041202E                 lea     eax, [esp+5Ch+fctx]
.text:00412032                 mov     [esp+5Ch+lpfctx], eax ; lpfctx
.text:00412035                 call    __Unwind_SjLj_Unregister
.text:0041203A                 mov     eax, [esp+5Ch+arg_0]
.text:0041203E                 add     esp, 58h
.text:00412041                 pop     ebp
.text:00412042                 retn
.text:00412043 ; ---------------------------------------------------------------------------
.text:00412043
.text:00412043 loc_412043:                             ; DATA XREF: std::operator+<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const&,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const&)+1C↑o
.text:00412043 ;   cleanup() // owned by 411FFC
.text:00412043                 mov     eax, [esp+arg_20]
.text:00412047                 mov     [esp+lpuexcpt], eax
.text:0041204B                 mov     ecx, [esp+arg_5C]
.text:0041204F                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00412054                 mov     eax, [esp+lpuexcpt]
.text:00412058                 mov     [esp+0], eax    ; lpuexcpt
.text:0041205B                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:00412063                 call    __Unwind_SjLj_Resume
.text:00412063 ;   } // starts at 411FFC
.text:00412063 ; } // starts at 411FFC
.text:00412063 __ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_ endp
.text:00412063
.text:00412068
.text:00412068 ; =============== S U B R O U T I N E =======================================
.text:00412068
.text:00412068
.text:00412068 ; int __cdecl std::operator+<char,std::char_traits<char>,std::allocator<char>>(int, char, std::string *, int, struct _Unwind_Exception *lpuexcpt, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)
.text:00412068                 public __ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_
.text:00412068 __ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_ proc near
.text:00412068
.text:00412068 lpfctx          = dword ptr -6Ch
.text:00412068 var_68          = dword ptr -68h
.text:00412068 var_64          = dword ptr -64h
.text:00412068 var_51          = byte ptr -51h
.text:00412068 fctx            = SjLj_Function_Context ptr -50h
.text:00412068 var_2C          = dword ptr -2Ch
.text:00412068 var_28          = dword ptr -28h
.text:00412068 var_D           = byte ptr -0Dh
.text:00412068 var_C           = byte ptr -0Ch
.text:00412068 arg_0           = dword ptr  4
.text:00412068 arg_4           = byte ptr  8
.text:00412068 arg_8           = dword ptr  0Ch
.text:00412068 lpuexcpt        = dword ptr  14h
.text:00412068 arg_1C          = dword ptr  20h
.text:00412068 arg_20          = dword ptr  24h
.text:00412068 arg_6C          = dword ptr  70h
.text:00412068
.text:00412068                 push    ebp
.text:00412069                 sub     esp, 68h
.text:0041206C                 mov     al, [esp+6Ch+arg_4]
.text:00412070                 mov     [esp+6Ch+var_51], al
.text:00412074                 mov     [esp+6Ch+fctx.personality], offset ___gxx_personality_sj0
.text:0041207C                 mov     [esp+6Ch+fctx.lsda], offset word_4123D2
.text:00412084                 lea     edx, [esp+6Ch+var_C]
.text:00412088                 mov     [esp+6Ch+fctx.jbuf], edx
.text:0041208C                 mov     [esp+6Ch+var_2C], offset loc_41212F
.text:00412094                 mov     [esp+6Ch+var_28], esp
.text:00412098                 lea     eax, [esp+6Ch+fctx]
.text:0041209C                 mov     [esp+6Ch+lpfctx], eax ; lpfctx
.text:0041209F                 call    __Unwind_SjLj_Register
.text:004120A4 ; __unwind { // ___gxx_personality_sj0
.text:004120A4 ;   try {
.text:004120A4                 lea     eax, [esp+6Ch+var_D]
.text:004120A8                 mov     [esp+6Ch+var_64], eax
.text:004120AC                 mov     [esp+6Ch+var_68], 0 ; unsigned int
.text:004120B4                 mov     [esp+6Ch+lpfctx], 0
.text:004120BB                 mov     [esp+6Ch+fctx.call_site], 0FFFFFFFFh
.text:004120C3                 call    __ZNSs12_S_constructEjcRKSaIcE ; std::string::_S_construct(uint,char,std::allocator<char> const&)
.text:004120C8                 mov     edx, [esp+6Ch+arg_0]
.text:004120CC                 mov     [edx], eax
.text:004120CE                 mov     edx, [esp+6Ch+arg_8]
.text:004120D2                 mov     eax, [edx]
.text:004120D4                 mov     eax, [eax-0Ch]
.text:004120D7                 inc     eax
.text:004120D8                 mov     [esp+6Ch+lpfctx], eax ; this
.text:004120DB                 mov     [esp+6Ch+fctx.call_site], 1
.text:004120E3                 mov     ecx, [esp+6Ch+arg_0]
.text:004120E7                 call    __ZNSs7reserveEj ; std::string::reserve(uint)
.text:004120EC                 push    eax
.text:004120ED                 movsx   eax, [esp+6Ch+var_51]
.text:004120F2                 mov     [esp+6Ch+var_68], eax ; std::string *
.text:004120F6                 mov     [esp+6Ch+lpfctx], 1
.text:004120FD                 mov     ecx, [esp+6Ch+arg_0]
.text:00412101                 call    __ZNSs6appendEjc_part_22 ; std::string::append(uint,char) [clone]
.text:00412106                 sub     esp, 8
.text:00412109                 mov     eax, [esp+6Ch+arg_8]
.text:0041210D                 mov     [esp+6Ch+lpfctx], eax ; this
.text:00412110                 mov     ecx, [esp+6Ch+arg_0]
.text:00412114                 call    __ZNSs6appendERKSs ; std::string::append(std::string const&)
.text:00412119                 push    ebp
.text:0041211A                 lea     edx, [esp+6Ch+fctx]
.text:0041211E                 mov     [esp+6Ch+lpfctx], edx ; lpfctx
.text:00412121                 call    __Unwind_SjLj_Unregister
.text:00412126                 mov     eax, [esp+6Ch+arg_0]
.text:0041212A                 add     esp, 68h
.text:0041212D                 pop     ebp
.text:0041212E                 retn
.text:0041212F ; ---------------------------------------------------------------------------
.text:0041212F
.text:0041212F loc_41212F:                             ; DATA XREF: std::operator+<char,std::char_traits<char>,std::allocator<char>>(char,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const&)+24↑o
.text:0041212F ;   cleanup() // owned by 4120A4
.text:0041212F                 mov     edx, [esp+arg_20]
.text:00412133                 mov     [esp+lpuexcpt], edx
.text:00412137                 mov     ecx, [esp+arg_6C]
.text:0041213B                 call    __ZNSsD1Ev      ; std::string::~string()
.text:00412140                 mov     eax, [esp+lpuexcpt]
.text:00412144                 mov     [esp+0], eax    ; lpuexcpt
.text:00412147                 mov     [esp+arg_1C], 0FFFFFFFFh
.text:0041214F                 call    __Unwind_SjLj_Resume
.text:0041214F ;   } // starts at 4120A4
.text:0041214F ; } // starts at 4120A4
.text:0041214F __ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_ endp
.text:0041214F
.text:00412154
.text:00412154 ; =============== S U B R O U T I N E =======================================
.text:00412154
.text:00412154 ; Attributes: bp-based frame
.text:00412154
.text:00412154 ; _DWORD __cdecl operator new(unsigned int, void *)
.text:00412154                 public __ZnwjPv
.text:00412154 __ZnwjPv        proc near               ; CODE XREF: __gnu_cxx::new_allocator<int>::construct(int *,int const&)+17↑p
.text:00412154
.text:00412154 arg_4           = dword ptr  0Ch
.text:00412154
.text:00412154                 push    ebp
.text:00412155                 mov     ebp, esp
.text:00412157                 mov     eax, [ebp+arg_4]
.text:0041215A                 pop     ebp
.text:0041215B                 retn
.text:0041215B __ZnwjPv        endp
.text:0041215B
.text:0041215C
.text:0041215C ; =============== S U B R O U T I N E =======================================
.text:0041215C
.text:0041215C
.text:0041215C __GLOBAL__sub_I___cxa_allocate_exception proc near
.text:0041215C
.text:0041215C mutex           = dword ptr -1Ch
.text:0041215C
.text:0041215C                 sub     esp, 1Ch
.text:0041215F                 mov     edx, ds:__CRT_MT
.text:00412165                 test    edx, edx
.text:00412167                 jz      short loc_412175
.text:00412169                 mov     [esp+1Ch+mutex], offset __ZN12_GLOBAL__N_115emergency_mutexE ; mutex
.text:00412170                 call    ___gthr_win32_mutex_init_function
.text:00412175
.text:00412175 loc_412175:                             ; CODE XREF: __GLOBAL__sub_I___cxa_allocate_exception+B↑j
.text:00412175                 mov     [esp+1Ch+mutex], offset ___tcf_0 ; void (__cdecl *)()
.text:0041217C                 call    _atexit
.text:00412181                 add     esp, 1Ch
.text:00412184                 retn
.text:00412184 __GLOBAL__sub_I___cxa_allocate_exception endp
.text:00412184
.text:00412184 ; ---------------------------------------------------------------------------
.text:00412185                 align 4
.text:00412188
.text:00412188 ; =============== S U B R O U T I N E =======================================
.text:00412188
.text:00412188
.text:00412188 __GLOBAL__sub_I__ZNSt14error_categoryC2Ev proc near
.text:00412188                                         ; DATA XREF: .text:00412210↓o
.text:00412188
.text:00412188 var_1C          = dword ptr -1Ch
.text:00412188
.text:00412188                 sub     esp, 1Ch
.text:0041218B                 mov     ds:__ZN12_GLOBAL__N_1L25generic_category_instanceE, offset off_414188 ; `anonymous namespace'::generic_category_instance
.text:00412195                 mov     [esp+1Ch+var_1C], offset ___tcf_0_0 ; void (__cdecl *)()
.text:0041219C                 call    _atexit
.text:004121A1                 mov     ds:__ZN12_GLOBAL__N_1L24system_category_instanceE, offset off_4141C8 ; `anonymous namespace'::system_category_instance
.text:004121AB                 mov     [esp+1Ch+var_1C], offset ___tcf_1 ; void (__cdecl *)()
.text:004121B2                 call    _atexit
.text:004121B7                 add     esp, 1Ch
.text:004121BA                 retn
.text:004121BA __GLOBAL__sub_I__ZNSt14error_categoryC2Ev endp
.text:004121BA
.text:004121BA ; ---------------------------------------------------------------------------
.text:004121BB                 align 4
.text:004121BC
.text:004121BC ; =============== S U B R O U T I N E =======================================
.text:004121BC
.text:004121BC ; Attributes: noreturn
.text:004121BC
.text:004121BC ; void __noreturn __cxxabiv1::throw_recursive_init_exception(void)
.text:004121BC __ZN10__cxxabiv1L30throw_recursive_init_exceptionEv proc near
.text:004121BC                                         ; CODE XREF: ___cxa_guard_acquire+89↑p
.text:004121BC                                         ; ___cxa_guard_acquire+17F↑p
.text:004121BC
.text:004121BC thrown_size     = dword ptr -1Ch
.text:004121BC lptinfo         = dword ptr -18h
.text:004121BC var_14          = dword ptr -14h
.text:004121BC
.text:004121BC                 sub     esp, 1Ch
.text:004121BF                 mov     [esp+1Ch+thrown_size], 4 ; thrown_size
.text:004121C6                 call    ___cxa_allocate_exception
.text:004121CB                 mov     dword ptr [eax], offset off_416328
.text:004121D1                 mov     [esp+1Ch+var_14], offset __ZN9__gnu_cxx20recursive_init_errorD1Ev ; void (__cdecl *)(void *)
.text:004121D9                 mov     [esp+1Ch+lptinfo], offset __ZTIN9__gnu_cxx20recursive_init_errorE ; lptinfo
.text:004121E1                 mov     [esp+1Ch+thrown_size], eax ; void *
.text:004121E4                 call    ___cxa_throw
.text:004121E4 __ZN10__cxxabiv1L30throw_recursive_init_exceptionEv endp
.text:004121E4
.text:004121E4 ; ---------------------------------------------------------------------------
.text:004121E9                 align 4
.text:004121EC
.text:004121EC ; =============== S U B R O U T I N E =======================================
.text:004121EC
.text:004121EC ; Attributes: bp-based frame
.text:004121EC
.text:004121EC _register_frame_ctor proc near          ; DATA XREF: .text:00412214↓o
.text:004121EC                 push    ebp
.text:004121ED                 mov     ebp, esp
.text:004121EF                 sub     esp, 18h
.text:004121F2                 call    ___gcc_register_frame
.text:004121F7                 mov     dword ptr [esp], offset ___gcc_deregister_frame ; void (__cdecl *)()
.text:004121FE                 call    _atexit
.text:00412203                 leave
.text:00412204                 retn
.text:00412204 _register_frame_ctor endp
.text:00412204
.text:00412204 ; ---------------------------------------------------------------------------
.text:00412205                 align 4
.text:00412208                 public ___CTOR_LIST__
.text:00412208 ; func_ptr __CTOR_LIST__[2]
.text:00412208 ___CTOR_LIST__  dd 0FFFFFFFFh, 41215Ch  ; DATA XREF: ___do_global_ctors+4↑r
.text:00412208                                         ; ___do_global_ctors:loc_40CD33↑r ...
.text:00412210                 dd offset __GLOBAL__sub_I__ZNSt14error_categoryC2Ev
.text:00412214                 dd offset _register_frame_ctor
.text:00412218                 dd 0
.text:0041221C                 public __DTOR_LIST__
.text:0041221C ; func_ptr _DTOR_LIST__[2]
.text:0041221C __DTOR_LIST__   dd 0FFFFFFFFh, 0
.text:00412224 dword_412224    dd 601FFFFh, 10000h     ; DATA XREF: _main+1E↑o
.text:0041222C                 db 2, 0
.text:0041222E word_41222E     dw 0FFFFh               ; DATA XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::~_Rb_tree()+13↑o
.text:00412230                 dd 201h
.text:00412234 dword_412234    dd 201FFFFh             ; DATA XREF: std::set<int,std::less<int>,std::allocator<int>>::insert(int const&)+13↑o
.text:00412238                 db 2 dup(0)
.text:0041223A word_41223A     dw 0FFFFh               ; DATA XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::find(int const&)+13↑o
.text:0041223C                 dd 401h
.text:00412240                 db 1, 0
.text:00412242 word_412242     dw 0FFFFh               ; DATA XREF: std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique(int const&)+19↑o
.text:00412244                 dd 801h, 20001h, 3
.text:00412250 dword_412250    dd 10D00FFh, 1010002h, 2 dup(0)
.text:00412250                                         ; DATA XREF: ___gxx_personality_sj0+28↑o
.text:00412260 dword_412260    dd 10D00FFh, 1010004h, 100h, 0
.text:00412260                                         ; DATA XREF: ___cxa_call_unexpected+F↑o
.text:00412270 dword_412270    dd 401FFFFh, 10000h     ; DATA XREF: std::__throw_logic_error(char const*)+C↑o
.text:00412278 dword_412278    dd 401FFFFh, 10000h     ; DATA XREF: std::__throw_domain_error(char const*)+C↑o
.text:00412280 dword_412280    dd 401FFFFh, 10000h     ; DATA XREF: std::__throw_invalid_argument(char const*)+C↑o
.text:00412288 dword_412288    dd 401FFFFh, 10000h     ; DATA XREF: std::__throw_length_error(char const*)+C↑o
.text:00412290 dword_412290    dd 401FFFFh, 10000h     ; DATA XREF: std::__throw_out_of_range(char const*)+C↑o
.text:00412298 dword_412298    dd 401FFFFh, 10000h     ; DATA XREF: std::__throw_runtime_error(char const*)+C↑o
.text:004122A0 dword_4122A0    dd 401FFFFh, 10000h     ; DATA XREF: std::__throw_range_error(char const*)+C↑o
.text:004122A8 dword_4122A8    dd 401FFFFh, 10000h     ; DATA XREF: std::__throw_overflow_error(char const*)+C↑o
.text:004122B0 dword_4122B0    dd 401FFFFh, 10000h     ; DATA XREF: std::__throw_underflow_error(char const*)+C↑o
.text:004122B8 dword_4122B8    dd 201FFFFh             ; DATA XREF: std::__throw_ios_failure(char const*)+C↑o
.text:004122BC                 db 2 dup(0)
.text:004122BE word_4122BE     dw 0FFFFh               ; DATA XREF: std::__throw_system_error(int)+C↑o
.text:004122C0                 dd 401h
.text:004122C4                 db 1, 0
.text:004122C6 word_4122C6     dw 0FFFFh               ; DATA XREF: std::__throw_future_error(int)+C↑o
.text:004122C8                 dd 401h
.text:004122CC                 db 1, 0
.text:004122CE word_4122CE     dw 0FFFFh               ; DATA XREF: std::__throw_regex_error(std::regex_constants::error_type)+C↑o
.text:004122D0                 dd 201h
.text:004122D4 dword_4122D4    dd 10D00FFh, 7F010002h, 0
.text:004122D4                                         ; DATA XREF: operator new(uint)+C↑o
.text:004122E0                 dd offset __ZTISt9bad_alloc ; `typeinfo for'std::bad_alloc
.text:004122E4                 dd 1
.text:004122E8 dword_4122E8    dd 10D00FFh, 1010002h, 2 dup(0)
.text:004122E8                                         ; DATA XREF: __cxxabiv1::__terminate(void (*)(void))+C↑o
.text:004122F8 dword_4122F8    dd 10900FFh, 7F010002h, 2 dup(0)
.text:004122F8                                         ; DATA XREF: std::terminate(void)+C↑o
.text:00412308 dword_412308    dd 10900FFh, 7F010002h, 2 dup(0)
.text:00412308                                         ; DATA XREF: std::set_terminate(void (*)(void))+C↑o
.text:00412318 dword_412318    dd 10900FFh, 7F010002h, 2 dup(0)
.text:00412318                                         ; DATA XREF: std::set_unexpected(void (*)(void))+C↑o
.text:00412328 dword_412328    dd 10900FFh, 7F010002h, 2 dup(0)
.text:00412328                                         ; DATA XREF: ___cxa_get_globals_fast+C↑o
.text:00412338 dword_412338    dd 10900FFh, 7F010002h, 2 dup(0)
.text:00412338                                         ; DATA XREF: ___cxa_get_globals+C↑o
.text:00412348 dword_412348    dd 10900FFh, 1010004h, 7F01h, 0
.text:00412348                                         ; DATA XREF: ___cxa_allocate_exception+D↑o
.text:00412358 dword_412358    dd 10900FFh, 1010004h, 7F01h, 0
.text:00412358                                         ; DATA XREF: ___cxa_free_exception+C↑o
.text:00412368 dword_412368    dd 10900FFh, 1010004h, 7F01h, 0
.text:00412368                                         ; DATA XREF: ___cxa_allocate_dependent_exception+D↑o
.text:00412378 dword_412378    dd 10900FFh, 1010004h, 7F01h, 0
.text:00412378                                         ; DATA XREF: ___cxa_free_dependent_exception+C↑o
.text:00412388 dword_412388    dd 1FFFFh               ; DATA XREF: std::future_error::what(void)+F↑o
.text:0041238C dword_41238C    dd 201FFFFh, 0          ; DATA XREF: `anonymous namespace'::future_error_category::message(int)+10↑o
.text:00412394 dword_412394    dd 201FFFFh             ; DATA XREF: std::logic_error::logic_error(std::string const&)+10↑o
.text:00412398                 db 2 dup(0)
.text:0041239A word_41239A     dw 0FFFFh               ; DATA XREF: std::runtime_error::runtime_error(std::string const&)+10↑o
.text:0041239C                 dd 201h
.text:004123A0 dword_4123A0    dd 1FFFFh               ; DATA XREF: std::string::string(std::string &&)+14↑o
.text:004123A4 dword_4123A4    dd 1FFFFh               ; DATA XREF: std::string::string(std::string &&)+14↑o
.text:004123A8 dword_4123A8    dd 1FFFFh               ; DATA XREF: std::string::clear(void)+C↑o
.text:004123AC dword_4123AC    dd 1FFFFh               ; DATA XREF: std::string::rend(void)+14↑o
.text:004123B0 dword_4123B0    dd 1FFFFh               ; DATA XREF: std::string::rbegin(void)+14↑o
.text:004123B4 dword_4123B4    dd 1FFFFh               ; DATA XREF: std::string::end(void)+F↑o
.text:004123B8 dword_4123B8    dd 1FFFFh               ; DATA XREF: std::string::begin(void)+10↑o
.text:004123BC dword_4123BC    dd 10D00FFh, 1010002h, 2 dup(0)
.text:004123BC                                         ; DATA XREF: std::string::shrink_to_fit(void)+13↑o
.text:004123CC dword_4123CC    dd 201FFFFh             ; DATA XREF: std::operator+<char,std::char_traits<char>,std::allocator<char>>(char const*,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const&)+D↑o
.text:004123D0                 db 2 dup(0)
.text:004123D2 word_4123D2     dw 0FFFFh               ; DATA XREF: std::operator+<char,std::char_traits<char>,std::allocator<char>>(char,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const&)+14↑o
.text:004123D4                 dd 201h
.text:004123D8 dword_4123D8    dd 201FFFFh             ; DATA XREF: std::operator+<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const&,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const&)+C↑o
.text:004123DC                 db 2 dup(0)
.text:004123DE word_4123DE     dw 0FFFFh               ; DATA XREF: std::string::replace(uint,uint,char const*,uint)+12↑o
.text:004123E0                 dd 201h
.text:004123E4 dword_4123E4    dd 10900FFh, 7F030002h, 7D0000h, 0
.text:004123E4                                         ; DATA XREF: std::ios_base::failure::failure(std::string const&)+10↑o
.text:004123F4 dword_4123F4    dd 201FFFFh, 0          ; DATA XREF: std::regex_error::regex_error(std::regex_constants::error_type)+10↑o
.text:004123FC dword_4123FC    dd 201FFFFh, 0          ; DATA XREF: ___cxa_guard_acquire+C↑o
.text:00412404 dword_412404    dd 10900FFh, 7F010002h, 2 dup(0)
.text:00412404                                         ; DATA XREF: ___cxa_guard_abort+C↑o
.text:00412414 dword_412414    dd 10900FFh, 7F010002h, 2 dup(0)
.text:00412414                                         ; DATA XREF: ___cxa_guard_release+C↑o
.text:00412424 dword_412424    dd 11100FFh, 2030002h, 7D0100h, 0
.text:00412424                                         ; DATA XREF: __gnu_cxx::__verbose_terminate_handler(void)+C↑o
.text:00412434                 dd offset __ZTISt9exception ; `typeinfo for'std::exception
.text:00412438                 align 200h
.text:00412600                 dd 280h dup(?)
.text:00412600 _text           ends
.text:00412600